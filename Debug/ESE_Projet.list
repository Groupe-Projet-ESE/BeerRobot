
ESE_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015fb4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  08016078  08016078  00026078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ecc  08016ecc  000304bc  2**0
                  CONTENTS
  4 .ARM          00000000  08016ecc  08016ecc  000304bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016ecc  08016ecc  000304bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016ecc  08016ecc  00026ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ed0  08016ed0  00026ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  08016ed4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ab4  200004bc  08017390  000304bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f70  08017390  00035f70  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aeca  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b7a  00000000  00000000  0005b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002140  00000000  00000000  00060f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  00063068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e724  00000000  00000000  00064f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac6d  00000000  00000000  0008366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac9b3  00000000  00000000  000ae2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ac8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c10  00000000  00000000  0015acdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004bc 	.word	0x200004bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801605c 	.word	0x0801605c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c0 	.word	0x200004c0
 8000104:	0801605c 	.word	0x0801605c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0d 	bl	800125c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe5d 	bl	800110c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feff 	bl	800125c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef5 	bl	800125c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe85 	bl	8001190 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7b 	bl	8001190 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fe5a 	bl	8002214 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fd5a 	bl	8002214 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff fb0f 	bl	800024c <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fafb 	bl	800024c <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff faa3 	bl	800024c <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa96 	bl	800024c <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 fa22 	bl	8002214 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 fa06 	bl	8002214 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	080168e4 	.word	0x080168e4
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f937 	bl	8002214 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f928 	bl	8002214 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fe1e 	bl	8002214 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fe00 	bl	8002214 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	08016924 	.word	0x08016924
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fd50 	bl	8002214 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fd42 	bl	8002214 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fcac 	bl	8002214 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fb74 	bl	8002214 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f91c 	bl	8002214 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f8f1 	bl	8002214 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__aeabi_f2d>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	0043      	lsls	r3, r0, #1
 8002078:	0246      	lsls	r6, r0, #9
 800207a:	0fc4      	lsrs	r4, r0, #31
 800207c:	20fe      	movs	r0, #254	; 0xfe
 800207e:	0e1b      	lsrs	r3, r3, #24
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	0a75      	lsrs	r5, r6, #9
 8002084:	4208      	tst	r0, r1
 8002086:	d00c      	beq.n	80020a2 <__aeabi_f2d+0x2e>
 8002088:	22e0      	movs	r2, #224	; 0xe0
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4694      	mov	ip, r2
 800208e:	076d      	lsls	r5, r5, #29
 8002090:	0b36      	lsrs	r6, r6, #12
 8002092:	4463      	add	r3, ip
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	4333      	orrs	r3, r6
 8002098:	07e4      	lsls	r4, r4, #31
 800209a:	4323      	orrs	r3, r4
 800209c:	0028      	movs	r0, r5
 800209e:	0019      	movs	r1, r3
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d114      	bne.n	80020d0 <__aeabi_f2d+0x5c>
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d01b      	beq.n	80020e2 <__aeabi_f2d+0x6e>
 80020aa:	0028      	movs	r0, r5
 80020ac:	f000 f8b2 	bl	8002214 <__clzsi2>
 80020b0:	280a      	cmp	r0, #10
 80020b2:	dc1c      	bgt.n	80020ee <__aeabi_f2d+0x7a>
 80020b4:	230b      	movs	r3, #11
 80020b6:	002e      	movs	r6, r5
 80020b8:	1a1b      	subs	r3, r3, r0
 80020ba:	40de      	lsrs	r6, r3
 80020bc:	0003      	movs	r3, r0
 80020be:	3315      	adds	r3, #21
 80020c0:	409d      	lsls	r5, r3
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <__aeabi_f2d+0x88>)
 80020c4:	0336      	lsls	r6, r6, #12
 80020c6:	1a12      	subs	r2, r2, r0
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	0b36      	lsrs	r6, r6, #12
 80020cc:	0d53      	lsrs	r3, r2, #21
 80020ce:	e7e1      	b.n	8002094 <__aeabi_f2d+0x20>
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d009      	beq.n	80020e8 <__aeabi_f2d+0x74>
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0b36      	lsrs	r6, r6, #12
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <__aeabi_f2d+0x8c>)
 80020dc:	076d      	lsls	r5, r5, #29
 80020de:	4316      	orrs	r6, r2
 80020e0:	e7d8      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2600      	movs	r6, #0
 80020e6:	e7d5      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e8:	2600      	movs	r6, #0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <__aeabi_f2d+0x8c>)
 80020ec:	e7d2      	b.n	8002094 <__aeabi_f2d+0x20>
 80020ee:	0003      	movs	r3, r0
 80020f0:	3b0b      	subs	r3, #11
 80020f2:	409d      	lsls	r5, r3
 80020f4:	002e      	movs	r6, r5
 80020f6:	2500      	movs	r5, #0
 80020f8:	e7e3      	b.n	80020c2 <__aeabi_f2d+0x4e>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	00000389 	.word	0x00000389
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2f>:
 8002104:	0002      	movs	r2, r0
 8002106:	004b      	lsls	r3, r1, #1
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	4e3d      	ldr	r6, [pc, #244]	; (8002204 <__aeabi_d2f+0x100>)
 8002110:	0a64      	lsrs	r4, r4, #9
 8002112:	0f40      	lsrs	r0, r0, #29
 8002114:	1c5f      	adds	r7, r3, #1
 8002116:	0fc9      	lsrs	r1, r1, #31
 8002118:	4304      	orrs	r4, r0
 800211a:	00d5      	lsls	r5, r2, #3
 800211c:	4237      	tst	r7, r6
 800211e:	d00a      	beq.n	8002136 <__aeabi_d2f+0x32>
 8002120:	4839      	ldr	r0, [pc, #228]	; (8002208 <__aeabi_d2f+0x104>)
 8002122:	181e      	adds	r6, r3, r0
 8002124:	2efe      	cmp	r6, #254	; 0xfe
 8002126:	dd16      	ble.n	8002156 <__aeabi_d2f+0x52>
 8002128:	20ff      	movs	r0, #255	; 0xff
 800212a:	2400      	movs	r4, #0
 800212c:	05c0      	lsls	r0, r0, #23
 800212e:	4320      	orrs	r0, r4
 8002130:	07c9      	lsls	r1, r1, #31
 8002132:	4308      	orrs	r0, r1
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <__aeabi_d2f+0x44>
 800213a:	432c      	orrs	r4, r5
 800213c:	d026      	beq.n	800218c <__aeabi_d2f+0x88>
 800213e:	2205      	movs	r2, #5
 8002140:	0192      	lsls	r2, r2, #6
 8002142:	0a54      	lsrs	r4, r2, #9
 8002144:	b2d8      	uxtb	r0, r3
 8002146:	e7f1      	b.n	800212c <__aeabi_d2f+0x28>
 8002148:	4325      	orrs	r5, r4
 800214a:	d0ed      	beq.n	8002128 <__aeabi_d2f+0x24>
 800214c:	2080      	movs	r0, #128	; 0x80
 800214e:	03c0      	lsls	r0, r0, #15
 8002150:	4304      	orrs	r4, r0
 8002152:	20ff      	movs	r0, #255	; 0xff
 8002154:	e7ea      	b.n	800212c <__aeabi_d2f+0x28>
 8002156:	2e00      	cmp	r6, #0
 8002158:	dd1b      	ble.n	8002192 <__aeabi_d2f+0x8e>
 800215a:	0192      	lsls	r2, r2, #6
 800215c:	1e53      	subs	r3, r2, #1
 800215e:	419a      	sbcs	r2, r3
 8002160:	00e4      	lsls	r4, r4, #3
 8002162:	0f6d      	lsrs	r5, r5, #29
 8002164:	4322      	orrs	r2, r4
 8002166:	432a      	orrs	r2, r5
 8002168:	0753      	lsls	r3, r2, #29
 800216a:	d048      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800216c:	230f      	movs	r3, #15
 800216e:	4013      	ands	r3, r2
 8002170:	2b04      	cmp	r3, #4
 8002172:	d000      	beq.n	8002176 <__aeabi_d2f+0x72>
 8002174:	3204      	adds	r2, #4
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	04db      	lsls	r3, r3, #19
 800217a:	4013      	ands	r3, r2
 800217c:	d03f      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800217e:	1c70      	adds	r0, r6, #1
 8002180:	2efe      	cmp	r6, #254	; 0xfe
 8002182:	d0d1      	beq.n	8002128 <__aeabi_d2f+0x24>
 8002184:	0192      	lsls	r2, r2, #6
 8002186:	0a54      	lsrs	r4, r2, #9
 8002188:	b2c0      	uxtb	r0, r0
 800218a:	e7cf      	b.n	800212c <__aeabi_d2f+0x28>
 800218c:	2000      	movs	r0, #0
 800218e:	2400      	movs	r4, #0
 8002190:	e7cc      	b.n	800212c <__aeabi_d2f+0x28>
 8002192:	0032      	movs	r2, r6
 8002194:	3217      	adds	r2, #23
 8002196:	db22      	blt.n	80021de <__aeabi_d2f+0xda>
 8002198:	2080      	movs	r0, #128	; 0x80
 800219a:	0400      	lsls	r0, r0, #16
 800219c:	4320      	orrs	r0, r4
 800219e:	241e      	movs	r4, #30
 80021a0:	1ba4      	subs	r4, r4, r6
 80021a2:	2c1f      	cmp	r4, #31
 80021a4:	dd1d      	ble.n	80021e2 <__aeabi_d2f+0xde>
 80021a6:	2202      	movs	r2, #2
 80021a8:	4252      	negs	r2, r2
 80021aa:	1b96      	subs	r6, r2, r6
 80021ac:	0002      	movs	r2, r0
 80021ae:	40f2      	lsrs	r2, r6
 80021b0:	0016      	movs	r6, r2
 80021b2:	2c20      	cmp	r4, #32
 80021b4:	d004      	beq.n	80021c0 <__aeabi_d2f+0xbc>
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <__aeabi_d2f+0x108>)
 80021b8:	4694      	mov	ip, r2
 80021ba:	4463      	add	r3, ip
 80021bc:	4098      	lsls	r0, r3
 80021be:	4305      	orrs	r5, r0
 80021c0:	002a      	movs	r2, r5
 80021c2:	1e53      	subs	r3, r2, #1
 80021c4:	419a      	sbcs	r2, r3
 80021c6:	4332      	orrs	r2, r6
 80021c8:	2600      	movs	r6, #0
 80021ca:	0753      	lsls	r3, r2, #29
 80021cc:	d1ce      	bne.n	800216c <__aeabi_d2f+0x68>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	0013      	movs	r3, r2
 80021d2:	04e4      	lsls	r4, r4, #19
 80021d4:	2001      	movs	r0, #1
 80021d6:	4023      	ands	r3, r4
 80021d8:	4222      	tst	r2, r4
 80021da:	d1d3      	bne.n	8002184 <__aeabi_d2f+0x80>
 80021dc:	e7b0      	b.n	8002140 <__aeabi_d2f+0x3c>
 80021de:	2300      	movs	r3, #0
 80021e0:	e7ad      	b.n	800213e <__aeabi_d2f+0x3a>
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <__aeabi_d2f+0x10c>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	002a      	movs	r2, r5
 80021e8:	40e2      	lsrs	r2, r4
 80021ea:	0014      	movs	r4, r2
 80021ec:	002a      	movs	r2, r5
 80021ee:	4463      	add	r3, ip
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4098      	lsls	r0, r3
 80021f4:	1e55      	subs	r5, r2, #1
 80021f6:	41aa      	sbcs	r2, r5
 80021f8:	4302      	orrs	r2, r0
 80021fa:	4322      	orrs	r2, r4
 80021fc:	e7e4      	b.n	80021c8 <__aeabi_d2f+0xc4>
 80021fe:	0033      	movs	r3, r6
 8002200:	e79e      	b.n	8002140 <__aeabi_d2f+0x3c>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	000007fe 	.word	0x000007fe
 8002208:	fffffc80 	.word	0xfffffc80
 800220c:	fffffca2 	.word	0xfffffca2
 8002210:	fffffc82 	.word	0xfffffc82

08002214 <__clzsi2>:
 8002214:	211c      	movs	r1, #28
 8002216:	2301      	movs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0xe>
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	3910      	subs	r1, #16
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	4298      	cmp	r0, r3
 8002226:	d301      	bcc.n	800222c <__clzsi2+0x18>
 8002228:	0a00      	lsrs	r0, r0, #8
 800222a:	3908      	subs	r1, #8
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0x22>
 8002232:	0900      	lsrs	r0, r0, #4
 8002234:	3904      	subs	r1, #4
 8002236:	a202      	add	r2, pc, #8	; (adr r2, 8002240 <__clzsi2+0x2c>)
 8002238:	5c10      	ldrb	r0, [r2, r0]
 800223a:	1840      	adds	r0, r0, r1
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	02020304 	.word	0x02020304
 8002244:	01010101 	.word	0x01010101
	...

08002250 <encoder_shell>:
TaskHandle_t h_encoder_print = NULL;

h_encoder_t encoder_left; //TIM1
h_encoder_t encoder_right; //TIM3

int encoder_shell(h_shell_t * pshell, int argc, char ** argv){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	if (argc == 1){
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10e      	bne.n	8002280 <encoder_shell+0x30>
		if(*argv[0]=='e'){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b65      	cmp	r3, #101	; 0x65
 800226a:	d110      	bne.n	800228e <encoder_shell+0x3e>
			printf("L'encodeur est activé\r\n");
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <encoder_shell+0x48>)
 800226e:	0018      	movs	r0, r3
 8002270:	f011 faf0 	bl	8013854 <puts>
			vTaskResume(h_encoder);
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <encoder_shell+0x4c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f00f f96f 	bl	801155c <vTaskResume>
 800227e:	e006      	b.n	800228e <encoder_shell+0x3e>
		}
	}
	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <encoder_shell+0x50>)
 8002282:	0018      	movs	r0, r3
 8002284:	f011 fae6 	bl	8013854 <puts>
		return -1;
 8002288:	2301      	movs	r3, #1
 800228a:	425b      	negs	r3, r3
 800228c:	e000      	b.n	8002290 <encoder_shell+0x40>
	}
	return 0;
 800228e:	2300      	movs	r3, #0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	08016078 	.word	0x08016078
 800229c:	200004d8 	.word	0x200004d8
 80022a0:	08016090 	.word	0x08016090

080022a4 <taskEncoder>:

void taskEncoder(void *pEncoder){
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur créée\r\n");
 80022ac:	4bc0      	ldr	r3, [pc, #768]	; (80025b0 <taskEncoder+0x30c>)
 80022ae:	0018      	movs	r0, r3
 80022b0:	f011 fad0 	bl	8013854 <puts>
	vTaskSuspend(0);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f00f f8c5 	bl	8011444 <vTaskSuspend>

	encoder_left.Ts= 5;
 80022ba:	4bbe      	ldr	r3, [pc, #760]	; (80025b4 <taskEncoder+0x310>)
 80022bc:	22d0      	movs	r2, #208	; 0xd0
 80022be:	2105      	movs	r1, #5
 80022c0:	5499      	strb	r1, [r3, r2]
	encoder_right.Ts = 5;
 80022c2:	4bbd      	ldr	r3, [pc, #756]	; (80025b8 <taskEncoder+0x314>)
 80022c4:	22d0      	movs	r2, #208	; 0xd0
 80022c6:	2105      	movs	r1, #5
 80022c8:	5499      	strb	r1, [r3, r2]

	encoder_left.position=0;
 80022ca:	4bba      	ldr	r3, [pc, #744]	; (80025b4 <taskEncoder+0x310>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	805a      	strh	r2, [r3, #2]
	encoder_right.position=0;
 80022d0:	4bb9      	ldr	r3, [pc, #740]	; (80025b8 <taskEncoder+0x314>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	805a      	strh	r2, [r3, #2]


	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80022d6:	4bb9      	ldr	r3, [pc, #740]	; (80025bc <taskEncoder+0x318>)
 80022d8:	213c      	movs	r1, #60	; 0x3c
 80022da:	0018      	movs	r0, r3
 80022dc:	f005 fb00 	bl	80078e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80022e0:	4bb7      	ldr	r3, [pc, #732]	; (80025c0 <taskEncoder+0x31c>)
 80022e2:	213c      	movs	r1, #60	; 0x3c
 80022e4:	0018      	movs	r0, r3
 80022e6:	f005 fafb 	bl	80078e0 <HAL_TIM_Encoder_Start>
	int index = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
	for(;;){
		encoder_left.speed=0;
 80022ee:	4bb1      	ldr	r3, [pc, #708]	; (80025b4 <taskEncoder+0x310>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
		encoder_right.speed=0;
 80022f4:	4bb0      	ldr	r3, [pc, #704]	; (80025b8 <taskEncoder+0x314>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]
		encoder_left.countTIM = __HAL_TIM_GET_COUNTER(&htim1);
 80022fa:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <taskEncoder+0x318>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b21a      	sxth	r2, r3
 8002302:	4bac      	ldr	r3, [pc, #688]	; (80025b4 <taskEncoder+0x310>)
 8002304:	801a      	strh	r2, [r3, #0]
		encoder_right.countTIM =__HAL_TIM_GET_COUNTER(&htim3);
 8002306:	4bae      	ldr	r3, [pc, #696]	; (80025c0 <taskEncoder+0x31c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b21a      	sxth	r2, r3
 800230e:	4baa      	ldr	r3, [pc, #680]	; (80025b8 <taskEncoder+0x314>)
 8002310:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002312:	4baa      	ldr	r3, [pc, #680]	; (80025bc <taskEncoder+0x318>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800231a:	4ba9      	ldr	r3, [pc, #676]	; (80025c0 <taskEncoder+0x31c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
		if (encoder_left.countTIM<((TIM1->ARR)/2)){//recule
 8002322:	4ba4      	ldr	r3, [pc, #656]	; (80025b4 <taskEncoder+0x310>)
 8002324:	2200      	movs	r2, #0
 8002326:	5e9b      	ldrsh	r3, [r3, r2]
 8002328:	001a      	movs	r2, r3
 800232a:	4ba6      	ldr	r3, [pc, #664]	; (80025c4 <taskEncoder+0x320>)
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	429a      	cmp	r2, r3
 8002332:	d300      	bcc.n	8002336 <taskEncoder+0x92>
 8002334:	e096      	b.n	8002464 <taskEncoder+0x1c0>
			encoder_left.tab_pos[index]=-1*encoder_left.countTIM;
 8002336:	4b9f      	ldr	r3, [pc, #636]	; (80025b4 <taskEncoder+0x310>)
 8002338:	2200      	movs	r2, #0
 800233a:	5e9b      	ldrsh	r3, [r3, r2]
 800233c:	b29b      	uxth	r3, r3
 800233e:	425b      	negs	r3, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	b219      	sxth	r1, r3
 8002344:	4b9b      	ldr	r3, [pc, #620]	; (80025b4 <taskEncoder+0x310>)
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	3204      	adds	r2, #4
 800234a:	0052      	lsls	r2, r2, #1
 800234c:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM-(TIM1->ARR);
 800234e:	4b9a      	ldr	r3, [pc, #616]	; (80025b8 <taskEncoder+0x314>)
 8002350:	2200      	movs	r2, #0
 8002352:	5e9b      	ldrsh	r3, [r3, r2]
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b9b      	ldr	r3, [pc, #620]	; (80025c4 <taskEncoder+0x320>)
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	b29b      	uxth	r3, r3
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	b29b      	uxth	r3, r3
 8002360:	b219      	sxth	r1, r3
 8002362:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <taskEncoder+0x314>)
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	3204      	adds	r2, #4
 8002368:	0052      	lsls	r2, r2, #1
 800236a:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=-1*(encoder_left.countTIM/REVOLUTION)*2*PI*R/1000;
 800236c:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <taskEncoder+0x310>)
 800236e:	2202      	movs	r2, #2
 8002370:	5e9b      	ldrsh	r3, [r3, r2]
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff fe28 	bl	8001fc8 <__aeabi_i2d>
 8002378:	0004      	movs	r4, r0
 800237a:	000d      	movs	r5, r1
 800237c:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <taskEncoder+0x310>)
 800237e:	2200      	movs	r2, #0
 8002380:	5e9b      	ldrsh	r3, [r3, r2]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	0018      	movs	r0, r3
 8002386:	f7fd ff65 	bl	8000254 <__divsi3>
 800238a:	0003      	movs	r3, r0
 800238c:	b21b      	sxth	r3, r3
 800238e:	001a      	movs	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	07db      	lsls	r3, r3, #31
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fe15 	bl	8001fc8 <__aeabi_i2d>
 800239e:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <taskEncoder+0x324>)
 80023a0:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <taskEncoder+0x328>)
 80023a2:	f7fe ffbf 	bl	8001324 <__aeabi_dmul>
 80023a6:	0002      	movs	r2, r0
 80023a8:	000b      	movs	r3, r1
 80023aa:	0010      	movs	r0, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	2200      	movs	r2, #0
 80023b0:	4b87      	ldr	r3, [pc, #540]	; (80025d0 <taskEncoder+0x32c>)
 80023b2:	f7fe ffb7 	bl	8001324 <__aeabi_dmul>
 80023b6:	0002      	movs	r2, r0
 80023b8:	000b      	movs	r3, r1
 80023ba:	0010      	movs	r0, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	4b84      	ldr	r3, [pc, #528]	; (80025d4 <taskEncoder+0x330>)
 80023c2:	f7fe fbad 	bl	8000b20 <__aeabi_ddiv>
 80023c6:	0002      	movs	r2, r0
 80023c8:	000b      	movs	r3, r1
 80023ca:	0020      	movs	r0, r4
 80023cc:	0029      	movs	r1, r5
 80023ce:	f7fe f86b 	bl	80004a8 <__aeabi_dadd>
 80023d2:	0002      	movs	r2, r0
 80023d4:	000b      	movs	r3, r1
 80023d6:	0010      	movs	r0, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	f7ff fdbf 	bl	8001f5c <__aeabi_d2iz>
 80023de:	0003      	movs	r3, r0
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <taskEncoder+0x310>)
 80023e4:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM-(TIM1->ARR))/REVOLUTION*2*PI*R/1000;
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <taskEncoder+0x314>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	5e9b      	ldrsh	r3, [r3, r2]
 80023ec:	001a      	movs	r2, r3
 80023ee:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <taskEncoder+0x320>)
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7fd fea2 	bl	8000140 <__udivsi3>
 80023fc:	0003      	movs	r3, r0
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff fe11 	bl	8002028 <__aeabi_ui2d>
 8002406:	4a70      	ldr	r2, [pc, #448]	; (80025c8 <taskEncoder+0x324>)
 8002408:	4b70      	ldr	r3, [pc, #448]	; (80025cc <taskEncoder+0x328>)
 800240a:	f7fe ff8b 	bl	8001324 <__aeabi_dmul>
 800240e:	0002      	movs	r2, r0
 8002410:	000b      	movs	r3, r1
 8002412:	0010      	movs	r0, r2
 8002414:	0019      	movs	r1, r3
 8002416:	2200      	movs	r2, #0
 8002418:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <taskEncoder+0x32c>)
 800241a:	f7fe ff83 	bl	8001324 <__aeabi_dmul>
 800241e:	0002      	movs	r2, r0
 8002420:	000b      	movs	r3, r1
 8002422:	0010      	movs	r0, r2
 8002424:	0019      	movs	r1, r3
 8002426:	2200      	movs	r2, #0
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <taskEncoder+0x330>)
 800242a:	f7fe fb79 	bl	8000b20 <__aeabi_ddiv>
 800242e:	0002      	movs	r2, r0
 8002430:	000b      	movs	r3, r1
 8002432:	0014      	movs	r4, r2
 8002434:	001d      	movs	r5, r3
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <taskEncoder+0x314>)
 8002438:	2202      	movs	r2, #2
 800243a:	5e9b      	ldrsh	r3, [r3, r2]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff fdc3 	bl	8001fc8 <__aeabi_i2d>
 8002442:	0002      	movs	r2, r0
 8002444:	000b      	movs	r3, r1
 8002446:	0020      	movs	r0, r4
 8002448:	0029      	movs	r1, r5
 800244a:	f7fe f82d 	bl	80004a8 <__aeabi_dadd>
 800244e:	0002      	movs	r2, r0
 8002450:	000b      	movs	r3, r1
 8002452:	0010      	movs	r0, r2
 8002454:	0019      	movs	r1, r3
 8002456:	f7ff fd81 	bl	8001f5c <__aeabi_d2iz>
 800245a:	0003      	movs	r3, r0
 800245c:	b21a      	sxth	r2, r3
 800245e:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <taskEncoder+0x314>)
 8002460:	805a      	strh	r2, [r3, #2]
 8002462:	e08c      	b.n	800257e <taskEncoder+0x2da>
		}
		else{//avance
			encoder_left.tab_pos[index]=(TIM1->ARR)-encoder_left.countTIM;
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <taskEncoder+0x320>)
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <taskEncoder+0x310>)
 800246c:	2100      	movs	r1, #0
 800246e:	5e5b      	ldrsh	r3, [r3, r1]
 8002470:	b29b      	uxth	r3, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b29b      	uxth	r3, r3
 8002476:	b219      	sxth	r1, r3
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <taskEncoder+0x310>)
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	3204      	adds	r2, #4
 800247e:	0052      	lsls	r2, r2, #1
 8002480:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM;
 8002482:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <taskEncoder+0x314>)
 8002484:	2100      	movs	r1, #0
 8002486:	5e59      	ldrsh	r1, [r3, r1]
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <taskEncoder+0x314>)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	3204      	adds	r2, #4
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=((TIM1->ARR)-encoder_left.countTIM)/REVOLUTION*2*PI*R/1000;
 8002492:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <taskEncoder+0x320>)
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <taskEncoder+0x310>)
 8002498:	2100      	movs	r1, #0
 800249a:	5e52      	ldrsh	r2, [r2, r1]
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fd fe4d 	bl	8000140 <__udivsi3>
 80024a6:	0003      	movs	r3, r0
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff fdbc 	bl	8002028 <__aeabi_ui2d>
 80024b0:	4a45      	ldr	r2, [pc, #276]	; (80025c8 <taskEncoder+0x324>)
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <taskEncoder+0x328>)
 80024b4:	f7fe ff36 	bl	8001324 <__aeabi_dmul>
 80024b8:	0002      	movs	r2, r0
 80024ba:	000b      	movs	r3, r1
 80024bc:	0010      	movs	r0, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <taskEncoder+0x32c>)
 80024c4:	f7fe ff2e 	bl	8001324 <__aeabi_dmul>
 80024c8:	0002      	movs	r2, r0
 80024ca:	000b      	movs	r3, r1
 80024cc:	0010      	movs	r0, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <taskEncoder+0x330>)
 80024d4:	f7fe fb24 	bl	8000b20 <__aeabi_ddiv>
 80024d8:	0002      	movs	r2, r0
 80024da:	000b      	movs	r3, r1
 80024dc:	0014      	movs	r4, r2
 80024de:	001d      	movs	r5, r3
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <taskEncoder+0x310>)
 80024e2:	2202      	movs	r2, #2
 80024e4:	5e9b      	ldrsh	r3, [r3, r2]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fd6e 	bl	8001fc8 <__aeabi_i2d>
 80024ec:	0002      	movs	r2, r0
 80024ee:	000b      	movs	r3, r1
 80024f0:	0020      	movs	r0, r4
 80024f2:	0029      	movs	r1, r5
 80024f4:	f7fd ffd8 	bl	80004a8 <__aeabi_dadd>
 80024f8:	0002      	movs	r2, r0
 80024fa:	000b      	movs	r3, r1
 80024fc:	0010      	movs	r0, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	f7ff fd2c 	bl	8001f5c <__aeabi_d2iz>
 8002504:	0003      	movs	r3, r0
 8002506:	b21a      	sxth	r2, r3
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <taskEncoder+0x310>)
 800250a:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM/REVOLUTION)*2*PI*R/1000;
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <taskEncoder+0x314>)
 800250e:	2202      	movs	r2, #2
 8002510:	5e9b      	ldrsh	r3, [r3, r2]
 8002512:	0018      	movs	r0, r3
 8002514:	f7ff fd58 	bl	8001fc8 <__aeabi_i2d>
 8002518:	0004      	movs	r4, r0
 800251a:	000d      	movs	r5, r1
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <taskEncoder+0x314>)
 800251e:	2200      	movs	r2, #0
 8002520:	5e9b      	ldrsh	r3, [r3, r2]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	0018      	movs	r0, r3
 8002526:	f7fd fe95 	bl	8000254 <__divsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	b21b      	sxth	r3, r3
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff fd49 	bl	8001fc8 <__aeabi_i2d>
 8002536:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <taskEncoder+0x324>)
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <taskEncoder+0x328>)
 800253a:	f7fe fef3 	bl	8001324 <__aeabi_dmul>
 800253e:	0002      	movs	r2, r0
 8002540:	000b      	movs	r3, r1
 8002542:	0010      	movs	r0, r2
 8002544:	0019      	movs	r1, r3
 8002546:	2200      	movs	r2, #0
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <taskEncoder+0x32c>)
 800254a:	f7fe feeb 	bl	8001324 <__aeabi_dmul>
 800254e:	0002      	movs	r2, r0
 8002550:	000b      	movs	r3, r1
 8002552:	0010      	movs	r0, r2
 8002554:	0019      	movs	r1, r3
 8002556:	2200      	movs	r2, #0
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <taskEncoder+0x330>)
 800255a:	f7fe fae1 	bl	8000b20 <__aeabi_ddiv>
 800255e:	0002      	movs	r2, r0
 8002560:	000b      	movs	r3, r1
 8002562:	0020      	movs	r0, r4
 8002564:	0029      	movs	r1, r5
 8002566:	f7fd ff9f 	bl	80004a8 <__aeabi_dadd>
 800256a:	0002      	movs	r2, r0
 800256c:	000b      	movs	r3, r1
 800256e:	0010      	movs	r0, r2
 8002570:	0019      	movs	r1, r3
 8002572:	f7ff fcf3 	bl	8001f5c <__aeabi_d2iz>
 8002576:	0003      	movs	r3, r0
 8002578:	b21a      	sxth	r2, r3
 800257a:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <taskEncoder+0x314>)
 800257c:	805a      	strh	r2, [r3, #2]

		}
		index++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3301      	adds	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
		if(index==TAB_SIZE){
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d10b      	bne.n	80025a2 <taskEncoder+0x2fe>
			xTaskNotifyGive(h_encoder_print);
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <taskEncoder+0x334>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	2202      	movs	r2, #2
 8002592:	2100      	movs	r1, #0
 8002594:	f00f fce2 	bl	8011f5c <xTaskGenericNotify>
			vTaskSuspend(0);
 8002598:	2000      	movs	r0, #0
 800259a:	f00e ff53 	bl	8011444 <vTaskSuspend>
			index=0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
		}
		vTaskDelay(encoder_left.Ts);
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <taskEncoder+0x310>)
 80025a4:	22d0      	movs	r2, #208	; 0xd0
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f00e ff25 	bl	80113f8 <vTaskDelay>
		encoder_left.speed=0;
 80025ae:	e69e      	b.n	80022ee <taskEncoder+0x4a>
 80025b0:	080160b8 	.word	0x080160b8
 80025b4:	200004e0 	.word	0x200004e0
 80025b8:	200005b4 	.word	0x200005b4
 80025bc:	20000b08 	.word	0x20000b08
 80025c0:	20000b54 	.word	0x20000b54
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	f01b866e 	.word	0xf01b866e
 80025cc:	400921f9 	.word	0x400921f9
 80025d0:	40350000 	.word	0x40350000
 80025d4:	408f4000 	.word	0x408f4000
 80025d8:	200004dc 	.word	0x200004dc

080025dc <taskEncoderPrint>:
	}
}

void taskEncoderPrint(void *pPrint){
 80025dc:	b5b0      	push	{r4, r5, r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur print créée\r\n");
 80025e4:	4b69      	ldr	r3, [pc, #420]	; (800278c <taskEncoderPrint+0x1b0>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f011 f934 	bl	8013854 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80025ec:	2301      	movs	r3, #1
 80025ee:	425b      	negs	r3, r3
 80025f0:	0019      	movs	r1, r3
 80025f2:	2001      	movs	r0, #1
 80025f4:	f00f fc70 	bl	8011ed8 <ulTaskNotifyTake>
		for(int i=0;i<TAB_SIZE;i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e012      	b.n	8002624 <taskEncoderPrint+0x48>
			printf("l:%d  r:%d\r\n",encoder_left.tab_pos[i],encoder_right.tab_pos[i]);
 80025fe:	4b64      	ldr	r3, [pc, #400]	; (8002790 <taskEncoderPrint+0x1b4>)
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	3204      	adds	r2, #4
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	5ed3      	ldrsh	r3, [r2, r3]
 8002608:	0019      	movs	r1, r3
 800260a:	4b62      	ldr	r3, [pc, #392]	; (8002794 <taskEncoderPrint+0x1b8>)
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	3204      	adds	r2, #4
 8002610:	0052      	lsls	r2, r2, #1
 8002612:	5ed3      	ldrsh	r3, [r2, r3]
 8002614:	001a      	movs	r2, r3
 8002616:	4b60      	ldr	r3, [pc, #384]	; (8002798 <taskEncoderPrint+0x1bc>)
 8002618:	0018      	movs	r0, r3
 800261a:	f011 f88f 	bl	801373c <iprintf>
		for(int i=0;i<TAB_SIZE;i++){
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3301      	adds	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b63      	cmp	r3, #99	; 0x63
 8002628:	dde9      	ble.n	80025fe <taskEncoderPrint+0x22>
		}
		printf("pos l:%d  pos r:%d\r\n",encoder_left.position,encoder_right.position);
 800262a:	4b59      	ldr	r3, [pc, #356]	; (8002790 <taskEncoderPrint+0x1b4>)
 800262c:	2202      	movs	r2, #2
 800262e:	5e9b      	ldrsh	r3, [r3, r2]
 8002630:	0019      	movs	r1, r3
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <taskEncoderPrint+0x1b8>)
 8002634:	2202      	movs	r2, #2
 8002636:	5e9b      	ldrsh	r3, [r3, r2]
 8002638:	001a      	movs	r2, r3
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <taskEncoderPrint+0x1c0>)
 800263c:	0018      	movs	r0, r3
 800263e:	f011 f87d 	bl	801373c <iprintf>
		printf("%f  %d",encoder_left.speed,encoder_left.tab_pos[TAB_SIZE-1]);
 8002642:	4b53      	ldr	r3, [pc, #332]	; (8002790 <taskEncoderPrint+0x1b4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	1c18      	adds	r0, r3, #0
 8002648:	f7ff fd14 	bl	8002074 <__aeabi_f2d>
 800264c:	0002      	movs	r2, r0
 800264e:	000b      	movs	r3, r1
 8002650:	494f      	ldr	r1, [pc, #316]	; (8002790 <taskEncoderPrint+0x1b4>)
 8002652:	20ce      	movs	r0, #206	; 0xce
 8002654:	5e09      	ldrsh	r1, [r1, r0]
 8002656:	0008      	movs	r0, r1
 8002658:	4951      	ldr	r1, [pc, #324]	; (80027a0 <taskEncoderPrint+0x1c4>)
 800265a:	9000      	str	r0, [sp, #0]
 800265c:	0008      	movs	r0, r1
 800265e:	f011 f86d 	bl	801373c <iprintf>
		encoder_left.speed=((encoder_left.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_left.Ts*1000); //speed en m/S
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <taskEncoderPrint+0x1b4>)
 8002664:	22ce      	movs	r2, #206	; 0xce
 8002666:	5e9b      	ldrsh	r3, [r3, r2]
 8002668:	001a      	movs	r2, r3
 800266a:	0013      	movs	r3, r2
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	189b      	adds	r3, r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	0018      	movs	r0, r3
 800267a:	f7fd fdeb 	bl	8000254 <__divsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fca0 	bl	8001fc8 <__aeabi_i2d>
 8002688:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <taskEncoderPrint+0x1c8>)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <taskEncoderPrint+0x1cc>)
 800268c:	f7fe fe4a 	bl	8001324 <__aeabi_dmul>
 8002690:	0002      	movs	r2, r0
 8002692:	000b      	movs	r3, r1
 8002694:	0010      	movs	r0, r2
 8002696:	0019      	movs	r1, r3
 8002698:	2200      	movs	r2, #0
 800269a:	4b44      	ldr	r3, [pc, #272]	; (80027ac <taskEncoderPrint+0x1d0>)
 800269c:	f7fe fe42 	bl	8001324 <__aeabi_dmul>
 80026a0:	0002      	movs	r2, r0
 80026a2:	000b      	movs	r3, r1
 80026a4:	0014      	movs	r4, r2
 80026a6:	001d      	movs	r5, r3
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <taskEncoderPrint+0x1b4>)
 80026aa:	22d0      	movs	r2, #208	; 0xd0
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	001a      	movs	r2, r3
 80026b0:	0013      	movs	r3, r2
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	189b      	adds	r3, r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fc83 	bl	8001fc8 <__aeabi_i2d>
 80026c2:	0002      	movs	r2, r0
 80026c4:	000b      	movs	r3, r1
 80026c6:	0020      	movs	r0, r4
 80026c8:	0029      	movs	r1, r5
 80026ca:	f7fe fa29 	bl	8000b20 <__aeabi_ddiv>
 80026ce:	0002      	movs	r2, r0
 80026d0:	000b      	movs	r3, r1
 80026d2:	0010      	movs	r0, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	f7ff fd15 	bl	8002104 <__aeabi_d2f>
 80026da:	1c02      	adds	r2, r0, #0
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <taskEncoderPrint+0x1b4>)
 80026de:	605a      	str	r2, [r3, #4]
		encoder_right.speed=((encoder_right.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_right.Ts*1000);
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <taskEncoderPrint+0x1b8>)
 80026e2:	22ce      	movs	r2, #206	; 0xce
 80026e4:	5e9b      	ldrsh	r3, [r3, r2]
 80026e6:	001a      	movs	r2, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fd fdac 	bl	8000254 <__divsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fc61 	bl	8001fc8 <__aeabi_i2d>
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <taskEncoderPrint+0x1c8>)
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <taskEncoderPrint+0x1cc>)
 800270a:	f7fe fe0b 	bl	8001324 <__aeabi_dmul>
 800270e:	0002      	movs	r2, r0
 8002710:	000b      	movs	r3, r1
 8002712:	0010      	movs	r0, r2
 8002714:	0019      	movs	r1, r3
 8002716:	2200      	movs	r2, #0
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <taskEncoderPrint+0x1d0>)
 800271a:	f7fe fe03 	bl	8001324 <__aeabi_dmul>
 800271e:	0002      	movs	r2, r0
 8002720:	000b      	movs	r3, r1
 8002722:	0014      	movs	r4, r2
 8002724:	001d      	movs	r5, r3
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <taskEncoderPrint+0x1b8>)
 8002728:	22d0      	movs	r2, #208	; 0xd0
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	001a      	movs	r2, r3
 800272e:	0013      	movs	r3, r2
 8002730:	015b      	lsls	r3, r3, #5
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	189b      	adds	r3, r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	0018      	movs	r0, r3
 800273c:	f7ff fc44 	bl	8001fc8 <__aeabi_i2d>
 8002740:	0002      	movs	r2, r0
 8002742:	000b      	movs	r3, r1
 8002744:	0020      	movs	r0, r4
 8002746:	0029      	movs	r1, r5
 8002748:	f7fe f9ea 	bl	8000b20 <__aeabi_ddiv>
 800274c:	0002      	movs	r2, r0
 800274e:	000b      	movs	r3, r1
 8002750:	0010      	movs	r0, r2
 8002752:	0019      	movs	r1, r3
 8002754:	f7ff fcd6 	bl	8002104 <__aeabi_d2f>
 8002758:	1c02      	adds	r2, r0, #0
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <taskEncoderPrint+0x1b8>)
 800275c:	605a      	str	r2, [r3, #4]
		printf("speed l:%f  speed r:%f\r\n",encoder_left.speed,encoder_right.speed);
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <taskEncoderPrint+0x1b4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	1c18      	adds	r0, r3, #0
 8002764:	f7ff fc86 	bl	8002074 <__aeabi_f2d>
 8002768:	0004      	movs	r4, r0
 800276a:	000d      	movs	r5, r1
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <taskEncoderPrint+0x1b8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	1c18      	adds	r0, r3, #0
 8002772:	f7ff fc7f 	bl	8002074 <__aeabi_f2d>
 8002776:	0002      	movs	r2, r0
 8002778:	000b      	movs	r3, r1
 800277a:	490d      	ldr	r1, [pc, #52]	; (80027b0 <taskEncoderPrint+0x1d4>)
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	0022      	movs	r2, r4
 8002782:	002b      	movs	r3, r5
 8002784:	0008      	movs	r0, r1
 8002786:	f010 ffd9 	bl	801373c <iprintf>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800278a:	e72f      	b.n	80025ec <taskEncoderPrint+0x10>
 800278c:	080160d4 	.word	0x080160d4
 8002790:	200004e0 	.word	0x200004e0
 8002794:	200005b4 	.word	0x200005b4
 8002798:	080160f4 	.word	0x080160f4
 800279c:	08016104 	.word	0x08016104
 80027a0:	0801611c 	.word	0x0801611c
 80027a4:	f01b866e 	.word	0xf01b866e
 80027a8:	400921f9 	.word	0x400921f9
 80027ac:	40350000 	.word	0x40350000
 80027b0:	08016124 	.word	0x08016124

080027b4 <moteurDroit>:

TaskHandle_t h_motor = NULL;
h_motor_t h_cmd_motor;
extern TaskHandle_t h_notif;

int moteurDroit(h_shell_t * pshell, int argc, char ** argv){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
	if (argc == 2){
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d144      	bne.n	8002850 <moteurDroit+0x9c>
		if (atoi(argv[1])==1){
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f010 fb05 	bl	8012ddc <atoi>
 80027d2:	0003      	movs	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10d      	bne.n	80027f4 <moteurDroit+0x40>
			HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <moteurDroit+0xb4>)
 80027da:	2100      	movs	r1, #0
 80027dc:	0018      	movs	r0, r3
 80027de:	f005 ffe3 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <moteurDroit+0xb4>)
 80027e4:	2100      	movs	r1, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	f004 fe02 	bl	80073f0 <HAL_TIM_PWM_Start>
			//TIM16->CCR1=700;
			printf("Le moteur droit avance\r\n");
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <moteurDroit+0xb8>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f011 f830 	bl	8013854 <puts>
		}
		if(atoi(argv[1])==-1){
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f010 faee 	bl	8012ddc <atoi>
 8002800:	0003      	movs	r3, r0
 8002802:	3301      	adds	r3, #1
 8002804:	d10d      	bne.n	8002822 <moteurDroit+0x6e>
			HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <moteurDroit+0xb4>)
 8002808:	2100      	movs	r1, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f004 fed4 	bl	80075b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <moteurDroit+0xb4>)
 8002812:	2100      	movs	r1, #0
 8002814:	0018      	movs	r0, r3
 8002816:	f005 ff29 	bl	800866c <HAL_TIMEx_PWMN_Start>
			//TIM16->CCR1=700;
			printf("Le moteur droit recule\r\n");
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <moteurDroit+0xbc>)
 800281c:	0018      	movs	r0, r3
 800281e:	f011 f819 	bl	8013854 <puts>
		}
		if(atoi(argv[1])==0){
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0018      	movs	r0, r3
 800282a:	f010 fad7 	bl	8012ddc <atoi>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d115      	bne.n	800285e <moteurDroit+0xaa>
			HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <moteurDroit+0xb4>)
 8002834:	2100      	movs	r1, #0
 8002836:	0018      	movs	r0, r3
 8002838:	f004 febe 	bl	80075b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <moteurDroit+0xb4>)
 800283e:	2100      	movs	r1, #0
 8002840:	0018      	movs	r0, r3
 8002842:	f005 ffb1 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
			//TIM16->CCR1=700;
			printf("Le moteur droit s'arrête\r\n");
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <moteurDroit+0xc0>)
 8002848:	0018      	movs	r0, r3
 800284a:	f011 f803 	bl	8013854 <puts>
 800284e:	e006      	b.n	800285e <moteurDroit+0xaa>
		}
	}
	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <moteurDroit+0xc4>)
 8002852:	0018      	movs	r0, r3
 8002854:	f010 fffe 	bl	8013854 <puts>
		return -1;
 8002858:	2301      	movs	r3, #1
 800285a:	425b      	negs	r3, r3
 800285c:	e000      	b.n	8002860 <moteurDroit+0xac>
	}
	return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000bec 	.word	0x20000bec
 800286c:	08016140 	.word	0x08016140
 8002870:	08016158 	.word	0x08016158
 8002874:	08016170 	.word	0x08016170
 8002878:	0801618c 	.word	0x0801618c

0800287c <moteurGauche>:

int moteurGauche(h_shell_t * pshell, int argc, char ** argv){
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	if (argc == 2){
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d144      	bne.n	8002918 <moteurGauche+0x9c>
		if(atoi(argv[1])==1){
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0018      	movs	r0, r3
 8002896:	f010 faa1 	bl	8012ddc <atoi>
 800289a:	0003      	movs	r3, r0
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10d      	bne.n	80028bc <moteurGauche+0x40>
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <moteurGauche+0xb4>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	0018      	movs	r0, r3
 80028a6:	f004 fe87 	bl	80075b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <moteurGauche+0xb4>)
 80028ac:	2100      	movs	r1, #0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f005 fedc 	bl	800866c <HAL_TIMEx_PWMN_Start>
			//TIM16->CCR1=700;
			printf("Le moteur gauche avance\r\n");
 80028b4:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <moteurGauche+0xb8>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f010 ffcc 	bl	8013854 <puts>
		}
		if (atoi(argv[1])==-1){
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f010 fa8a 	bl	8012ddc <atoi>
 80028c8:	0003      	movs	r3, r0
 80028ca:	3301      	adds	r3, #1
 80028cc:	d10d      	bne.n	80028ea <moteurGauche+0x6e>
			HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <moteurGauche+0xb4>)
 80028d0:	2100      	movs	r1, #0
 80028d2:	0018      	movs	r0, r3
 80028d4:	f005 ff68 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <moteurGauche+0xb4>)
 80028da:	2100      	movs	r1, #0
 80028dc:	0018      	movs	r0, r3
 80028de:	f004 fd87 	bl	80073f0 <HAL_TIM_PWM_Start>
			//TIM16->CCR1=700;
			printf("Le moteur gauche recule\r\n");
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <moteurGauche+0xbc>)
 80028e4:	0018      	movs	r0, r3
 80028e6:	f010 ffb5 	bl	8013854 <puts>
		}

		if(atoi(argv[1])==0){
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f010 fa73 	bl	8012ddc <atoi>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d115      	bne.n	8002926 <moteurGauche+0xaa>
			HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <moteurGauche+0xb4>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	0018      	movs	r0, r3
 8002900:	f004 fe5a 	bl	80075b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <moteurGauche+0xb4>)
 8002906:	2100      	movs	r1, #0
 8002908:	0018      	movs	r0, r3
 800290a:	f005 ff4d 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
			//TIM16->CCR1=700;
			printf("Le moteur gauche s'arrête\r\n");
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <moteurGauche+0xc0>)
 8002910:	0018      	movs	r0, r3
 8002912:	f010 ff9f 	bl	8013854 <puts>
 8002916:	e006      	b.n	8002926 <moteurGauche+0xaa>
		}
	}
	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <moteurGauche+0xc4>)
 800291a:	0018      	movs	r0, r3
 800291c:	f010 ff9a 	bl	8013854 <puts>
		return -1;
 8002920:	2301      	movs	r3, #1
 8002922:	425b      	negs	r3, r3
 8002924:	e000      	b.n	8002928 <moteurGauche+0xac>
	}
	return 0;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b004      	add	sp, #16
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000c38 	.word	0x20000c38
 8002934:	080161b4 	.word	0x080161b4
 8002938:	080161d0 	.word	0x080161d0
 800293c:	080161ec 	.word	0x080161ec
 8002940:	0801618c 	.word	0x0801618c

08002944 <motor_shell>:

int motor_shell(h_shell_t * pshell, int argc, char ** argv){
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	if (argc == 3){
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d000      	beq.n	8002958 <motor_shell+0x14>
 8002956:	e0a6      	b.n	8002aa6 <motor_shell+0x162>
		if(*argv[1]=='a'){
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b61      	cmp	r3, #97	; 0x61
 8002962:	d11f      	bne.n	80029a4 <motor_shell+0x60>
			uint16_t s=atoi(argv[2]);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0018      	movs	r0, r3
 800296c:	f010 fa36 	bl	8012ddc <atoi>
 8002970:	0002      	movs	r2, r0
 8002972:	241e      	movs	r4, #30
 8002974:	193b      	adds	r3, r7, r4
 8002976:	801a      	strh	r2, [r3, #0]
			printf("Le robot avance\r\n");
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <motor_shell+0x17c>)
 800297a:	0018      	movs	r0, r3
 800297c:	f010 ff6a 	bl	8013854 <puts>
			h_cmd_motor.cmd='a';
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <motor_shell+0x180>)
 8002982:	2261      	movs	r2, #97	; 0x61
 8002984:	701a      	strb	r2, [r3, #0]
			h_cmd_motor.speed=s;
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <motor_shell+0x180>)
 8002988:	193a      	adds	r2, r7, r4
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	805a      	strh	r2, [r3, #2]
			//vTaskResume(h_motor);
			printf("La commande moteur est mise à jour\r\n");
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <motor_shell+0x184>)
 8002990:	0018      	movs	r0, r3
 8002992:	f010 ff5f 	bl	8013854 <puts>
			xTaskNotifyGive(h_motor);
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <motor_shell+0x188>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	2202      	movs	r2, #2
 800299e:	2100      	movs	r1, #0
 80029a0:	f00f fadc 	bl	8011f5c <xTaskGenericNotify>
		}
		if(*argv[1]=='r'){
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b72      	cmp	r3, #114	; 0x72
 80029ae:	d119      	bne.n	80029e4 <motor_shell+0xa0>
			uint16_t s=atoi(argv[2]);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3308      	adds	r3, #8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f010 fa10 	bl	8012ddc <atoi>
 80029bc:	0002      	movs	r2, r0
 80029be:	241c      	movs	r4, #28
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	801a      	strh	r2, [r3, #0]
			printf("Le robot recule\r\n");
 80029c4:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <motor_shell+0x18c>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f010 ff44 	bl	8013854 <puts>
			h_cmd_motor.cmd='r';
 80029cc:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <motor_shell+0x180>)
 80029ce:	2272      	movs	r2, #114	; 0x72
 80029d0:	701a      	strb	r2, [r3, #0]
			h_cmd_motor.speed=s;
 80029d2:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <motor_shell+0x180>)
 80029d4:	193a      	adds	r2, r7, r4
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	805a      	strh	r2, [r3, #2]
			vTaskResume(h_motor);
 80029da:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <motor_shell+0x188>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0018      	movs	r0, r3
 80029e0:	f00e fdbc 	bl	801155c <vTaskResume>
		}
		if(*argv[1]=='s'){
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b73      	cmp	r3, #115	; 0x73
 80029ee:	d119      	bne.n	8002a24 <motor_shell+0xe0>
			uint16_t s=atoi(argv[2]);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3308      	adds	r3, #8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f010 f9f0 	bl	8012ddc <atoi>
 80029fc:	0002      	movs	r2, r0
 80029fe:	241a      	movs	r4, #26
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	801a      	strh	r2, [r3, #0]
			printf("Le robot s'arrête\r\n");
 8002a04:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <motor_shell+0x190>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f010 ff24 	bl	8013854 <puts>
			h_cmd_motor.cmd='s';
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <motor_shell+0x180>)
 8002a0e:	2273      	movs	r2, #115	; 0x73
 8002a10:	701a      	strb	r2, [r3, #0]
			h_cmd_motor.speed=s;
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <motor_shell+0x180>)
 8002a14:	193a      	adds	r2, r7, r4
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	805a      	strh	r2, [r3, #2]
			vTaskResume(h_motor);
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <motor_shell+0x188>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f00e fd9c 	bl	801155c <vTaskResume>
		}
		if(*argv[1]=='g'){
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b67      	cmp	r3, #103	; 0x67
 8002a2e:	d119      	bne.n	8002a64 <motor_shell+0x120>
			uint16_t s=atoi(argv[2]);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3308      	adds	r3, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f010 f9d0 	bl	8012ddc <atoi>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	2418      	movs	r4, #24
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	801a      	strh	r2, [r3, #0]
			printf("Le robot tourne à gauche\r\n");
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <motor_shell+0x194>)
 8002a46:	0018      	movs	r0, r3
 8002a48:	f010 ff04 	bl	8013854 <puts>
			h_cmd_motor.cmd='g';
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <motor_shell+0x180>)
 8002a4e:	2267      	movs	r2, #103	; 0x67
 8002a50:	701a      	strb	r2, [r3, #0]
			h_cmd_motor.speed=s;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <motor_shell+0x180>)
 8002a54:	193a      	adds	r2, r7, r4
 8002a56:	8812      	ldrh	r2, [r2, #0]
 8002a58:	805a      	strh	r2, [r3, #2]
			vTaskResume(h_motor);
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <motor_shell+0x188>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f00e fd7c 	bl	801155c <vTaskResume>
		}
		if(*argv[1]=='d'){
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d121      	bne.n	8002ab4 <motor_shell+0x170>
			uint16_t s=atoi(argv[2]);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3308      	adds	r3, #8
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f010 f9b0 	bl	8012ddc <atoi>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	2416      	movs	r4, #22
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	801a      	strh	r2, [r3, #0]
			printf("Le robot tourne à droite\r\n");
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <motor_shell+0x198>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f010 fee4 	bl	8013854 <puts>
			h_cmd_motor.cmd='d';
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <motor_shell+0x180>)
 8002a8e:	2264      	movs	r2, #100	; 0x64
 8002a90:	701a      	strb	r2, [r3, #0]
			h_cmd_motor.speed=s;
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <motor_shell+0x180>)
 8002a94:	193a      	adds	r2, r7, r4
 8002a96:	8812      	ldrh	r2, [r2, #0]
 8002a98:	805a      	strh	r2, [r3, #2]
			vTaskResume(h_motor);
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <motor_shell+0x188>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f00e fd5c 	bl	801155c <vTaskResume>
 8002aa4:	e006      	b.n	8002ab4 <motor_shell+0x170>
				printf("Le robot tourne à gauche\r\n");

			}*/
	}
	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <motor_shell+0x19c>)
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f010 fed3 	bl	8013854 <puts>
		return -1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	e000      	b.n	8002ab6 <motor_shell+0x172>
	}
	return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b009      	add	sp, #36	; 0x24
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	08016208 	.word	0x08016208
 8002ac4:	2000068c 	.word	0x2000068c
 8002ac8:	0801621c 	.word	0x0801621c
 8002acc:	20000688 	.word	0x20000688
 8002ad0:	08016244 	.word	0x08016244
 8002ad4:	08016258 	.word	0x08016258
 8002ad8:	0801626c 	.word	0x0801626c
 8002adc:	08016288 	.word	0x08016288
 8002ae0:	0801618c 	.word	0x0801618c

08002ae4 <avance>:
	}
	return 0;
}
*/

int avance(int vitesse){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <avance+0x58>)
 8002aee:	2100      	movs	r1, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f005 fe59 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <avance+0x5c>)
 8002af8:	2100      	movs	r1, #0
 8002afa:	0018      	movs	r0, r3
 8002afc:	f004 fd5c 	bl	80075b8 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <avance+0x58>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <avance+0x5c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <avance+0x58>)
 8002b12:	2100      	movs	r1, #0
 8002b14:	0018      	movs	r0, r3
 8002b16:	f004 fc6b 	bl	80073f0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <avance+0x5c>)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f005 fda4 	bl	800866c <HAL_TIMEx_PWMN_Start>
	//vTaskSuspend(h_motor);
	xTaskNotifyGive(h_motor);
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <avance+0x60>)
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f00f fa15 	bl	8011f5c <xTaskGenericNotify>

	return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000bec 	.word	0x20000bec
 8002b40:	20000c38 	.word	0x20000c38
 8002b44:	20000688 	.word	0x20000688

08002b48 <recule>:

int recule(int vitesse){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <recule+0x54>)
 8002b52:	2100      	movs	r1, #0
 8002b54:	0018      	movs	r0, r3
 8002b56:	f004 fd2f 	bl	80075b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <recule+0x58>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f005 fe22 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <recule+0x54>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <recule+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <recule+0x54>)
 8002b76:	2100      	movs	r1, #0
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f005 fd77 	bl	800866c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <recule+0x58>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	0018      	movs	r0, r3
 8002b84:	f004 fc34 	bl	80073f0 <HAL_TIM_PWM_Start>
	vTaskSuspend(h_motor);
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <recule+0x5c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f00e fc59 	bl	8011444 <vTaskSuspend>
	return 0;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000bec 	.word	0x20000bec
 8002ba0:	20000c38 	.word	0x20000c38
 8002ba4:	20000688 	.word	0x20000688

08002ba8 <stop>:

int stop(void){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <stop+0x40>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f004 fd01 	bl	80075b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <stop+0x44>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f005 fdf4 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <stop+0x40>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f005 fdef 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <stop+0x44>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f004 fcf2 	bl	80075b8 <HAL_TIM_PWM_Stop>
	vTaskSuspend(h_motor);
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <stop+0x48>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f00e fc33 	bl	8011444 <vTaskSuspend>
	return 0;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000bec 	.word	0x20000bec
 8002bec:	20000c38 	.word	0x20000c38
 8002bf0:	20000688 	.word	0x20000688

08002bf4 <gauche>:

int gauche(int vitesse){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	//Le moteur droit avance
	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <gauche+0x54>)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	0018      	movs	r0, r3
 8002c02:	f005 fdd1 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <gauche+0x54>)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f004 fbf0 	bl	80073f0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002c10:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <gauche+0x54>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <gauche+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche recule (voir si on doit plutôt l'arrêter)
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <gauche+0x58>)
 8002c22:	2100      	movs	r1, #0
 8002c24:	0018      	movs	r0, r3
 8002c26:	f005 fdbf 	bl	80087a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <gauche+0x58>)
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f004 fbde 	bl	80073f0 <HAL_TIM_PWM_Start>
	vTaskSuspend(h_motor);
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <gauche+0x5c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f00e fc03 	bl	8011444 <vTaskSuspend>
	return 0;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000bec 	.word	0x20000bec
 8002c4c:	20000c38 	.word	0x20000c38
 8002c50:	20000688 	.word	0x20000688

08002c54 <droite>:

int droite(int vitesse){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

	//Le moteur droit recule (voir si on doit plutôt l'arrêter)
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <droite+0x54>)
 8002c5e:	2100      	movs	r1, #0
 8002c60:	0018      	movs	r0, r3
 8002c62:	f004 fca9 	bl	80075b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <droite+0x54>)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f005 fcfe 	bl	800866c <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <droite+0x54>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <droite+0x58>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche avance
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <droite+0x58>)
 8002c82:	2100      	movs	r1, #0
 8002c84:	0018      	movs	r0, r3
 8002c86:	f004 fc97 	bl	80075b8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <droite+0x58>)
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f005 fcec 	bl	800866c <HAL_TIMEx_PWMN_Start>
	vTaskSuspend(h_motor);
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <droite+0x5c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f00e fbd3 	bl	8011444 <vTaskSuspend>
	return 0;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000bec 	.word	0x20000bec
 8002cac:	20000c38 	.word	0x20000c38
 8002cb0:	20000688 	.word	0x20000688

08002cb4 <taskMotor>:

void taskMotor(void *pMotor){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	printf("Tâche moteur créée\r\n");
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <taskMotor+0x7c>)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f010 fdc8 	bl	8013854 <puts>
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	425b      	negs	r3, r3
 8002cc8:	0019      	movs	r1, r3
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f00f f904 	bl	8011ed8 <ulTaskNotifyTake>
	printf("Notif taken");
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <taskMotor+0x80>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f010 fd32 	bl	801373c <iprintf>
	//vTaskSuspend(0);
	for(;;){

		if(((h_motor_t *)pMotor)->cmd=='a'){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b61      	cmp	r3, #97	; 0x61
 8002cde:	d104      	bne.n	8002cea <taskMotor+0x36>
			avance(((h_motor_t *)pMotor)->speed);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff fefd 	bl	8002ae4 <avance>
		}
		if(((h_motor_t *)pMotor)->cmd=='r'){
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b72      	cmp	r3, #114	; 0x72
 8002cf0:	d104      	bne.n	8002cfc <taskMotor+0x48>
			recule(((h_motor_t *)pMotor)->speed);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	885b      	ldrh	r3, [r3, #2]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff ff26 	bl	8002b48 <recule>
		}
		if(((h_motor_t *)pMotor)->cmd=='s'){
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b73      	cmp	r3, #115	; 0x73
 8002d02:	d101      	bne.n	8002d08 <taskMotor+0x54>
			stop();
 8002d04:	f7ff ff50 	bl	8002ba8 <stop>
		}
		if(((h_motor_t *)pMotor)->cmd=='g'){
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b67      	cmp	r3, #103	; 0x67
 8002d0e:	d104      	bne.n	8002d1a <taskMotor+0x66>
			gauche(((h_motor_t *)pMotor)->speed);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	885b      	ldrh	r3, [r3, #2]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff ff6d 	bl	8002bf4 <gauche>
		}
		if(((h_motor_t *)pMotor)->cmd=='d'){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d1da      	bne.n	8002cd8 <taskMotor+0x24>
			droite(((h_motor_t *)pMotor)->speed);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	885b      	ldrh	r3, [r3, #2]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff94 	bl	8002c54 <droite>
		if(((h_motor_t *)pMotor)->cmd=='a'){
 8002d2c:	e7d4      	b.n	8002cd8 <taskMotor+0x24>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	080162a4 	.word	0x080162a4
 8002d34:	080162bc 	.word	0x080162bc

08002d38 <servo_shell>:
#include "string.h"

TaskHandle_t h_servomotor = NULL;
h_servomotor_t h_cmd_servomotor;

int servo_shell(h_shell_t * pshell, int argc, char ** argv){
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	if(argc == 3){
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d148      	bne.n	8002ddc <servo_shell+0xa4>
		if(*argv[1]=='o'){
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b6f      	cmp	r3, #111	; 0x6f
 8002d54:	d119      	bne.n	8002d8a <servo_shell+0x52>
			uint16_t s=atoi(argv[2]);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f010 f83d 	bl	8012ddc <atoi>
 8002d62:	0002      	movs	r2, r0
 8002d64:	2416      	movs	r4, #22
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	801a      	strh	r2, [r3, #0]
			printf("La pince s'ouvre\r\n");
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <servo_shell+0xbc>)
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f010 fd71 	bl	8013854 <puts>
			h_cmd_servomotor.cmd='o';
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <servo_shell+0xc0>)
 8002d74:	226f      	movs	r2, #111	; 0x6f
 8002d76:	701a      	strb	r2, [r3, #0]
			h_cmd_servomotor.speed=s;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <servo_shell+0xc0>)
 8002d7a:	193a      	adds	r2, r7, r4
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	805a      	strh	r2, [r3, #2]
			vTaskResume(h_servomotor);
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <servo_shell+0xc4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f00e fbe9 	bl	801155c <vTaskResume>
		}
		if(*argv[1]=='c'){
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b63      	cmp	r3, #99	; 0x63
 8002d94:	d129      	bne.n	8002dea <servo_shell+0xb2>
			uint16_t s=atoi(argv[2]);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f010 f81d 	bl	8012ddc <atoi>
 8002da2:	0002      	movs	r2, r0
 8002da4:	2414      	movs	r4, #20
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	801a      	strh	r2, [r3, #0]
			printf("La pince se ferme\r\n");
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <servo_shell+0xc8>)
 8002dac:	0018      	movs	r0, r3
 8002dae:	f010 fd51 	bl	8013854 <puts>
			h_cmd_servomotor.cmd='c';
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <servo_shell+0xc0>)
 8002db4:	2263      	movs	r2, #99	; 0x63
 8002db6:	701a      	strb	r2, [r3, #0]
			h_cmd_servomotor.speed=s;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <servo_shell+0xc0>)
 8002dba:	193a      	adds	r2, r7, r4
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	805a      	strh	r2, [r3, #2]
			printf("La vitesse est de %d sur 1023\r\n",h_cmd_servomotor.speed);
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <servo_shell+0xc0>)
 8002dc2:	885b      	ldrh	r3, [r3, #2]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <servo_shell+0xcc>)
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f010 fcb6 	bl	801373c <iprintf>
			vTaskResume(h_servomotor);
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <servo_shell+0xc4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f00e fbc1 	bl	801155c <vTaskResume>
 8002dda:	e006      	b.n	8002dea <servo_shell+0xb2>
		}
	}

	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <servo_shell+0xd0>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f010 fd38 	bl	8013854 <puts>
		return -1;
 8002de4:	2301      	movs	r3, #1
 8002de6:	425b      	negs	r3, r3
 8002de8:	e000      	b.n	8002dec <servo_shell+0xb4>
	}

	return 0;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b007      	add	sp, #28
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	080162c8 	.word	0x080162c8
 8002df8:	20000694 	.word	0x20000694
 8002dfc:	20000690 	.word	0x20000690
 8002e00:	080162dc 	.word	0x080162dc
 8002e04:	080162f0 	.word	0x080162f0
 8002e08:	08016310 	.word	0x08016310

08002e0c <taskServoMotor>:

void taskServoMotor(void *pServoMotor){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	printf("Tâche servomoteur créée\r\n");
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <taskServoMotor+0x58>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f010 fd1c 	bl	8013854 <puts>
	vTaskSuspend(0);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f00e fb11 	bl	8011444 <vTaskSuspend>
	for(;;){
		if(((h_servomotor_t *)pServoMotor)->cmd=='o'){
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b6f      	cmp	r3, #111	; 0x6f
 8002e28:	d109      	bne.n	8002e3e <taskServoMotor+0x32>
			speed(((h_servomotor_t *)pServoMotor)->speed);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	885b      	ldrh	r3, [r3, #2]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 f976 	bl	8003120 <speed>
			vTaskDelay(10);
 8002e34:	200a      	movs	r0, #10
 8002e36:	f00e fadf 	bl	80113f8 <vTaskDelay>
			open();
 8002e3a:	f000 f8fd 	bl	8003038 <open>
		}
		if(((h_servomotor_t *)pServoMotor)->cmd=='c'){
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b63      	cmp	r3, #99	; 0x63
 8002e44:	d109      	bne.n	8002e5a <taskServoMotor+0x4e>
			speed(((h_servomotor_t *)pServoMotor)->speed);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	885b      	ldrh	r3, [r3, #2]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f968 	bl	8003120 <speed>
			vTaskDelay(10);
 8002e50:	200a      	movs	r0, #10
 8002e52:	f00e fad1 	bl	80113f8 <vTaskDelay>
			close();
 8002e56:	f000 f87b 	bl	8002f50 <close>
		}
		vTaskSuspend(0);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f00e faf2 	bl	8011444 <vTaskSuspend>
		if(((h_servomotor_t *)pServoMotor)->cmd=='o'){
 8002e60:	e7df      	b.n	8002e22 <taskServoMotor+0x16>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	08016338 	.word	0x08016338

08002e68 <update_crc>:
unsigned char incomingByte = 0x00;   // for incoming serial data

extern TaskHandle_t h_servomotor;

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	4c33      	ldr	r4, [pc, #204]	; (8002f38 <update_crc+0xd0>)
 8002e6c:	44a5      	add	sp, r4
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	0011      	movs	r1, r2
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <update_crc+0xd4>)
 8002e76:	2484      	movs	r4, #132	; 0x84
 8002e78:	00a4      	lsls	r4, r4, #2
 8002e7a:	191b      	adds	r3, r3, r4
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	1c02      	adds	r2, r0, #0
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <update_crc+0xd8>)
 8002e84:	0020      	movs	r0, r4
 8002e86:	181b      	adds	r3, r3, r0
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {
 8002e8e:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <update_crc+0xdc>)
 8002e90:	181b      	adds	r3, r3, r0
 8002e92:	19da      	adds	r2, r3, r7
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <update_crc+0xe0>)
 8002e96:	0010      	movs	r0, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	f00f ffcc 	bl	8012e3c <memcpy>
			0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};
	for(j = 0; j < data_blk_size; j++)
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <update_crc+0xe4>)
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e02f      	b.n	8002f0e <update_crc+0xa6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <update_crc+0xd4>)
 8002eb0:	2084      	movs	r0, #132	; 0x84
 8002eb2:	0080      	lsls	r0, r0, #2
 8002eb4:	181b      	adds	r3, r3, r0
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4c23      	ldr	r4, [pc, #140]	; (8002f4c <update_crc+0xe4>)
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	18cb      	adds	r3, r1, r3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4053      	eors	r3, r2
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	2583      	movs	r5, #131	; 0x83
 8002ed2:	00ad      	lsls	r5, r5, #2
 8002ed4:	197b      	adds	r3, r7, r5
 8002ed6:	21ff      	movs	r1, #255	; 0xff
 8002ed8:	400a      	ands	r2, r1
 8002eda:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002edc:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <update_crc+0xd4>)
 8002ede:	181b      	adds	r3, r3, r0
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	197b      	adds	r3, r7, r5
 8002eea:	8819      	ldrh	r1, [r3, #0]
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <update_crc+0xdc>)
 8002eee:	181b      	adds	r3, r3, r0
 8002ef0:	19db      	adds	r3, r3, r7
 8002ef2:	0049      	lsls	r1, r1, #1
 8002ef4:	5acb      	ldrh	r3, [r1, r3]
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	4053      	eors	r3, r2
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <update_crc+0xd4>)
 8002efe:	181b      	adds	r3, r3, r0
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <update_crc+0xe4>)
 8002f10:	18fa      	adds	r2, r7, r3
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <update_crc+0xd8>)
 8002f14:	2184      	movs	r1, #132	; 0x84
 8002f16:	0089      	lsls	r1, r1, #2
 8002f18:	185b      	adds	r3, r3, r1
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	8812      	ldrh	r2, [r2, #0]
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d3c4      	bcc.n	8002eae <update_crc+0x46>
	}
	return crc_accum;
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <update_crc+0xd4>)
 8002f26:	185b      	adds	r3, r3, r1
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	881b      	ldrh	r3, [r3, #0]
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	2384      	movs	r3, #132	; 0x84
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	449d      	add	sp, r3
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	fffffdf0 	.word	0xfffffdf0
 8002f3c:	fffffdf6 	.word	0xfffffdf6
 8002f40:	fffffdf4 	.word	0xfffffdf4
 8002f44:	fffffdfc 	.word	0xfffffdfc
 8002f48:	08016354 	.word	0x08016354
 8002f4c:	0000020e 	.word	0x0000020e

08002f50 <close>:
		HAL_Delay(1000);
	}

}

void close(){
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002f56:	201f      	movs	r0, #31
 8002f58:	183b      	adds	r3, r7, r0
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002f5e:	241e      	movs	r4, #30
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
	//WRITE MOTOR TO POSITION 0x02C (300/1023),
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002f66:	2518      	movs	r5, #24
 8002f68:	197b      	adds	r3, r7, r5
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x5E, 0x01};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002f6e:	2114      	movs	r1, #20
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <close+0xe0>)
 8002f74:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	22ff      	movs	r2, #255	; 0xff
 8002f80:	705a      	strb	r2, [r3, #1]
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	22fd      	movs	r2, #253	; 0xfd
 8002f86:	709a      	strb	r2, [r3, #2]
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	70da      	strb	r2, [r3, #3]
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	22fe      	movs	r2, #254	; 0xfe
 8002f92:	711a      	strb	r2, [r3, #4]
 8002f94:	197b      	adds	r3, r7, r5
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	715a      	strb	r2, [r3, #5]
 8002f9c:	197b      	adds	r3, r7, r5
 8002f9e:	785a      	ldrb	r2, [r3, #1]
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	719a      	strb	r2, [r3, #6]
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	71da      	strb	r2, [r3, #7]
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	721a      	strb	r2, [r3, #8]
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	785a      	ldrb	r2, [r3, #1]
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	725a      	strb	r2, [r3, #9]
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	789a      	ldrb	r2, [r3, #2]
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	729a      	strb	r2, [r3, #10]
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	78da      	ldrb	r2, [r3, #3]
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	72da      	strb	r2, [r3, #11]
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	0005      	movs	r5, r0
 8002fce:	183a      	adds	r2, r7, r0
 8002fd0:	7812      	ldrb	r2, [r2, #0]
 8002fd2:	731a      	strb	r2, [r3, #12]
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	0026      	movs	r6, r4
 8002fd8:	193a      	adds	r2, r7, r4
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 8002fde:	211c      	movs	r1, #28
 8002fe0:	187c      	adds	r4, r7, r1
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	220c      	movs	r2, #12
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7ff ff3d 	bl	8002e68 <update_crc>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	183b      	adds	r3, r7, r0
 8002ff6:	211c      	movs	r1, #28
 8002ff8:	187a      	adds	r2, r7, r1
 8002ffa:	8812      	ldrh	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b29a      	uxth	r2, r3
 8003006:	19bb      	adds	r3, r7, r6
 8003008:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	183a      	adds	r2, r7, r0
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	19ba      	adds	r2, r7, r6
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 800301a:	23fa      	movs	r3, #250	; 0xfa
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	1d39      	adds	r1, r7, #4
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <close+0xe4>)
 8003022:	220e      	movs	r2, #14
 8003024:	f005 fe02 	bl	8008c2c <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b009      	add	sp, #36	; 0x24
 800302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003030:	015e001e 	.word	0x015e001e
 8003034:	20000d18 	.word	0x20000d18

08003038 <open>:
void open(){
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 800303e:	201f      	movs	r0, #31
 8003040:	183b      	adds	r3, r7, r0
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8003046:	241e      	movs	r4, #30
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 800304e:	2518      	movs	r5, #24
 8003050:	197b      	adds	r3, r7, r5
 8003052:	2207      	movs	r2, #7
 8003054:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x64, 0x00};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8003056:	2114      	movs	r1, #20
 8003058:	187b      	adds	r3, r7, r1
 800305a:	4a2f      	ldr	r2, [pc, #188]	; (8003118 <open+0xe0>)
 800305c:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	22ff      	movs	r2, #255	; 0xff
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	22fd      	movs	r2, #253	; 0xfd
 800306e:	709a      	strb	r2, [r3, #2]
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	22fe      	movs	r2, #254	; 0xfe
 800307a:	711a      	strb	r2, [r3, #4]
 800307c:	197b      	adds	r3, r7, r5
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	715a      	strb	r2, [r3, #5]
 8003084:	197b      	adds	r3, r7, r5
 8003086:	785a      	ldrb	r2, [r3, #1]
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	719a      	strb	r2, [r3, #6]
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2203      	movs	r2, #3
 8003090:	71da      	strb	r2, [r3, #7]
 8003092:	187b      	adds	r3, r7, r1
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	721a      	strb	r2, [r3, #8]
 800309a:	187b      	adds	r3, r7, r1
 800309c:	785a      	ldrb	r2, [r3, #1]
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	725a      	strb	r2, [r3, #9]
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	789a      	ldrb	r2, [r3, #2]
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	729a      	strb	r2, [r3, #10]
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	78da      	ldrb	r2, [r3, #3]
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	72da      	strb	r2, [r3, #11]
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	0005      	movs	r5, r0
 80030b6:	183a      	adds	r2, r7, r0
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	731a      	strb	r2, [r3, #12]
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	0026      	movs	r6, r4
 80030c0:	193a      	adds	r2, r7, r4
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 80030c6:	211c      	movs	r1, #28
 80030c8:	187c      	adds	r4, r7, r1
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	220c      	movs	r2, #12
 80030ce:	0019      	movs	r1, r3
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff fec9 	bl	8002e68 <update_crc>
 80030d6:	0003      	movs	r3, r0
 80030d8:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 80030da:	0028      	movs	r0, r5
 80030dc:	183b      	adds	r3, r7, r0
 80030de:	211c      	movs	r1, #28
 80030e0:	187a      	adds	r2, r7, r1
 80030e2:	8812      	ldrh	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	19bb      	adds	r3, r7, r6
 80030f0:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	183a      	adds	r2, r7, r0
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	19ba      	adds	r2, r7, r6
 80030fe:	7812      	ldrb	r2, [r2, #0]
 8003100:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8003102:	23fa      	movs	r3, #250	; 0xfa
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	1d39      	adds	r1, r7, #4
 8003108:	4804      	ldr	r0, [pc, #16]	; (800311c <open+0xe4>)
 800310a:	220e      	movs	r2, #14
 800310c:	f005 fd8e 	bl	8008c2c <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b009      	add	sp, #36	; 0x24
 8003116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003118:	0064001e 	.word	0x0064001e
 800311c:	20000d18 	.word	0x20000d18

08003120 <speed>:

void speed(int speed){
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	b08b      	sub	sp, #44	; 0x2c
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	uint16_t crc;
	unsigned char CRC_L = 0;
 8003128:	2027      	movs	r0, #39	; 0x27
 800312a:	183b      	adds	r3, r7, r0
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8003130:	2426      	movs	r4, #38	; 0x26
 8003132:	193b      	adds	r3, r7, r4
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8003138:	2620      	movs	r6, #32
 800313a:	19bb      	adds	r3, r7, r6
 800313c:	2207      	movs	r2, #7
 800313e:	801a      	strh	r2, [r3, #0]
	unsigned char param_mot[4]={0x20, 0x00, speed&0xFF,speed>>8};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8003140:	211c      	movs	r1, #28
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2220      	movs	r2, #32
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	187b      	adds	r3, r7, r1
 800314a:	2200      	movs	r2, #0
 800314c:	705a      	strb	r2, [r3, #1]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	187b      	adds	r3, r7, r1
 8003154:	709a      	strb	r2, [r3, #2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	121b      	asrs	r3, r3, #8
 800315a:	b2da      	uxtb	r2, r3
 800315c:	187b      	adds	r3, r7, r1
 800315e:	70da      	strb	r2, [r3, #3]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8003160:	250c      	movs	r5, #12
 8003162:	197b      	adds	r3, r7, r5
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	197b      	adds	r3, r7, r5
 800316a:	22ff      	movs	r2, #255	; 0xff
 800316c:	705a      	strb	r2, [r3, #1]
 800316e:	197b      	adds	r3, r7, r5
 8003170:	22fd      	movs	r2, #253	; 0xfd
 8003172:	709a      	strb	r2, [r3, #2]
 8003174:	197b      	adds	r3, r7, r5
 8003176:	2200      	movs	r2, #0
 8003178:	70da      	strb	r2, [r3, #3]
 800317a:	197b      	adds	r3, r7, r5
 800317c:	22fe      	movs	r2, #254	; 0xfe
 800317e:	711a      	strb	r2, [r3, #4]
 8003180:	19bb      	adds	r3, r7, r6
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	197b      	adds	r3, r7, r5
 8003186:	715a      	strb	r2, [r3, #5]
 8003188:	19bb      	adds	r3, r7, r6
 800318a:	785a      	ldrb	r2, [r3, #1]
 800318c:	197b      	adds	r3, r7, r5
 800318e:	719a      	strb	r2, [r3, #6]
 8003190:	197b      	adds	r3, r7, r5
 8003192:	2203      	movs	r2, #3
 8003194:	71da      	strb	r2, [r3, #7]
 8003196:	187b      	adds	r3, r7, r1
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	197b      	adds	r3, r7, r5
 800319c:	721a      	strb	r2, [r3, #8]
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	785a      	ldrb	r2, [r3, #1]
 80031a2:	197b      	adds	r3, r7, r5
 80031a4:	725a      	strb	r2, [r3, #9]
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	789a      	ldrb	r2, [r3, #2]
 80031aa:	197b      	adds	r3, r7, r5
 80031ac:	729a      	strb	r2, [r3, #10]
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	78da      	ldrb	r2, [r3, #3]
 80031b2:	197b      	adds	r3, r7, r5
 80031b4:	72da      	strb	r2, [r3, #11]
 80031b6:	197b      	adds	r3, r7, r5
 80031b8:	0006      	movs	r6, r0
 80031ba:	183a      	adds	r2, r7, r0
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	731a      	strb	r2, [r3, #12]
 80031c0:	197b      	adds	r3, r7, r5
 80031c2:	193a      	adds	r2, r7, r4
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	735a      	strb	r2, [r3, #13]
	crc = update_crc(0, TxPacket2, 12);
 80031c8:	2124      	movs	r1, #36	; 0x24
 80031ca:	187c      	adds	r4, r7, r1
 80031cc:	197b      	adds	r3, r7, r5
 80031ce:	220c      	movs	r2, #12
 80031d0:	0019      	movs	r1, r3
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7ff fe48 	bl	8002e68 <update_crc>
 80031d8:	0003      	movs	r3, r0
 80031da:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 80031dc:	0030      	movs	r0, r6
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	2124      	movs	r1, #36	; 0x24
 80031e2:	187a      	adds	r2, r7, r1
 80031e4:	8812      	ldrh	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	2426      	movs	r4, #38	; 0x26
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 80031f6:	197b      	adds	r3, r7, r5
 80031f8:	183a      	adds	r2, r7, r0
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 80031fe:	197b      	adds	r3, r7, r5
 8003200:	193a      	adds	r2, r7, r4
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8003206:	23fa      	movs	r3, #250	; 0xfa
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	1979      	adds	r1, r7, r5
 800320c:	4803      	ldr	r0, [pc, #12]	; (800321c <speed+0xfc>)
 800320e:	220e      	movs	r2, #14
 8003210:	f005 fd0c 	bl	8008c2c <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b00b      	add	sp, #44	; 0x2c
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321c:	20000d18 	.word	0x20000d18

08003220 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	0018      	movs	r0, r3
 800322a:	230c      	movs	r3, #12
 800322c:	001a      	movs	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f00f fe0d 	bl	8012e4e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003236:	4a2e      	ldr	r2, [pc, #184]	; (80032f0 <MX_ADC1_Init+0xd0>)
 8003238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <MX_ADC1_Init+0xcc>)
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	05d2      	lsls	r2, r2, #23
 8003240:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <MX_ADC1_Init+0xcc>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003256:	2204      	movs	r2, #4
 8003258:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <MX_ADC1_Init+0xcc>)
 800325c:	2200      	movs	r2, #0
 800325e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003262:	2200      	movs	r2, #0
 8003264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003268:	2200      	movs	r2, #0
 800326a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <MX_ADC1_Init+0xcc>)
 800326e:	2201      	movs	r2, #1
 8003270:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003274:	2220      	movs	r2, #32
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <MX_ADC1_Init+0xcc>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003288:	222c      	movs	r2, #44	; 0x2c
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <MX_ADC1_Init+0xcc>)
 8003296:	2200      	movs	r2, #0
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <MX_ADC1_Init+0xcc>)
 800329c:	2200      	movs	r2, #0
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <MX_ADC1_Init+0xcc>)
 80032a2:	223c      	movs	r2, #60	; 0x3c
 80032a4:	2100      	movs	r1, #0
 80032a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <MX_ADC1_Init+0xcc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <MX_ADC1_Init+0xcc>)
 80032b0:	0018      	movs	r0, r3
 80032b2:	f001 fcff 	bl	8004cb4 <HAL_ADC_Init>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d001      	beq.n	80032be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80032ba:	f000 fd03 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <MX_ADC1_Init+0xd4>)
 80032c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d0:	1d3a      	adds	r2, r7, #4
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <MX_ADC1_Init+0xcc>)
 80032d4:	0011      	movs	r1, r2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f001 fe94 	bl	8005004 <HAL_ADC_ConfigChannel>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d001      	beq.n	80032e4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80032e0:	f000 fcf0 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000698 	.word	0x20000698
 80032f0:	40012400 	.word	0x40012400
 80032f4:	20000100 	.word	0x20000100

080032f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b091      	sub	sp, #68	; 0x44
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	232c      	movs	r3, #44	; 0x2c
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	0018      	movs	r0, r3
 8003306:	2314      	movs	r3, #20
 8003308:	001a      	movs	r2, r3
 800330a:	2100      	movs	r1, #0
 800330c:	f00f fd9f 	bl	8012e4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003310:	2410      	movs	r4, #16
 8003312:	193b      	adds	r3, r7, r4
 8003314:	0018      	movs	r0, r3
 8003316:	231c      	movs	r3, #28
 8003318:	001a      	movs	r2, r3
 800331a:	2100      	movs	r1, #0
 800331c:	f00f fd97 	bl	8012e4e <memset>
  if(adcHandle->Instance==ADC1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_ADC_MspInit+0xac>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d138      	bne.n	800339c <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	01d2      	lsls	r2, r2, #7
 8003330:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003332:	193b      	adds	r3, r7, r4
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003338:	193b      	adds	r3, r7, r4
 800333a:	0018      	movs	r0, r3
 800333c:	f003 fe6c 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 8003340:	1e03      	subs	r3, r0, #0
 8003342:	d001      	beq.n	8003348 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003344:	f000 fcbe 	bl	8003cc4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 800334a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	0349      	lsls	r1, r1, #13
 8003352:	430a      	orrs	r2, r1
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	035b      	lsls	r3, r3, #13
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 800336a:	2102      	movs	r1, #2
 800336c:	430a      	orrs	r2, r1
 800336e:	635a      	str	r2, [r3, #52]	; 0x34
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_ADC_MspInit+0xb0>)
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003384:	187b      	adds	r3, r7, r1
 8003386:	2203      	movs	r2, #3
 8003388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	187b      	adds	r3, r7, r1
 800338c:	2200      	movs	r2, #0
 800338e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8003390:	187b      	adds	r3, r7, r1
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <HAL_ADC_MspInit+0xb4>)
 8003394:	0019      	movs	r1, r3
 8003396:	0010      	movs	r0, r2
 8003398:	f002 f9b6 	bl	8005708 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b011      	add	sp, #68	; 0x44
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	40012400 	.word	0x40012400
 80033a8:	40021000 	.word	0x40021000
 80033ac:	50000400 	.word	0x50000400

080033b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <MX_FREERTOS_Init+0x2c>)
 80033ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033bc:	c313      	stmia	r3!, {r0, r1, r4}
 80033be:	ca03      	ldmia	r2!, {r0, r1}
 80033c0:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2100      	movs	r1, #0
 80033c6:	0018      	movs	r0, r3
 80033c8:	f00d fb95 	bl	8010af6 <osThreadCreate>
 80033cc:	0002      	movs	r2, r0
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <MX_FREERTOS_Init+0x30>)
 80033d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b007      	add	sp, #28
 80033d8:	bd90      	pop	{r4, r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	08016570 	.word	0x08016570
 80033e0:	200006fc 	.word	0x200006fc

080033e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f00d fbaa 	bl	8010b46 <osDelay>
 80033f2:	e7fb      	b.n	80033ec <StartDefaultTask+0x8>

080033f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	2414      	movs	r4, #20
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	0018      	movs	r0, r3
 8003400:	2314      	movs	r3, #20
 8003402:	001a      	movs	r2, r3
 8003404:	2100      	movs	r1, #0
 8003406:	f00f fd22 	bl	8012e4e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	4b66      	ldr	r3, [pc, #408]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003410:	2104      	movs	r1, #4
 8003412:	430a      	orrs	r2, r1
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003422:	4b60      	ldr	r3, [pc, #384]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003426:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003428:	2120      	movs	r1, #32
 800342a:	430a      	orrs	r2, r1
 800342c:	635a      	str	r2, [r3, #52]	; 0x34
 800342e:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003440:	2101      	movs	r1, #1
 8003442:	430a      	orrs	r2, r1
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
 8003446:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	2201      	movs	r2, #1
 800344c:	4013      	ands	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003458:	2102      	movs	r1, #2
 800345a:	430a      	orrs	r2, r1
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	2202      	movs	r2, #2
 8003464:	4013      	ands	r3, r2
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 800346c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003470:	2108      	movs	r1, #8
 8003472:	430a      	orrs	r2, r1
 8003474:	635a      	str	r2, [r3, #52]	; 0x34
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <MX_GPIO_Init+0x1b0>)
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	2208      	movs	r2, #8
 800347c:	4013      	ands	r3, r2
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin|OE_Pin, GPIO_PIN_RESET);
 8003482:	4949      	ldr	r1, [pc, #292]	; (80035a8 <MX_GPIO_Init+0x1b4>)
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <MX_GPIO_Init+0x1b8>)
 8003486:	2200      	movs	r2, #0
 8003488:	0018      	movs	r0, r3
 800348a:	f002 faa1 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin|S2_Pin|S3_Pin
 800348e:	23a0      	movs	r3, #160	; 0xa0
 8003490:	05db      	lsls	r3, r3, #23
 8003492:	2200      	movs	r2, #0
 8003494:	214f      	movs	r1, #79	; 0x4f
 8003496:	0018      	movs	r0, r3
 8003498:	f002 fa9a 	bl	80059d0 <HAL_GPIO_WritePin>
                          |LED_CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO1_C1_Pin|GPIO1_C2_Pin, GPIO_PIN_RESET);
 800349c:	4944      	ldr	r1, [pc, #272]	; (80035b0 <MX_GPIO_Init+0x1bc>)
 800349e:	4b45      	ldr	r3, [pc, #276]	; (80035b4 <MX_GPIO_Init+0x1c0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	0018      	movs	r0, r3
 80034a4:	f002 fa94 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|OE_Pin;
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <MX_GPIO_Init+0x1b4>)
 80034ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2201      	movs	r2, #1
 80034b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <MX_GPIO_Init+0x1b8>)
 80034c4:	0019      	movs	r1, r3
 80034c6:	0010      	movs	r0, r2
 80034c8:	f002 f91e 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CB1_OUT_Pin|CB2_OUT_Pin;
 80034cc:	0021      	movs	r1, r4
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2206      	movs	r2, #6
 80034d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2288      	movs	r2, #136	; 0x88
 80034d8:	0352      	lsls	r2, r2, #13
 80034da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	000c      	movs	r4, r1
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	4a31      	ldr	r2, [pc, #196]	; (80035ac <MX_GPIO_Init+0x1b8>)
 80034e8:	0019      	movs	r1, r3
 80034ea:	0010      	movs	r0, r2
 80034ec:	f002 f90c 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	224f      	movs	r2, #79	; 0x4f
 80034f4:	601a      	str	r2, [r3, #0]
                          |LED_CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	2201      	movs	r2, #1
 80034fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	193b      	adds	r3, r7, r4
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	193a      	adds	r2, r7, r4
 800350a:	23a0      	movs	r3, #160	; 0xa0
 800350c:	05db      	lsls	r3, r3, #23
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f002 f8f9 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C1_Pin;
 8003516:	193b      	adds	r3, r7, r4
 8003518:	2202      	movs	r2, #2
 800351a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351c:	193b      	adds	r3, r7, r4
 800351e:	2200      	movs	r2, #0
 8003520:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003522:	193b      	adds	r3, r7, r4
 8003524:	2202      	movs	r2, #2
 8003526:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C1_GPIO_Port, &GPIO_InitStruct);
 8003528:	193b      	adds	r3, r7, r4
 800352a:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <MX_GPIO_Init+0x1c0>)
 800352c:	0019      	movs	r1, r3
 800352e:	0010      	movs	r0, r2
 8003530:	f002 f8ea 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO1_C1_Pin|GPIO1_C2_Pin;
 8003534:	193b      	adds	r3, r7, r4
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <MX_GPIO_Init+0x1bc>)
 8003538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353a:	193b      	adds	r3, r7, r4
 800353c:	2201      	movs	r2, #1
 800353e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	193b      	adds	r3, r7, r4
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	193b      	adds	r3, r7, r4
 8003548:	2200      	movs	r2, #0
 800354a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	193b      	adds	r3, r7, r4
 800354e:	4a19      	ldr	r2, [pc, #100]	; (80035b4 <MX_GPIO_Init+0x1c0>)
 8003550:	0019      	movs	r1, r3
 8003552:	0010      	movs	r0, r2
 8003554:	f002 f8d8 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C2_Pin;
 8003558:	0021      	movs	r1, r4
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0152      	lsls	r2, r2, #5
 8003560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C2_GPIO_Port, &GPIO_InitStruct);
 800356e:	187b      	adds	r3, r7, r1
 8003570:	4a10      	ldr	r2, [pc, #64]	; (80035b4 <MX_GPIO_Init+0x1c0>)
 8003572:	0019      	movs	r1, r3
 8003574:	0010      	movs	r0, r2
 8003576:	f002 f8c7 	bl	8005708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2103      	movs	r1, #3
 800357e:	2005      	movs	r0, #5
 8003580:	f001 ffc4 	bl	800550c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003584:	2005      	movs	r0, #5
 8003586:	f001 ffd6 	bl	8005536 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2103      	movs	r1, #3
 800358e:	2006      	movs	r0, #6
 8003590:	f001 ffbc 	bl	800550c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003594:	2006      	movs	r0, #6
 8003596:	f001 ffce 	bl	8005536 <HAL_NVIC_EnableIRQ>

}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b00b      	add	sp, #44	; 0x2c
 80035a0:	bd90      	pop	{r4, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40021000 	.word	0x40021000
 80035a8:	00001808 	.word	0x00001808
 80035ac:	50000800 	.word	0x50000800
 80035b0:	00002004 	.word	0x00002004
 80035b4:	50000400 	.word	0x50000400

080035b8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <MX_I2C1_Init+0x74>)
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <MX_I2C1_Init+0x78>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <MX_I2C1_Init+0x74>)
 80035c4:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <MX_I2C1_Init+0x7c>)
 80035c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <MX_I2C1_Init+0x74>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <MX_I2C1_Init+0x74>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <MX_I2C1_Init+0x74>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <MX_I2C1_Init+0x74>)
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <MX_I2C1_Init+0x74>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <MX_I2C1_Init+0x74>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <MX_I2C1_Init+0x74>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <MX_I2C1_Init+0x74>)
 80035f4:	0018      	movs	r0, r3
 80035f6:	f002 fa3d 	bl	8005a74 <HAL_I2C_Init>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035fe:	f000 fb61 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <MX_I2C1_Init+0x74>)
 8003604:	2100      	movs	r1, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f002 ff6a 	bl	80064e0 <HAL_I2CEx_ConfigAnalogFilter>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d001      	beq.n	8003614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003610:	f000 fb58 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <MX_I2C1_Init+0x74>)
 8003616:	2100      	movs	r1, #0
 8003618:	0018      	movs	r0, r3
 800361a:	f002 ffad 	bl	8006578 <HAL_I2CEx_ConfigDigitalFilter>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003622:	f000 fb4f 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000700 	.word	0x20000700
 8003630:	40005400 	.word	0x40005400
 8003634:	10707dbc 	.word	0x10707dbc

08003638 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <MX_I2C2_Init+0x74>)
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <MX_I2C2_Init+0x78>)
 8003640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <MX_I2C2_Init+0x74>)
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <MX_I2C2_Init+0x7c>)
 8003646:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <MX_I2C2_Init+0x74>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <MX_I2C2_Init+0x74>)
 8003650:	2201      	movs	r2, #1
 8003652:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <MX_I2C2_Init+0x74>)
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_I2C2_Init+0x74>)
 800365c:	2200      	movs	r2, #0
 800365e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <MX_I2C2_Init+0x74>)
 8003662:	2200      	movs	r2, #0
 8003664:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <MX_I2C2_Init+0x74>)
 8003668:	2200      	movs	r2, #0
 800366a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_I2C2_Init+0x74>)
 800366e:	2200      	movs	r2, #0
 8003670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <MX_I2C2_Init+0x74>)
 8003674:	0018      	movs	r0, r3
 8003676:	f002 f9fd 	bl	8005a74 <HAL_I2C_Init>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d001      	beq.n	8003682 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800367e:	f000 fb21 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <MX_I2C2_Init+0x74>)
 8003684:	2100      	movs	r1, #0
 8003686:	0018      	movs	r0, r3
 8003688:	f002 ff2a 	bl	80064e0 <HAL_I2CEx_ConfigAnalogFilter>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003690:	f000 fb18 	bl	8003cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <MX_I2C2_Init+0x74>)
 8003696:	2100      	movs	r1, #0
 8003698:	0018      	movs	r0, r3
 800369a:	f002 ff6d 	bl	8006578 <HAL_I2CEx_ConfigDigitalFilter>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80036a2:	f000 fb0f 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000754 	.word	0x20000754
 80036b0:	40005800 	.word	0x40005800
 80036b4:	10707dbc 	.word	0x10707dbc

080036b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b093      	sub	sp, #76	; 0x4c
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	2334      	movs	r3, #52	; 0x34
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	0018      	movs	r0, r3
 80036c6:	2314      	movs	r3, #20
 80036c8:	001a      	movs	r2, r3
 80036ca:	2100      	movs	r1, #0
 80036cc:	f00f fbbf 	bl	8012e4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036d0:	2418      	movs	r4, #24
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	0018      	movs	r0, r3
 80036d6:	231c      	movs	r3, #28
 80036d8:	001a      	movs	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	f00f fbb7 	bl	8012e4e <memset>
  if(i2cHandle->Instance==I2C1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a3e      	ldr	r2, [pc, #248]	; (80037e0 <HAL_I2C_MspInit+0x128>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d140      	bne.n	800376c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	2220      	movs	r2, #32
 80036ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	0018      	movs	r0, r3
 80036fa:	f003 fc8d 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003702:	f000 fadf 	bl	8003cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370a:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
 8003712:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_1_Pin|SDA_1_Pin;
 800371e:	2134      	movs	r1, #52	; 0x34
 8003720:	187b      	adds	r3, r7, r1
 8003722:	22c0      	movs	r2, #192	; 0xc0
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2212      	movs	r2, #18
 800372c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2206      	movs	r2, #6
 800373e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	187a      	adds	r2, r7, r1
 8003742:	23a0      	movs	r3, #160	; 0xa0
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	0011      	movs	r1, r2
 8003748:	0018      	movs	r0, r3
 800374a:	f001 ffdd 	bl	8005708 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	0389      	lsls	r1, r1, #14
 8003758:	430a      	orrs	r2, r1
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
 800375c:	4b21      	ldr	r3, [pc, #132]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 800375e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	039b      	lsls	r3, r3, #14
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800376a:	e035      	b.n	80037d8 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_I2C_MspInit+0x130>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d130      	bne.n	80037d8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377a:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 800377c:	2102      	movs	r1, #2
 800377e:	430a      	orrs	r2, r1
 8003780:	635a      	str	r2, [r3, #52]	; 0x34
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	2202      	movs	r2, #2
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_2_Pin|SDA_2_Pin;
 800378e:	2134      	movs	r1, #52	; 0x34
 8003790:	187b      	adds	r3, r7, r1
 8003792:	22c0      	movs	r2, #192	; 0xc0
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2212      	movs	r2, #18
 800379c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2206      	movs	r2, #6
 80037ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_I2C_MspInit+0x134>)
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f001 ffa6 	bl	8005708 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 80037be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	03c9      	lsls	r1, r1, #15
 80037c6:	430a      	orrs	r2, r1
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_I2C_MspInit+0x12c>)
 80037cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	03db      	lsls	r3, r3, #15
 80037d2:	4013      	ands	r3, r2
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b013      	add	sp, #76	; 0x4c
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	40005400 	.word	0x40005400
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40005800 	.word	0x40005800
 80037ec:	50000400 	.word	0x50000400

080037f0 <__io_putchar>:
void clignote();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80037f8:	2301      	movs	r3, #1
 80037fa:	425b      	negs	r3, r3
 80037fc:	1d39      	adds	r1, r7, #4
 80037fe:	4804      	ldr	r0, [pc, #16]	; (8003810 <__io_putchar+0x20>)
 8003800:	2201      	movs	r2, #1
 8003802:	f005 fa13 	bl	8008c2c <HAL_UART_Transmit>
	return ch;
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000c84 	.word	0x20000c84

08003814 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_UART_RxCpltCallback+0x20>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();
 8003826:	f00f f89d 	bl	8012964 <shell_uart_receive_irq_cb>
	}
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40013800 	.word	0x40013800

08003838 <fonction>:

int fonction(h_shell_t * pshell, int argc, char ** argv)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
	printf("Je suis une fonction bidon\r\n");
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <fonction+0x54>)
 8003846:	0018      	movs	r0, r3
 8003848:	f010 f804 	bl	8013854 <puts>

	printf("argc = %d\r\n", argc);
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <fonction+0x58>)
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f00f ff72 	bl	801373c <iprintf>

	for (int i = 0 ; i < argc ; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e00c      	b.n	8003878 <fonction+0x40>
	{
		printf("arg %d = %s\r\n", i, argv[i]);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <fonction+0x5c>)
 800386c:	0018      	movs	r0, r3
 800386e:	f00f ff65 	bl	801373c <iprintf>
	for (int i = 0 ; i < argc ; i++)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	3301      	adds	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	429a      	cmp	r2, r3
 800387e:	dbee      	blt.n	800385e <fonction+0x26>
	}

	return 0;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b006      	add	sp, #24
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	08016584 	.word	0x08016584
 8003890:	080165a0 	.word	0x080165a0
 8003894:	080165ac 	.word	0x080165ac

08003898 <addition>:

int addition(h_shell_t *pshell, int argc, char ** argv)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d119      	bne.n	80038de <addition+0x46>
	{
		int a, b;
		a = atoi(argv[1]);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f00f fa93 	bl	8012ddc <atoi>
 80038b6:	0003      	movs	r3, r0
 80038b8:	617b      	str	r3, [r7, #20]
		b = atoi(argv[2]);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3308      	adds	r3, #8
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f00f fa8b 	bl	8012ddc <atoi>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]
		printf("%d + %d = %d\r\n", a, b, a+b);
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	18d3      	adds	r3, r2, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <addition+0x5c>)
 80038d6:	f00f ff31 	bl	801373c <iprintf>
		return 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	e005      	b.n	80038ea <addition+0x52>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <addition+0x60>)
 80038e0:	0018      	movs	r0, r3
 80038e2:	f00f ffb7 	bl	8013854 <puts>
		return -1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	425b      	negs	r3, r3
	}
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b006      	add	sp, #24
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	080165bc 	.word	0x080165bc
 80038f8:	080165cc 	.word	0x080165cc

080038fc <task_shell>:
	return 0;
}
 */

void task_shell(void * unused)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	shell_init(&shell_funct1);
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <task_shell+0x7c>)
 8003906:	0018      	movs	r0, r3
 8003908:	f00f f8be 	bl	8012a88 <shell_init>
	shell_add(&shell_funct1,'f', fonction, "Une fonction inutile");
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <task_shell+0x80>)
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <task_shell+0x84>)
 8003910:	4819      	ldr	r0, [pc, #100]	; (8003978 <task_shell+0x7c>)
 8003912:	2166      	movs	r1, #102	; 0x66
 8003914:	f00f f916 	bl	8012b44 <shell_add>
	shell_add(&shell_funct1,'a', addition, "Effectue une somme");
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <task_shell+0x88>)
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <task_shell+0x8c>)
 800391c:	4816      	ldr	r0, [pc, #88]	; (8003978 <task_shell+0x7c>)
 800391e:	2161      	movs	r1, #97	; 0x61
 8003920:	f00f f910 	bl	8012b44 <shell_add>

	shell_add(&shell_funct1,'d', moteurDroit, "Moteur droit");
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <task_shell+0x90>)
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <task_shell+0x94>)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <task_shell+0x7c>)
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	f00f f90a 	bl	8012b44 <shell_add>
	shell_add(&shell_funct1,'g', moteurGauche, "Moteur gauche");
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <task_shell+0x98>)
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <task_shell+0x9c>)
 8003934:	4810      	ldr	r0, [pc, #64]	; (8003978 <task_shell+0x7c>)
 8003936:	2167      	movs	r1, #103	; 0x67
 8003938:	f00f f904 	bl	8012b44 <shell_add>
	shell_add(&shell_funct1,'m', motor_shell, "Commande moteur");
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <task_shell+0xa0>)
 800393e:	4a18      	ldr	r2, [pc, #96]	; (80039a0 <task_shell+0xa4>)
 8003940:	480d      	ldr	r0, [pc, #52]	; (8003978 <task_shell+0x7c>)
 8003942:	216d      	movs	r1, #109	; 0x6d
 8003944:	f00f f8fe 	bl	8012b44 <shell_add>

	shell_add(&shell_funct1,'e', encoder_shell, "Active encodeur");
 8003948:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <task_shell+0xa8>)
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <task_shell+0xac>)
 800394c:	480a      	ldr	r0, [pc, #40]	; (8003978 <task_shell+0x7c>)
 800394e:	2165      	movs	r1, #101	; 0x65
 8003950:	f00f f8f8 	bl	8012b44 <shell_add>

	//shell_add(&shell_funct1,'o',servo_open,"j'ouvre pince");
	//shell_add(&shell_funct1,'c',servo_close,"je ferme la pince");
	//shell_add(&shell_funct1,'w',servo_work,"ouvre_ferme");
	//shell_add(&shell_funct1,'s',servo_speed,"Speed");
	shell_add(&shell_funct1,'s',servo_shell,"Commande servomoteur");
 8003954:	4b15      	ldr	r3, [pc, #84]	; (80039ac <task_shell+0xb0>)
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <task_shell+0xb4>)
 8003958:	4807      	ldr	r0, [pc, #28]	; (8003978 <task_shell+0x7c>)
 800395a:	2173      	movs	r1, #115	; 0x73
 800395c:	f00f f8f2 	bl	8012b44 <shell_add>

	shell_add(&shell_funct1,'t',TOF_shell,"Active TOF");
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <task_shell+0xb8>)
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <task_shell+0xbc>)
 8003964:	4804      	ldr	r0, [pc, #16]	; (8003978 <task_shell+0x7c>)
 8003966:	2174      	movs	r1, #116	; 0x74
 8003968:	f00f f8ec 	bl	8012b44 <shell_add>


	//shell_add(&shell_funct1,'l',led,"set la vitesse de clignotement");
	for(;;){
		shell_run(&shell_funct1); // boucle infinie
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <task_shell+0x7c>)
 800396e:	0018      	movs	r0, r3
 8003970:	f00f f99c 	bl	8012cac <shell_run>
 8003974:	e7fa      	b.n	800396c <task_shell+0x70>
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	200007a8 	.word	0x200007a8
 800397c:	080165f4 	.word	0x080165f4
 8003980:	08003839 	.word	0x08003839
 8003984:	0801660c 	.word	0x0801660c
 8003988:	08003899 	.word	0x08003899
 800398c:	08016620 	.word	0x08016620
 8003990:	080027b5 	.word	0x080027b5
 8003994:	08016630 	.word	0x08016630
 8003998:	0800287d 	.word	0x0800287d
 800399c:	08016640 	.word	0x08016640
 80039a0:	08002945 	.word	0x08002945
 80039a4:	08016650 	.word	0x08016650
 80039a8:	08002251 	.word	0x08002251
 80039ac:	08016660 	.word	0x08016660
 80039b0:	08002d39 	.word	0x08002d39
 80039b4:	08016678 	.word	0x08016678
 80039b8:	080128cd 	.word	0x080128cd

080039bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039c2:	f000 ffcf 	bl	8004964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039c6:	f000 f90d 	bl	8003be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ca:	f7ff fd13 	bl	80033f4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80039ce:	f7ff fe33 	bl	8003638 <MX_I2C2_Init>
  MX_TIM1_Init();
 80039d2:	f000 fa9b 	bl	8003f0c <MX_TIM1_Init>
  MX_TIM3_Init();
 80039d6:	f000 fb03 	bl	8003fe0 <MX_TIM3_Init>
  MX_TIM14_Init();
 80039da:	f000 fb65 	bl	80040a8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80039de:	f000 fe49 	bl	8004674 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80039e2:	f000 fbad 	bl	8004140 <MX_TIM16_Init>
  MX_I2C1_Init();
 80039e6:	f7ff fde7 	bl	80035b8 <MX_I2C1_Init>
  MX_TIM17_Init();
 80039ea:	f000 fc33 	bl	8004254 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80039ee:	f000 fe8f 	bl	8004710 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80039f2:	f7ff fc15 	bl	8003220 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	printf("coucou\r\n");
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <main+0x19c>)
 80039f8:	0018      	movs	r0, r3
 80039fa:	f00f ff2b 	bl	8013854 <puts>
	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 80039fe:	23fa      	movs	r3, #250	; 0xfa
 8003a00:	005a      	lsls	r2, r3, #1
 8003a02:	4956      	ldr	r1, [pc, #344]	; (8003b5c <main+0x1a0>)
 8003a04:	4856      	ldr	r0, [pc, #344]	; (8003b60 <main+0x1a4>)
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <main+0x1a8>)
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f00d fbc3 	bl	801119a <xTaskCreate>
 8003a14:	0003      	movs	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d004      	beq.n	8003a24 <main+0x68>
	{
		printf("Error creating task shell\r\n");
 8003a1a:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <main+0x1ac>)
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f00f ff19 	bl	8013854 <puts>
 8003a22:	e003      	b.n	8003a2c <main+0x70>
		//Error_Handler();
	}
	else{
		printf("C'est bon\r\n");
 8003a24:	4b51      	ldr	r3, [pc, #324]	; (8003b6c <main+0x1b0>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f00f ff14 	bl	8013854 <puts>
	ret = xTaskCreate(task_demo, "Demo", DEMO_STACK_SIZE,NULL, DEMO_PRIORITY,&h_task_demo);
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
			printf("Error creating task demo\r\n");
			Error_Handler();
		}*/
	printf("coucou task motor\r\n");
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <main+0x1b4>)
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f00f ff10 	bl	8013854 <puts>
	ret = xTaskCreate(taskMotor,"Motor",MOTOR_STACK_SIZE,(void*)&h_cmd_motor, MOTOR_PRIORITY, &h_motor);
 8003a34:	4c4f      	ldr	r4, [pc, #316]	; (8003b74 <main+0x1b8>)
 8003a36:	23fa      	movs	r3, #250	; 0xfa
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	494f      	ldr	r1, [pc, #316]	; (8003b78 <main+0x1bc>)
 8003a3c:	484f      	ldr	r0, [pc, #316]	; (8003b7c <main+0x1c0>)
 8003a3e:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <main+0x1c4>)
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2305      	movs	r3, #5
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	0023      	movs	r3, r4
 8003a48:	f00d fba7 	bl	801119a <xTaskCreate>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3301      	adds	r3, #1
 8003a54:	d105      	bne.n	8003a62 <main+0xa6>
		printf("Error Task Motor\r\n");
 8003a56:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <main+0x1c8>)
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f00f fefb 	bl	8013854 <puts>
		Error_Handler();
 8003a5e:	f000 f931 	bl	8003cc4 <Error_Handler>
	}
	printf("bye bye task motor\r\n");
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <main+0x1cc>)
 8003a64:	0018      	movs	r0, r3
 8003a66:	f00f fef5 	bl	8013854 <puts>
	printf("coucou task encoder\r\n");
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <main+0x1d0>)
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f00f fef1 	bl	8013854 <puts>
	ret = xTaskCreate(taskEncoder,"Encoder",ENCODER_STACK_SIZE,NULL, ENCODER_PRIORITY, &h_encoder);
 8003a72:	23fa      	movs	r3, #250	; 0xfa
 8003a74:	005a      	lsls	r2, r3, #1
 8003a76:	4946      	ldr	r1, [pc, #280]	; (8003b90 <main+0x1d4>)
 8003a78:	4846      	ldr	r0, [pc, #280]	; (8003b94 <main+0x1d8>)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <main+0x1dc>)
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2304      	movs	r3, #4
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f00d fb89 	bl	801119a <xTaskCreate>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	d105      	bne.n	8003a9e <main+0xe2>
		printf("Error Task Encoder\r\n");
 8003a92:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <main+0x1e0>)
 8003a94:	0018      	movs	r0, r3
 8003a96:	f00f fedd 	bl	8013854 <puts>
		Error_Handler();
 8003a9a:	f000 f913 	bl	8003cc4 <Error_Handler>
	}
	printf("coucou task encoder\r\n");
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <main+0x1d0>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f00f fed7 	bl	8013854 <puts>
	ret = xTaskCreate(taskEncoderPrint,"Encoder Print",ENCODER_PRINT_STACK_SIZE,NULL, ENCODER_PRINT_PRIORITY, &h_encoder_print);
 8003aa6:	23fa      	movs	r3, #250	; 0xfa
 8003aa8:	005a      	lsls	r2, r3, #1
 8003aaa:	493d      	ldr	r1, [pc, #244]	; (8003ba0 <main+0x1e4>)
 8003aac:	483d      	ldr	r0, [pc, #244]	; (8003ba4 <main+0x1e8>)
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <main+0x1ec>)
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f00d fb6f 	bl	801119a <xTaskCreate>
 8003abc:	0003      	movs	r3, r0
 8003abe:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <main+0x116>
		printf("Error Task Encoder Print\r\n");
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <main+0x1f0>)
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f00f fec3 	bl	8013854 <puts>
		Error_Handler();
 8003ace:	f000 f8f9 	bl	8003cc4 <Error_Handler>
	}
	printf("coucou task TOF\r\n");
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <main+0x1f4>)
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f00f febd 	bl	8013854 <puts>
	ret = xTaskCreate(taskTOF,"TOF",TOF_STACK_SIZE,NULL,TOF_PRIORITY,&h_tof);
 8003ada:	23fa      	movs	r3, #250	; 0xfa
 8003adc:	005a      	lsls	r2, r3, #1
 8003ade:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <main+0x1f8>)
 8003ae0:	4835      	ldr	r0, [pc, #212]	; (8003bb8 <main+0x1fc>)
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <main+0x200>)
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	f00d fb55 	bl	801119a <xTaskCreate>
 8003af0:	0003      	movs	r3, r0
 8003af2:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3301      	adds	r3, #1
 8003af8:	d105      	bne.n	8003b06 <main+0x14a>
		printf("Error Task TOF\r\n");
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <main+0x204>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f00f fea9 	bl	8013854 <puts>
		Error_Handler();
 8003b02:	f000 f8df 	bl	8003cc4 <Error_Handler>
	}
	printf("bye bye task TOF\r\n");
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <main+0x208>)
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f00f fea3 	bl	8013854 <puts>
	printf("coucou task servo\r\n");
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <main+0x20c>)
 8003b10:	0018      	movs	r0, r3
 8003b12:	f00f fe9f 	bl	8013854 <puts>
	ret = xTaskCreate(taskServoMotor,"Servomoteur",SERVO_STACK_SIZE,(void*)&h_cmd_servomotor,SERVO_PRIORITY,&h_servomotor);
 8003b16:	4c2d      	ldr	r4, [pc, #180]	; (8003bcc <main+0x210>)
 8003b18:	23fa      	movs	r3, #250	; 0xfa
 8003b1a:	005a      	lsls	r2, r3, #1
 8003b1c:	492c      	ldr	r1, [pc, #176]	; (8003bd0 <main+0x214>)
 8003b1e:	482d      	ldr	r0, [pc, #180]	; (8003bd4 <main+0x218>)
 8003b20:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <main+0x21c>)
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2306      	movs	r3, #6
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	0023      	movs	r3, r4
 8003b2a:	f00d fb36 	bl	801119a <xTaskCreate>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3301      	adds	r3, #1
 8003b36:	d105      	bne.n	8003b44 <main+0x188>
		printf("Error Task Servomotor\r\n");
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <main+0x220>)
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f00f fe8a 	bl	8013854 <puts>
		Error_Handler();
 8003b40:	f000 f8c0 	bl	8003cc4 <Error_Handler>
	}
	printf("bye bye task servo\r\n");
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <main+0x224>)
 8003b46:	0018      	movs	r0, r3
 8003b48:	f00f fe84 	bl	8013854 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003b4c:	f7ff fc30 	bl	80033b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003b50:	f00c ffc9 	bl	8010ae6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003b54:	e7fe      	b.n	8003b54 <main+0x198>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	08016684 	.word	0x08016684
 8003b5c:	0801668c 	.word	0x0801668c
 8003b60:	080038fd 	.word	0x080038fd
 8003b64:	20005f58 	.word	0x20005f58
 8003b68:	08016694 	.word	0x08016694
 8003b6c:	080166b0 	.word	0x080166b0
 8003b70:	080166bc 	.word	0x080166bc
 8003b74:	2000068c 	.word	0x2000068c
 8003b78:	080166d0 	.word	0x080166d0
 8003b7c:	08002cb5 	.word	0x08002cb5
 8003b80:	20000688 	.word	0x20000688
 8003b84:	080166d8 	.word	0x080166d8
 8003b88:	080166ec 	.word	0x080166ec
 8003b8c:	08016700 	.word	0x08016700
 8003b90:	08016718 	.word	0x08016718
 8003b94:	080022a5 	.word	0x080022a5
 8003b98:	200004d8 	.word	0x200004d8
 8003b9c:	08016720 	.word	0x08016720
 8003ba0:	08016734 	.word	0x08016734
 8003ba4:	080025dd 	.word	0x080025dd
 8003ba8:	200004dc 	.word	0x200004dc
 8003bac:	08016744 	.word	0x08016744
 8003bb0:	08016760 	.word	0x08016760
 8003bb4:	08016774 	.word	0x08016774
 8003bb8:	08012921 	.word	0x08012921
 8003bbc:	20005f54 	.word	0x20005f54
 8003bc0:	08016778 	.word	0x08016778
 8003bc4:	08016788 	.word	0x08016788
 8003bc8:	0801679c 	.word	0x0801679c
 8003bcc:	20000694 	.word	0x20000694
 8003bd0:	080167b0 	.word	0x080167b0
 8003bd4:	08002e0d 	.word	0x08002e0d
 8003bd8:	20000690 	.word	0x20000690
 8003bdc:	080167bc 	.word	0x080167bc
 8003be0:	080167d4 	.word	0x080167d4

08003be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b093      	sub	sp, #76	; 0x4c
 8003be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bea:	2414      	movs	r4, #20
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	0018      	movs	r0, r3
 8003bf0:	2334      	movs	r3, #52	; 0x34
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f00f f92a 	bl	8012e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	2310      	movs	r3, #16
 8003c00:	001a      	movs	r2, r3
 8003c02:	2100      	movs	r1, #0
 8003c04:	f00f f923 	bl	8012e4e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f002 fcff 	bl	8006610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2202      	movs	r2, #2
 8003c16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0052      	lsls	r2, r2, #1
 8003c1e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003c20:	0021      	movs	r1, r4
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	2240      	movs	r2, #64	; 0x40
 8003c2c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c2e:	187b      	adds	r3, r7, r1
 8003c30:	2202      	movs	r2, #2
 8003c32:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	2202      	movs	r2, #2
 8003c38:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	2208      	movs	r2, #8
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2280      	movs	r2, #128	; 0x80
 8003c4a:	0292      	lsls	r2, r2, #10
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	0592      	lsls	r2, r2, #22
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f002 fd25 	bl	80066a8 <HAL_RCC_OscConfig>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003c62:	f000 f82f 	bl	8003cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	2207      	movs	r2, #7
 8003c6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	2202      	movs	r2, #2
 8003c70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2102      	movs	r1, #2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f003 f820 	bl	8006cc8 <HAL_RCC_ClockConfig>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003c8c:	f000 f81a 	bl	8003cc4 <Error_Handler>
  }
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b013      	add	sp, #76	; 0x4c
 8003c96:	bd90      	pop	{r4, r7, pc}

08003c98 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	1dbb      	adds	r3, r7, #6
 8003ca2:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, "Stop\r\n", 8, HAL_MAX_DELAY);
	h_cmd_motor.cmd='s';
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8003ca6:	2273      	movs	r2, #115	; 0x73
 8003ca8:	701a      	strb	r2, [r3, #0]
	vTaskResume(h_motor);
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f00d fc54 	bl	801155c <vTaskResume>
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b002      	add	sp, #8
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	2000068c 	.word	0x2000068c
 8003cc0:	20000688 	.word	0x20000688

08003cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc8:	b672      	cpsid	i
}
 8003cca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003ccc:	e7fe      	b.n	8003ccc <Error_Handler+0x8>
	...

08003cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_MspInit+0x50>)
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_MspInit+0x50>)
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_MspInit+0x50>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <HAL_MspInit+0x50>)
 8003cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_MspInit+0x50>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	0549      	lsls	r1, r1, #21
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_MspInit+0x50>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	055b      	lsls	r3, r3, #21
 8003d04:	4013      	ands	r3, r2
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	425b      	negs	r3, r3
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2103      	movs	r1, #3
 8003d12:	0018      	movs	r0, r3
 8003d14:	f001 fbfa 	bl	800550c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021000 	.word	0x40021000

08003d24 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003d28:	e7fe      	b.n	8003d28 <NMI_Handler+0x4>

08003d2a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8003d2e:	e7fe      	b.n	8003d2e <HardFault_Handler+0x4>

08003d30 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003d34:	f000 fe80 	bl	8004a38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003d38:	f00d ffc8 	bl	8011ccc <xTaskGetSchedulerState>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <SysTick_Handler+0x16>
	{
#endif /* INCLUDE_xTaskGetSchedulerState */
		xPortSysTickHandler();
 8003d42:	f00e fae9 	bl	8012318 <xPortSysTickHandler>
	}
#endif /* INCLUDE_xTaskGetSchedulerState */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <EXTI0_1_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 and line 1 interrupts.
 */
void EXTI0_1_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_1_IRQn 0 */

	/* USER CODE END EXTI0_1_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(CB1_OUT_Pin);
 8003d50:	2002      	movs	r0, #2
 8003d52:	f001 fe5b 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_1_IRQn 1 */

	/* USER CODE END EXTI0_1_IRQn 1 */
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <EXTI2_3_IRQHandler>:

/**
 * @brief This function handles EXTI line 2 and line 3 interrupts.
 */
void EXTI2_3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI2_3_IRQn 0 */

	/* USER CODE END EXTI2_3_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(CB2_OUT_Pin);
 8003d60:	2004      	movs	r0, #4
 8003d62:	f001 fe53 	bl	8005a0c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI2_3_IRQn 1 */

	/* USER CODE END EXTI2_3_IRQn 1 */
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <USART1_IRQHandler+0x14>)
 8003d72:	0018      	movs	r0, r3
 8003d74:	f005 f84e 	bl	8008e14 <HAL_UART_IRQHandler>

	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	20000c84 	.word	0x20000c84

08003d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	return 1;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_kill>:

int _kill(int pid, int sig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d9a:	f00f f825 	bl	8012de8 <__errno>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	2216      	movs	r2, #22
 8003da2:	601a      	str	r2, [r3, #0]
	return -1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	425b      	negs	r3, r3
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_exit>:

void _exit (int status)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003db8:	2301      	movs	r3, #1
 8003dba:	425a      	negs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7ff ffe5 	bl	8003d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dc6:	e7fe      	b.n	8003dc6 <_exit+0x16>

08003dc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e00a      	b.n	8003df0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dda:	e000      	b.n	8003dde <_read+0x16>
 8003ddc:	bf00      	nop
 8003dde:	0001      	movs	r1, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	60ba      	str	r2, [r7, #8]
 8003de6:	b2ca      	uxtb	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3301      	adds	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dbf0      	blt.n	8003dda <_read+0x12>
	}

return len;
 8003df8:	687b      	ldr	r3, [r7, #4]
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b006      	add	sp, #24
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e009      	b.n	8003e28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	60ba      	str	r2, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7ff fce7 	bl	80037f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3301      	adds	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	dbf1      	blt.n	8003e14 <_write+0x12>
	}
	return len;
 8003e30:	687b      	ldr	r3, [r7, #4]
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b006      	add	sp, #24
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_close>:

int _close(int file)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	return -1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	425b      	negs	r3, r3
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b002      	add	sp, #8
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2280      	movs	r2, #128	; 0x80
 8003e5c:	0192      	lsls	r2, r2, #6
 8003e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b002      	add	sp, #8
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_isatty>:

int _isatty(int file)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return 1;
 8003e72:	2301      	movs	r3, #1
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	return 0;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <_sbrk+0x5c>)
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <_sbrk+0x60>)
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <_sbrk+0x64>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <_sbrk+0x64>)
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <_sbrk+0x68>)
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <_sbrk+0x64>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d207      	bcs.n	8003ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ec4:	f00e ff90 	bl	8012de8 <__errno>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	220c      	movs	r2, #12
 8003ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	e009      	b.n	8003ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <_sbrk+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	18d2      	adds	r2, r2, r3
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <_sbrk+0x64>)
 8003ee4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b006      	add	sp, #24
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20009000 	.word	0x20009000
 8003ef4:	00000400 	.word	0x00000400
 8003ef8:	20000b04 	.word	0x20000b04
 8003efc:	20005f70 	.word	0x20005f70

08003f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b08d      	sub	sp, #52	; 0x34
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f12:	240c      	movs	r4, #12
 8003f14:	193b      	adds	r3, r7, r4
 8003f16:	0018      	movs	r0, r3
 8003f18:	2324      	movs	r3, #36	; 0x24
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f00e ff96 	bl	8012e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f22:	003b      	movs	r3, r7
 8003f24:	0018      	movs	r0, r3
 8003f26:	230c      	movs	r3, #12
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f00e ff8f 	bl	8012e4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f30:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f32:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <MX_TIM1_Init+0xcc>)
 8003f34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f44:	4a25      	ldr	r2, [pc, #148]	; (8003fdc <MX_TIM1_Init+0xd0>)
 8003f46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f48:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f5a:	0021      	movs	r1, r4
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	2201      	movs	r2, #1
 8003f84:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	2200      	movs	r2, #0
 8003f8a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003f92:	187a      	adds	r2, r7, r1
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003f96:	0011      	movs	r1, r2
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f003 fbf9 	bl	8007790 <HAL_TIM_Encoder_Init>
 8003f9e:	1e03      	subs	r3, r0, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003fa2:	f7ff fe8f 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fa6:	003b      	movs	r3, r7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fac:	003b      	movs	r3, r7
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb2:	003b      	movs	r3, r7
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fb8:	003a      	movs	r2, r7
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <MX_TIM1_Init+0xc8>)
 8003fbc:	0011      	movs	r1, r2
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f004 fc4e 	bl	8008860 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003fc8:	f7ff fe7c 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b00d      	add	sp, #52	; 0x34
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	20000b08 	.word	0x20000b08
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	0000ffff 	.word	0x0000ffff

08003fe0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b08d      	sub	sp, #52	; 0x34
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fe6:	240c      	movs	r4, #12
 8003fe8:	193b      	adds	r3, r7, r4
 8003fea:	0018      	movs	r0, r3
 8003fec:	2324      	movs	r3, #36	; 0x24
 8003fee:	001a      	movs	r2, r3
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f00e ff2c 	bl	8012e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff6:	003b      	movs	r3, r7
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	001a      	movs	r2, r3
 8003ffe:	2100      	movs	r1, #0
 8004000:	f00e ff25 	bl	8012e4e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <MX_TIM3_Init+0xbc>)
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <MX_TIM3_Init+0xc0>)
 8004008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <MX_TIM3_Init+0xbc>)
 800400c:	2200      	movs	r2, #0
 800400e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <MX_TIM3_Init+0xbc>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <MX_TIM3_Init+0xbc>)
 8004018:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <MX_TIM3_Init+0xc4>)
 800401a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <MX_TIM3_Init+0xbc>)
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <MX_TIM3_Init+0xbc>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004028:	0021      	movs	r1, r4
 800402a:	187b      	adds	r3, r7, r1
 800402c:	2203      	movs	r2, #3
 800402e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004030:	187b      	adds	r3, r7, r1
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2201      	movs	r2, #1
 800403a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004048:	187b      	adds	r3, r7, r1
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800404e:	187b      	adds	r3, r7, r1
 8004050:	2201      	movs	r2, #1
 8004052:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004054:	187b      	adds	r3, r7, r1
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2200      	movs	r2, #0
 800405e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004060:	187a      	adds	r2, r7, r1
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <MX_TIM3_Init+0xbc>)
 8004064:	0011      	movs	r1, r2
 8004066:	0018      	movs	r0, r3
 8004068:	f003 fb92 	bl	8007790 <HAL_TIM_Encoder_Init>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004070:	f7ff fe28 	bl	8003cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004074:	003b      	movs	r3, r7
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	003b      	movs	r3, r7
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004080:	003a      	movs	r2, r7
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_TIM3_Init+0xbc>)
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f004 fbea 	bl	8008860 <HAL_TIMEx_MasterConfigSynchronization>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004090:	f7ff fe18 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b00d      	add	sp, #52	; 0x34
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	20000b54 	.word	0x20000b54
 80040a0:	40000400 	.word	0x40000400
 80040a4:	0000ffff 	.word	0x0000ffff

080040a8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80040ae:	003b      	movs	r3, r7
 80040b0:	0018      	movs	r0, r3
 80040b2:	2310      	movs	r3, #16
 80040b4:	001a      	movs	r2, r3
 80040b6:	2100      	movs	r1, #0
 80040b8:	f00e fec9 	bl	8012e4e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040bc:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040be:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <MX_TIM14_Init+0x90>)
 80040c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040d0:	4a1a      	ldr	r2, [pc, #104]	; (800413c <MX_TIM14_Init+0x94>)
 80040d2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040e2:	0018      	movs	r0, r3
 80040e4:	f003 f8cc 	bl	8007280 <HAL_TIM_Base_Init>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80040ec:	f7ff fdea 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <MX_TIM14_Init+0x8c>)
 80040f2:	0018      	movs	r0, r3
 80040f4:	f003 faec 	bl	80076d0 <HAL_TIM_IC_Init>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80040fc:	f7ff fde2 	bl	8003cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004100:	003b      	movs	r3, r7
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004106:	003b      	movs	r3, r7
 8004108:	2201      	movs	r2, #1
 800410a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800410c:	003b      	movs	r3, r7
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004112:	003b      	movs	r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004118:	0039      	movs	r1, r7
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_TIM14_Init+0x8c>)
 800411c:	2200      	movs	r2, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f003 fc82 	bl	8007a28 <HAL_TIM_IC_ConfigChannel>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004128:	f7ff fdcc 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b004      	add	sp, #16
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000ba0 	.word	0x20000ba0
 8004138:	40002000 	.word	0x40002000
 800413c:	0000ffff 	.word	0x0000ffff

08004140 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b094      	sub	sp, #80	; 0x50
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004146:	2334      	movs	r3, #52	; 0x34
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	0018      	movs	r0, r3
 800414c:	231c      	movs	r3, #28
 800414e:	001a      	movs	r2, r3
 8004150:	2100      	movs	r1, #0
 8004152:	f00e fe7c 	bl	8012e4e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004156:	003b      	movs	r3, r7
 8004158:	0018      	movs	r0, r3
 800415a:	2334      	movs	r3, #52	; 0x34
 800415c:	001a      	movs	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f00e fe75 	bl	8012e4e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004164:	4b38      	ldr	r3, [pc, #224]	; (8004248 <MX_TIM16_Init+0x108>)
 8004166:	4a39      	ldr	r2, [pc, #228]	; (800424c <MX_TIM16_Init+0x10c>)
 8004168:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <MX_TIM16_Init+0x108>)
 800416c:	223f      	movs	r2, #63	; 0x3f
 800416e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004170:	4b35      	ldr	r3, [pc, #212]	; (8004248 <MX_TIM16_Init+0x108>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1023;
 8004176:	4b34      	ldr	r3, [pc, #208]	; (8004248 <MX_TIM16_Init+0x108>)
 8004178:	4a35      	ldr	r2, [pc, #212]	; (8004250 <MX_TIM16_Init+0x110>)
 800417a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417c:	4b32      	ldr	r3, [pc, #200]	; (8004248 <MX_TIM16_Init+0x108>)
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <MX_TIM16_Init+0x108>)
 8004184:	2200      	movs	r2, #0
 8004186:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <MX_TIM16_Init+0x108>)
 800418a:	2200      	movs	r2, #0
 800418c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <MX_TIM16_Init+0x108>)
 8004190:	0018      	movs	r0, r3
 8004192:	f003 f875 	bl	8007280 <HAL_TIM_Base_Init>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d001      	beq.n	800419e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800419a:	f7ff fd93 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800419e:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <MX_TIM16_Init+0x108>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f003 f8c5 	bl	8007330 <HAL_TIM_PWM_Init>
 80041a6:	1e03      	subs	r3, r0, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80041aa:	f7ff fd8b 	bl	8003cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ae:	2134      	movs	r1, #52	; 0x34
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	2260      	movs	r2, #96	; 0x60
 80041b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	22fa      	movs	r2, #250	; 0xfa
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2200      	movs	r2, #0
 80041d4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041dc:	1879      	adds	r1, r7, r1
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <MX_TIM16_Init+0x108>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	0018      	movs	r0, r3
 80041e4:	f003 fcc4 	bl	8007b70 <HAL_TIM_PWM_ConfigChannel>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80041ec:	f7ff fd6a 	bl	8003cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041f0:	003b      	movs	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041f6:	003b      	movs	r3, r7
 80041f8:	2200      	movs	r2, #0
 80041fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041fc:	003b      	movs	r3, r7
 80041fe:	2200      	movs	r2, #0
 8004200:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 8004202:	003b      	movs	r3, r7
 8004204:	22cb      	movs	r2, #203	; 0xcb
 8004206:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004208:	003b      	movs	r3, r7
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800420e:	003b      	movs	r3, r7
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004216:	003b      	movs	r3, r7
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800421c:	003b      	movs	r3, r7
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004222:	003a      	movs	r2, r7
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <MX_TIM16_Init+0x108>)
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f004 fb81 	bl	8008930 <HAL_TIMEx_ConfigBreakDeadTime>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8004232:	f7ff fd47 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <MX_TIM16_Init+0x108>)
 8004238:	0018      	movs	r0, r3
 800423a:	f000 f9b1 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	46bd      	mov	sp, r7
 8004242:	b014      	add	sp, #80	; 0x50
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	20000bec 	.word	0x20000bec
 800424c:	40014400 	.word	0x40014400
 8004250:	000003ff 	.word	0x000003ff

08004254 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b094      	sub	sp, #80	; 0x50
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800425a:	2334      	movs	r3, #52	; 0x34
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	0018      	movs	r0, r3
 8004260:	231c      	movs	r3, #28
 8004262:	001a      	movs	r2, r3
 8004264:	2100      	movs	r1, #0
 8004266:	f00e fdf2 	bl	8012e4e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800426a:	003b      	movs	r3, r7
 800426c:	0018      	movs	r0, r3
 800426e:	2334      	movs	r3, #52	; 0x34
 8004270:	001a      	movs	r2, r3
 8004272:	2100      	movs	r1, #0
 8004274:	f00e fdeb 	bl	8012e4e <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004278:	4b38      	ldr	r3, [pc, #224]	; (800435c <MX_TIM17_Init+0x108>)
 800427a:	4a39      	ldr	r2, [pc, #228]	; (8004360 <MX_TIM17_Init+0x10c>)
 800427c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 800427e:	4b37      	ldr	r3, [pc, #220]	; (800435c <MX_TIM17_Init+0x108>)
 8004280:	223f      	movs	r2, #63	; 0x3f
 8004282:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <MX_TIM17_Init+0x108>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1023;
 800428a:	4b34      	ldr	r3, [pc, #208]	; (800435c <MX_TIM17_Init+0x108>)
 800428c:	4a35      	ldr	r2, [pc, #212]	; (8004364 <MX_TIM17_Init+0x110>)
 800428e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <MX_TIM17_Init+0x108>)
 8004292:	2200      	movs	r2, #0
 8004294:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <MX_TIM17_Init+0x108>)
 8004298:	2200      	movs	r2, #0
 800429a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <MX_TIM17_Init+0x108>)
 800429e:	2200      	movs	r2, #0
 80042a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <MX_TIM17_Init+0x108>)
 80042a4:	0018      	movs	r0, r3
 80042a6:	f002 ffeb 	bl	8007280 <HAL_TIM_Base_Init>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80042ae:	f7ff fd09 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <MX_TIM17_Init+0x108>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f003 f83b 	bl	8007330 <HAL_TIM_PWM_Init>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80042be:	f7ff fd01 	bl	8003cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c2:	2134      	movs	r1, #52	; 0x34
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2260      	movs	r2, #96	; 0x60
 80042c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	22fa      	movs	r2, #250	; 0xfa
 80042ce:	0052      	lsls	r2, r2, #1
 80042d0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042d8:	187b      	adds	r3, r7, r1
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042de:	187b      	adds	r3, r7, r1
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	2200      	movs	r2, #0
 80042e8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f0:	1879      	adds	r1, r7, r1
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <MX_TIM17_Init+0x108>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	0018      	movs	r0, r3
 80042f8:	f003 fc3a 	bl	8007b70 <HAL_TIM_PWM_ConfigChannel>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8004300:	f7ff fce0 	bl	8003cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004304:	003b      	movs	r3, r7
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800430a:	003b      	movs	r3, r7
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004310:	003b      	movs	r3, r7
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 8004316:	003b      	movs	r3, r7
 8004318:	22cb      	movs	r2, #203	; 0xcb
 800431a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800431c:	003b      	movs	r3, r7
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004322:	003b      	movs	r3, r7
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	0192      	lsls	r2, r2, #6
 8004328:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800432a:	003b      	movs	r3, r7
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004330:	003b      	movs	r3, r7
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004336:	003a      	movs	r2, r7
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <MX_TIM17_Init+0x108>)
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f004 faf7 	bl	8008930 <HAL_TIMEx_ConfigBreakDeadTime>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d001      	beq.n	800434a <MX_TIM17_Init+0xf6>
  {
    Error_Handler();
 8004346:	f7ff fcbd 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <MX_TIM17_Init+0x108>)
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f927 	bl	80045a0 <HAL_TIM_MspPostInit>

}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b014      	add	sp, #80	; 0x50
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	20000c38 	.word	0x20000c38
 8004360:	40014800 	.word	0x40014800
 8004364:	000003ff 	.word	0x000003ff

08004368 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b08d      	sub	sp, #52	; 0x34
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	241c      	movs	r4, #28
 8004372:	193b      	adds	r3, r7, r4
 8004374:	0018      	movs	r0, r3
 8004376:	2314      	movs	r3, #20
 8004378:	001a      	movs	r2, r3
 800437a:	2100      	movs	r1, #0
 800437c:	f00e fd67 	bl	8012e4e <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a46      	ldr	r2, [pc, #280]	; (80044a0 <HAL_TIM_Encoder_MspInit+0x138>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d152      	bne.n	8004430 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800438c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438e:	4b45      	ldr	r3, [pc, #276]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	0109      	lsls	r1, r1, #4
 8004394:	430a      	orrs	r2, r1
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
 8004398:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043aa:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043ac:	2104      	movs	r1, #4
 80043ae:	430a      	orrs	r2, r1
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34
 80043b2:	4b3c      	ldr	r3, [pc, #240]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2204      	movs	r2, #4
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043be:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043c4:	2102      	movs	r1, #2
 80043c6:	430a      	orrs	r2, r1
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ca:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	2202      	movs	r2, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_Encoder1_CH1_Pin;
 80043d6:	193b      	adds	r3, r7, r4
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	0052      	lsls	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	2202      	movs	r2, #2
 80043e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	193b      	adds	r3, r7, r4
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	2202      	movs	r2, #2
 80043f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH1_GPIO_Port, &GPIO_InitStruct);
 80043f6:	193b      	adds	r3, r7, r4
 80043f8:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x140>)
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f001 f983 	bl	8005708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_Encoder1_CH2_Pin;
 8004402:	0021      	movs	r1, r4
 8004404:	187b      	adds	r3, r7, r1
 8004406:	2208      	movs	r2, #8
 8004408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	187b      	adds	r3, r7, r1
 800440c:	2202      	movs	r2, #2
 800440e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	187b      	adds	r3, r7, r1
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2200      	movs	r2, #0
 800441a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800441c:	187b      	adds	r3, r7, r1
 800441e:	2201      	movs	r2, #1
 8004420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH2_GPIO_Port, &GPIO_InitStruct);
 8004422:	187b      	adds	r3, r7, r1
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_TIM_Encoder_MspInit+0x144>)
 8004426:	0019      	movs	r1, r3
 8004428:	0010      	movs	r0, r2
 800442a:	f001 f96d 	bl	8005708 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800442e:	e032      	b.n	8004496 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(tim_encoderHandle->Instance==TIM3)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x148>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d12d      	bne.n	8004496 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 800443c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004440:	2102      	movs	r1, #2
 8004442:	430a      	orrs	r2, r1
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004458:	2102      	movs	r1, #2
 800445a:	430a      	orrs	r2, r1
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
 800445e:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	2202      	movs	r2, #2
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_Encoder2_CH1_Pin|TIM_Encoder2_CH2_Pin;
 800446a:	211c      	movs	r1, #28
 800446c:	187b      	adds	r3, r7, r1
 800446e:	2230      	movs	r2, #48	; 0x30
 8004470:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	187b      	adds	r3, r7, r1
 8004474:	2202      	movs	r2, #2
 8004476:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	187b      	adds	r3, r7, r1
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	187b      	adds	r3, r7, r1
 8004480:	2200      	movs	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004484:	187b      	adds	r3, r7, r1
 8004486:	2201      	movs	r2, #1
 8004488:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448a:	187b      	adds	r3, r7, r1
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <HAL_TIM_Encoder_MspInit+0x144>)
 800448e:	0019      	movs	r1, r3
 8004490:	0010      	movs	r0, r2
 8004492:	f001 f939 	bl	8005708 <HAL_GPIO_Init>
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b00d      	add	sp, #52	; 0x34
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40021000 	.word	0x40021000
 80044a8:	50000800 	.word	0x50000800
 80044ac:	50000400 	.word	0x50000400
 80044b0:	40000400 	.word	0x40000400

080044b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b08d      	sub	sp, #52	; 0x34
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	241c      	movs	r4, #28
 80044be:	193b      	adds	r3, r7, r4
 80044c0:	0018      	movs	r0, r3
 80044c2:	2314      	movs	r3, #20
 80044c4:	001a      	movs	r2, r3
 80044c6:	2100      	movs	r1, #0
 80044c8:	f00e fcc1 	bl	8012e4e <memset>
  if(tim_baseHandle->Instance==TIM14)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <HAL_TIM_Base_MspInit+0xdc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d131      	bne.n	800453a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	0209      	lsls	r1, r1, #8
 80044e0:	430a      	orrs	r2, r1
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 80044e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f2:	4b28      	ldr	r3, [pc, #160]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 80044f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f6:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM_CC_Pin;
 800450a:	0021      	movs	r1, r4
 800450c:	187b      	adds	r3, r7, r1
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004512:	187b      	adds	r3, r7, r1
 8004514:	2202      	movs	r2, #2
 8004516:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	187b      	adds	r3, r7, r1
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	187b      	adds	r3, r7, r1
 8004520:	2200      	movs	r2, #0
 8004522:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8004524:	187b      	adds	r3, r7, r1
 8004526:	2204      	movs	r2, #4
 8004528:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_CC_GPIO_Port, &GPIO_InitStruct);
 800452a:	187a      	adds	r2, r7, r1
 800452c:	23a0      	movs	r3, #160	; 0xa0
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f001 f8e8 	bl	8005708 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004538:	e026      	b.n	8004588 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM16)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a16      	ldr	r2, [pc, #88]	; (8004598 <HAL_TIM_Base_MspInit+0xe4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10e      	bne.n	8004562 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 8004546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	0289      	lsls	r1, r1, #10
 800454e:	430a      	orrs	r2, r1
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 8004554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	029b      	lsls	r3, r3, #10
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]
}
 8004560:	e012      	b.n	8004588 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM17)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0d      	ldr	r2, [pc, #52]	; (800459c <HAL_TIM_Base_MspInit+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10d      	bne.n	8004588 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 800456e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	02c9      	lsls	r1, r1, #11
 8004576:	430a      	orrs	r2, r1
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_TIM_Base_MspInit+0xe0>)
 800457c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	02db      	lsls	r3, r3, #11
 8004582:	4013      	ands	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b00d      	add	sp, #52	; 0x34
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	40002000 	.word	0x40002000
 8004594:	40021000 	.word	0x40021000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800

080045a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	2414      	movs	r4, #20
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	0018      	movs	r0, r3
 80045ae:	2314      	movs	r3, #20
 80045b0:	001a      	movs	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f00e fc4b 	bl	8012e4e <memset>
  if(timHandle->Instance==TIM16)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_TIM_MspPostInit+0xc4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d123      	bne.n	800460a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c2:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 80045c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c6:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 80045c8:	2102      	movs	r1, #2
 80045ca:	430a      	orrs	r2, r1
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	2202      	movs	r2, #2
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = TIM_Driver2_CH1N_Pin|TIM_Driver2_CH1_Pin;
 80045da:	193b      	adds	r3, r7, r4
 80045dc:	22a0      	movs	r2, #160	; 0xa0
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e2:	0021      	movs	r1, r4
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	2202      	movs	r2, #2
 80045e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	2202      	movs	r2, #2
 80045fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <HAL_TIM_MspPostInit+0xcc>)
 8004600:	0019      	movs	r1, r3
 8004602:	0010      	movs	r0, r2
 8004604:	f001 f880 	bl	8005708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004608:	e027      	b.n	800465a <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM17)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_MspPostInit+0xd0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d122      	bne.n	800465a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 800461a:	2102      	movs	r1, #2
 800461c:	430a      	orrs	r2, r1
 800461e:	635a      	str	r2, [r3, #52]	; 0x34
 8004620:	4b11      	ldr	r3, [pc, #68]	; (8004668 <HAL_TIM_MspPostInit+0xc8>)
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_Driver1_CH1N_Pin|TIM_Driver1_CH1_Pin;
 800462c:	2114      	movs	r1, #20
 800462e:	187b      	adds	r3, r7, r1
 8004630:	22a0      	movs	r2, #160	; 0xa0
 8004632:	0092      	lsls	r2, r2, #2
 8004634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	187b      	adds	r3, r7, r1
 8004638:	2202      	movs	r2, #2
 800463a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	187b      	adds	r3, r7, r1
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8004648:	187b      	adds	r3, r7, r1
 800464a:	2202      	movs	r2, #2
 800464c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800464e:	187b      	adds	r3, r7, r1
 8004650:	4a06      	ldr	r2, [pc, #24]	; (800466c <HAL_TIM_MspPostInit+0xcc>)
 8004652:	0019      	movs	r1, r3
 8004654:	0010      	movs	r0, r2
 8004656:	f001 f857 	bl	8005708 <HAL_GPIO_Init>
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b00b      	add	sp, #44	; 0x2c
 8004660:	bd90      	pop	{r4, r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	40014400 	.word	0x40014400
 8004668:	40021000 	.word	0x40021000
 800466c:	50000400 	.word	0x50000400
 8004670:	40014800 	.word	0x40014800

08004674 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004678:	4b23      	ldr	r3, [pc, #140]	; (8004708 <MX_USART1_UART_Init+0x94>)
 800467a:	4a24      	ldr	r2, [pc, #144]	; (800470c <MX_USART1_UART_Init+0x98>)
 800467c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800467e:	4b22      	ldr	r3, [pc, #136]	; (8004708 <MX_USART1_UART_Init+0x94>)
 8004680:	22e1      	movs	r2, #225	; 0xe1
 8004682:	0252      	lsls	r2, r2, #9
 8004684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <MX_USART1_UART_Init+0x94>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800468c:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <MX_USART1_UART_Init+0x94>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <MX_USART1_UART_Init+0x94>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <MX_USART1_UART_Init+0x94>)
 800469a:	220c      	movs	r2, #12
 800469c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046be:	0018      	movs	r0, r3
 80046c0:	f004 fa00 	bl	8008ac4 <HAL_UART_Init>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80046c8:	f7ff fafc 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046ce:	2100      	movs	r1, #0
 80046d0:	0018      	movs	r0, r3
 80046d2:	f006 f8cf 	bl	800a874 <HAL_UARTEx_SetTxFifoThreshold>
 80046d6:	1e03      	subs	r3, r0, #0
 80046d8:	d001      	beq.n	80046de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80046da:	f7ff faf3 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046e0:	2100      	movs	r1, #0
 80046e2:	0018      	movs	r0, r3
 80046e4:	f006 f906 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d001      	beq.n	80046f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80046ec:	f7ff faea 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <MX_USART1_UART_Init+0x94>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f006 f884 	bl	800a800 <HAL_UARTEx_DisableFifoMode>
 80046f8:	1e03      	subs	r3, r0, #0
 80046fa:	d001      	beq.n	8004700 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80046fc:	f7ff fae2 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	20000c84 	.word	0x20000c84
 800470c:	40013800 	.word	0x40013800

08004710 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004714:	4b22      	ldr	r3, [pc, #136]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004716:	4a23      	ldr	r2, [pc, #140]	; (80047a4 <MX_USART2_UART_Init+0x94>)
 8004718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <MX_USART2_UART_Init+0x98>)
 800471e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004720:	4b1f      	ldr	r3, [pc, #124]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004726:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004728:	2200      	movs	r2, #0
 800472a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800472c:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004734:	220c      	movs	r2, #12
 8004736:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004740:	2200      	movs	r2, #0
 8004742:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004744:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004746:	2200      	movs	r2, #0
 8004748:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800474c:	2200      	movs	r2, #0
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004750:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004752:	2200      	movs	r2, #0
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004758:	0018      	movs	r0, r3
 800475a:	f004 fa09 	bl	8008b70 <HAL_HalfDuplex_Init>
 800475e:	1e03      	subs	r3, r0, #0
 8004760:	d001      	beq.n	8004766 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004762:	f7ff faaf 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004766:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 8004768:	2100      	movs	r1, #0
 800476a:	0018      	movs	r0, r3
 800476c:	f006 f882 	bl	800a874 <HAL_UARTEx_SetTxFifoThreshold>
 8004770:	1e03      	subs	r3, r0, #0
 8004772:	d001      	beq.n	8004778 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004774:	f7ff faa6 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800477a:	2100      	movs	r1, #0
 800477c:	0018      	movs	r0, r3
 800477e:	f006 f8b9 	bl	800a8f4 <HAL_UARTEx_SetRxFifoThreshold>
 8004782:	1e03      	subs	r3, r0, #0
 8004784:	d001      	beq.n	800478a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004786:	f7ff fa9d 	bl	8003cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <MX_USART2_UART_Init+0x90>)
 800478c:	0018      	movs	r0, r3
 800478e:	f006 f837 	bl	800a800 <HAL_UARTEx_DisableFifoMode>
 8004792:	1e03      	subs	r3, r0, #0
 8004794:	d001      	beq.n	800479a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004796:	f7ff fa95 	bl	8003cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000d18 	.word	0x20000d18
 80047a4:	40004400 	.word	0x40004400
 80047a8:	000f4240 	.word	0x000f4240

080047ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b093      	sub	sp, #76	; 0x4c
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	2334      	movs	r3, #52	; 0x34
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	0018      	movs	r0, r3
 80047ba:	2314      	movs	r3, #20
 80047bc:	001a      	movs	r2, r3
 80047be:	2100      	movs	r1, #0
 80047c0:	f00e fb45 	bl	8012e4e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047c4:	2418      	movs	r4, #24
 80047c6:	193b      	adds	r3, r7, r4
 80047c8:	0018      	movs	r0, r3
 80047ca:	231c      	movs	r3, #28
 80047cc:	001a      	movs	r2, r3
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00e fb3d 	bl	8012e4e <memset>
  if(uartHandle->Instance==USART1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a48      	ldr	r2, [pc, #288]	; (80048fc <HAL_UART_MspInit+0x150>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d146      	bne.n	800486c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	2200      	movs	r2, #0
 80047e8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	0018      	movs	r0, r3
 80047ee:	f002 fc13 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d001      	beq.n	80047fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80047f6:	f7ff fa65 	bl	8003cc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_UART_MspInit+0x154>)
 80047fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_UART_MspInit+0x154>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	01c9      	lsls	r1, r1, #7
 8004804:	430a      	orrs	r2, r1
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
 8004808:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_UART_MspInit+0x154>)
 800480a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	01db      	lsls	r3, r3, #7
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_UART_MspInit+0x154>)
 8004818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_UART_MspInit+0x154>)
 800481c:	2104      	movs	r1, #4
 800481e:	430a      	orrs	r2, r1
 8004820:	635a      	str	r2, [r3, #52]	; 0x34
 8004822:	4b37      	ldr	r3, [pc, #220]	; (8004900 <HAL_UART_MspInit+0x154>)
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	2204      	movs	r2, #4
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_STLink_TX_Pin|UART_STLink_RX_Pin;
 800482e:	2134      	movs	r1, #52	; 0x34
 8004830:	187b      	adds	r3, r7, r1
 8004832:	2230      	movs	r2, #48	; 0x30
 8004834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	187b      	adds	r3, r7, r1
 8004838:	2202      	movs	r2, #2
 800483a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	187b      	adds	r3, r7, r1
 800483e:	2200      	movs	r2, #0
 8004840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004842:	187b      	adds	r3, r7, r1
 8004844:	2200      	movs	r2, #0
 8004846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004848:	187b      	adds	r3, r7, r1
 800484a:	2201      	movs	r2, #1
 800484c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800484e:	187b      	adds	r3, r7, r1
 8004850:	4a2c      	ldr	r2, [pc, #176]	; (8004904 <HAL_UART_MspInit+0x158>)
 8004852:	0019      	movs	r1, r3
 8004854:	0010      	movs	r0, r2
 8004856:	f000 ff57 	bl	8005708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	2103      	movs	r1, #3
 800485e:	201b      	movs	r0, #27
 8004860:	f000 fe54 	bl	800550c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004864:	201b      	movs	r0, #27
 8004866:	f000 fe66 	bl	8005536 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800486a:	e043      	b.n	80048f4 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <HAL_UART_MspInit+0x15c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d13e      	bne.n	80048f4 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004876:	2118      	movs	r1, #24
 8004878:	187b      	adds	r3, r7, r1
 800487a:	2202      	movs	r2, #2
 800487c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800487e:	187b      	adds	r3, r7, r1
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004884:	187b      	adds	r3, r7, r1
 8004886:	0018      	movs	r0, r3
 8004888:	f002 fbc6 	bl	8007018 <HAL_RCCEx_PeriphCLKConfig>
 800488c:	1e03      	subs	r3, r0, #0
 800488e:	d001      	beq.n	8004894 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004890:	f7ff fa18 	bl	8003cc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_UART_MspInit+0x154>)
 8004896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_UART_MspInit+0x154>)
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	0289      	lsls	r1, r1, #10
 800489e:	430a      	orrs	r2, r1
 80048a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <HAL_UART_MspInit+0x154>)
 80048a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	4013      	ands	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_UART_MspInit+0x154>)
 80048b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_UART_MspInit+0x154>)
 80048b6:	2108      	movs	r1, #8
 80048b8:	430a      	orrs	r2, r1
 80048ba:	635a      	str	r2, [r3, #52]	; 0x34
 80048bc:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_UART_MspInit+0x154>)
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_XL320_Pin;
 80048c8:	2134      	movs	r1, #52	; 0x34
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	2220      	movs	r2, #32
 80048ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	2212      	movs	r2, #18
 80048d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	2201      	movs	r2, #1
 80048da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	2200      	movs	r2, #0
 80048e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_XL320_GPIO_Port, &GPIO_InitStruct);
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	4a08      	ldr	r2, [pc, #32]	; (800490c <HAL_UART_MspInit+0x160>)
 80048ec:	0019      	movs	r1, r3
 80048ee:	0010      	movs	r0, r2
 80048f0:	f000 ff0a 	bl	8005708 <HAL_GPIO_Init>
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b013      	add	sp, #76	; 0x4c
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	40013800 	.word	0x40013800
 8004900:	40021000 	.word	0x40021000
 8004904:	50000800 	.word	0x50000800
 8004908:	40004400 	.word	0x40004400
 800490c:	50000c00 	.word	0x50000c00

08004910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004910:	480d      	ldr	r0, [pc, #52]	; (8004948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004912:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004914:	f7ff faf4 	bl	8003f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004918:	480c      	ldr	r0, [pc, #48]	; (800494c <LoopForever+0x6>)
  ldr r1, =_edata
 800491a:	490d      	ldr	r1, [pc, #52]	; (8004950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <LoopForever+0xe>)
  movs r3, #0
 800491e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004920:	e002      	b.n	8004928 <LoopCopyDataInit>

08004922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004926:	3304      	adds	r3, #4

08004928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800492a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800492c:	d3f9      	bcc.n	8004922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800492e:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004930:	4c0a      	ldr	r4, [pc, #40]	; (800495c <LoopForever+0x16>)
  movs r3, #0
 8004932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004934:	e001      	b.n	800493a <LoopFillZerobss>

08004936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004938:	3204      	adds	r2, #4

0800493a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800493a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800493c:	d3fb      	bcc.n	8004936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800493e:	f00e fa59 	bl	8012df4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004942:	f7ff f83b 	bl	80039bc <main>

08004946 <LoopForever>:

LoopForever:
  b LoopForever
 8004946:	e7fe      	b.n	8004946 <LoopForever>
  ldr   r0, =_estack
 8004948:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800494c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004950:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8004954:	08016ed4 	.word	0x08016ed4
  ldr r2, =_sbss
 8004958:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 800495c:	20005f70 	.word	0x20005f70

08004960 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004960:	e7fe      	b.n	8004960 <ADC1_IRQHandler>
	...

08004964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_Init+0x3c>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_Init+0x3c>)
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	0049      	lsls	r1, r1, #1
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800497e:	2003      	movs	r0, #3
 8004980:	f000 f810 	bl	80049a4 <HAL_InitTick>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d003      	beq.n	8004990 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e001      	b.n	8004994 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004990:	f7ff f99e 	bl	8003cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	781b      	ldrb	r3, [r3, #0]
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40022000 	.word	0x40022000

080049a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049ac:	230f      	movs	r3, #15
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_InitTick+0x88>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d02b      	beq.n	8004a14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <HAL_InitTick+0x8c>)
 80049be:	681c      	ldr	r4, [r3, #0]
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <HAL_InitTick+0x88>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	0019      	movs	r1, r3
 80049c6:	23fa      	movs	r3, #250	; 0xfa
 80049c8:	0098      	lsls	r0, r3, #2
 80049ca:	f7fb fbb9 	bl	8000140 <__udivsi3>
 80049ce:	0003      	movs	r3, r0
 80049d0:	0019      	movs	r1, r3
 80049d2:	0020      	movs	r0, r4
 80049d4:	f7fb fbb4 	bl	8000140 <__udivsi3>
 80049d8:	0003      	movs	r3, r0
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fdbb 	bl	8005556 <HAL_SYSTICK_Config>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d112      	bne.n	8004a0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d80a      	bhi.n	8004a00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	2301      	movs	r3, #1
 80049ee:	425b      	negs	r3, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fd8a 	bl	800550c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_InitTick+0x90>)
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e00d      	b.n	8004a1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004a00:	230f      	movs	r3, #15
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	e008      	b.n	8004a1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a0a:	230f      	movs	r3, #15
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a14:	230f      	movs	r3, #15
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004a1c:	230f      	movs	r3, #15
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b005      	add	sp, #20
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	20000008 	.word	0x20000008
 8004a30:	20000000 	.word	0x20000000
 8004a34:	20000004 	.word	0x20000004

08004a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_IncTick+0x1c>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	001a      	movs	r2, r3
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_IncTick+0x20>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	18d2      	adds	r2, r2, r3
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_IncTick+0x20>)
 8004a4a:	601a      	str	r2, [r3, #0]
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20000008 	.word	0x20000008
 8004a58:	20000dac 	.word	0x20000dac

08004a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <HAL_GetTick+0x10>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	20000dac 	.word	0x20000dac

08004a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	d005      	beq.n	8004a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_Delay+0x44>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	001a      	movs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	f7ff ffe0 	bl	8004a5c <HAL_GetTick>
 8004a9c:	0002      	movs	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d8f7      	bhi.n	8004a98 <HAL_Delay+0x28>
  {
  }
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20000008 	.word	0x20000008

08004ab8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004ac8:	401a      	ands	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	fe3fffff 	.word	0xfe3fffff

08004ae0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	23e0      	movs	r3, #224	; 0xe0
 8004aee:	045b      	lsls	r3, r3, #17
 8004af0:	4013      	ands	r3, r2
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}

08004afa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	400a      	ands	r2, r1
 8004b10:	2107      	movs	r1, #7
 8004b12:	4091      	lsls	r1, r2
 8004b14:	000a      	movs	r2, r1
 8004b16:	43d2      	mvns	r2, r2
 8004b18:	401a      	ands	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	400b      	ands	r3, r1
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4099      	lsls	r1, r3
 8004b24:	000b      	movs	r3, r1
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	2104      	movs	r1, #4
 8004b46:	400a      	ands	r2, r1
 8004b48:	2107      	movs	r1, #7
 8004b4a:	4091      	lsls	r1, r2
 8004b4c:	000a      	movs	r2, r1
 8004b4e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2104      	movs	r1, #4
 8004b54:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004b56:	40da      	lsrs	r2, r3
 8004b58:	0013      	movs	r3, r2
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	60f8      	str	r0, [r7, #12]
 8004b6a:	60b9      	str	r1, [r7, #8]
 8004b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	211f      	movs	r1, #31
 8004b76:	400a      	ands	r2, r1
 8004b78:	210f      	movs	r1, #15
 8004b7a:	4091      	lsls	r1, r2
 8004b7c:	000a      	movs	r2, r1
 8004b7e:	43d2      	mvns	r2, r2
 8004b80:	401a      	ands	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	210f      	movs	r1, #15
 8004b88:	4019      	ands	r1, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	201f      	movs	r0, #31
 8004b8e:	4003      	ands	r3, r0
 8004b90:	4099      	lsls	r1, r3
 8004b92:	000b      	movs	r3, r1
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	035b      	lsls	r3, r3, #13
 8004bb4:	0b5b      	lsrs	r3, r3, #13
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	0352      	lsls	r2, r2, #13
 8004bd6:	0b52      	lsrs	r2, r2, #13
 8004bd8:	43d2      	mvns	r2, r2
 8004bda:	401a      	ands	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	0212      	lsls	r2, r2, #8
 8004bfc:	43d2      	mvns	r2, r2
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	400b      	ands	r3, r1
 8004c08:	4904      	ldr	r1, [pc, #16]	; (8004c1c <LL_ADC_SetChannelSamplingTime+0x34>)
 8004c0a:	400b      	ands	r3, r1
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	07ffff00 	.word	0x07ffff00

08004c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <LL_ADC_EnableInternalRegulator+0x24>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0552      	lsls	r2, r2, #21
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	6fffffe8 	.word	0x6fffffe8

08004c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	055b      	lsls	r3, r3, #21
 8004c58:	401a      	ands	r2, r3
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	055b      	lsls	r3, r3, #21
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d101      	bne.n	8004c66 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <LL_ADC_IsEnabled+0x18>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <LL_ADC_IsEnabled+0x1a>
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d101      	bne.n	8004caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cbc:	231f      	movs	r3, #31
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e17f      	b.n	8004fda <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fe fb07 	bl	80032f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2254      	movs	r2, #84	; 0x54
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7ff ffa3 	bl	8004c48 <LL_ADC_IsInternalRegulatorEnabled>
 8004d02:	1e03      	subs	r3, r0, #0
 8004d04:	d115      	bne.n	8004d32 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f7ff ff88 	bl	8004c20 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d10:	4bb4      	ldr	r3, [pc, #720]	; (8004fe4 <HAL_ADC_Init+0x330>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	49b4      	ldr	r1, [pc, #720]	; (8004fe8 <HAL_ADC_Init+0x334>)
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7fb fa12 	bl	8000140 <__udivsi3>
 8004d1c:	0003      	movs	r3, r0
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d24:	e002      	b.n	8004d2c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f9      	bne.n	8004d26 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff ff86 	bl	8004c48 <LL_ADC_IsInternalRegulatorEnabled>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d10f      	bne.n	8004d60 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	2210      	movs	r2, #16
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	2201      	movs	r2, #1
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7ff ff94 	bl	8004c92 <LL_ADC_REG_IsConversionOngoing>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	2210      	movs	r2, #16
 8004d74:	4013      	ands	r3, r2
 8004d76:	d000      	beq.n	8004d7a <HAL_ADC_Init+0xc6>
 8004d78:	e122      	b.n	8004fc0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d000      	beq.n	8004d82 <HAL_ADC_Init+0xce>
 8004d80:	e11e      	b.n	8004fc0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d86:	4a99      	ldr	r2, [pc, #612]	; (8004fec <HAL_ADC_Init+0x338>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff ff6a 	bl	8004c70 <LL_ADC_IsEnabled>
 8004d9c:	1e03      	subs	r3, r0, #0
 8004d9e:	d000      	beq.n	8004da2 <HAL_ADC_Init+0xee>
 8004da0:	e0ad      	b.n	8004efe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	7e1b      	ldrb	r3, [r3, #24]
 8004daa:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004dac:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7e5b      	ldrb	r3, [r3, #25]
 8004db2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004db4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7e9b      	ldrb	r3, [r3, #26]
 8004dba:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004dbc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_ADC_Init+0x118>
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	015b      	lsls	r3, r3, #5
 8004dca:	e000      	b.n	8004dce <HAL_ADC_Init+0x11a>
 8004dcc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004dce:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004dd4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da04      	bge.n	8004de8 <HAL_ADC_Init+0x134>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	e001      	b.n	8004dec <HAL_ADC_Init+0x138>
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004dec:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	212c      	movs	r1, #44	; 0x2c
 8004df2:	5c5b      	ldrb	r3, [r3, r1]
 8004df4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004df6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	5c9b      	ldrb	r3, [r3, r2]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d115      	bne.n	8004e34 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	7e9b      	ldrb	r3, [r3, #26]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	0252      	lsls	r2, r2, #9
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e00b      	b.n	8004e34 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	2220      	movs	r2, #32
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e40:	23e0      	movs	r3, #224	; 0xe0
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a65      	ldr	r2, [pc, #404]	; (8004ff0 <HAL_ADC_Init+0x33c>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	0f9b      	lsrs	r3, r3, #30
 8004e6e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004e74:	4313      	orrs	r3, r2
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223c      	movs	r2, #60	; 0x3c
 8004e80:	5c9b      	ldrb	r3, [r3, r2]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d111      	bne.n	8004eaa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0f9b      	lsrs	r3, r3, #30
 8004e8c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004e92:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004e98:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004e9e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	; (8004ff4 <HAL_ADC_Init+0x340>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	23c0      	movs	r3, #192	; 0xc0
 8004ec6:	061b      	lsls	r3, r3, #24
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d018      	beq.n	8004efe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	05db      	lsls	r3, r3, #23
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d012      	beq.n	8004efe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d00c      	beq.n	8004efe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004ee4:	4b44      	ldr	r3, [pc, #272]	; (8004ff8 <HAL_ADC_Init+0x344>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a44      	ldr	r2, [pc, #272]	; (8004ffc <HAL_ADC_Init+0x348>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	23f0      	movs	r3, #240	; 0xf0
 8004ef4:	039b      	lsls	r3, r3, #14
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <HAL_ADC_Init+0x344>)
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	001a      	movs	r2, r3
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f7ff fdf6 	bl	8004afa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	493a      	ldr	r1, [pc, #232]	; (8005000 <HAL_ADC_Init+0x34c>)
 8004f18:	001a      	movs	r2, r3
 8004f1a:	f7ff fdee 	bl	8004afa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d109      	bne.n	8004f3a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2110      	movs	r1, #16
 8004f32:	4249      	negs	r1, r1
 8004f34:	430a      	orrs	r2, r1
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
 8004f38:	e018      	b.n	8004f6c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	039b      	lsls	r3, r3, #14
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d112      	bne.n	8004f6c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	221c      	movs	r2, #28
 8004f56:	4013      	ands	r3, r2
 8004f58:	2210      	movs	r2, #16
 8004f5a:	4252      	negs	r2, r2
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	0011      	movs	r1, r2
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2100      	movs	r1, #0
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7ff fdde 	bl	8004b34 <LL_ADC_GetSamplingTimeCommonChannels>
 8004f78:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10b      	bne.n	8004f9a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4393      	bics	r3, r2
 8004f90:	2201      	movs	r2, #1
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004f98:	e01c      	b.n	8004fd4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	2212      	movs	r2, #18
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fae:	2201      	movs	r2, #1
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004fb6:	231f      	movs	r3, #31
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004fbe:	e009      	b.n	8004fd4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004fcc:	231f      	movs	r3, #31
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004fd4:	231f      	movs	r3, #31
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
}
 8004fda:	0018      	movs	r0, r3
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b008      	add	sp, #32
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	00030d40 	.word	0x00030d40
 8004fec:	fffffefd 	.word	0xfffffefd
 8004ff0:	fffe0201 	.word	0xfffe0201
 8004ff4:	1ffffc02 	.word	0x1ffffc02
 8004ff8:	40012708 	.word	0x40012708
 8004ffc:	ffc3ffff 	.word	0xffc3ffff
 8005000:	07ffff04 	.word	0x07ffff04

08005004 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500e:	2317      	movs	r3, #23
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2254      	movs	r2, #84	; 0x54
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x24>
 8005024:	2302      	movs	r3, #2
 8005026:	e1c0      	b.n	80053aa <HAL_ADC_ConfigChannel+0x3a6>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2254      	movs	r2, #84	; 0x54
 800502c:	2101      	movs	r1, #1
 800502e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0018      	movs	r0, r3
 8005036:	f7ff fe2c 	bl	8004c92 <LL_ADC_REG_IsConversionOngoing>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d000      	beq.n	8005040 <HAL_ADC_ConfigChannel+0x3c>
 800503e:	e1a3      	b.n	8005388 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d100      	bne.n	800504a <HAL_ADC_ConfigChannel+0x46>
 8005048:	e143      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	429a      	cmp	r2, r3
 8005054:	d004      	beq.n	8005060 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800505a:	4ac1      	ldr	r2, [pc, #772]	; (8005360 <HAL_ADC_ConfigChannel+0x35c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	0019      	movs	r1, r3
 800506a:	0010      	movs	r0, r2
 800506c:	f7ff fd99 	bl	8004ba2 <LL_ADC_REG_SetSequencerChAdd>
 8005070:	e0c9      	b.n	8005206 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	211f      	movs	r1, #31
 800507c:	400b      	ands	r3, r1
 800507e:	210f      	movs	r1, #15
 8005080:	4099      	lsls	r1, r3
 8005082:	000b      	movs	r3, r1
 8005084:	43db      	mvns	r3, r3
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	035b      	lsls	r3, r3, #13
 8005090:	0b5b      	lsrs	r3, r3, #13
 8005092:	d105      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x9c>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0e9b      	lsrs	r3, r3, #26
 800509a:	221f      	movs	r2, #31
 800509c:	4013      	ands	r3, r2
 800509e:	e098      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	d000      	beq.n	80050ac <HAL_ADC_ConfigChannel+0xa8>
 80050aa:	e091      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x1cc>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2202      	movs	r2, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	d000      	beq.n	80050b8 <HAL_ADC_ConfigChannel+0xb4>
 80050b6:	e089      	b.n	80051cc <HAL_ADC_ConfigChannel+0x1c8>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2204      	movs	r2, #4
 80050be:	4013      	ands	r3, r2
 80050c0:	d000      	beq.n	80050c4 <HAL_ADC_ConfigChannel+0xc0>
 80050c2:	e081      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x1c4>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2208      	movs	r2, #8
 80050ca:	4013      	ands	r3, r2
 80050cc:	d000      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0xcc>
 80050ce:	e079      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x1c0>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2210      	movs	r2, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d000      	beq.n	80050dc <HAL_ADC_ConfigChannel+0xd8>
 80050da:	e071      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x1bc>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2220      	movs	r2, #32
 80050e2:	4013      	ands	r3, r2
 80050e4:	d000      	beq.n	80050e8 <HAL_ADC_ConfigChannel+0xe4>
 80050e6:	e069      	b.n	80051bc <HAL_ADC_ConfigChannel+0x1b8>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	4013      	ands	r3, r2
 80050f0:	d000      	beq.n	80050f4 <HAL_ADC_ConfigChannel+0xf0>
 80050f2:	e061      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1b4>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2280      	movs	r2, #128	; 0x80
 80050fa:	4013      	ands	r3, r2
 80050fc:	d000      	beq.n	8005100 <HAL_ADC_ConfigChannel+0xfc>
 80050fe:	e059      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x1b0>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4013      	ands	r3, r2
 800510a:	d151      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x1ac>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4013      	ands	r3, r2
 8005116:	d149      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1a8>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4013      	ands	r3, r2
 8005122:	d141      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1a4>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4013      	ands	r3, r2
 800512e:	d139      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x1a0>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	4013      	ands	r3, r2
 800513a:	d131      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x19c>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	019b      	lsls	r3, r3, #6
 8005144:	4013      	ands	r3, r2
 8005146:	d129      	bne.n	800519c <HAL_ADC_ConfigChannel+0x198>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	01db      	lsls	r3, r3, #7
 8005150:	4013      	ands	r3, r2
 8005152:	d121      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x194>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	4013      	ands	r3, r2
 800515e:	d119      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x190>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	025b      	lsls	r3, r3, #9
 8005168:	4013      	ands	r3, r2
 800516a:	d111      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x18c>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	4013      	ands	r3, r2
 8005176:	d109      	bne.n	800518c <HAL_ADC_ConfigChannel+0x188>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	02db      	lsls	r3, r3, #11
 8005180:	4013      	ands	r3, r2
 8005182:	d001      	beq.n	8005188 <HAL_ADC_ConfigChannel+0x184>
 8005184:	2312      	movs	r3, #18
 8005186:	e024      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005188:	2300      	movs	r3, #0
 800518a:	e022      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 800518c:	2311      	movs	r3, #17
 800518e:	e020      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005190:	2310      	movs	r3, #16
 8005192:	e01e      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005194:	230f      	movs	r3, #15
 8005196:	e01c      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 8005198:	230e      	movs	r3, #14
 800519a:	e01a      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 800519c:	230d      	movs	r3, #13
 800519e:	e018      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051a0:	230c      	movs	r3, #12
 80051a2:	e016      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051a4:	230b      	movs	r3, #11
 80051a6:	e014      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051a8:	230a      	movs	r3, #10
 80051aa:	e012      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051ac:	2309      	movs	r3, #9
 80051ae:	e010      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051b0:	2308      	movs	r3, #8
 80051b2:	e00e      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051b4:	2307      	movs	r3, #7
 80051b6:	e00c      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051b8:	2306      	movs	r3, #6
 80051ba:	e00a      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051bc:	2305      	movs	r3, #5
 80051be:	e008      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051c0:	2304      	movs	r3, #4
 80051c2:	e006      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051c4:	2303      	movs	r3, #3
 80051c6:	e004      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e002      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1ce>
 80051d0:	2300      	movs	r3, #0
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	6852      	ldr	r2, [r2, #4]
 80051d6:	201f      	movs	r0, #31
 80051d8:	4002      	ands	r2, r0
 80051da:	4093      	lsls	r3, r2
 80051dc:	000a      	movs	r2, r1
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d808      	bhi.n	8005206 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	001a      	movs	r2, r3
 8005202:	f7ff fcae 	bl	8004b62 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	001a      	movs	r2, r3
 8005214:	f7ff fce8 	bl	8004be8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db00      	blt.n	8005222 <HAL_ADC_ConfigChannel+0x21e>
 8005220:	e0bc      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005222:	4b50      	ldr	r3, [pc, #320]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 8005224:	0018      	movs	r0, r3
 8005226:	f7ff fc5b 	bl	8004ae0 <LL_ADC_GetCommonPathInternalCh>
 800522a:	0003      	movs	r3, r0
 800522c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a4d      	ldr	r2, [pc, #308]	; (8005368 <HAL_ADC_ConfigChannel+0x364>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d122      	bne.n	800527e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005240:	d11d      	bne.n	800527e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2280      	movs	r2, #128	; 0x80
 8005246:	0412      	lsls	r2, r2, #16
 8005248:	4313      	orrs	r3, r2
 800524a:	4a46      	ldr	r2, [pc, #280]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 800524c:	0019      	movs	r1, r3
 800524e:	0010      	movs	r0, r2
 8005250:	f7ff fc32 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005254:	4b45      	ldr	r3, [pc, #276]	; (800536c <HAL_ADC_ConfigChannel+0x368>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4945      	ldr	r1, [pc, #276]	; (8005370 <HAL_ADC_ConfigChannel+0x36c>)
 800525a:	0018      	movs	r0, r3
 800525c:	f7fa ff70 	bl	8000140 <__udivsi3>
 8005260:	0003      	movs	r3, r0
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	0013      	movs	r3, r2
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	189b      	adds	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800526e:	e002      	b.n	8005276 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f9      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800527c:	e08e      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <HAL_ADC_ConfigChannel+0x370>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10e      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	045b      	lsls	r3, r3, #17
 800528e:	4013      	ands	r3, r2
 8005290:	d109      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2280      	movs	r2, #128	; 0x80
 8005296:	0452      	lsls	r2, r2, #17
 8005298:	4313      	orrs	r3, r2
 800529a:	4a32      	ldr	r2, [pc, #200]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7ff fc0a 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
 80052a4:	e07a      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a33      	ldr	r2, [pc, #204]	; (8005378 <HAL_ADC_ConfigChannel+0x374>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d000      	beq.n	80052b2 <HAL_ADC_ConfigChannel+0x2ae>
 80052b0:	e074      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	03db      	lsls	r3, r3, #15
 80052b8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80052ba:	d000      	beq.n	80052be <HAL_ADC_ConfigChannel+0x2ba>
 80052bc:	e06e      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	03d2      	lsls	r2, r2, #15
 80052c4:	4313      	orrs	r3, r2
 80052c6:	4a27      	ldr	r2, [pc, #156]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 80052c8:	0019      	movs	r1, r3
 80052ca:	0010      	movs	r0, r2
 80052cc:	f7ff fbf4 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
 80052d0:	e064      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	429a      	cmp	r2, r3
 80052dc:	d004      	beq.n	80052e8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <HAL_ADC_ConfigChannel+0x35c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d107      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0019      	movs	r1, r3
 80052f2:	0010      	movs	r0, r2
 80052f4:	f7ff fc66 	bl	8004bc4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da4d      	bge.n	800539c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005300:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 8005302:	0018      	movs	r0, r3
 8005304:	f7ff fbec 	bl	8004ae0 <LL_ADC_GetCommonPathInternalCh>
 8005308:	0003      	movs	r3, r0
 800530a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <HAL_ADC_ConfigChannel+0x364>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d108      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_ADC_ConfigChannel+0x378>)
 800531a:	4013      	ands	r3, r2
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 800531e:	0019      	movs	r1, r3
 8005320:	0010      	movs	r0, r2
 8005322:	f7ff fbc9 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
 8005326:	e039      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a11      	ldr	r2, [pc, #68]	; (8005374 <HAL_ADC_ConfigChannel+0x370>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4a12      	ldr	r2, [pc, #72]	; (8005380 <HAL_ADC_ConfigChannel+0x37c>)
 8005336:	4013      	ands	r3, r2
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f7ff fbbb 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
 8005342:	e02b      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_ADC_ConfigChannel+0x374>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d126      	bne.n	800539c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <HAL_ADC_ConfigChannel+0x380>)
 8005352:	4013      	ands	r3, r2
 8005354:	4a03      	ldr	r2, [pc, #12]	; (8005364 <HAL_ADC_ConfigChannel+0x360>)
 8005356:	0019      	movs	r1, r3
 8005358:	0010      	movs	r0, r2
 800535a:	f7ff fbad 	bl	8004ab8 <LL_ADC_SetCommonPathInternalCh>
 800535e:	e01d      	b.n	800539c <HAL_ADC_ConfigChannel+0x398>
 8005360:	80000004 	.word	0x80000004
 8005364:	40012708 	.word	0x40012708
 8005368:	b0001000 	.word	0xb0001000
 800536c:	20000000 	.word	0x20000000
 8005370:	00030d40 	.word	0x00030d40
 8005374:	b8004000 	.word	0xb8004000
 8005378:	b4002000 	.word	0xb4002000
 800537c:	ff7fffff 	.word	0xff7fffff
 8005380:	feffffff 	.word	0xfeffffff
 8005384:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	2220      	movs	r2, #32
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005394:	2317      	movs	r3, #23
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2254      	movs	r2, #84	; 0x54
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80053a4:	2317      	movs	r3, #23
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	781b      	ldrb	r3, [r3, #0]
}
 80053aa:	0018      	movs	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b006      	add	sp, #24
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)

080053b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	0002      	movs	r2, r0
 80053bc:	1dfb      	adds	r3, r7, #7
 80053be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053c0:	1dfb      	adds	r3, r7, #7
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b7f      	cmp	r3, #127	; 0x7f
 80053c6:	d809      	bhi.n	80053dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	001a      	movs	r2, r3
 80053ce:	231f      	movs	r3, #31
 80053d0:	401a      	ands	r2, r3
 80053d2:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <__NVIC_EnableIRQ+0x30>)
 80053d4:	2101      	movs	r1, #1
 80053d6:	4091      	lsls	r1, r2
 80053d8:	000a      	movs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000e100 	.word	0xe000e100

080053e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	0002      	movs	r2, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	1dfb      	adds	r3, r7, #7
 80053f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053f6:	1dfb      	adds	r3, r7, #7
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d828      	bhi.n	8005450 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053fe:	4a2f      	ldr	r2, [pc, #188]	; (80054bc <__NVIC_SetPriority+0xd4>)
 8005400:	1dfb      	adds	r3, r7, #7
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b25b      	sxtb	r3, r3
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	33c0      	adds	r3, #192	; 0xc0
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	589b      	ldr	r3, [r3, r2]
 800540e:	1dfa      	adds	r2, r7, #7
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	0011      	movs	r1, r2
 8005414:	2203      	movs	r2, #3
 8005416:	400a      	ands	r2, r1
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	21ff      	movs	r1, #255	; 0xff
 800541c:	4091      	lsls	r1, r2
 800541e:	000a      	movs	r2, r1
 8005420:	43d2      	mvns	r2, r2
 8005422:	401a      	ands	r2, r3
 8005424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	019b      	lsls	r3, r3, #6
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	401a      	ands	r2, r3
 800542e:	1dfb      	adds	r3, r7, #7
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	0018      	movs	r0, r3
 8005434:	2303      	movs	r3, #3
 8005436:	4003      	ands	r3, r0
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800543c:	481f      	ldr	r0, [pc, #124]	; (80054bc <__NVIC_SetPriority+0xd4>)
 800543e:	1dfb      	adds	r3, r7, #7
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b25b      	sxtb	r3, r3
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	430a      	orrs	r2, r1
 8005448:	33c0      	adds	r3, #192	; 0xc0
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800544e:	e031      	b.n	80054b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <__NVIC_SetPriority+0xd8>)
 8005452:	1dfb      	adds	r3, r7, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0019      	movs	r1, r3
 8005458:	230f      	movs	r3, #15
 800545a:	400b      	ands	r3, r1
 800545c:	3b08      	subs	r3, #8
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	3306      	adds	r3, #6
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	3304      	adds	r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1dfa      	adds	r2, r7, #7
 800546c:	7812      	ldrb	r2, [r2, #0]
 800546e:	0011      	movs	r1, r2
 8005470:	2203      	movs	r2, #3
 8005472:	400a      	ands	r2, r1
 8005474:	00d2      	lsls	r2, r2, #3
 8005476:	21ff      	movs	r1, #255	; 0xff
 8005478:	4091      	lsls	r1, r2
 800547a:	000a      	movs	r2, r1
 800547c:	43d2      	mvns	r2, r2
 800547e:	401a      	ands	r2, r3
 8005480:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	22ff      	movs	r2, #255	; 0xff
 8005488:	401a      	ands	r2, r3
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	0018      	movs	r0, r3
 8005490:	2303      	movs	r3, #3
 8005492:	4003      	ands	r3, r0
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005498:	4809      	ldr	r0, [pc, #36]	; (80054c0 <__NVIC_SetPriority+0xd8>)
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	001c      	movs	r4, r3
 80054a0:	230f      	movs	r3, #15
 80054a2:	4023      	ands	r3, r4
 80054a4:	3b08      	subs	r3, #8
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	430a      	orrs	r2, r1
 80054aa:	3306      	adds	r3, #6
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	18c3      	adds	r3, r0, r3
 80054b0:	3304      	adds	r3, #4
 80054b2:	601a      	str	r2, [r3, #0]
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b003      	add	sp, #12
 80054ba:	bd90      	pop	{r4, r7, pc}
 80054bc:	e000e100 	.word	0xe000e100
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1e5a      	subs	r2, r3, #1
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	045b      	lsls	r3, r3, #17
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d301      	bcc.n	80054dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054d8:	2301      	movs	r3, #1
 80054da:	e010      	b.n	80054fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054dc:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <SysTick_Config+0x44>)
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054e4:	2301      	movs	r3, #1
 80054e6:	425b      	negs	r3, r3
 80054e8:	2103      	movs	r1, #3
 80054ea:	0018      	movs	r0, r3
 80054ec:	f7ff ff7c 	bl	80053e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <SysTick_Config+0x44>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054f6:	4b04      	ldr	r3, [pc, #16]	; (8005508 <SysTick_Config+0x44>)
 80054f8:	2207      	movs	r2, #7
 80054fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b002      	add	sp, #8
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	e000e010 	.word	0xe000e010

0800550c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	210f      	movs	r1, #15
 8005518:	187b      	adds	r3, r7, r1
 800551a:	1c02      	adds	r2, r0, #0
 800551c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	187b      	adds	r3, r7, r1
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b25b      	sxtb	r3, r3
 8005526:	0011      	movs	r1, r2
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff ff5d 	bl	80053e8 <__NVIC_SetPriority>
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	b004      	add	sp, #16
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	0002      	movs	r2, r0
 800553e:	1dfb      	adds	r3, r7, #7
 8005540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005542:	1dfb      	adds	r3, r7, #7
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b25b      	sxtb	r3, r3
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff ff33 	bl	80053b4 <__NVIC_EnableIRQ>
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b002      	add	sp, #8
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	0018      	movs	r0, r3
 8005562:	f7ff ffaf 	bl	80054c4 <SysTick_Config>
 8005566:	0003      	movs	r3, r0
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e050      	b.n	8005624 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2225      	movs	r2, #37	; 0x25
 8005586:	5c9b      	ldrb	r3, [r3, r2]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d008      	beq.n	80055a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2204      	movs	r2, #4
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e041      	b.n	8005624 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	210e      	movs	r1, #14
 80055ac:	438a      	bics	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	491c      	ldr	r1, [pc, #112]	; (800562c <HAL_DMA_Abort+0xbc>)
 80055bc:	400a      	ands	r2, r1
 80055be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2101      	movs	r1, #1
 80055cc:	438a      	bics	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_DMA_Abort+0xc0>)
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	221c      	movs	r2, #28
 80055da:	4013      	ands	r3, r2
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <HAL_DMA_Abort+0xc0>)
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00c      	beq.n	8005612 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	490a      	ldr	r1, [pc, #40]	; (800562c <HAL_DMA_Abort+0xbc>)
 8005604:	400a      	ands	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005610:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2225      	movs	r2, #37	; 0x25
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	2100      	movs	r1, #0
 8005620:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	0018      	movs	r0, r3
 8005626:	46bd      	mov	sp, r7
 8005628:	b002      	add	sp, #8
 800562a:	bd80      	pop	{r7, pc}
 800562c:	fffffeff 	.word	0xfffffeff
 8005630:	40020000 	.word	0x40020000

08005634 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	210f      	movs	r1, #15
 800563e:	187b      	adds	r3, r7, r1
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2225      	movs	r2, #37	; 0x25
 8005648:	5c9b      	ldrb	r3, [r3, r2]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d006      	beq.n	800565e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2204      	movs	r2, #4
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005656:	187b      	adds	r3, r7, r1
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e049      	b.n	80056f2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	210e      	movs	r1, #14
 800566a:	438a      	bics	r2, r1
 800566c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2101      	movs	r1, #1
 800567a:	438a      	bics	r2, r1
 800567c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	491d      	ldr	r1, [pc, #116]	; (8005700 <HAL_DMA_Abort_IT+0xcc>)
 800568a:	400a      	ands	r2, r1
 800568c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800568e:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_DMA_Abort_IT+0xd0>)
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	221c      	movs	r2, #28
 8005698:	4013      	ands	r3, r2
 800569a:	2201      	movs	r2, #1
 800569c:	409a      	lsls	r2, r3
 800569e:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_DMA_Abort_IT+0xd0>)
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80056ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	490f      	ldr	r1, [pc, #60]	; (8005700 <HAL_DMA_Abort_IT+0xcc>)
 80056c2:	400a      	ands	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2225      	movs	r2, #37	; 0x25
 80056d4:	2101      	movs	r1, #1
 80056d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	2100      	movs	r1, #0
 80056de:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	0010      	movs	r0, r2
 80056f0:	4798      	blx	r3
    }
  }
  return status;
 80056f2:	230f      	movs	r3, #15
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	781b      	ldrb	r3, [r3, #0]
}
 80056f8:	0018      	movs	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b004      	add	sp, #16
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	fffffeff 	.word	0xfffffeff
 8005704:	40020000 	.word	0x40020000

08005708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005716:	e147      	b.n	80059a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4091      	lsls	r1, r2
 8005722:	000a      	movs	r2, r1
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d100      	bne.n	8005730 <HAL_GPIO_Init+0x28>
 800572e:	e138      	b.n	80059a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	4013      	ands	r3, r2
 8005738:	2b01      	cmp	r3, #1
 800573a:	d005      	beq.n	8005748 <HAL_GPIO_Init+0x40>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2203      	movs	r2, #3
 8005742:	4013      	ands	r3, r2
 8005744:	2b02      	cmp	r3, #2
 8005746:	d130      	bne.n	80057aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	2203      	movs	r2, #3
 8005754:	409a      	lsls	r2, r3
 8005756:	0013      	movs	r3, r2
 8005758:	43da      	mvns	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4013      	ands	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	409a      	lsls	r2, r3
 800576a:	0013      	movs	r3, r2
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800577e:	2201      	movs	r2, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	409a      	lsls	r2, r3
 8005784:	0013      	movs	r3, r2
 8005786:	43da      	mvns	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	2201      	movs	r2, #1
 8005796:	401a      	ands	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
 800579c:	0013      	movs	r3, r2
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d017      	beq.n	80057e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	2203      	movs	r2, #3
 80057c2:	409a      	lsls	r2, r3
 80057c4:	0013      	movs	r3, r2
 80057c6:	43da      	mvns	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	409a      	lsls	r2, r3
 80057d8:	0013      	movs	r3, r2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2203      	movs	r2, #3
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d123      	bne.n	800583a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	08da      	lsrs	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3208      	adds	r2, #8
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	58d3      	ldr	r3, [r2, r3]
 80057fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2207      	movs	r2, #7
 8005804:	4013      	ands	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	220f      	movs	r2, #15
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	43da      	mvns	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2107      	movs	r1, #7
 800581e:	400b      	ands	r3, r1
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	409a      	lsls	r2, r3
 8005824:	0013      	movs	r3, r2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	08da      	lsrs	r2, r3, #3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3208      	adds	r2, #8
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	6939      	ldr	r1, [r7, #16]
 8005838:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	2203      	movs	r2, #3
 8005846:	409a      	lsls	r2, r3
 8005848:	0013      	movs	r3, r2
 800584a:	43da      	mvns	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4013      	ands	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2203      	movs	r2, #3
 8005858:	401a      	ands	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	0013      	movs	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	23c0      	movs	r3, #192	; 0xc0
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	4013      	ands	r3, r2
 8005878:	d100      	bne.n	800587c <HAL_GPIO_Init+0x174>
 800587a:	e092      	b.n	80059a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800587c:	4a50      	ldr	r2, [pc, #320]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	3318      	adds	r3, #24
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	589b      	ldr	r3, [r3, r2]
 8005888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2203      	movs	r2, #3
 800588e:	4013      	ands	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	220f      	movs	r2, #15
 8005894:	409a      	lsls	r2, r3
 8005896:	0013      	movs	r3, r2
 8005898:	43da      	mvns	r2, r3
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	23a0      	movs	r3, #160	; 0xa0
 80058a4:	05db      	lsls	r3, r3, #23
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d013      	beq.n	80058d2 <HAL_GPIO_Init+0x1ca>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a45      	ldr	r2, [pc, #276]	; (80059c4 <HAL_GPIO_Init+0x2bc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00d      	beq.n	80058ce <HAL_GPIO_Init+0x1c6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a44      	ldr	r2, [pc, #272]	; (80059c8 <HAL_GPIO_Init+0x2c0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <HAL_GPIO_Init+0x1c2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a43      	ldr	r2, [pc, #268]	; (80059cc <HAL_GPIO_Init+0x2c4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_GPIO_Init+0x1be>
 80058c2:	2303      	movs	r3, #3
 80058c4:	e006      	b.n	80058d4 <HAL_GPIO_Init+0x1cc>
 80058c6:	2305      	movs	r3, #5
 80058c8:	e004      	b.n	80058d4 <HAL_GPIO_Init+0x1cc>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e002      	b.n	80058d4 <HAL_GPIO_Init+0x1cc>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_GPIO_Init+0x1cc>
 80058d2:	2300      	movs	r3, #0
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	2103      	movs	r1, #3
 80058d8:	400a      	ands	r2, r1
 80058da:	00d2      	lsls	r2, r2, #3
 80058dc:	4093      	lsls	r3, r2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80058e4:	4936      	ldr	r1, [pc, #216]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	089b      	lsrs	r3, r3, #2
 80058ea:	3318      	adds	r3, #24
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f2:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43da      	mvns	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	035b      	lsls	r3, r3, #13
 800590a:	4013      	ands	r3, r2
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800591c:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43da      	mvns	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	039b      	lsls	r3, r3, #14
 8005934:	4013      	ands	r3, r2
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005940:	4b1f      	ldr	r3, [pc, #124]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 8005948:	2384      	movs	r3, #132	; 0x84
 800594a:	58d3      	ldr	r3, [r2, r3]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43da      	mvns	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	4013      	ands	r3, r2
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800596c:	4914      	ldr	r1, [pc, #80]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 800596e:	2284      	movs	r2, #132	; 0x84
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005974:	4a12      	ldr	r2, [pc, #72]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 8005976:	2380      	movs	r3, #128	; 0x80
 8005978:	58d3      	ldr	r3, [r2, r3]
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	43da      	mvns	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4013      	ands	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	025b      	lsls	r3, r3, #9
 800598e:	4013      	ands	r3, r2
 8005990:	d003      	beq.n	800599a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800599a:	4909      	ldr	r1, [pc, #36]	; (80059c0 <HAL_GPIO_Init+0x2b8>)
 800599c:	2280      	movs	r2, #128	; 0x80
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3301      	adds	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	40da      	lsrs	r2, r3
 80059b0:	1e13      	subs	r3, r2, #0
 80059b2:	d000      	beq.n	80059b6 <HAL_GPIO_Init+0x2ae>
 80059b4:	e6b0      	b.n	8005718 <HAL_GPIO_Init+0x10>
  }
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b006      	add	sp, #24
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021800 	.word	0x40021800
 80059c4:	50000400 	.word	0x50000400
 80059c8:	50000800 	.word	0x50000800
 80059cc:	50000c00 	.word	0x50000c00

080059d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	0008      	movs	r0, r1
 80059da:	0011      	movs	r1, r2
 80059dc:	1cbb      	adds	r3, r7, #2
 80059de:	1c02      	adds	r2, r0, #0
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	1c7b      	adds	r3, r7, #1
 80059e4:	1c0a      	adds	r2, r1, #0
 80059e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059e8:	1c7b      	adds	r3, r7, #1
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059f0:	1cbb      	adds	r3, r7, #2
 80059f2:	881a      	ldrh	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059f8:	e003      	b.n	8005a02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059fa:	1cbb      	adds	r3, r7, #2
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b002      	add	sp, #8
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	0002      	movs	r2, r0
 8005a14:	1dbb      	adds	r3, r7, #6
 8005a16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005a18:	4b10      	ldr	r3, [pc, #64]	; (8005a5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	1dba      	adds	r2, r7, #6
 8005a1e:	8812      	ldrh	r2, [r2, #0]
 8005a20:	4013      	ands	r3, r2
 8005a22:	d008      	beq.n	8005a36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a26:	1dba      	adds	r2, r7, #6
 8005a28:	8812      	ldrh	r2, [r2, #0]
 8005a2a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7fe f931 	bl	8003c98 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	1dba      	adds	r2, r7, #6
 8005a3c:	8812      	ldrh	r2, [r2, #0]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d008      	beq.n	8005a54 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a44:	1dba      	adds	r2, r7, #6
 8005a46:	8812      	ldrh	r2, [r2, #0]
 8005a48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005a4a:	1dbb      	adds	r3, r7, #6
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f000 f806 	bl	8005a60 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021800 	.word	0x40021800

08005a60 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	0002      	movs	r2, r0
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e082      	b.n	8005b8c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2241      	movs	r2, #65	; 0x41
 8005a8a:	5c9b      	ldrb	r3, [r3, r2]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d107      	bne.n	8005aa2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2240      	movs	r2, #64	; 0x40
 8005a96:	2100      	movs	r1, #0
 8005a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fd fe0b 	bl	80036b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2241      	movs	r2, #65	; 0x41
 8005aa6:	2124      	movs	r1, #36	; 0x24
 8005aa8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	438a      	bics	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4934      	ldr	r1, [pc, #208]	; (8005b94 <HAL_I2C_Init+0x120>)
 8005ac4:	400a      	ands	r2, r1
 8005ac6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4931      	ldr	r1, [pc, #196]	; (8005b98 <HAL_I2C_Init+0x124>)
 8005ad4:	400a      	ands	r2, r1
 8005ad6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d108      	bne.n	8005af2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2180      	movs	r1, #128	; 0x80
 8005aea:	0209      	lsls	r1, r1, #8
 8005aec:	430a      	orrs	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	e007      	b.n	8005b02 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2184      	movs	r1, #132	; 0x84
 8005afc:	0209      	lsls	r1, r1, #8
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d104      	bne.n	8005b14 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	0112      	lsls	r2, r2, #4
 8005b12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	491f      	ldr	r1, [pc, #124]	; (8005b9c <HAL_I2C_Init+0x128>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	491a      	ldr	r1, [pc, #104]	; (8005b98 <HAL_I2C_Init+0x124>)
 8005b30:	400a      	ands	r2, r1
 8005b32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69d9      	ldr	r1, [r3, #28]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2241      	movs	r2, #65	; 0x41
 8005b78:	2120      	movs	r1, #32
 8005b7a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2242      	movs	r2, #66	; 0x42
 8005b86:	2100      	movs	r1, #0
 8005b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	f0ffffff 	.word	0xf0ffffff
 8005b98:	ffff7fff 	.word	0xffff7fff
 8005b9c:	02008000 	.word	0x02008000

08005ba0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	0008      	movs	r0, r1
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	0019      	movs	r1, r3
 8005bae:	230a      	movs	r3, #10
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	1c02      	adds	r2, r0, #0
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	1c0a      	adds	r2, r1, #0
 8005bbc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2241      	movs	r2, #65	; 0x41
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d000      	beq.n	8005bcc <HAL_I2C_Master_Transmit+0x2c>
 8005bca:	e0e7      	b.n	8005d9c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2240      	movs	r2, #64	; 0x40
 8005bd0:	5c9b      	ldrb	r3, [r3, r2]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_I2C_Master_Transmit+0x3a>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0e1      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005be2:	f7fe ff3b 	bl	8004a5c <HAL_GetTick>
 8005be6:	0003      	movs	r3, r0
 8005be8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	0219      	lsls	r1, r3, #8
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2319      	movs	r3, #25
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f000 fa04 	bl	8006004 <I2C_WaitOnFlagUntilTimeout>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0cc      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2241      	movs	r2, #65	; 0x41
 8005c08:	2121      	movs	r1, #33	; 0x21
 8005c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2242      	movs	r2, #66	; 0x42
 8005c10:	2110      	movs	r1, #16
 8005c12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2208      	movs	r2, #8
 8005c24:	18ba      	adds	r2, r7, r2
 8005c26:	8812      	ldrh	r2, [r2, #0]
 8005c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2bff      	cmp	r3, #255	; 0xff
 8005c38:	d911      	bls.n	8005c5e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	2380      	movs	r3, #128	; 0x80
 8005c48:	045c      	lsls	r4, r3, #17
 8005c4a:	230a      	movs	r3, #10
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	8819      	ldrh	r1, [r3, #0]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	4b55      	ldr	r3, [pc, #340]	; (8005da8 <HAL_I2C_Master_Transmit+0x208>)
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	0023      	movs	r3, r4
 8005c58:	f000 fc08 	bl	800646c <I2C_TransferConfig>
 8005c5c:	e075      	b.n	8005d4a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	049c      	lsls	r4, r3, #18
 8005c72:	230a      	movs	r3, #10
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	8819      	ldrh	r1, [r3, #0]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	4b4b      	ldr	r3, [pc, #300]	; (8005da8 <HAL_I2C_Master_Transmit+0x208>)
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	0023      	movs	r3, r4
 8005c80:	f000 fbf4 	bl	800646c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c84:	e061      	b.n	8005d4a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f000 f9f8 	bl	8006082 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e081      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	781a      	ldrb	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d03a      	beq.n	8005d4a <HAL_I2C_Master_Transmit+0x1aa>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d136      	bne.n	8005d4a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	0013      	movs	r3, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2180      	movs	r1, #128	; 0x80
 8005cea:	f000 f98b 	bl	8006004 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	1e03      	subs	r3, r0, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e053      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2bff      	cmp	r3, #255	; 0xff
 8005cfe:	d911      	bls.n	8005d24 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	045c      	lsls	r4, r3, #17
 8005d10:	230a      	movs	r3, #10
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	8819      	ldrh	r1, [r3, #0]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	0023      	movs	r3, r4
 8005d1e:	f000 fba5 	bl	800646c <I2C_TransferConfig>
 8005d22:	e012      	b.n	8005d4a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	049c      	lsls	r4, r3, #18
 8005d38:	230a      	movs	r3, #10
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	8819      	ldrh	r1, [r3, #0]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	2300      	movs	r3, #0
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	0023      	movs	r3, r4
 8005d46:	f000 fb91 	bl	800646c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d198      	bne.n	8005c86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f000 f9d0 	bl	8006100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d60:	1e03      	subs	r3, r0, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e01a      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	490c      	ldr	r1, [pc, #48]	; (8005dac <HAL_I2C_Master_Transmit+0x20c>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2241      	movs	r2, #65	; 0x41
 8005d84:	2120      	movs	r1, #32
 8005d86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2242      	movs	r2, #66	; 0x42
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	2100      	movs	r1, #0
 8005d96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	0018      	movs	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b007      	add	sp, #28
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	80002000 	.word	0x80002000
 8005dac:	fe00e800 	.word	0xfe00e800

08005db0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b089      	sub	sp, #36	; 0x24
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	0008      	movs	r0, r1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	230a      	movs	r3, #10
 8005dc0:	18fb      	adds	r3, r7, r3
 8005dc2:	1c02      	adds	r2, r0, #0
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	1c0a      	adds	r2, r1, #0
 8005dcc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2241      	movs	r2, #65	; 0x41
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d000      	beq.n	8005ddc <HAL_I2C_Master_Receive+0x2c>
 8005dda:	e0e8      	b.n	8005fae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	5c9b      	ldrb	r3, [r3, r2]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_I2C_Master_Receive+0x3a>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e0e2      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2240      	movs	r2, #64	; 0x40
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005df2:	f7fe fe33 	bl	8004a5c <HAL_GetTick>
 8005df6:	0003      	movs	r3, r0
 8005df8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dfa:	2380      	movs	r3, #128	; 0x80
 8005dfc:	0219      	lsls	r1, r3, #8
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2319      	movs	r3, #25
 8005e06:	2201      	movs	r2, #1
 8005e08:	f000 f8fc 	bl	8006004 <I2C_WaitOnFlagUntilTimeout>
 8005e0c:	1e03      	subs	r3, r0, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0cd      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2241      	movs	r2, #65	; 0x41
 8005e18:	2122      	movs	r1, #34	; 0x22
 8005e1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2242      	movs	r2, #66	; 0x42
 8005e20:	2110      	movs	r1, #16
 8005e22:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2208      	movs	r2, #8
 8005e34:	18ba      	adds	r2, r7, r2
 8005e36:	8812      	ldrh	r2, [r2, #0]
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2bff      	cmp	r3, #255	; 0xff
 8005e48:	d911      	bls.n	8005e6e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22ff      	movs	r2, #255	; 0xff
 8005e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	045c      	lsls	r4, r3, #17
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	8819      	ldrh	r1, [r3, #0]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	4b55      	ldr	r3, [pc, #340]	; (8005fb8 <HAL_I2C_Master_Receive+0x208>)
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	0023      	movs	r3, r4
 8005e68:	f000 fb00 	bl	800646c <I2C_TransferConfig>
 8005e6c:	e076      	b.n	8005f5c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	049c      	lsls	r4, r3, #18
 8005e82:	230a      	movs	r3, #10
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	8819      	ldrh	r1, [r3, #0]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <HAL_I2C_Master_Receive+0x208>)
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	0023      	movs	r3, r4
 8005e90:	f000 faec 	bl	800646c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e94:	e062      	b.n	8005f5c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f96b 	bl	8006178 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ea2:	1e03      	subs	r3, r0, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e082      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d03a      	beq.n	8005f5c <HAL_I2C_Master_Receive+0x1ac>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d136      	bne.n	8005f5c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	0013      	movs	r3, r2
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2180      	movs	r1, #128	; 0x80
 8005efc:	f000 f882 	bl	8006004 <I2C_WaitOnFlagUntilTimeout>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e053      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2bff      	cmp	r3, #255	; 0xff
 8005f10:	d911      	bls.n	8005f36 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	045c      	lsls	r4, r3, #17
 8005f22:	230a      	movs	r3, #10
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	8819      	ldrh	r1, [r3, #0]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	0023      	movs	r3, r4
 8005f30:	f000 fa9c 	bl	800646c <I2C_TransferConfig>
 8005f34:	e012      	b.n	8005f5c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	049c      	lsls	r4, r3, #18
 8005f4a:	230a      	movs	r3, #10
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	8819      	ldrh	r1, [r3, #0]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	0023      	movs	r3, r4
 8005f58:	f000 fa88 	bl	800646c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d197      	bne.n	8005e96 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f000 f8c7 	bl	8006100 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e01a      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	490b      	ldr	r1, [pc, #44]	; (8005fbc <HAL_I2C_Master_Receive+0x20c>)
 8005f8e:	400a      	ands	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2241      	movs	r2, #65	; 0x41
 8005f96:	2120      	movs	r1, #32
 8005f98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2242      	movs	r2, #66	; 0x42
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2240      	movs	r2, #64	; 0x40
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b007      	add	sp, #28
 8005fb6:	bd90      	pop	{r4, r7, pc}
 8005fb8:	80002400 	.word	0x80002400
 8005fbc:	fe00e800 	.word	0xfe00e800

08005fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d103      	bne.n	8005fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d007      	beq.n	8005ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	619a      	str	r2, [r3, #24]
  }
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b002      	add	sp, #8
 8006002:	bd80      	pop	{r7, pc}

08006004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	1dfb      	adds	r3, r7, #7
 8006012:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006014:	e021      	b.n	800605a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	d01e      	beq.n	800605a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601c:	f7fe fd1e 	bl	8004a5c <HAL_GetTick>
 8006020:	0002      	movs	r2, r0
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d113      	bne.n	800605a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	2220      	movs	r2, #32
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2241      	movs	r2, #65	; 0x41
 8006042:	2120      	movs	r1, #32
 8006044:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2242      	movs	r2, #66	; 0x42
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	2100      	movs	r1, #0
 8006054:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e00f      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	425a      	negs	r2, r3
 800606a:	4153      	adcs	r3, r2
 800606c:	b2db      	uxtb	r3, r3
 800606e:	001a      	movs	r2, r3
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d0ce      	beq.n	8006016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b004      	add	sp, #16
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800608e:	e02b      	b.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	0018      	movs	r0, r3
 8006098:	f000 f8e8 	bl	800626c <I2C_IsErrorOccurred>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d001      	beq.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e029      	b.n	80060f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	3301      	adds	r3, #1
 80060a8:	d01e      	beq.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fe fcd7 	bl	8004a5c <HAL_GetTick>
 80060ae:	0002      	movs	r2, r0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d113      	bne.n	80060e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	2220      	movs	r2, #32
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2241      	movs	r2, #65	; 0x41
 80060d0:	2120      	movs	r1, #32
 80060d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2242      	movs	r2, #66	; 0x42
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e007      	b.n	80060f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2202      	movs	r2, #2
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d1cc      	bne.n	8006090 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	0018      	movs	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b004      	add	sp, #16
 80060fe:	bd80      	pop	{r7, pc}

08006100 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800610c:	e028      	b.n	8006160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	0018      	movs	r0, r3
 8006116:	f000 f8a9 	bl	800626c <I2C_IsErrorOccurred>
 800611a:	1e03      	subs	r3, r0, #0
 800611c:	d001      	beq.n	8006122 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e026      	b.n	8006170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006122:	f7fe fc9b 	bl	8004a5c <HAL_GetTick>
 8006126:	0002      	movs	r2, r0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	2220      	movs	r2, #32
 800613e:	431a      	orrs	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2241      	movs	r2, #65	; 0x41
 8006148:	2120      	movs	r1, #32
 800614a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2242      	movs	r2, #66	; 0x42
 8006150:	2100      	movs	r1, #0
 8006152:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2240      	movs	r2, #64	; 0x40
 8006158:	2100      	movs	r1, #0
 800615a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e007      	b.n	8006170 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2220      	movs	r2, #32
 8006168:	4013      	ands	r3, r2
 800616a:	2b20      	cmp	r3, #32
 800616c:	d1cf      	bne.n	800610e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bd80      	pop	{r7, pc}

08006178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006184:	e064      	b.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	0018      	movs	r0, r3
 800618e:	f000 f86d 	bl	800626c <I2C_IsErrorOccurred>
 8006192:	1e03      	subs	r3, r0, #0
 8006194:	d001      	beq.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e062      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2220      	movs	r2, #32
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d138      	bne.n	800621a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2204      	movs	r2, #4
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d105      	bne.n	80061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e04e      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2210      	movs	r2, #16
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d107      	bne.n	80061e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2210      	movs	r2, #16
 80061d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2204      	movs	r2, #4
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
 80061de:	e002      	b.n	80061e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2220      	movs	r2, #32
 80061ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	491b      	ldr	r1, [pc, #108]	; (8006268 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80061fa:	400a      	ands	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2241      	movs	r2, #65	; 0x41
 8006202:	2120      	movs	r1, #32
 8006204:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2242      	movs	r2, #66	; 0x42
 800620a:	2100      	movs	r1, #0
 800620c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2240      	movs	r2, #64	; 0x40
 8006212:	2100      	movs	r1, #0
 8006214:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e022      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fe fc1f 	bl	8004a5c <HAL_GetTick>
 800621e:	0002      	movs	r2, r0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	2220      	movs	r2, #32
 8006236:	431a      	orrs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2241      	movs	r2, #65	; 0x41
 8006240:	2120      	movs	r1, #32
 8006242:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	2100      	movs	r1, #0
 800624a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2204      	movs	r2, #4
 8006258:	4013      	ands	r3, r2
 800625a:	2b04      	cmp	r3, #4
 800625c:	d193      	bne.n	8006186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	0018      	movs	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	b004      	add	sp, #16
 8006266:	bd80      	pop	{r7, pc}
 8006268:	fe00e800 	.word	0xfe00e800

0800626c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b08b      	sub	sp, #44	; 0x2c
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006278:	2327      	movs	r3, #39	; 0x27
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2210      	movs	r2, #16
 8006294:	4013      	ands	r3, r2
 8006296:	d100      	bne.n	800629a <I2C_IsErrorOccurred+0x2e>
 8006298:	e082      	b.n	80063a0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2210      	movs	r2, #16
 80062a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062a2:	e060      	b.n	8006366 <I2C_IsErrorOccurred+0xfa>
 80062a4:	2427      	movs	r4, #39	; 0x27
 80062a6:	193b      	adds	r3, r7, r4
 80062a8:	193a      	adds	r2, r7, r4
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	3301      	adds	r3, #1
 80062b2:	d058      	beq.n	8006366 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062b4:	f7fe fbd2 	bl	8004a5c <HAL_GetTick>
 80062b8:	0002      	movs	r2, r0
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d306      	bcc.n	80062d2 <I2C_IsErrorOccurred+0x66>
 80062c4:	193b      	adds	r3, r7, r4
 80062c6:	193a      	adds	r2, r7, r4
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d149      	bne.n	8006366 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	4013      	ands	r3, r2
 80062de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062e0:	2013      	movs	r0, #19
 80062e2:	183b      	adds	r3, r7, r0
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	2142      	movs	r1, #66	; 0x42
 80062e8:	5c52      	ldrb	r2, [r2, r1]
 80062ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	401a      	ands	r2, r3
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d126      	bne.n	800634e <I2C_IsErrorOccurred+0xe2>
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	2380      	movs	r3, #128	; 0x80
 8006304:	01db      	lsls	r3, r3, #7
 8006306:	429a      	cmp	r2, r3
 8006308:	d021      	beq.n	800634e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800630a:	183b      	adds	r3, r7, r0
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b20      	cmp	r3, #32
 8006310:	d01d      	beq.n	800634e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2180      	movs	r1, #128	; 0x80
 800631e:	01c9      	lsls	r1, r1, #7
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006324:	f7fe fb9a 	bl	8004a5c <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800632c:	e00f      	b.n	800634e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800632e:	f7fe fb95 	bl	8004a5c <HAL_GetTick>
 8006332:	0002      	movs	r2, r0
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b19      	cmp	r3, #25
 800633a:	d908      	bls.n	800634e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2220      	movs	r2, #32
 8006340:	4313      	orrs	r3, r2
 8006342:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006344:	2327      	movs	r3, #39	; 0x27
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]

              break;
 800634c:	e00b      	b.n	8006366 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2220      	movs	r2, #32
 8006356:	4013      	ands	r3, r2
 8006358:	2127      	movs	r1, #39	; 0x27
 800635a:	187a      	adds	r2, r7, r1
 800635c:	1879      	adds	r1, r7, r1
 800635e:	7809      	ldrb	r1, [r1, #0]
 8006360:	7011      	strb	r1, [r2, #0]
 8006362:	2b20      	cmp	r3, #32
 8006364:	d1e3      	bne.n	800632e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2220      	movs	r2, #32
 800636e:	4013      	ands	r3, r2
 8006370:	2b20      	cmp	r3, #32
 8006372:	d004      	beq.n	800637e <I2C_IsErrorOccurred+0x112>
 8006374:	2327      	movs	r3, #39	; 0x27
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d092      	beq.n	80062a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800637e:	2327      	movs	r3, #39	; 0x27
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2220      	movs	r2, #32
 800638e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2204      	movs	r2, #4
 8006394:	4313      	orrs	r3, r2
 8006396:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006398:	2327      	movs	r3, #39	; 0x27
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4013      	ands	r3, r2
 80063b0:	d00c      	beq.n	80063cc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	2201      	movs	r2, #1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	0052      	lsls	r2, r2, #1
 80063c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063c4:	2327      	movs	r3, #39	; 0x27
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	2380      	movs	r3, #128	; 0x80
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	4013      	ands	r3, r2
 80063d4:	d00c      	beq.n	80063f0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2208      	movs	r2, #8
 80063da:	4313      	orrs	r3, r2
 80063dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	00d2      	lsls	r2, r2, #3
 80063e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063e8:	2327      	movs	r3, #39	; 0x27
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4013      	ands	r3, r2
 80063f8:	d00c      	beq.n	8006414 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	2202      	movs	r2, #2
 80063fe:	4313      	orrs	r3, r2
 8006400:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2280      	movs	r2, #128	; 0x80
 8006408:	0092      	lsls	r2, r2, #2
 800640a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800640c:	2327      	movs	r3, #39	; 0x27
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006414:	2327      	movs	r3, #39	; 0x27
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01d      	beq.n	800645a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff fdcd 	bl	8005fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	490d      	ldr	r1, [pc, #52]	; (8006468 <I2C_IsErrorOccurred+0x1fc>)
 8006432:	400a      	ands	r2, r1
 8006434:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2241      	movs	r2, #65	; 0x41
 8006446:	2120      	movs	r1, #32
 8006448:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2242      	movs	r2, #66	; 0x42
 800644e:	2100      	movs	r1, #0
 8006450:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2240      	movs	r2, #64	; 0x40
 8006456:	2100      	movs	r1, #0
 8006458:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800645a:	2327      	movs	r3, #39	; 0x27
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	781b      	ldrb	r3, [r3, #0]
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b00b      	add	sp, #44	; 0x2c
 8006466:	bd90      	pop	{r4, r7, pc}
 8006468:	fe00e800 	.word	0xfe00e800

0800646c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	0008      	movs	r0, r1
 8006476:	0011      	movs	r1, r2
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	240a      	movs	r4, #10
 800647c:	193b      	adds	r3, r7, r4
 800647e:	1c02      	adds	r2, r0, #0
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	2009      	movs	r0, #9
 8006484:	183b      	adds	r3, r7, r0
 8006486:	1c0a      	adds	r2, r1, #0
 8006488:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800648a:	193b      	adds	r3, r7, r4
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	059b      	lsls	r3, r3, #22
 8006490:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006492:	183b      	adds	r3, r7, r0
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	0419      	lsls	r1, r3, #16
 8006498:	23ff      	movs	r3, #255	; 0xff
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800649e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	4313      	orrs	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b6:	0d51      	lsrs	r1, r2, #21
 80064b8:	2280      	movs	r2, #128	; 0x80
 80064ba:	00d2      	lsls	r2, r2, #3
 80064bc:	400a      	ands	r2, r1
 80064be:	4907      	ldr	r1, [pc, #28]	; (80064dc <I2C_TransferConfig+0x70>)
 80064c0:	430a      	orrs	r2, r1
 80064c2:	43d2      	mvns	r2, r2
 80064c4:	401a      	ands	r2, r3
 80064c6:	0011      	movs	r1, r2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b007      	add	sp, #28
 80064d8:	bd90      	pop	{r4, r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	03ff63ff 	.word	0x03ff63ff

080064e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2241      	movs	r2, #65	; 0x41
 80064ee:	5c9b      	ldrb	r3, [r3, r2]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d138      	bne.n	8006568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2240      	movs	r2, #64	; 0x40
 80064fa:	5c9b      	ldrb	r3, [r3, r2]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006500:	2302      	movs	r3, #2
 8006502:	e032      	b.n	800656a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2240      	movs	r2, #64	; 0x40
 8006508:	2101      	movs	r1, #1
 800650a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2241      	movs	r2, #65	; 0x41
 8006510:	2124      	movs	r1, #36	; 0x24
 8006512:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2101      	movs	r1, #1
 8006520:	438a      	bics	r2, r1
 8006522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4911      	ldr	r1, [pc, #68]	; (8006574 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006530:	400a      	ands	r2, r1
 8006532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2101      	movs	r1, #1
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2241      	movs	r2, #65	; 0x41
 8006558:	2120      	movs	r1, #32
 800655a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2240      	movs	r2, #64	; 0x40
 8006560:	2100      	movs	r1, #0
 8006562:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	0018      	movs	r0, r3
 800656c:	46bd      	mov	sp, r7
 800656e:	b002      	add	sp, #8
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	ffffefff 	.word	0xffffefff

08006578 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2241      	movs	r2, #65	; 0x41
 8006586:	5c9b      	ldrb	r3, [r3, r2]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b20      	cmp	r3, #32
 800658c:	d139      	bne.n	8006602 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	5c9b      	ldrb	r3, [r3, r2]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006598:	2302      	movs	r3, #2
 800659a:	e033      	b.n	8006604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2240      	movs	r2, #64	; 0x40
 80065a0:	2101      	movs	r1, #1
 80065a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2241      	movs	r2, #65	; 0x41
 80065a8:	2124      	movs	r1, #36	; 0x24
 80065aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2101      	movs	r1, #1
 80065b8:	438a      	bics	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a11      	ldr	r2, [pc, #68]	; (800660c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2101      	movs	r1, #1
 80065ea:	430a      	orrs	r2, r1
 80065ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2241      	movs	r2, #65	; 0x41
 80065f2:	2120      	movs	r1, #32
 80065f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2240      	movs	r2, #64	; 0x40
 80065fa:	2100      	movs	r1, #0
 80065fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	0018      	movs	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	b004      	add	sp, #16
 800660a:	bd80      	pop	{r7, pc}
 800660c:	fffff0ff 	.word	0xfffff0ff

08006610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006618:	4b19      	ldr	r3, [pc, #100]	; (8006680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800661e:	4013      	ands	r3, r2
 8006620:	0019      	movs	r1, r3
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	429a      	cmp	r2, r3
 8006632:	d11f      	bne.n	8006674 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006634:	4b14      	ldr	r3, [pc, #80]	; (8006688 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	0013      	movs	r3, r2
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	189b      	adds	r3, r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4912      	ldr	r1, [pc, #72]	; (800668c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006642:	0018      	movs	r0, r3
 8006644:	f7f9 fd7c 	bl	8000140 <__udivsi3>
 8006648:	0003      	movs	r3, r0
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800664e:	e008      	b.n	8006662 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3b01      	subs	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	e001      	b.n	8006662 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e009      	b.n	8006676 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006662:	4b07      	ldr	r3, [pc, #28]	; (8006680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	401a      	ands	r2, r3
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	429a      	cmp	r2, r3
 8006672:	d0ed      	beq.n	8006650 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	0018      	movs	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	b004      	add	sp, #16
 800667c:	bd80      	pop	{r7, pc}
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	40007000 	.word	0x40007000
 8006684:	fffff9ff 	.word	0xfffff9ff
 8006688:	20000000 	.word	0x20000000
 800668c:	000f4240 	.word	0x000f4240

08006690 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006694:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	23e0      	movs	r3, #224	; 0xe0
 800669a:	01db      	lsls	r3, r3, #7
 800669c:	4013      	ands	r3, r2
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000

080066a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e2f3      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d100      	bne.n	80066c6 <HAL_RCC_OscConfig+0x1e>
 80066c4:	e07c      	b.n	80067c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c6:	4bc3      	ldr	r3, [pc, #780]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2238      	movs	r2, #56	; 0x38
 80066cc:	4013      	ands	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066d0:	4bc0      	ldr	r3, [pc, #768]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2203      	movs	r2, #3
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d102      	bne.n	80066e6 <HAL_RCC_OscConfig+0x3e>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d002      	beq.n	80066ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d10b      	bne.n	8006704 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	4bb9      	ldr	r3, [pc, #740]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	029b      	lsls	r3, r3, #10
 80066f4:	4013      	ands	r3, r2
 80066f6:	d062      	beq.n	80067be <HAL_RCC_OscConfig+0x116>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d15e      	bne.n	80067be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e2ce      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	025b      	lsls	r3, r3, #9
 800670c:	429a      	cmp	r2, r3
 800670e:	d107      	bne.n	8006720 <HAL_RCC_OscConfig+0x78>
 8006710:	4bb0      	ldr	r3, [pc, #704]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4baf      	ldr	r3, [pc, #700]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	0249      	lsls	r1, r1, #9
 800671a:	430a      	orrs	r2, r1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e020      	b.n	8006762 <HAL_RCC_OscConfig+0xba>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	23a0      	movs	r3, #160	; 0xa0
 8006726:	02db      	lsls	r3, r3, #11
 8006728:	429a      	cmp	r2, r3
 800672a:	d10e      	bne.n	800674a <HAL_RCC_OscConfig+0xa2>
 800672c:	4ba9      	ldr	r3, [pc, #676]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4ba8      	ldr	r3, [pc, #672]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006732:	2180      	movs	r1, #128	; 0x80
 8006734:	02c9      	lsls	r1, r1, #11
 8006736:	430a      	orrs	r2, r1
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	4ba6      	ldr	r3, [pc, #664]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4ba5      	ldr	r3, [pc, #660]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	0249      	lsls	r1, r1, #9
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e00b      	b.n	8006762 <HAL_RCC_OscConfig+0xba>
 800674a:	4ba2      	ldr	r3, [pc, #648]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4ba1      	ldr	r3, [pc, #644]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006750:	49a1      	ldr	r1, [pc, #644]	; (80069d8 <HAL_RCC_OscConfig+0x330>)
 8006752:	400a      	ands	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	4b9f      	ldr	r3, [pc, #636]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b9e      	ldr	r3, [pc, #632]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800675c:	499f      	ldr	r1, [pc, #636]	; (80069dc <HAL_RCC_OscConfig+0x334>)
 800675e:	400a      	ands	r2, r1
 8006760:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676a:	f7fe f977 	bl	8004a5c <HAL_GetTick>
 800676e:	0003      	movs	r3, r0
 8006770:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006774:	f7fe f972 	bl	8004a5c <HAL_GetTick>
 8006778:	0002      	movs	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b64      	cmp	r3, #100	; 0x64
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e28d      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006786:	4b93      	ldr	r3, [pc, #588]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	4013      	ands	r3, r2
 8006790:	d0f0      	beq.n	8006774 <HAL_RCC_OscConfig+0xcc>
 8006792:	e015      	b.n	80067c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006794:	f7fe f962 	bl	8004a5c <HAL_GetTick>
 8006798:	0003      	movs	r3, r0
 800679a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800679e:	f7fe f95d 	bl	8004a5c <HAL_GetTick>
 80067a2:	0002      	movs	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b64      	cmp	r3, #100	; 0x64
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e278      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067b0:	4b88      	ldr	r3, [pc, #544]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	4013      	ands	r3, r2
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0xf6>
 80067bc:	e000      	b.n	80067c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2202      	movs	r2, #2
 80067c6:	4013      	ands	r3, r2
 80067c8:	d100      	bne.n	80067cc <HAL_RCC_OscConfig+0x124>
 80067ca:	e099      	b.n	8006900 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067cc:	4b81      	ldr	r3, [pc, #516]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2238      	movs	r2, #56	; 0x38
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067d6:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2203      	movs	r2, #3
 80067dc:	4013      	ands	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d102      	bne.n	80067ec <HAL_RCC_OscConfig+0x144>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d002      	beq.n	80067f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d135      	bne.n	800685e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f2:	4b78      	ldr	r3, [pc, #480]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	2380      	movs	r3, #128	; 0x80
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4013      	ands	r3, r2
 80067fc:	d005      	beq.n	800680a <HAL_RCC_OscConfig+0x162>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e24b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b72      	ldr	r3, [pc, #456]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4a74      	ldr	r2, [pc, #464]	; (80069e0 <HAL_RCC_OscConfig+0x338>)
 8006810:	4013      	ands	r3, r2
 8006812:	0019      	movs	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	021a      	lsls	r2, r3, #8
 800681a:	4b6e      	ldr	r3, [pc, #440]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d112      	bne.n	800684c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006826:	4b6b      	ldr	r3, [pc, #428]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6e      	ldr	r2, [pc, #440]	; (80069e4 <HAL_RCC_OscConfig+0x33c>)
 800682c:	4013      	ands	r3, r2
 800682e:	0019      	movs	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	4b67      	ldr	r3, [pc, #412]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006836:	430a      	orrs	r2, r1
 8006838:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800683a:	4b66      	ldr	r3, [pc, #408]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	0adb      	lsrs	r3, r3, #11
 8006840:	2207      	movs	r2, #7
 8006842:	4013      	ands	r3, r2
 8006844:	4a68      	ldr	r2, [pc, #416]	; (80069e8 <HAL_RCC_OscConfig+0x340>)
 8006846:	40da      	lsrs	r2, r3
 8006848:	4b68      	ldr	r3, [pc, #416]	; (80069ec <HAL_RCC_OscConfig+0x344>)
 800684a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800684c:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <HAL_RCC_OscConfig+0x348>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	0018      	movs	r0, r3
 8006852:	f7fe f8a7 	bl	80049a4 <HAL_InitTick>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d051      	beq.n	80068fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e221      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d030      	beq.n	80068c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006866:	4b5b      	ldr	r3, [pc, #364]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a5e      	ldr	r2, [pc, #376]	; (80069e4 <HAL_RCC_OscConfig+0x33c>)
 800686c:	4013      	ands	r3, r2
 800686e:	0019      	movs	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006876:	430a      	orrs	r2, r1
 8006878:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800687a:	4b56      	ldr	r3, [pc, #344]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b55      	ldr	r3, [pc, #340]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	0049      	lsls	r1, r1, #1
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fe f8e8 	bl	8004a5c <HAL_GetTick>
 800688c:	0003      	movs	r3, r0
 800688e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006892:	f7fe f8e3 	bl	8004a5c <HAL_GetTick>
 8006896:	0002      	movs	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e1fe      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a4:	4b4b      	ldr	r3, [pc, #300]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	2380      	movs	r3, #128	; 0x80
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4013      	ands	r3, r2
 80068ae:	d0f0      	beq.n	8006892 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b0:	4b48      	ldr	r3, [pc, #288]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a4a      	ldr	r2, [pc, #296]	; (80069e0 <HAL_RCC_OscConfig+0x338>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	021a      	lsls	r2, r3, #8
 80068c0:	4b44      	ldr	r3, [pc, #272]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	e01b      	b.n	8006900 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80068c8:	4b42      	ldr	r3, [pc, #264]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068ce:	4949      	ldr	r1, [pc, #292]	; (80069f4 <HAL_RCC_OscConfig+0x34c>)
 80068d0:	400a      	ands	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fe f8c2 	bl	8004a5c <HAL_GetTick>
 80068d8:	0003      	movs	r3, r0
 80068da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068de:	f7fe f8bd 	bl	8004a5c <HAL_GetTick>
 80068e2:	0002      	movs	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e1d8      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4013      	ands	r3, r2
 80068fa:	d1f0      	bne.n	80068de <HAL_RCC_OscConfig+0x236>
 80068fc:	e000      	b.n	8006900 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2208      	movs	r2, #8
 8006906:	4013      	ands	r3, r2
 8006908:	d047      	beq.n	800699a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800690a:	4b32      	ldr	r3, [pc, #200]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2238      	movs	r2, #56	; 0x38
 8006910:	4013      	ands	r3, r2
 8006912:	2b18      	cmp	r3, #24
 8006914:	d10a      	bne.n	800692c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006916:	4b2f      	ldr	r3, [pc, #188]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	2202      	movs	r2, #2
 800691c:	4013      	ands	r3, r2
 800691e:	d03c      	beq.n	800699a <HAL_RCC_OscConfig+0x2f2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d138      	bne.n	800699a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e1ba      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d019      	beq.n	8006968 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006934:	4b27      	ldr	r3, [pc, #156]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006938:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800693a:	2101      	movs	r1, #1
 800693c:	430a      	orrs	r2, r1
 800693e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fe f88c 	bl	8004a5c <HAL_GetTick>
 8006944:	0003      	movs	r3, r0
 8006946:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800694a:	f7fe f887 	bl	8004a5c <HAL_GetTick>
 800694e:	0002      	movs	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e1a2      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800695c:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800695e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006960:	2202      	movs	r2, #2
 8006962:	4013      	ands	r3, r2
 8006964:	d0f1      	beq.n	800694a <HAL_RCC_OscConfig+0x2a2>
 8006966:	e018      	b.n	800699a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006968:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800696a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800696c:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 800696e:	2101      	movs	r1, #1
 8006970:	438a      	bics	r2, r1
 8006972:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fe f872 	bl	8004a5c <HAL_GetTick>
 8006978:	0003      	movs	r3, r0
 800697a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800697e:	f7fe f86d 	bl	8004a5c <HAL_GetTick>
 8006982:	0002      	movs	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e188      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006990:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	2202      	movs	r2, #2
 8006996:	4013      	ands	r3, r2
 8006998:	d1f1      	bne.n	800697e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2204      	movs	r2, #4
 80069a0:	4013      	ands	r3, r2
 80069a2:	d100      	bne.n	80069a6 <HAL_RCC_OscConfig+0x2fe>
 80069a4:	e0c6      	b.n	8006b34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a6:	231f      	movs	r3, #31
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2238      	movs	r2, #56	; 0x38
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d11e      	bne.n	80069f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80069ba:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <HAL_RCC_OscConfig+0x32c>)
 80069bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069be:	2202      	movs	r2, #2
 80069c0:	4013      	ands	r3, r2
 80069c2:	d100      	bne.n	80069c6 <HAL_RCC_OscConfig+0x31e>
 80069c4:	e0b6      	b.n	8006b34 <HAL_RCC_OscConfig+0x48c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d000      	beq.n	80069d0 <HAL_RCC_OscConfig+0x328>
 80069ce:	e0b1      	b.n	8006b34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e166      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
 80069d4:	40021000 	.word	0x40021000
 80069d8:	fffeffff 	.word	0xfffeffff
 80069dc:	fffbffff 	.word	0xfffbffff
 80069e0:	ffff80ff 	.word	0xffff80ff
 80069e4:	ffffc7ff 	.word	0xffffc7ff
 80069e8:	00f42400 	.word	0x00f42400
 80069ec:	20000000 	.word	0x20000000
 80069f0:	20000004 	.word	0x20000004
 80069f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069f8:	4bac      	ldr	r3, [pc, #688]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 80069fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	055b      	lsls	r3, r3, #21
 8006a00:	4013      	ands	r3, r2
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_OscConfig+0x360>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x362>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a0e:	4ba7      	ldr	r3, [pc, #668]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a12:	4ba6      	ldr	r3, [pc, #664]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a14:	2180      	movs	r1, #128	; 0x80
 8006a16:	0549      	lsls	r1, r1, #21
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a1c:	4ba3      	ldr	r3, [pc, #652]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	055b      	lsls	r3, r3, #21
 8006a24:	4013      	ands	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006a2a:	231f      	movs	r3, #31
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a32:	4b9f      	ldr	r3, [pc, #636]	; (8006cb0 <HAL_RCC_OscConfig+0x608>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	2380      	movs	r3, #128	; 0x80
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d11a      	bne.n	8006a74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a3e:	4b9c      	ldr	r3, [pc, #624]	; (8006cb0 <HAL_RCC_OscConfig+0x608>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <HAL_RCC_OscConfig+0x608>)
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	0049      	lsls	r1, r1, #1
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006a4c:	f7fe f806 	bl	8004a5c <HAL_GetTick>
 8006a50:	0003      	movs	r3, r0
 8006a52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a56:	f7fe f801 	bl	8004a5c <HAL_GetTick>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e11c      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a68:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <HAL_RCC_OscConfig+0x608>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4013      	ands	r3, r2
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x3e2>
 8006a7c:	4b8b      	ldr	r3, [pc, #556]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a80:	4b8a      	ldr	r3, [pc, #552]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a82:	2101      	movs	r1, #1
 8006a84:	430a      	orrs	r2, r1
 8006a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a88:	e01c      	b.n	8006ac4 <HAL_RCC_OscConfig+0x41c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b05      	cmp	r3, #5
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0x404>
 8006a92:	4b86      	ldr	r3, [pc, #536]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a96:	4b85      	ldr	r3, [pc, #532]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006a98:	2104      	movs	r1, #4
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a9e:	4b83      	ldr	r3, [pc, #524]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aa2:	4b82      	ldr	r3, [pc, #520]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCC_OscConfig+0x41c>
 8006aac:	4b7f      	ldr	r3, [pc, #508]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006aae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ab0:	4b7e      	ldr	r3, [pc, #504]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	438a      	bics	r2, r1
 8006ab6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab8:	4b7c      	ldr	r3, [pc, #496]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006aba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006abc:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006abe:	2104      	movs	r1, #4
 8006ac0:	438a      	bics	r2, r1
 8006ac2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d014      	beq.n	8006af6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fd ffc6 	bl	8004a5c <HAL_GetTick>
 8006ad0:	0003      	movs	r3, r0
 8006ad2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ad4:	e009      	b.n	8006aea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fd ffc1 	bl	8004a5c <HAL_GetTick>
 8006ada:	0002      	movs	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	4a74      	ldr	r2, [pc, #464]	; (8006cb4 <HAL_RCC_OscConfig+0x60c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0db      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aea:	4b70      	ldr	r3, [pc, #448]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aee:	2202      	movs	r2, #2
 8006af0:	4013      	ands	r3, r2
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x42e>
 8006af4:	e013      	b.n	8006b1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af6:	f7fd ffb1 	bl	8004a5c <HAL_GetTick>
 8006afa:	0003      	movs	r3, r0
 8006afc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006afe:	e009      	b.n	8006b14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b00:	f7fd ffac 	bl	8004a5c <HAL_GetTick>
 8006b04:	0002      	movs	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	4a6a      	ldr	r2, [pc, #424]	; (8006cb4 <HAL_RCC_OscConfig+0x60c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0c6      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b14:	4b65      	ldr	r3, [pc, #404]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	2202      	movs	r2, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b1e:	231f      	movs	r3, #31
 8006b20:	18fb      	adds	r3, r7, r3
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d105      	bne.n	8006b34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b28:	4b60      	ldr	r3, [pc, #384]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b2c:	4b5f      	ldr	r3, [pc, #380]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b2e:	4962      	ldr	r1, [pc, #392]	; (8006cb8 <HAL_RCC_OscConfig+0x610>)
 8006b30:	400a      	ands	r2, r1
 8006b32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d100      	bne.n	8006b3e <HAL_RCC_OscConfig+0x496>
 8006b3c:	e0b0      	b.n	8006ca0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b3e:	4b5b      	ldr	r3, [pc, #364]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2238      	movs	r2, #56	; 0x38
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d100      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4a4>
 8006b4a:	e078      	b.n	8006c3e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d153      	bne.n	8006bfc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b54:	4b55      	ldr	r3, [pc, #340]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b54      	ldr	r3, [pc, #336]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b5a:	4958      	ldr	r1, [pc, #352]	; (8006cbc <HAL_RCC_OscConfig+0x614>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fd ff7c 	bl	8004a5c <HAL_GetTick>
 8006b64:	0003      	movs	r3, r0
 8006b66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6a:	f7fd ff77 	bl	8004a5c <HAL_GetTick>
 8006b6e:	0002      	movs	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e092      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b7c:	4b4b      	ldr	r3, [pc, #300]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	049b      	lsls	r3, r3, #18
 8006b84:	4013      	ands	r3, r2
 8006b86:	d1f0      	bne.n	8006b6a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b88:	4b48      	ldr	r3, [pc, #288]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4a4c      	ldr	r2, [pc, #304]	; (8006cc0 <HAL_RCC_OscConfig+0x618>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b3c      	ldr	r3, [pc, #240]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	0449      	lsls	r1, r1, #17
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006bc4:	4b39      	ldr	r3, [pc, #228]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	4b38      	ldr	r3, [pc, #224]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	0549      	lsls	r1, r1, #21
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fd ff43 	bl	8004a5c <HAL_GetTick>
 8006bd6:	0003      	movs	r3, r0
 8006bd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fd ff3e 	bl	8004a5c <HAL_GetTick>
 8006be0:	0002      	movs	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e059      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bee:	4b2f      	ldr	r3, [pc, #188]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	2380      	movs	r3, #128	; 0x80
 8006bf4:	049b      	lsls	r3, r3, #18
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x534>
 8006bfa:	e051      	b.n	8006ca0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006c02:	492e      	ldr	r1, [pc, #184]	; (8006cbc <HAL_RCC_OscConfig+0x614>)
 8006c04:	400a      	ands	r2, r1
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fd ff28 	bl	8004a5c <HAL_GetTick>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fd ff23 	bl	8004a5c <HAL_GetTick>
 8006c16:	0002      	movs	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e03e      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c24:	4b21      	ldr	r3, [pc, #132]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	049b      	lsls	r3, r3, #18
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006c36:	4923      	ldr	r1, [pc, #140]	; (8006cc4 <HAL_RCC_OscConfig+0x61c>)
 8006c38:	400a      	ands	r2, r1
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e030      	b.n	8006ca0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e02b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006c4a:	4b18      	ldr	r3, [pc, #96]	; (8006cac <HAL_RCC_OscConfig+0x604>)
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2203      	movs	r2, #3
 8006c54:	401a      	ands	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d11e      	bne.n	8006c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2270      	movs	r2, #112	; 0x70
 8006c62:	401a      	ands	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d117      	bne.n	8006c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	23fe      	movs	r3, #254	; 0xfe
 8006c70:	01db      	lsls	r3, r3, #7
 8006c72:	401a      	ands	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d10e      	bne.n	8006c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	23f8      	movs	r3, #248	; 0xf8
 8006c82:	039b      	lsls	r3, r3, #14
 8006c84:	401a      	ands	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	0f5b      	lsrs	r3, r3, #29
 8006c92:	075a      	lsls	r2, r3, #29
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b008      	add	sp, #32
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40007000 	.word	0x40007000
 8006cb4:	00001388 	.word	0x00001388
 8006cb8:	efffffff 	.word	0xefffffff
 8006cbc:	feffffff 	.word	0xfeffffff
 8006cc0:	1fc1808c 	.word	0x1fc1808c
 8006cc4:	effefffc 	.word	0xeffefffc

08006cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0e9      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b76      	ldr	r3, [pc, #472]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d91e      	bls.n	8006d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b73      	ldr	r3, [pc, #460]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2207      	movs	r2, #7
 8006cf0:	4393      	bics	r3, r2
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	4b70      	ldr	r3, [pc, #448]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cfc:	f7fd feae 	bl	8004a5c <HAL_GetTick>
 8006d00:	0003      	movs	r3, r0
 8006d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d04:	e009      	b.n	8006d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d06:	f7fd fea9 	bl	8004a5c <HAL_GetTick>
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	4a6a      	ldr	r2, [pc, #424]	; (8006ebc <HAL_RCC_ClockConfig+0x1f4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0ca      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d1a:	4b67      	ldr	r3, [pc, #412]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2207      	movs	r2, #7
 8006d20:	4013      	ands	r3, r2
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1ee      	bne.n	8006d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d015      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2204      	movs	r2, #4
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d006      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006d3c:	4b60      	ldr	r3, [pc, #384]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	4b5f      	ldr	r3, [pc, #380]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d42:	21e0      	movs	r1, #224	; 0xe0
 8006d44:	01c9      	lsls	r1, r1, #7
 8006d46:	430a      	orrs	r2, r1
 8006d48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	4a5d      	ldr	r2, [pc, #372]	; (8006ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	0019      	movs	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2201      	movs	r2, #1
 8006d64:	4013      	ands	r3, r2
 8006d66:	d057      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d70:	4b53      	ldr	r3, [pc, #332]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	2380      	movs	r3, #128	; 0x80
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d12b      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e097      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d107      	bne.n	8006d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d88:	4b4d      	ldr	r3, [pc, #308]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	049b      	lsls	r3, r3, #18
 8006d90:	4013      	ands	r3, r2
 8006d92:	d11f      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e08b      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d107      	bne.n	8006db0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006da0:	4b47      	ldr	r3, [pc, #284]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	2380      	movs	r3, #128	; 0x80
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4013      	ands	r3, r2
 8006daa:	d113      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e07f      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d106      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006db8:	4b41      	ldr	r3, [pc, #260]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d108      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e074      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e06d      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dd4:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2207      	movs	r2, #7
 8006dda:	4393      	bics	r3, r2
 8006ddc:	0019      	movs	r1, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006de4:	430a      	orrs	r2, r1
 8006de6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de8:	f7fd fe38 	bl	8004a5c <HAL_GetTick>
 8006dec:	0003      	movs	r3, r0
 8006dee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df0:	e009      	b.n	8006e06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df2:	f7fd fe33 	bl	8004a5c <HAL_GetTick>
 8006df6:	0002      	movs	r2, r0
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <HAL_RCC_ClockConfig+0x1f4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e054      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e06:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2238      	movs	r2, #56	; 0x38
 8006e0c:	401a      	ands	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1ec      	bne.n	8006df2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e18:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2207      	movs	r2, #7
 8006e1e:	4013      	ands	r3, r2
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d21e      	bcs.n	8006e64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	4393      	bics	r3, r2
 8006e2e:	0019      	movs	r1, r3
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e38:	f7fd fe10 	bl	8004a5c <HAL_GetTick>
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e40:	e009      	b.n	8006e56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e42:	f7fd fe0b 	bl	8004a5c <HAL_GetTick>
 8006e46:	0002      	movs	r2, r0
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <HAL_RCC_ClockConfig+0x1f4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e02c      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e56:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1ee      	bne.n	8006e42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <HAL_RCC_ClockConfig+0x200>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	0019      	movs	r1, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006e82:	f000 f829 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 8006e86:	0001      	movs	r1, r0
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	0a1b      	lsrs	r3, r3, #8
 8006e8e:	220f      	movs	r2, #15
 8006e90:	401a      	ands	r2, r3
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <HAL_RCC_ClockConfig+0x204>)
 8006e94:	0092      	lsls	r2, r2, #2
 8006e96:	58d3      	ldr	r3, [r2, r3]
 8006e98:	221f      	movs	r2, #31
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	000a      	movs	r2, r1
 8006e9e:	40da      	lsrs	r2, r3
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <HAL_RCC_ClockConfig+0x208>)
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <HAL_RCC_ClockConfig+0x20c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7fd fd7b 	bl	80049a4 <HAL_InitTick>
 8006eae:	0003      	movs	r3, r0
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40022000 	.word	0x40022000
 8006ebc:	00001388 	.word	0x00001388
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	fffff0ff 	.word	0xfffff0ff
 8006ec8:	ffff8fff 	.word	0xffff8fff
 8006ecc:	08016964 	.word	0x08016964
 8006ed0:	20000000 	.word	0x20000000
 8006ed4:	20000004 	.word	0x20000004

08006ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ede:	4b3c      	ldr	r3, [pc, #240]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2238      	movs	r2, #56	; 0x38
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d10f      	bne.n	8006f08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006ee8:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	0adb      	lsrs	r3, r3, #11
 8006eee:	2207      	movs	r2, #7
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	0013      	movs	r3, r2
 8006ef8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	4835      	ldr	r0, [pc, #212]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006efe:	f7f9 f91f 	bl	8000140 <__udivsi3>
 8006f02:	0003      	movs	r3, r0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e05d      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f08:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	2238      	movs	r2, #56	; 0x38
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d102      	bne.n	8006f1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f14:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e054      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f1a:	4b2d      	ldr	r3, [pc, #180]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2238      	movs	r2, #56	; 0x38
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d138      	bne.n	8006f98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f26:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f30:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	2207      	movs	r2, #7
 8006f38:	4013      	ands	r3, r2
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d10d      	bne.n	8006f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	4823      	ldr	r0, [pc, #140]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f48:	f7f9 f8fa 	bl	8000140 <__udivsi3>
 8006f4c:	0003      	movs	r3, r0
 8006f4e:	0019      	movs	r1, r3
 8006f50:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	227f      	movs	r2, #127	; 0x7f
 8006f58:	4013      	ands	r3, r2
 8006f5a:	434b      	muls	r3, r1
 8006f5c:	617b      	str	r3, [r7, #20]
        break;
 8006f5e:	e00d      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	481c      	ldr	r0, [pc, #112]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f64:	f7f9 f8ec 	bl	8000140 <__udivsi3>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	0019      	movs	r1, r3
 8006f6c:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	0a1b      	lsrs	r3, r3, #8
 8006f72:	227f      	movs	r2, #127	; 0x7f
 8006f74:	4013      	ands	r3, r2
 8006f76:	434b      	muls	r3, r1
 8006f78:	617b      	str	r3, [r7, #20]
        break;
 8006f7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006f7c:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	0f5b      	lsrs	r3, r3, #29
 8006f82:	2207      	movs	r2, #7
 8006f84:	4013      	ands	r3, r2
 8006f86:	3301      	adds	r3, #1
 8006f88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	6978      	ldr	r0, [r7, #20]
 8006f8e:	f7f9 f8d7 	bl	8000140 <__udivsi3>
 8006f92:	0003      	movs	r3, r0
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e015      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2238      	movs	r2, #56	; 0x38
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d103      	bne.n	8006fac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	e00b      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2238      	movs	r2, #56	; 0x38
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b18      	cmp	r3, #24
 8006fb6:	d103      	bne.n	8006fc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006fb8:	23fa      	movs	r3, #250	; 0xfa
 8006fba:	01db      	lsls	r3, r3, #7
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006fc4:	693b      	ldr	r3, [r7, #16]
}
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b006      	add	sp, #24
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	00f42400 	.word	0x00f42400

08006fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fdc:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	20000000 	.word	0x20000000

08006fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006ff0:	f7ff fff2 	bl	8006fd8 <HAL_RCC_GetHCLKFreq>
 8006ff4:	0004      	movs	r4, r0
 8006ff6:	f7ff fb4b 	bl	8006690 <LL_RCC_GetAPB1Prescaler>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	0b1a      	lsrs	r2, r3, #12
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007000:	0092      	lsls	r2, r2, #2
 8007002:	58d3      	ldr	r3, [r2, r3]
 8007004:	221f      	movs	r2, #31
 8007006:	4013      	ands	r3, r2
 8007008:	40dc      	lsrs	r4, r3
 800700a:	0023      	movs	r3, r4
}
 800700c:	0018      	movs	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	bdb0      	pop	{r4, r5, r7, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	080169a4 	.word	0x080169a4

08007018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007020:	2313      	movs	r3, #19
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007028:	2312      	movs	r3, #18
 800702a:	18fb      	adds	r3, r7, r3
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	029b      	lsls	r3, r3, #10
 8007038:	4013      	ands	r3, r2
 800703a:	d100      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800703c:	e0a3      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800703e:	2011      	movs	r0, #17
 8007040:	183b      	adds	r3, r7, r0
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007046:	4b86      	ldr	r3, [pc, #536]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	055b      	lsls	r3, r3, #21
 800704e:	4013      	ands	r3, r2
 8007050:	d110      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007052:	4b83      	ldr	r3, [pc, #524]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007056:	4b82      	ldr	r3, [pc, #520]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	0549      	lsls	r1, r1, #21
 800705c:	430a      	orrs	r2, r1
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007060:	4b7f      	ldr	r3, [pc, #508]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	055b      	lsls	r3, r3, #21
 8007068:	4013      	ands	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800706e:	183b      	adds	r3, r7, r0
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007074:	4b7b      	ldr	r3, [pc, #492]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b7a      	ldr	r3, [pc, #488]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	0049      	lsls	r1, r1, #1
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007082:	f7fd fceb 	bl	8004a5c <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800708a:	e00b      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fd fce6 	bl	8004a5c <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d904      	bls.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800709a:	2313      	movs	r3, #19
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	2203      	movs	r2, #3
 80070a0:	701a      	strb	r2, [r3, #0]
        break;
 80070a2:	e005      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070a4:	4b6f      	ldr	r3, [pc, #444]	; (8007264 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4013      	ands	r3, r2
 80070ae:	d0ed      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80070b0:	2313      	movs	r3, #19
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d154      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070ba:	4b69      	ldr	r3, [pc, #420]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070be:	23c0      	movs	r3, #192	; 0xc0
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4013      	ands	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d019      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d014      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070d6:	4b62      	ldr	r3, [pc, #392]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	4a63      	ldr	r2, [pc, #396]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80070dc:	4013      	ands	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070e0:	4b5f      	ldr	r3, [pc, #380]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070e4:	4b5e      	ldr	r3, [pc, #376]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	0249      	lsls	r1, r1, #9
 80070ea:	430a      	orrs	r2, r1
 80070ec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070ee:	4b5c      	ldr	r3, [pc, #368]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070f2:	4b5b      	ldr	r3, [pc, #364]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070f4:	495d      	ldr	r1, [pc, #372]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070fa:	4b59      	ldr	r3, [pc, #356]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2201      	movs	r2, #1
 8007104:	4013      	ands	r3, r2
 8007106:	d016      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fd fca8 	bl	8004a5c <HAL_GetTick>
 800710c:	0003      	movs	r3, r0
 800710e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007110:	e00c      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007112:	f7fd fca3 	bl	8004a5c <HAL_GetTick>
 8007116:	0002      	movs	r2, r0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	4a54      	ldr	r2, [pc, #336]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d904      	bls.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007122:	2313      	movs	r3, #19
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	2203      	movs	r2, #3
 8007128:	701a      	strb	r2, [r3, #0]
            break;
 800712a:	e004      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800712c:	4b4c      	ldr	r3, [pc, #304]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800712e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007130:	2202      	movs	r2, #2
 8007132:	4013      	ands	r3, r2
 8007134:	d0ed      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007136:	2313      	movs	r3, #19
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007140:	4b47      	ldr	r3, [pc, #284]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007144:	4a48      	ldr	r2, [pc, #288]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007146:	4013      	ands	r3, r2
 8007148:	0019      	movs	r1, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	4b44      	ldr	r3, [pc, #272]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007150:	430a      	orrs	r2, r1
 8007152:	65da      	str	r2, [r3, #92]	; 0x5c
 8007154:	e00c      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007156:	2312      	movs	r3, #18
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	2213      	movs	r2, #19
 800715c:	18ba      	adds	r2, r7, r2
 800715e:	7812      	ldrb	r2, [r2, #0]
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e005      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	2312      	movs	r3, #18
 8007166:	18fb      	adds	r3, r7, r3
 8007168:	2213      	movs	r2, #19
 800716a:	18ba      	adds	r2, r7, r2
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007170:	2311      	movs	r3, #17
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d105      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800717c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717e:	4b38      	ldr	r3, [pc, #224]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007180:	493c      	ldr	r1, [pc, #240]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007182:	400a      	ands	r2, r1
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2201      	movs	r2, #1
 800718c:	4013      	ands	r3, r2
 800718e:	d009      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007190:	4b33      	ldr	r3, [pc, #204]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007194:	2203      	movs	r2, #3
 8007196:	4393      	bics	r3, r2
 8007198:	0019      	movs	r1, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	4b30      	ldr	r3, [pc, #192]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071a0:	430a      	orrs	r2, r1
 80071a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2202      	movs	r2, #2
 80071aa:	4013      	ands	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071ae:	4b2c      	ldr	r3, [pc, #176]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	220c      	movs	r2, #12
 80071b4:	4393      	bics	r3, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	4b28      	ldr	r3, [pc, #160]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071be:	430a      	orrs	r2, r1
 80071c0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2220      	movs	r2, #32
 80071c8:	4013      	ands	r3, r2
 80071ca:	d009      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071cc:	4b24      	ldr	r3, [pc, #144]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	4a29      	ldr	r2, [pc, #164]	; (8007278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	0019      	movs	r1, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	4b21      	ldr	r3, [pc, #132]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071dc:	430a      	orrs	r2, r1
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	4013      	ands	r3, r2
 80071ea:	d015      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ec:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	0899      	lsrs	r1, r3, #2
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695a      	ldr	r2, [r3, #20]
 80071f8:	4b19      	ldr	r3, [pc, #100]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80071fa:	430a      	orrs	r2, r1
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	429a      	cmp	r2, r3
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007210:	2180      	movs	r1, #128	; 0x80
 8007212:	0249      	lsls	r1, r1, #9
 8007214:	430a      	orrs	r2, r1
 8007216:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	4013      	ands	r3, r2
 8007222:	d016      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007228:	4a14      	ldr	r2, [pc, #80]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800722a:	4013      	ands	r3, r2
 800722c:	0019      	movs	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007234:	430a      	orrs	r2, r1
 8007236:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	01db      	lsls	r3, r3, #7
 8007240:	429a      	cmp	r2, r3
 8007242:	d106      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	0249      	lsls	r1, r1, #9
 800724e:	430a      	orrs	r2, r1
 8007250:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007252:	2312      	movs	r3, #18
 8007254:	18fb      	adds	r3, r7, r3
 8007256:	781b      	ldrb	r3, [r3, #0]
}
 8007258:	0018      	movs	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	b006      	add	sp, #24
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40021000 	.word	0x40021000
 8007264:	40007000 	.word	0x40007000
 8007268:	fffffcff 	.word	0xfffffcff
 800726c:	fffeffff 	.word	0xfffeffff
 8007270:	00001388 	.word	0x00001388
 8007274:	efffffff 	.word	0xefffffff
 8007278:	ffffcfff 	.word	0xffffcfff
 800727c:	ffff3fff 	.word	0xffff3fff

08007280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e04a      	b.n	8007328 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	223d      	movs	r2, #61	; 0x3d
 8007296:	5c9b      	ldrb	r3, [r3, r2]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d107      	bne.n	80072ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	223c      	movs	r2, #60	; 0x3c
 80072a2:	2100      	movs	r1, #0
 80072a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	0018      	movs	r0, r3
 80072aa:	f7fd f903 	bl	80044b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	223d      	movs	r2, #61	; 0x3d
 80072b2:	2102      	movs	r1, #2
 80072b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	0019      	movs	r1, r3
 80072c0:	0010      	movs	r0, r2
 80072c2:	f000 fd55 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2248      	movs	r2, #72	; 0x48
 80072ca:	2101      	movs	r1, #1
 80072cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	223e      	movs	r2, #62	; 0x3e
 80072d2:	2101      	movs	r1, #1
 80072d4:	5499      	strb	r1, [r3, r2]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	223f      	movs	r2, #63	; 0x3f
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2240      	movs	r2, #64	; 0x40
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2241      	movs	r2, #65	; 0x41
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2242      	movs	r2, #66	; 0x42
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2243      	movs	r2, #67	; 0x43
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2244      	movs	r2, #68	; 0x44
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2245      	movs	r2, #69	; 0x45
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2246      	movs	r2, #70	; 0x46
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2247      	movs	r2, #71	; 0x47
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	223d      	movs	r2, #61	; 0x3d
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	b002      	add	sp, #8
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e04a      	b.n	80073d8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	223d      	movs	r2, #61	; 0x3d
 8007346:	5c9b      	ldrb	r3, [r3, r2]
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	223c      	movs	r2, #60	; 0x3c
 8007352:	2100      	movs	r1, #0
 8007354:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f841 	bl	80073e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	223d      	movs	r2, #61	; 0x3d
 8007362:	2102      	movs	r1, #2
 8007364:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3304      	adds	r3, #4
 800736e:	0019      	movs	r1, r3
 8007370:	0010      	movs	r0, r2
 8007372:	f000 fcfd 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2248      	movs	r2, #72	; 0x48
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	223e      	movs	r2, #62	; 0x3e
 8007382:	2101      	movs	r1, #1
 8007384:	5499      	strb	r1, [r3, r2]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	223f      	movs	r2, #63	; 0x3f
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2241      	movs	r2, #65	; 0x41
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2242      	movs	r2, #66	; 0x42
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2243      	movs	r2, #67	; 0x43
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2244      	movs	r2, #68	; 0x44
 80073b2:	2101      	movs	r1, #1
 80073b4:	5499      	strb	r1, [r3, r2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2245      	movs	r2, #69	; 0x45
 80073ba:	2101      	movs	r1, #1
 80073bc:	5499      	strb	r1, [r3, r2]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2246      	movs	r2, #70	; 0x46
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2247      	movs	r2, #71	; 0x47
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	223d      	movs	r2, #61	; 0x3d
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b002      	add	sp, #8
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <HAL_TIM_PWM_Start+0x22>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	223e      	movs	r2, #62	; 0x3e
 8007404:	5c9b      	ldrb	r3, [r3, r2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	1e5a      	subs	r2, r3, #1
 800740c:	4193      	sbcs	r3, r2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e037      	b.n	8007482 <HAL_TIM_PWM_Start+0x92>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b04      	cmp	r3, #4
 8007416:	d108      	bne.n	800742a <HAL_TIM_PWM_Start+0x3a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	223f      	movs	r2, #63	; 0x3f
 800741c:	5c9b      	ldrb	r3, [r3, r2]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	4193      	sbcs	r3, r2
 8007426:	b2db      	uxtb	r3, r3
 8007428:	e02b      	b.n	8007482 <HAL_TIM_PWM_Start+0x92>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d108      	bne.n	8007442 <HAL_TIM_PWM_Start+0x52>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2240      	movs	r2, #64	; 0x40
 8007434:	5c9b      	ldrb	r3, [r3, r2]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	4193      	sbcs	r3, r2
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e01f      	b.n	8007482 <HAL_TIM_PWM_Start+0x92>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d108      	bne.n	800745a <HAL_TIM_PWM_Start+0x6a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2241      	movs	r2, #65	; 0x41
 800744c:	5c9b      	ldrb	r3, [r3, r2]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	1e5a      	subs	r2, r3, #1
 8007454:	4193      	sbcs	r3, r2
 8007456:	b2db      	uxtb	r3, r3
 8007458:	e013      	b.n	8007482 <HAL_TIM_PWM_Start+0x92>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b10      	cmp	r3, #16
 800745e:	d108      	bne.n	8007472 <HAL_TIM_PWM_Start+0x82>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2242      	movs	r2, #66	; 0x42
 8007464:	5c9b      	ldrb	r3, [r3, r2]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	4193      	sbcs	r3, r2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	e007      	b.n	8007482 <HAL_TIM_PWM_Start+0x92>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2243      	movs	r2, #67	; 0x43
 8007476:	5c9b      	ldrb	r3, [r3, r2]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	4193      	sbcs	r3, r2
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e085      	b.n	8007596 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d104      	bne.n	800749a <HAL_TIM_PWM_Start+0xaa>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	223e      	movs	r2, #62	; 0x3e
 8007494:	2102      	movs	r1, #2
 8007496:	5499      	strb	r1, [r3, r2]
 8007498:	e023      	b.n	80074e2 <HAL_TIM_PWM_Start+0xf2>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d104      	bne.n	80074aa <HAL_TIM_PWM_Start+0xba>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	223f      	movs	r2, #63	; 0x3f
 80074a4:	2102      	movs	r1, #2
 80074a6:	5499      	strb	r1, [r3, r2]
 80074a8:	e01b      	b.n	80074e2 <HAL_TIM_PWM_Start+0xf2>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_PWM_Start+0xca>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2240      	movs	r2, #64	; 0x40
 80074b4:	2102      	movs	r1, #2
 80074b6:	5499      	strb	r1, [r3, r2]
 80074b8:	e013      	b.n	80074e2 <HAL_TIM_PWM_Start+0xf2>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b0c      	cmp	r3, #12
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Start+0xda>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2241      	movs	r2, #65	; 0x41
 80074c4:	2102      	movs	r1, #2
 80074c6:	5499      	strb	r1, [r3, r2]
 80074c8:	e00b      	b.n	80074e2 <HAL_TIM_PWM_Start+0xf2>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Start+0xea>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2242      	movs	r2, #66	; 0x42
 80074d4:	2102      	movs	r1, #2
 80074d6:	5499      	strb	r1, [r3, r2]
 80074d8:	e003      	b.n	80074e2 <HAL_TIM_PWM_Start+0xf2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2243      	movs	r2, #67	; 0x43
 80074de:	2102      	movs	r1, #2
 80074e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	2201      	movs	r2, #1
 80074ea:	0018      	movs	r0, r3
 80074ec:	f001 f89a 	bl	8008624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a2a      	ldr	r2, [pc, #168]	; (80075a0 <HAL_TIM_PWM_Start+0x1b0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00e      	beq.n	8007518 <HAL_TIM_PWM_Start+0x128>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a29      	ldr	r2, [pc, #164]	; (80075a4 <HAL_TIM_PWM_Start+0x1b4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_TIM_PWM_Start+0x128>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <HAL_TIM_PWM_Start+0x1b8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_TIM_PWM_Start+0x128>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a26      	ldr	r2, [pc, #152]	; (80075ac <HAL_TIM_PWM_Start+0x1bc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d101      	bne.n	800751c <HAL_TIM_PWM_Start+0x12c>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <HAL_TIM_PWM_Start+0x12e>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	0209      	lsls	r1, r1, #8
 8007530:	430a      	orrs	r2, r1
 8007532:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a19      	ldr	r2, [pc, #100]	; (80075a0 <HAL_TIM_PWM_Start+0x1b0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_TIM_PWM_Start+0x162>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <HAL_TIM_PWM_Start+0x1c0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d004      	beq.n	8007552 <HAL_TIM_PWM_Start+0x162>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_TIM_PWM_Start+0x1b4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d116      	bne.n	8007580 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4a16      	ldr	r2, [pc, #88]	; (80075b4 <HAL_TIM_PWM_Start+0x1c4>)
 800755a:	4013      	ands	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b06      	cmp	r3, #6
 8007562:	d016      	beq.n	8007592 <HAL_TIM_PWM_Start+0x1a2>
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	2380      	movs	r3, #128	; 0x80
 8007568:	025b      	lsls	r3, r3, #9
 800756a:	429a      	cmp	r2, r3
 800756c:	d011      	beq.n	8007592 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2101      	movs	r1, #1
 800757a:	430a      	orrs	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757e:	e008      	b.n	8007592 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2101      	movs	r1, #1
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e000      	b.n	8007594 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	0018      	movs	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	b004      	add	sp, #16
 800759c:	bd80      	pop	{r7, pc}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800
 80075b0:	40000400 	.word	0x40000400
 80075b4:	00010007 	.word	0x00010007

080075b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	2200      	movs	r2, #0
 80075ca:	0018      	movs	r0, r3
 80075cc:	f001 f82a 	bl	8008624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a37      	ldr	r2, [pc, #220]	; (80076b4 <HAL_TIM_PWM_Stop+0xfc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <HAL_TIM_PWM_Stop+0x40>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a36      	ldr	r2, [pc, #216]	; (80076b8 <HAL_TIM_PWM_Stop+0x100>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_TIM_PWM_Stop+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a34      	ldr	r2, [pc, #208]	; (80076bc <HAL_TIM_PWM_Stop+0x104>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_TIM_PWM_Stop+0x40>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a33      	ldr	r2, [pc, #204]	; (80076c0 <HAL_TIM_PWM_Stop+0x108>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d101      	bne.n	80075fc <HAL_TIM_PWM_Stop+0x44>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_TIM_PWM_Stop+0x46>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d013      	beq.n	800762a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	4a2e      	ldr	r2, [pc, #184]	; (80076c4 <HAL_TIM_PWM_Stop+0x10c>)
 800760a:	4013      	ands	r3, r2
 800760c:	d10d      	bne.n	800762a <HAL_TIM_PWM_Stop+0x72>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <HAL_TIM_PWM_Stop+0x110>)
 8007616:	4013      	ands	r3, r2
 8007618:	d107      	bne.n	800762a <HAL_TIM_PWM_Stop+0x72>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4929      	ldr	r1, [pc, #164]	; (80076cc <HAL_TIM_PWM_Stop+0x114>)
 8007626:	400a      	ands	r2, r1
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	4a24      	ldr	r2, [pc, #144]	; (80076c4 <HAL_TIM_PWM_Stop+0x10c>)
 8007632:	4013      	ands	r3, r2
 8007634:	d10d      	bne.n	8007652 <HAL_TIM_PWM_Stop+0x9a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	4a22      	ldr	r2, [pc, #136]	; (80076c8 <HAL_TIM_PWM_Stop+0x110>)
 800763e:	4013      	ands	r3, r2
 8007640:	d107      	bne.n	8007652 <HAL_TIM_PWM_Stop+0x9a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2101      	movs	r1, #1
 800764e:	438a      	bics	r2, r1
 8007650:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <HAL_TIM_PWM_Stop+0xaa>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	223e      	movs	r2, #62	; 0x3e
 800765c:	2101      	movs	r1, #1
 800765e:	5499      	strb	r1, [r3, r2]
 8007660:	e023      	b.n	80076aa <HAL_TIM_PWM_Stop+0xf2>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b04      	cmp	r3, #4
 8007666:	d104      	bne.n	8007672 <HAL_TIM_PWM_Stop+0xba>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	223f      	movs	r2, #63	; 0x3f
 800766c:	2101      	movs	r1, #1
 800766e:	5499      	strb	r1, [r3, r2]
 8007670:	e01b      	b.n	80076aa <HAL_TIM_PWM_Stop+0xf2>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d104      	bne.n	8007682 <HAL_TIM_PWM_Stop+0xca>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2240      	movs	r2, #64	; 0x40
 800767c:	2101      	movs	r1, #1
 800767e:	5499      	strb	r1, [r3, r2]
 8007680:	e013      	b.n	80076aa <HAL_TIM_PWM_Stop+0xf2>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b0c      	cmp	r3, #12
 8007686:	d104      	bne.n	8007692 <HAL_TIM_PWM_Stop+0xda>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2241      	movs	r2, #65	; 0x41
 800768c:	2101      	movs	r1, #1
 800768e:	5499      	strb	r1, [r3, r2]
 8007690:	e00b      	b.n	80076aa <HAL_TIM_PWM_Stop+0xf2>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b10      	cmp	r3, #16
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_PWM_Stop+0xea>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2242      	movs	r2, #66	; 0x42
 800769c:	2101      	movs	r1, #1
 800769e:	5499      	strb	r1, [r3, r2]
 80076a0:	e003      	b.n	80076aa <HAL_TIM_PWM_Stop+0xf2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2243      	movs	r2, #67	; 0x43
 80076a6:	2101      	movs	r1, #1
 80076a8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	00001111 	.word	0x00001111
 80076c8:	00000444 	.word	0x00000444
 80076cc:	ffff7fff 	.word	0xffff7fff

080076d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e04a      	b.n	8007778 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	223d      	movs	r2, #61	; 0x3d
 80076e6:	5c9b      	ldrb	r3, [r3, r2]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	223c      	movs	r2, #60	; 0x3c
 80076f2:	2100      	movs	r1, #0
 80076f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 f841 	bl	8007780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	223d      	movs	r2, #61	; 0x3d
 8007702:	2102      	movs	r1, #2
 8007704:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	0019      	movs	r1, r3
 8007710:	0010      	movs	r0, r2
 8007712:	f000 fb2d 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2248      	movs	r2, #72	; 0x48
 800771a:	2101      	movs	r1, #1
 800771c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	223e      	movs	r2, #62	; 0x3e
 8007722:	2101      	movs	r1, #1
 8007724:	5499      	strb	r1, [r3, r2]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	223f      	movs	r2, #63	; 0x3f
 800772a:	2101      	movs	r1, #1
 800772c:	5499      	strb	r1, [r3, r2]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2240      	movs	r2, #64	; 0x40
 8007732:	2101      	movs	r1, #1
 8007734:	5499      	strb	r1, [r3, r2]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2241      	movs	r2, #65	; 0x41
 800773a:	2101      	movs	r1, #1
 800773c:	5499      	strb	r1, [r3, r2]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2242      	movs	r2, #66	; 0x42
 8007742:	2101      	movs	r1, #1
 8007744:	5499      	strb	r1, [r3, r2]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2243      	movs	r2, #67	; 0x43
 800774a:	2101      	movs	r1, #1
 800774c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2244      	movs	r2, #68	; 0x44
 8007752:	2101      	movs	r1, #1
 8007754:	5499      	strb	r1, [r3, r2]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2245      	movs	r2, #69	; 0x45
 800775a:	2101      	movs	r1, #1
 800775c:	5499      	strb	r1, [r3, r2]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2246      	movs	r2, #70	; 0x46
 8007762:	2101      	movs	r1, #1
 8007764:	5499      	strb	r1, [r3, r2]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2247      	movs	r2, #71	; 0x47
 800776a:	2101      	movs	r1, #1
 800776c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	223d      	movs	r2, #61	; 0x3d
 8007772:	2101      	movs	r1, #1
 8007774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	0018      	movs	r0, r3
 800777a:	46bd      	mov	sp, r7
 800777c:	b002      	add	sp, #8
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e090      	b.n	80078c6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	223d      	movs	r2, #61	; 0x3d
 80077a8:	5c9b      	ldrb	r3, [r3, r2]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	223c      	movs	r2, #60	; 0x3c
 80077b4:	2100      	movs	r1, #0
 80077b6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7fc fdd4 	bl	8004368 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	223d      	movs	r2, #61	; 0x3d
 80077c4:	2102      	movs	r1, #2
 80077c6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	493f      	ldr	r1, [pc, #252]	; (80078d0 <HAL_TIM_Encoder_Init+0x140>)
 80077d4:	400a      	ands	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	0019      	movs	r1, r3
 80077e2:	0010      	movs	r0, r2
 80077e4:	f000 fac4 	bl	8007d70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4a31      	ldr	r2, [pc, #196]	; (80078d4 <HAL_TIM_Encoder_Init+0x144>)
 800780e:	4013      	ands	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	4313      	orrs	r3, r2
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <HAL_TIM_Encoder_Init+0x148>)
 8007828:	4013      	ands	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <HAL_TIM_Encoder_Init+0x14c>)
 8007830:	4013      	ands	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	4313      	orrs	r3, r2
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	011a      	lsls	r2, r3, #4
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	4313      	orrs	r3, r2
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2222      	movs	r2, #34	; 0x22
 800785e:	4393      	bics	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2288      	movs	r2, #136	; 0x88
 8007866:	4393      	bics	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4313      	orrs	r3, r2
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2248      	movs	r2, #72	; 0x48
 8007898:	2101      	movs	r1, #1
 800789a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	223e      	movs	r2, #62	; 0x3e
 80078a0:	2101      	movs	r1, #1
 80078a2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	223f      	movs	r2, #63	; 0x3f
 80078a8:	2101      	movs	r1, #1
 80078aa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2244      	movs	r2, #68	; 0x44
 80078b0:	2101      	movs	r1, #1
 80078b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2245      	movs	r2, #69	; 0x45
 80078b8:	2101      	movs	r1, #1
 80078ba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	223d      	movs	r2, #61	; 0x3d
 80078c0:	2101      	movs	r1, #1
 80078c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	0018      	movs	r0, r3
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b006      	add	sp, #24
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	fffebff8 	.word	0xfffebff8
 80078d4:	fffffcfc 	.word	0xfffffcfc
 80078d8:	fffff3f3 	.word	0xfffff3f3
 80078dc:	ffff0f0f 	.word	0xffff0f0f

080078e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80078ea:	200f      	movs	r0, #15
 80078ec:	183b      	adds	r3, r7, r0
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	213e      	movs	r1, #62	; 0x3e
 80078f2:	5c52      	ldrb	r2, [r2, r1]
 80078f4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80078f6:	230e      	movs	r3, #14
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	213f      	movs	r1, #63	; 0x3f
 80078fe:	5c52      	ldrb	r2, [r2, r1]
 8007900:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007902:	240d      	movs	r4, #13
 8007904:	193b      	adds	r3, r7, r4
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	2144      	movs	r1, #68	; 0x44
 800790a:	5c52      	ldrb	r2, [r2, r1]
 800790c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800790e:	230c      	movs	r3, #12
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	2145      	movs	r1, #69	; 0x45
 8007916:	5c52      	ldrb	r2, [r2, r1]
 8007918:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d112      	bne.n	8007946 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007920:	183b      	adds	r3, r7, r0
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d103      	bne.n	8007930 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007928:	193b      	adds	r3, r7, r4
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d001      	beq.n	8007934 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e075      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	223e      	movs	r2, #62	; 0x3e
 8007938:	2102      	movs	r1, #2
 800793a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2244      	movs	r2, #68	; 0x44
 8007940:	2102      	movs	r1, #2
 8007942:	5499      	strb	r1, [r3, r2]
 8007944:	e03d      	b.n	80079c2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b04      	cmp	r3, #4
 800794a:	d114      	bne.n	8007976 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800794c:	230e      	movs	r3, #14
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d104      	bne.n	8007960 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007956:	230c      	movs	r3, #12
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d001      	beq.n	8007964 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e05d      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	223f      	movs	r2, #63	; 0x3f
 8007968:	2102      	movs	r1, #2
 800796a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2245      	movs	r2, #69	; 0x45
 8007970:	2102      	movs	r1, #2
 8007972:	5499      	strb	r1, [r3, r2]
 8007974:	e025      	b.n	80079c2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	230f      	movs	r3, #15
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10e      	bne.n	800799e <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007980:	230e      	movs	r3, #14
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d109      	bne.n	800799e <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800798a:	230d      	movs	r3, #13
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d104      	bne.n	800799e <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007994:	230c      	movs	r3, #12
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e03e      	b.n	8007a20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	223e      	movs	r2, #62	; 0x3e
 80079a6:	2102      	movs	r1, #2
 80079a8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	223f      	movs	r2, #63	; 0x3f
 80079ae:	2102      	movs	r1, #2
 80079b0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2244      	movs	r2, #68	; 0x44
 80079b6:	2102      	movs	r1, #2
 80079b8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2245      	movs	r2, #69	; 0x45
 80079be:	2102      	movs	r1, #2
 80079c0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d003      	beq.n	80079d0 <HAL_TIM_Encoder_Start+0xf0>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d008      	beq.n	80079e0 <HAL_TIM_Encoder_Start+0x100>
 80079ce:	e00f      	b.n	80079f0 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2201      	movs	r2, #1
 80079d6:	2100      	movs	r1, #0
 80079d8:	0018      	movs	r0, r3
 80079da:	f000 fe23 	bl	8008624 <TIM_CCxChannelCmd>
      break;
 80079de:	e016      	b.n	8007a0e <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	2104      	movs	r1, #4
 80079e8:	0018      	movs	r0, r3
 80079ea:	f000 fe1b 	bl	8008624 <TIM_CCxChannelCmd>
      break;
 80079ee:	e00e      	b.n	8007a0e <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	2100      	movs	r1, #0
 80079f8:	0018      	movs	r0, r3
 80079fa:	f000 fe13 	bl	8008624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2201      	movs	r2, #1
 8007a04:	2104      	movs	r1, #4
 8007a06:	0018      	movs	r0, r3
 8007a08:	f000 fe0c 	bl	8008624 <TIM_CCxChannelCmd>
      break;
 8007a0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2101      	movs	r1, #1
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b005      	add	sp, #20
 8007a26:	bd90      	pop	{r4, r7, pc}

08007a28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a34:	2317      	movs	r3, #23
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	223c      	movs	r2, #60	; 0x3c
 8007a40:	5c9b      	ldrb	r3, [r3, r2]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_TIM_IC_ConfigChannel+0x22>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e08c      	b.n	8007b64 <HAL_TIM_IC_ConfigChannel+0x13c>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	223c      	movs	r2, #60	; 0x3c
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f000 fcbc 	bl	80083e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	210c      	movs	r1, #12
 8007a78:	438a      	bics	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6999      	ldr	r1, [r3, #24]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	619a      	str	r2, [r3, #24]
 8007a8e:	e062      	b.n	8007b56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d11c      	bne.n	8007ad0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6819      	ldr	r1, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f000 fcf5 	bl	8008494 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	492d      	ldr	r1, [pc, #180]	; (8007b6c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6999      	ldr	r1, [r3, #24]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	021a      	lsls	r2, r3, #8
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	619a      	str	r2, [r3, #24]
 8007ace:	e042      	b.n	8007b56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d11b      	bne.n	8007b0e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6819      	ldr	r1, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f000 fd17 	bl	8008518 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	210c      	movs	r1, #12
 8007af6:	438a      	bics	r2, r1
 8007af8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69d9      	ldr	r1, [r3, #28]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	61da      	str	r2, [r3, #28]
 8007b0c:	e023      	b.n	8007b56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b0c      	cmp	r3, #12
 8007b12:	d11c      	bne.n	8007b4e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6819      	ldr	r1, [r3, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f000 fd38 	bl	8008598 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	490e      	ldr	r1, [pc, #56]	; (8007b6c <HAL_TIM_IC_ConfigChannel+0x144>)
 8007b34:	400a      	ands	r2, r1
 8007b36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69d9      	ldr	r1, [r3, #28]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	021a      	lsls	r2, r3, #8
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	61da      	str	r2, [r3, #28]
 8007b4c:	e003      	b.n	8007b56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8007b4e:	2317      	movs	r3, #23
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	2201      	movs	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	223c      	movs	r2, #60	; 0x3c
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]

  return status;
 8007b5e:	2317      	movs	r3, #23
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	781b      	ldrb	r3, [r3, #0]
}
 8007b64:	0018      	movs	r0, r3
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b006      	add	sp, #24
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	fffff3ff 	.word	0xfffff3ff

08007b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7c:	2317      	movs	r3, #23
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	223c      	movs	r2, #60	; 0x3c
 8007b88:	5c9b      	ldrb	r3, [r3, r2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e0e5      	b.n	8007d5e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	223c      	movs	r2, #60	; 0x3c
 8007b96:	2101      	movs	r1, #1
 8007b98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b14      	cmp	r3, #20
 8007b9e:	d900      	bls.n	8007ba2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007ba0:	e0d1      	b.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	009a      	lsls	r2, r3, #2
 8007ba6:	4b70      	ldr	r3, [pc, #448]	; (8007d68 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007ba8:	18d3      	adds	r3, r2, r3
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	0011      	movs	r1, r2
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f000 f950 	bl	8007e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2108      	movs	r1, #8
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2104      	movs	r1, #4
 8007bd8:	438a      	bics	r2, r1
 8007bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6999      	ldr	r1, [r3, #24]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	619a      	str	r2, [r3, #24]
      break;
 8007bee:	e0af      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	0011      	movs	r1, r2
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f000 f9b9 	bl	8007f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2180      	movs	r1, #128	; 0x80
 8007c0a:	0109      	lsls	r1, r1, #4
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4954      	ldr	r1, [pc, #336]	; (8007d6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007c1c:	400a      	ands	r2, r1
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	619a      	str	r2, [r3, #24]
      break;
 8007c34:	e08c      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	0011      	movs	r1, r2
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 fa1a 	bl	8008078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2108      	movs	r1, #8
 8007c50:	430a      	orrs	r2, r1
 8007c52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2104      	movs	r1, #4
 8007c60:	438a      	bics	r2, r1
 8007c62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69d9      	ldr	r1, [r3, #28]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	61da      	str	r2, [r3, #28]
      break;
 8007c76:	e06b      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	0011      	movs	r1, r2
 8007c80:	0018      	movs	r0, r3
 8007c82:	f000 fa81 	bl	8008188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2180      	movs	r1, #128	; 0x80
 8007c92:	0109      	lsls	r1, r1, #4
 8007c94:	430a      	orrs	r2, r1
 8007c96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4932      	ldr	r1, [pc, #200]	; (8007d6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007ca4:	400a      	ands	r2, r1
 8007ca6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69d9      	ldr	r1, [r3, #28]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	021a      	lsls	r2, r3, #8
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	61da      	str	r2, [r3, #28]
      break;
 8007cbc:	e048      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	0011      	movs	r1, r2
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	f000 fac8 	bl	800825c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2108      	movs	r1, #8
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2104      	movs	r1, #4
 8007ce8:	438a      	bics	r2, r1
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cfe:	e027      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	0011      	movs	r1, r2
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 fb07 	bl	800831c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	0109      	lsls	r1, r1, #4
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4910      	ldr	r1, [pc, #64]	; (8007d6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	021a      	lsls	r2, r3, #8
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d44:	e004      	b.n	8007d50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007d46:	2317      	movs	r3, #23
 8007d48:	18fb      	adds	r3, r7, r3
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
      break;
 8007d4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	223c      	movs	r2, #60	; 0x3c
 8007d54:	2100      	movs	r1, #0
 8007d56:	5499      	strb	r1, [r3, r2]

  return status;
 8007d58:	2317      	movs	r3, #23
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
}
 8007d5e:	0018      	movs	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b006      	add	sp, #24
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	080169c4 	.word	0x080169c4
 8007d6c:	fffffbff 	.word	0xfffffbff

08007d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a2f      	ldr	r2, [pc, #188]	; (8007e40 <TIM_Base_SetConfig+0xd0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0x20>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a2e      	ldr	r2, [pc, #184]	; (8007e44 <TIM_Base_SetConfig+0xd4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d108      	bne.n	8007da2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2270      	movs	r2, #112	; 0x70
 8007d94:	4393      	bics	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a26      	ldr	r2, [pc, #152]	; (8007e40 <TIM_Base_SetConfig+0xd0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <TIM_Base_SetConfig+0x62>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <TIM_Base_SetConfig+0xd4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00f      	beq.n	8007dd2 <TIM_Base_SetConfig+0x62>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a24      	ldr	r2, [pc, #144]	; (8007e48 <TIM_Base_SetConfig+0xd8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00b      	beq.n	8007dd2 <TIM_Base_SetConfig+0x62>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <TIM_Base_SetConfig+0xdc>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <TIM_Base_SetConfig+0x62>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <TIM_Base_SetConfig+0xe0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_Base_SetConfig+0x62>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <TIM_Base_SetConfig+0xe4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d108      	bne.n	8007de4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <TIM_Base_SetConfig+0xe8>)
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2280      	movs	r2, #128	; 0x80
 8007de8:	4393      	bics	r3, r2
 8007dea:	001a      	movs	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a0c      	ldr	r2, [pc, #48]	; (8007e40 <TIM_Base_SetConfig+0xd0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0xba>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <TIM_Base_SetConfig+0xdc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0xba>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <TIM_Base_SetConfig+0xe0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0xba>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a0b      	ldr	r2, [pc, #44]	; (8007e54 <TIM_Base_SetConfig+0xe4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d103      	bne.n	8007e32 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	615a      	str	r2, [r3, #20]
}
 8007e38:	46c0      	nop			; (mov r8, r8)
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	b004      	add	sp, #16
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40002000 	.word	0x40002000
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400
 8007e54:	40014800 	.word	0x40014800
 8007e58:	fffffcff 	.word	0xfffffcff

08007e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4393      	bics	r3, r2
 8007e6e:	001a      	movs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a32      	ldr	r2, [pc, #200]	; (8007f54 <TIM_OC1_SetConfig+0xf8>)
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2203      	movs	r2, #3
 8007e92:	4393      	bics	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	4393      	bics	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <TIM_OC1_SetConfig+0xfc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00b      	beq.n	8007ed2 <TIM_OC1_SetConfig+0x76>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <TIM_OC1_SetConfig+0x100>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <TIM_OC1_SetConfig+0x76>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <TIM_OC1_SetConfig+0x104>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <TIM_OC1_SetConfig+0x76>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <TIM_OC1_SetConfig+0x108>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d10c      	bne.n	8007eec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	4393      	bics	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	4393      	bics	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a1a      	ldr	r2, [pc, #104]	; (8007f58 <TIM_OC1_SetConfig+0xfc>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00b      	beq.n	8007f0c <TIM_OC1_SetConfig+0xb0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a19      	ldr	r2, [pc, #100]	; (8007f5c <TIM_OC1_SetConfig+0x100>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d007      	beq.n	8007f0c <TIM_OC1_SetConfig+0xb0>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a18      	ldr	r2, [pc, #96]	; (8007f60 <TIM_OC1_SetConfig+0x104>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_OC1_SetConfig+0xb0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a17      	ldr	r2, [pc, #92]	; (8007f64 <TIM_OC1_SetConfig+0x108>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d111      	bne.n	8007f30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4a16      	ldr	r2, [pc, #88]	; (8007f68 <TIM_OC1_SetConfig+0x10c>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	4a15      	ldr	r2, [pc, #84]	; (8007f6c <TIM_OC1_SetConfig+0x110>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	621a      	str	r2, [r3, #32]
}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b006      	add	sp, #24
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	fffeff8f 	.word	0xfffeff8f
 8007f58:	40012c00 	.word	0x40012c00
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800
 8007f68:	fffffeff 	.word	0xfffffeff
 8007f6c:	fffffdff 	.word	0xfffffdff

08007f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	4393      	bics	r3, r2
 8007f82:	001a      	movs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4a2e      	ldr	r2, [pc, #184]	; (8008058 <TIM_OC2_SetConfig+0xe8>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a2d      	ldr	r2, [pc, #180]	; (800805c <TIM_OC2_SetConfig+0xec>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	4393      	bics	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <TIM_OC2_SetConfig+0xf0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d10d      	bne.n	8007fee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2280      	movs	r2, #128	; 0x80
 8007fd6:	4393      	bics	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	4393      	bics	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <TIM_OC2_SetConfig+0xf0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00b      	beq.n	800800e <TIM_OC2_SetConfig+0x9e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <TIM_OC2_SetConfig+0xf4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d007      	beq.n	800800e <TIM_OC2_SetConfig+0x9e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a19      	ldr	r2, [pc, #100]	; (8008068 <TIM_OC2_SetConfig+0xf8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <TIM_OC2_SetConfig+0x9e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <TIM_OC2_SetConfig+0xfc>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d113      	bne.n	8008036 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <TIM_OC2_SetConfig+0x100>)
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4a16      	ldr	r2, [pc, #88]	; (8008074 <TIM_OC2_SetConfig+0x104>)
 800801a:	4013      	ands	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	4313      	orrs	r3, r2
 8008028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	621a      	str	r2, [r3, #32]
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b006      	add	sp, #24
 8008056:	bd80      	pop	{r7, pc}
 8008058:	feff8fff 	.word	0xfeff8fff
 800805c:	fffffcff 	.word	0xfffffcff
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40014000 	.word	0x40014000
 8008068:	40014400 	.word	0x40014400
 800806c:	40014800 	.word	0x40014800
 8008070:	fffffbff 	.word	0xfffffbff
 8008074:	fffff7ff 	.word	0xfffff7ff

08008078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	4a35      	ldr	r2, [pc, #212]	; (800815c <TIM_OC3_SetConfig+0xe4>)
 8008088:	401a      	ands	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a2f      	ldr	r2, [pc, #188]	; (8008160 <TIM_OC3_SetConfig+0xe8>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2203      	movs	r2, #3
 80080ac:	4393      	bics	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	4a29      	ldr	r2, [pc, #164]	; (8008164 <TIM_OC3_SetConfig+0xec>)
 80080be:	4013      	ands	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a25      	ldr	r2, [pc, #148]	; (8008168 <TIM_OC3_SetConfig+0xf0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10d      	bne.n	80080f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	4a24      	ldr	r2, [pc, #144]	; (800816c <TIM_OC3_SetConfig+0xf4>)
 80080da:	4013      	ands	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4a20      	ldr	r2, [pc, #128]	; (8008170 <TIM_OC3_SetConfig+0xf8>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <TIM_OC3_SetConfig+0xf0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00b      	beq.n	8008112 <TIM_OC3_SetConfig+0x9a>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <TIM_OC3_SetConfig+0xfc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d007      	beq.n	8008112 <TIM_OC3_SetConfig+0x9a>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <TIM_OC3_SetConfig+0x100>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d003      	beq.n	8008112 <TIM_OC3_SetConfig+0x9a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a1b      	ldr	r2, [pc, #108]	; (800817c <TIM_OC3_SetConfig+0x104>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d113      	bne.n	800813a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	4a1a      	ldr	r2, [pc, #104]	; (8008180 <TIM_OC3_SetConfig+0x108>)
 8008116:	4013      	ands	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4a19      	ldr	r2, [pc, #100]	; (8008184 <TIM_OC3_SetConfig+0x10c>)
 800811e:	4013      	ands	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b006      	add	sp, #24
 800815a:	bd80      	pop	{r7, pc}
 800815c:	fffffeff 	.word	0xfffffeff
 8008160:	fffeff8f 	.word	0xfffeff8f
 8008164:	fffffdff 	.word	0xfffffdff
 8008168:	40012c00 	.word	0x40012c00
 800816c:	fffff7ff 	.word	0xfffff7ff
 8008170:	fffffbff 	.word	0xfffffbff
 8008174:	40014000 	.word	0x40014000
 8008178:	40014400 	.word	0x40014400
 800817c:	40014800 	.word	0x40014800
 8008180:	ffffefff 	.word	0xffffefff
 8008184:	ffffdfff 	.word	0xffffdfff

08008188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	4a28      	ldr	r2, [pc, #160]	; (8008238 <TIM_OC4_SetConfig+0xb0>)
 8008198:	401a      	ands	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a22      	ldr	r2, [pc, #136]	; (800823c <TIM_OC4_SetConfig+0xb4>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a21      	ldr	r2, [pc, #132]	; (8008240 <TIM_OC4_SetConfig+0xb8>)
 80081bc:	4013      	ands	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <TIM_OC4_SetConfig+0xbc>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	031b      	lsls	r3, r3, #12
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4313      	orrs	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a19      	ldr	r2, [pc, #100]	; (8008248 <TIM_OC4_SetConfig+0xc0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00b      	beq.n	8008200 <TIM_OC4_SetConfig+0x78>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a18      	ldr	r2, [pc, #96]	; (800824c <TIM_OC4_SetConfig+0xc4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d007      	beq.n	8008200 <TIM_OC4_SetConfig+0x78>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a17      	ldr	r2, [pc, #92]	; (8008250 <TIM_OC4_SetConfig+0xc8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_OC4_SetConfig+0x78>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a16      	ldr	r2, [pc, #88]	; (8008254 <TIM_OC4_SetConfig+0xcc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d109      	bne.n	8008214 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <TIM_OC4_SetConfig+0xd0>)
 8008204:	4013      	ands	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	019b      	lsls	r3, r3, #6
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	4313      	orrs	r3, r2
 8008212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b006      	add	sp, #24
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	ffffefff 	.word	0xffffefff
 800823c:	feff8fff 	.word	0xfeff8fff
 8008240:	fffffcff 	.word	0xfffffcff
 8008244:	ffffdfff 	.word	0xffffdfff
 8008248:	40012c00 	.word	0x40012c00
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800
 8008258:	ffffbfff 	.word	0xffffbfff

0800825c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	4a25      	ldr	r2, [pc, #148]	; (8008300 <TIM_OC5_SetConfig+0xa4>)
 800826c:	401a      	ands	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <TIM_OC5_SetConfig+0xa8>)
 8008288:	4013      	ands	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	4a1b      	ldr	r2, [pc, #108]	; (8008308 <TIM_OC5_SetConfig+0xac>)
 800829a:	4013      	ands	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a17      	ldr	r2, [pc, #92]	; (800830c <TIM_OC5_SetConfig+0xb0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_OC5_SetConfig+0x6e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a16      	ldr	r2, [pc, #88]	; (8008310 <TIM_OC5_SetConfig+0xb4>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_OC5_SetConfig+0x6e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a15      	ldr	r2, [pc, #84]	; (8008314 <TIM_OC5_SetConfig+0xb8>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC5_SetConfig+0x6e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a14      	ldr	r2, [pc, #80]	; (8008318 <TIM_OC5_SetConfig+0xbc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d109      	bne.n	80082de <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	4a0c      	ldr	r2, [pc, #48]	; (8008300 <TIM_OC5_SetConfig+0xa4>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	621a      	str	r2, [r3, #32]
}
 80082f8:	46c0      	nop			; (mov r8, r8)
 80082fa:	46bd      	mov	sp, r7
 80082fc:	b006      	add	sp, #24
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	fffeffff 	.word	0xfffeffff
 8008304:	fffeff8f 	.word	0xfffeff8f
 8008308:	fffdffff 	.word	0xfffdffff
 800830c:	40012c00 	.word	0x40012c00
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800

0800831c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	4a26      	ldr	r2, [pc, #152]	; (80083c4 <TIM_OC6_SetConfig+0xa8>)
 800832c:	401a      	ands	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <TIM_OC6_SetConfig+0xac>)
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <TIM_OC6_SetConfig+0xb0>)
 800835c:	4013      	ands	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <TIM_OC6_SetConfig+0xb4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00b      	beq.n	800838c <TIM_OC6_SetConfig+0x70>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a17      	ldr	r2, [pc, #92]	; (80083d4 <TIM_OC6_SetConfig+0xb8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d007      	beq.n	800838c <TIM_OC6_SetConfig+0x70>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <TIM_OC6_SetConfig+0xbc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d003      	beq.n	800838c <TIM_OC6_SetConfig+0x70>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a15      	ldr	r2, [pc, #84]	; (80083dc <TIM_OC6_SetConfig+0xc0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d109      	bne.n	80083a0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <TIM_OC6_SetConfig+0xc4>)
 8008390:	4013      	ands	r3, r2
 8008392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	029b      	lsls	r3, r3, #10
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	4313      	orrs	r3, r2
 800839e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	621a      	str	r2, [r3, #32]
}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	b006      	add	sp, #24
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	ffefffff 	.word	0xffefffff
 80083c8:	feff8fff 	.word	0xfeff8fff
 80083cc:	ffdfffff 	.word	0xffdfffff
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40014400 	.word	0x40014400
 80083dc:	40014800 	.word	0x40014800
 80083e0:	fffbffff 	.word	0xfffbffff

080083e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	2201      	movs	r2, #1
 80083f8:	4393      	bics	r3, r2
 80083fa:	001a      	movs	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <TIM_TI1_SetConfig+0xa4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_TI1_SetConfig+0x40>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4a1d      	ldr	r2, [pc, #116]	; (800848c <TIM_TI1_SetConfig+0xa8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_TI1_SetConfig+0x40>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a1c      	ldr	r2, [pc, #112]	; (8008490 <TIM_TI1_SetConfig+0xac>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d101      	bne.n	8008428 <TIM_TI1_SetConfig+0x44>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <TIM_TI1_SetConfig+0x46>
 8008428:	2300      	movs	r3, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d008      	beq.n	8008440 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2203      	movs	r2, #3
 8008432:	4393      	bics	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e003      	b.n	8008448 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2201      	movs	r2, #1
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	22f0      	movs	r2, #240	; 0xf0
 800844c:	4393      	bics	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	4013      	ands	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	220a      	movs	r2, #10
 8008462:	4393      	bics	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	220a      	movs	r2, #10
 800846a:	4013      	ands	r3, r2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	46bd      	mov	sp, r7
 8008482:	b006      	add	sp, #24
 8008484:	bd80      	pop	{r7, pc}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	40012c00 	.word	0x40012c00
 800848c:	40000400 	.word	0x40000400
 8008490:	40014000 	.word	0x40014000

08008494 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	2210      	movs	r2, #16
 80084a8:	4393      	bics	r3, r2
 80084aa:	001a      	movs	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4a14      	ldr	r2, [pc, #80]	; (8008510 <TIM_TI2_SetConfig+0x7c>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	4a10      	ldr	r2, [pc, #64]	; (8008514 <TIM_TI2_SetConfig+0x80>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	031b      	lsls	r3, r3, #12
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	0c1b      	lsrs	r3, r3, #16
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	22a0      	movs	r2, #160	; 0xa0
 80084e8:	4393      	bics	r3, r2
 80084ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	22a0      	movs	r2, #160	; 0xa0
 80084f2:	4013      	ands	r3, r2
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	46bd      	mov	sp, r7
 800850a:	b006      	add	sp, #24
 800850c:	bd80      	pop	{r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	fffffcff 	.word	0xfffffcff
 8008514:	ffff0fff 	.word	0xffff0fff

08008518 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	4a19      	ldr	r2, [pc, #100]	; (8008590 <TIM_TI3_SetConfig+0x78>)
 800852c:	401a      	ands	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2203      	movs	r2, #3
 8008542:	4393      	bics	r3, r2
 8008544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	22f0      	movs	r2, #240	; 0xf0
 8008552:	4393      	bics	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	011b      	lsls	r3, r3, #4
 800855a:	22ff      	movs	r2, #255	; 0xff
 800855c:	4013      	ands	r3, r2
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <TIM_TI3_SetConfig+0x7c>)
 8008568:	4013      	ands	r3, r2
 800856a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	021a      	lsls	r2, r3, #8
 8008570:	23a0      	movs	r3, #160	; 0xa0
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	4013      	ands	r3, r2
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	46c0      	nop			; (mov r8, r8)
 800858a:	46bd      	mov	sp, r7
 800858c:	b006      	add	sp, #24
 800858e:	bd80      	pop	{r7, pc}
 8008590:	fffffeff 	.word	0xfffffeff
 8008594:	fffff5ff 	.word	0xfffff5ff

08008598 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	4a1a      	ldr	r2, [pc, #104]	; (8008614 <TIM_TI4_SetConfig+0x7c>)
 80085ac:	401a      	ands	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <TIM_TI4_SetConfig+0x80>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	021b      	lsls	r3, r3, #8
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	4a12      	ldr	r2, [pc, #72]	; (800861c <TIM_TI4_SetConfig+0x84>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	031b      	lsls	r3, r3, #12
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4a0d      	ldr	r2, [pc, #52]	; (8008620 <TIM_TI4_SetConfig+0x88>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	031a      	lsls	r2, r3, #12
 80085f2:	23a0      	movs	r3, #160	; 0xa0
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	4013      	ands	r3, r2
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	621a      	str	r2, [r3, #32]
}
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	46bd      	mov	sp, r7
 800860e:	b006      	add	sp, #24
 8008610:	bd80      	pop	{r7, pc}
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	ffffefff 	.word	0xffffefff
 8008618:	fffffcff 	.word	0xfffffcff
 800861c:	ffff0fff 	.word	0xffff0fff
 8008620:	ffff5fff 	.word	0xffff5fff

08008624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	221f      	movs	r2, #31
 8008634:	4013      	ands	r3, r2
 8008636:	2201      	movs	r2, #1
 8008638:	409a      	lsls	r2, r3
 800863a:	0013      	movs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	43d2      	mvns	r2, r2
 8008646:	401a      	ands	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	211f      	movs	r1, #31
 8008654:	400b      	ands	r3, r1
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4099      	lsls	r1, r3
 800865a:	000b      	movs	r3, r1
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	46bd      	mov	sp, r7
 8008666:	b006      	add	sp, #24
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d108      	bne.n	800868e <HAL_TIMEx_PWMN_Start+0x22>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2244      	movs	r2, #68	; 0x44
 8008680:	5c9b      	ldrb	r3, [r3, r2]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	1e5a      	subs	r2, r3, #1
 8008688:	4193      	sbcs	r3, r2
 800868a:	b2db      	uxtb	r3, r3
 800868c:	e01f      	b.n	80086ce <HAL_TIMEx_PWMN_Start+0x62>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b04      	cmp	r3, #4
 8008692:	d108      	bne.n	80086a6 <HAL_TIMEx_PWMN_Start+0x3a>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2245      	movs	r2, #69	; 0x45
 8008698:	5c9b      	ldrb	r3, [r3, r2]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	1e5a      	subs	r2, r3, #1
 80086a0:	4193      	sbcs	r3, r2
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	e013      	b.n	80086ce <HAL_TIMEx_PWMN_Start+0x62>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d108      	bne.n	80086be <HAL_TIMEx_PWMN_Start+0x52>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2246      	movs	r2, #70	; 0x46
 80086b0:	5c9b      	ldrb	r3, [r3, r2]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	1e5a      	subs	r2, r3, #1
 80086b8:	4193      	sbcs	r3, r2
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	e007      	b.n	80086ce <HAL_TIMEx_PWMN_Start+0x62>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2247      	movs	r2, #71	; 0x47
 80086c2:	5c9b      	ldrb	r3, [r3, r2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	1e5a      	subs	r2, r3, #1
 80086ca:	4193      	sbcs	r3, r2
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e05c      	b.n	8008790 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d104      	bne.n	80086e6 <HAL_TIMEx_PWMN_Start+0x7a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2244      	movs	r2, #68	; 0x44
 80086e0:	2102      	movs	r1, #2
 80086e2:	5499      	strb	r1, [r3, r2]
 80086e4:	e013      	b.n	800870e <HAL_TIMEx_PWMN_Start+0xa2>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d104      	bne.n	80086f6 <HAL_TIMEx_PWMN_Start+0x8a>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2245      	movs	r2, #69	; 0x45
 80086f0:	2102      	movs	r1, #2
 80086f2:	5499      	strb	r1, [r3, r2]
 80086f4:	e00b      	b.n	800870e <HAL_TIMEx_PWMN_Start+0xa2>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d104      	bne.n	8008706 <HAL_TIMEx_PWMN_Start+0x9a>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2246      	movs	r2, #70	; 0x46
 8008700:	2102      	movs	r1, #2
 8008702:	5499      	strb	r1, [r3, r2]
 8008704:	e003      	b.n	800870e <HAL_TIMEx_PWMN_Start+0xa2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2247      	movs	r2, #71	; 0x47
 800870a:	2102      	movs	r1, #2
 800870c:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	2204      	movs	r2, #4
 8008716:	0018      	movs	r0, r3
 8008718:	f000 f9b0 	bl	8008a7c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	0209      	lsls	r1, r1, #8
 800872a:	430a      	orrs	r2, r1
 800872c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a19      	ldr	r2, [pc, #100]	; (8008798 <HAL_TIMEx_PWMN_Start+0x12c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0xe0>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a17      	ldr	r2, [pc, #92]	; (800879c <HAL_TIMEx_PWMN_Start+0x130>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0xe0>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <HAL_TIMEx_PWMN_Start+0x134>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d116      	bne.n	800877a <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <HAL_TIMEx_PWMN_Start+0x138>)
 8008754:	4013      	ands	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b06      	cmp	r3, #6
 800875c:	d016      	beq.n	800878c <HAL_TIMEx_PWMN_Start+0x120>
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	025b      	lsls	r3, r3, #9
 8008764:	429a      	cmp	r2, r3
 8008766:	d011      	beq.n	800878c <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2101      	movs	r1, #1
 8008774:	430a      	orrs	r2, r1
 8008776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008778:	e008      	b.n	800878c <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2101      	movs	r1, #1
 8008786:	430a      	orrs	r2, r1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e000      	b.n	800878e <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b004      	add	sp, #16
 8008796:	bd80      	pop	{r7, pc}
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40000400 	.word	0x40000400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	00010007 	.word	0x00010007

080087a8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	2200      	movs	r2, #0
 80087ba:	0018      	movs	r0, r3
 80087bc:	f000 f95e 	bl	8008a7c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4a23      	ldr	r2, [pc, #140]	; (8008854 <HAL_TIMEx_PWMN_Stop+0xac>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	d10d      	bne.n	80087e8 <HAL_TIMEx_PWMN_Stop+0x40>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	4a21      	ldr	r2, [pc, #132]	; (8008858 <HAL_TIMEx_PWMN_Stop+0xb0>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	d107      	bne.n	80087e8 <HAL_TIMEx_PWMN_Stop+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	491e      	ldr	r1, [pc, #120]	; (800885c <HAL_TIMEx_PWMN_Stop+0xb4>)
 80087e4:	400a      	ands	r2, r1
 80087e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	4a19      	ldr	r2, [pc, #100]	; (8008854 <HAL_TIMEx_PWMN_Stop+0xac>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	d10d      	bne.n	8008810 <HAL_TIMEx_PWMN_Stop+0x68>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	4a17      	ldr	r2, [pc, #92]	; (8008858 <HAL_TIMEx_PWMN_Stop+0xb0>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	d107      	bne.n	8008810 <HAL_TIMEx_PWMN_Stop+0x68>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2101      	movs	r1, #1
 800880c:	438a      	bics	r2, r1
 800880e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <HAL_TIMEx_PWMN_Stop+0x78>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2244      	movs	r2, #68	; 0x44
 800881a:	2101      	movs	r1, #1
 800881c:	5499      	strb	r1, [r3, r2]
 800881e:	e013      	b.n	8008848 <HAL_TIMEx_PWMN_Stop+0xa0>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b04      	cmp	r3, #4
 8008824:	d104      	bne.n	8008830 <HAL_TIMEx_PWMN_Stop+0x88>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2245      	movs	r2, #69	; 0x45
 800882a:	2101      	movs	r1, #1
 800882c:	5499      	strb	r1, [r3, r2]
 800882e:	e00b      	b.n	8008848 <HAL_TIMEx_PWMN_Stop+0xa0>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b08      	cmp	r3, #8
 8008834:	d104      	bne.n	8008840 <HAL_TIMEx_PWMN_Stop+0x98>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2246      	movs	r2, #70	; 0x46
 800883a:	2101      	movs	r1, #1
 800883c:	5499      	strb	r1, [r3, r2]
 800883e:	e003      	b.n	8008848 <HAL_TIMEx_PWMN_Stop+0xa0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2247      	movs	r2, #71	; 0x47
 8008844:	2101      	movs	r1, #1
 8008846:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b002      	add	sp, #8
 8008850:	bd80      	pop	{r7, pc}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	00001111 	.word	0x00001111
 8008858:	00000444 	.word	0x00000444
 800885c:	ffff7fff 	.word	0xffff7fff

08008860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	223c      	movs	r2, #60	; 0x3c
 800886e:	5c9b      	ldrb	r3, [r3, r2]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008874:	2302      	movs	r3, #2
 8008876:	e04f      	b.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	223c      	movs	r2, #60	; 0x3c
 800887c:	2101      	movs	r1, #1
 800887e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	223d      	movs	r2, #61	; 0x3d
 8008884:	2102      	movs	r1, #2
 8008886:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a20      	ldr	r2, [pc, #128]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d108      	bne.n	80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2270      	movs	r2, #112	; 0x70
 80088b8:	4393      	bics	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a13      	ldr	r2, [pc, #76]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d009      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a12      	ldr	r2, [pc, #72]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d004      	beq.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a11      	ldr	r2, [pc, #68]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d10c      	bne.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2280      	movs	r2, #128	; 0x80
 80088f0:	4393      	bics	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	223d      	movs	r2, #61	; 0x3d
 800890a:	2101      	movs	r1, #1
 800890c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	223c      	movs	r2, #60	; 0x3c
 8008912:	2100      	movs	r1, #0
 8008914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	0018      	movs	r0, r3
 800891a:	46bd      	mov	sp, r7
 800891c:	b004      	add	sp, #16
 800891e:	bd80      	pop	{r7, pc}
 8008920:	40012c00 	.word	0x40012c00
 8008924:	ff0fffff 	.word	0xff0fffff
 8008928:	40000400 	.word	0x40000400
 800892c:	40014000 	.word	0x40014000

08008930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	223c      	movs	r2, #60	; 0x3c
 8008942:	5c9b      	ldrb	r3, [r3, r2]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008948:	2302      	movs	r3, #2
 800894a:	e079      	b.n	8008a40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	223c      	movs	r2, #60	; 0x3c
 8008950:	2101      	movs	r1, #1
 8008952:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	22ff      	movs	r2, #255	; 0xff
 8008958:	4393      	bics	r3, r2
 800895a:	001a      	movs	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a38      	ldr	r2, [pc, #224]	; (8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008968:	401a      	ands	r2, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4a35      	ldr	r2, [pc, #212]	; (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008976:	401a      	ands	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a33      	ldr	r2, [pc, #204]	; (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008984:	401a      	ands	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4a30      	ldr	r2, [pc, #192]	; (8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008992:	401a      	ands	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4a2e      	ldr	r2, [pc, #184]	; (8008a58 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80089a0:	401a      	ands	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4a2b      	ldr	r2, [pc, #172]	; (8008a5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80089ae:	401a      	ands	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4a29      	ldr	r2, [pc, #164]	; (8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80089bc:	401a      	ands	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	041b      	lsls	r3, r3, #16
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a25      	ldr	r2, [pc, #148]	; (8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d106      	bne.n	80089e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4a24      	ldr	r2, [pc, #144]	; (8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089d6:	401a      	ands	r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d121      	bne.n	8008a2e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4a1f      	ldr	r2, [pc, #124]	; (8008a6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089ee:	401a      	ands	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	051b      	lsls	r3, r3, #20
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4a1c      	ldr	r2, [pc, #112]	; (8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80089fe:	401a      	ands	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a1a      	ldr	r2, [pc, #104]	; (8008a74 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008a0c:	401a      	ands	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d106      	bne.n	8008a2e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008a24:	401a      	ands	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	223c      	movs	r2, #60	; 0x3c
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	0018      	movs	r0, r3
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b004      	add	sp, #16
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	fffffcff 	.word	0xfffffcff
 8008a4c:	fffffbff 	.word	0xfffffbff
 8008a50:	fffff7ff 	.word	0xfffff7ff
 8008a54:	ffffefff 	.word	0xffffefff
 8008a58:	ffffdfff 	.word	0xffffdfff
 8008a5c:	ffffbfff 	.word	0xffffbfff
 8008a60:	fff0ffff 	.word	0xfff0ffff
 8008a64:	40012c00 	.word	0x40012c00
 8008a68:	efffffff 	.word	0xefffffff
 8008a6c:	ff0fffff 	.word	0xff0fffff
 8008a70:	feffffff 	.word	0xfeffffff
 8008a74:	fdffffff 	.word	0xfdffffff
 8008a78:	dfffffff 	.word	0xdfffffff

08008a7c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	221f      	movs	r2, #31
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2204      	movs	r2, #4
 8008a90:	409a      	lsls	r2, r3
 8008a92:	0013      	movs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	43d2      	mvns	r2, r2
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1a      	ldr	r2, [r3, #32]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	211f      	movs	r1, #31
 8008aac:	400b      	ands	r3, r1
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4099      	lsls	r1, r3
 8008ab2:	000b      	movs	r3, r1
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	621a      	str	r2, [r3, #32]
}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	46bd      	mov	sp, r7
 8008abe:	b006      	add	sp, #24
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e046      	b.n	8008b64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2288      	movs	r2, #136	; 0x88
 8008ada:	589b      	ldr	r3, [r3, r2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d107      	bne.n	8008af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2284      	movs	r2, #132	; 0x84
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	0018      	movs	r0, r3
 8008aec:	f7fb fe5e 	bl	80047ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2288      	movs	r2, #136	; 0x88
 8008af4:	2124      	movs	r1, #36	; 0x24
 8008af6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2101      	movs	r1, #1
 8008b04:	438a      	bics	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f000 fcc4 	bl	8009498 <UART_SetConfig>
 8008b10:	0003      	movs	r3, r0
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e024      	b.n	8008b64 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	0018      	movs	r0, r3
 8008b26:	f000 fe5b 	bl	80097e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	490d      	ldr	r1, [pc, #52]	; (8008b6c <HAL_UART_Init+0xa8>)
 8008b36:	400a      	ands	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	212a      	movs	r1, #42	; 0x2a
 8008b46:	438a      	bics	r2, r1
 8008b48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2101      	movs	r1, #1
 8008b56:	430a      	orrs	r2, r1
 8008b58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f000 fef3 	bl	8009948 <UART_CheckIdleState>
 8008b62:	0003      	movs	r3, r0
}
 8008b64:	0018      	movs	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b002      	add	sp, #8
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	ffffb7ff 	.word	0xffffb7ff

08008b70 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e04e      	b.n	8008c20 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2288      	movs	r2, #136	; 0x88
 8008b86:	589b      	ldr	r3, [r3, r2]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d107      	bne.n	8008b9c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2284      	movs	r2, #132	; 0x84
 8008b90:	2100      	movs	r1, #0
 8008b92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	0018      	movs	r0, r3
 8008b98:	f7fb fe08 	bl	80047ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2288      	movs	r2, #136	; 0x88
 8008ba0:	2124      	movs	r1, #36	; 0x24
 8008ba2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2101      	movs	r1, #1
 8008bb0:	438a      	bics	r2, r1
 8008bb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f000 fc6e 	bl	8009498 <UART_SetConfig>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e02c      	b.n	8008c20 <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f000 fe05 	bl	80097e0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4911      	ldr	r1, [pc, #68]	; (8008c28 <HAL_HalfDuplex_Init+0xb8>)
 8008be2:	400a      	ands	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2122      	movs	r1, #34	; 0x22
 8008bf2:	438a      	bics	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2108      	movs	r1, #8
 8008c02:	430a      	orrs	r2, r1
 8008c04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2101      	movs	r1, #1
 8008c12:	430a      	orrs	r2, r1
 8008c14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f000 fe95 	bl	8009948 <UART_CheckIdleState>
 8008c1e:	0003      	movs	r3, r0
}
 8008c20:	0018      	movs	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b002      	add	sp, #8
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	ffffb7ff 	.word	0xffffb7ff

08008c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	; 0x28
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	1dbb      	adds	r3, r7, #6
 8008c3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2288      	movs	r2, #136	; 0x88
 8008c40:	589b      	ldr	r3, [r3, r2]
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d000      	beq.n	8008c48 <HAL_UART_Transmit+0x1c>
 8008c46:	e088      	b.n	8008d5a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_UART_Transmit+0x2a>
 8008c4e:	1dbb      	adds	r3, r7, #6
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e080      	b.n	8008d5c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689a      	ldr	r2, [r3, #8]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	015b      	lsls	r3, r3, #5
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d109      	bne.n	8008c7a <HAL_UART_Transmit+0x4e>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2201      	movs	r2, #1
 8008c72:	4013      	ands	r3, r2
 8008c74:	d001      	beq.n	8008c7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e070      	b.n	8008d5c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2290      	movs	r2, #144	; 0x90
 8008c7e:	2100      	movs	r1, #0
 8008c80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2288      	movs	r2, #136	; 0x88
 8008c86:	2121      	movs	r1, #33	; 0x21
 8008c88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c8a:	f7fb fee7 	bl	8004a5c <HAL_GetTick>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1dba      	adds	r2, r7, #6
 8008c96:	2154      	movs	r1, #84	; 0x54
 8008c98:	8812      	ldrh	r2, [r2, #0]
 8008c9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1dba      	adds	r2, r7, #6
 8008ca0:	2156      	movs	r1, #86	; 0x56
 8008ca2:	8812      	ldrh	r2, [r2, #0]
 8008ca4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	015b      	lsls	r3, r3, #5
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d108      	bne.n	8008cc4 <HAL_UART_Transmit+0x98>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	e003      	b.n	8008ccc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ccc:	e02c      	b.n	8008d28 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	0013      	movs	r3, r2
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	f000 fe82 	bl	80099e4 <UART_WaitOnFlagUntilTimeout>
 8008ce0:	1e03      	subs	r3, r0, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e039      	b.n	8008d5c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	001a      	movs	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	05d2      	lsls	r2, r2, #23
 8008cfa:	0dd2      	lsrs	r2, r2, #23
 8008cfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	3302      	adds	r3, #2
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	e007      	b.n	8008d16 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	781a      	ldrb	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2256      	movs	r2, #86	; 0x56
 8008d1a:	5a9b      	ldrh	r3, [r3, r2]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b299      	uxth	r1, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2256      	movs	r2, #86	; 0x56
 8008d26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2256      	movs	r2, #86	; 0x56
 8008d2c:	5a9b      	ldrh	r3, [r3, r2]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1cc      	bne.n	8008cce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	0013      	movs	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2140      	movs	r1, #64	; 0x40
 8008d42:	f000 fe4f 	bl	80099e4 <UART_WaitOnFlagUntilTimeout>
 8008d46:	1e03      	subs	r3, r0, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e006      	b.n	8008d5c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2288      	movs	r2, #136	; 0x88
 8008d52:	2120      	movs	r1, #32
 8008d54:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
  }
}
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b008      	add	sp, #32
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	1dbb      	adds	r3, r7, #6
 8008d70:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	228c      	movs	r2, #140	; 0x8c
 8008d76:	589b      	ldr	r3, [r3, r2]
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d145      	bne.n	8008e08 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_UART_Receive_IT+0x26>
 8008d82:	1dbb      	adds	r3, r7, #6
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e03d      	b.n	8008e0a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	2380      	movs	r3, #128	; 0x80
 8008d94:	015b      	lsls	r3, r3, #5
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d109      	bne.n	8008dae <HAL_UART_Receive_IT+0x4a>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2201      	movs	r2, #1
 8008da6:	4013      	ands	r3, r2
 8008da8:	d001      	beq.n	8008dae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e02d      	b.n	8008e0a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d019      	beq.n	8008df6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8008dc6:	613b      	str	r3, [r7, #16]
  return(result);
 8008dc8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	04c9      	lsls	r1, r1, #19
 8008de6:	430a      	orrs	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	f383 8810 	msr	PRIMASK, r3
}
 8008df4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008df6:	1dbb      	adds	r3, r7, #6
 8008df8:	881a      	ldrh	r2, [r3, #0]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f000 feb8 	bl	8009b74 <UART_Start_Receive_IT>
 8008e04:	0003      	movs	r3, r0
 8008e06:	e000      	b.n	8008e0a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008e08:	2302      	movs	r3, #2
  }
}
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	b008      	add	sp, #32
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e14:	b5b0      	push	{r4, r5, r7, lr}
 8008e16:	b0aa      	sub	sp, #168	; 0xa8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	22a4      	movs	r2, #164	; 0xa4
 8008e24:	18b9      	adds	r1, r7, r2
 8008e26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	20a0      	movs	r0, #160	; 0xa0
 8008e30:	1839      	adds	r1, r7, r0
 8008e32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	249c      	movs	r4, #156	; 0x9c
 8008e3c:	1939      	adds	r1, r7, r4
 8008e3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e40:	0011      	movs	r1, r2
 8008e42:	18bb      	adds	r3, r7, r2
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4aa2      	ldr	r2, [pc, #648]	; (80090d0 <HAL_UART_IRQHandler+0x2bc>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	2298      	movs	r2, #152	; 0x98
 8008e4c:	18bd      	adds	r5, r7, r2
 8008e4e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008e50:	18bb      	adds	r3, r7, r2
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d11a      	bne.n	8008e8e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e58:	187b      	adds	r3, r7, r1
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	4013      	ands	r3, r2
 8008e60:	d015      	beq.n	8008e8e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e62:	183b      	adds	r3, r7, r0
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2220      	movs	r2, #32
 8008e68:	4013      	ands	r3, r2
 8008e6a:	d105      	bne.n	8008e78 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e6c:	193b      	adds	r3, r7, r4
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	2380      	movs	r3, #128	; 0x80
 8008e72:	055b      	lsls	r3, r3, #21
 8008e74:	4013      	ands	r3, r2
 8008e76:	d00a      	beq.n	8008e8e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d100      	bne.n	8008e82 <HAL_UART_IRQHandler+0x6e>
 8008e80:	e2dc      	b.n	800943c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	0010      	movs	r0, r2
 8008e8a:	4798      	blx	r3
      }
      return;
 8008e8c:	e2d6      	b.n	800943c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e8e:	2398      	movs	r3, #152	; 0x98
 8008e90:	18fb      	adds	r3, r7, r3
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d100      	bne.n	8008e9a <HAL_UART_IRQHandler+0x86>
 8008e98:	e122      	b.n	80090e0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e9a:	239c      	movs	r3, #156	; 0x9c
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a8c      	ldr	r2, [pc, #560]	; (80090d4 <HAL_UART_IRQHandler+0x2c0>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d106      	bne.n	8008eb4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ea6:	23a0      	movs	r3, #160	; 0xa0
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a8a      	ldr	r2, [pc, #552]	; (80090d8 <HAL_UART_IRQHandler+0x2c4>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	d100      	bne.n	8008eb4 <HAL_UART_IRQHandler+0xa0>
 8008eb2:	e115      	b.n	80090e0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eb4:	23a4      	movs	r3, #164	; 0xa4
 8008eb6:	18fb      	adds	r3, r7, r3
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d012      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xd2>
 8008ec0:	23a0      	movs	r3, #160	; 0xa0
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	2380      	movs	r3, #128	; 0x80
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d00b      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2290      	movs	r2, #144	; 0x90
 8008eda:	589b      	ldr	r3, [r3, r2]
 8008edc:	2201      	movs	r2, #1
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2190      	movs	r1, #144	; 0x90
 8008ee4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee6:	23a4      	movs	r3, #164	; 0xa4
 8008ee8:	18fb      	adds	r3, r7, r3
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2202      	movs	r2, #2
 8008eee:	4013      	ands	r3, r2
 8008ef0:	d011      	beq.n	8008f16 <HAL_UART_IRQHandler+0x102>
 8008ef2:	239c      	movs	r3, #156	; 0x9c
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4013      	ands	r3, r2
 8008efc:	d00b      	beq.n	8008f16 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2202      	movs	r2, #2
 8008f04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2290      	movs	r2, #144	; 0x90
 8008f0a:	589b      	ldr	r3, [r3, r2]
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2190      	movs	r1, #144	; 0x90
 8008f14:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f16:	23a4      	movs	r3, #164	; 0xa4
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	4013      	ands	r3, r2
 8008f20:	d011      	beq.n	8008f46 <HAL_UART_IRQHandler+0x132>
 8008f22:	239c      	movs	r3, #156	; 0x9c
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	d00b      	beq.n	8008f46 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2204      	movs	r2, #4
 8008f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2290      	movs	r2, #144	; 0x90
 8008f3a:	589b      	ldr	r3, [r3, r2]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2190      	movs	r1, #144	; 0x90
 8008f44:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f46:	23a4      	movs	r3, #164	; 0xa4
 8008f48:	18fb      	adds	r3, r7, r3
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d017      	beq.n	8008f82 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f52:	23a0      	movs	r3, #160	; 0xa0
 8008f54:	18fb      	adds	r3, r7, r3
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	d105      	bne.n	8008f6a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f5e:	239c      	movs	r3, #156	; 0x9c
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a5b      	ldr	r2, [pc, #364]	; (80090d4 <HAL_UART_IRQHandler+0x2c0>)
 8008f66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f68:	d00b      	beq.n	8008f82 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2208      	movs	r2, #8
 8008f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2290      	movs	r2, #144	; 0x90
 8008f76:	589b      	ldr	r3, [r3, r2]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2190      	movs	r1, #144	; 0x90
 8008f80:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f82:	23a4      	movs	r3, #164	; 0xa4
 8008f84:	18fb      	adds	r3, r7, r3
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	d013      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x1a4>
 8008f90:	23a0      	movs	r3, #160	; 0xa0
 8008f92:	18fb      	adds	r3, r7, r3
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	2380      	movs	r3, #128	; 0x80
 8008f98:	04db      	lsls	r3, r3, #19
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2280      	movs	r2, #128	; 0x80
 8008fa4:	0112      	lsls	r2, r2, #4
 8008fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2290      	movs	r2, #144	; 0x90
 8008fac:	589b      	ldr	r3, [r3, r2]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2190      	movs	r1, #144	; 0x90
 8008fb6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2290      	movs	r2, #144	; 0x90
 8008fbc:	589b      	ldr	r3, [r3, r2]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d100      	bne.n	8008fc4 <HAL_UART_IRQHandler+0x1b0>
 8008fc2:	e23d      	b.n	8009440 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fc4:	23a4      	movs	r3, #164	; 0xa4
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	4013      	ands	r3, r2
 8008fce:	d015      	beq.n	8008ffc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fd0:	23a0      	movs	r3, #160	; 0xa0
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	4013      	ands	r3, r2
 8008fda:	d106      	bne.n	8008fea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fdc:	239c      	movs	r3, #156	; 0x9c
 8008fde:	18fb      	adds	r3, r7, r3
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	2380      	movs	r3, #128	; 0x80
 8008fe4:	055b      	lsls	r3, r3, #21
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	d008      	beq.n	8008ffc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d004      	beq.n	8008ffc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2290      	movs	r2, #144	; 0x90
 8009000:	589b      	ldr	r3, [r3, r2]
 8009002:	2194      	movs	r1, #148	; 0x94
 8009004:	187a      	adds	r2, r7, r1
 8009006:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2240      	movs	r2, #64	; 0x40
 8009010:	4013      	ands	r3, r2
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	d004      	beq.n	8009020 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009016:	187b      	adds	r3, r7, r1
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2228      	movs	r2, #40	; 0x28
 800901c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800901e:	d04c      	beq.n	80090ba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	0018      	movs	r0, r3
 8009024:	f000 feca 	bl	8009dbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2240      	movs	r2, #64	; 0x40
 8009030:	4013      	ands	r3, r2
 8009032:	2b40      	cmp	r3, #64	; 0x40
 8009034:	d13c      	bne.n	80090b0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009036:	f3ef 8310 	mrs	r3, PRIMASK
 800903a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800903c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800903e:	2090      	movs	r0, #144	; 0x90
 8009040:	183a      	adds	r2, r7, r0
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	2301      	movs	r3, #1
 8009046:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904a:	f383 8810 	msr	PRIMASK, r3
}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2140      	movs	r1, #64	; 0x40
 800905c:	438a      	bics	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	183b      	adds	r3, r7, r0
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009068:	f383 8810 	msr	PRIMASK, r3
}
 800906c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2280      	movs	r2, #128	; 0x80
 8009072:	589b      	ldr	r3, [r3, r2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d016      	beq.n	80090a6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2280      	movs	r2, #128	; 0x80
 800907c:	589b      	ldr	r3, [r3, r2]
 800907e:	4a17      	ldr	r2, [pc, #92]	; (80090dc <HAL_UART_IRQHandler+0x2c8>)
 8009080:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2280      	movs	r2, #128	; 0x80
 8009086:	589b      	ldr	r3, [r3, r2]
 8009088:	0018      	movs	r0, r3
 800908a:	f7fc fad3 	bl	8005634 <HAL_DMA_Abort_IT>
 800908e:	1e03      	subs	r3, r0, #0
 8009090:	d01c      	beq.n	80090cc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2280      	movs	r2, #128	; 0x80
 8009096:	589b      	ldr	r3, [r3, r2]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	2180      	movs	r1, #128	; 0x80
 800909e:	5852      	ldr	r2, [r2, r1]
 80090a0:	0010      	movs	r0, r2
 80090a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	e012      	b.n	80090cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 f9e1 	bl	8009470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ae:	e00d      	b.n	80090cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	0018      	movs	r0, r3
 80090b4:	f000 f9dc 	bl	8009470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b8:	e008      	b.n	80090cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	0018      	movs	r0, r3
 80090be:	f000 f9d7 	bl	8009470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2290      	movs	r2, #144	; 0x90
 80090c6:	2100      	movs	r1, #0
 80090c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80090ca:	e1b9      	b.n	8009440 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090cc:	46c0      	nop			; (mov r8, r8)
    return;
 80090ce:	e1b7      	b.n	8009440 <HAL_UART_IRQHandler+0x62c>
 80090d0:	0000080f 	.word	0x0000080f
 80090d4:	10000001 	.word	0x10000001
 80090d8:	04000120 	.word	0x04000120
 80090dc:	08009e89 	.word	0x08009e89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d000      	beq.n	80090ea <HAL_UART_IRQHandler+0x2d6>
 80090e8:	e13e      	b.n	8009368 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090ea:	23a4      	movs	r3, #164	; 0xa4
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	4013      	ands	r3, r2
 80090f4:	d100      	bne.n	80090f8 <HAL_UART_IRQHandler+0x2e4>
 80090f6:	e137      	b.n	8009368 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090f8:	23a0      	movs	r3, #160	; 0xa0
 80090fa:	18fb      	adds	r3, r7, r3
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2210      	movs	r2, #16
 8009100:	4013      	ands	r3, r2
 8009102:	d100      	bne.n	8009106 <HAL_UART_IRQHandler+0x2f2>
 8009104:	e130      	b.n	8009368 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2210      	movs	r2, #16
 800910c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2240      	movs	r2, #64	; 0x40
 8009116:	4013      	ands	r3, r2
 8009118:	2b40      	cmp	r3, #64	; 0x40
 800911a:	d000      	beq.n	800911e <HAL_UART_IRQHandler+0x30a>
 800911c:	e0a4      	b.n	8009268 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2280      	movs	r2, #128	; 0x80
 8009122:	589b      	ldr	r3, [r3, r2]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	217e      	movs	r1, #126	; 0x7e
 800912a:	187b      	adds	r3, r7, r1
 800912c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800912e:	187b      	adds	r3, r7, r1
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d100      	bne.n	8009138 <HAL_UART_IRQHandler+0x324>
 8009136:	e185      	b.n	8009444 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	225c      	movs	r2, #92	; 0x5c
 800913c:	5a9b      	ldrh	r3, [r3, r2]
 800913e:	187a      	adds	r2, r7, r1
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d300      	bcc.n	8009148 <HAL_UART_IRQHandler+0x334>
 8009146:	e17d      	b.n	8009444 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	187a      	adds	r2, r7, r1
 800914c:	215e      	movs	r1, #94	; 0x5e
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2280      	movs	r2, #128	; 0x80
 8009156:	589b      	ldr	r3, [r3, r2]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2220      	movs	r2, #32
 800915e:	4013      	ands	r3, r2
 8009160:	d170      	bne.n	8009244 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009162:	f3ef 8310 	mrs	r3, PRIMASK
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916a:	67bb      	str	r3, [r7, #120]	; 0x78
 800916c:	2301      	movs	r3, #1
 800916e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	f383 8810 	msr	PRIMASK, r3
}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	49b4      	ldr	r1, [pc, #720]	; (8009454 <HAL_UART_IRQHandler+0x640>)
 8009184:	400a      	ands	r2, r1
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f383 8810 	msr	PRIMASK, r3
}
 8009192:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009194:	f3ef 8310 	mrs	r3, PRIMASK
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800919a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919c:	677b      	str	r3, [r7, #116]	; 0x74
 800919e:	2301      	movs	r3, #1
 80091a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	46c0      	nop			; (mov r8, r8)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	438a      	bics	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c0:	f383 8810 	msr	PRIMASK, r3
}
 80091c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80091cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ce:	673b      	str	r3, [r7, #112]	; 0x70
 80091d0:	2301      	movs	r3, #1
 80091d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d6:	f383 8810 	msr	PRIMASK, r3
}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2140      	movs	r1, #64	; 0x40
 80091e8:	438a      	bics	r2, r1
 80091ea:	609a      	str	r2, [r3, #8]
 80091ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091ee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f2:	f383 8810 	msr	PRIMASK, r3
}
 80091f6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	228c      	movs	r2, #140	; 0x8c
 80091fc:	2120      	movs	r1, #32
 80091fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009206:	f3ef 8310 	mrs	r3, PRIMASK
 800920a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800920c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009210:	2301      	movs	r3, #1
 8009212:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009216:	f383 8810 	msr	PRIMASK, r3
}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2110      	movs	r1, #16
 8009228:	438a      	bics	r2, r1
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009232:	f383 8810 	msr	PRIMASK, r3
}
 8009236:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	589b      	ldr	r3, [r3, r2]
 800923e:	0018      	movs	r0, r3
 8009240:	f7fc f996 	bl	8005570 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	225c      	movs	r2, #92	; 0x5c
 800924e:	5a9a      	ldrh	r2, [r3, r2]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	215e      	movs	r1, #94	; 0x5e
 8009254:	5a5b      	ldrh	r3, [r3, r1]
 8009256:	b29b      	uxth	r3, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	b29a      	uxth	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	0011      	movs	r1, r2
 8009260:	0018      	movs	r0, r3
 8009262:	f000 f90d 	bl	8009480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009266:	e0ed      	b.n	8009444 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	225c      	movs	r2, #92	; 0x5c
 800926c:	5a99      	ldrh	r1, [r3, r2]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	225e      	movs	r2, #94	; 0x5e
 8009272:	5a9b      	ldrh	r3, [r3, r2]
 8009274:	b29a      	uxth	r2, r3
 8009276:	208e      	movs	r0, #142	; 0x8e
 8009278:	183b      	adds	r3, r7, r0
 800927a:	1a8a      	subs	r2, r1, r2
 800927c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	225e      	movs	r2, #94	; 0x5e
 8009282:	5a9b      	ldrh	r3, [r3, r2]
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d100      	bne.n	800928c <HAL_UART_IRQHandler+0x478>
 800928a:	e0dd      	b.n	8009448 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800928c:	183b      	adds	r3, r7, r0
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d100      	bne.n	8009296 <HAL_UART_IRQHandler+0x482>
 8009294:	e0d8      	b.n	8009448 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009296:	f3ef 8310 	mrs	r3, PRIMASK
 800929a:	60fb      	str	r3, [r7, #12]
  return(result);
 800929c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800929e:	2488      	movs	r4, #136	; 0x88
 80092a0:	193a      	adds	r2, r7, r4
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	2301      	movs	r3, #1
 80092a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f383 8810 	msr	PRIMASK, r3
}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4967      	ldr	r1, [pc, #412]	; (8009458 <HAL_UART_IRQHandler+0x644>)
 80092bc:	400a      	ands	r2, r1
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	193b      	adds	r3, r7, r4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f383 8810 	msr	PRIMASK, r3
}
 80092cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ce:	f3ef 8310 	mrs	r3, PRIMASK
 80092d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80092d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092d6:	2484      	movs	r4, #132	; 0x84
 80092d8:	193a      	adds	r2, r7, r4
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	2301      	movs	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	f383 8810 	msr	PRIMASK, r3
}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689a      	ldr	r2, [r3, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	495a      	ldr	r1, [pc, #360]	; (800945c <HAL_UART_IRQHandler+0x648>)
 80092f4:	400a      	ands	r2, r1
 80092f6:	609a      	str	r2, [r3, #8]
 80092f8:	193b      	adds	r3, r7, r4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	f383 8810 	msr	PRIMASK, r3
}
 8009304:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	228c      	movs	r2, #140	; 0x8c
 800930a:	2120      	movs	r1, #32
 800930c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800931a:	f3ef 8310 	mrs	r3, PRIMASK
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009322:	2480      	movs	r4, #128	; 0x80
 8009324:	193a      	adds	r2, r7, r4
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	2301      	movs	r3, #1
 800932a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f383 8810 	msr	PRIMASK, r3
}
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2110      	movs	r1, #16
 8009340:	438a      	bics	r2, r1
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	193b      	adds	r3, r7, r4
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	f383 8810 	msr	PRIMASK, r3
}
 8009350:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2202      	movs	r2, #2
 8009356:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009358:	183b      	adds	r3, r7, r0
 800935a:	881a      	ldrh	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	0011      	movs	r1, r2
 8009360:	0018      	movs	r0, r3
 8009362:	f000 f88d 	bl	8009480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009366:	e06f      	b.n	8009448 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009368:	23a4      	movs	r3, #164	; 0xa4
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	2380      	movs	r3, #128	; 0x80
 8009370:	035b      	lsls	r3, r3, #13
 8009372:	4013      	ands	r3, r2
 8009374:	d010      	beq.n	8009398 <HAL_UART_IRQHandler+0x584>
 8009376:	239c      	movs	r3, #156	; 0x9c
 8009378:	18fb      	adds	r3, r7, r3
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	2380      	movs	r3, #128	; 0x80
 800937e:	03db      	lsls	r3, r3, #15
 8009380:	4013      	ands	r3, r2
 8009382:	d009      	beq.n	8009398 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2280      	movs	r2, #128	; 0x80
 800938a:	0352      	lsls	r2, r2, #13
 800938c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	0018      	movs	r0, r3
 8009392:	f001 fa1d 	bl	800a7d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009396:	e05a      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009398:	23a4      	movs	r3, #164	; 0xa4
 800939a:	18fb      	adds	r3, r7, r3
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2280      	movs	r2, #128	; 0x80
 80093a0:	4013      	ands	r3, r2
 80093a2:	d016      	beq.n	80093d2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093a4:	23a0      	movs	r3, #160	; 0xa0
 80093a6:	18fb      	adds	r3, r7, r3
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2280      	movs	r2, #128	; 0x80
 80093ac:	4013      	ands	r3, r2
 80093ae:	d106      	bne.n	80093be <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093b0:	239c      	movs	r3, #156	; 0x9c
 80093b2:	18fb      	adds	r3, r7, r3
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	2380      	movs	r3, #128	; 0x80
 80093b8:	041b      	lsls	r3, r3, #16
 80093ba:	4013      	ands	r3, r2
 80093bc:	d009      	beq.n	80093d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d042      	beq.n	800944c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	0010      	movs	r0, r2
 80093ce:	4798      	blx	r3
    }
    return;
 80093d0:	e03c      	b.n	800944c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093d2:	23a4      	movs	r3, #164	; 0xa4
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2240      	movs	r2, #64	; 0x40
 80093da:	4013      	ands	r3, r2
 80093dc:	d00a      	beq.n	80093f4 <HAL_UART_IRQHandler+0x5e0>
 80093de:	23a0      	movs	r3, #160	; 0xa0
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2240      	movs	r2, #64	; 0x40
 80093e6:	4013      	ands	r3, r2
 80093e8:	d004      	beq.n	80093f4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	0018      	movs	r0, r3
 80093ee:	f000 fd62 	bl	8009eb6 <UART_EndTransmit_IT>
    return;
 80093f2:	e02c      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093f4:	23a4      	movs	r3, #164	; 0xa4
 80093f6:	18fb      	adds	r3, r7, r3
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	2380      	movs	r3, #128	; 0x80
 80093fc:	041b      	lsls	r3, r3, #16
 80093fe:	4013      	ands	r3, r2
 8009400:	d00b      	beq.n	800941a <HAL_UART_IRQHandler+0x606>
 8009402:	23a0      	movs	r3, #160	; 0xa0
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	2380      	movs	r3, #128	; 0x80
 800940a:	05db      	lsls	r3, r3, #23
 800940c:	4013      	ands	r3, r2
 800940e:	d004      	beq.n	800941a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	0018      	movs	r0, r3
 8009414:	f001 f9ec 	bl	800a7f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009418:	e019      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800941a:	23a4      	movs	r3, #164	; 0xa4
 800941c:	18fb      	adds	r3, r7, r3
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	2380      	movs	r3, #128	; 0x80
 8009422:	045b      	lsls	r3, r3, #17
 8009424:	4013      	ands	r3, r2
 8009426:	d012      	beq.n	800944e <HAL_UART_IRQHandler+0x63a>
 8009428:	23a0      	movs	r3, #160	; 0xa0
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da0d      	bge.n	800944e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	0018      	movs	r0, r3
 8009436:	f001 f9d3 	bl	800a7e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800943a:	e008      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
      return;
 800943c:	46c0      	nop			; (mov r8, r8)
 800943e:	e006      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
    return;
 8009440:	46c0      	nop			; (mov r8, r8)
 8009442:	e004      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
      return;
 8009444:	46c0      	nop			; (mov r8, r8)
 8009446:	e002      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
      return;
 8009448:	46c0      	nop			; (mov r8, r8)
 800944a:	e000      	b.n	800944e <HAL_UART_IRQHandler+0x63a>
    return;
 800944c:	46c0      	nop			; (mov r8, r8)
  }
}
 800944e:	46bd      	mov	sp, r7
 8009450:	b02a      	add	sp, #168	; 0xa8
 8009452:	bdb0      	pop	{r4, r5, r7, pc}
 8009454:	fffffeff 	.word	0xfffffeff
 8009458:	fffffedf 	.word	0xfffffedf
 800945c:	effffffe 	.word	0xeffffffe

08009460 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009468:	46c0      	nop			; (mov r8, r8)
 800946a:	46bd      	mov	sp, r7
 800946c:	b002      	add	sp, #8
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	b002      	add	sp, #8
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	000a      	movs	r2, r1
 800948a:	1cbb      	adds	r3, r7, #2
 800948c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800948e:	46c0      	nop			; (mov r8, r8)
 8009490:	46bd      	mov	sp, r7
 8009492:	b002      	add	sp, #8
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094a0:	231a      	movs	r3, #26
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	431a      	orrs	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4abc      	ldr	r2, [pc, #752]	; (80097b8 <UART_SetConfig+0x320>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	0019      	movs	r1, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69fa      	ldr	r2, [r7, #28]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	4ab7      	ldr	r2, [pc, #732]	; (80097bc <UART_SetConfig+0x324>)
 80094de:	4013      	ands	r3, r2
 80094e0:	0019      	movs	r1, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	4aae      	ldr	r2, [pc, #696]	; (80097c0 <UART_SetConfig+0x328>)
 8009506:	4013      	ands	r3, r2
 8009508:	0019      	movs	r1, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	430a      	orrs	r2, r1
 8009512:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	220f      	movs	r2, #15
 800951c:	4393      	bics	r3, r2
 800951e:	0019      	movs	r1, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4aa4      	ldr	r2, [pc, #656]	; (80097c4 <UART_SetConfig+0x32c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d127      	bne.n	8009586 <UART_SetConfig+0xee>
 8009536:	4ba4      	ldr	r3, [pc, #656]	; (80097c8 <UART_SetConfig+0x330>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	2203      	movs	r2, #3
 800953c:	4013      	ands	r3, r2
 800953e:	2b03      	cmp	r3, #3
 8009540:	d017      	beq.n	8009572 <UART_SetConfig+0xda>
 8009542:	d81b      	bhi.n	800957c <UART_SetConfig+0xe4>
 8009544:	2b02      	cmp	r3, #2
 8009546:	d00a      	beq.n	800955e <UART_SetConfig+0xc6>
 8009548:	d818      	bhi.n	800957c <UART_SetConfig+0xe4>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <UART_SetConfig+0xbc>
 800954e:	2b01      	cmp	r3, #1
 8009550:	d00a      	beq.n	8009568 <UART_SetConfig+0xd0>
 8009552:	e013      	b.n	800957c <UART_SetConfig+0xe4>
 8009554:	231b      	movs	r3, #27
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	e058      	b.n	8009610 <UART_SetConfig+0x178>
 800955e:	231b      	movs	r3, #27
 8009560:	18fb      	adds	r3, r7, r3
 8009562:	2202      	movs	r2, #2
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e053      	b.n	8009610 <UART_SetConfig+0x178>
 8009568:	231b      	movs	r3, #27
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	2204      	movs	r2, #4
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e04e      	b.n	8009610 <UART_SetConfig+0x178>
 8009572:	231b      	movs	r3, #27
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2208      	movs	r2, #8
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	e049      	b.n	8009610 <UART_SetConfig+0x178>
 800957c:	231b      	movs	r3, #27
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	2210      	movs	r2, #16
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	e044      	b.n	8009610 <UART_SetConfig+0x178>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a90      	ldr	r2, [pc, #576]	; (80097cc <UART_SetConfig+0x334>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d127      	bne.n	80095e0 <UART_SetConfig+0x148>
 8009590:	4b8d      	ldr	r3, [pc, #564]	; (80097c8 <UART_SetConfig+0x330>)
 8009592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009594:	220c      	movs	r2, #12
 8009596:	4013      	ands	r3, r2
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d017      	beq.n	80095cc <UART_SetConfig+0x134>
 800959c:	d81b      	bhi.n	80095d6 <UART_SetConfig+0x13e>
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d00a      	beq.n	80095b8 <UART_SetConfig+0x120>
 80095a2:	d818      	bhi.n	80095d6 <UART_SetConfig+0x13e>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <UART_SetConfig+0x116>
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d00a      	beq.n	80095c2 <UART_SetConfig+0x12a>
 80095ac:	e013      	b.n	80095d6 <UART_SetConfig+0x13e>
 80095ae:	231b      	movs	r3, #27
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	e02b      	b.n	8009610 <UART_SetConfig+0x178>
 80095b8:	231b      	movs	r3, #27
 80095ba:	18fb      	adds	r3, r7, r3
 80095bc:	2202      	movs	r2, #2
 80095be:	701a      	strb	r2, [r3, #0]
 80095c0:	e026      	b.n	8009610 <UART_SetConfig+0x178>
 80095c2:	231b      	movs	r3, #27
 80095c4:	18fb      	adds	r3, r7, r3
 80095c6:	2204      	movs	r2, #4
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	e021      	b.n	8009610 <UART_SetConfig+0x178>
 80095cc:	231b      	movs	r3, #27
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	2208      	movs	r2, #8
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	e01c      	b.n	8009610 <UART_SetConfig+0x178>
 80095d6:	231b      	movs	r3, #27
 80095d8:	18fb      	adds	r3, r7, r3
 80095da:	2210      	movs	r2, #16
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e017      	b.n	8009610 <UART_SetConfig+0x178>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a7a      	ldr	r2, [pc, #488]	; (80097d0 <UART_SetConfig+0x338>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d104      	bne.n	80095f4 <UART_SetConfig+0x15c>
 80095ea:	231b      	movs	r3, #27
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	e00d      	b.n	8009610 <UART_SetConfig+0x178>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a76      	ldr	r2, [pc, #472]	; (80097d4 <UART_SetConfig+0x33c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d104      	bne.n	8009608 <UART_SetConfig+0x170>
 80095fe:	231b      	movs	r3, #27
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e003      	b.n	8009610 <UART_SetConfig+0x178>
 8009608:	231b      	movs	r3, #27
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	2210      	movs	r2, #16
 800960e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	429a      	cmp	r2, r3
 800961a:	d000      	beq.n	800961e <UART_SetConfig+0x186>
 800961c:	e065      	b.n	80096ea <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800961e:	231b      	movs	r3, #27
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b08      	cmp	r3, #8
 8009626:	d015      	beq.n	8009654 <UART_SetConfig+0x1bc>
 8009628:	dc18      	bgt.n	800965c <UART_SetConfig+0x1c4>
 800962a:	2b04      	cmp	r3, #4
 800962c:	d00d      	beq.n	800964a <UART_SetConfig+0x1b2>
 800962e:	dc15      	bgt.n	800965c <UART_SetConfig+0x1c4>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <UART_SetConfig+0x1a2>
 8009634:	2b02      	cmp	r3, #2
 8009636:	d005      	beq.n	8009644 <UART_SetConfig+0x1ac>
 8009638:	e010      	b.n	800965c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800963a:	f7fd fcd7 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 800963e:	0003      	movs	r3, r0
 8009640:	617b      	str	r3, [r7, #20]
        break;
 8009642:	e012      	b.n	800966a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009644:	4b64      	ldr	r3, [pc, #400]	; (80097d8 <UART_SetConfig+0x340>)
 8009646:	617b      	str	r3, [r7, #20]
        break;
 8009648:	e00f      	b.n	800966a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800964a:	f7fd fc45 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 800964e:	0003      	movs	r3, r0
 8009650:	617b      	str	r3, [r7, #20]
        break;
 8009652:	e00a      	b.n	800966a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009654:	2380      	movs	r3, #128	; 0x80
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	617b      	str	r3, [r7, #20]
        break;
 800965a:	e006      	b.n	800966a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009660:	231a      	movs	r3, #26
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	2201      	movs	r2, #1
 8009666:	701a      	strb	r2, [r3, #0]
        break;
 8009668:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d100      	bne.n	8009672 <UART_SetConfig+0x1da>
 8009670:	e08d      	b.n	800978e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009676:	4b59      	ldr	r3, [pc, #356]	; (80097dc <UART_SetConfig+0x344>)
 8009678:	0052      	lsls	r2, r2, #1
 800967a:	5ad3      	ldrh	r3, [r2, r3]
 800967c:	0019      	movs	r1, r3
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f7f6 fd5e 	bl	8000140 <__udivsi3>
 8009684:	0003      	movs	r3, r0
 8009686:	005a      	lsls	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	085b      	lsrs	r3, r3, #1
 800968e:	18d2      	adds	r2, r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	0019      	movs	r1, r3
 8009696:	0010      	movs	r0, r2
 8009698:	f7f6 fd52 	bl	8000140 <__udivsi3>
 800969c:	0003      	movs	r3, r0
 800969e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2b0f      	cmp	r3, #15
 80096a4:	d91c      	bls.n	80096e0 <UART_SetConfig+0x248>
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	025b      	lsls	r3, r3, #9
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d217      	bcs.n	80096e0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	200e      	movs	r0, #14
 80096b6:	183b      	adds	r3, r7, r0
 80096b8:	210f      	movs	r1, #15
 80096ba:	438a      	bics	r2, r1
 80096bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	085b      	lsrs	r3, r3, #1
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	2207      	movs	r2, #7
 80096c6:	4013      	ands	r3, r2
 80096c8:	b299      	uxth	r1, r3
 80096ca:	183b      	adds	r3, r7, r0
 80096cc:	183a      	adds	r2, r7, r0
 80096ce:	8812      	ldrh	r2, [r2, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	183a      	adds	r2, r7, r0
 80096da:	8812      	ldrh	r2, [r2, #0]
 80096dc:	60da      	str	r2, [r3, #12]
 80096de:	e056      	b.n	800978e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80096e0:	231a      	movs	r3, #26
 80096e2:	18fb      	adds	r3, r7, r3
 80096e4:	2201      	movs	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e051      	b.n	800978e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096ea:	231b      	movs	r3, #27
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d015      	beq.n	8009720 <UART_SetConfig+0x288>
 80096f4:	dc18      	bgt.n	8009728 <UART_SetConfig+0x290>
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d00d      	beq.n	8009716 <UART_SetConfig+0x27e>
 80096fa:	dc15      	bgt.n	8009728 <UART_SetConfig+0x290>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <UART_SetConfig+0x26e>
 8009700:	2b02      	cmp	r3, #2
 8009702:	d005      	beq.n	8009710 <UART_SetConfig+0x278>
 8009704:	e010      	b.n	8009728 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009706:	f7fd fc71 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 800970a:	0003      	movs	r3, r0
 800970c:	617b      	str	r3, [r7, #20]
        break;
 800970e:	e012      	b.n	8009736 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009710:	4b31      	ldr	r3, [pc, #196]	; (80097d8 <UART_SetConfig+0x340>)
 8009712:	617b      	str	r3, [r7, #20]
        break;
 8009714:	e00f      	b.n	8009736 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009716:	f7fd fbdf 	bl	8006ed8 <HAL_RCC_GetSysClockFreq>
 800971a:	0003      	movs	r3, r0
 800971c:	617b      	str	r3, [r7, #20]
        break;
 800971e:	e00a      	b.n	8009736 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009720:	2380      	movs	r3, #128	; 0x80
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	617b      	str	r3, [r7, #20]
        break;
 8009726:	e006      	b.n	8009736 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800972c:	231a      	movs	r3, #26
 800972e:	18fb      	adds	r3, r7, r3
 8009730:	2201      	movs	r2, #1
 8009732:	701a      	strb	r2, [r3, #0]
        break;
 8009734:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d028      	beq.n	800978e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009740:	4b26      	ldr	r3, [pc, #152]	; (80097dc <UART_SetConfig+0x344>)
 8009742:	0052      	lsls	r2, r2, #1
 8009744:	5ad3      	ldrh	r3, [r2, r3]
 8009746:	0019      	movs	r1, r3
 8009748:	6978      	ldr	r0, [r7, #20]
 800974a:	f7f6 fcf9 	bl	8000140 <__udivsi3>
 800974e:	0003      	movs	r3, r0
 8009750:	001a      	movs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	18d2      	adds	r2, r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	0019      	movs	r1, r3
 8009760:	0010      	movs	r0, r2
 8009762:	f7f6 fced 	bl	8000140 <__udivsi3>
 8009766:	0003      	movs	r3, r0
 8009768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b0f      	cmp	r3, #15
 800976e:	d90a      	bls.n	8009786 <UART_SetConfig+0x2ee>
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	2380      	movs	r3, #128	; 0x80
 8009774:	025b      	lsls	r3, r3, #9
 8009776:	429a      	cmp	r2, r3
 8009778:	d205      	bcs.n	8009786 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	b29a      	uxth	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60da      	str	r2, [r3, #12]
 8009784:	e003      	b.n	800978e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009786:	231a      	movs	r3, #26
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2201      	movs	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	226a      	movs	r2, #106	; 0x6a
 8009792:	2101      	movs	r1, #1
 8009794:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2268      	movs	r2, #104	; 0x68
 800979a:	2101      	movs	r1, #1
 800979c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80097aa:	231a      	movs	r3, #26
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	781b      	ldrb	r3, [r3, #0]
}
 80097b0:	0018      	movs	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	b008      	add	sp, #32
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	cfff69f3 	.word	0xcfff69f3
 80097bc:	ffffcfff 	.word	0xffffcfff
 80097c0:	11fff4ff 	.word	0x11fff4ff
 80097c4:	40013800 	.word	0x40013800
 80097c8:	40021000 	.word	0x40021000
 80097cc:	40004400 	.word	0x40004400
 80097d0:	40004800 	.word	0x40004800
 80097d4:	40004c00 	.word	0x40004c00
 80097d8:	00f42400 	.word	0x00f42400
 80097dc:	08016a18 	.word	0x08016a18

080097e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	2201      	movs	r2, #1
 80097ee:	4013      	ands	r3, r2
 80097f0:	d00b      	beq.n	800980a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	4a4a      	ldr	r2, [pc, #296]	; (8009924 <UART_AdvFeatureConfig+0x144>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	0019      	movs	r1, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	2202      	movs	r2, #2
 8009810:	4013      	ands	r3, r2
 8009812:	d00b      	beq.n	800982c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	4a43      	ldr	r2, [pc, #268]	; (8009928 <UART_AdvFeatureConfig+0x148>)
 800981c:	4013      	ands	r3, r2
 800981e:	0019      	movs	r1, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	2204      	movs	r2, #4
 8009832:	4013      	ands	r3, r2
 8009834:	d00b      	beq.n	800984e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	4a3b      	ldr	r2, [pc, #236]	; (800992c <UART_AdvFeatureConfig+0x14c>)
 800983e:	4013      	ands	r3, r2
 8009840:	0019      	movs	r1, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	2208      	movs	r2, #8
 8009854:	4013      	ands	r3, r2
 8009856:	d00b      	beq.n	8009870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	4a34      	ldr	r2, [pc, #208]	; (8009930 <UART_AdvFeatureConfig+0x150>)
 8009860:	4013      	ands	r3, r2
 8009862:	0019      	movs	r1, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	2210      	movs	r2, #16
 8009876:	4013      	ands	r3, r2
 8009878:	d00b      	beq.n	8009892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <UART_AdvFeatureConfig+0x154>)
 8009882:	4013      	ands	r3, r2
 8009884:	0019      	movs	r1, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009896:	2220      	movs	r2, #32
 8009898:	4013      	ands	r3, r2
 800989a:	d00b      	beq.n	80098b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	4a25      	ldr	r2, [pc, #148]	; (8009938 <UART_AdvFeatureConfig+0x158>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	0019      	movs	r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b8:	2240      	movs	r2, #64	; 0x40
 80098ba:	4013      	ands	r3, r2
 80098bc:	d01d      	beq.n	80098fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	4a1d      	ldr	r2, [pc, #116]	; (800993c <UART_AdvFeatureConfig+0x15c>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	0019      	movs	r1, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098da:	2380      	movs	r3, #128	; 0x80
 80098dc:	035b      	lsls	r3, r3, #13
 80098de:	429a      	cmp	r2, r3
 80098e0:	d10b      	bne.n	80098fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	4a15      	ldr	r2, [pc, #84]	; (8009940 <UART_AdvFeatureConfig+0x160>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	0019      	movs	r1, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	2280      	movs	r2, #128	; 0x80
 8009900:	4013      	ands	r3, r2
 8009902:	d00b      	beq.n	800991c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4a0e      	ldr	r2, [pc, #56]	; (8009944 <UART_AdvFeatureConfig+0x164>)
 800990c:	4013      	ands	r3, r2
 800990e:	0019      	movs	r1, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	605a      	str	r2, [r3, #4]
  }
}
 800991c:	46c0      	nop			; (mov r8, r8)
 800991e:	46bd      	mov	sp, r7
 8009920:	b002      	add	sp, #8
 8009922:	bd80      	pop	{r7, pc}
 8009924:	fffdffff 	.word	0xfffdffff
 8009928:	fffeffff 	.word	0xfffeffff
 800992c:	fffbffff 	.word	0xfffbffff
 8009930:	ffff7fff 	.word	0xffff7fff
 8009934:	ffffefff 	.word	0xffffefff
 8009938:	ffffdfff 	.word	0xffffdfff
 800993c:	ffefffff 	.word	0xffefffff
 8009940:	ff9fffff 	.word	0xff9fffff
 8009944:	fff7ffff 	.word	0xfff7ffff

08009948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2290      	movs	r2, #144	; 0x90
 8009954:	2100      	movs	r1, #0
 8009956:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009958:	f7fb f880 	bl	8004a5c <HAL_GetTick>
 800995c:	0003      	movs	r3, r0
 800995e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2208      	movs	r2, #8
 8009968:	4013      	ands	r3, r2
 800996a:	2b08      	cmp	r3, #8
 800996c:	d10c      	bne.n	8009988 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2280      	movs	r2, #128	; 0x80
 8009972:	0391      	lsls	r1, r2, #14
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4a1a      	ldr	r2, [pc, #104]	; (80099e0 <UART_CheckIdleState+0x98>)
 8009978:	9200      	str	r2, [sp, #0]
 800997a:	2200      	movs	r2, #0
 800997c:	f000 f832 	bl	80099e4 <UART_WaitOnFlagUntilTimeout>
 8009980:	1e03      	subs	r3, r0, #0
 8009982:	d001      	beq.n	8009988 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e026      	b.n	80099d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2204      	movs	r2, #4
 8009990:	4013      	ands	r3, r2
 8009992:	2b04      	cmp	r3, #4
 8009994:	d10c      	bne.n	80099b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2280      	movs	r2, #128	; 0x80
 800999a:	03d1      	lsls	r1, r2, #15
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	4a10      	ldr	r2, [pc, #64]	; (80099e0 <UART_CheckIdleState+0x98>)
 80099a0:	9200      	str	r2, [sp, #0]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f000 f81e 	bl	80099e4 <UART_WaitOnFlagUntilTimeout>
 80099a8:	1e03      	subs	r3, r0, #0
 80099aa:	d001      	beq.n	80099b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e012      	b.n	80099d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2288      	movs	r2, #136	; 0x88
 80099b4:	2120      	movs	r1, #32
 80099b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	228c      	movs	r2, #140	; 0x8c
 80099bc:	2120      	movs	r1, #32
 80099be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2284      	movs	r2, #132	; 0x84
 80099d0:	2100      	movs	r1, #0
 80099d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	0018      	movs	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	b004      	add	sp, #16
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	46c0      	nop			; (mov r8, r8)
 80099e0:	01ffffff 	.word	0x01ffffff

080099e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b094      	sub	sp, #80	; 0x50
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	1dfb      	adds	r3, r7, #7
 80099f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099f4:	e0a7      	b.n	8009b46 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099f8:	3301      	adds	r3, #1
 80099fa:	d100      	bne.n	80099fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80099fc:	e0a3      	b.n	8009b46 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099fe:	f7fb f82d 	bl	8004a5c <HAL_GetTick>
 8009a02:	0002      	movs	r2, r0
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d302      	bcc.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d13f      	bne.n	8009a94 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a14:	f3ef 8310 	mrs	r3, PRIMASK
 8009a18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a1e:	2301      	movs	r3, #1
 8009a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a24:	f383 8810 	msr	PRIMASK, r3
}
 8009a28:	46c0      	nop			; (mov r8, r8)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	494e      	ldr	r1, [pc, #312]	; (8009b70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009a36:	400a      	ands	r2, r1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	f383 8810 	msr	PRIMASK, r3
}
 8009a44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a46:	f3ef 8310 	mrs	r3, PRIMASK
 8009a4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a50:	2301      	movs	r3, #1
 8009a52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	f383 8810 	msr	PRIMASK, r3
}
 8009a5a:	46c0      	nop			; (mov r8, r8)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	689a      	ldr	r2, [r3, #8]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2101      	movs	r1, #1
 8009a68:	438a      	bics	r2, r1
 8009a6a:	609a      	str	r2, [r3, #8]
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a72:	f383 8810 	msr	PRIMASK, r3
}
 8009a76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2288      	movs	r2, #136	; 0x88
 8009a7c:	2120      	movs	r1, #32
 8009a7e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	228c      	movs	r2, #140	; 0x8c
 8009a84:	2120      	movs	r1, #32
 8009a86:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2284      	movs	r2, #132	; 0x84
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e069      	b.n	8009b68 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	d052      	beq.n	8009b46 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	69da      	ldr	r2, [r3, #28]
 8009aa6:	2380      	movs	r3, #128	; 0x80
 8009aa8:	011b      	lsls	r3, r3, #4
 8009aaa:	401a      	ands	r2, r3
 8009aac:	2380      	movs	r3, #128	; 0x80
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d148      	bne.n	8009b46 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2280      	movs	r2, #128	; 0x80
 8009aba:	0112      	lsls	r2, r2, #4
 8009abc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009abe:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac2:	613b      	str	r3, [r7, #16]
  return(result);
 8009ac4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ac8:	2301      	movs	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f383 8810 	msr	PRIMASK, r3
}
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4924      	ldr	r1, [pc, #144]	; (8009b70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f383 8810 	msr	PRIMASK, r3
}
 8009aee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009af0:	f3ef 8310 	mrs	r3, PRIMASK
 8009af4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009af6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009afa:	2301      	movs	r3, #1
 8009afc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f383 8810 	msr	PRIMASK, r3
}
 8009b04:	46c0      	nop			; (mov r8, r8)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2101      	movs	r1, #1
 8009b12:	438a      	bics	r2, r1
 8009b14:	609a      	str	r2, [r3, #8]
 8009b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	f383 8810 	msr	PRIMASK, r3
}
 8009b20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2288      	movs	r2, #136	; 0x88
 8009b26:	2120      	movs	r1, #32
 8009b28:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	228c      	movs	r2, #140	; 0x8c
 8009b2e:	2120      	movs	r1, #32
 8009b30:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2290      	movs	r2, #144	; 0x90
 8009b36:	2120      	movs	r1, #32
 8009b38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2284      	movs	r2, #132	; 0x84
 8009b3e:	2100      	movs	r1, #0
 8009b40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e010      	b.n	8009b68 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4013      	ands	r3, r2
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	425a      	negs	r2, r3
 8009b56:	4153      	adcs	r3, r2
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	1dfb      	adds	r3, r7, #7
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d100      	bne.n	8009b66 <UART_WaitOnFlagUntilTimeout+0x182>
 8009b64:	e747      	b.n	80099f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	0018      	movs	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	b014      	add	sp, #80	; 0x50
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	fffffe5f 	.word	0xfffffe5f

08009b74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b098      	sub	sp, #96	; 0x60
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	1dbb      	adds	r3, r7, #6
 8009b80:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	1dba      	adds	r2, r7, #6
 8009b8c:	215c      	movs	r1, #92	; 0x5c
 8009b8e:	8812      	ldrh	r2, [r2, #0]
 8009b90:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1dba      	adds	r2, r7, #6
 8009b96:	215e      	movs	r1, #94	; 0x5e
 8009b98:	8812      	ldrh	r2, [r2, #0]
 8009b9a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	2380      	movs	r3, #128	; 0x80
 8009ba8:	015b      	lsls	r3, r3, #5
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d10d      	bne.n	8009bca <UART_Start_Receive_IT+0x56>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <UART_Start_Receive_IT+0x4c>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2260      	movs	r2, #96	; 0x60
 8009bba:	497b      	ldr	r1, [pc, #492]	; (8009da8 <UART_Start_Receive_IT+0x234>)
 8009bbc:	5299      	strh	r1, [r3, r2]
 8009bbe:	e02e      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2260      	movs	r2, #96	; 0x60
 8009bc4:	21ff      	movs	r1, #255	; 0xff
 8009bc6:	5299      	strh	r1, [r3, r2]
 8009bc8:	e029      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10d      	bne.n	8009bee <UART_Start_Receive_IT+0x7a>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <UART_Start_Receive_IT+0x70>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2260      	movs	r2, #96	; 0x60
 8009bde:	21ff      	movs	r1, #255	; 0xff
 8009be0:	5299      	strh	r1, [r3, r2]
 8009be2:	e01c      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2260      	movs	r2, #96	; 0x60
 8009be8:	217f      	movs	r1, #127	; 0x7f
 8009bea:	5299      	strh	r1, [r3, r2]
 8009bec:	e017      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	2380      	movs	r3, #128	; 0x80
 8009bf4:	055b      	lsls	r3, r3, #21
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d10d      	bne.n	8009c16 <UART_Start_Receive_IT+0xa2>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <UART_Start_Receive_IT+0x98>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2260      	movs	r2, #96	; 0x60
 8009c06:	217f      	movs	r1, #127	; 0x7f
 8009c08:	5299      	strh	r1, [r3, r2]
 8009c0a:	e008      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2260      	movs	r2, #96	; 0x60
 8009c10:	213f      	movs	r1, #63	; 0x3f
 8009c12:	5299      	strh	r1, [r3, r2]
 8009c14:	e003      	b.n	8009c1e <UART_Start_Receive_IT+0xaa>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2260      	movs	r2, #96	; 0x60
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2290      	movs	r2, #144	; 0x90
 8009c22:	2100      	movs	r1, #0
 8009c24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	228c      	movs	r2, #140	; 0x8c
 8009c2a:	2122      	movs	r1, #34	; 0x22
 8009c2c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c32:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8009c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c38:	2301      	movs	r3, #1
 8009c3a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3e:	f383 8810 	msr	PRIMASK, r3
}
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2101      	movs	r1, #1
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c56:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c5a:	f383 8810 	msr	PRIMASK, r3
}
 8009c5e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	059b      	lsls	r3, r3, #22
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d150      	bne.n	8009d0e <UART_Start_Receive_IT+0x19a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2268      	movs	r2, #104	; 0x68
 8009c70:	5a9b      	ldrh	r3, [r3, r2]
 8009c72:	1dba      	adds	r2, r7, #6
 8009c74:	8812      	ldrh	r2, [r2, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d349      	bcc.n	8009d0e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	2380      	movs	r3, #128	; 0x80
 8009c80:	015b      	lsls	r3, r3, #5
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d107      	bne.n	8009c96 <UART_Start_Receive_IT+0x122>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d103      	bne.n	8009c96 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a46      	ldr	r2, [pc, #280]	; (8009dac <UART_Start_Receive_IT+0x238>)
 8009c92:	675a      	str	r2, [r3, #116]	; 0x74
 8009c94:	e002      	b.n	8009c9c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4a45      	ldr	r2, [pc, #276]	; (8009db0 <UART_Start_Receive_IT+0x23c>)
 8009c9a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d019      	beq.n	8009cd8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cae:	2301      	movs	r3, #1
 8009cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	f383 8810 	msr	PRIMASK, r3
}
 8009cb8:	46c0      	nop			; (mov r8, r8)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2180      	movs	r1, #128	; 0x80
 8009cc6:	0049      	lsls	r1, r1, #1
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd2:	f383 8810 	msr	PRIMASK, r3
}
 8009cd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	f383 8810 	msr	PRIMASK, r3
}
 8009cec:	46c0      	nop			; (mov r8, r8)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689a      	ldr	r2, [r3, #8]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2180      	movs	r1, #128	; 0x80
 8009cfa:	0549      	lsls	r1, r1, #21
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	609a      	str	r2, [r3, #8]
 8009d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	f383 8810 	msr	PRIMASK, r3
}
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	e047      	b.n	8009d9e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	2380      	movs	r3, #128	; 0x80
 8009d14:	015b      	lsls	r3, r3, #5
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d107      	bne.n	8009d2a <UART_Start_Receive_IT+0x1b6>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d103      	bne.n	8009d2a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	4a23      	ldr	r2, [pc, #140]	; (8009db4 <UART_Start_Receive_IT+0x240>)
 8009d26:	675a      	str	r2, [r3, #116]	; 0x74
 8009d28:	e002      	b.n	8009d30 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a22      	ldr	r2, [pc, #136]	; (8009db8 <UART_Start_Receive_IT+0x244>)
 8009d2e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d019      	beq.n	8009d6c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d38:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d3e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d42:	2301      	movs	r3, #1
 8009d44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	f383 8810 	msr	PRIMASK, r3
}
 8009d4c:	46c0      	nop			; (mov r8, r8)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2190      	movs	r1, #144	; 0x90
 8009d5a:	0049      	lsls	r1, r1, #1
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	f383 8810 	msr	PRIMASK, r3
}
 8009d6a:	e018      	b.n	8009d9e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d70:	613b      	str	r3, [r7, #16]
  return(result);
 8009d72:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d74:	653b      	str	r3, [r7, #80]	; 0x50
 8009d76:	2301      	movs	r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f383 8810 	msr	PRIMASK, r3
}
 8009d80:	46c0      	nop			; (mov r8, r8)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2120      	movs	r1, #32
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f383 8810 	msr	PRIMASK, r3
}
 8009d9c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	0018      	movs	r0, r3
 8009da2:	46bd      	mov	sp, r7
 8009da4:	b018      	add	sp, #96	; 0x60
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	000001ff 	.word	0x000001ff
 8009dac:	0800a4e5 	.word	0x0800a4e5
 8009db0:	0800a1f9 	.word	0x0800a1f9
 8009db4:	0800a085 	.word	0x0800a085
 8009db8:	08009f11 	.word	0x08009f11

08009dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08e      	sub	sp, #56	; 0x38
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8009dca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dce:	2301      	movs	r3, #1
 8009dd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f383 8810 	msr	PRIMASK, r3
}
 8009dd8:	46c0      	nop			; (mov r8, r8)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4926      	ldr	r1, [pc, #152]	; (8009e80 <UART_EndRxTransfer+0xc4>)
 8009de6:	400a      	ands	r2, r1
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	f383 8810 	msr	PRIMASK, r3
}
 8009df4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009df6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfa:	623b      	str	r3, [r7, #32]
  return(result);
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8009e00:	2301      	movs	r3, #1
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	f383 8810 	msr	PRIMASK, r3
}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	491b      	ldr	r1, [pc, #108]	; (8009e84 <UART_EndRxTransfer+0xc8>)
 8009e18:	400a      	ands	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	f383 8810 	msr	PRIMASK, r3
}
 8009e26:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d118      	bne.n	8009e62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e30:	f3ef 8310 	mrs	r3, PRIMASK
 8009e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f383 8810 	msr	PRIMASK, r3
}
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2110      	movs	r1, #16
 8009e52:	438a      	bics	r2, r1
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f383 8810 	msr	PRIMASK, r3
}
 8009e60:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	228c      	movs	r2, #140	; 0x8c
 8009e66:	2120      	movs	r1, #32
 8009e68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b00e      	add	sp, #56	; 0x38
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	46c0      	nop			; (mov r8, r8)
 8009e80:	fffffedf 	.word	0xfffffedf
 8009e84:	effffffe 	.word	0xeffffffe

08009e88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	225e      	movs	r2, #94	; 0x5e
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2256      	movs	r2, #86	; 0x56
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f7ff fae1 	bl	8009470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	b004      	add	sp, #16
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b086      	sub	sp, #24
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8009ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	46c0      	nop			; (mov r8, r8)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2140      	movs	r1, #64	; 0x40
 8009ee0:	438a      	bics	r2, r1
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f383 8810 	msr	PRIMASK, r3
}
 8009eee:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2288      	movs	r2, #136	; 0x88
 8009ef4:	2120      	movs	r1, #32
 8009ef6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f7ff faad 	bl	8009460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	b006      	add	sp, #24
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b090      	sub	sp, #64	; 0x40
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f18:	203e      	movs	r0, #62	; 0x3e
 8009f1a:	183b      	adds	r3, r7, r0
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	2160      	movs	r1, #96	; 0x60
 8009f20:	5a52      	ldrh	r2, [r2, r1]
 8009f22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	228c      	movs	r2, #140	; 0x8c
 8009f28:	589b      	ldr	r3, [r3, r2]
 8009f2a:	2b22      	cmp	r3, #34	; 0x22
 8009f2c:	d000      	beq.n	8009f30 <UART_RxISR_8BIT+0x20>
 8009f2e:	e09a      	b.n	800a066 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f36:	213c      	movs	r1, #60	; 0x3c
 8009f38:	187b      	adds	r3, r7, r1
 8009f3a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f3c:	187b      	adds	r3, r7, r1
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	183b      	adds	r3, r7, r0
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	b2d9      	uxtb	r1, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4c:	400a      	ands	r2, r1
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	225e      	movs	r2, #94	; 0x5e
 8009f60:	5a9b      	ldrh	r3, [r3, r2]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b299      	uxth	r1, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	225e      	movs	r2, #94	; 0x5e
 8009f6c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	225e      	movs	r2, #94	; 0x5e
 8009f72:	5a9b      	ldrh	r3, [r3, r2]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d000      	beq.n	8009f7c <UART_RxISR_8BIT+0x6c>
 8009f7a:	e07c      	b.n	800a076 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f80:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f82:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f86:	2301      	movs	r3, #1
 8009f88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	f383 8810 	msr	PRIMASK, r3
}
 8009f90:	46c0      	nop			; (mov r8, r8)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4938      	ldr	r1, [pc, #224]	; (800a080 <UART_RxISR_8BIT+0x170>)
 8009f9e:	400a      	ands	r2, r1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f383 8810 	msr	PRIMASK, r3
}
 8009fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fae:	f3ef 8310 	mrs	r3, PRIMASK
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb8:	2301      	movs	r3, #1
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	f383 8810 	msr	PRIMASK, r3
}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2101      	movs	r1, #1
 8009fd0:	438a      	bics	r2, r1
 8009fd2:	609a      	str	r2, [r3, #8]
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	f383 8810 	msr	PRIMASK, r3
}
 8009fde:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	228c      	movs	r2, #140	; 0x8c
 8009fe4:	2120      	movs	r1, #32
 8009fe6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d12f      	bne.n	800a05c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a002:	f3ef 8310 	mrs	r3, PRIMASK
 800a006:	60fb      	str	r3, [r7, #12]
  return(result);
 800a008:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00a:	633b      	str	r3, [r7, #48]	; 0x30
 800a00c:	2301      	movs	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f383 8810 	msr	PRIMASK, r3
}
 800a016:	46c0      	nop			; (mov r8, r8)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2110      	movs	r1, #16
 800a024:	438a      	bics	r2, r1
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f383 8810 	msr	PRIMASK, r3
}
 800a032:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	2210      	movs	r2, #16
 800a03c:	4013      	ands	r3, r2
 800a03e:	2b10      	cmp	r3, #16
 800a040:	d103      	bne.n	800a04a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2210      	movs	r2, #16
 800a048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	225c      	movs	r2, #92	; 0x5c
 800a04e:	5a9a      	ldrh	r2, [r3, r2]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	0011      	movs	r1, r2
 800a054:	0018      	movs	r0, r3
 800a056:	f7ff fa13 	bl	8009480 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a05a:	e00c      	b.n	800a076 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0018      	movs	r0, r3
 800a060:	f7f9 fbd8 	bl	8003814 <HAL_UART_RxCpltCallback>
}
 800a064:	e007      	b.n	800a076 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	699a      	ldr	r2, [r3, #24]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2108      	movs	r1, #8
 800a072:	430a      	orrs	r2, r1
 800a074:	619a      	str	r2, [r3, #24]
}
 800a076:	46c0      	nop			; (mov r8, r8)
 800a078:	46bd      	mov	sp, r7
 800a07a:	b010      	add	sp, #64	; 0x40
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	fffffedf 	.word	0xfffffedf

0800a084 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b090      	sub	sp, #64	; 0x40
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a08c:	203e      	movs	r0, #62	; 0x3e
 800a08e:	183b      	adds	r3, r7, r0
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	2160      	movs	r1, #96	; 0x60
 800a094:	5a52      	ldrh	r2, [r2, r1]
 800a096:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	228c      	movs	r2, #140	; 0x8c
 800a09c:	589b      	ldr	r3, [r3, r2]
 800a09e:	2b22      	cmp	r3, #34	; 0x22
 800a0a0:	d000      	beq.n	800a0a4 <UART_RxISR_16BIT+0x20>
 800a0a2:	e09a      	b.n	800a1da <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0aa:	213c      	movs	r1, #60	; 0x3c
 800a0ac:	187b      	adds	r3, r7, r1
 800a0ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0b6:	187b      	adds	r3, r7, r1
 800a0b8:	183a      	adds	r2, r7, r0
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	8812      	ldrh	r2, [r2, #0]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ca:	1c9a      	adds	r2, r3, #2
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	225e      	movs	r2, #94	; 0x5e
 800a0d4:	5a9b      	ldrh	r3, [r3, r2]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	b299      	uxth	r1, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	225e      	movs	r2, #94	; 0x5e
 800a0e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	225e      	movs	r2, #94	; 0x5e
 800a0e6:	5a9b      	ldrh	r3, [r3, r2]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d000      	beq.n	800a0f0 <UART_RxISR_16BIT+0x6c>
 800a0ee:	e07c      	b.n	800a1ea <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a0f6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	f383 8810 	msr	PRIMASK, r3
}
 800a104:	46c0      	nop			; (mov r8, r8)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4938      	ldr	r1, [pc, #224]	; (800a1f4 <UART_RxISR_16BIT+0x170>)
 800a112:	400a      	ands	r2, r1
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	f383 8810 	msr	PRIMASK, r3
}
 800a120:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a122:	f3ef 8310 	mrs	r3, PRIMASK
 800a126:	623b      	str	r3, [r7, #32]
  return(result);
 800a128:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
 800a12c:	2301      	movs	r3, #1
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	f383 8810 	msr	PRIMASK, r3
}
 800a136:	46c0      	nop			; (mov r8, r8)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2101      	movs	r1, #1
 800a144:	438a      	bics	r2, r1
 800a146:	609a      	str	r2, [r3, #8]
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14e:	f383 8810 	msr	PRIMASK, r3
}
 800a152:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	228c      	movs	r2, #140	; 0x8c
 800a158:	2120      	movs	r1, #32
 800a15a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d12f      	bne.n	800a1d0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a176:	f3ef 8310 	mrs	r3, PRIMASK
 800a17a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a17c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a180:	2301      	movs	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f383 8810 	msr	PRIMASK, r3
}
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2110      	movs	r1, #16
 800a198:	438a      	bics	r2, r1
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f383 8810 	msr	PRIMASK, r3
}
 800a1a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	2210      	movs	r2, #16
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d103      	bne.n	800a1be <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	225c      	movs	r2, #92	; 0x5c
 800a1c2:	5a9a      	ldrh	r2, [r3, r2]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	0011      	movs	r1, r2
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f7ff f959 	bl	8009480 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1ce:	e00c      	b.n	800a1ea <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f7f9 fb1e 	bl	8003814 <HAL_UART_RxCpltCallback>
}
 800a1d8:	e007      	b.n	800a1ea <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2108      	movs	r1, #8
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	619a      	str	r2, [r3, #24]
}
 800a1ea:	46c0      	nop			; (mov r8, r8)
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b010      	add	sp, #64	; 0x40
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	fffffedf 	.word	0xfffffedf

0800a1f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b09c      	sub	sp, #112	; 0x70
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a200:	236a      	movs	r3, #106	; 0x6a
 800a202:	18fb      	adds	r3, r7, r3
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	2160      	movs	r1, #96	; 0x60
 800a208:	5a52      	ldrh	r2, [r2, r1]
 800a20a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	228c      	movs	r2, #140	; 0x8c
 800a228:	589b      	ldr	r3, [r3, r2]
 800a22a:	2b22      	cmp	r3, #34	; 0x22
 800a22c:	d000      	beq.n	800a230 <UART_RxISR_8BIT_FIFOEN+0x38>
 800a22e:	e144      	b.n	800a4ba <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a230:	235e      	movs	r3, #94	; 0x5e
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	2168      	movs	r1, #104	; 0x68
 800a238:	5a52      	ldrh	r2, [r2, r1]
 800a23a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a23c:	e0eb      	b.n	800a416 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a244:	215c      	movs	r1, #92	; 0x5c
 800a246:	187b      	adds	r3, r7, r1
 800a248:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a24a:	187b      	adds	r3, r7, r1
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	236a      	movs	r3, #106	; 0x6a
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b2d9      	uxtb	r1, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25c:	400a      	ands	r2, r1
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	225e      	movs	r2, #94	; 0x5e
 800a270:	5a9b      	ldrh	r3, [r3, r2]
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b01      	subs	r3, #1
 800a276:	b299      	uxth	r1, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	225e      	movs	r2, #94	; 0x5e
 800a27c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a288:	2207      	movs	r2, #7
 800a28a:	4013      	ands	r3, r2
 800a28c:	d049      	beq.n	800a322 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a290:	2201      	movs	r2, #1
 800a292:	4013      	ands	r3, r2
 800a294:	d010      	beq.n	800a2b8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800a296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a298:	2380      	movs	r3, #128	; 0x80
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	4013      	ands	r3, r2
 800a29e:	d00b      	beq.n	800a2b8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2290      	movs	r2, #144	; 0x90
 800a2ac:	589b      	ldr	r3, [r3, r2]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2190      	movs	r1, #144	; 0x90
 800a2b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	4013      	ands	r3, r2
 800a2be:	d00f      	beq.n	800a2e0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800a2c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2290      	movs	r2, #144	; 0x90
 800a2d4:	589b      	ldr	r3, [r3, r2]
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2190      	movs	r1, #144	; 0x90
 800a2de:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	d00f      	beq.n	800a308 <UART_RxISR_8BIT_FIFOEN+0x110>
 800a2e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	d00b      	beq.n	800a308 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2204      	movs	r2, #4
 800a2f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2290      	movs	r2, #144	; 0x90
 800a2fc:	589b      	ldr	r3, [r3, r2]
 800a2fe:	2202      	movs	r2, #2
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2190      	movs	r1, #144	; 0x90
 800a306:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2290      	movs	r2, #144	; 0x90
 800a30c:	589b      	ldr	r3, [r3, r2]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d007      	beq.n	800a322 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0018      	movs	r0, r3
 800a316:	f7ff f8ab 	bl	8009470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2290      	movs	r2, #144	; 0x90
 800a31e:	2100      	movs	r1, #0
 800a320:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	225e      	movs	r2, #94	; 0x5e
 800a326:	5a9b      	ldrh	r3, [r3, r2]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d173      	bne.n	800a416 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a32e:	f3ef 8310 	mrs	r3, PRIMASK
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a336:	65bb      	str	r3, [r7, #88]	; 0x58
 800a338:	2301      	movs	r3, #1
 800a33a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	f383 8810 	msr	PRIMASK, r3
}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4961      	ldr	r1, [pc, #388]	; (800a4d4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800a350:	400a      	ands	r2, r1
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a356:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	f383 8810 	msr	PRIMASK, r3
}
 800a35e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a360:	f3ef 8310 	mrs	r3, PRIMASK
 800a364:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a368:	657b      	str	r3, [r7, #84]	; 0x54
 800a36a:	2301      	movs	r3, #1
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a370:	f383 8810 	msr	PRIMASK, r3
}
 800a374:	46c0      	nop			; (mov r8, r8)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4955      	ldr	r1, [pc, #340]	; (800a4d8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800a382:	400a      	ands	r2, r1
 800a384:	609a      	str	r2, [r3, #8]
 800a386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a388:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38c:	f383 8810 	msr	PRIMASK, r3
}
 800a390:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	228c      	movs	r2, #140	; 0x8c
 800a396:	2120      	movs	r1, #32
 800a398:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d12f      	bne.n	800a40e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b8:	623b      	str	r3, [r7, #32]
  return(result);
 800a3ba:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3bc:	653b      	str	r3, [r7, #80]	; 0x50
 800a3be:	2301      	movs	r3, #1
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	f383 8810 	msr	PRIMASK, r3
}
 800a3c8:	46c0      	nop			; (mov r8, r8)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2110      	movs	r1, #16
 800a3d6:	438a      	bics	r2, r1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	f383 8810 	msr	PRIMASK, r3
}
 800a3e4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	2210      	movs	r2, #16
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d103      	bne.n	800a3fc <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2210      	movs	r2, #16
 800a3fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	225c      	movs	r2, #92	; 0x5c
 800a400:	5a9a      	ldrh	r2, [r3, r2]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0011      	movs	r1, r2
 800a406:	0018      	movs	r0, r3
 800a408:	f7ff f83a 	bl	8009480 <HAL_UARTEx_RxEventCallback>
 800a40c:	e003      	b.n	800a416 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	0018      	movs	r0, r3
 800a412:	f7f9 f9ff 	bl	8003814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a416:	235e      	movs	r3, #94	; 0x5e
 800a418:	18fb      	adds	r3, r7, r3
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <UART_RxISR_8BIT_FIFOEN+0x232>
 800a420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a422:	2220      	movs	r2, #32
 800a424:	4013      	ands	r3, r2
 800a426:	d000      	beq.n	800a42a <UART_RxISR_8BIT_FIFOEN+0x232>
 800a428:	e709      	b.n	800a23e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a42a:	204e      	movs	r0, #78	; 0x4e
 800a42c:	183b      	adds	r3, r7, r0
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	215e      	movs	r1, #94	; 0x5e
 800a432:	5a52      	ldrh	r2, [r2, r1]
 800a434:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a436:	0001      	movs	r1, r0
 800a438:	187b      	adds	r3, r7, r1
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d044      	beq.n	800a4ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2268      	movs	r2, #104	; 0x68
 800a444:	5a9b      	ldrh	r3, [r3, r2]
 800a446:	187a      	adds	r2, r7, r1
 800a448:	8812      	ldrh	r2, [r2, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d23d      	bcs.n	800a4ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a44e:	f3ef 8310 	mrs	r3, PRIMASK
 800a452:	60bb      	str	r3, [r7, #8]
  return(result);
 800a454:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a456:	64bb      	str	r3, [r7, #72]	; 0x48
 800a458:	2301      	movs	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f383 8810 	msr	PRIMASK, r3
}
 800a462:	46c0      	nop			; (mov r8, r8)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	491b      	ldr	r1, [pc, #108]	; (800a4dc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800a470:	400a      	ands	r2, r1
 800a472:	609a      	str	r2, [r3, #8]
 800a474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f383 8810 	msr	PRIMASK, r3
}
 800a47e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a17      	ldr	r2, [pc, #92]	; (800a4e0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800a484:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a486:	f3ef 8310 	mrs	r3, PRIMASK
 800a48a:	617b      	str	r3, [r7, #20]
  return(result);
 800a48c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a48e:	647b      	str	r3, [r7, #68]	; 0x44
 800a490:	2301      	movs	r3, #1
 800a492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	f383 8810 	msr	PRIMASK, r3
}
 800a49a:	46c0      	nop			; (mov r8, r8)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2120      	movs	r1, #32
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f383 8810 	msr	PRIMASK, r3
}
 800a4b6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4b8:	e007      	b.n	800a4ca <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699a      	ldr	r2, [r3, #24]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2108      	movs	r1, #8
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	619a      	str	r2, [r3, #24]
}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b01c      	add	sp, #112	; 0x70
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	fffffeff 	.word	0xfffffeff
 800a4d8:	effffffe 	.word	0xeffffffe
 800a4dc:	efffffff 	.word	0xefffffff
 800a4e0:	08009f11 	.word	0x08009f11

0800a4e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b09e      	sub	sp, #120	; 0x78
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a4ec:	2372      	movs	r3, #114	; 0x72
 800a4ee:	18fb      	adds	r3, r7, r3
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	2160      	movs	r1, #96	; 0x60
 800a4f4:	5a52      	ldrh	r2, [r2, r1]
 800a4f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	228c      	movs	r2, #140	; 0x8c
 800a514:	589b      	ldr	r3, [r3, r2]
 800a516:	2b22      	cmp	r3, #34	; 0x22
 800a518:	d000      	beq.n	800a51c <UART_RxISR_16BIT_FIFOEN+0x38>
 800a51a:	e144      	b.n	800a7a6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a51c:	2366      	movs	r3, #102	; 0x66
 800a51e:	18fb      	adds	r3, r7, r3
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	2168      	movs	r1, #104	; 0x68
 800a524:	5a52      	ldrh	r2, [r2, r1]
 800a526:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a528:	e0eb      	b.n	800a702 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a530:	2164      	movs	r1, #100	; 0x64
 800a532:	187b      	adds	r3, r7, r1
 800a534:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800a53c:	187b      	adds	r3, r7, r1
 800a53e:	2272      	movs	r2, #114	; 0x72
 800a540:	18ba      	adds	r2, r7, r2
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	8812      	ldrh	r2, [r2, #0]
 800a546:	4013      	ands	r3, r2
 800a548:	b29a      	uxth	r2, r3
 800a54a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a54c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	1c9a      	adds	r2, r3, #2
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	225e      	movs	r2, #94	; 0x5e
 800a55c:	5a9b      	ldrh	r3, [r3, r2]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	b299      	uxth	r1, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	225e      	movs	r2, #94	; 0x5e
 800a568:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a574:	2207      	movs	r2, #7
 800a576:	4013      	ands	r3, r2
 800a578:	d049      	beq.n	800a60e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57c:	2201      	movs	r2, #1
 800a57e:	4013      	ands	r3, r2
 800a580:	d010      	beq.n	800a5a4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800a582:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a584:	2380      	movs	r3, #128	; 0x80
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	4013      	ands	r3, r2
 800a58a:	d00b      	beq.n	800a5a4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2201      	movs	r2, #1
 800a592:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2290      	movs	r2, #144	; 0x90
 800a598:	589b      	ldr	r3, [r3, r2]
 800a59a:	2201      	movs	r2, #1
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2190      	movs	r1, #144	; 0x90
 800a5a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	d00f      	beq.n	800a5cc <UART_RxISR_16BIT_FIFOEN+0xe8>
 800a5ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	d00b      	beq.n	800a5cc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2290      	movs	r2, #144	; 0x90
 800a5c0:	589b      	ldr	r3, [r3, r2]
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2190      	movs	r1, #144	; 0x90
 800a5ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ce:	2204      	movs	r2, #4
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	d00f      	beq.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0x110>
 800a5d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d00b      	beq.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2290      	movs	r2, #144	; 0x90
 800a5e8:	589b      	ldr	r3, [r3, r2]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2190      	movs	r1, #144	; 0x90
 800a5f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2290      	movs	r2, #144	; 0x90
 800a5f8:	589b      	ldr	r3, [r3, r2]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d007      	beq.n	800a60e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	0018      	movs	r0, r3
 800a602:	f7fe ff35 	bl	8009470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2290      	movs	r2, #144	; 0x90
 800a60a:	2100      	movs	r1, #0
 800a60c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	225e      	movs	r2, #94	; 0x5e
 800a612:	5a9b      	ldrh	r3, [r3, r2]
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d173      	bne.n	800a702 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a61a:	f3ef 8310 	mrs	r3, PRIMASK
 800a61e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a622:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a624:	2301      	movs	r3, #1
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a62a:	f383 8810 	msr	PRIMASK, r3
}
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4961      	ldr	r1, [pc, #388]	; (800a7c0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800a63c:	400a      	ands	r2, r1
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a642:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	f383 8810 	msr	PRIMASK, r3
}
 800a64a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64c:	f3ef 8310 	mrs	r3, PRIMASK
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800a652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a654:	65bb      	str	r3, [r7, #88]	; 0x58
 800a656:	2301      	movs	r3, #1
 800a658:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65c:	f383 8810 	msr	PRIMASK, r3
}
 800a660:	46c0      	nop			; (mov r8, r8)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4955      	ldr	r1, [pc, #340]	; (800a7c4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800a66e:	400a      	ands	r2, r1
 800a670:	609a      	str	r2, [r3, #8]
 800a672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a674:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a678:	f383 8810 	msr	PRIMASK, r3
}
 800a67c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	228c      	movs	r2, #140	; 0x8c
 800a682:	2120      	movs	r1, #32
 800a684:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a696:	2b01      	cmp	r3, #1
 800a698:	d12f      	bne.n	800a6fa <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a8:	657b      	str	r3, [r7, #84]	; 0x54
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	f383 8810 	msr	PRIMASK, r3
}
 800a6b4:	46c0      	nop			; (mov r8, r8)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2110      	movs	r1, #16
 800a6c2:	438a      	bics	r2, r1
 800a6c4:	601a      	str	r2, [r3, #0]
 800a6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	f383 8810 	msr	PRIMASK, r3
}
 800a6d0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	2210      	movs	r2, #16
 800a6da:	4013      	ands	r3, r2
 800a6dc:	2b10      	cmp	r3, #16
 800a6de:	d103      	bne.n	800a6e8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2210      	movs	r2, #16
 800a6e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	225c      	movs	r2, #92	; 0x5c
 800a6ec:	5a9a      	ldrh	r2, [r3, r2]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	0011      	movs	r1, r2
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	f7fe fec4 	bl	8009480 <HAL_UARTEx_RxEventCallback>
 800a6f8:	e003      	b.n	800a702 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	f7f9 f889 	bl	8003814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a702:	2366      	movs	r3, #102	; 0x66
 800a704:	18fb      	adds	r3, r7, r3
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a70c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a70e:	2220      	movs	r2, #32
 800a710:	4013      	ands	r3, r2
 800a712:	d000      	beq.n	800a716 <UART_RxISR_16BIT_FIFOEN+0x232>
 800a714:	e709      	b.n	800a52a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a716:	2052      	movs	r0, #82	; 0x52
 800a718:	183b      	adds	r3, r7, r0
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	215e      	movs	r1, #94	; 0x5e
 800a71e:	5a52      	ldrh	r2, [r2, r1]
 800a720:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a722:	0001      	movs	r1, r0
 800a724:	187b      	adds	r3, r7, r1
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d044      	beq.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2268      	movs	r2, #104	; 0x68
 800a730:	5a9b      	ldrh	r3, [r3, r2]
 800a732:	187a      	adds	r2, r7, r1
 800a734:	8812      	ldrh	r2, [r2, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d23d      	bcs.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a73a:	f3ef 8310 	mrs	r3, PRIMASK
 800a73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a740:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a744:	2301      	movs	r3, #1
 800a746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f383 8810 	msr	PRIMASK, r3
}
 800a74e:	46c0      	nop			; (mov r8, r8)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	491b      	ldr	r1, [pc, #108]	; (800a7c8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800a75c:	400a      	ands	r2, r1
 800a75e:	609a      	str	r2, [r3, #8]
 800a760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f383 8810 	msr	PRIMASK, r3
}
 800a76a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a17      	ldr	r2, [pc, #92]	; (800a7cc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800a770:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a772:	f3ef 8310 	mrs	r3, PRIMASK
 800a776:	61bb      	str	r3, [r7, #24]
  return(result);
 800a778:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a77a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a77c:	2301      	movs	r3, #1
 800a77e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2120      	movs	r1, #32
 800a794:	430a      	orrs	r2, r1
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a79a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	f383 8810 	msr	PRIMASK, r3
}
 800a7a2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7a4:	e007      	b.n	800a7b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2108      	movs	r1, #8
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	619a      	str	r2, [r3, #24]
}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	b01e      	add	sp, #120	; 0x78
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	fffffeff 	.word	0xfffffeff
 800a7c4:	effffffe 	.word	0xeffffffe
 800a7c8:	efffffff 	.word	0xefffffff
 800a7cc:	0800a085 	.word	0x0800a085

0800a7d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7d8:	46c0      	nop			; (mov r8, r8)
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	b002      	add	sp, #8
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7e8:	46c0      	nop			; (mov r8, r8)
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b002      	add	sp, #8
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7f8:	46c0      	nop			; (mov r8, r8)
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2284      	movs	r2, #132	; 0x84
 800a80c:	5c9b      	ldrb	r3, [r3, r2]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <HAL_UARTEx_DisableFifoMode+0x16>
 800a812:	2302      	movs	r3, #2
 800a814:	e027      	b.n	800a866 <HAL_UARTEx_DisableFifoMode+0x66>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2284      	movs	r2, #132	; 0x84
 800a81a:	2101      	movs	r1, #1
 800a81c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2288      	movs	r2, #136	; 0x88
 800a822:	2124      	movs	r1, #36	; 0x24
 800a824:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2101      	movs	r1, #1
 800a83a:	438a      	bics	r2, r1
 800a83c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4a0b      	ldr	r2, [pc, #44]	; (800a870 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a842:	4013      	ands	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2288      	movs	r2, #136	; 0x88
 800a858:	2120      	movs	r1, #32
 800a85a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2284      	movs	r2, #132	; 0x84
 800a860:	2100      	movs	r1, #0
 800a862:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	0018      	movs	r0, r3
 800a868:	46bd      	mov	sp, r7
 800a86a:	b004      	add	sp, #16
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	dfffffff 	.word	0xdfffffff

0800a874 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2284      	movs	r2, #132	; 0x84
 800a882:	5c9b      	ldrb	r3, [r3, r2]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d101      	bne.n	800a88c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a888:	2302      	movs	r3, #2
 800a88a:	e02e      	b.n	800a8ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2284      	movs	r2, #132	; 0x84
 800a890:	2101      	movs	r1, #1
 800a892:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2288      	movs	r2, #136	; 0x88
 800a898:	2124      	movs	r1, #36	; 0x24
 800a89a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	438a      	bics	r2, r1
 800a8b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	08d9      	lsrs	r1, r3, #3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	f000 f854 	bl	800a978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2288      	movs	r2, #136	; 0x88
 800a8dc:	2120      	movs	r1, #32
 800a8de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2284      	movs	r2, #132	; 0x84
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	b004      	add	sp, #16
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2284      	movs	r2, #132	; 0x84
 800a902:	5c9b      	ldrb	r3, [r3, r2]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e02f      	b.n	800a96c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2284      	movs	r2, #132	; 0x84
 800a910:	2101      	movs	r1, #1
 800a912:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2288      	movs	r2, #136	; 0x88
 800a918:	2124      	movs	r1, #36	; 0x24
 800a91a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2101      	movs	r1, #1
 800a930:	438a      	bics	r2, r1
 800a932:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	4a0e      	ldr	r2, [pc, #56]	; (800a974 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	0019      	movs	r1, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	0018      	movs	r0, r3
 800a94e:	f000 f813 	bl	800a978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2288      	movs	r2, #136	; 0x88
 800a95e:	2120      	movs	r1, #32
 800a960:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2284      	movs	r2, #132	; 0x84
 800a966:	2100      	movs	r1, #0
 800a968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	0018      	movs	r0, r3
 800a96e:	46bd      	mov	sp, r7
 800a970:	b004      	add	sp, #16
 800a972:	bd80      	pop	{r7, pc}
 800a974:	f1ffffff 	.word	0xf1ffffff

0800a978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a984:	2b00      	cmp	r3, #0
 800a986:	d108      	bne.n	800a99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	226a      	movs	r2, #106	; 0x6a
 800a98c:	2101      	movs	r1, #1
 800a98e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2268      	movs	r2, #104	; 0x68
 800a994:	2101      	movs	r1, #1
 800a996:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a998:	e043      	b.n	800aa22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a99a:	260f      	movs	r6, #15
 800a99c:	19bb      	adds	r3, r7, r6
 800a99e:	2208      	movs	r2, #8
 800a9a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9a2:	200e      	movs	r0, #14
 800a9a4:	183b      	adds	r3, r7, r0
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	0e5b      	lsrs	r3, r3, #25
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	240d      	movs	r4, #13
 800a9b6:	193b      	adds	r3, r7, r4
 800a9b8:	2107      	movs	r1, #7
 800a9ba:	400a      	ands	r2, r1
 800a9bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	0f5b      	lsrs	r3, r3, #29
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	250c      	movs	r5, #12
 800a9ca:	197b      	adds	r3, r7, r5
 800a9cc:	2107      	movs	r1, #7
 800a9ce:	400a      	ands	r2, r1
 800a9d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d2:	183b      	adds	r3, r7, r0
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	197a      	adds	r2, r7, r5
 800a9d8:	7812      	ldrb	r2, [r2, #0]
 800a9da:	4914      	ldr	r1, [pc, #80]	; (800aa2c <UARTEx_SetNbDataToProcess+0xb4>)
 800a9dc:	5c8a      	ldrb	r2, [r1, r2]
 800a9de:	435a      	muls	r2, r3
 800a9e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e2:	197b      	adds	r3, r7, r5
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	4a12      	ldr	r2, [pc, #72]	; (800aa30 <UARTEx_SetNbDataToProcess+0xb8>)
 800a9e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ea:	0019      	movs	r1, r3
 800a9ec:	f7f5 fc32 	bl	8000254 <__divsi3>
 800a9f0:	0003      	movs	r3, r0
 800a9f2:	b299      	uxth	r1, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	226a      	movs	r2, #106	; 0x6a
 800a9f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9fa:	19bb      	adds	r3, r7, r6
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	193a      	adds	r2, r7, r4
 800aa00:	7812      	ldrb	r2, [r2, #0]
 800aa02:	490a      	ldr	r1, [pc, #40]	; (800aa2c <UARTEx_SetNbDataToProcess+0xb4>)
 800aa04:	5c8a      	ldrb	r2, [r1, r2]
 800aa06:	435a      	muls	r2, r3
 800aa08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa0a:	193b      	adds	r3, r7, r4
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	4a08      	ldr	r2, [pc, #32]	; (800aa30 <UARTEx_SetNbDataToProcess+0xb8>)
 800aa10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa12:	0019      	movs	r1, r3
 800aa14:	f7f5 fc1e 	bl	8000254 <__divsi3>
 800aa18:	0003      	movs	r3, r0
 800aa1a:	b299      	uxth	r1, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2268      	movs	r2, #104	; 0x68
 800aa20:	5299      	strh	r1, [r3, r2]
}
 800aa22:	46c0      	nop			; (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b005      	add	sp, #20
 800aa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	08016a30 	.word	0x08016a30
 800aa30:	08016a38 	.word	0x08016a38

0800aa34 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800aa34:	b5b0      	push	{r4, r5, r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa3e:	250f      	movs	r5, #15
 800aa40:	197b      	adds	r3, r7, r5
 800aa42:	2200      	movs	r2, #0
 800aa44:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800aa46:	197c      	adds	r4, r7, r5
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0011      	movs	r1, r2
 800aa4e:	0018      	movs	r0, r3
 800aa50:	f001 ffec 	bl	800ca2c <VL53L0X_get_offset_calibration_data_micro_meter>
 800aa54:	0003      	movs	r3, r0
 800aa56:	7023      	strb	r3, [r4, #0]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800aa58:	197b      	adds	r3, r7, r5
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b25b      	sxtb	r3, r3
}
 800aa5e:	0018      	movs	r0, r3
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b004      	add	sp, #16
 800aa64:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aa68 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6a:	b097      	sub	sp, #92	; 0x5c
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa70:	2157      	movs	r1, #87	; 0x57
 800aa72:	187b      	adds	r3, r7, r1
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800aa78:	000a      	movs	r2, r1
 800aa7a:	18bb      	adds	r3, r7, r2
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b25b      	sxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d108      	bne.n	800aa96 <VL53L0X_DataInit+0x2e>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800aa84:	18bc      	adds	r4, r7, r2
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2188      	movs	r1, #136	; 0x88
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f005 fe93 	bl	80107b8 <VL53L0X_WrByte>
 800aa92:	0003      	movs	r3, r0
 800aa94:	7023      	strb	r3, [r4, #0]

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	22f0      	movs	r2, #240	; 0xf0
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	5499      	strb	r1, [r3, r2]
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	23a9      	movs	r3, #169	; 0xa9
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	21fa      	movs	r1, #250	; 0xfa
 800aaa6:	0089      	lsls	r1, r1, #2
 800aaa8:	52d1      	strh	r1, [r2, r3]

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	23aa      	movs	r3, #170	; 0xaa
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	21c8      	movs	r1, #200	; 0xc8
 800aab2:	0049      	lsls	r1, r1, #1
 800aab4:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	23ac      	movs	r3, #172	; 0xac
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	49b5      	ldr	r1, [pc, #724]	; (800ad94 <VL53L0X_DataInit+0x32c>)
 800aabe:	50d1      	str	r1, [r2, r3]
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	22d4      	movs	r2, #212	; 0xd4
 800aac4:	49b4      	ldr	r1, [pc, #720]	; (800ad98 <VL53L0X_DataInit+0x330>)
 800aac6:	5099      	str	r1, [r3, r2]

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800aace:	2657      	movs	r6, #87	; 0x57
 800aad0:	19bc      	adds	r4, r7, r6
 800aad2:	2510      	movs	r5, #16
 800aad4:	197a      	adds	r2, r7, r5
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	0011      	movs	r1, r2
 800aada:	0018      	movs	r0, r3
 800aadc:	f000 fb3b 	bl	800b156 <VL53L0X_GetDeviceParameters>
 800aae0:	0003      	movs	r3, r0
 800aae2:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800aae4:	19bb      	adds	r3, r7, r6
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10d      	bne.n	800ab0a <VL53L0X_DataInit+0xa2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800aaee:	197b      	adds	r3, r7, r5
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800aaf4:	197b      	adds	r3, r7, r5
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	705a      	strb	r2, [r3, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	197a      	adds	r2, r7, r5
 800aafe:	3310      	adds	r3, #16
 800ab00:	0011      	movs	r1, r2
 800ab02:	2240      	movs	r2, #64	; 0x40
 800ab04:	0018      	movs	r0, r3
 800ab06:	f008 f999 	bl	8012e3c <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	239a      	movs	r3, #154	; 0x9a
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	2164      	movs	r1, #100	; 0x64
 800ab12:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	239b      	movs	r3, #155	; 0x9b
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	21e1      	movs	r1, #225	; 0xe1
 800ab1c:	0089      	lsls	r1, r1, #2
 800ab1e:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	239c      	movs	r3, #156	; 0x9c
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	21fa      	movs	r1, #250	; 0xfa
 800ab28:	0049      	lsls	r1, r1, #1
 800ab2a:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	239e      	movs	r3, #158	; 0x9e
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	21a0      	movs	r1, #160	; 0xa0
 800ab34:	0109      	lsls	r1, r1, #4
 800ab36:	52d1      	strh	r1, [r2, r3]

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	23a8      	movs	r3, #168	; 0xa8
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	2101      	movs	r1, #1
 800ab40:	54d1      	strb	r1, [r2, r3]

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2201      	movs	r2, #1
 800ab46:	2180      	movs	r1, #128	; 0x80
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f005 fe35 	bl	80107b8 <VL53L0X_WrByte>
 800ab4e:	0003      	movs	r3, r0
 800ab50:	0019      	movs	r1, r3
 800ab52:	2457      	movs	r4, #87	; 0x57
 800ab54:	193b      	adds	r3, r7, r4
 800ab56:	193a      	adds	r2, r7, r4
 800ab58:	7812      	ldrb	r2, [r2, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	21ff      	movs	r1, #255	; 0xff
 800ab64:	0018      	movs	r0, r3
 800ab66:	f005 fe27 	bl	80107b8 <VL53L0X_WrByte>
 800ab6a:	0003      	movs	r3, r0
 800ab6c:	0019      	movs	r1, r3
 800ab6e:	193b      	adds	r3, r7, r4
 800ab70:	193a      	adds	r2, r7, r4
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f005 fe1a 	bl	80107b8 <VL53L0X_WrByte>
 800ab84:	0003      	movs	r3, r0
 800ab86:	0019      	movs	r1, r3
 800ab88:	193b      	adds	r3, r7, r4
 800ab8a:	193a      	adds	r2, r7, r4
 800ab8c:	7812      	ldrb	r2, [r2, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800ab92:	250f      	movs	r5, #15
 800ab94:	197a      	adds	r2, r7, r5
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2191      	movs	r1, #145	; 0x91
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	f005 febb 	bl	8010916 <VL53L0X_RdByte>
 800aba0:	0003      	movs	r3, r0
 800aba2:	0019      	movs	r1, r3
 800aba4:	193b      	adds	r3, r7, r4
 800aba6:	193a      	adds	r2, r7, r4
 800aba8:	7812      	ldrb	r2, [r2, #0]
 800abaa:	430a      	orrs	r2, r1
 800abac:	701a      	strb	r2, [r3, #0]
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800abae:	197b      	adds	r3, r7, r5
 800abb0:	7819      	ldrb	r1, [r3, #0]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	239d      	movs	r3, #157	; 0x9d
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	54d1      	strb	r1, [r2, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	2100      	movs	r1, #0
 800abc0:	0018      	movs	r0, r3
 800abc2:	f005 fdf9 	bl	80107b8 <VL53L0X_WrByte>
 800abc6:	0003      	movs	r3, r0
 800abc8:	0019      	movs	r1, r3
 800abca:	193b      	adds	r3, r7, r4
 800abcc:	193a      	adds	r2, r7, r4
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	430a      	orrs	r2, r1
 800abd2:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	21ff      	movs	r1, #255	; 0xff
 800abda:	0018      	movs	r0, r3
 800abdc:	f005 fdec 	bl	80107b8 <VL53L0X_WrByte>
 800abe0:	0003      	movs	r3, r0
 800abe2:	0019      	movs	r1, r3
 800abe4:	193b      	adds	r3, r7, r4
 800abe6:	193a      	adds	r2, r7, r4
 800abe8:	7812      	ldrb	r2, [r2, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	2180      	movs	r1, #128	; 0x80
 800abf4:	0018      	movs	r0, r3
 800abf6:	f005 fddf 	bl	80107b8 <VL53L0X_WrByte>
 800abfa:	0003      	movs	r3, r0
 800abfc:	0019      	movs	r1, r3
 800abfe:	193b      	adds	r3, r7, r4
 800ac00:	193a      	adds	r2, r7, r4
 800ac02:	7812      	ldrb	r2, [r2, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	701a      	strb	r2, [r3, #0]

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ac08:	2300      	movs	r3, #0
 800ac0a:	653b      	str	r3, [r7, #80]	; 0x50
 800ac0c:	e016      	b.n	800ac3c <VL53L0X_DataInit+0x1d4>
		if (Status == VL53L0X_ERROR_NONE)
 800ac0e:	2457      	movs	r4, #87	; 0x57
 800ac10:	193b      	adds	r3, r7, r4
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	b25b      	sxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d114      	bne.n	800ac44 <VL53L0X_DataInit+0x1dc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800ac1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac1c:	b299      	uxth	r1, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	0018      	movs	r0, r3
 800ac24:	f000 fe7e 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
 800ac28:	0003      	movs	r3, r0
 800ac2a:	0019      	movs	r1, r3
 800ac2c:	193b      	adds	r3, r7, r4
 800ac2e:	193a      	adds	r2, r7, r4
 800ac30:	7812      	ldrb	r2, [r2, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800ac36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac38:	3301      	adds	r3, #1
 800ac3a:	653b      	str	r3, [r7, #80]	; 0x50
 800ac3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	dde5      	ble.n	800ac0e <VL53L0X_DataInit+0x1a6>
 800ac42:	e000      	b.n	800ac46 <VL53L0X_DataInit+0x1de>
		else
			break;
 800ac44:	46c0      	nop			; (mov r8, r8)

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800ac46:	2257      	movs	r2, #87	; 0x57
 800ac48:	18bb      	adds	r3, r7, r2
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	b25b      	sxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d108      	bne.n	800ac64 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ac52:	18bc      	adds	r4, r7, r2
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	2102      	movs	r1, #2
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 fe62 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
 800ac60:	0003      	movs	r3, r0
 800ac62:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ac64:	2257      	movs	r2, #87	; 0x57
 800ac66:	18bb      	adds	r3, r7, r2
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	b25b      	sxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d108      	bne.n	800ac82 <VL53L0X_DataInit+0x21a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ac70:	18bc      	adds	r4, r7, r2
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	2103      	movs	r1, #3
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 fe53 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800ac82:	2257      	movs	r2, #87	; 0x57
 800ac84:	18bb      	adds	r3, r7, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	b25b      	sxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d108      	bne.n	800aca0 <VL53L0X_DataInit+0x238>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ac8e:	18bc      	adds	r4, r7, r2
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	2104      	movs	r1, #4
 800ac96:	0018      	movs	r0, r3
 800ac98:	f000 fe44 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
 800ac9c:	0003      	movs	r3, r0
 800ac9e:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800aca0:	2257      	movs	r2, #87	; 0x57
 800aca2:	18bb      	adds	r3, r7, r2
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <VL53L0X_DataInit+0x256>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800acac:	18bc      	adds	r4, r7, r2
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	2105      	movs	r1, #5
 800acb4:	0018      	movs	r0, r3
 800acb6:	f000 fe35 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
 800acba:	0003      	movs	r3, r0
 800acbc:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800acbe:	2257      	movs	r2, #87	; 0x57
 800acc0:	18bb      	adds	r3, r7, r2
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	b25b      	sxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <VL53L0X_DataInit+0x276>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800acca:	18bc      	adds	r4, r7, r2
 800accc:	2390      	movs	r3, #144	; 0x90
 800acce:	035a      	lsls	r2, r3, #13
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2100      	movs	r1, #0
 800acd4:	0018      	movs	r0, r3
 800acd6:	f000 ff11 	bl	800bafc <VL53L0X_SetLimitCheckValue>
 800acda:	0003      	movs	r3, r0
 800acdc:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800acde:	2257      	movs	r2, #87	; 0x57
 800ace0:	18bb      	adds	r3, r7, r2
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b25b      	sxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d109      	bne.n	800acfe <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800acea:	18bc      	adds	r4, r7, r2
 800acec:	2380      	movs	r3, #128	; 0x80
 800acee:	01da      	lsls	r2, r3, #7
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2101      	movs	r1, #1
 800acf4:	0018      	movs	r0, r3
 800acf6:	f000 ff01 	bl	800bafc <VL53L0X_SetLimitCheckValue>
 800acfa:	0003      	movs	r3, r0
 800acfc:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800acfe:	2257      	movs	r2, #87	; 0x57
 800ad00:	18bb      	adds	r3, r7, r2
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <VL53L0X_DataInit+0x2b6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad0a:	18bc      	adds	r4, r7, r2
 800ad0c:	238c      	movs	r3, #140	; 0x8c
 800ad0e:	039a      	lsls	r2, r3, #14
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2102      	movs	r1, #2
 800ad14:	0018      	movs	r0, r3
 800ad16:	f000 fef1 	bl	800bafc <VL53L0X_SetLimitCheckValue>
 800ad1a:	0003      	movs	r3, r0
 800ad1c:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad1e:	2257      	movs	r2, #87	; 0x57
 800ad20:	18bb      	adds	r3, r7, r2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d108      	bne.n	800ad3c <VL53L0X_DataInit+0x2d4>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad2a:	18bc      	adds	r4, r7, r2
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2103      	movs	r1, #3
 800ad32:	0018      	movs	r0, r3
 800ad34:	f000 fee2 	bl	800bafc <VL53L0X_SetLimitCheckValue>
 800ad38:	0003      	movs	r3, r0
 800ad3a:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad3c:	2057      	movs	r0, #87	; 0x57
 800ad3e:	183b      	adds	r3, r7, r0
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d112      	bne.n	800ad6e <VL53L0X_DataInit+0x306>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	2398      	movs	r3, #152	; 0x98
 800ad4c:	005b      	lsls	r3, r3, #1
 800ad4e:	21ff      	movs	r1, #255	; 0xff
 800ad50:	54d1      	strb	r1, [r2, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ad52:	183c      	adds	r4, r7, r0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	22ff      	movs	r2, #255	; 0xff
 800ad58:	2101      	movs	r1, #1
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f005 fd2c 	bl	80107b8 <VL53L0X_WrByte>
 800ad60:	0003      	movs	r3, r0
 800ad62:	7023      	strb	r3, [r4, #0]
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	2399      	movs	r3, #153	; 0x99
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	54d1      	strb	r1, [r2, r3]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ad6e:	2357      	movs	r3, #87	; 0x57
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	b25b      	sxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d104      	bne.n	800ad84 <VL53L0X_DataInit+0x31c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	2316      	movs	r3, #22
 800ad7e:	33ff      	adds	r3, #255	; 0xff
 800ad80:	2100      	movs	r1, #0
 800ad82:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800ad84:	2357      	movs	r3, #87	; 0x57
 800ad86:	18fb      	adds	r3, r7, r3
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b25b      	sxtb	r3, r3
}
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	b017      	add	sp, #92	; 0x5c
 800ad92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad94:	00016b85 	.word	0x00016b85
 800ad98:	000970a4 	.word	0x000970a4

0800ad9c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	b09f      	sub	sp, #124	; 0x7c
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ada4:	246f      	movs	r4, #111	; 0x6f
 800ada6:	193b      	adds	r3, r7, r4
 800ada8:	2200      	movs	r2, #0
 800adaa:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800adac:	231c      	movs	r3, #28
 800adae:	18fb      	adds	r3, r7, r3
 800adb0:	0018      	movs	r0, r3
 800adb2:	2340      	movs	r3, #64	; 0x40
 800adb4:	001a      	movs	r2, r3
 800adb6:	2100      	movs	r1, #0
 800adb8:	f008 f849 	bl	8012e4e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800adbc:	231a      	movs	r3, #26
 800adbe:	18fb      	adds	r3, r7, r3
 800adc0:	2200      	movs	r2, #0
 800adc2:	801a      	strh	r2, [r3, #0]
	uint8_t tempbyte = 0;
 800adc4:	2319      	movs	r3, #25
 800adc6:	18fb      	adds	r3, r7, r3
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
	uint8_t UseInternalTuningSettings = 0;
 800adcc:	2367      	movs	r3, #103	; 0x67
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	2200      	movs	r2, #0
 800add2:	701a      	strb	r2, [r3, #0]
	uint32_t count = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800add8:	2318      	movs	r3, #24
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800ade4:	255f      	movs	r5, #95	; 0x5f
 800ade6:	197b      	adds	r3, r7, r5
 800ade8:	2200      	movs	r2, #0
 800adea:	701a      	strb	r2, [r3, #0]
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800adec:	193c      	adds	r4, r7, r4
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2101      	movs	r1, #1
 800adf2:	0018      	movs	r0, r3
 800adf4:	f002 ff14 	bl	800dc20 <VL53L0X_get_info_from_device>
 800adf8:	0003      	movs	r3, r0
 800adfa:	7023      	strb	r3, [r4, #0]

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	2314      	movs	r3, #20
 800ae00:	33ff      	adds	r3, #255	; 0xff
 800ae02:	5cd3      	ldrb	r3, [r2, r3]
 800ae04:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ae06:	197b      	adds	r3, r7, r5
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	228a      	movs	r2, #138	; 0x8a
 800ae0c:	0052      	lsls	r2, r2, #1
 800ae0e:	5c8a      	ldrb	r2, [r1, r2]
 800ae10:	701a      	strb	r2, [r3, #0]
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800ae12:	197b      	adds	r3, r7, r5
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d80e      	bhi.n	800ae38 <VL53L0X_StaticInit+0x9c>
 800ae1a:	197b      	adds	r3, r7, r5
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d102      	bne.n	800ae28 <VL53L0X_StaticInit+0x8c>
		((ApertureSpads == 1) && (count > 32)) ||
 800ae22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d807      	bhi.n	800ae38 <VL53L0X_StaticInit+0x9c>
 800ae28:	235f      	movs	r3, #95	; 0x5f
 800ae2a:	18fb      	adds	r3, r7, r3
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10f      	bne.n	800ae52 <VL53L0X_StaticInit+0xb6>
		((ApertureSpads == 0) && (count > 12)))
 800ae32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae34:	2b0c      	cmp	r3, #12
 800ae36:	d90c      	bls.n	800ae52 <VL53L0X_StaticInit+0xb6>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800ae38:	236f      	movs	r3, #111	; 0x6f
 800ae3a:	18fc      	adds	r4, r7, r3
 800ae3c:	2318      	movs	r3, #24
 800ae3e:	18fa      	adds	r2, r7, r3
 800ae40:	2314      	movs	r3, #20
 800ae42:	18f9      	adds	r1, r7, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	0018      	movs	r0, r3
 800ae48:	f002 f83f 	bl	800ceca <VL53L0X_perform_ref_spad_management>
 800ae4c:	0003      	movs	r3, r0
 800ae4e:	7023      	strb	r3, [r4, #0]
 800ae50:	e00b      	b.n	800ae6a <VL53L0X_StaticInit+0xce>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800ae52:	236f      	movs	r3, #111	; 0x6f
 800ae54:	18fc      	adds	r4, r7, r3
 800ae56:	235f      	movs	r3, #95	; 0x5f
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	0018      	movs	r0, r3
 800ae62:	f002 faa1 	bl	800d3a8 <VL53L0X_set_reference_spads>
 800ae66:	0003      	movs	r3, r0
 800ae68:	7023      	strb	r3, [r4, #0]


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800ae6a:	4bb2      	ldr	r3, [pc, #712]	; (800b134 <VL53L0X_StaticInit+0x398>)
 800ae6c:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800ae6e:	236f      	movs	r3, #111	; 0x6f
 800ae70:	18fb      	adds	r3, r7, r3
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b25b      	sxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d112      	bne.n	800aea0 <VL53L0X_StaticInit+0x104>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800ae7a:	2067      	movs	r0, #103	; 0x67
 800ae7c:	183b      	adds	r3, r7, r0
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	22a8      	movs	r2, #168	; 0xa8
 800ae82:	0052      	lsls	r2, r2, #1
 800ae84:	5c8a      	ldrb	r2, [r1, r2]
 800ae86:	701a      	strb	r2, [r3, #0]
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800ae88:	183b      	adds	r3, r7, r0
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d105      	bne.n	800ae9c <VL53L0X_StaticInit+0x100>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	23a6      	movs	r3, #166	; 0xa6
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	58d3      	ldr	r3, [r2, r3]
 800ae98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae9a:	e001      	b.n	800aea0 <VL53L0X_StaticInit+0x104>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800ae9c:	4ba5      	ldr	r3, [pc, #660]	; (800b134 <VL53L0X_StaticInit+0x398>)
 800ae9e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800aea0:	226f      	movs	r2, #111	; 0x6f
 800aea2:	18bb      	adds	r3, r7, r2
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d108      	bne.n	800aebe <VL53L0X_StaticInit+0x122>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800aeac:	18bc      	adds	r4, r7, r2
 800aeae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	0011      	movs	r1, r2
 800aeb4:	0018      	movs	r0, r3
 800aeb6:	f004 fc2d 	bl	800f714 <VL53L0X_load_tuning_settings>
 800aeba:	0003      	movs	r3, r0
 800aebc:	7023      	strb	r3, [r4, #0]


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800aebe:	226f      	movs	r2, #111	; 0x6f
 800aec0:	18bb      	adds	r3, r7, r2
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10a      	bne.n	800aee0 <VL53L0X_StaticInit+0x144>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800aeca:	18bc      	adds	r4, r7, r2
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	2300      	movs	r3, #0
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	2304      	movs	r3, #4
 800aed4:	2200      	movs	r2, #0
 800aed6:	2100      	movs	r1, #0
 800aed8:	f001 fb3e 	bl	800c558 <VL53L0X_SetGpioConfig>
 800aedc:	0003      	movs	r3, r0
 800aede:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aee0:	256f      	movs	r5, #111	; 0x6f
 800aee2:	197b      	adds	r3, r7, r5
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d123      	bne.n	800af34 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aeec:	197c      	adds	r4, r7, r5
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	21ff      	movs	r1, #255	; 0xff
 800aef4:	0018      	movs	r0, r3
 800aef6:	f005 fc5f 	bl	80107b8 <VL53L0X_WrByte>
 800aefa:	0003      	movs	r3, r0
 800aefc:	7023      	strb	r3, [r4, #0]
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800aefe:	231a      	movs	r3, #26
 800af00:	18fa      	adds	r2, r7, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2184      	movs	r1, #132	; 0x84
 800af06:	0018      	movs	r0, r3
 800af08:	f005 fd3a 	bl	8010980 <VL53L0X_RdWord>
 800af0c:	0003      	movs	r3, r0
 800af0e:	0019      	movs	r1, r3
 800af10:	197b      	adds	r3, r7, r5
 800af12:	197a      	adds	r2, r7, r5
 800af14:	7812      	ldrb	r2, [r2, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	21ff      	movs	r1, #255	; 0xff
 800af20:	0018      	movs	r0, r3
 800af22:	f005 fc49 	bl	80107b8 <VL53L0X_WrByte>
 800af26:	0003      	movs	r3, r0
 800af28:	0019      	movs	r1, r3
 800af2a:	197b      	adds	r3, r7, r5
 800af2c:	197a      	adds	r2, r7, r5
 800af2e:	7812      	ldrb	r2, [r2, #0]
 800af30:	430a      	orrs	r2, r1
 800af32:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af34:	236f      	movs	r3, #111	; 0x6f
 800af36:	18fb      	adds	r3, r7, r3
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <VL53L0X_StaticInit+0x1b4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800af40:	231a      	movs	r3, #26
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	0019      	movs	r1, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	22d4      	movs	r2, #212	; 0xd4
 800af4e:	5099      	str	r1, [r3, r2]
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800af50:	226f      	movs	r2, #111	; 0x6f
 800af52:	18bb      	adds	r3, r7, r2
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	b25b      	sxtb	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <VL53L0X_StaticInit+0x1d4>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800af5c:	18bc      	adds	r4, r7, r2
 800af5e:	231c      	movs	r3, #28
 800af60:	18fa      	adds	r2, r7, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	0011      	movs	r1, r2
 800af66:	0018      	movs	r0, r3
 800af68:	f000 f8f5 	bl	800b156 <VL53L0X_GetDeviceParameters>
 800af6c:	0003      	movs	r3, r0
 800af6e:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE) {
 800af70:	256f      	movs	r5, #111	; 0x6f
 800af72:	197b      	adds	r3, r7, r5
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	b25b      	sxtb	r3, r3
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d114      	bne.n	800afa6 <VL53L0X_StaticInit+0x20a>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800af7c:	197c      	adds	r4, r7, r5
 800af7e:	2619      	movs	r6, #25
 800af80:	19ba      	adds	r2, r7, r6
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	0011      	movs	r1, r2
 800af86:	0018      	movs	r0, r3
 800af88:	f000 f9e4 	bl	800b354 <VL53L0X_GetFractionEnable>
 800af8c:	0003      	movs	r3, r0
 800af8e:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE)
 800af90:	197b      	adds	r3, r7, r5
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b25b      	sxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <VL53L0X_StaticInit+0x20a>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800af9a:	19bb      	adds	r3, r7, r6
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	2332      	movs	r3, #50	; 0x32
 800afa2:	33ff      	adds	r3, #255	; 0xff
 800afa4:	54d1      	strb	r1, [r2, r3]

	}

	if (Status == VL53L0X_ERROR_NONE)
 800afa6:	236f      	movs	r3, #111	; 0x6f
 800afa8:	18fb      	adds	r3, r7, r3
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b25b      	sxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d108      	bne.n	800afc4 <VL53L0X_StaticInit+0x228>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	221c      	movs	r2, #28
 800afb6:	18ba      	adds	r2, r7, r2
 800afb8:	3310      	adds	r3, #16
 800afba:	0011      	movs	r1, r2
 800afbc:	2240      	movs	r2, #64	; 0x40
 800afbe:	0018      	movs	r0, r3
 800afc0:	f007 ff3c 	bl	8012e3c <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800afc4:	256f      	movs	r5, #111	; 0x6f
 800afc6:	197b      	adds	r3, r7, r5
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	b25b      	sxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d114      	bne.n	800affa <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_RdByte(Dev,
 800afd0:	197c      	adds	r4, r7, r5
 800afd2:	2619      	movs	r6, #25
 800afd4:	19ba      	adds	r2, r7, r6
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2101      	movs	r1, #1
 800afda:	0018      	movs	r0, r3
 800afdc:	f005 fc9b 	bl	8010916 <VL53L0X_RdByte>
 800afe0:	0003      	movs	r3, r0
 800afe2:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800afe4:	197b      	adds	r3, r7, r5
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <VL53L0X_StaticInit+0x25e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800afee:	19bb      	adds	r3, r7, r6
 800aff0:	7819      	ldrb	r1, [r3, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	2398      	movs	r3, #152	; 0x98
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	54d1      	strb	r1, [r2, r3]

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800affa:	226f      	movs	r2, #111	; 0x6f
 800affc:	18bb      	adds	r3, r7, r2
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	b25b      	sxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d108      	bne.n	800b018 <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b006:	18bc      	adds	r4, r7, r2
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	0018      	movs	r0, r3
 800b010:	f000 fa38 	bl	800b484 <VL53L0X_SetSequenceStepEnable>
 800b014:	0003      	movs	r3, r0
 800b016:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b018:	226f      	movs	r2, #111	; 0x6f
 800b01a:	18bb      	adds	r3, r7, r2
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	b25b      	sxtb	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d108      	bne.n	800b036 <VL53L0X_StaticInit+0x29a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b024:	18bc      	adds	r4, r7, r2
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	2102      	movs	r1, #2
 800b02c:	0018      	movs	r0, r3
 800b02e:	f000 fa29 	bl	800b484 <VL53L0X_SetSequenceStepEnable>
 800b032:	0003      	movs	r3, r0
 800b034:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b036:	236f      	movs	r3, #111	; 0x6f
 800b038:	18fb      	adds	r3, r7, r3
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b25b      	sxtb	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d104      	bne.n	800b04c <VL53L0X_StaticInit+0x2b0>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	2399      	movs	r3, #153	; 0x99
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	2103      	movs	r1, #3
 800b04a:	54d1      	strb	r1, [r2, r3]



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b04c:	226f      	movs	r2, #111	; 0x6f
 800b04e:	18bb      	adds	r3, r7, r2
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b25b      	sxtb	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	d109      	bne.n	800b06c <VL53L0X_StaticInit+0x2d0>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b058:	18bc      	adds	r4, r7, r2
 800b05a:	2313      	movs	r3, #19
 800b05c:	18fa      	adds	r2, r7, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2100      	movs	r1, #0
 800b062:	0018      	movs	r0, r3
 800b064:	f000 f9f0 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800b068:	0003      	movs	r3, r0
 800b06a:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b06c:	236f      	movs	r3, #111	; 0x6f
 800b06e:	18fb      	adds	r3, r7, r3
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b25b      	sxtb	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <VL53L0X_StaticInit+0x2e8>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b078:	2313      	movs	r3, #19
 800b07a:	18fb      	adds	r3, r7, r3
 800b07c:	7819      	ldrb	r1, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	22e8      	movs	r2, #232	; 0xe8
 800b082:	5499      	strb	r1, [r3, r2]
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b084:	226f      	movs	r2, #111	; 0x6f
 800b086:	18bb      	adds	r3, r7, r2
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	b25b      	sxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d109      	bne.n	800b0a4 <VL53L0X_StaticInit+0x308>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b090:	18bc      	adds	r4, r7, r2
 800b092:	2313      	movs	r3, #19
 800b094:	18fa      	adds	r2, r7, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2101      	movs	r1, #1
 800b09a:	0018      	movs	r0, r3
 800b09c:	f000 f9d4 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800b0a0:	0003      	movs	r3, r0
 800b0a2:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0a4:	236f      	movs	r3, #111	; 0x6f
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b25b      	sxtb	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <VL53L0X_StaticInit+0x320>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0b0:	2313      	movs	r3, #19
 800b0b2:	18fb      	adds	r3, r7, r3
 800b0b4:	7819      	ldrb	r1, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	22e0      	movs	r2, #224	; 0xe0
 800b0ba:	5499      	strb	r1, [r3, r2]
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0bc:	226f      	movs	r2, #111	; 0x6f
 800b0be:	18bb      	adds	r3, r7, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b25b      	sxtb	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d109      	bne.n	800b0dc <VL53L0X_StaticInit+0x340>
		Status = get_sequence_step_timeout(
 800b0c8:	18bc      	adds	r4, r7, r2
 800b0ca:	230c      	movs	r3, #12
 800b0cc:	18fa      	adds	r2, r7, r3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2103      	movs	r1, #3
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	f003 fba8 	bl	800e828 <get_sequence_step_timeout>
 800b0d8:	0003      	movs	r3, r0
 800b0da:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0dc:	236f      	movs	r3, #111	; 0x6f
 800b0de:	18fb      	adds	r3, r7, r3
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	b25b      	sxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <VL53L0X_StaticInit+0x354>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	21e4      	movs	r1, #228	; 0xe4
 800b0ee:	505a      	str	r2, [r3, r1]
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b0f0:	226f      	movs	r2, #111	; 0x6f
 800b0f2:	18bb      	adds	r3, r7, r2
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	b25b      	sxtb	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d109      	bne.n	800b110 <VL53L0X_StaticInit+0x374>
		Status = get_sequence_step_timeout(
 800b0fc:	18bc      	adds	r4, r7, r2
 800b0fe:	230c      	movs	r3, #12
 800b100:	18fa      	adds	r2, r7, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2104      	movs	r1, #4
 800b106:	0018      	movs	r0, r3
 800b108:	f003 fb8e 	bl	800e828 <get_sequence_step_timeout>
 800b10c:	0003      	movs	r3, r0
 800b10e:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b110:	236f      	movs	r3, #111	; 0x6f
 800b112:	18fb      	adds	r3, r7, r3
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b25b      	sxtb	r3, r3
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d103      	bne.n	800b124 <VL53L0X_StaticInit+0x388>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	21dc      	movs	r1, #220	; 0xdc
 800b122:	505a      	str	r2, [r3, r1]
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b124:	236f      	movs	r3, #111	; 0x6f
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	b25b      	sxtb	r3, r3
}
 800b12c:	0018      	movs	r0, r3
 800b12e:	46bd      	mov	sp, r7
 800b130:	b01d      	add	sp, #116	; 0x74
 800b132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b134:	2000000c 	.word	0x2000000c

0800b138 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b140:	210f      	movs	r1, #15
 800b142:	187b      	adds	r3, r7, r1
 800b144:	229d      	movs	r2, #157	; 0x9d
 800b146:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b148:	187b      	adds	r3, r7, r1
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b25b      	sxtb	r3, r3
}
 800b14e:	0018      	movs	r0, r3
 800b150:	46bd      	mov	sp, r7
 800b152:	b004      	add	sp, #16
 800b154:	bd80      	pop	{r7, pc}

0800b156 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b156:	b5b0      	push	{r4, r5, r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b160:	250f      	movs	r5, #15
 800b162:	197b      	adds	r3, r7, r5
 800b164:	2200      	movs	r2, #0
 800b166:	701a      	strb	r2, [r3, #0]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	197c      	adds	r4, r7, r5
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	0011      	movs	r1, r2
 800b170:	0018      	movs	r0, r3
 800b172:	f000 f8db 	bl	800b32c <VL53L0X_GetDeviceMode>
 800b176:	0003      	movs	r3, r0
 800b178:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800b17a:	0029      	movs	r1, r5
 800b17c:	187b      	adds	r3, r7, r1
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b25b      	sxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10a      	bne.n	800b19c <VL53L0X_GetDeviceParameters+0x46>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	3308      	adds	r3, #8
 800b18a:	001a      	movs	r2, r3
 800b18c:	187c      	adds	r4, r7, r1
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	0011      	movs	r1, r2
 800b192:	0018      	movs	r0, r3
 800b194:	f000 fb2d 	bl	800b7f2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b198:	0003      	movs	r3, r0
 800b19a:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b19c:	230f      	movs	r3, #15
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b25b      	sxtb	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <VL53L0X_GetDeviceParameters+0x58>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b1ae:	210f      	movs	r1, #15
 800b1b0:	187b      	adds	r3, r7, r1
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	b25b      	sxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	3310      	adds	r3, #16
 800b1be:	001a      	movs	r2, r3
 800b1c0:	187c      	adds	r4, r7, r1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	0011      	movs	r1, r2
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 fb70 	bl	800b8ac <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b1cc:	0003      	movs	r3, r0
 800b1ce:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b1d0:	210f      	movs	r1, #15
 800b1d2:	187b      	adds	r3, r7, r1
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <VL53L0X_GetDeviceParameters+0x9c>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	3314      	adds	r3, #20
 800b1e0:	001a      	movs	r2, r3
 800b1e2:	187c      	adds	r4, r7, r1
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	0011      	movs	r1, r2
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f7ff fc23 	bl	800aa34 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b1ee:	0003      	movs	r3, r0
 800b1f0:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b1f2:	230f      	movs	r3, #15
 800b1f4:	18fb      	adds	r3, r7, r3
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	b25b      	sxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d13b      	bne.n	800b276 <VL53L0X_GetDeviceParameters+0x120>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b1fe:	2300      	movs	r3, #0
 800b200:	60bb      	str	r3, [r7, #8]
 800b202:	e031      	b.n	800b268 <VL53L0X_GetDeviceParameters+0x112>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b204:	240f      	movs	r4, #15
 800b206:	193b      	adds	r3, r7, r4
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	b25b      	sxtb	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d12f      	bne.n	800b270 <VL53L0X_GetDeviceParameters+0x11a>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	b299      	uxth	r1, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3308      	adds	r3, #8
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	18d3      	adds	r3, r2, r3
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	0018      	movs	r0, r3
 800b224:	f000 fcde 	bl	800bbe4 <VL53L0X_GetLimitCheckValue>
 800b228:	0003      	movs	r3, r0
 800b22a:	0019      	movs	r1, r3
 800b22c:	193b      	adds	r3, r7, r4
 800b22e:	193a      	adds	r2, r7, r4
 800b230:	7812      	ldrb	r2, [r2, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	701a      	strb	r2, [r3, #0]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b236:	193b      	adds	r3, r7, r4
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	b25b      	sxtb	r3, r3
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d119      	bne.n	800b274 <VL53L0X_GetDeviceParameters+0x11e>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	b299      	uxth	r1, r3
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3318      	adds	r3, #24
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	18d2      	adds	r2, r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	0018      	movs	r0, r3
 800b250:	f000 fc24 	bl	800ba9c <VL53L0X_GetLimitCheckEnable>
 800b254:	0003      	movs	r3, r0
 800b256:	0019      	movs	r1, r3
 800b258:	193b      	adds	r3, r7, r4
 800b25a:	193a      	adds	r2, r7, r4
 800b25c:	7812      	ldrb	r2, [r2, #0]
 800b25e:	430a      	orrs	r2, r1
 800b260:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	3301      	adds	r3, #1
 800b266:	60bb      	str	r3, [r7, #8]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b05      	cmp	r3, #5
 800b26c:	ddca      	ble.n	800b204 <VL53L0X_GetDeviceParameters+0xae>
 800b26e:	e002      	b.n	800b276 <VL53L0X_GetDeviceParameters+0x120>
				break;
 800b270:	46c0      	nop			; (mov r8, r8)
 800b272:	e000      	b.n	800b276 <VL53L0X_GetDeviceParameters+0x120>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b274:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b276:	210f      	movs	r1, #15
 800b278:	187b      	adds	r3, r7, r1
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b25b      	sxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <VL53L0X_GetDeviceParameters+0x142>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	333c      	adds	r3, #60	; 0x3c
 800b286:	001a      	movs	r2, r3
 800b288:	187c      	adds	r4, r7, r1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	0011      	movs	r1, r2
 800b28e:	0018      	movs	r0, r3
 800b290:	f000 fd58 	bl	800bd44 <VL53L0X_GetWrapAroundCheckEnable>
 800b294:	0003      	movs	r3, r0
 800b296:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b298:	210f      	movs	r1, #15
 800b29a:	187b      	adds	r3, r7, r1
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	b25b      	sxtb	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d109      	bne.n	800b2b8 <VL53L0X_GetDeviceParameters+0x162>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	1d1a      	adds	r2, r3, #4
 800b2a8:	187c      	adds	r4, r7, r1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	0011      	movs	r1, r2
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f000 f88f 	bl	800b3d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b2b4:	0003      	movs	r3, r0
 800b2b6:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b2b8:	230f      	movs	r3, #15
 800b2ba:	18fb      	adds	r3, r7, r3
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b25b      	sxtb	r3, r3
}
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	b004      	add	sp, #16
 800b2c6:	bdb0      	pop	{r4, r5, r7, pc}

0800b2c8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	000a      	movs	r2, r1
 800b2d2:	1cfb      	adds	r3, r7, #3
 800b2d4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2d6:	230f      	movs	r3, #15
 800b2d8:	18fb      	adds	r3, r7, r3
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b2de:	1cfb      	adds	r3, r7, #3
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2215      	movs	r2, #21
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	4192      	sbcs	r2, r2
 800b2e8:	4252      	negs	r2, r2
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d10e      	bne.n	800b30e <VL53L0X_SetDeviceMode+0x46>
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	409a      	lsls	r2, r3
 800b2f4:	0013      	movs	r3, r2
 800b2f6:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <VL53L0X_SetDeviceMode+0x60>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	1e5a      	subs	r2, r3, #1
 800b2fc:	4193      	sbcs	r3, r2
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d004      	beq.n	800b30e <VL53L0X_SetDeviceMode+0x46>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	1cfa      	adds	r2, r7, #3
 800b308:	7812      	ldrb	r2, [r2, #0]
 800b30a:	741a      	strb	r2, [r3, #16]
		break;
 800b30c:	e003      	b.n	800b316 <VL53L0X_SetDeviceMode+0x4e>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b30e:	230f      	movs	r3, #15
 800b310:	18fb      	adds	r3, r7, r3
 800b312:	22f8      	movs	r2, #248	; 0xf8
 800b314:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b316:	230f      	movs	r3, #15
 800b318:	18fb      	adds	r3, r7, r3
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	b25b      	sxtb	r3, r3
}
 800b31e:	0018      	movs	r0, r3
 800b320:	46bd      	mov	sp, r7
 800b322:	b004      	add	sp, #16
 800b324:	bd80      	pop	{r7, pc}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	0030000b 	.word	0x0030000b

0800b32c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b336:	210f      	movs	r1, #15
 800b338:	187b      	adds	r3, r7, r1
 800b33a:	2200      	movs	r2, #0
 800b33c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7c1a      	ldrb	r2, [r3, #16]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b346:	187b      	adds	r3, r7, r1
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b25b      	sxtb	r3, r3
}
 800b34c:	0018      	movs	r0, r3
 800b34e:	46bd      	mov	sp, r7
 800b350:	b004      	add	sp, #16
 800b352:	bd80      	pop	{r7, pc}

0800b354 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b354:	b5b0      	push	{r4, r5, r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b35e:	250f      	movs	r5, #15
 800b360:	197b      	adds	r3, r7, r5
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b366:	197c      	adds	r4, r7, r5
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2109      	movs	r1, #9
 800b36e:	0018      	movs	r0, r3
 800b370:	f005 fad1 	bl	8010916 <VL53L0X_RdByte>
 800b374:	0003      	movs	r3, r0
 800b376:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800b378:	197b      	adds	r3, r7, r5
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <VL53L0X_GetFractionEnable+0x3c>
		*pEnabled = (*pEnabled & 1);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2201      	movs	r2, #1
 800b388:	4013      	ands	r3, r2
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b390:	230f      	movs	r3, #15
 800b392:	18fb      	adds	r3, r7, r3
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	b25b      	sxtb	r3, r3
}
 800b398:	0018      	movs	r0, r3
 800b39a:	46bd      	mov	sp, r7
 800b39c:	b004      	add	sp, #16
 800b39e:	bdb0      	pop	{r4, r5, r7, pc}

0800b3a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b3a0:	b5b0      	push	{r4, r5, r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3aa:	250f      	movs	r5, #15
 800b3ac:	197b      	adds	r3, r7, r5
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b3b2:	197c      	adds	r4, r7, r5
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	0011      	movs	r1, r2
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	f003 ffcc 	bl	800f358 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b3c0:	0003      	movs	r3, r0
 800b3c2:	7023      	strb	r3, [r4, #0]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b3c4:	197b      	adds	r3, r7, r5
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b25b      	sxtb	r3, r3
}
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	b004      	add	sp, #16
 800b3d0:	bdb0      	pop	{r4, r5, r7, pc}

0800b3d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b3d2:	b5b0      	push	{r4, r5, r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3dc:	250f      	movs	r5, #15
 800b3de:	197b      	adds	r3, r7, r5
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b3e4:	197c      	adds	r4, r7, r5
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	0011      	movs	r1, r2
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f004 f8bf 	bl	800f570 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b3f2:	0003      	movs	r3, r0
 800b3f4:	7023      	strb	r3, [r4, #0]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b3f6:	197b      	adds	r3, r7, r5
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	b25b      	sxtb	r3, r3
}
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b004      	add	sp, #16
 800b402:	bdb0      	pop	{r4, r5, r7, pc}

0800b404 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b404:	b5b0      	push	{r4, r5, r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	0008      	movs	r0, r1
 800b40e:	0011      	movs	r1, r2
 800b410:	1cfb      	adds	r3, r7, #3
 800b412:	1c02      	adds	r2, r0, #0
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	1cbb      	adds	r3, r7, #2
 800b418:	1c0a      	adds	r2, r1, #0
 800b41a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b41c:	250f      	movs	r5, #15
 800b41e:	197b      	adds	r3, r7, r5
 800b420:	2200      	movs	r2, #0
 800b422:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b424:	197c      	adds	r4, r7, r5
 800b426:	1cbb      	adds	r3, r7, #2
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	1cfb      	adds	r3, r7, #3
 800b42c:	7819      	ldrb	r1, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	0018      	movs	r0, r3
 800b432:	f003 fc4b 	bl	800eccc <VL53L0X_set_vcsel_pulse_period>
 800b436:	0003      	movs	r3, r0
 800b438:	7023      	strb	r3, [r4, #0]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b43a:	197b      	adds	r3, r7, r5
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b25b      	sxtb	r3, r3
}
 800b440:	0018      	movs	r0, r3
 800b442:	46bd      	mov	sp, r7
 800b444:	b004      	add	sp, #16
 800b446:	bdb0      	pop	{r4, r5, r7, pc}

0800b448 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b448:	b5b0      	push	{r4, r5, r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	607a      	str	r2, [r7, #4]
 800b452:	200b      	movs	r0, #11
 800b454:	183b      	adds	r3, r7, r0
 800b456:	1c0a      	adds	r2, r1, #0
 800b458:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b45a:	2517      	movs	r5, #23
 800b45c:	197b      	adds	r3, r7, r5
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800b462:	197c      	adds	r4, r7, r5
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	183b      	adds	r3, r7, r0
 800b468:	7819      	ldrb	r1, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	0018      	movs	r0, r3
 800b46e:	f003 ff2a 	bl	800f2c6 <VL53L0X_get_vcsel_pulse_period>
 800b472:	0003      	movs	r3, r0
 800b474:	7023      	strb	r3, [r4, #0]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b476:	197b      	adds	r3, r7, r5
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	b25b      	sxtb	r3, r3
}
 800b47c:	0018      	movs	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	b006      	add	sp, #24
 800b482:	bdb0      	pop	{r4, r5, r7, pc}

0800b484 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800b484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b486:	b087      	sub	sp, #28
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	0008      	movs	r0, r1
 800b48e:	0011      	movs	r1, r2
 800b490:	1cfb      	adds	r3, r7, #3
 800b492:	1c02      	adds	r2, r0, #0
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	1cbb      	adds	r3, r7, #2
 800b498:	1c0a      	adds	r2, r1, #0
 800b49a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b49c:	2517      	movs	r5, #23
 800b49e:	197b      	adds	r3, r7, r5
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800b4a4:	210f      	movs	r1, #15
 800b4a6:	187b      	adds	r3, r7, r1
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfigNew = 0;
 800b4ac:	2316      	movs	r3, #22
 800b4ae:	18fb      	adds	r3, r7, r3
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b4b4:	197c      	adds	r4, r7, r5
 800b4b6:	000e      	movs	r6, r1
 800b4b8:	187a      	adds	r2, r7, r1
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2101      	movs	r1, #1
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f005 fa29 	bl	8010916 <VL53L0X_RdByte>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800b4c8:	2316      	movs	r3, #22
 800b4ca:	18fb      	adds	r3, r7, r3
 800b4cc:	19ba      	adds	r2, r7, r6
 800b4ce:	7812      	ldrb	r2, [r2, #0]
 800b4d0:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b4d2:	197b      	adds	r3, r7, r5
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d000      	beq.n	800b4de <VL53L0X_SetSequenceStepEnable+0x5a>
 800b4dc:	e070      	b.n	800b5c0 <VL53L0X_SetSequenceStepEnable+0x13c>
		if (SequenceStepEnabled == 1) {
 800b4de:	1cbb      	adds	r3, r7, #2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d136      	bne.n	800b554 <VL53L0X_SetSequenceStepEnable+0xd0>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800b4e6:	1cfb      	adds	r3, r7, #3
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d82d      	bhi.n	800b54a <VL53L0X_SetSequenceStepEnable+0xc6>
 800b4ee:	009a      	lsls	r2, r3, #2
 800b4f0:	4b52      	ldr	r3, [pc, #328]	; (800b63c <VL53L0X_SetSequenceStepEnable+0x1b8>)
 800b4f2:	18d3      	adds	r3, r2, r3
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800b4f8:	2216      	movs	r2, #22
 800b4fa:	18bb      	adds	r3, r7, r2
 800b4fc:	18ba      	adds	r2, r7, r2
 800b4fe:	7812      	ldrb	r2, [r2, #0]
 800b500:	2110      	movs	r1, #16
 800b502:	430a      	orrs	r2, r1
 800b504:	701a      	strb	r2, [r3, #0]
				break;
 800b506:	e05c      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800b508:	2216      	movs	r2, #22
 800b50a:	18bb      	adds	r3, r7, r2
 800b50c:	18ba      	adds	r2, r7, r2
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	2128      	movs	r1, #40	; 0x28
 800b512:	430a      	orrs	r2, r1
 800b514:	701a      	strb	r2, [r3, #0]
				break;
 800b516:	e054      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800b518:	2216      	movs	r2, #22
 800b51a:	18bb      	adds	r3, r7, r2
 800b51c:	18ba      	adds	r2, r7, r2
 800b51e:	7812      	ldrb	r2, [r2, #0]
 800b520:	2104      	movs	r1, #4
 800b522:	430a      	orrs	r2, r1
 800b524:	701a      	strb	r2, [r3, #0]
				break;
 800b526:	e04c      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800b528:	2216      	movs	r2, #22
 800b52a:	18bb      	adds	r3, r7, r2
 800b52c:	18ba      	adds	r2, r7, r2
 800b52e:	7812      	ldrb	r2, [r2, #0]
 800b530:	2140      	movs	r1, #64	; 0x40
 800b532:	430a      	orrs	r2, r1
 800b534:	701a      	strb	r2, [r3, #0]
				break;
 800b536:	e044      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800b538:	2216      	movs	r2, #22
 800b53a:	18bb      	adds	r3, r7, r2
 800b53c:	18ba      	adds	r2, r7, r2
 800b53e:	7812      	ldrb	r2, [r2, #0]
 800b540:	2180      	movs	r1, #128	; 0x80
 800b542:	4249      	negs	r1, r1
 800b544:	430a      	orrs	r2, r1
 800b546:	701a      	strb	r2, [r3, #0]
				break;
 800b548:	e03b      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b54a:	2317      	movs	r3, #23
 800b54c:	18fb      	adds	r3, r7, r3
 800b54e:	22fc      	movs	r2, #252	; 0xfc
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	e036      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800b554:	1cfb      	adds	r3, r7, #3
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d82c      	bhi.n	800b5b6 <VL53L0X_SetSequenceStepEnable+0x132>
 800b55c:	009a      	lsls	r2, r3, #2
 800b55e:	4b38      	ldr	r3, [pc, #224]	; (800b640 <VL53L0X_SetSequenceStepEnable+0x1bc>)
 800b560:	18d3      	adds	r3, r2, r3
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800b566:	2216      	movs	r2, #22
 800b568:	18bb      	adds	r3, r7, r2
 800b56a:	18ba      	adds	r2, r7, r2
 800b56c:	7812      	ldrb	r2, [r2, #0]
 800b56e:	2110      	movs	r1, #16
 800b570:	438a      	bics	r2, r1
 800b572:	701a      	strb	r2, [r3, #0]
				break;
 800b574:	e025      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800b576:	2216      	movs	r2, #22
 800b578:	18bb      	adds	r3, r7, r2
 800b57a:	18ba      	adds	r2, r7, r2
 800b57c:	7812      	ldrb	r2, [r2, #0]
 800b57e:	2128      	movs	r1, #40	; 0x28
 800b580:	438a      	bics	r2, r1
 800b582:	701a      	strb	r2, [r3, #0]
				break;
 800b584:	e01d      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800b586:	2216      	movs	r2, #22
 800b588:	18bb      	adds	r3, r7, r2
 800b58a:	18ba      	adds	r2, r7, r2
 800b58c:	7812      	ldrb	r2, [r2, #0]
 800b58e:	2104      	movs	r1, #4
 800b590:	438a      	bics	r2, r1
 800b592:	701a      	strb	r2, [r3, #0]
				break;
 800b594:	e015      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800b596:	2216      	movs	r2, #22
 800b598:	18bb      	adds	r3, r7, r2
 800b59a:	18ba      	adds	r2, r7, r2
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	2140      	movs	r1, #64	; 0x40
 800b5a0:	438a      	bics	r2, r1
 800b5a2:	701a      	strb	r2, [r3, #0]
				break;
 800b5a4:	e00d      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800b5a6:	2216      	movs	r2, #22
 800b5a8:	18bb      	adds	r3, r7, r2
 800b5aa:	18ba      	adds	r2, r7, r2
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	217f      	movs	r1, #127	; 0x7f
 800b5b0:	400a      	ands	r2, r1
 800b5b2:	701a      	strb	r2, [r3, #0]
				break;
 800b5b4:	e005      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b5b6:	2317      	movs	r3, #23
 800b5b8:	18fb      	adds	r3, r7, r3
 800b5ba:	22fc      	movs	r2, #252	; 0xfc
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	e000      	b.n	800b5c2 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		}
 800b5c0:	46c0      	nop			; (mov r8, r8)
	}

	if (SequenceConfigNew != SequenceConfig) {
 800b5c2:	230f      	movs	r3, #15
 800b5c4:	18fb      	adds	r3, r7, r3
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2116      	movs	r1, #22
 800b5ca:	187a      	adds	r2, r7, r1
 800b5cc:	7812      	ldrb	r2, [r2, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d02b      	beq.n	800b62a <VL53L0X_SetSequenceStepEnable+0x1a6>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800b5d2:	2217      	movs	r2, #23
 800b5d4:	18bb      	adds	r3, r7, r2
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	b25b      	sxtb	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d109      	bne.n	800b5f2 <VL53L0X_SetSequenceStepEnable+0x16e>
			Status = VL53L0X_WrByte(Dev,
 800b5de:	18bc      	adds	r4, r7, r2
 800b5e0:	187b      	adds	r3, r7, r1
 800b5e2:	781a      	ldrb	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f005 f8e5 	bl	80107b8 <VL53L0X_WrByte>
 800b5ee:	0003      	movs	r3, r0
 800b5f0:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800b5f2:	2317      	movs	r3, #23
 800b5f4:	18fb      	adds	r3, r7, r3
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	b25b      	sxtb	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <VL53L0X_SetSequenceStepEnable+0x188>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	2316      	movs	r3, #22
 800b602:	18f9      	adds	r1, r7, r3
 800b604:	2398      	movs	r3, #152	; 0x98
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	7809      	ldrb	r1, [r1, #0]
 800b60a:	54d1      	strb	r1, [r2, r3]


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800b60c:	2317      	movs	r3, #23
 800b60e:	18fb      	adds	r3, r7, r3
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	b25b      	sxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <VL53L0X_SetSequenceStepEnable+0x1a6>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	0011      	movs	r1, r2
 800b624:	0018      	movs	r0, r3
 800b626:	f7ff febb 	bl	800b3a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b62a:	2317      	movs	r3, #23
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	b25b      	sxtb	r3, r3
}
 800b632:	0018      	movs	r0, r3
 800b634:	46bd      	mov	sp, r7
 800b636:	b007      	add	sp, #28
 800b638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b63a:	46c0      	nop			; (mov r8, r8)
 800b63c:	08016a40 	.word	0x08016a40
 800b640:	08016a54 	.word	0x08016a54

0800b644 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800b644:	b590      	push	{r4, r7, lr}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	0008      	movs	r0, r1
 800b64e:	0011      	movs	r1, r2
 800b650:	607b      	str	r3, [r7, #4]
 800b652:	240b      	movs	r4, #11
 800b654:	193b      	adds	r3, r7, r4
 800b656:	1c02      	adds	r2, r0, #0
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	230a      	movs	r3, #10
 800b65c:	18fb      	adds	r3, r7, r3
 800b65e:	1c0a      	adds	r2, r1, #0
 800b660:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b662:	2317      	movs	r3, #23
 800b664:	18fb      	adds	r3, r7, r3
 800b666:	2200      	movs	r2, #0
 800b668:	701a      	strb	r2, [r3, #0]
	*pSequenceStepEnabled = 0;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800b670:	193b      	adds	r3, r7, r4
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b04      	cmp	r3, #4
 800b676:	d838      	bhi.n	800b6ea <sequence_step_enabled+0xa6>
 800b678:	009a      	lsls	r2, r3, #2
 800b67a:	4b22      	ldr	r3, [pc, #136]	; (800b704 <sequence_step_enabled+0xc0>)
 800b67c:	18d3      	adds	r3, r2, r3
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	469f      	mov	pc, r3
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800b682:	230a      	movs	r3, #10
 800b684:	18fb      	adds	r3, r7, r3
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	111b      	asrs	r3, r3, #4
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2201      	movs	r2, #1
 800b68e:	4013      	ands	r3, r2
 800b690:	b2da      	uxtb	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	701a      	strb	r2, [r3, #0]
		break;
 800b696:	e02c      	b.n	800b6f2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800b698:	230a      	movs	r3, #10
 800b69a:	18fb      	adds	r3, r7, r3
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	10db      	asrs	r3, r3, #3
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	701a      	strb	r2, [r3, #0]
		break;
 800b6ac:	e021      	b.n	800b6f2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	18fb      	adds	r3, r7, r3
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	109b      	asrs	r3, r3, #2
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	701a      	strb	r2, [r3, #0]
		break;
 800b6c2:	e016      	b.n	800b6f2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800b6c4:	230a      	movs	r3, #10
 800b6c6:	18fb      	adds	r3, r7, r3
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	119b      	asrs	r3, r3, #6
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	701a      	strb	r2, [r3, #0]
		break;
 800b6d8:	e00b      	b.n	800b6f2 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800b6da:	230a      	movs	r3, #10
 800b6dc:	18fb      	adds	r3, r7, r3
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	09db      	lsrs	r3, r3, #7
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	701a      	strb	r2, [r3, #0]
		break;
 800b6e8:	e003      	b.n	800b6f2 <sequence_step_enabled+0xae>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6ea:	2317      	movs	r3, #23
 800b6ec:	18fb      	adds	r3, r7, r3
 800b6ee:	22fc      	movs	r2, #252	; 0xfc
 800b6f0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b6f2:	2317      	movs	r3, #23
 800b6f4:	18fb      	adds	r3, r7, r3
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	b25b      	sxtb	r3, r3
}
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	b007      	add	sp, #28
 800b700:	bd90      	pop	{r4, r7, pc}
 800b702:	46c0      	nop			; (mov r8, r8)
 800b704:	08016a68 	.word	0x08016a68

0800b708 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b712:	250f      	movs	r5, #15
 800b714:	197b      	adds	r3, r7, r5
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800b71a:	260e      	movs	r6, #14
 800b71c:	19bb      	adds	r3, r7, r6
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b722:	197c      	adds	r4, r7, r5
 800b724:	19ba      	adds	r2, r7, r6
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2101      	movs	r1, #1
 800b72a:	0018      	movs	r0, r3
 800b72c:	f005 f8f3 	bl	8010916 <VL53L0X_RdByte>
 800b730:	0003      	movs	r3, r0
 800b732:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800b734:	197b      	adds	r3, r7, r5
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	b25b      	sxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <VL53L0X_GetSequenceStepEnables+0x4a>
		Status = sequence_step_enabled(Dev,
 800b73e:	19bb      	adds	r3, r7, r6
 800b740:	781a      	ldrb	r2, [r3, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	197c      	adds	r4, r7, r5
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	2100      	movs	r1, #0
 800b74a:	f7ff ff7b 	bl	800b644 <sequence_step_enabled>
 800b74e:	0003      	movs	r3, r0
 800b750:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b752:	210f      	movs	r1, #15
 800b754:	187b      	adds	r3, r7, r1
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	b25b      	sxtb	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10b      	bne.n	800b776 <VL53L0X_GetSequenceStepEnables+0x6e>
		Status = sequence_step_enabled(Dev,
 800b75e:	230e      	movs	r3, #14
 800b760:	18fb      	adds	r3, r7, r3
 800b762:	781a      	ldrb	r2, [r3, #0]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	3302      	adds	r3, #2
 800b768:	187c      	adds	r4, r7, r1
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	2101      	movs	r1, #1
 800b76e:	f7ff ff69 	bl	800b644 <sequence_step_enabled>
 800b772:	0003      	movs	r3, r0
 800b774:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b776:	210f      	movs	r1, #15
 800b778:	187b      	adds	r3, r7, r1
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	b25b      	sxtb	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10b      	bne.n	800b79a <VL53L0X_GetSequenceStepEnables+0x92>
		Status = sequence_step_enabled(Dev,
 800b782:	230e      	movs	r3, #14
 800b784:	18fb      	adds	r3, r7, r3
 800b786:	781a      	ldrb	r2, [r3, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	3301      	adds	r3, #1
 800b78c:	187c      	adds	r4, r7, r1
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	2102      	movs	r1, #2
 800b792:	f7ff ff57 	bl	800b644 <sequence_step_enabled>
 800b796:	0003      	movs	r3, r0
 800b798:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b79a:	210f      	movs	r1, #15
 800b79c:	187b      	adds	r3, r7, r1
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	b25b      	sxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <VL53L0X_GetSequenceStepEnables+0xb6>
		Status = sequence_step_enabled(Dev,
 800b7a6:	230e      	movs	r3, #14
 800b7a8:	18fb      	adds	r3, r7, r3
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	187c      	adds	r4, r7, r1
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	2103      	movs	r1, #3
 800b7b6:	f7ff ff45 	bl	800b644 <sequence_step_enabled>
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b7be:	210f      	movs	r1, #15
 800b7c0:	187b      	adds	r3, r7, r1
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	b25b      	sxtb	r3, r3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <VL53L0X_GetSequenceStepEnables+0xda>
		Status = sequence_step_enabled(Dev,
 800b7ca:	230e      	movs	r3, #14
 800b7cc:	18fb      	adds	r3, r7, r3
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	187c      	adds	r4, r7, r1
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	2104      	movs	r1, #4
 800b7da:	f7ff ff33 	bl	800b644 <sequence_step_enabled>
 800b7de:	0003      	movs	r3, r0
 800b7e0:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b7e2:	230f      	movs	r3, #15
 800b7e4:	18fb      	adds	r3, r7, r3
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	b25b      	sxtb	r3, r3
}
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b005      	add	sp, #20
 800b7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7f2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800b7f2:	b5b0      	push	{r4, r5, r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7fc:	250f      	movs	r5, #15
 800b7fe:	197b      	adds	r3, r7, r5
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800b804:	197c      	adds	r4, r7, r5
 800b806:	230c      	movs	r3, #12
 800b808:	18fa      	adds	r2, r7, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	21f8      	movs	r1, #248	; 0xf8
 800b80e:	0018      	movs	r0, r3
 800b810:	f005 f8b6 	bl	8010980 <VL53L0X_RdWord>
 800b814:	0003      	movs	r3, r0
 800b816:	7023      	strb	r3, [r4, #0]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800b818:	197b      	adds	r3, r7, r5
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d109      	bne.n	800b836 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x44>
		Status = VL53L0X_RdDWord(Dev,
 800b822:	197c      	adds	r4, r7, r5
 800b824:	2308      	movs	r3, #8
 800b826:	18fa      	adds	r2, r7, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2104      	movs	r1, #4
 800b82c:	0018      	movs	r0, r3
 800b82e:	f005 f8e9 	bl	8010a04 <VL53L0X_RdDWord>
 800b832:	0003      	movs	r3, r0
 800b834:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b836:	230f      	movs	r3, #15
 800b838:	18fb      	adds	r3, r7, r3
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	b25b      	sxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d113      	bne.n	800b86a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x78>
		if (osc_calibrate_val != 0) {
 800b842:	210c      	movs	r1, #12
 800b844:	187b      	adds	r3, r7, r1
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00a      	beq.n	800b862 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x70>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	187b      	adds	r3, r7, r1
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	0019      	movs	r1, r3
 800b854:	0010      	movs	r0, r2
 800b856:	f7f4 fc73 	bl	8000140 <__udivsi3>
 800b85a:	0003      	movs	r3, r0
 800b85c:	001a      	movs	r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b86a:	230f      	movs	r3, #15
 800b86c:	18fb      	adds	r3, r7, r3
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	b25b      	sxtb	r3, r3
}
 800b872:	0018      	movs	r0, r3
 800b874:	46bd      	mov	sp, r7
 800b876:	b004      	add	sp, #16
 800b878:	bdb0      	pop	{r4, r5, r7, pc}

0800b87a <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b884:	210f      	movs	r1, #15
 800b886:	187b      	adds	r3, r7, r1
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800b88c:	200e      	movs	r0, #14
 800b88e:	183b      	adds	r3, r7, r0
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	7f12      	ldrb	r2, [r2, #28]
 800b894:	701a      	strb	r2, [r3, #0]
	*pXTalkCompensationEnable = Temp8;
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	183a      	adds	r2, r7, r0
 800b89a:	7812      	ldrb	r2, [r2, #0]
 800b89c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	b25b      	sxtb	r3, r3
}
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	b004      	add	sp, #16
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800b8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8b6:	2517      	movs	r5, #23
 800b8b8:	197b      	adds	r3, r7, r5
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800b8be:	197c      	adds	r4, r7, r5
 800b8c0:	260e      	movs	r6, #14
 800b8c2:	19ba      	adds	r2, r7, r6
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2120      	movs	r1, #32
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f005 f859 	bl	8010980 <VL53L0X_RdWord>
 800b8ce:	0003      	movs	r3, r0
 800b8d0:	7023      	strb	r3, [r4, #0]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800b8d2:	197b      	adds	r3, r7, r5
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d11b      	bne.n	800b914 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
		if (Value == 0) {
 800b8dc:	19bb      	adds	r3, r7, r6
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d109      	bne.n	800b8f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4c>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	771a      	strb	r2, [r3, #28]
 800b8f6:	e00d      	b.n	800b914 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800b8f8:	230e      	movs	r3, #14
 800b8fa:	18fb      	adds	r3, r7, r3
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b914:	2317      	movs	r3, #23
 800b916:	18fb      	adds	r3, r7, r3
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b25b      	sxtb	r3, r3
}
 800b91c:	0018      	movs	r0, r3
 800b91e:	46bd      	mov	sp, r7
 800b920:	b007      	add	sp, #28
 800b922:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b924 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	0008      	movs	r0, r1
 800b92e:	0011      	movs	r1, r2
 800b930:	1cbb      	adds	r3, r7, #2
 800b932:	1c02      	adds	r2, r0, #0
 800b934:	801a      	strh	r2, [r3, #0]
 800b936:	1c7b      	adds	r3, r7, #1
 800b938:	1c0a      	adds	r2, r1, #0
 800b93a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b93c:	2117      	movs	r1, #23
 800b93e:	187b      	adds	r3, r7, r1
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800b948:	230f      	movs	r3, #15
 800b94a:	18fb      	adds	r3, r7, r3
 800b94c:	2200      	movs	r2, #0
 800b94e:	701a      	strb	r2, [r3, #0]
	uint8_t LimitCheckDisable = 0;
 800b950:	230e      	movs	r3, #14
 800b952:	18fb      	adds	r3, r7, r3
 800b954:	2200      	movs	r2, #0
 800b956:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800b958:	1cbb      	adds	r3, r7, #2
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	2b05      	cmp	r3, #5
 800b95e:	d903      	bls.n	800b968 <VL53L0X_SetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b960:	187b      	adds	r3, r7, r1
 800b962:	22fc      	movs	r2, #252	; 0xfc
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e074      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>
	} else {
		if (LimitCheckEnable == 0) {
 800b968:	1c7b      	adds	r3, r7, #1
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <VL53L0X_SetLimitCheckEnable+0x62>
			TempFix1616 = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800b974:	230f      	movs	r3, #15
 800b976:	18fb      	adds	r3, r7, r3
 800b978:	2200      	movs	r2, #0
 800b97a:	701a      	strb	r2, [r3, #0]
			LimitCheckDisable = 1;
 800b97c:	230e      	movs	r3, #14
 800b97e:	18fb      	adds	r3, r7, r3
 800b980:	2201      	movs	r2, #1
 800b982:	701a      	strb	r2, [r3, #0]
 800b984:	e010      	b.n	800b9a8 <VL53L0X_SetLimitCheckEnable+0x84>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800b986:	1cbb      	adds	r3, r7, #2
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	330c      	adds	r3, #12
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	3304      	adds	r3, #4
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800b998:	230e      	movs	r3, #14
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	2200      	movs	r2, #0
 800b99e:	701a      	strb	r2, [r3, #0]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800b9a0:	230f      	movs	r3, #15
 800b9a2:	18fb      	adds	r3, r7, r3
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	701a      	strb	r2, [r3, #0]
		}

		switch (LimitCheckId) {
 800b9a8:	1cbb      	adds	r3, r7, #2
 800b9aa:	881b      	ldrh	r3, [r3, #0]
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	d84c      	bhi.n	800ba4a <VL53L0X_SetLimitCheckEnable+0x126>
 800b9b0:	009a      	lsls	r2, r3, #2
 800b9b2:	4b39      	ldr	r3, [pc, #228]	; (800ba98 <VL53L0X_SetLimitCheckEnable+0x174>)
 800b9b4:	18d3      	adds	r3, r2, r3
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	220f      	movs	r2, #15
 800b9be:	18ba      	adds	r2, r7, r2
 800b9c0:	2128      	movs	r1, #40	; 0x28
 800b9c2:	7812      	ldrb	r2, [r2, #0]
 800b9c4:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800b9c6:	e044      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	2317      	movs	r3, #23
 800b9d0:	18fc      	adds	r4, r7, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2144      	movs	r1, #68	; 0x44
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	f004 ff1e 	bl	8010818 <VL53L0X_WrWord>
 800b9dc:	0003      	movs	r3, r0
 800b9de:	7023      	strb	r3, [r4, #0]

			break;
 800b9e0:	e037      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	220f      	movs	r2, #15
 800b9e6:	18ba      	adds	r2, r7, r2
 800b9e8:	212a      	movs	r1, #42	; 0x2a
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800b9ee:	e030      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	220f      	movs	r2, #15
 800b9f4:	18ba      	adds	r2, r7, r2
 800b9f6:	212b      	movs	r1, #43	; 0x2b
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800b9fc:	e029      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800b9fe:	210d      	movs	r1, #13
 800ba00:	187a      	adds	r2, r7, r1
 800ba02:	230e      	movs	r3, #14
 800ba04:	18fb      	adds	r3, r7, r3
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	18db      	adds	r3, r3, r3
 800ba0a:	7013      	strb	r3, [r2, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800ba0c:	2317      	movs	r3, #23
 800ba0e:	18fc      	adds	r4, r7, r3
 800ba10:	187b      	adds	r3, r7, r1
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	22fe      	movs	r2, #254	; 0xfe
 800ba18:	2160      	movs	r1, #96	; 0x60
 800ba1a:	f004 ff35 	bl	8010888 <VL53L0X_UpdateByte>
 800ba1e:	0003      	movs	r3, r0
 800ba20:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ba22:	e016      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ba24:	210d      	movs	r1, #13
 800ba26:	187b      	adds	r3, r7, r1
 800ba28:	220e      	movs	r2, #14
 800ba2a:	18ba      	adds	r2, r7, r2
 800ba2c:	7812      	ldrb	r2, [r2, #0]
 800ba2e:	0112      	lsls	r2, r2, #4
 800ba30:	701a      	strb	r2, [r3, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800ba32:	2317      	movs	r3, #23
 800ba34:	18fc      	adds	r4, r7, r3
 800ba36:	187b      	adds	r3, r7, r1
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	22ef      	movs	r2, #239	; 0xef
 800ba3e:	2160      	movs	r1, #96	; 0x60
 800ba40:	f004 ff22 	bl	8010888 <VL53L0X_UpdateByte>
 800ba44:	0003      	movs	r3, r0
 800ba46:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800ba48:	e003      	b.n	800ba52 <VL53L0X_SetLimitCheckEnable+0x12e>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba4a:	2317      	movs	r3, #23
 800ba4c:	18fb      	adds	r3, r7, r3
 800ba4e:	22fc      	movs	r2, #252	; 0xfc
 800ba50:	701a      	strb	r2, [r3, #0]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba52:	2317      	movs	r3, #23
 800ba54:	18fb      	adds	r3, r7, r3
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d114      	bne.n	800ba88 <VL53L0X_SetLimitCheckEnable+0x164>
		if (LimitCheckEnable == 0) {
 800ba5e:	1c7b      	adds	r3, r7, #1
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d108      	bne.n	800ba78 <VL53L0X_SetLimitCheckEnable+0x154>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ba66:	1cbb      	adds	r3, r7, #2
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	2128      	movs	r1, #40	; 0x28
 800ba6e:	18d3      	adds	r3, r2, r3
 800ba70:	185b      	adds	r3, r3, r1
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	e007      	b.n	800ba88 <VL53L0X_SetLimitCheckEnable+0x164>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ba78:	1cbb      	adds	r3, r7, #2
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	2128      	movs	r1, #40	; 0x28
 800ba80:	18d3      	adds	r3, r2, r3
 800ba82:	185b      	adds	r3, r3, r1
 800ba84:	2201      	movs	r2, #1
 800ba86:	701a      	strb	r2, [r3, #0]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba88:	2317      	movs	r3, #23
 800ba8a:	18fb      	adds	r3, r7, r3
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b25b      	sxtb	r3, r3
}
 800ba90:	0018      	movs	r0, r3
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b007      	add	sp, #28
 800ba96:	bd90      	pop	{r4, r7, pc}
 800ba98:	08016a7c 	.word	0x08016a7c

0800ba9c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ba9c:	b590      	push	{r4, r7, lr}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	200a      	movs	r0, #10
 800baa8:	183b      	adds	r3, r7, r0
 800baaa:	1c0a      	adds	r2, r1, #0
 800baac:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baae:	2117      	movs	r1, #23
 800bab0:	187b      	adds	r3, r7, r1
 800bab2:	2200      	movs	r2, #0
 800bab4:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bab6:	183b      	adds	r3, r7, r0
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	2b05      	cmp	r3, #5
 800babc:	d906      	bls.n	800bacc <VL53L0X_GetLimitCheckEnable+0x30>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800babe:	187b      	adds	r3, r7, r1
 800bac0:	22fc      	movs	r2, #252	; 0xfc
 800bac2:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]
 800baca:	e00e      	b.n	800baea <VL53L0X_GetLimitCheckEnable+0x4e>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bacc:	230a      	movs	r3, #10
 800bace:	18fb      	adds	r3, r7, r3
 800bad0:	881a      	ldrh	r2, [r3, #0]
 800bad2:	2416      	movs	r4, #22
 800bad4:	193b      	adds	r3, r7, r4
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	2028      	movs	r0, #40	; 0x28
 800bada:	188a      	adds	r2, r1, r2
 800badc:	1812      	adds	r2, r2, r0
 800bade:	7812      	ldrb	r2, [r2, #0]
 800bae0:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	193a      	adds	r2, r7, r4
 800bae6:	7812      	ldrb	r2, [r2, #0]
 800bae8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800baea:	2317      	movs	r3, #23
 800baec:	18fb      	adds	r3, r7, r3
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	b25b      	sxtb	r3, r3
}
 800baf2:	0018      	movs	r0, r3
 800baf4:	46bd      	mov	sp, r7
 800baf6:	b007      	add	sp, #28
 800baf8:	bd90      	pop	{r4, r7, pc}
	...

0800bafc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800bafc:	b5b0      	push	{r4, r5, r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	607a      	str	r2, [r7, #4]
 800bb06:	240a      	movs	r4, #10
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	1c0a      	adds	r2, r1, #0
 800bb0c:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb0e:	2317      	movs	r3, #23
 800bb10:	18fb      	adds	r3, r7, r3
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	881a      	ldrh	r2, [r3, #0]
 800bb1a:	2516      	movs	r5, #22
 800bb1c:	197b      	adds	r3, r7, r5
 800bb1e:	68f9      	ldr	r1, [r7, #12]
 800bb20:	2028      	movs	r0, #40	; 0x28
 800bb22:	188a      	adds	r2, r1, r2
 800bb24:	1812      	adds	r2, r2, r0
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	701a      	strb	r2, [r3, #0]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800bb2a:	197b      	adds	r3, r7, r5
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d109      	bne.n	800bb46 <VL53L0X_SetLimitCheckValue+0x4a>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bb32:	193b      	adds	r3, r7, r4
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	330c      	adds	r3, #12
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	18d3      	adds	r3, r2, r3
 800bb3e:	3304      	adds	r3, #4
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	e043      	b.n	800bbce <VL53L0X_SetLimitCheckValue+0xd2>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800bb46:	230a      	movs	r3, #10
 800bb48:	18fb      	adds	r3, r7, r3
 800bb4a:	881b      	ldrh	r3, [r3, #0]
 800bb4c:	2b05      	cmp	r3, #5
 800bb4e:	d82a      	bhi.n	800bba6 <VL53L0X_SetLimitCheckValue+0xaa>
 800bb50:	009a      	lsls	r2, r3, #2
 800bb52:	4b23      	ldr	r3, [pc, #140]	; (800bbe0 <VL53L0X_SetLimitCheckValue+0xe4>)
 800bb54:	18d3      	adds	r3, r2, r3
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800bb60:	e025      	b.n	800bbae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	2317      	movs	r3, #23
 800bb6a:	18fc      	adds	r4, r7, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2144      	movs	r1, #68	; 0x44
 800bb70:	0018      	movs	r0, r3
 800bb72:	f004 fe51 	bl	8010818 <VL53L0X_WrWord>
 800bb76:	0003      	movs	r3, r0
 800bb78:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800bb7a:	e018      	b.n	800bbae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800bb82:	e014      	b.n	800bbae <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800bb8a:	e010      	b.n	800bbae <VL53L0X_SetLimitCheckValue+0xb2>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	2317      	movs	r3, #23
 800bb94:	18fc      	adds	r4, r7, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2164      	movs	r1, #100	; 0x64
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f004 fe3c 	bl	8010818 <VL53L0X_WrWord>
 800bba0:	0003      	movs	r3, r0
 800bba2:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800bba4:	e003      	b.n	800bbae <VL53L0X_SetLimitCheckValue+0xb2>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bba6:	2317      	movs	r3, #23
 800bba8:	18fb      	adds	r3, r7, r3
 800bbaa:	22fc      	movs	r2, #252	; 0xfc
 800bbac:	701a      	strb	r2, [r3, #0]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bbae:	2317      	movs	r3, #23
 800bbb0:	18fb      	adds	r3, r7, r3
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	b25b      	sxtb	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <VL53L0X_SetLimitCheckValue+0xd2>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bbba:	230a      	movs	r3, #10
 800bbbc:	18fb      	adds	r3, r7, r3
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	330c      	adds	r3, #12
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	18d3      	adds	r3, r2, r3
 800bbc8:	3304      	adds	r3, #4
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	601a      	str	r2, [r3, #0]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbce:	2317      	movs	r3, #23
 800bbd0:	18fb      	adds	r3, r7, r3
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	b25b      	sxtb	r3, r3
}
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	b006      	add	sp, #24
 800bbdc:	bdb0      	pop	{r4, r5, r7, pc}
 800bbde:	46c0      	nop			; (mov r8, r8)
 800bbe0:	08016a94 	.word	0x08016a94

0800bbe4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe6:	b089      	sub	sp, #36	; 0x24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	200a      	movs	r0, #10
 800bbf0:	183b      	adds	r3, r7, r0
 800bbf2:	1c0a      	adds	r2, r1, #0
 800bbf4:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbf6:	231f      	movs	r3, #31
 800bbf8:	18fb      	adds	r3, r7, r3
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	701a      	strb	r2, [r3, #0]
	uint8_t EnableZeroValue = 0;
 800bbfe:	231e      	movs	r3, #30
 800bc00:	18fb      	adds	r3, r7, r3
 800bc02:	2200      	movs	r2, #0
 800bc04:	701a      	strb	r2, [r3, #0]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800bc06:	183b      	adds	r3, r7, r0
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	d84e      	bhi.n	800bcac <VL53L0X_GetLimitCheckValue+0xc8>
 800bc0e:	009a      	lsls	r2, r3, #2
 800bc10:	4b4b      	ldr	r3, [pc, #300]	; (800bd40 <VL53L0X_GetLimitCheckValue+0x15c>)
 800bc12:	18d3      	adds	r3, r2, r3
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800bc1e:	231e      	movs	r3, #30
 800bc20:	18fb      	adds	r3, r7, r3
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
		break;
 800bc26:	e045      	b.n	800bcb4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bc28:	251f      	movs	r5, #31
 800bc2a:	197c      	adds	r4, r7, r5
 800bc2c:	2616      	movs	r6, #22
 800bc2e:	19ba      	adds	r2, r7, r6
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2144      	movs	r1, #68	; 0x44
 800bc34:	0018      	movs	r0, r3
 800bc36:	f004 fea3 	bl	8010980 <VL53L0X_RdWord>
 800bc3a:	0003      	movs	r3, r0
 800bc3c:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bc3e:	197b      	adds	r3, r7, r5
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	b25b      	sxtb	r3, r3
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d103      	bne.n	800bc50 <VL53L0X_GetLimitCheckValue+0x6c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bc48:	19bb      	adds	r3, r7, r6
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	025b      	lsls	r3, r3, #9
 800bc4e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800bc50:	231e      	movs	r3, #30
 800bc52:	18fb      	adds	r3, r7, r3
 800bc54:	2201      	movs	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
		break;
 800bc58:	e02c      	b.n	800bcb4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800bc60:	231e      	movs	r3, #30
 800bc62:	18fb      	adds	r3, r7, r3
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
		break;
 800bc68:	e024      	b.n	800bcb4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800bc70:	231e      	movs	r3, #30
 800bc72:	18fb      	adds	r3, r7, r3
 800bc74:	2200      	movs	r2, #0
 800bc76:	701a      	strb	r2, [r3, #0]
		break;
 800bc78:	e01c      	b.n	800bcb4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800bc7a:	251f      	movs	r5, #31
 800bc7c:	197c      	adds	r4, r7, r5
 800bc7e:	2616      	movs	r6, #22
 800bc80:	19ba      	adds	r2, r7, r6
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2164      	movs	r1, #100	; 0x64
 800bc86:	0018      	movs	r0, r3
 800bc88:	f004 fe7a 	bl	8010980 <VL53L0X_RdWord>
 800bc8c:	0003      	movs	r3, r0
 800bc8e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800bc90:	197b      	adds	r3, r7, r5
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d103      	bne.n	800bca2 <VL53L0X_GetLimitCheckValue+0xbe>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800bc9a:	19bb      	adds	r3, r7, r6
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	025b      	lsls	r3, r3, #9
 800bca0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800bca2:	231e      	movs	r3, #30
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	2200      	movs	r2, #0
 800bca8:	701a      	strb	r2, [r3, #0]
		break;
 800bcaa:	e003      	b.n	800bcb4 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bcac:	231f      	movs	r3, #31
 800bcae:	18fb      	adds	r3, r7, r3
 800bcb0:	22fc      	movs	r2, #252	; 0xfc
 800bcb2:	701a      	strb	r2, [r3, #0]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcb4:	231f      	movs	r3, #31
 800bcb6:	18fb      	adds	r3, r7, r3
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d136      	bne.n	800bd2e <VL53L0X_GetLimitCheckValue+0x14a>

		if (EnableZeroValue == 1) {
 800bcc0:	231e      	movs	r3, #30
 800bcc2:	18fb      	adds	r3, r7, r3
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d12e      	bne.n	800bd28 <VL53L0X_GetLimitCheckValue+0x144>

			if (TempFix1616 == 0) {
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d115      	bne.n	800bcfc <VL53L0X_GetLimitCheckValue+0x118>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800bcd0:	210a      	movs	r1, #10
 800bcd2:	187b      	adds	r3, r7, r1
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	330c      	adds	r3, #12
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	18d3      	adds	r3, r2, r3
 800bcde:	3304      	adds	r3, #4
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	69ba      	ldr	r2, [r7, #24]
 800bce8:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bcea:	187b      	adds	r3, r7, r1
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	2128      	movs	r1, #40	; 0x28
 800bcf2:	18d3      	adds	r3, r2, r3
 800bcf4:	185b      	adds	r3, r3, r1
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	701a      	strb	r2, [r3, #0]
 800bcfa:	e018      	b.n	800bd2e <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69ba      	ldr	r2, [r7, #24]
 800bd00:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bd02:	210a      	movs	r1, #10
 800bd04:	187b      	adds	r3, r7, r1
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	330c      	adds	r3, #12
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	18d3      	adds	r3, r2, r3
 800bd10:	3304      	adds	r3, #4
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	601a      	str	r2, [r3, #0]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800bd16:	187b      	adds	r3, r7, r1
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	2128      	movs	r1, #40	; 0x28
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	185b      	adds	r3, r3, r1
 800bd22:	2201      	movs	r2, #1
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	e002      	b.n	800bd2e <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd2e:	231f      	movs	r3, #31
 800bd30:	18fb      	adds	r3, r7, r3
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b25b      	sxtb	r3, r3

}
 800bd36:	0018      	movs	r0, r3
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	b009      	add	sp, #36	; 0x24
 800bd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd3e:	46c0      	nop			; (mov r8, r8)
 800bd40:	08016aac 	.word	0x08016aac

0800bd44 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd4e:	250f      	movs	r5, #15
 800bd50:	197b      	adds	r3, r7, r5
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800bd56:	197c      	adds	r4, r7, r5
 800bd58:	260e      	movs	r6, #14
 800bd5a:	19ba      	adds	r2, r7, r6
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2101      	movs	r1, #1
 800bd60:	0018      	movs	r0, r3
 800bd62:	f004 fdd8 	bl	8010916 <VL53L0X_RdByte>
 800bd66:	0003      	movs	r3, r0
 800bd68:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800bd6a:	197b      	adds	r3, r7, r5
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d111      	bne.n	800bd98 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		PALDevDataSet(Dev, SequenceConfig, data);
 800bd74:	19bb      	adds	r3, r7, r6
 800bd76:	7819      	ldrb	r1, [r3, #0]
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	2398      	movs	r3, #152	; 0x98
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	54d1      	strb	r1, [r2, r3]
		if (data & (0x01 << 7))
 800bd80:	19bb      	adds	r3, r7, r6
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	b25b      	sxtb	r3, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	da03      	bge.n	800bd92 <VL53L0X_GetWrapAroundCheckEnable+0x4e>
			*pWrapAroundCheckEnable = 0x01;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	701a      	strb	r2, [r3, #0]
 800bd90:	e002      	b.n	800bd98 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		else
			*pWrapAroundCheckEnable = 0x00;
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2200      	movs	r2, #0
 800bd96:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bd98:	230f      	movs	r3, #15
 800bd9a:	18fb      	adds	r3, r7, r3
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	b25b      	sxtb	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d104      	bne.n	800bdae <VL53L0X_GetWrapAroundCheckEnable+0x6a>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	7819      	ldrb	r1, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	224c      	movs	r2, #76	; 0x4c
 800bdac:	5499      	strb	r1, [r3, r2]
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdae:	230f      	movs	r3, #15
 800bdb0:	18fb      	adds	r3, r7, r3
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b25b      	sxtb	r3, r3
}
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	b005      	add	sp, #20
 800bdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bdbe <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800bdbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdc6:	250f      	movs	r5, #15
 800bdc8:	197b      	adds	r3, r7, r5
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bdce:	197c      	adds	r4, r7, r5
 800bdd0:	260e      	movs	r6, #14
 800bdd2:	19ba      	adds	r2, r7, r6
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	0011      	movs	r1, r2
 800bdd8:	0018      	movs	r0, r3
 800bdda:	f7ff faa7 	bl	800b32c <VL53L0X_GetDeviceMode>
 800bdde:	0003      	movs	r3, r0
 800bde0:	7023      	strb	r3, [r4, #0]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800bde2:	002a      	movs	r2, r5
 800bde4:	18bb      	adds	r3, r7, r2
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	b25b      	sxtb	r3, r3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10a      	bne.n	800be04 <VL53L0X_PerformSingleMeasurement+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800bdee:	19bb      	adds	r3, r7, r6
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_StartMeasurement(Dev);
 800bdf6:	18bc      	adds	r4, r7, r2
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	f000 f8ca 	bl	800bf94 <VL53L0X_StartMeasurement>
 800be00:	0003      	movs	r3, r0
 800be02:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800be04:	220f      	movs	r2, #15
 800be06:	18bb      	adds	r3, r7, r2
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b25b      	sxtb	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <VL53L0X_PerformSingleMeasurement+0x60>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800be10:	18bc      	adds	r4, r7, r2
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	0018      	movs	r0, r3
 800be16:	f001 fe0e 	bl	800da36 <VL53L0X_measurement_poll_for_completion>
 800be1a:	0003      	movs	r3, r0
 800be1c:	7023      	strb	r3, [r4, #0]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800be1e:	230f      	movs	r3, #15
 800be20:	18fb      	adds	r3, r7, r3
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	b25b      	sxtb	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d109      	bne.n	800be3e <VL53L0X_PerformSingleMeasurement+0x80>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800be2a:	230e      	movs	r3, #14
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d104      	bne.n	800be3e <VL53L0X_PerformSingleMeasurement+0x80>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	2399      	movs	r3, #153	; 0x99
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	2103      	movs	r1, #3
 800be3c:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800be3e:	230f      	movs	r3, #15
 800be40:	18fb      	adds	r3, r7, r3
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	b25b      	sxtb	r3, r3
}
 800be46:	0018      	movs	r0, r3
 800be48:	46bd      	mov	sp, r7
 800be4a:	b005      	add	sp, #20
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be4e <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800be4e:	b5b0      	push	{r4, r5, r7, lr}
 800be50:	b086      	sub	sp, #24
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be5a:	2517      	movs	r5, #23
 800be5c:	197b      	adds	r3, r7, r5
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800be62:	197c      	adds	r4, r7, r5
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	2301      	movs	r3, #1
 800be6c:	f001 fd8e 	bl	800d98c <VL53L0X_perform_ref_calibration>
 800be70:	0003      	movs	r3, r0
 800be72:	7023      	strb	r3, [r4, #0]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800be74:	197b      	adds	r3, r7, r5
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	b25b      	sxtb	r3, r3
}
 800be7a:	0018      	movs	r0, r3
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b006      	add	sp, #24
 800be80:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800be84 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800be84:	b590      	push	{r4, r7, lr}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	000a      	movs	r2, r1
 800be8e:	1cfb      	adds	r3, r7, #3
 800be90:	701a      	strb	r2, [r3, #0]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be92:	2317      	movs	r3, #23
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800be9a:	2016      	movs	r0, #22
 800be9c:	183b      	adds	r3, r7, r0
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	21da      	movs	r1, #218	; 0xda
 800bea2:	5c52      	ldrb	r2, [r2, r1]
 800bea4:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800bea6:	0002      	movs	r2, r0
 800bea8:	18bb      	adds	r3, r7, r2
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d007      	beq.n	800bec0 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800beb0:	18bb      	adds	r3, r7, r2
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d003      	beq.n	800bec0 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800beb8:	18bb      	adds	r3, r7, r2
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d15e      	bne.n	800bf7e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800bec0:	2317      	movs	r3, #23
 800bec2:	18fc      	adds	r4, r7, r3
 800bec4:	230c      	movs	r3, #12
 800bec6:	18fb      	adds	r3, r7, r3
 800bec8:	2210      	movs	r2, #16
 800beca:	18ba      	adds	r2, r7, r2
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	2101      	movs	r1, #1
 800bed0:	f000 fcca 	bl	800c868 <VL53L0X_GetInterruptThresholds>
 800bed4:	0003      	movs	r3, r0
 800bed6:	7023      	strb	r3, [r4, #0]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	23ff      	movs	r3, #255	; 0xff
 800bedc:	041b      	lsls	r3, r3, #16
 800bede:	429a      	cmp	r2, r3
 800bee0:	d804      	bhi.n	800beec <VL53L0X_CheckAndLoadInterruptSettings+0x68>
			(ThresholdHigh > 255*65536)) &&
 800bee2:	68fa      	ldr	r2, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800bee4:	23ff      	movs	r3, #255	; 0xff
 800bee6:	041b      	lsls	r3, r3, #16
 800bee8:	429a      	cmp	r2, r3
 800beea:	d948      	bls.n	800bf7e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(ThresholdHigh > 255*65536)) &&
 800beec:	2217      	movs	r2, #23
 800beee:	18bb      	adds	r3, r7, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b25b      	sxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d142      	bne.n	800bf7e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800bef8:	1cfb      	adds	r3, r7, #3
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d009      	beq.n	800bf14 <VL53L0X_CheckAndLoadInterruptSettings+0x90>
				Status = VL53L0X_load_tuning_settings(Dev,
 800bf00:	18bc      	adds	r4, r7, r2
 800bf02:	4a23      	ldr	r2, [pc, #140]	; (800bf90 <VL53L0X_CheckAndLoadInterruptSettings+0x10c>)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	0011      	movs	r1, r2
 800bf08:	0018      	movs	r0, r3
 800bf0a:	f003 fc03 	bl	800f714 <VL53L0X_load_tuning_settings>
 800bf0e:	0003      	movs	r3, r0
 800bf10:	7023      	strb	r3, [r4, #0]
 800bf12:	e034      	b.n	800bf7e <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2204      	movs	r2, #4
 800bf18:	21ff      	movs	r1, #255	; 0xff
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f004 fc4c 	bl	80107b8 <VL53L0X_WrByte>
 800bf20:	0003      	movs	r3, r0
 800bf22:	0019      	movs	r1, r3
 800bf24:	2417      	movs	r4, #23
 800bf26:	193b      	adds	r3, r7, r4
 800bf28:	193a      	adds	r2, r7, r4
 800bf2a:	7812      	ldrb	r2, [r2, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	2170      	movs	r1, #112	; 0x70
 800bf36:	0018      	movs	r0, r3
 800bf38:	f004 fc3e 	bl	80107b8 <VL53L0X_WrByte>
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	0019      	movs	r1, r3
 800bf40:	193b      	adds	r3, r7, r4
 800bf42:	193a      	adds	r2, r7, r4
 800bf44:	7812      	ldrb	r2, [r2, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	21ff      	movs	r1, #255	; 0xff
 800bf50:	0018      	movs	r0, r3
 800bf52:	f004 fc31 	bl	80107b8 <VL53L0X_WrByte>
 800bf56:	0003      	movs	r3, r0
 800bf58:	0019      	movs	r1, r3
 800bf5a:	193b      	adds	r3, r7, r4
 800bf5c:	193a      	adds	r2, r7, r4
 800bf5e:	7812      	ldrb	r2, [r2, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	2180      	movs	r1, #128	; 0x80
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f004 fc24 	bl	80107b8 <VL53L0X_WrByte>
 800bf70:	0003      	movs	r3, r0
 800bf72:	0019      	movs	r1, r3
 800bf74:	193b      	adds	r3, r7, r4
 800bf76:	193a      	adds	r2, r7, r4
 800bf78:	7812      	ldrb	r2, [r2, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	701a      	strb	r2, [r3, #0]
		}


	}

	return Status;
 800bf7e:	2317      	movs	r3, #23
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	b25b      	sxtb	r3, r3

}
 800bf86:	0018      	movs	r0, r3
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	b007      	add	sp, #28
 800bf8c:	bd90      	pop	{r4, r7, pc}
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	20000100 	.word	0x20000100

0800bf94 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf9c:	2517      	movs	r5, #23
 800bf9e:	197b      	adds	r3, r7, r5
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800bfa4:	230f      	movs	r3, #15
 800bfa6:	18fb      	adds	r3, r7, r3
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800bfac:	260e      	movs	r6, #14
 800bfae:	19ba      	adds	r2, r7, r6
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	0011      	movs	r1, r2
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f7ff f9b9 	bl	800b32c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800bfba:	197c      	adds	r4, r7, r5
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	2180      	movs	r1, #128	; 0x80
 800bfc2:	0018      	movs	r0, r3
 800bfc4:	f004 fbf8 	bl	80107b8 <VL53L0X_WrByte>
 800bfc8:	0003      	movs	r3, r0
 800bfca:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bfcc:	197c      	adds	r4, r7, r5
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	21ff      	movs	r1, #255	; 0xff
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f004 fbef 	bl	80107b8 <VL53L0X_WrByte>
 800bfda:	0003      	movs	r3, r0
 800bfdc:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800bfde:	197c      	adds	r4, r7, r5
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	f004 fbe6 	bl	80107b8 <VL53L0X_WrByte>
 800bfec:	0003      	movs	r3, r0
 800bfee:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	239d      	movs	r3, #157	; 0x9d
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	5cd2      	ldrb	r2, [r2, r3]
 800bff8:	197c      	adds	r4, r7, r5
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2191      	movs	r1, #145	; 0x91
 800bffe:	0018      	movs	r0, r3
 800c000:	f004 fbda 	bl	80107b8 <VL53L0X_WrByte>
 800c004:	0003      	movs	r3, r0
 800c006:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c008:	197c      	adds	r4, r7, r5
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	2100      	movs	r1, #0
 800c010:	0018      	movs	r0, r3
 800c012:	f004 fbd1 	bl	80107b8 <VL53L0X_WrByte>
 800c016:	0003      	movs	r3, r0
 800c018:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c01a:	197c      	adds	r4, r7, r5
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	21ff      	movs	r1, #255	; 0xff
 800c022:	0018      	movs	r0, r3
 800c024:	f004 fbc8 	bl	80107b8 <VL53L0X_WrByte>
 800c028:	0003      	movs	r3, r0
 800c02a:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c02c:	197c      	adds	r4, r7, r5
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	2180      	movs	r1, #128	; 0x80
 800c034:	0018      	movs	r0, r3
 800c036:	f004 fbbf 	bl	80107b8 <VL53L0X_WrByte>
 800c03a:	0003      	movs	r3, r0
 800c03c:	7023      	strb	r3, [r4, #0]

	switch (DeviceMode) {
 800c03e:	19bb      	adds	r3, r7, r6
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b03      	cmp	r3, #3
 800c044:	d100      	bne.n	800c048 <VL53L0X_StartMeasurement+0xb4>
 800c046:	e073      	b.n	800c130 <VL53L0X_StartMeasurement+0x19c>
 800c048:	dd00      	ble.n	800c04c <VL53L0X_StartMeasurement+0xb8>
 800c04a:	e094      	b.n	800c176 <VL53L0X_StartMeasurement+0x1e2>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <VL53L0X_StartMeasurement+0xc2>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d04a      	beq.n	800c0ea <VL53L0X_StartMeasurement+0x156>
 800c054:	e08f      	b.n	800c176 <VL53L0X_StartMeasurement+0x1e2>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c056:	2517      	movs	r5, #23
 800c058:	197c      	adds	r4, r7, r5
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	2100      	movs	r1, #0
 800c060:	0018      	movs	r0, r3
 800c062:	f004 fba9 	bl	80107b8 <VL53L0X_WrByte>
 800c066:	0003      	movs	r3, r0
 800c068:	7023      	strb	r3, [r4, #0]

		Byte = StartStopByte;
 800c06a:	230d      	movs	r3, #13
 800c06c:	18fb      	adds	r3, r7, r3
 800c06e:	220f      	movs	r2, #15
 800c070:	18ba      	adds	r2, r7, r2
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	701a      	strb	r2, [r3, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800c076:	197b      	adds	r3, r7, r5
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d000      	beq.n	800c082 <VL53L0X_StartMeasurement+0xee>
 800c080:	e07e      	b.n	800c180 <VL53L0X_StartMeasurement+0x1ec>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <VL53L0X_StartMeasurement+0x10e>
					Status = VL53L0X_RdByte(Dev,
 800c08c:	2317      	movs	r3, #23
 800c08e:	18fc      	adds	r4, r7, r3
 800c090:	230d      	movs	r3, #13
 800c092:	18fa      	adds	r2, r7, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2100      	movs	r1, #0
 800c098:	0018      	movs	r0, r3
 800c09a:	f004 fc3c 	bl	8010916 <VL53L0X_RdByte>
 800c09e:	0003      	movs	r3, r0
 800c0a0:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c0a8:	230d      	movs	r3, #13
 800c0aa:	18fb      	adds	r3, r7, r3
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	210f      	movs	r1, #15
 800c0b0:	187a      	adds	r2, r7, r1
 800c0b2:	7812      	ldrb	r2, [r2, #0]
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c0b8:	187a      	adds	r2, r7, r1
 800c0ba:	7812      	ldrb	r2, [r2, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d10a      	bne.n	800c0d6 <VL53L0X_StartMeasurement+0x142>
				&& (Status == VL53L0X_ERROR_NONE)
 800c0c0:	2317      	movs	r3, #23
 800c0c2:	18fb      	adds	r3, r7, r3
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b25b      	sxtb	r3, r3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <VL53L0X_StartMeasurement+0x142>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c0cc:	693a      	ldr	r2, [r7, #16]
 800c0ce:	23fa      	movs	r3, #250	; 0xfa
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d3d7      	bcc.n	800c086 <VL53L0X_StartMeasurement+0xf2>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	23fa      	movs	r3, #250	; 0xfa
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d34f      	bcc.n	800c180 <VL53L0X_StartMeasurement+0x1ec>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c0e0:	2317      	movs	r3, #23
 800c0e2:	18fb      	adds	r3, r7, r3
 800c0e4:	22f9      	movs	r2, #249	; 0xf9
 800c0e6:	701a      	strb	r2, [r3, #0]

		}

		break;
 800c0e8:	e04a      	b.n	800c180 <VL53L0X_StartMeasurement+0x1ec>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c0ea:	2217      	movs	r2, #23
 800c0ec:	18bb      	adds	r3, r7, r2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	b25b      	sxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d107      	bne.n	800c106 <VL53L0X_StartMeasurement+0x172>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c0f6:	18bc      	adds	r4, r7, r2
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f7ff fec1 	bl	800be84 <VL53L0X_CheckAndLoadInterruptSettings>
 800c102:	0003      	movs	r3, r0
 800c104:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800c106:	2517      	movs	r5, #23
 800c108:	197c      	adds	r4, r7, r5
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	2100      	movs	r1, #0
 800c110:	0018      	movs	r0, r3
 800c112:	f004 fb51 	bl	80107b8 <VL53L0X_WrByte>
 800c116:	0003      	movs	r3, r0
 800c118:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c11a:	197b      	adds	r3, r7, r5
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	b25b      	sxtb	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d12f      	bne.n	800c184 <VL53L0X_StartMeasurement+0x1f0>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	2399      	movs	r3, #153	; 0x99
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	2104      	movs	r1, #4
 800c12c:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800c12e:	e029      	b.n	800c184 <VL53L0X_StartMeasurement+0x1f0>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c130:	2217      	movs	r2, #23
 800c132:	18bb      	adds	r3, r7, r2
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	b25b      	sxtb	r3, r3
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d107      	bne.n	800c14c <VL53L0X_StartMeasurement+0x1b8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c13c:	18bc      	adds	r4, r7, r2
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2101      	movs	r1, #1
 800c142:	0018      	movs	r0, r3
 800c144:	f7ff fe9e 	bl	800be84 <VL53L0X_CheckAndLoadInterruptSettings>
 800c148:	0003      	movs	r3, r0
 800c14a:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800c14c:	2517      	movs	r5, #23
 800c14e:	197c      	adds	r4, r7, r5
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2204      	movs	r2, #4
 800c154:	2100      	movs	r1, #0
 800c156:	0018      	movs	r0, r3
 800c158:	f004 fb2e 	bl	80107b8 <VL53L0X_WrByte>
 800c15c:	0003      	movs	r3, r0
 800c15e:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c160:	197b      	adds	r3, r7, r5
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	b25b      	sxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10e      	bne.n	800c188 <VL53L0X_StartMeasurement+0x1f4>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	2399      	movs	r3, #153	; 0x99
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	2104      	movs	r1, #4
 800c172:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800c174:	e008      	b.n	800c188 <VL53L0X_StartMeasurement+0x1f4>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c176:	2317      	movs	r3, #23
 800c178:	18fb      	adds	r3, r7, r3
 800c17a:	22f8      	movs	r2, #248	; 0xf8
 800c17c:	701a      	strb	r2, [r3, #0]
 800c17e:	e004      	b.n	800c18a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800c180:	46c0      	nop			; (mov r8, r8)
 800c182:	e002      	b.n	800c18a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800c184:	46c0      	nop			; (mov r8, r8)
 800c186:	e000      	b.n	800c18a <VL53L0X_StartMeasurement+0x1f6>
		break;
 800c188:	46c0      	nop			; (mov r8, r8)
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c18a:	2317      	movs	r3, #23
 800c18c:	18fb      	adds	r3, r7, r3
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	b25b      	sxtb	r3, r3
}
 800c192:	0018      	movs	r0, r3
 800c194:	46bd      	mov	sp, r7
 800c196:	b007      	add	sp, #28
 800c198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c19a <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c19a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c19c:	b085      	sub	sp, #20
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1a4:	200f      	movs	r0, #15
 800c1a6:	183b      	adds	r3, r7, r0
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	701a      	strb	r2, [r3, #0]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c1ac:	240e      	movs	r4, #14
 800c1ae:	193b      	adds	r3, r7, r4
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	21da      	movs	r1, #218	; 0xda
 800c1b4:	5c52      	ldrb	r2, [r2, r1]
 800c1b6:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c1b8:	193b      	adds	r3, r7, r4
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d114      	bne.n	800c1ea <VL53L0X_GetMeasurementDataReady+0x50>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c1c0:	183c      	adds	r4, r7, r0
 800c1c2:	2308      	movs	r3, #8
 800c1c4:	18fa      	adds	r2, r7, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	0011      	movs	r1, r2
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	f000 fbe8 	bl	800c9a0 <VL53L0X_GetInterruptMaskStatus>
 800c1d0:	0003      	movs	r3, r0
 800c1d2:	7023      	strb	r3, [r4, #0]
		if (InterruptMask ==
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	d103      	bne.n	800c1e2 <VL53L0X_GetMeasurementDataReady+0x48>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	701a      	strb	r2, [r3, #0]
 800c1e0:	e020      	b.n	800c224 <VL53L0X_GetMeasurementDataReady+0x8a>
		else
			*pMeasurementDataReady = 0;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
 800c1e8:	e01c      	b.n	800c224 <VL53L0X_GetMeasurementDataReady+0x8a>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c1ea:	250f      	movs	r5, #15
 800c1ec:	197c      	adds	r4, r7, r5
 800c1ee:	260d      	movs	r6, #13
 800c1f0:	19ba      	adds	r2, r7, r6
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2114      	movs	r1, #20
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	f004 fb8d 	bl	8010916 <VL53L0X_RdByte>
 800c1fc:	0003      	movs	r3, r0
 800c1fe:	7023      	strb	r3, [r4, #0]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c200:	197b      	adds	r3, r7, r5
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	b25b      	sxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10c      	bne.n	800c224 <VL53L0X_GetMeasurementDataReady+0x8a>
			if (SysRangeStatusRegister & 0x01)
 800c20a:	19bb      	adds	r3, r7, r6
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	001a      	movs	r2, r3
 800c210:	2301      	movs	r3, #1
 800c212:	4013      	ands	r3, r2
 800c214:	d003      	beq.n	800c21e <VL53L0X_GetMeasurementDataReady+0x84>
				*pMeasurementDataReady = 1;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2201      	movs	r2, #1
 800c21a:	701a      	strb	r2, [r3, #0]
 800c21c:	e002      	b.n	800c224 <VL53L0X_GetMeasurementDataReady+0x8a>
			else
				*pMeasurementDataReady = 0;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2200      	movs	r2, #0
 800c222:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c224:	230f      	movs	r3, #15
 800c226:	18fb      	adds	r3, r7, r3
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	b25b      	sxtb	r3, r3
}
 800c22c:	0018      	movs	r0, r3
 800c22e:	46bd      	mov	sp, r7
 800c230:	b005      	add	sp, #20
 800c232:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c234 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c236:	b097      	sub	sp, #92	; 0x5c
 800c238:	af02      	add	r7, sp, #8
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c23e:	264f      	movs	r6, #79	; 0x4f
 800c240:	19bb      	adds	r3, r7, r6
 800c242:	2200      	movs	r2, #0
 800c244:	701a      	strb	r2, [r3, #0]
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c246:	19bc      	adds	r4, r7, r6
 800c248:	2528      	movs	r5, #40	; 0x28
 800c24a:	197a      	adds	r2, r7, r5
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	230c      	movs	r3, #12
 800c250:	2114      	movs	r1, #20
 800c252:	f004 fa7b 	bl	801074c <VL53L0X_ReadMulti>
 800c256:	0003      	movs	r3, r0
 800c258:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c25a:	19bb      	adds	r3, r7, r6
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	b25b      	sxtb	r3, r3
 800c260:	2b00      	cmp	r3, #0
 800c262:	d000      	beq.n	800c266 <VL53L0X_GetRangingMeasurementData+0x32>
 800c264:	e0f0      	b.n	800c448 <VL53L0X_GetRangingMeasurementData+0x214>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2200      	movs	r2, #0
 800c26a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2200      	movs	r2, #0
 800c270:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c272:	0028      	movs	r0, r5
 800c274:	183b      	adds	r3, r7, r0
 800c276:	7a9b      	ldrb	r3, [r3, #10]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	021b      	lsls	r3, r3, #8
 800c27c:	b299      	uxth	r1, r3
 800c27e:	183b      	adds	r3, r7, r0
 800c280:	7adb      	ldrb	r3, [r3, #11]
 800c282:	b29a      	uxth	r2, r3
 800c284:	244c      	movs	r4, #76	; 0x4c
 800c286:	193b      	adds	r3, r7, r4
 800c288:	188a      	adds	r2, r1, r2
 800c28a:	801a      	strh	r2, [r3, #0]
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2200      	movs	r2, #0
 800c290:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c292:	183b      	adds	r3, r7, r0
 800c294:	799b      	ldrb	r3, [r3, #6]
 800c296:	b29b      	uxth	r3, r3
 800c298:	021b      	lsls	r3, r3, #8
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	183b      	adds	r3, r7, r0
 800c29e:	79db      	ldrb	r3, [r3, #7]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	18d3      	adds	r3, r2, r3
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	025b      	lsls	r3, r3, #9
 800c2a8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2ae:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c2b0:	183b      	adds	r3, r7, r0
 800c2b2:	7a1b      	ldrb	r3, [r3, #8]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	021b      	lsls	r3, r3, #8
 800c2b8:	b299      	uxth	r1, r3
 800c2ba:	183b      	adds	r3, r7, r0
 800c2bc:	7a5b      	ldrb	r3, [r3, #9]
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	2542      	movs	r5, #66	; 0x42
 800c2c2:	197b      	adds	r3, r7, r5
 800c2c4:	188a      	adds	r2, r1, r2
 800c2c6:	801a      	strh	r2, [r3, #0]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c2c8:	197b      	adds	r3, r7, r5
 800c2ca:	881b      	ldrh	r3, [r3, #0]
 800c2cc:	025b      	lsls	r3, r3, #9
 800c2ce:	001a      	movs	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c2d4:	183b      	adds	r3, r7, r0
 800c2d6:	789b      	ldrb	r3, [r3, #2]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	021b      	lsls	r3, r3, #8
 800c2dc:	b299      	uxth	r1, r3
 800c2de:	183b      	adds	r3, r7, r0
 800c2e0:	78db      	ldrb	r3, [r3, #3]
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	2540      	movs	r5, #64	; 0x40
 800c2e6:	197b      	adds	r3, r7, r5
 800c2e8:	188a      	adds	r2, r1, r2
 800c2ea:	801a      	strh	r2, [r3, #0]
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	197a      	adds	r2, r7, r5
 800c2f0:	8812      	ldrh	r2, [r2, #0]
 800c2f2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c2f4:	233f      	movs	r3, #63	; 0x3f
 800c2f6:	18fb      	adds	r3, r7, r3
 800c2f8:	183a      	adds	r2, r7, r0
 800c2fa:	7812      	ldrb	r2, [r2, #0]
 800c2fc:	701a      	strb	r2, [r3, #0]

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c2fe:	203c      	movs	r0, #60	; 0x3c
 800c300:	183b      	adds	r3, r7, r0
 800c302:	6879      	ldr	r1, [r7, #4]
 800c304:	22a9      	movs	r2, #169	; 0xa9
 800c306:	0052      	lsls	r2, r2, #1
 800c308:	5a8a      	ldrh	r2, [r1, r2]
 800c30a:	801a      	strh	r2, [r3, #0]
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c30c:	263b      	movs	r6, #59	; 0x3b
 800c30e:	19bb      	adds	r3, r7, r6
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	2232      	movs	r2, #50	; 0x32
 800c314:	32ff      	adds	r2, #255	; 0xff
 800c316:	5c8a      	ldrb	r2, [r1, r2]
 800c318:	701a      	strb	r2, [r3, #0]
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c31a:	183b      	adds	r3, r7, r0
 800c31c:	881a      	ldrh	r2, [r3, #0]
 800c31e:	23fa      	movs	r3, #250	; 0xfa
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	429a      	cmp	r2, r3
 800c324:	d053      	beq.n	800c3ce <VL53L0X_GetRangingMeasurementData+0x19a>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c326:	183b      	adds	r3, r7, r0
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	193a      	adds	r2, r7, r4
 800c32c:	8812      	ldrh	r2, [r2, #0]
 800c32e:	4353      	muls	r3, r2
 800c330:	33f5      	adds	r3, #245	; 0xf5
 800c332:	33ff      	adds	r3, #255	; 0xff
 800c334:	22fa      	movs	r2, #250	; 0xfa
 800c336:	0091      	lsls	r1, r2, #2
 800c338:	0018      	movs	r0, r3
 800c33a:	f7f3 ff8b 	bl	8000254 <__divsi3>
 800c33e:	0003      	movs	r3, r0
 800c340:	001a      	movs	r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c342:	193b      	adds	r3, r7, r4
 800c344:	801a      	strh	r2, [r3, #0]

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1a      	ldr	r2, [r3, #32]
 800c34a:	2138      	movs	r1, #56	; 0x38
 800c34c:	187b      	adds	r3, r7, r1
 800c34e:	801a      	strh	r2, [r3, #0]
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c350:	2037      	movs	r0, #55	; 0x37
 800c352:	183b      	adds	r3, r7, r0
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	7f12      	ldrb	r2, [r2, #28]
 800c358:	701a      	strb	r2, [r3, #0]
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c35a:	183b      	adds	r3, r7, r0
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d035      	beq.n	800c3ce <VL53L0X_GetRangingMeasurementData+0x19a>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c362:	187b      	adds	r3, r7, r1
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	197a      	adds	r2, r7, r5
 800c368:	8812      	ldrh	r2, [r2, #0]
 800c36a:	4353      	muls	r3, r2
 800c36c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c370:	429a      	cmp	r2, r3
 800c372:	d10d      	bne.n	800c390 <VL53L0X_GetRangingMeasurementData+0x15c>
					if (RangeFractionalEnable)
 800c374:	19bb      	adds	r3, r7, r6
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <VL53L0X_GetRangingMeasurementData+0x152>
						XtalkRangeMilliMeter = 8888;
 800c37c:	234a      	movs	r3, #74	; 0x4a
 800c37e:	18fb      	adds	r3, r7, r3
 800c380:	4a52      	ldr	r2, [pc, #328]	; (800c4cc <VL53L0X_GetRangingMeasurementData+0x298>)
 800c382:	801a      	strh	r2, [r3, #0]
 800c384:	e01d      	b.n	800c3c2 <VL53L0X_GetRangingMeasurementData+0x18e>
					else
						XtalkRangeMilliMeter = 8888
 800c386:	234a      	movs	r3, #74	; 0x4a
 800c388:	18fb      	adds	r3, r7, r3
 800c38a:	4a51      	ldr	r2, [pc, #324]	; (800c4d0 <VL53L0X_GetRangingMeasurementData+0x29c>)
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	e018      	b.n	800c3c2 <VL53L0X_GetRangingMeasurementData+0x18e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c390:	234c      	movs	r3, #76	; 0x4c
 800c392:	18fb      	adds	r3, r7, r3
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c398:	435a      	muls	r2, r3
 800c39a:	0010      	movs	r0, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c39c:	2338      	movs	r3, #56	; 0x38
 800c39e:	18fb      	adds	r3, r7, r3
 800c3a0:	881b      	ldrh	r3, [r3, #0]
 800c3a2:	2240      	movs	r2, #64	; 0x40
 800c3a4:	18ba      	adds	r2, r7, r2
 800c3a6:	8812      	ldrh	r2, [r2, #0]
 800c3a8:	4353      	muls	r3, r2
						>> 8));
 800c3aa:	121b      	asrs	r3, r3, #8
 800c3ac:	001a      	movs	r2, r3
						- ((XTalkCompensationRateMegaCps
 800c3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b0:	1a9b      	subs	r3, r3, r2
						/ (SignalRate
 800c3b2:	0019      	movs	r1, r3
 800c3b4:	f7f3 fec4 	bl	8000140 <__udivsi3>
 800c3b8:	0003      	movs	r3, r0
 800c3ba:	001a      	movs	r2, r3
					XtalkRangeMilliMeter =
 800c3bc:	234a      	movs	r3, #74	; 0x4a
 800c3be:	18fb      	adds	r3, r7, r3
 800c3c0:	801a      	strh	r2, [r3, #0]
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c3c2:	234c      	movs	r3, #76	; 0x4c
 800c3c4:	18fb      	adds	r3, r7, r3
 800c3c6:	224a      	movs	r2, #74	; 0x4a
 800c3c8:	18ba      	adds	r2, r7, r2
 800c3ca:	8812      	ldrh	r2, [r2, #0]
 800c3cc:	801a      	strh	r2, [r3, #0]
			}

		}

		if (RangeFractionalEnable) {
 800c3ce:	233b      	movs	r3, #59	; 0x3b
 800c3d0:	18fb      	adds	r3, r7, r3
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00e      	beq.n	800c3f6 <VL53L0X_GetRangingMeasurementData+0x1c2>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c3d8:	214c      	movs	r1, #76	; 0x4c
 800c3da:	187b      	adds	r3, r7, r1
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	089b      	lsrs	r3, r3, #2
 800c3e0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c3e6:	187b      	adds	r3, r7, r1
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	019b      	lsls	r3, r3, #6
 800c3ee:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	75da      	strb	r2, [r3, #23]
 800c3f4:	e007      	b.n	800c406 <VL53L0X_GetRangingMeasurementData+0x1d2>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	224c      	movs	r2, #76	; 0x4c
 800c3fa:	18ba      	adds	r2, r7, r2
 800c3fc:	8812      	ldrh	r2, [r2, #0]
 800c3fe:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2200      	movs	r2, #0
 800c404:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c406:	2340      	movs	r3, #64	; 0x40
 800c408:	18fb      	adds	r3, r7, r3
 800c40a:	881c      	ldrh	r4, [r3, #0]
 800c40c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c40e:	233f      	movs	r3, #63	; 0x3f
 800c410:	18fb      	adds	r3, r7, r3
 800c412:	7819      	ldrb	r1, [r3, #0]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	2536      	movs	r5, #54	; 0x36
 800c418:	197b      	adds	r3, r7, r5
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	0023      	movs	r3, r4
 800c422:	f003 fed9 	bl	80101d8 <VL53L0X_get_pal_range_status>
 800c426:	0003      	movs	r3, r0
 800c428:	0019      	movs	r1, r3
 800c42a:	204f      	movs	r0, #79	; 0x4f
 800c42c:	183b      	adds	r3, r7, r0
 800c42e:	183a      	adds	r2, r7, r0
 800c430:	7812      	ldrb	r2, [r2, #0]
 800c432:	430a      	orrs	r2, r1
 800c434:	701a      	strb	r2, [r3, #0]
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c436:	183b      	adds	r3, r7, r0
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	b25b      	sxtb	r3, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <VL53L0X_GetRangingMeasurementData+0x214>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c440:	197b      	adds	r3, r7, r5
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c448:	234f      	movs	r3, #79	; 0x4f
 800c44a:	18fb      	adds	r3, r7, r3
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	b25b      	sxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d132      	bne.n	800c4ba <VL53L0X_GetRangingMeasurementData+0x286>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c454:	210c      	movs	r1, #12
 800c456:	187a      	adds	r2, r7, r1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3350      	adds	r3, #80	; 0x50
 800c45c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800c45e:	c231      	stmia	r2!, {r0, r4, r5}
 800c460:	cb31      	ldmia	r3!, {r0, r4, r5}
 800c462:	c231      	stmia	r2!, {r0, r4, r5}
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6013      	str	r3, [r2, #0]

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	891a      	ldrh	r2, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c46c:	187b      	adds	r3, r7, r1
 800c46e:	811a      	strh	r2, [r3, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	7dda      	ldrb	r2, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c474:	187b      	adds	r3, r7, r1
 800c476:	75da      	strb	r2, [r3, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	895a      	ldrh	r2, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c47c:	187b      	adds	r3, r7, r1
 800c47e:	815a      	strh	r2, [r3, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	685a      	ldr	r2, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c484:	187b      	adds	r3, r7, r1
 800c486:	605a      	str	r2, [r3, #4]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	68da      	ldr	r2, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c48c:	187b      	adds	r3, r7, r1
 800c48e:	60da      	str	r2, [r3, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	691a      	ldr	r2, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c494:	187b      	adds	r3, r7, r1
 800c496:	611a      	str	r2, [r3, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	8a9a      	ldrh	r2, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c49c:	187b      	adds	r3, r7, r1
 800c49e:	829a      	strh	r2, [r3, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	7e1a      	ldrb	r2, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c4a4:	187b      	adds	r3, r7, r1
 800c4a6:	761a      	strb	r2, [r3, #24]

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	187a      	adds	r2, r7, r1
 800c4ac:	3350      	adds	r3, #80	; 0x50
 800c4ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c4b0:	c313      	stmia	r3!, {r0, r1, r4}
 800c4b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c4b4:	c313      	stmia	r3!, {r0, r1, r4}
 800c4b6:	6812      	ldr	r2, [r2, #0]
 800c4b8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c4ba:	234f      	movs	r3, #79	; 0x4f
 800c4bc:	18fb      	adds	r3, r7, r3
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	b25b      	sxtb	r3, r3
}
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	b015      	add	sp, #84	; 0x54
 800c4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ca:	46c0      	nop			; (mov r8, r8)
 800c4cc:	000022b8 	.word	0x000022b8
 800c4d0:	ffff8ae0 	.word	0xffff8ae0

0800c4d4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c4d4:	b5b0      	push	{r4, r5, r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4de:	250f      	movs	r5, #15
 800c4e0:	197b      	adds	r3, r7, r5
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c4e6:	197c      	adds	r4, r7, r5
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f7fe feeb 	bl	800b2c8 <VL53L0X_SetDeviceMode>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c4f6:	197b      	adds	r3, r7, r5
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b25b      	sxtb	r3, r3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d106      	bne.n	800c50e <VL53L0X_PerformSingleRangingMeasurement+0x3a>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c500:	197c      	adds	r4, r7, r5
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	0018      	movs	r0, r3
 800c506:	f7ff fc5a 	bl	800bdbe <VL53L0X_PerformSingleMeasurement>
 800c50a:	0003      	movs	r3, r0
 800c50c:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800c50e:	220f      	movs	r2, #15
 800c510:	18bb      	adds	r3, r7, r2
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b25b      	sxtb	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d108      	bne.n	800c52c <VL53L0X_PerformSingleRangingMeasurement+0x58>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c51a:	18bc      	adds	r4, r7, r2
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	0011      	movs	r1, r2
 800c522:	0018      	movs	r0, r3
 800c524:	f7ff fe86 	bl	800c234 <VL53L0X_GetRangingMeasurementData>
 800c528:	0003      	movs	r3, r0
 800c52a:	7023      	strb	r3, [r4, #0]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c52c:	220f      	movs	r2, #15
 800c52e:	18bb      	adds	r3, r7, r2
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	b25b      	sxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d107      	bne.n	800c548 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c538:	18bc      	adds	r4, r7, r2
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2100      	movs	r1, #0
 800c53e:	0018      	movs	r0, r3
 800c540:	f000 f9d4 	bl	800c8ec <VL53L0X_ClearInterruptMask>
 800c544:	0003      	movs	r3, r0
 800c546:	7023      	strb	r3, [r4, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800c548:	230f      	movs	r3, #15
 800c54a:	18fb      	adds	r3, r7, r3
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b25b      	sxtb	r3, r3
}
 800c550:	0018      	movs	r0, r3
 800c552:	46bd      	mov	sp, r7
 800c554:	b004      	add	sp, #16
 800c556:	bdb0      	pop	{r4, r5, r7, pc}

0800c558 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c558:	b590      	push	{r4, r7, lr}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	000c      	movs	r4, r1
 800c562:	0010      	movs	r0, r2
 800c564:	0019      	movs	r1, r3
 800c566:	1cfb      	adds	r3, r7, #3
 800c568:	1c22      	adds	r2, r4, #0
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	1cbb      	adds	r3, r7, #2
 800c56e:	1c02      	adds	r2, r0, #0
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	1c7b      	adds	r3, r7, #1
 800c574:	1c0a      	adds	r2, r1, #0
 800c576:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c578:	210f      	movs	r1, #15
 800c57a:	187b      	adds	r3, r7, r1
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c580:	1cfb      	adds	r3, r7, #3
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d003      	beq.n	800c590 <VL53L0X_SetGpioConfig+0x38>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c588:	187b      	adds	r3, r7, r1
 800c58a:	22f6      	movs	r2, #246	; 0xf6
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	e160      	b.n	800c852 <VL53L0X_SetGpioConfig+0x2fa>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c590:	1cbb      	adds	r3, r7, #2
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b14      	cmp	r3, #20
 800c596:	d11a      	bne.n	800c5ce <VL53L0X_SetGpioConfig+0x76>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c598:	2320      	movs	r3, #32
 800c59a:	18fb      	adds	r3, r7, r3
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d104      	bne.n	800c5ac <VL53L0X_SetGpioConfig+0x54>
			data = 0x10;
 800c5a2:	230e      	movs	r3, #14
 800c5a4:	18fb      	adds	r3, r7, r3
 800c5a6:	2210      	movs	r2, #16
 800c5a8:	701a      	strb	r2, [r3, #0]
 800c5aa:	e003      	b.n	800c5b4 <VL53L0X_SetGpioConfig+0x5c>
		else
			data = 1;
 800c5ac:	230e      	movs	r3, #14
 800c5ae:	18fb      	adds	r3, r7, r3
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	701a      	strb	r2, [r3, #0]

		Status = VL53L0X_WrByte(Dev,
 800c5b4:	230f      	movs	r3, #15
 800c5b6:	18fc      	adds	r4, r7, r3
 800c5b8:	230e      	movs	r3, #14
 800c5ba:	18fb      	adds	r3, r7, r3
 800c5bc:	781a      	ldrb	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2184      	movs	r1, #132	; 0x84
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f004 f8f8 	bl	80107b8 <VL53L0X_WrByte>
 800c5c8:	0003      	movs	r3, r0
 800c5ca:	7023      	strb	r3, [r4, #0]
 800c5cc:	e141      	b.n	800c852 <VL53L0X_SetGpioConfig+0x2fa>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c5ce:	1cbb      	adds	r3, r7, #2
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b15      	cmp	r3, #21
 800c5d4:	d000      	beq.n	800c5d8 <VL53L0X_SetGpioConfig+0x80>
 800c5d6:	e0c4      	b.n	800c762 <VL53L0X_SetGpioConfig+0x20a>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	21ff      	movs	r1, #255	; 0xff
 800c5de:	0018      	movs	r0, r3
 800c5e0:	f004 f8ea 	bl	80107b8 <VL53L0X_WrByte>
 800c5e4:	0003      	movs	r3, r0
 800c5e6:	0019      	movs	r1, r3
 800c5e8:	240f      	movs	r4, #15
 800c5ea:	193b      	adds	r3, r7, r4
 800c5ec:	193a      	adds	r2, r7, r4
 800c5ee:	7812      	ldrb	r2, [r2, #0]
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	f004 f8dc 	bl	80107b8 <VL53L0X_WrByte>
 800c600:	0003      	movs	r3, r0
 800c602:	0019      	movs	r1, r3
 800c604:	193b      	adds	r3, r7, r4
 800c606:	193a      	adds	r2, r7, r4
 800c608:	7812      	ldrb	r2, [r2, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	21ff      	movs	r1, #255	; 0xff
 800c614:	0018      	movs	r0, r3
 800c616:	f004 f8cf 	bl	80107b8 <VL53L0X_WrByte>
 800c61a:	0003      	movs	r3, r0
 800c61c:	0019      	movs	r1, r3
 800c61e:	193b      	adds	r3, r7, r4
 800c620:	193a      	adds	r2, r7, r4
 800c622:	7812      	ldrb	r2, [r2, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	2180      	movs	r1, #128	; 0x80
 800c62e:	0018      	movs	r0, r3
 800c630:	f004 f8c2 	bl	80107b8 <VL53L0X_WrByte>
 800c634:	0003      	movs	r3, r0
 800c636:	0019      	movs	r1, r3
 800c638:	193b      	adds	r3, r7, r4
 800c63a:	193a      	adds	r2, r7, r4
 800c63c:	7812      	ldrb	r2, [r2, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2202      	movs	r2, #2
 800c646:	2185      	movs	r1, #133	; 0x85
 800c648:	0018      	movs	r0, r3
 800c64a:	f004 f8b5 	bl	80107b8 <VL53L0X_WrByte>
 800c64e:	0003      	movs	r3, r0
 800c650:	0019      	movs	r1, r3
 800c652:	193b      	adds	r3, r7, r4
 800c654:	193a      	adds	r2, r7, r4
 800c656:	7812      	ldrb	r2, [r2, #0]
 800c658:	430a      	orrs	r2, r1
 800c65a:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2204      	movs	r2, #4
 800c660:	21ff      	movs	r1, #255	; 0xff
 800c662:	0018      	movs	r0, r3
 800c664:	f004 f8a8 	bl	80107b8 <VL53L0X_WrByte>
 800c668:	0003      	movs	r3, r0
 800c66a:	0019      	movs	r1, r3
 800c66c:	193b      	adds	r3, r7, r4
 800c66e:	193a      	adds	r2, r7, r4
 800c670:	7812      	ldrb	r2, [r2, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	21cd      	movs	r1, #205	; 0xcd
 800c67c:	0018      	movs	r0, r3
 800c67e:	f004 f89b 	bl	80107b8 <VL53L0X_WrByte>
 800c682:	0003      	movs	r3, r0
 800c684:	0019      	movs	r1, r3
 800c686:	193b      	adds	r3, r7, r4
 800c688:	193a      	adds	r2, r7, r4
 800c68a:	7812      	ldrb	r2, [r2, #0]
 800c68c:	430a      	orrs	r2, r1
 800c68e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2211      	movs	r2, #17
 800c694:	21cc      	movs	r1, #204	; 0xcc
 800c696:	0018      	movs	r0, r3
 800c698:	f004 f88e 	bl	80107b8 <VL53L0X_WrByte>
 800c69c:	0003      	movs	r3, r0
 800c69e:	0019      	movs	r1, r3
 800c6a0:	193b      	adds	r3, r7, r4
 800c6a2:	193a      	adds	r2, r7, r4
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2207      	movs	r2, #7
 800c6ae:	21ff      	movs	r1, #255	; 0xff
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	f004 f881 	bl	80107b8 <VL53L0X_WrByte>
 800c6b6:	0003      	movs	r3, r0
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	193b      	adds	r3, r7, r4
 800c6bc:	193a      	adds	r2, r7, r4
 800c6be:	7812      	ldrb	r2, [r2, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	21be      	movs	r1, #190	; 0xbe
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f004 f874 	bl	80107b8 <VL53L0X_WrByte>
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	0019      	movs	r1, r3
 800c6d4:	193b      	adds	r3, r7, r4
 800c6d6:	193a      	adds	r2, r7, r4
 800c6d8:	7812      	ldrb	r2, [r2, #0]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2206      	movs	r2, #6
 800c6e2:	21ff      	movs	r1, #255	; 0xff
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f004 f867 	bl	80107b8 <VL53L0X_WrByte>
 800c6ea:	0003      	movs	r3, r0
 800c6ec:	0019      	movs	r1, r3
 800c6ee:	193b      	adds	r3, r7, r4
 800c6f0:	193a      	adds	r2, r7, r4
 800c6f2:	7812      	ldrb	r2, [r2, #0]
 800c6f4:	430a      	orrs	r2, r1
 800c6f6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2209      	movs	r2, #9
 800c6fc:	21cc      	movs	r1, #204	; 0xcc
 800c6fe:	0018      	movs	r0, r3
 800c700:	f004 f85a 	bl	80107b8 <VL53L0X_WrByte>
 800c704:	0003      	movs	r3, r0
 800c706:	0019      	movs	r1, r3
 800c708:	193b      	adds	r3, r7, r4
 800c70a:	193a      	adds	r2, r7, r4
 800c70c:	7812      	ldrb	r2, [r2, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	21ff      	movs	r1, #255	; 0xff
 800c718:	0018      	movs	r0, r3
 800c71a:	f004 f84d 	bl	80107b8 <VL53L0X_WrByte>
 800c71e:	0003      	movs	r3, r0
 800c720:	0019      	movs	r1, r3
 800c722:	193b      	adds	r3, r7, r4
 800c724:	193a      	adds	r2, r7, r4
 800c726:	7812      	ldrb	r2, [r2, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	21ff      	movs	r1, #255	; 0xff
 800c732:	0018      	movs	r0, r3
 800c734:	f004 f840 	bl	80107b8 <VL53L0X_WrByte>
 800c738:	0003      	movs	r3, r0
 800c73a:	0019      	movs	r1, r3
 800c73c:	193b      	adds	r3, r7, r4
 800c73e:	193a      	adds	r2, r7, r4
 800c740:	7812      	ldrb	r2, [r2, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	2100      	movs	r1, #0
 800c74c:	0018      	movs	r0, r3
 800c74e:	f004 f833 	bl	80107b8 <VL53L0X_WrByte>
 800c752:	0003      	movs	r3, r0
 800c754:	0019      	movs	r1, r3
 800c756:	193b      	adds	r3, r7, r4
 800c758:	193a      	adds	r2, r7, r4
 800c75a:	7812      	ldrb	r2, [r2, #0]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	e077      	b.n	800c852 <VL53L0X_SetGpioConfig+0x2fa>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c762:	230f      	movs	r3, #15
 800c764:	18fb      	adds	r3, r7, r3
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	b25b      	sxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d126      	bne.n	800c7bc <VL53L0X_SetGpioConfig+0x264>
			switch (Functionality) {
 800c76e:	1c7b      	adds	r3, r7, #1
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	2b04      	cmp	r3, #4
 800c774:	d81d      	bhi.n	800c7b2 <VL53L0X_SetGpioConfig+0x25a>
 800c776:	009a      	lsls	r2, r3, #2
 800c778:	4b3a      	ldr	r3, [pc, #232]	; (800c864 <VL53L0X_SetGpioConfig+0x30c>)
 800c77a:	18d3      	adds	r3, r2, r3
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	469f      	mov	pc, r3
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c780:	230e      	movs	r3, #14
 800c782:	18fb      	adds	r3, r7, r3
 800c784:	2200      	movs	r2, #0
 800c786:	701a      	strb	r2, [r3, #0]
				break;
 800c788:	e019      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c78a:	230e      	movs	r3, #14
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	2201      	movs	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
				break;
 800c792:	e014      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c794:	230e      	movs	r3, #14
 800c796:	18fb      	adds	r3, r7, r3
 800c798:	2202      	movs	r2, #2
 800c79a:	701a      	strb	r2, [r3, #0]
				break;
 800c79c:	e00f      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c79e:	230e      	movs	r3, #14
 800c7a0:	18fb      	adds	r3, r7, r3
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	701a      	strb	r2, [r3, #0]
				break;
 800c7a6:	e00a      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c7a8:	230e      	movs	r3, #14
 800c7aa:	18fb      	adds	r3, r7, r3
 800c7ac:	2204      	movs	r2, #4
 800c7ae:	701a      	strb	r2, [r3, #0]
				break;
 800c7b0:	e005      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
			default:
				Status =
 800c7b2:	230f      	movs	r3, #15
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	22f5      	movs	r2, #245	; 0xf5
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	e000      	b.n	800c7be <VL53L0X_SetGpioConfig+0x266>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c7bc:	46c0      	nop			; (mov r8, r8)

		if (Status == VL53L0X_ERROR_NONE)
 800c7be:	220f      	movs	r2, #15
 800c7c0:	18bb      	adds	r3, r7, r2
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <VL53L0X_SetGpioConfig+0x288>
			Status = VL53L0X_WrByte(Dev,
 800c7ca:	18bc      	adds	r4, r7, r2
 800c7cc:	230e      	movs	r3, #14
 800c7ce:	18fb      	adds	r3, r7, r3
 800c7d0:	781a      	ldrb	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	210a      	movs	r1, #10
 800c7d6:	0018      	movs	r0, r3
 800c7d8:	f003 ffee 	bl	80107b8 <VL53L0X_WrByte>
 800c7dc:	0003      	movs	r3, r0
 800c7de:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c7e0:	230f      	movs	r3, #15
 800c7e2:	18fb      	adds	r3, r7, r3
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	b25b      	sxtb	r3, r3
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d119      	bne.n	800c820 <VL53L0X_SetGpioConfig+0x2c8>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c7ec:	2320      	movs	r3, #32
 800c7ee:	18fb      	adds	r3, r7, r3
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <VL53L0X_SetGpioConfig+0x2a8>
				data = 0;
 800c7f6:	230e      	movs	r3, #14
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e003      	b.n	800c808 <VL53L0X_SetGpioConfig+0x2b0>
			else
				data = (uint8_t)(1 << 4);
 800c800:	230e      	movs	r3, #14
 800c802:	18fb      	adds	r3, r7, r3
 800c804:	2210      	movs	r2, #16
 800c806:	701a      	strb	r2, [r3, #0]

			Status = VL53L0X_UpdateByte(Dev,
 800c808:	230f      	movs	r3, #15
 800c80a:	18fc      	adds	r4, r7, r3
 800c80c:	230e      	movs	r3, #14
 800c80e:	18fb      	adds	r3, r7, r3
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	22ef      	movs	r2, #239	; 0xef
 800c816:	2184      	movs	r1, #132	; 0x84
 800c818:	f004 f836 	bl	8010888 <VL53L0X_UpdateByte>
 800c81c:	0003      	movs	r3, r0
 800c81e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c820:	230f      	movs	r3, #15
 800c822:	18fb      	adds	r3, r7, r3
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	b25b      	sxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <VL53L0X_SetGpioConfig+0x2de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	1c7a      	adds	r2, r7, #1
 800c830:	21da      	movs	r1, #218	; 0xda
 800c832:	7812      	ldrb	r2, [r2, #0]
 800c834:	545a      	strb	r2, [r3, r1]
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c836:	220f      	movs	r2, #15
 800c838:	18bb      	adds	r3, r7, r2
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	b25b      	sxtb	r3, r3
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d107      	bne.n	800c852 <VL53L0X_SetGpioConfig+0x2fa>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c842:	18bc      	adds	r4, r7, r2
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2100      	movs	r1, #0
 800c848:	0018      	movs	r0, r3
 800c84a:	f000 f84f 	bl	800c8ec <VL53L0X_ClearInterruptMask>
 800c84e:	0003      	movs	r3, r0
 800c850:	7023      	strb	r3, [r4, #0]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c852:	230f      	movs	r3, #15
 800c854:	18fb      	adds	r3, r7, r3
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	b25b      	sxtb	r3, r3
}
 800c85a:	0018      	movs	r0, r3
 800c85c:	46bd      	mov	sp, r7
 800c85e:	b005      	add	sp, #20
 800c860:	bd90      	pop	{r4, r7, pc}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	08016ac4 	.word	0x08016ac4

0800c868 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86a:	b087      	sub	sp, #28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	607a      	str	r2, [r7, #4]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	230b      	movs	r3, #11
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	1c0a      	adds	r2, r1, #0
 800c87a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c87c:	2517      	movs	r5, #23
 800c87e:	197b      	adds	r3, r7, r5
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c884:	197c      	adds	r4, r7, r5
 800c886:	2614      	movs	r6, #20
 800c888:	19ba      	adds	r2, r7, r6
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	210e      	movs	r1, #14
 800c88e:	0018      	movs	r0, r3
 800c890:	f004 f876 	bl	8010980 <VL53L0X_RdWord>
 800c894:	0003      	movs	r3, r0
 800c896:	7023      	strb	r3, [r4, #0]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c898:	0031      	movs	r1, r6
 800c89a:	187b      	adds	r3, r7, r1
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	045b      	lsls	r3, r3, #17
 800c8a0:	001a      	movs	r2, r3
 800c8a2:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <VL53L0X_GetInterruptThresholds+0x80>)
 800c8a4:	401a      	ands	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	601a      	str	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c8aa:	197b      	adds	r3, r7, r5
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b25b      	sxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d111      	bne.n	800c8d8 <VL53L0X_GetInterruptThresholds+0x70>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c8b4:	197c      	adds	r4, r7, r5
 800c8b6:	000d      	movs	r5, r1
 800c8b8:	187a      	adds	r2, r7, r1
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	210c      	movs	r1, #12
 800c8be:	0018      	movs	r0, r3
 800c8c0:	f004 f85e 	bl	8010980 <VL53L0X_RdWord>
 800c8c4:	0003      	movs	r3, r0
 800c8c6:	7023      	strb	r3, [r4, #0]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c8c8:	197b      	adds	r3, r7, r5
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	045b      	lsls	r3, r3, #17
 800c8ce:	001a      	movs	r2, r3
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <VL53L0X_GetInterruptThresholds+0x80>)
 800c8d2:	401a      	ands	r2, r3
		*pThresholdHigh =
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c8d8:	2317      	movs	r3, #23
 800c8da:	18fb      	adds	r3, r7, r3
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b25b      	sxtb	r3, r3
}
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	b007      	add	sp, #28
 800c8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e8:	1ffe0000 	.word	0x1ffe0000

0800c8ec <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800c8ec:	b5b0      	push	{r4, r5, r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8f6:	230f      	movs	r3, #15
 800c8f8:	18fb      	adds	r3, r7, r3
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800c8fe:	230e      	movs	r3, #14
 800c900:	18fb      	adds	r3, r7, r3
 800c902:	2200      	movs	r2, #0
 800c904:	701a      	strb	r2, [r3, #0]
	do {
		Status = VL53L0X_WrByte(Dev,
 800c906:	250f      	movs	r5, #15
 800c908:	197c      	adds	r4, r7, r5
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2201      	movs	r2, #1
 800c90e:	210b      	movs	r1, #11
 800c910:	0018      	movs	r0, r3
 800c912:	f003 ff51 	bl	80107b8 <VL53L0X_WrByte>
 800c916:	0003      	movs	r3, r0
 800c918:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	210b      	movs	r1, #11
 800c920:	0018      	movs	r0, r3
 800c922:	f003 ff49 	bl	80107b8 <VL53L0X_WrByte>
 800c926:	0003      	movs	r3, r0
 800c928:	0019      	movs	r1, r3
 800c92a:	002c      	movs	r4, r5
 800c92c:	193b      	adds	r3, r7, r4
 800c92e:	193a      	adds	r2, r7, r4
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800c936:	250d      	movs	r5, #13
 800c938:	197a      	adds	r2, r7, r5
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2113      	movs	r1, #19
 800c93e:	0018      	movs	r0, r3
 800c940:	f003 ffe9 	bl	8010916 <VL53L0X_RdByte>
 800c944:	0003      	movs	r3, r0
 800c946:	0019      	movs	r1, r3
 800c948:	0020      	movs	r0, r4
 800c94a:	183b      	adds	r3, r7, r0
 800c94c:	183a      	adds	r2, r7, r0
 800c94e:	7812      	ldrb	r2, [r2, #0]
 800c950:	430a      	orrs	r2, r1
 800c952:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800c954:	210e      	movs	r1, #14
 800c956:	187b      	adds	r3, r7, r1
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	187b      	adds	r3, r7, r1
 800c95c:	3201      	adds	r2, #1
 800c95e:	701a      	strb	r2, [r3, #0]
	} while (((Byte & 0x07) != 0x00)
 800c960:	197b      	adds	r3, r7, r5
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	001a      	movs	r2, r3
 800c966:	2307      	movs	r3, #7
 800c968:	4013      	ands	r3, r2
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800c96a:	d008      	beq.n	800c97e <VL53L0X_ClearInterruptMask+0x92>
			&& (LoopCount < 3)
 800c96c:	187b      	adds	r3, r7, r1
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b02      	cmp	r3, #2
 800c972:	d804      	bhi.n	800c97e <VL53L0X_ClearInterruptMask+0x92>
			&& (Status == VL53L0X_ERROR_NONE));
 800c974:	183b      	adds	r3, r7, r0
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	b25b      	sxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0c3      	beq.n	800c906 <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800c97e:	230e      	movs	r3, #14
 800c980:	18fb      	adds	r3, r7, r3
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d903      	bls.n	800c990 <VL53L0X_ClearInterruptMask+0xa4>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800c988:	230f      	movs	r3, #15
 800c98a:	18fb      	adds	r3, r7, r3
 800c98c:	22f4      	movs	r2, #244	; 0xf4
 800c98e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c990:	230f      	movs	r3, #15
 800c992:	18fb      	adds	r3, r7, r3
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	b25b      	sxtb	r3, r3
}
 800c998:	0018      	movs	r0, r3
 800c99a:	46bd      	mov	sp, r7
 800c99c:	b004      	add	sp, #16
 800c99e:	bdb0      	pop	{r4, r5, r7, pc}

0800c9a0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9aa:	250f      	movs	r5, #15
 800c9ac:	197b      	adds	r3, r7, r5
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800c9b2:	197c      	adds	r4, r7, r5
 800c9b4:	260e      	movs	r6, #14
 800c9b6:	19ba      	adds	r2, r7, r6
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2113      	movs	r1, #19
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f003 ffaa 	bl	8010916 <VL53L0X_RdByte>
 800c9c2:	0003      	movs	r3, r0
 800c9c4:	7023      	strb	r3, [r4, #0]
	*pInterruptMaskStatus = Byte & 0x07;
 800c9c6:	0031      	movs	r1, r6
 800c9c8:	187b      	adds	r3, r7, r1
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	001a      	movs	r2, r3
 800c9ce:	2307      	movs	r3, #7
 800c9d0:	401a      	ands	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800c9d6:	187b      	adds	r3, r7, r1
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	001a      	movs	r2, r3
 800c9dc:	2318      	movs	r3, #24
 800c9de:	4013      	ands	r3, r2
 800c9e0:	d002      	beq.n	800c9e8 <VL53L0X_GetInterruptMaskStatus+0x48>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800c9e2:	197b      	adds	r3, r7, r5
 800c9e4:	22fa      	movs	r2, #250	; 0xfa
 800c9e6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c9e8:	230f      	movs	r3, #15
 800c9ea:	18fb      	adds	r3, r7, r3
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	b25b      	sxtb	r3, r3
}
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b005      	add	sp, #20
 800c9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9f8 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800c9f8:	b5b0      	push	{r4, r5, r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca04:	2517      	movs	r5, #23
 800ca06:	197b      	adds	r3, r7, r5
 800ca08:	2200      	movs	r2, #0
 800ca0a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800ca0c:	197c      	adds	r4, r7, r5
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	68b9      	ldr	r1, [r7, #8]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	0018      	movs	r0, r3
 800ca16:	f000 fa58 	bl	800ceca <VL53L0X_perform_ref_spad_management>
 800ca1a:	0003      	movs	r3, r0
 800ca1c:	7023      	strb	r3, [r4, #0]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800ca1e:	197b      	adds	r3, r7, r5
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	b25b      	sxtb	r3, r3
}
 800ca24:	0018      	movs	r0, r3
 800ca26:	46bd      	mov	sp, r7
 800ca28:	b006      	add	sp, #24
 800ca2a:	bdb0      	pop	{r4, r5, r7, pc}

0800ca2c <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800ca2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca36:	210f      	movs	r1, #15
 800ca38:	187b      	adds	r3, r7, r1
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	701a      	strb	r2, [r3, #0]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800ca3e:	230c      	movs	r3, #12
 800ca40:	18fb      	adds	r3, r7, r3
 800ca42:	4a23      	ldr	r2, [pc, #140]	; (800cad0 <VL53L0X_get_offset_calibration_data_micro_meter+0xa4>)
 800ca44:	801a      	strh	r2, [r3, #0]
	int16_t cOffsetRange = 4096;
 800ca46:	220a      	movs	r2, #10
 800ca48:	18bb      	adds	r3, r7, r2
 800ca4a:	2280      	movs	r2, #128	; 0x80
 800ca4c:	0152      	lsls	r2, r2, #5
 800ca4e:	801a      	strh	r2, [r3, #0]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ca50:	000e      	movs	r6, r1
 800ca52:	187c      	adds	r4, r7, r1
 800ca54:	2508      	movs	r5, #8
 800ca56:	197a      	adds	r2, r7, r5
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2128      	movs	r1, #40	; 0x28
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f003 ff8f 	bl	8010980 <VL53L0X_RdWord>
 800ca62:	0003      	movs	r3, r0
 800ca64:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ca66:	19bb      	adds	r3, r7, r6
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	b25b      	sxtb	r3, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d127      	bne.n	800cac0 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800ca70:	197b      	adds	r3, r7, r5
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	051b      	lsls	r3, r3, #20
 800ca76:	0d1b      	lsrs	r3, r3, #20
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	197b      	adds	r3, r7, r5
 800ca7c:	801a      	strh	r2, [r3, #0]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800ca7e:	0029      	movs	r1, r5
 800ca80:	197b      	adds	r3, r7, r5
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	001a      	movs	r2, r3
 800ca86:	230c      	movs	r3, #12
 800ca88:	18fb      	adds	r3, r7, r3
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	5e1b      	ldrsh	r3, [r3, r0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	dd0d      	ble.n	800caae <VL53L0X_get_offset_calibration_data_micro_meter+0x82>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800ca92:	187b      	adds	r3, r7, r1
 800ca94:	881a      	ldrh	r2, [r3, #0]
 800ca96:	230a      	movs	r3, #10
 800ca98:	18fb      	adds	r3, r7, r3
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	b21b      	sxth	r3, r3
 800caa2:	001a      	movs	r2, r3
					* 250;
 800caa4:	23fa      	movs	r3, #250	; 0xfa
 800caa6:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	e008      	b.n	800cac0 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800caae:	2308      	movs	r3, #8
 800cab0:	18fb      	adds	r3, r7, r3
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	b21b      	sxth	r3, r3
 800cab6:	001a      	movs	r2, r3
 800cab8:	23fa      	movs	r3, #250	; 0xfa
 800caba:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800cac0:	230f      	movs	r3, #15
 800cac2:	18fb      	adds	r3, r7, r3
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	b25b      	sxtb	r3, r3
}
 800cac8:	0018      	movs	r0, r3
 800caca:	46bd      	mov	sp, r7
 800cacc:	b005      	add	sp, #20
 800cace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cad0:	000007ff 	.word	0x000007ff

0800cad4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b08a      	sub	sp, #40	; 0x28
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800cae2:	2308      	movs	r3, #8
 800cae4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800cae6:	231e      	movs	r3, #30
 800cae8:	18fb      	adds	r3, r7, r3
 800caea:	2200      	movs	r2, #0
 800caec:	701a      	strb	r2, [r3, #0]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	2201      	movs	r2, #1
 800caf2:	4252      	negs	r2, r2
 800caf4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800caf6:	69b9      	ldr	r1, [r7, #24]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f3 fb21 	bl	8000140 <__udivsi3>
 800cafe:	0003      	movs	r3, r0
 800cb00:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69b9      	ldr	r1, [r7, #24]
 800cb06:	0018      	movs	r0, r3
 800cb08:	f7f3 fba0 	bl	800024c <__aeabi_uidivmod>
 800cb0c:	000b      	movs	r3, r1
 800cb0e:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
 800cb14:	e038      	b.n	800cb88 <get_next_good_spad+0xb4>
				coarseIndex++) {
		fineIndex = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	18d2      	adds	r2, r2, r3
 800cb20:	211f      	movs	r1, #31
 800cb22:	187b      	adds	r3, r7, r1
 800cb24:	7812      	ldrb	r2, [r2, #0]
 800cb26:	701a      	strb	r2, [r3, #0]

		if (coarseIndex == startIndex) {
 800cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d124      	bne.n	800cb7a <get_next_good_spad+0xa6>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cb30:	187b      	adds	r3, r7, r1
 800cb32:	781a      	ldrb	r2, [r3, #0]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	411a      	asrs	r2, r3
 800cb38:	187b      	adds	r3, r7, r1
 800cb3a:	701a      	strb	r2, [r3, #0]
			fineIndex = fineOffset;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cb40:	e01b      	b.n	800cb7a <get_next_good_spad+0xa6>
			if ((dataByte & 0x1) == 1) {
 800cb42:	231f      	movs	r3, #31
 800cb44:	18fb      	adds	r3, r7, r3
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d00c      	beq.n	800cb68 <get_next_good_spad+0x94>
				success = 1;
 800cb4e:	231e      	movs	r3, #30
 800cb50:	18fb      	adds	r3, r7, r3
 800cb52:	2201      	movs	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	435a      	muls	r2, r3
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
 800cb5e:	18d3      	adds	r3, r2, r3
 800cb60:	001a      	movs	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	601a      	str	r2, [r3, #0]
				break;
 800cb66:	e00c      	b.n	800cb82 <get_next_good_spad+0xae>
			}
			dataByte >>= 1;
 800cb68:	221f      	movs	r2, #31
 800cb6a:	18bb      	adds	r3, r7, r2
 800cb6c:	18ba      	adds	r2, r7, r2
 800cb6e:	7812      	ldrb	r2, [r2, #0]
 800cb70:	0852      	lsrs	r2, r2, #1
 800cb72:	701a      	strb	r2, [r3, #0]
			fineIndex++;
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	3301      	adds	r3, #1
 800cb78:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cb7a:	6a3a      	ldr	r2, [r7, #32]
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d3df      	bcc.n	800cb42 <get_next_good_spad+0x6e>
				coarseIndex++) {
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	3301      	adds	r3, #1
 800cb86:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d204      	bcs.n	800cb9a <get_next_good_spad+0xc6>
 800cb90:	231e      	movs	r3, #30
 800cb92:	18fb      	adds	r3, r7, r3
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0bd      	beq.n	800cb16 <get_next_good_spad+0x42>
		}
	}
}
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	b00a      	add	sp, #40	; 0x28
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800cbac:	210f      	movs	r1, #15
 800cbae:	187b      	adds	r3, r7, r1
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	701a      	strb	r2, [r3, #0]
	quadrant = spadIndex >> 6;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800cbba:	4b08      	ldr	r3, [pc, #32]	; (800cbdc <is_aperture+0x38>)
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	0092      	lsls	r2, r2, #2
 800cbc0:	58d3      	ldr	r3, [r2, r3]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d102      	bne.n	800cbcc <is_aperture+0x28>
		isAperture = 0;
 800cbc6:	187b      	adds	r3, r7, r1
 800cbc8:	2200      	movs	r2, #0
 800cbca:	701a      	strb	r2, [r3, #0]

	return isAperture;
 800cbcc:	230f      	movs	r3, #15
 800cbce:	18fb      	adds	r3, r7, r3
 800cbd0:	781b      	ldrb	r3, [r3, #0]
}
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	b004      	add	sp, #16
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	200002b8 	.word	0x200002b8

0800cbe0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800cbe0:	b590      	push	{r4, r7, lr}
 800cbe2:	b089      	sub	sp, #36	; 0x24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cbec:	241f      	movs	r4, #31
 800cbee:	193b      	adds	r3, r7, r4
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	701a      	strb	r2, [r3, #0]
	uint32_t cSpadsPerByte = 8;
 800cbf4:	2308      	movs	r3, #8
 800cbf6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800cbf8:	69b9      	ldr	r1, [r7, #24]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f3 faa0 	bl	8000140 <__udivsi3>
 800cc00:	0003      	movs	r3, r0
 800cc02:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	69b9      	ldr	r1, [r7, #24]
 800cc08:	0018      	movs	r0, r3
 800cc0a:	f7f3 fb1f 	bl	800024c <__aeabi_uidivmod>
 800cc0e:	000b      	movs	r3, r1
 800cc10:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d303      	bcc.n	800cc22 <enable_spad_bit+0x42>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cc1a:	193b      	adds	r3, r7, r4
 800cc1c:	22ce      	movs	r2, #206	; 0xce
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	e010      	b.n	800cc44 <enable_spad_bit+0x64>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	18d3      	adds	r3, r2, r3
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	b25a      	sxtb	r2, r3
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	4099      	lsls	r1, r3
 800cc32:	000b      	movs	r3, r1
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	4313      	orrs	r3, r2
 800cc38:	b259      	sxtb	r1, r3
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	18d3      	adds	r3, r2, r3
 800cc40:	b2ca      	uxtb	r2, r1
 800cc42:	701a      	strb	r2, [r3, #0]

	return status;
 800cc44:	231f      	movs	r3, #31
 800cc46:	18fb      	adds	r3, r7, r3
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b25b      	sxtb	r3, r3
}
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	b009      	add	sp, #36	; 0x24
 800cc52:	bd90      	pop	{r4, r7, pc}

0800cc54 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc54:	b5b0      	push	{r4, r5, r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cc5e:	250f      	movs	r5, #15
 800cc60:	197c      	adds	r4, r7, r5
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	2306      	movs	r3, #6
 800cc68:	21b0      	movs	r1, #176	; 0xb0
 800cc6a:	f003 fd33 	bl	80106d4 <VL53L0X_WriteMulti>
 800cc6e:	0003      	movs	r3, r0
 800cc70:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cc72:	197b      	adds	r3, r7, r5
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	b25b      	sxtb	r3, r3
}
 800cc78:	0018      	movs	r0, r3
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b004      	add	sp, #16
 800cc7e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc80 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cc8a:	250f      	movs	r5, #15
 800cc8c:	197c      	adds	r4, r7, r5
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	2306      	movs	r3, #6
 800cc94:	21b0      	movs	r1, #176	; 0xb0
 800cc96:	f003 fd59 	bl	801074c <VL53L0X_ReadMulti>
 800cc9a:	0003      	movs	r3, r0
 800cc9c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cc9e:	197b      	adds	r3, r7, r5
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	b25b      	sxtb	r3, r3
}
 800cca4:	0018      	movs	r0, r3
 800cca6:	46bd      	mov	sp, r7
 800cca8:	b004      	add	sp, #16
 800ccaa:	bdb0      	pop	{r4, r5, r7, pc}

0800ccac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800ccac:	b590      	push	{r4, r7, lr}
 800ccae:	b08d      	sub	sp, #52	; 0x34
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	603b      	str	r3, [r7, #0]
 800ccb8:	230b      	movs	r3, #11
 800ccba:	18fb      	adds	r3, r7, r3
 800ccbc:	1c0a      	adds	r2, r1, #0
 800ccbe:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ccc0:	232f      	movs	r3, #47	; 0x2f
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	701a      	strb	r2, [r3, #0]
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ccc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccca:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800cccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccce:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccd4:	e02f      	b.n	800cd36 <enable_ref_spads+0x8a>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ccd6:	231c      	movs	r3, #28
 800ccd8:	18fb      	adds	r3, r7, r3
 800ccda:	6a3a      	ldr	r2, [r7, #32]
 800ccdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff fef8 	bl	800cad4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	d104      	bne.n	800ccf4 <enable_ref_spads+0x48>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ccea:	232f      	movs	r3, #47	; 0x2f
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	22ce      	movs	r2, #206	; 0xce
 800ccf0:	701a      	strb	r2, [r3, #0]
			break;
 800ccf2:	e024      	b.n	800cd3e <enable_ref_spads+0x92>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	001a      	movs	r2, r3
 800ccf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccfa:	18d3      	adds	r3, r2, r3
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f7ff ff51 	bl	800cba4 <is_aperture>
 800cd02:	0003      	movs	r3, r0
 800cd04:	001a      	movs	r2, r3
 800cd06:	230b      	movs	r3, #11
 800cd08:	18fb      	adds	r3, r7, r3
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d004      	beq.n	800cd1a <enable_ref_spads+0x6e>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cd10:	232f      	movs	r3, #47	; 0x2f
 800cd12:	18fb      	adds	r3, r7, r3
 800cd14:	22ce      	movs	r2, #206	; 0xce
 800cd16:	701a      	strb	r2, [r3, #0]
			break;
 800cd18:	e011      	b.n	800cd3e <enable_ref_spads+0x92>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	0018      	movs	r0, r3
 800cd26:	f7ff ff5b 	bl	800cbe0 <enable_spad_bit>
		currentSpad++;
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	3301      	adds	r3, #1
 800cd34:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d3cb      	bcc.n	800ccd6 <enable_ref_spads+0x2a>
	}
	*lastSpad = currentSpad;
 800cd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd40:	6a3a      	ldr	r2, [r7, #32]
 800cd42:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800cd44:	222f      	movs	r2, #47	; 0x2f
 800cd46:	18bb      	adds	r3, r7, r2
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	b25b      	sxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d108      	bne.n	800cd62 <enable_ref_spads+0xb6>
		status = set_ref_spad_map(Dev, spadArray);
 800cd50:	18bc      	adds	r4, r7, r2
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	0011      	movs	r1, r2
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f7ff ff7b 	bl	800cc54 <set_ref_spad_map>
 800cd5e:	0003      	movs	r3, r0
 800cd60:	7023      	strb	r3, [r4, #0]


	if (status == VL53L0X_ERROR_NONE) {
 800cd62:	222f      	movs	r2, #47	; 0x2f
 800cd64:	18bb      	adds	r3, r7, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	b25b      	sxtb	r3, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d123      	bne.n	800cdb6 <enable_ref_spads+0x10a>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800cd6e:	18bc      	adds	r4, r7, r2
 800cd70:	2314      	movs	r3, #20
 800cd72:	18fa      	adds	r2, r7, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	0011      	movs	r1, r2
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f7ff ff81 	bl	800cc80 <get_ref_spad_map>
 800cd7e:	0003      	movs	r3, r0
 800cd80:	7023      	strb	r3, [r4, #0]

		i = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800cd86:	e012      	b.n	800cdae <enable_ref_spads+0x102>
			if (spadArray[i] != checkSpadArray[i]) {
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	18d3      	adds	r3, r2, r3
 800cd8e:	781a      	ldrb	r2, [r3, #0]
 800cd90:	2314      	movs	r3, #20
 800cd92:	18f9      	adds	r1, r7, r3
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	18cb      	adds	r3, r1, r3
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d004      	beq.n	800cda8 <enable_ref_spads+0xfc>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cd9e:	232f      	movs	r3, #47	; 0x2f
 800cda0:	18fb      	adds	r3, r7, r3
 800cda2:	22ce      	movs	r2, #206	; 0xce
 800cda4:	701a      	strb	r2, [r3, #0]
				break;
 800cda6:	e006      	b.n	800cdb6 <enable_ref_spads+0x10a>
			}
			i++;
 800cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdaa:	3301      	adds	r3, #1
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800cdae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d3e8      	bcc.n	800cd88 <enable_ref_spads+0xdc>
		}
	}
	return status;
 800cdb6:	232f      	movs	r3, #47	; 0x2f
 800cdb8:	18fb      	adds	r3, r7, r3
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	b25b      	sxtb	r3, r3
}
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	b00d      	add	sp, #52	; 0x34
 800cdc4:	bd90      	pop	{r4, r7, pc}

0800cdc6 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800cdc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc8:	b08b      	sub	sp, #44	; 0x2c
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cdd0:	2027      	movs	r0, #39	; 0x27
 800cdd2:	183b      	adds	r3, r7, r0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800cdd8:	2126      	movs	r1, #38	; 0x26
 800cdda:	187b      	adds	r3, r7, r1
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cde0:	187b      	adds	r3, r7, r1
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	2298      	movs	r2, #152	; 0x98
 800cde6:	0052      	lsls	r2, r2, #1
 800cde8:	5c8a      	ldrb	r2, [r1, r2]
 800cdea:	701a      	strb	r2, [r3, #0]

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800cdec:	183b      	adds	r3, r7, r0
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	b25b      	sxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d108      	bne.n	800ce08 <perform_ref_signal_measurement+0x42>
		status = VL53L0X_WrByte(Dev,
 800cdf6:	183c      	adds	r4, r7, r0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	22c0      	movs	r2, #192	; 0xc0
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	0018      	movs	r0, r3
 800ce00:	f003 fcda 	bl	80107b8 <VL53L0X_WrByte>
 800ce04:	0003      	movs	r3, r0
 800ce06:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800ce08:	2227      	movs	r2, #39	; 0x27
 800ce0a:	18bb      	adds	r3, r7, r2
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b25b      	sxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d109      	bne.n	800ce28 <perform_ref_signal_measurement+0x62>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800ce14:	18bc      	adds	r4, r7, r2
 800ce16:	2308      	movs	r3, #8
 800ce18:	18fa      	adds	r2, r7, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	0011      	movs	r1, r2
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f7ff fb58 	bl	800c4d4 <VL53L0X_PerformSingleRangingMeasurement>
 800ce24:	0003      	movs	r3, r0
 800ce26:	7023      	strb	r3, [r4, #0]
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800ce28:	2227      	movs	r2, #39	; 0x27
 800ce2a:	18bb      	adds	r3, r7, r2
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	b25b      	sxtb	r3, r3
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d108      	bne.n	800ce46 <perform_ref_signal_measurement+0x80>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ce34:	18bc      	adds	r4, r7, r2
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	21ff      	movs	r1, #255	; 0xff
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f003 fcbb 	bl	80107b8 <VL53L0X_WrByte>
 800ce42:	0003      	movs	r3, r0
 800ce44:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ce46:	2227      	movs	r2, #39	; 0x27
 800ce48:	18bb      	adds	r3, r7, r2
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	b25b      	sxtb	r3, r3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d108      	bne.n	800ce64 <perform_ref_signal_measurement+0x9e>
		status = VL53L0X_RdWord(Dev,
 800ce52:	18bc      	adds	r4, r7, r2
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	21b6      	movs	r1, #182	; 0xb6
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	f003 fd90 	bl	8010980 <VL53L0X_RdWord>
 800ce60:	0003      	movs	r3, r0
 800ce62:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800ce64:	2227      	movs	r2, #39	; 0x27
 800ce66:	18bb      	adds	r3, r7, r2
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	b25b      	sxtb	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d108      	bne.n	800ce82 <perform_ref_signal_measurement+0xbc>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ce70:	18bc      	adds	r4, r7, r2
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	21ff      	movs	r1, #255	; 0xff
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f003 fc9d 	bl	80107b8 <VL53L0X_WrByte>
 800ce7e:	0003      	movs	r3, r0
 800ce80:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE) {
 800ce82:	2527      	movs	r5, #39	; 0x27
 800ce84:	197b      	adds	r3, r7, r5
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	b25b      	sxtb	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d115      	bne.n	800ceba <perform_ref_signal_measurement+0xf4>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ce8e:	197c      	adds	r4, r7, r5
 800ce90:	2626      	movs	r6, #38	; 0x26
 800ce92:	19bb      	adds	r3, r7, r6
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2101      	movs	r1, #1
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f003 fc8c 	bl	80107b8 <VL53L0X_WrByte>
 800cea0:	0003      	movs	r3, r0
 800cea2:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800cea4:	197b      	adds	r3, r7, r5
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	b25b      	sxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d105      	bne.n	800ceba <perform_ref_signal_measurement+0xf4>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	19b9      	adds	r1, r7, r6
 800ceb2:	2398      	movs	r3, #152	; 0x98
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	7809      	ldrb	r1, [r1, #0]
 800ceb8:	54d1      	strb	r1, [r2, r3]
	}

	return status;
 800ceba:	2327      	movs	r3, #39	; 0x27
 800cebc:	18fb      	adds	r3, r7, r3
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	b25b      	sxtb	r3, r3
}
 800cec2:	0018      	movs	r0, r3
 800cec4:	46bd      	mov	sp, r7
 800cec6:	b00b      	add	sp, #44	; 0x2c
 800cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ceca <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ceca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cecc:	b09d      	sub	sp, #116	; 0x74
 800cece:	af06      	add	r7, sp, #24
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	60b9      	str	r1, [r7, #8]
 800ced4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ced6:	2357      	movs	r3, #87	; 0x57
 800ced8:	18fb      	adds	r3, r7, r3
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800cede:	233a      	movs	r3, #58	; 0x3a
 800cee0:	18fb      	adds	r3, r7, r3
 800cee2:	22b4      	movs	r2, #180	; 0xb4
 800cee4:	701a      	strb	r2, [r3, #0]
	uint32_t minimumSpadCount = 3;
 800cee6:	2303      	movs	r3, #3
 800cee8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ceea:	232c      	movs	r3, #44	; 0x2c
 800ceec:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800cefa:	212e      	movs	r1, #46	; 0x2e
 800cefc:	187b      	adds	r3, r7, r1
 800cefe:	22a0      	movs	r2, #160	; 0xa0
 800cf00:	0112      	lsls	r2, r2, #4
 800cf02:	801a      	strh	r2, [r3, #0]
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800cf0c:	2306      	movs	r3, #6
 800cf0e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800cf18:	2343      	movs	r3, #67	; 0x43
 800cf1a:	18fb      	adds	r3, r7, r3
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800cf20:	2311      	movs	r3, #17
 800cf22:	18fb      	adds	r3, r7, r3
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800cf28:	2310      	movs	r3, #16
 800cf2a:	18fb      	adds	r3, r7, r3
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount_int = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800cf34:	233b      	movs	r3, #59	; 0x3b
 800cf36:	18fb      	adds	r3, r7, r3
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800cf3c:	187b      	adds	r3, r7, r1
 800cf3e:	68f9      	ldr	r1, [r7, #12]
 800cf40:	229e      	movs	r2, #158	; 0x9e
 800cf42:	0052      	lsls	r2, r2, #1
 800cf44:	5a8a      	ldrh	r2, [r1, r2]
 800cf46:	801a      	strh	r2, [r3, #0]
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf4c:	e00a      	b.n	800cf64 <VL53L0X_perform_ref_spad_management+0x9a>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	2392      	movs	r3, #146	; 0x92
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf56:	188a      	adds	r2, r1, r2
 800cf58:	18d3      	adds	r3, r2, r3
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800cf5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf60:	3301      	adds	r3, #1
 800cf62:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d3f0      	bcc.n	800cf4e <VL53L0X_perform_ref_spad_management+0x84>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf6c:	2557      	movs	r5, #87	; 0x57
 800cf6e:	197c      	adds	r4, r7, r5
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2201      	movs	r2, #1
 800cf74:	21ff      	movs	r1, #255	; 0xff
 800cf76:	0018      	movs	r0, r3
 800cf78:	f003 fc1e 	bl	80107b8 <VL53L0X_WrByte>
 800cf7c:	0003      	movs	r3, r0
 800cf7e:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800cf80:	197b      	adds	r3, r7, r5
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	b25b      	sxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d108      	bne.n	800cf9c <VL53L0X_perform_ref_spad_management+0xd2>
		Status = VL53L0X_WrByte(Dev,
 800cf8a:	197c      	adds	r4, r7, r5
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	214f      	movs	r1, #79	; 0x4f
 800cf92:	0018      	movs	r0, r3
 800cf94:	f003 fc10 	bl	80107b8 <VL53L0X_WrByte>
 800cf98:	0003      	movs	r3, r0
 800cf9a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800cf9c:	2257      	movs	r2, #87	; 0x57
 800cf9e:	18bb      	adds	r3, r7, r2
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	b25b      	sxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d108      	bne.n	800cfba <VL53L0X_perform_ref_spad_management+0xf0>
		Status = VL53L0X_WrByte(Dev,
 800cfa8:	18bc      	adds	r4, r7, r2
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	222c      	movs	r2, #44	; 0x2c
 800cfae:	214e      	movs	r1, #78	; 0x4e
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f003 fc01 	bl	80107b8 <VL53L0X_WrByte>
 800cfb6:	0003      	movs	r3, r0
 800cfb8:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800cfba:	2257      	movs	r2, #87	; 0x57
 800cfbc:	18bb      	adds	r3, r7, r2
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	b25b      	sxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d108      	bne.n	800cfd8 <VL53L0X_perform_ref_spad_management+0x10e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cfc6:	18bc      	adds	r4, r7, r2
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	21ff      	movs	r1, #255	; 0xff
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f003 fbf2 	bl	80107b8 <VL53L0X_WrByte>
 800cfd4:	0003      	movs	r3, r0
 800cfd6:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800cfd8:	2257      	movs	r2, #87	; 0x57
 800cfda:	18bb      	adds	r3, r7, r2
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	b25b      	sxtb	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <VL53L0X_perform_ref_spad_management+0x130>
		Status = VL53L0X_WrByte(Dev,
 800cfe4:	18bc      	adds	r4, r7, r2
 800cfe6:	233a      	movs	r3, #58	; 0x3a
 800cfe8:	18fb      	adds	r3, r7, r3
 800cfea:	781a      	ldrb	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	21b6      	movs	r1, #182	; 0xb6
 800cff0:	0018      	movs	r0, r3
 800cff2:	f003 fbe1 	bl	80107b8 <VL53L0X_WrByte>
 800cff6:	0003      	movs	r3, r0
 800cff8:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800cffa:	2257      	movs	r2, #87	; 0x57
 800cffc:	18bb      	adds	r3, r7, r2
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	b25b      	sxtb	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <VL53L0X_perform_ref_spad_management+0x14e>
		Status = VL53L0X_WrByte(Dev,
 800d006:	18bc      	adds	r4, r7, r2
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	2180      	movs	r1, #128	; 0x80
 800d00e:	0018      	movs	r0, r3
 800d010:	f003 fbd2 	bl	80107b8 <VL53L0X_WrByte>
 800d014:	0003      	movs	r3, r0
 800d016:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800d018:	2257      	movs	r2, #87	; 0x57
 800d01a:	18bb      	adds	r3, r7, r2
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <VL53L0X_perform_ref_spad_management+0x170>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800d024:	18bc      	adds	r4, r7, r2
 800d026:	2310      	movs	r3, #16
 800d028:	18fa      	adds	r2, r7, r3
 800d02a:	2311      	movs	r3, #17
 800d02c:	18f9      	adds	r1, r7, r3
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	2300      	movs	r3, #0
 800d032:	f000 fcab 	bl	800d98c <VL53L0X_perform_ref_calibration>
 800d036:	0003      	movs	r3, r0
 800d038:	7023      	strb	r3, [r4, #0]
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800d03a:	2257      	movs	r2, #87	; 0x57
 800d03c:	18bb      	adds	r3, r7, r2
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	b25b      	sxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d124      	bne.n	800d090 <VL53L0X_perform_ref_spad_management+0x1c6>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800d046:	2300      	movs	r3, #0
 800d048:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800d04a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800d052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d054:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	332b      	adds	r3, #43	; 0x2b
 800d05a:	33ff      	adds	r3, #255	; 0xff
 800d05c:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3325      	adds	r3, #37	; 0x25
 800d062:	33ff      	adds	r3, #255	; 0xff
 800d064:	001e      	movs	r6, r3
		Status = enable_ref_spads(Dev,
 800d066:	233a      	movs	r3, #58	; 0x3a
 800d068:	18fb      	adds	r3, r7, r3
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	18bc      	adds	r4, r7, r2
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	2218      	movs	r2, #24
 800d072:	18ba      	adds	r2, r7, r2
 800d074:	9204      	str	r2, [sp, #16]
 800d076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d078:	9203      	str	r2, [sp, #12]
 800d07a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d07c:	9202      	str	r2, [sp, #8]
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	0033      	movs	r3, r6
 800d086:	002a      	movs	r2, r5
 800d088:	f7ff fe10 	bl	800ccac <enable_ref_spads>
 800d08c:	0003      	movs	r3, r0
 800d08e:	7023      	strb	r3, [r4, #0]
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d090:	2557      	movs	r5, #87	; 0x57
 800d092:	197b      	adds	r3, r7, r5
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	b25b      	sxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d000      	beq.n	800d09e <VL53L0X_perform_ref_spad_management+0x1d4>
 800d09c:	e087      	b.n	800d1ae <VL53L0X_perform_ref_spad_management+0x2e4>
		currentSpadIndex = lastSpadIndex;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800d0a2:	197c      	adds	r4, r7, r5
 800d0a4:	2612      	movs	r6, #18
 800d0a6:	19ba      	adds	r2, r7, r6
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	0011      	movs	r1, r2
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f7ff fe8a 	bl	800cdc6 <perform_ref_signal_measurement>
 800d0b2:	0003      	movs	r3, r0
 800d0b4:	7023      	strb	r3, [r4, #0]
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d0b6:	197b      	adds	r3, r7, r5
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	b25b      	sxtb	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d000      	beq.n	800d0c2 <VL53L0X_perform_ref_spad_management+0x1f8>
 800d0c0:	e071      	b.n	800d1a6 <VL53L0X_perform_ref_spad_management+0x2dc>
			(peakSignalRateRef > targetRefRate)) {
 800d0c2:	19bb      	adds	r3, r7, r6
 800d0c4:	881b      	ldrh	r3, [r3, #0]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d0c6:	222e      	movs	r2, #46	; 0x2e
 800d0c8:	18ba      	adds	r2, r7, r2
 800d0ca:	8812      	ldrh	r2, [r2, #0]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d26a      	bcs.n	800d1a6 <VL53L0X_perform_ref_spad_management+0x2dc>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0d4:	e00a      	b.n	800d0ec <VL53L0X_perform_ref_spad_management+0x222>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d0d6:	68f9      	ldr	r1, [r7, #12]
 800d0d8:	2392      	movs	r3, #146	; 0x92
 800d0da:	005b      	lsls	r3, r3, #1
 800d0dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0de:	188a      	adds	r2, r1, r2
 800d0e0:	18d3      	adds	r3, r2, r3
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d3f0      	bcc.n	800d0d6 <VL53L0X_perform_ref_spad_management+0x20c>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d0f4:	e002      	b.n	800d0fc <VL53L0X_perform_ref_spad_management+0x232>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d0fc:	233a      	movs	r3, #58	; 0x3a
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	781a      	ldrb	r2, [r3, #0]
 800d102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d104:	18d3      	adds	r3, r2, r3
 800d106:	0018      	movs	r0, r3
 800d108:	f7ff fd4c 	bl	800cba4 <is_aperture>
 800d10c:	1e03      	subs	r3, r0, #0
 800d10e:	d103      	bne.n	800d118 <VL53L0X_perform_ref_spad_management+0x24e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d110:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	429a      	cmp	r2, r3
 800d116:	d3ee      	bcc.n	800d0f6 <VL53L0X_perform_ref_spad_management+0x22c>
			}

			needAptSpads = 1;
 800d118:	2301      	movs	r3, #1
 800d11a:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d11e:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	332b      	adds	r3, #43	; 0x2b
 800d124:	33ff      	adds	r3, #255	; 0xff
 800d126:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	3325      	adds	r3, #37	; 0x25
 800d12c:	33ff      	adds	r3, #255	; 0xff
 800d12e:	001e      	movs	r6, r3
			Status = enable_ref_spads(Dev,
 800d130:	233a      	movs	r3, #58	; 0x3a
 800d132:	18fb      	adds	r3, r7, r3
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2257      	movs	r2, #87	; 0x57
 800d138:	18bc      	adds	r4, r7, r2
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	2218      	movs	r2, #24
 800d13e:	18ba      	adds	r2, r7, r2
 800d140:	9204      	str	r2, [sp, #16]
 800d142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d144:	9203      	str	r2, [sp, #12]
 800d146:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d148:	9202      	str	r2, [sp, #8]
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	0033      	movs	r3, r6
 800d152:	002a      	movs	r2, r5
 800d154:	f7ff fdaa 	bl	800ccac <enable_ref_spads>
 800d158:	0003      	movs	r3, r0
 800d15a:	7023      	strb	r3, [r4, #0]
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d15c:	2557      	movs	r5, #87	; 0x57
 800d15e:	197b      	adds	r3, r7, r5
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	b25b      	sxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d121      	bne.n	800d1ac <VL53L0X_perform_ref_spad_management+0x2e2>
				currentSpadIndex = lastSpadIndex;
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d16c:	197c      	adds	r4, r7, r5
 800d16e:	2612      	movs	r6, #18
 800d170:	19ba      	adds	r2, r7, r6
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	0011      	movs	r1, r2
 800d176:	0018      	movs	r0, r3
 800d178:	f7ff fe25 	bl	800cdc6 <perform_ref_signal_measurement>
 800d17c:	0003      	movs	r3, r0
 800d17e:	7023      	strb	r3, [r4, #0]
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d180:	197b      	adds	r3, r7, r5
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	b25b      	sxtb	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	d110      	bne.n	800d1ac <VL53L0X_perform_ref_spad_management+0x2e2>
					(peakSignalRateRef > targetRefRate)) {
 800d18a:	19bb      	adds	r3, r7, r6
 800d18c:	881b      	ldrh	r3, [r3, #0]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d18e:	222e      	movs	r2, #46	; 0x2e
 800d190:	18ba      	adds	r2, r7, r2
 800d192:	8812      	ldrh	r2, [r2, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d209      	bcs.n	800d1ac <VL53L0X_perform_ref_spad_management+0x2e2>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d198:	233b      	movs	r3, #59	; 0x3b
 800d19a:	18fb      	adds	r3, r7, r3
 800d19c:	2201      	movs	r2, #1
 800d19e:	701a      	strb	r2, [r3, #0]
					refSpadCount_int = minimumSpadCount;
 800d1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d1a4:	e002      	b.n	800d1ac <VL53L0X_perform_ref_spad_management+0x2e2>
				}
			}
		} else {
			needAptSpads = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1aa:	e000      	b.n	800d1ae <VL53L0X_perform_ref_spad_management+0x2e4>
			if (Status == VL53L0X_ERROR_NONE) {
 800d1ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d1ae:	2357      	movs	r3, #87	; 0x57
 800d1b0:	18fb      	adds	r3, r7, r3
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	b25b      	sxtb	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d000      	beq.n	800d1bc <VL53L0X_perform_ref_spad_management+0x2f2>
 800d1ba:	e0cd      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
		(peakSignalRateRef < targetRefRate)) {
 800d1bc:	2412      	movs	r4, #18
 800d1be:	193b      	adds	r3, r7, r4
 800d1c0:	881b      	ldrh	r3, [r3, #0]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d1c2:	252e      	movs	r5, #46	; 0x2e
 800d1c4:	197a      	adds	r2, r7, r5
 800d1c6:	8812      	ldrh	r2, [r2, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d800      	bhi.n	800d1ce <VL53L0X_perform_ref_spad_management+0x304>
 800d1cc:	e0c4      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d1ce:	233b      	movs	r3, #59	; 0x3b
 800d1d0:	18fb      	adds	r3, r7, r3
 800d1d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1d4:	701a      	strb	r2, [r3, #0]
		refSpadCount_int	= minimumSpadCount;
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3325      	adds	r3, #37	; 0x25
 800d1de:	33ff      	adds	r3, #255	; 0xff
 800d1e0:	0019      	movs	r1, r3
 800d1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e4:	231c      	movs	r3, #28
 800d1e6:	18fb      	adds	r3, r7, r3
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	f005 fe27 	bl	8012e3c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d1ee:	193b      	adds	r3, r7, r4
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	001a      	movs	r2, r3
 800d1f4:	197b      	adds	r3, r7, r5
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	17da      	asrs	r2, r3, #31
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	4053      	eors	r3, r2
 800d200:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d202:	2343      	movs	r3, #67	; 0x43
 800d204:	18fb      	adds	r3, r7, r3
 800d206:	2200      	movs	r2, #0
 800d208:	701a      	strb	r2, [r3, #0]

		while (!complete) {
 800d20a:	e09b      	b.n	800d344 <VL53L0X_perform_ref_spad_management+0x47a>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	332b      	adds	r3, #43	; 0x2b
 800d210:	33ff      	adds	r3, #255	; 0xff
 800d212:	0018      	movs	r0, r3
			get_next_good_spad(
 800d214:	2314      	movs	r3, #20
 800d216:	18fb      	adds	r3, r7, r3
 800d218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d21a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d21c:	f7ff fc5a 	bl	800cad4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	3301      	adds	r3, #1
 800d224:	d104      	bne.n	800d230 <VL53L0X_perform_ref_spad_management+0x366>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d226:	2357      	movs	r3, #87	; 0x57
 800d228:	18fb      	adds	r3, r7, r3
 800d22a:	22ce      	movs	r2, #206	; 0xce
 800d22c:	701a      	strb	r2, [r3, #0]
				break;
 800d22e:	e093      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d230:	233a      	movs	r3, #58	; 0x3a
 800d232:	18fb      	adds	r3, r7, r3
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	189b      	adds	r3, r3, r2
 800d23a:	0018      	movs	r0, r3
 800d23c:	f7ff fcb2 	bl	800cba4 <is_aperture>
 800d240:	0003      	movs	r3, r0
 800d242:	001a      	movs	r2, r3
 800d244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d246:	4293      	cmp	r3, r2
 800d248:	d004      	beq.n	800d254 <VL53L0X_perform_ref_spad_management+0x38a>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d24a:	2343      	movs	r3, #67	; 0x43
 800d24c:	18fb      	adds	r3, r7, r3
 800d24e:	2201      	movs	r2, #1
 800d250:	701a      	strb	r2, [r3, #0]
				break;
 800d252:	e081      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			(refSpadCount_int)++;
 800d254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d256:	3301      	adds	r3, #1
 800d258:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3325      	adds	r3, #37	; 0x25
 800d262:	33ff      	adds	r3, #255	; 0xff
			Status = enable_spad_bit(
 800d264:	2557      	movs	r5, #87	; 0x57
 800d266:	197c      	adds	r4, r7, r5
 800d268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d26c:	0018      	movs	r0, r3
 800d26e:	f7ff fcb7 	bl	800cbe0 <enable_spad_bit>
 800d272:	0003      	movs	r3, r0
 800d274:	7023      	strb	r3, [r4, #0]
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d276:	0029      	movs	r1, r5
 800d278:	187b      	adds	r3, r7, r1
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	b25b      	sxtb	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10e      	bne.n	800d2a0 <VL53L0X_perform_ref_spad_management+0x3d6>
				currentSpadIndex++;
 800d282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d284:	3301      	adds	r3, #1
 800d286:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3325      	adds	r3, #37	; 0x25
 800d28c:	33ff      	adds	r3, #255	; 0xff
 800d28e:	001a      	movs	r2, r3
				Status = set_ref_spad_map(Dev,
 800d290:	187c      	adds	r4, r7, r1
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	0011      	movs	r1, r2
 800d296:	0018      	movs	r0, r3
 800d298:	f7ff fcdc 	bl	800cc54 <set_ref_spad_map>
 800d29c:	0003      	movs	r3, r0
 800d29e:	7023      	strb	r3, [r4, #0]
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d2a0:	2557      	movs	r5, #87	; 0x57
 800d2a2:	197b      	adds	r3, r7, r5
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	b25b      	sxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d152      	bne.n	800d352 <VL53L0X_perform_ref_spad_management+0x488>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d2ac:	197c      	adds	r4, r7, r5
 800d2ae:	2612      	movs	r6, #18
 800d2b0:	19ba      	adds	r2, r7, r6
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	0011      	movs	r1, r2
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	f7ff fd85 	bl	800cdc6 <perform_ref_signal_measurement>
 800d2bc:	0003      	movs	r3, r0
 800d2be:	7023      	strb	r3, [r4, #0]
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d2c0:	0029      	movs	r1, r5
 800d2c2:	187b      	adds	r3, r7, r1
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	b25b      	sxtb	r3, r3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d144      	bne.n	800d356 <VL53L0X_perform_ref_spad_management+0x48c>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d2cc:	0030      	movs	r0, r6
 800d2ce:	183b      	adds	r3, r7, r0
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	001a      	movs	r2, r3
 800d2d4:	242e      	movs	r4, #46	; 0x2e
 800d2d6:	193b      	adds	r3, r7, r4
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	17da      	asrs	r2, r3, #31
 800d2de:	189b      	adds	r3, r3, r2
 800d2e0:	4053      	eors	r3, r2
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d2e4:	183b      	adds	r3, r7, r0
 800d2e6:	881b      	ldrh	r3, [r3, #0]
 800d2e8:	193a      	adds	r2, r7, r4
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d21d      	bcs.n	800d32c <VL53L0X_perform_ref_spad_management+0x462>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d914      	bls.n	800d322 <VL53L0X_perform_ref_spad_management+0x458>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d2f8:	187c      	adds	r4, r7, r1
 800d2fa:	251c      	movs	r5, #28
 800d2fc:	197a      	adds	r2, r7, r5
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	0011      	movs	r1, r2
 800d302:	0018      	movs	r0, r3
 800d304:	f7ff fca6 	bl	800cc54 <set_ref_spad_map>
 800d308:	0003      	movs	r3, r0
 800d30a:	7023      	strb	r3, [r4, #0]
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3325      	adds	r3, #37	; 0x25
 800d310:	33ff      	adds	r3, #255	; 0xff
					memcpy(
 800d312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d314:	1979      	adds	r1, r7, r5
 800d316:	0018      	movs	r0, r3
 800d318:	f005 fd90 	bl	8012e3c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31e:	3b01      	subs	r3, #1
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d322:	2343      	movs	r3, #67	; 0x43
 800d324:	18fb      	adds	r3, r7, r3
 800d326:	2201      	movs	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e00b      	b.n	800d344 <VL53L0X_perform_ref_spad_management+0x47a>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3325      	adds	r3, #37	; 0x25
 800d334:	33ff      	adds	r3, #255	; 0xff
 800d336:	0019      	movs	r1, r3
				memcpy(lastSpadArray,
 800d338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d33a:	231c      	movs	r3, #28
 800d33c:	18fb      	adds	r3, r7, r3
 800d33e:	0018      	movs	r0, r3
 800d340:	f005 fd7c 	bl	8012e3c <memcpy>
		while (!complete) {
 800d344:	2343      	movs	r3, #67	; 0x43
 800d346:	18fb      	adds	r3, r7, r3
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d100      	bne.n	800d350 <VL53L0X_perform_ref_spad_management+0x486>
 800d34e:	e75d      	b.n	800d20c <VL53L0X_perform_ref_spad_management+0x342>
 800d350:	e002      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800d352:	46c0      	nop			; (mov r8, r8)
 800d354:	e000      	b.n	800d358 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800d356:	46c0      	nop			; (mov r8, r8)
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d358:	2357      	movs	r3, #87	; 0x57
 800d35a:	18fb      	adds	r3, r7, r3
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	b25b      	sxtb	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	d119      	bne.n	800d398 <VL53L0X_perform_ref_spad_management+0x4ce>
		*refSpadCount = refSpadCount_int;
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d368:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	223b      	movs	r2, #59	; 0x3b
 800d36e:	18ba      	adds	r2, r7, r2
 800d370:	7812      	ldrb	r2, [r2, #0]
 800d372:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	2316      	movs	r3, #22
 800d378:	33ff      	adds	r3, #255	; 0xff
 800d37a:	2101      	movs	r1, #1
 800d37c:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	b2d9      	uxtb	r1, r3
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	2314      	movs	r3, #20
 800d388:	33ff      	adds	r3, #255	; 0xff
 800d38a:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7819      	ldrb	r1, [r3, #0]
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	238a      	movs	r3, #138	; 0x8a
 800d394:	005b      	lsls	r3, r3, #1
 800d396:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d398:	2357      	movs	r3, #87	; 0x57
 800d39a:	18fb      	adds	r3, r7, r3
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	b25b      	sxtb	r3, r3
}
 800d3a0:	0018      	movs	r0, r3
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	b017      	add	sp, #92	; 0x5c
 800d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3a8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3aa:	b093      	sub	sp, #76	; 0x4c
 800d3ac:	af06      	add	r7, sp, #24
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	1dfb      	adds	r3, r7, #7
 800d3b4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d3b6:	212f      	movs	r1, #47	; 0x2f
 800d3b8:	187b      	adds	r3, r7, r1
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
	uint32_t currentSpadIndex = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d3c2:	2323      	movs	r3, #35	; 0x23
 800d3c4:	18fb      	adds	r3, r7, r3
 800d3c6:	22b4      	movs	r2, #180	; 0xb4
 800d3c8:	701a      	strb	r2, [r3, #0]
	uint32_t spadArraySize = 6;
 800d3ca:	2306      	movs	r3, #6
 800d3cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d3ce:	232c      	movs	r3, #44	; 0x2c
 800d3d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d3d2:	000d      	movs	r5, r1
 800d3d4:	187c      	adds	r4, r7, r1
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	21ff      	movs	r1, #255	; 0xff
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f003 f9eb 	bl	80107b8 <VL53L0X_WrByte>
 800d3e2:	0003      	movs	r3, r0
 800d3e4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d3e6:	197b      	adds	r3, r7, r5
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d108      	bne.n	800d402 <VL53L0X_set_reference_spads+0x5a>
		Status = VL53L0X_WrByte(Dev,
 800d3f0:	197c      	adds	r4, r7, r5
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	214f      	movs	r1, #79	; 0x4f
 800d3f8:	0018      	movs	r0, r3
 800d3fa:	f003 f9dd 	bl	80107b8 <VL53L0X_WrByte>
 800d3fe:	0003      	movs	r3, r0
 800d400:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d402:	222f      	movs	r2, #47	; 0x2f
 800d404:	18bb      	adds	r3, r7, r2
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	b25b      	sxtb	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d108      	bne.n	800d420 <VL53L0X_set_reference_spads+0x78>
		Status = VL53L0X_WrByte(Dev,
 800d40e:	18bc      	adds	r4, r7, r2
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	222c      	movs	r2, #44	; 0x2c
 800d414:	214e      	movs	r1, #78	; 0x4e
 800d416:	0018      	movs	r0, r3
 800d418:	f003 f9ce 	bl	80107b8 <VL53L0X_WrByte>
 800d41c:	0003      	movs	r3, r0
 800d41e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d420:	222f      	movs	r2, #47	; 0x2f
 800d422:	18bb      	adds	r3, r7, r2
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	b25b      	sxtb	r3, r3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d108      	bne.n	800d43e <VL53L0X_set_reference_spads+0x96>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d42c:	18bc      	adds	r4, r7, r2
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	21ff      	movs	r1, #255	; 0xff
 800d434:	0018      	movs	r0, r3
 800d436:	f003 f9bf 	bl	80107b8 <VL53L0X_WrByte>
 800d43a:	0003      	movs	r3, r0
 800d43c:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d43e:	222f      	movs	r2, #47	; 0x2f
 800d440:	18bb      	adds	r3, r7, r2
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	b25b      	sxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10a      	bne.n	800d460 <VL53L0X_set_reference_spads+0xb8>
		Status = VL53L0X_WrByte(Dev,
 800d44a:	18bc      	adds	r4, r7, r2
 800d44c:	2323      	movs	r3, #35	; 0x23
 800d44e:	18fb      	adds	r3, r7, r3
 800d450:	781a      	ldrb	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	21b6      	movs	r1, #182	; 0xb6
 800d456:	0018      	movs	r0, r3
 800d458:	f003 f9ae 	bl	80107b8 <VL53L0X_WrByte>
 800d45c:	0003      	movs	r3, r0
 800d45e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d460:	2300      	movs	r3, #0
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
 800d464:	e00a      	b.n	800d47c <VL53L0X_set_reference_spads+0xd4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d466:	68f9      	ldr	r1, [r7, #12]
 800d468:	2392      	movs	r3, #146	; 0x92
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d46e:	188a      	adds	r2, r1, r2
 800d470:	18d3      	adds	r3, r2, r3
 800d472:	2200      	movs	r2, #0
 800d474:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	3301      	adds	r3, #1
 800d47a:	627b      	str	r3, [r7, #36]	; 0x24
 800d47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	429a      	cmp	r2, r3
 800d482:	d3f0      	bcc.n	800d466 <VL53L0X_set_reference_spads+0xbe>

	if (isApertureSpads) {
 800d484:	1dfb      	adds	r3, r7, #7
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d011      	beq.n	800d4b0 <VL53L0X_set_reference_spads+0x108>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d48c:	e002      	b.n	800d494 <VL53L0X_set_reference_spads+0xec>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	3301      	adds	r3, #1
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d494:	2323      	movs	r3, #35	; 0x23
 800d496:	18fb      	adds	r3, r7, r3
 800d498:	781a      	ldrb	r2, [r3, #0]
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	18d3      	adds	r3, r2, r3
 800d49e:	0018      	movs	r0, r3
 800d4a0:	f7ff fb80 	bl	800cba4 <is_aperture>
 800d4a4:	1e03      	subs	r3, r0, #0
 800d4a6:	d103      	bne.n	800d4b0 <VL53L0X_set_reference_spads+0x108>
 800d4a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d3ee      	bcc.n	800d48e <VL53L0X_set_reference_spads+0xe6>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	332b      	adds	r3, #43	; 0x2b
 800d4b4:	33ff      	adds	r3, #255	; 0xff
 800d4b6:	001d      	movs	r5, r3
				Dev->Data.SpadData.RefSpadEnables,
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3325      	adds	r3, #37	; 0x25
 800d4bc:	33ff      	adds	r3, #255	; 0xff
 800d4be:	001e      	movs	r6, r3
	Status = enable_ref_spads(Dev,
 800d4c0:	2323      	movs	r3, #35	; 0x23
 800d4c2:	18fb      	adds	r3, r7, r3
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	222f      	movs	r2, #47	; 0x2f
 800d4c8:	18bc      	adds	r4, r7, r2
 800d4ca:	1dfa      	adds	r2, r7, #7
 800d4cc:	7811      	ldrb	r1, [r2, #0]
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	2214      	movs	r2, #20
 800d4d2:	18ba      	adds	r2, r7, r2
 800d4d4:	9204      	str	r2, [sp, #16]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	9203      	str	r2, [sp, #12]
 800d4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4dc:	9202      	str	r2, [sp, #8]
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	0033      	movs	r3, r6
 800d4e6:	002a      	movs	r2, r5
 800d4e8:	f7ff fbe0 	bl	800ccac <enable_ref_spads>
 800d4ec:	0003      	movs	r3, r0
 800d4ee:	7023      	strb	r3, [r4, #0]
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d4f0:	222f      	movs	r2, #47	; 0x2f
 800d4f2:	18bb      	adds	r3, r7, r2
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	b25b      	sxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d110      	bne.n	800d51e <VL53L0X_set_reference_spads+0x176>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	2316      	movs	r3, #22
 800d500:	33ff      	adds	r3, #255	; 0xff
 800d502:	2101      	movs	r1, #1
 800d504:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	b2d9      	uxtb	r1, r3
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	2314      	movs	r3, #20
 800d50e:	33ff      	adds	r3, #255	; 0xff
 800d510:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	1df9      	adds	r1, r7, #7
 800d516:	238a      	movs	r3, #138	; 0x8a
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	7809      	ldrb	r1, [r1, #0]
 800d51c:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d51e:	232f      	movs	r3, #47	; 0x2f
 800d520:	18fb      	adds	r3, r7, r3
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b25b      	sxtb	r3, r3
}
 800d526:	0018      	movs	r0, r3
 800d528:	46bd      	mov	sp, r7
 800d52a:	b00d      	add	sp, #52	; 0x34
 800d52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d52e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d52e:	b590      	push	{r4, r7, lr}
 800d530:	b085      	sub	sp, #20
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	000a      	movs	r2, r1
 800d538:	1cfb      	adds	r3, r7, #3
 800d53a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d53c:	210f      	movs	r1, #15
 800d53e:	187b      	adds	r3, r7, r1
 800d540:	2200      	movs	r2, #0
 800d542:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d544:	187b      	adds	r3, r7, r1
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	b25b      	sxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10c      	bne.n	800d568 <VL53L0X_perform_single_ref_calibration+0x3a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d54e:	1cfb      	adds	r3, r7, #3
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2201      	movs	r2, #1
 800d554:	4313      	orrs	r3, r2
 800d556:	b2da      	uxtb	r2, r3
 800d558:	187c      	adds	r4, r7, r1
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2100      	movs	r1, #0
 800d55e:	0018      	movs	r0, r3
 800d560:	f003 f92a 	bl	80107b8 <VL53L0X_WrByte>
 800d564:	0003      	movs	r3, r0
 800d566:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d568:	220f      	movs	r2, #15
 800d56a:	18bb      	adds	r3, r7, r2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b25b      	sxtb	r3, r3
 800d570:	2b00      	cmp	r3, #0
 800d572:	d106      	bne.n	800d582 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d574:	18bc      	adds	r4, r7, r2
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	0018      	movs	r0, r3
 800d57a:	f000 fa5c 	bl	800da36 <VL53L0X_measurement_poll_for_completion>
 800d57e:	0003      	movs	r3, r0
 800d580:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d582:	220f      	movs	r2, #15
 800d584:	18bb      	adds	r3, r7, r2
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	b25b      	sxtb	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d107      	bne.n	800d59e <VL53L0X_perform_single_ref_calibration+0x70>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d58e:	18bc      	adds	r4, r7, r2
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2100      	movs	r1, #0
 800d594:	0018      	movs	r0, r3
 800d596:	f7ff f9a9 	bl	800c8ec <VL53L0X_ClearInterruptMask>
 800d59a:	0003      	movs	r3, r0
 800d59c:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d59e:	220f      	movs	r2, #15
 800d5a0:	18bb      	adds	r3, r7, r2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	b25b      	sxtb	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d108      	bne.n	800d5bc <VL53L0X_perform_single_ref_calibration+0x8e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d5aa:	18bc      	adds	r4, r7, r2
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	f003 f900 	bl	80107b8 <VL53L0X_WrByte>
 800d5b8:	0003      	movs	r3, r0
 800d5ba:	7023      	strb	r3, [r4, #0]

	return Status;
 800d5bc:	230f      	movs	r3, #15
 800d5be:	18fb      	adds	r3, r7, r3
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	b25b      	sxtb	r3, r3
}
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	b005      	add	sp, #20
 800d5ca:	bd90      	pop	{r4, r7, pc}

0800d5cc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d5cc:	b590      	push	{r4, r7, lr}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	000c      	movs	r4, r1
 800d5d6:	0010      	movs	r0, r2
 800d5d8:	0019      	movs	r1, r3
 800d5da:	1cfb      	adds	r3, r7, #3
 800d5dc:	1c22      	adds	r2, r4, #0
 800d5de:	701a      	strb	r2, [r3, #0]
 800d5e0:	1cbb      	adds	r3, r7, #2
 800d5e2:	1c02      	adds	r2, r0, #0
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	1c7b      	adds	r3, r7, #1
 800d5e8:	1c0a      	adds	r2, r1, #0
 800d5ea:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5ec:	240f      	movs	r4, #15
 800d5ee:	193b      	adds	r3, r7, r4
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalint = 0;
 800d5f4:	230e      	movs	r3, #14
 800d5f6:	18fb      	adds	r3, r7, r3
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	21ff      	movs	r1, #255	; 0xff
 800d602:	0018      	movs	r0, r3
 800d604:	f003 f8d8 	bl	80107b8 <VL53L0X_WrByte>
 800d608:	0003      	movs	r3, r0
 800d60a:	0019      	movs	r1, r3
 800d60c:	193b      	adds	r3, r7, r4
 800d60e:	193a      	adds	r2, r7, r4
 800d610:	7812      	ldrb	r2, [r2, #0]
 800d612:	430a      	orrs	r2, r1
 800d614:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	2100      	movs	r1, #0
 800d61c:	0018      	movs	r0, r3
 800d61e:	f003 f8cb 	bl	80107b8 <VL53L0X_WrByte>
 800d622:	0003      	movs	r3, r0
 800d624:	0019      	movs	r1, r3
 800d626:	193b      	adds	r3, r7, r4
 800d628:	193a      	adds	r2, r7, r4
 800d62a:	7812      	ldrb	r2, [r2, #0]
 800d62c:	430a      	orrs	r2, r1
 800d62e:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	21ff      	movs	r1, #255	; 0xff
 800d636:	0018      	movs	r0, r3
 800d638:	f003 f8be 	bl	80107b8 <VL53L0X_WrByte>
 800d63c:	0003      	movs	r3, r0
 800d63e:	0019      	movs	r1, r3
 800d640:	193b      	adds	r3, r7, r4
 800d642:	193a      	adds	r2, r7, r4
 800d644:	7812      	ldrb	r2, [r2, #0]
 800d646:	430a      	orrs	r2, r1
 800d648:	701a      	strb	r2, [r3, #0]

	if (read_not_write) {
 800d64a:	1cfb      	adds	r3, r7, #3
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d026      	beq.n	800d6a0 <VL53L0X_ref_calibration_io+0xd4>
		if (vhv_enable)
 800d652:	2328      	movs	r3, #40	; 0x28
 800d654:	18fb      	adds	r3, r7, r3
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00c      	beq.n	800d676 <VL53L0X_ref_calibration_io+0xaa>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d65c:	6a3a      	ldr	r2, [r7, #32]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	21cb      	movs	r1, #203	; 0xcb
 800d662:	0018      	movs	r0, r3
 800d664:	f003 f957 	bl	8010916 <VL53L0X_RdByte>
 800d668:	0003      	movs	r3, r0
 800d66a:	0019      	movs	r1, r3
 800d66c:	193b      	adds	r3, r7, r4
 800d66e:	193a      	adds	r2, r7, r4
 800d670:	7812      	ldrb	r2, [r2, #0]
 800d672:	430a      	orrs	r2, r1
 800d674:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800d676:	232c      	movs	r3, #44	; 0x2c
 800d678:	18fb      	adds	r3, r7, r3
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d037      	beq.n	800d6f0 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d680:	230e      	movs	r3, #14
 800d682:	18fa      	adds	r2, r7, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	21ee      	movs	r1, #238	; 0xee
 800d688:	0018      	movs	r0, r3
 800d68a:	f003 f944 	bl	8010916 <VL53L0X_RdByte>
 800d68e:	0003      	movs	r3, r0
 800d690:	0019      	movs	r1, r3
 800d692:	220f      	movs	r2, #15
 800d694:	18bb      	adds	r3, r7, r2
 800d696:	18ba      	adds	r2, r7, r2
 800d698:	7812      	ldrb	r2, [r2, #0]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	701a      	strb	r2, [r3, #0]
 800d69e:	e027      	b.n	800d6f0 <VL53L0X_ref_calibration_io+0x124>
	} else {
		if (vhv_enable)
 800d6a0:	2328      	movs	r3, #40	; 0x28
 800d6a2:	18fb      	adds	r3, r7, r3
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00e      	beq.n	800d6c8 <VL53L0X_ref_calibration_io+0xfc>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d6aa:	1cbb      	adds	r3, r7, #2
 800d6ac:	781a      	ldrb	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	21cb      	movs	r1, #203	; 0xcb
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	f003 f880 	bl	80107b8 <VL53L0X_WrByte>
 800d6b8:	0003      	movs	r3, r0
 800d6ba:	0019      	movs	r1, r3
 800d6bc:	220f      	movs	r2, #15
 800d6be:	18bb      	adds	r3, r7, r2
 800d6c0:	18ba      	adds	r2, r7, r2
 800d6c2:	7812      	ldrb	r2, [r2, #0]
 800d6c4:	430a      	orrs	r2, r1
 800d6c6:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800d6c8:	232c      	movs	r3, #44	; 0x2c
 800d6ca:	18fb      	adds	r3, r7, r3
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00e      	beq.n	800d6f0 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d6d2:	1c7b      	adds	r3, r7, #1
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	2280      	movs	r2, #128	; 0x80
 800d6da:	21ee      	movs	r1, #238	; 0xee
 800d6dc:	f003 f8d4 	bl	8010888 <VL53L0X_UpdateByte>
 800d6e0:	0003      	movs	r3, r0
 800d6e2:	0019      	movs	r1, r3
 800d6e4:	220f      	movs	r2, #15
 800d6e6:	18bb      	adds	r3, r7, r2
 800d6e8:	18ba      	adds	r2, r7, r2
 800d6ea:	7812      	ldrb	r2, [r2, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	701a      	strb	r2, [r3, #0]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	21ff      	movs	r1, #255	; 0xff
 800d6f6:	0018      	movs	r0, r3
 800d6f8:	f003 f85e 	bl	80107b8 <VL53L0X_WrByte>
 800d6fc:	0003      	movs	r3, r0
 800d6fe:	0019      	movs	r1, r3
 800d700:	240f      	movs	r4, #15
 800d702:	193b      	adds	r3, r7, r4
 800d704:	193a      	adds	r2, r7, r4
 800d706:	7812      	ldrb	r2, [r2, #0]
 800d708:	430a      	orrs	r2, r1
 800d70a:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	2100      	movs	r1, #0
 800d712:	0018      	movs	r0, r3
 800d714:	f003 f850 	bl	80107b8 <VL53L0X_WrByte>
 800d718:	0003      	movs	r3, r0
 800d71a:	0019      	movs	r1, r3
 800d71c:	193b      	adds	r3, r7, r4
 800d71e:	193a      	adds	r2, r7, r4
 800d720:	7812      	ldrb	r2, [r2, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	21ff      	movs	r1, #255	; 0xff
 800d72c:	0018      	movs	r0, r3
 800d72e:	f003 f843 	bl	80107b8 <VL53L0X_WrByte>
 800d732:	0003      	movs	r3, r0
 800d734:	0019      	movs	r1, r3
 800d736:	0020      	movs	r0, r4
 800d738:	183b      	adds	r3, r7, r0
 800d73a:	183a      	adds	r2, r7, r0
 800d73c:	7812      	ldrb	r2, [r2, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	701a      	strb	r2, [r3, #0]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d742:	230e      	movs	r3, #14
 800d744:	18fb      	adds	r3, r7, r3
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	2210      	movs	r2, #16
 800d74a:	4393      	bics	r3, r2
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	701a      	strb	r2, [r3, #0]

	return Status;
 800d752:	183b      	adds	r3, r7, r0
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	b25b      	sxtb	r3, r3
}
 800d758:	0018      	movs	r0, r3
 800d75a:	46bd      	mov	sp, r7
 800d75c:	b005      	add	sp, #20
 800d75e:	bd90      	pop	{r4, r7, pc}

0800d760 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d762:	b08b      	sub	sp, #44	; 0x2c
 800d764:	af04      	add	r7, sp, #16
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	0019      	movs	r1, r3
 800d76c:	1dfb      	adds	r3, r7, #7
 800d76e:	701a      	strb	r2, [r3, #0]
 800d770:	1dbb      	adds	r3, r7, #6
 800d772:	1c0a      	adds	r2, r1, #0
 800d774:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d776:	2317      	movs	r3, #23
 800d778:	18fb      	adds	r3, r7, r3
 800d77a:	2200      	movs	r2, #0
 800d77c:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800d77e:	2116      	movs	r1, #22
 800d780:	187b      	adds	r3, r7, r1
 800d782:	2200      	movs	r2, #0
 800d784:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800d786:	2315      	movs	r3, #21
 800d788:	18fb      	adds	r3, r7, r3
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800d78e:	2314      	movs	r3, #20
 800d790:	18fb      	adds	r3, r7, r3
 800d792:	2200      	movs	r2, #0
 800d794:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalInt = 0;
 800d796:	2313      	movs	r3, #19
 800d798:	18fb      	adds	r3, r7, r3
 800d79a:	2200      	movs	r2, #0
 800d79c:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d79e:	1dbb      	adds	r3, r7, #6
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <VL53L0X_perform_vhv_calibration+0x52>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d7a6:	187b      	adds	r3, r7, r1
 800d7a8:	68f9      	ldr	r1, [r7, #12]
 800d7aa:	2298      	movs	r2, #152	; 0x98
 800d7ac:	0052      	lsls	r2, r2, #1
 800d7ae:	5c8a      	ldrb	r2, [r1, r2]
 800d7b0:	701a      	strb	r2, [r3, #0]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d7b2:	2517      	movs	r5, #23
 800d7b4:	197c      	adds	r4, r7, r5
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	0018      	movs	r0, r3
 800d7be:	f002 fffb 	bl	80107b8 <VL53L0X_WrByte>
 800d7c2:	0003      	movs	r3, r0
 800d7c4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d7c6:	197b      	adds	r3, r7, r5
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	b25b      	sxtb	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d7d0:	197c      	adds	r4, r7, r5
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2140      	movs	r1, #64	; 0x40
 800d7d6:	0018      	movs	r0, r3
 800d7d8:	f7ff fea9 	bl	800d52e <VL53L0X_perform_single_ref_calibration>
 800d7dc:	0003      	movs	r3, r0
 800d7de:	7023      	strb	r3, [r4, #0]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d7e0:	2217      	movs	r2, #23
 800d7e2:	18bb      	adds	r3, r7, r2
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	b25b      	sxtb	r3, r3
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d11b      	bne.n	800d824 <VL53L0X_perform_vhv_calibration+0xc4>
 800d7ec:	1dfb      	adds	r3, r7, #7
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d117      	bne.n	800d824 <VL53L0X_perform_vhv_calibration+0xc4>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d7f4:	18bc      	adds	r4, r7, r2
 800d7f6:	2314      	movs	r3, #20
 800d7f8:	18fb      	adds	r3, r7, r3
 800d7fa:	7819      	ldrb	r1, [r3, #0]
 800d7fc:	2315      	movs	r3, #21
 800d7fe:	18fb      	adds	r3, r7, r3
 800d800:	781a      	ldrb	r2, [r3, #0]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	2300      	movs	r3, #0
 800d806:	9303      	str	r3, [sp, #12]
 800d808:	2301      	movs	r3, #1
 800d80a:	9302      	str	r3, [sp, #8]
 800d80c:	2313      	movs	r3, #19
 800d80e:	18fb      	adds	r3, r7, r3
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	000b      	movs	r3, r1
 800d818:	2101      	movs	r1, #1
 800d81a:	f7ff fed7 	bl	800d5cc <VL53L0X_ref_calibration_io>
 800d81e:	0003      	movs	r3, r0
 800d820:	7023      	strb	r3, [r4, #0]
 800d822:	e002      	b.n	800d82a <VL53L0X_perform_vhv_calibration+0xca>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2200      	movs	r2, #0
 800d828:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d82a:	2517      	movs	r5, #23
 800d82c:	197b      	adds	r3, r7, r5
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	b25b      	sxtb	r3, r3
 800d832:	2b00      	cmp	r3, #0
 800d834:	d119      	bne.n	800d86a <VL53L0X_perform_vhv_calibration+0x10a>
 800d836:	1dbb      	adds	r3, r7, #6
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d015      	beq.n	800d86a <VL53L0X_perform_vhv_calibration+0x10a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d83e:	197c      	adds	r4, r7, r5
 800d840:	2616      	movs	r6, #22
 800d842:	19bb      	adds	r3, r7, r6
 800d844:	781a      	ldrb	r2, [r3, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2101      	movs	r1, #1
 800d84a:	0018      	movs	r0, r3
 800d84c:	f002 ffb4 	bl	80107b8 <VL53L0X_WrByte>
 800d850:	0003      	movs	r3, r0
 800d852:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d854:	197b      	adds	r3, r7, r5
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	b25b      	sxtb	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d105      	bne.n	800d86a <VL53L0X_perform_vhv_calibration+0x10a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	19b9      	adds	r1, r7, r6
 800d862:	2398      	movs	r3, #152	; 0x98
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	7809      	ldrb	r1, [r1, #0]
 800d868:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800d86a:	2317      	movs	r3, #23
 800d86c:	18fb      	adds	r3, r7, r3
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	b25b      	sxtb	r3, r3
}
 800d872:	0018      	movs	r0, r3
 800d874:	46bd      	mov	sp, r7
 800d876:	b007      	add	sp, #28
 800d878:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d87a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d87a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87c:	b08b      	sub	sp, #44	; 0x2c
 800d87e:	af04      	add	r7, sp, #16
 800d880:	60f8      	str	r0, [r7, #12]
 800d882:	60b9      	str	r1, [r7, #8]
 800d884:	0019      	movs	r1, r3
 800d886:	1dfb      	adds	r3, r7, #7
 800d888:	701a      	strb	r2, [r3, #0]
 800d88a:	1dbb      	adds	r3, r7, #6
 800d88c:	1c0a      	adds	r2, r1, #0
 800d88e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d890:	2317      	movs	r3, #23
 800d892:	18fb      	adds	r3, r7, r3
 800d894:	2200      	movs	r2, #0
 800d896:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800d898:	2116      	movs	r1, #22
 800d89a:	187b      	adds	r3, r7, r1
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800d8a0:	2315      	movs	r3, #21
 800d8a2:	18fb      	adds	r3, r7, r3
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800d8a8:	2314      	movs	r3, #20
 800d8aa:	18fb      	adds	r3, r7, r3
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d8b0:	1dbb      	adds	r3, r7, #6
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d005      	beq.n	800d8c4 <VL53L0X_perform_phase_calibration+0x4a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d8b8:	187b      	adds	r3, r7, r1
 800d8ba:	68f9      	ldr	r1, [r7, #12]
 800d8bc:	2298      	movs	r2, #152	; 0x98
 800d8be:	0052      	lsls	r2, r2, #1
 800d8c0:	5c8a      	ldrb	r2, [r1, r2]
 800d8c2:	701a      	strb	r2, [r3, #0]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d8c4:	2517      	movs	r5, #23
 800d8c6:	197c      	adds	r4, r7, r5
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	f002 ff72 	bl	80107b8 <VL53L0X_WrByte>
 800d8d4:	0003      	movs	r3, r0
 800d8d6:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800d8d8:	197b      	adds	r3, r7, r5
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b25b      	sxtb	r3, r3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d107      	bne.n	800d8f2 <VL53L0X_perform_phase_calibration+0x78>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d8e2:	197c      	adds	r4, r7, r5
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	0018      	movs	r0, r3
 800d8ea:	f7ff fe20 	bl	800d52e <VL53L0X_perform_single_ref_calibration>
 800d8ee:	0003      	movs	r3, r0
 800d8f0:	7023      	strb	r3, [r4, #0]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d8f2:	2217      	movs	r2, #23
 800d8f4:	18bb      	adds	r3, r7, r2
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	b25b      	sxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d11b      	bne.n	800d936 <VL53L0X_perform_phase_calibration+0xbc>
 800d8fe:	1dfb      	adds	r3, r7, #7
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d117      	bne.n	800d936 <VL53L0X_perform_phase_calibration+0xbc>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d906:	18bc      	adds	r4, r7, r2
 800d908:	2314      	movs	r3, #20
 800d90a:	18fb      	adds	r3, r7, r3
 800d90c:	7819      	ldrb	r1, [r3, #0]
 800d90e:	2315      	movs	r3, #21
 800d910:	18fb      	adds	r3, r7, r3
 800d912:	781a      	ldrb	r2, [r3, #0]
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	2301      	movs	r3, #1
 800d918:	9303      	str	r3, [sp, #12]
 800d91a:	2300      	movs	r3, #0
 800d91c:	9302      	str	r3, [sp, #8]
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	2313      	movs	r3, #19
 800d924:	18fb      	adds	r3, r7, r3
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	000b      	movs	r3, r1
 800d92a:	2101      	movs	r1, #1
 800d92c:	f7ff fe4e 	bl	800d5cc <VL53L0X_ref_calibration_io>
 800d930:	0003      	movs	r3, r0
 800d932:	7023      	strb	r3, [r4, #0]
 800d934:	e002      	b.n	800d93c <VL53L0X_perform_phase_calibration+0xc2>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2200      	movs	r2, #0
 800d93a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d93c:	2517      	movs	r5, #23
 800d93e:	197b      	adds	r3, r7, r5
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	b25b      	sxtb	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d119      	bne.n	800d97c <VL53L0X_perform_phase_calibration+0x102>
 800d948:	1dbb      	adds	r3, r7, #6
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d015      	beq.n	800d97c <VL53L0X_perform_phase_calibration+0x102>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d950:	197c      	adds	r4, r7, r5
 800d952:	2616      	movs	r6, #22
 800d954:	19bb      	adds	r3, r7, r6
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2101      	movs	r1, #1
 800d95c:	0018      	movs	r0, r3
 800d95e:	f002 ff2b 	bl	80107b8 <VL53L0X_WrByte>
 800d962:	0003      	movs	r3, r0
 800d964:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d966:	197b      	adds	r3, r7, r5
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	b25b      	sxtb	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d105      	bne.n	800d97c <VL53L0X_perform_phase_calibration+0x102>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	19b9      	adds	r1, r7, r6
 800d974:	2398      	movs	r3, #152	; 0x98
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	7809      	ldrb	r1, [r1, #0]
 800d97a:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800d97c:	2317      	movs	r3, #23
 800d97e:	18fb      	adds	r3, r7, r3
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	b25b      	sxtb	r3, r3
}
 800d984:	0018      	movs	r0, r3
 800d986:	46bd      	mov	sp, r7
 800d988:	b007      	add	sp, #28
 800d98a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d98c <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	001a      	movs	r2, r3
 800d99a:	1cfb      	adds	r3, r7, #3
 800d99c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d99e:	2017      	movs	r0, #23
 800d9a0:	183b      	adds	r3, r7, r0
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800d9a6:	2116      	movs	r1, #22
 800d9a8:	187b      	adds	r3, r7, r1
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d9ae:	187b      	adds	r3, r7, r1
 800d9b0:	68f9      	ldr	r1, [r7, #12]
 800d9b2:	2298      	movs	r2, #152	; 0x98
 800d9b4:	0052      	lsls	r2, r2, #1
 800d9b6:	5c8a      	ldrb	r2, [r1, r2]
 800d9b8:	701a      	strb	r2, [r3, #0]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d9ba:	0005      	movs	r5, r0
 800d9bc:	183c      	adds	r4, r7, r0
 800d9be:	1cfb      	adds	r3, r7, #3
 800d9c0:	781a      	ldrb	r2, [r3, #0]
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f7ff feca 	bl	800d760 <VL53L0X_perform_vhv_calibration>
 800d9cc:	0003      	movs	r3, r0
 800d9ce:	7023      	strb	r3, [r4, #0]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d9d0:	197b      	adds	r3, r7, r5
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	b25b      	sxtb	r3, r3
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <VL53L0X_perform_ref_calibration+0x62>
		Status = VL53L0X_perform_phase_calibration(
 800d9da:	197c      	adds	r4, r7, r5
 800d9dc:	1cfb      	adds	r3, r7, #3
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f7ff ff48 	bl	800d87a <VL53L0X_perform_phase_calibration>
 800d9ea:	0003      	movs	r3, r0
 800d9ec:	7023      	strb	r3, [r4, #0]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d9ee:	2517      	movs	r5, #23
 800d9f0:	197b      	adds	r3, r7, r5
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d115      	bne.n	800da26 <VL53L0X_perform_ref_calibration+0x9a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d9fa:	197c      	adds	r4, r7, r5
 800d9fc:	2616      	movs	r6, #22
 800d9fe:	19bb      	adds	r3, r7, r6
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2101      	movs	r1, #1
 800da06:	0018      	movs	r0, r3
 800da08:	f002 fed6 	bl	80107b8 <VL53L0X_WrByte>
 800da0c:	0003      	movs	r3, r0
 800da0e:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800da10:	197b      	adds	r3, r7, r5
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	b25b      	sxtb	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d105      	bne.n	800da26 <VL53L0X_perform_ref_calibration+0x9a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	19b9      	adds	r1, r7, r6
 800da1e:	2398      	movs	r3, #152	; 0x98
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	7809      	ldrb	r1, [r1, #0]
 800da24:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800da26:	2317      	movs	r3, #23
 800da28:	18fb      	adds	r3, r7, r3
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	b25b      	sxtb	r3, r3
}
 800da2e:	0018      	movs	r0, r3
 800da30:	46bd      	mov	sp, r7
 800da32:	b007      	add	sp, #28
 800da34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da36 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800da36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da38:	b087      	sub	sp, #28
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da3e:	2317      	movs	r3, #23
 800da40:	18fb      	adds	r3, r7, r3
 800da42:	2200      	movs	r2, #0
 800da44:	701a      	strb	r2, [r3, #0]
	uint8_t NewDataReady = 0;
 800da46:	230f      	movs	r3, #15
 800da48:	18fb      	adds	r3, r7, r3
 800da4a:	2200      	movs	r2, #0
 800da4c:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da52:	2517      	movs	r5, #23
 800da54:	197c      	adds	r4, r7, r5
 800da56:	260f      	movs	r6, #15
 800da58:	19ba      	adds	r2, r7, r6
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	0011      	movs	r1, r2
 800da5e:	0018      	movs	r0, r3
 800da60:	f7fe fb9b 	bl	800c19a <VL53L0X_GetMeasurementDataReady>
 800da64:	0003      	movs	r3, r0
 800da66:	7023      	strb	r3, [r4, #0]
		if (Status != 0)
 800da68:	0029      	movs	r1, r5
 800da6a:	187b      	adds	r3, r7, r1
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	b25b      	sxtb	r3, r3
 800da70:	2b00      	cmp	r3, #0
 800da72:	d114      	bne.n	800da9e <VL53L0X_measurement_poll_for_completion+0x68>
			break; /* the error is set */

		if (NewDataReady == 1)
 800da74:	19bb      	adds	r3, r7, r6
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d012      	beq.n	800daa2 <VL53L0X_measurement_poll_for_completion+0x6c>
			break; /* done note that status == 0 */

		LoopNb++;
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	3301      	adds	r3, #1
 800da80:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	23fa      	movs	r3, #250	; 0xfa
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	429a      	cmp	r2, r3
 800da8a:	d303      	bcc.n	800da94 <VL53L0X_measurement_poll_for_completion+0x5e>
			Status = VL53L0X_ERROR_TIME_OUT;
 800da8c:	187b      	adds	r3, r7, r1
 800da8e:	22f9      	movs	r2, #249	; 0xf9
 800da90:	701a      	strb	r2, [r3, #0]
			break;
 800da92:	e007      	b.n	800daa4 <VL53L0X_measurement_poll_for_completion+0x6e>
		}

		VL53L0X_PollingDelay(Dev);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	0018      	movs	r0, r3
 800da98:	f002 fffa 	bl	8010a90 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800da9c:	e7d9      	b.n	800da52 <VL53L0X_measurement_poll_for_completion+0x1c>
			break; /* the error is set */
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	e000      	b.n	800daa4 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* done note that status == 0 */
 800daa2:	46c0      	nop			; (mov r8, r8)
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800daa4:	2317      	movs	r3, #23
 800daa6:	18fb      	adds	r3, r7, r3
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	b25b      	sxtb	r3, r3
}
 800daac:	0018      	movs	r0, r3
 800daae:	46bd      	mov	sp, r7
 800dab0:	b007      	add	sp, #28
 800dab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dab4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	0002      	movs	r2, r0
 800dabc:	1dfb      	adds	r3, r7, #7
 800dabe:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800dac0:	210f      	movs	r1, #15
 800dac2:	187b      	adds	r3, r7, r1
 800dac4:	2200      	movs	r2, #0
 800dac6:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800dac8:	1dfb      	adds	r3, r7, #7
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	3301      	adds	r3, #1
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	187a      	adds	r2, r7, r1
 800dad2:	18db      	adds	r3, r3, r3
 800dad4:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 800dad6:	187b      	adds	r3, r7, r1
 800dad8:	781b      	ldrb	r3, [r3, #0]
}
 800dada:	0018      	movs	r0, r3
 800dadc:	46bd      	mov	sp, r7
 800dade:	b004      	add	sp, #16
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	0002      	movs	r2, r0
 800daea:	1dfb      	adds	r3, r7, #7
 800daec:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800daee:	210f      	movs	r1, #15
 800daf0:	187b      	adds	r3, r7, r1
 800daf2:	2200      	movs	r2, #0
 800daf4:	701a      	strb	r2, [r3, #0]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800daf6:	1dfb      	adds	r3, r7, #7
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	085b      	lsrs	r3, r3, #1
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	187b      	adds	r3, r7, r1
 800db00:	3a01      	subs	r2, #1
 800db02:	701a      	strb	r2, [r3, #0]

	return vcsel_period_reg;
 800db04:	187b      	adds	r3, r7, r1
 800db06:	781b      	ldrb	r3, [r3, #0]
}
 800db08:	0018      	movs	r0, r3
 800db0a:	46bd      	mov	sp, r7
 800db0c:	b004      	add	sp, #16
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800db18:	2300      	movs	r3, #0
 800db1a:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800db1c:	2380      	movs	r3, #128	; 0x80
 800db1e:	05db      	lsls	r3, r3, #23
 800db20:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800db22:	e002      	b.n	800db2a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	089b      	lsrs	r3, r3, #2
 800db28:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d8f8      	bhi.n	800db24 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800db32:	e017      	b.n	800db64 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	18d3      	adds	r3, r2, r3
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d30b      	bcc.n	800db58 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	18d3      	adds	r3, r2, r3
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	1ad3      	subs	r3, r2, r3
 800db4a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	085b      	lsrs	r3, r3, #1
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	18d3      	adds	r3, r2, r3
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e002      	b.n	800db5e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	085b      	lsrs	r3, r3, #1
 800db5c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	089b      	lsrs	r3, r3, #2
 800db62:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1e4      	bne.n	800db34 <VL53L0X_isqrt+0x24>
	}

	return res;
 800db6a:	68fb      	ldr	r3, [r7, #12]
}
 800db6c:	0018      	movs	r0, r3
 800db6e:	46bd      	mov	sp, r7
 800db70:	b004      	add	sp, #16
 800db72:	bd80      	pop	{r7, pc}

0800db74 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800db74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db7c:	2417      	movs	r4, #23
 800db7e:	193b      	adds	r3, r7, r4
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	2183      	movs	r1, #131	; 0x83
 800db8a:	0018      	movs	r0, r3
 800db8c:	f002 fe14 	bl	80107b8 <VL53L0X_WrByte>
 800db90:	0003      	movs	r3, r0
 800db92:	0019      	movs	r1, r3
 800db94:	193b      	adds	r3, r7, r4
 800db96:	193a      	adds	r2, r7, r4
 800db98:	7812      	ldrb	r2, [r2, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	701a      	strb	r2, [r3, #0]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800db9e:	193b      	adds	r3, r7, r4
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	b25b      	sxtb	r3, r3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d126      	bne.n	800dbf6 <VL53L0X_device_read_strobe+0x82>
		LoopNb = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800dbac:	2617      	movs	r6, #23
 800dbae:	19bc      	adds	r4, r7, r6
 800dbb0:	250f      	movs	r5, #15
 800dbb2:	197a      	adds	r2, r7, r5
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2183      	movs	r1, #131	; 0x83
 800dbb8:	0018      	movs	r0, r3
 800dbba:	f002 feac 	bl	8010916 <VL53L0X_RdByte>
 800dbbe:	0003      	movs	r3, r0
 800dbc0:	7023      	strb	r3, [r4, #0]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800dbc2:	197b      	adds	r3, r7, r5
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10c      	bne.n	800dbe4 <VL53L0X_device_read_strobe+0x70>
 800dbca:	19bb      	adds	r3, r7, r6
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b25b      	sxtb	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d107      	bne.n	800dbe4 <VL53L0X_device_read_strobe+0x70>
					break;

			LoopNb = LoopNb + 1;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	23fa      	movs	r3, #250	; 0xfa
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d3e3      	bcc.n	800dbac <VL53L0X_device_read_strobe+0x38>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	23fa      	movs	r3, #250	; 0xfa
 800dbe8:	00db      	lsls	r3, r3, #3
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d303      	bcc.n	800dbf6 <VL53L0X_device_read_strobe+0x82>
			Status = VL53L0X_ERROR_TIME_OUT;
 800dbee:	2317      	movs	r3, #23
 800dbf0:	18fb      	adds	r3, r7, r3
 800dbf2:	22f9      	movs	r2, #249	; 0xf9
 800dbf4:	701a      	strb	r2, [r3, #0]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	2183      	movs	r1, #131	; 0x83
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	f002 fddb 	bl	80107b8 <VL53L0X_WrByte>
 800dc02:	0003      	movs	r3, r0
 800dc04:	0019      	movs	r1, r3
 800dc06:	2017      	movs	r0, #23
 800dc08:	183b      	adds	r3, r7, r0
 800dc0a:	183a      	adds	r2, r7, r0
 800dc0c:	7812      	ldrb	r2, [r2, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800dc12:	183b      	adds	r3, r7, r0
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	b25b      	sxtb	r3, r3

}
 800dc18:	0018      	movs	r0, r3
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	b007      	add	sp, #28
 800dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc20 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc22:	b099      	sub	sp, #100	; 0x64
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	000a      	movs	r2, r1
 800dc2a:	1cfb      	adds	r3, r7, #3
 800dc2c:	701a      	strb	r2, [r3, #0]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc2e:	245f      	movs	r4, #95	; 0x5f
 800dc30:	193b      	adds	r3, r7, r4
 800dc32:	2200      	movs	r2, #0
 800dc34:	701a      	strb	r2, [r3, #0]
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800dc36:	235e      	movs	r3, #94	; 0x5e
 800dc38:	18fb      	adds	r3, r7, r3
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	701a      	strb	r2, [r3, #0]
	uint8_t ReferenceSpadType = 0;
 800dc3e:	225d      	movs	r2, #93	; 0x5d
 800dc40:	18bb      	adds	r3, r7, r2
 800dc42:	2200      	movs	r2, #0
 800dc44:	701a      	strb	r2, [r3, #0]
	uint32_t PartUIDUpper = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800dc52:	215a      	movs	r1, #90	; 0x5a
 800dc54:	187b      	adds	r3, r7, r1
 800dc56:	2200      	movs	r2, #0
 800dc58:	801a      	strh	r2, [r3, #0]
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800dc5a:	23c8      	movs	r3, #200	; 0xc8
 800dc5c:	015b      	lsls	r3, r3, #5
 800dc5e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800dc6c:	253f      	movs	r5, #63	; 0x3f
 800dc6e:	197b      	adds	r3, r7, r5
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	21f0      	movs	r1, #240	; 0xf0
 800dc74:	5c52      	ldrb	r2, [r2, r1]
 800dc76:	701a      	strb	r2, [r3, #0]
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800dc78:	197b      	adds	r3, r7, r5
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b07      	cmp	r3, #7
 800dc7e:	d101      	bne.n	800dc84 <VL53L0X_get_info_from_device+0x64>
 800dc80:	f000 fc51 	bl	800e526 <VL53L0X_get_info_from_device+0x906>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	2180      	movs	r1, #128	; 0x80
 800dc8a:	0018      	movs	r0, r3
 800dc8c:	f002 fd94 	bl	80107b8 <VL53L0X_WrByte>
 800dc90:	0003      	movs	r3, r0
 800dc92:	0019      	movs	r1, r3
 800dc94:	193b      	adds	r3, r7, r4
 800dc96:	193a      	adds	r2, r7, r4
 800dc98:	7812      	ldrb	r2, [r2, #0]
 800dc9a:	430a      	orrs	r2, r1
 800dc9c:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	21ff      	movs	r1, #255	; 0xff
 800dca4:	0018      	movs	r0, r3
 800dca6:	f002 fd87 	bl	80107b8 <VL53L0X_WrByte>
 800dcaa:	0003      	movs	r3, r0
 800dcac:	0019      	movs	r1, r3
 800dcae:	193b      	adds	r3, r7, r4
 800dcb0:	193a      	adds	r2, r7, r4
 800dcb2:	7812      	ldrb	r2, [r2, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f002 fd7a 	bl	80107b8 <VL53L0X_WrByte>
 800dcc4:	0003      	movs	r3, r0
 800dcc6:	0019      	movs	r1, r3
 800dcc8:	193b      	adds	r3, r7, r4
 800dcca:	193a      	adds	r2, r7, r4
 800dccc:	7812      	ldrb	r2, [r2, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2206      	movs	r2, #6
 800dcd6:	21ff      	movs	r1, #255	; 0xff
 800dcd8:	0018      	movs	r0, r3
 800dcda:	f002 fd6d 	bl	80107b8 <VL53L0X_WrByte>
 800dcde:	0003      	movs	r3, r0
 800dce0:	0019      	movs	r1, r3
 800dce2:	193b      	adds	r3, r7, r4
 800dce4:	193a      	adds	r2, r7, r4
 800dce6:	7812      	ldrb	r2, [r2, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dcec:	2637      	movs	r6, #55	; 0x37
 800dcee:	19ba      	adds	r2, r7, r6
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2183      	movs	r1, #131	; 0x83
 800dcf4:	0018      	movs	r0, r3
 800dcf6:	f002 fe0e 	bl	8010916 <VL53L0X_RdByte>
 800dcfa:	0003      	movs	r3, r0
 800dcfc:	0019      	movs	r1, r3
 800dcfe:	193b      	adds	r3, r7, r4
 800dd00:	193a      	adds	r2, r7, r4
 800dd02:	7812      	ldrb	r2, [r2, #0]
 800dd04:	430a      	orrs	r2, r1
 800dd06:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800dd08:	19bb      	adds	r3, r7, r6
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2204      	movs	r2, #4
 800dd0e:	4313      	orrs	r3, r2
 800dd10:	b2da      	uxtb	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2183      	movs	r1, #131	; 0x83
 800dd16:	0018      	movs	r0, r3
 800dd18:	f002 fd4e 	bl	80107b8 <VL53L0X_WrByte>
 800dd1c:	0003      	movs	r3, r0
 800dd1e:	0019      	movs	r1, r3
 800dd20:	193b      	adds	r3, r7, r4
 800dd22:	193a      	adds	r2, r7, r4
 800dd24:	7812      	ldrb	r2, [r2, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	21ff      	movs	r1, #255	; 0xff
 800dd30:	0018      	movs	r0, r3
 800dd32:	f002 fd41 	bl	80107b8 <VL53L0X_WrByte>
 800dd36:	0003      	movs	r3, r0
 800dd38:	0019      	movs	r1, r3
 800dd3a:	193b      	adds	r3, r7, r4
 800dd3c:	193a      	adds	r2, r7, r4
 800dd3e:	7812      	ldrb	r2, [r2, #0]
 800dd40:	430a      	orrs	r2, r1
 800dd42:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	2181      	movs	r1, #129	; 0x81
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	f002 fd34 	bl	80107b8 <VL53L0X_WrByte>
 800dd50:	0003      	movs	r3, r0
 800dd52:	0019      	movs	r1, r3
 800dd54:	193b      	adds	r3, r7, r4
 800dd56:	193a      	adds	r2, r7, r4
 800dd58:	7812      	ldrb	r2, [r2, #0]
 800dd5a:	430a      	orrs	r2, r1
 800dd5c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_PollingDelay(Dev);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	0018      	movs	r0, r3
 800dd62:	f002 fe95 	bl	8010a90 <VL53L0X_PollingDelay>
 800dd66:	0003      	movs	r3, r0
 800dd68:	0019      	movs	r1, r3
 800dd6a:	193b      	adds	r3, r7, r4
 800dd6c:	193a      	adds	r2, r7, r4
 800dd6e:	7812      	ldrb	r2, [r2, #0]
 800dd70:	430a      	orrs	r2, r1
 800dd72:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	2180      	movs	r1, #128	; 0x80
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f002 fd1c 	bl	80107b8 <VL53L0X_WrByte>
 800dd80:	0003      	movs	r3, r0
 800dd82:	0019      	movs	r1, r3
 800dd84:	193b      	adds	r3, r7, r4
 800dd86:	193a      	adds	r2, r7, r4
 800dd88:	7812      	ldrb	r2, [r2, #0]
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	701a      	strb	r2, [r3, #0]

		if (((option & 1) == 1) &&
 800dd8e:	1cfb      	adds	r3, r7, #3
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2201      	movs	r2, #1
 800dd94:	4013      	ands	r3, r2
 800dd96:	d100      	bne.n	800dd9a <VL53L0X_get_info_from_device+0x17a>
 800dd98:	e0a3      	b.n	800dee2 <VL53L0X_get_info_from_device+0x2c2>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dd9a:	197b      	adds	r3, r7, r5
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800dda2:	d000      	beq.n	800dda6 <VL53L0X_get_info_from_device+0x186>
 800dda4:	e09d      	b.n	800dee2 <VL53L0X_get_info_from_device+0x2c2>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	226b      	movs	r2, #107	; 0x6b
 800ddaa:	2194      	movs	r1, #148	; 0x94
 800ddac:	0018      	movs	r0, r3
 800ddae:	f002 fd03 	bl	80107b8 <VL53L0X_WrByte>
 800ddb2:	0003      	movs	r3, r0
 800ddb4:	0019      	movs	r1, r3
 800ddb6:	193b      	adds	r3, r7, r4
 800ddb8:	193a      	adds	r2, r7, r4
 800ddba:	7812      	ldrb	r2, [r2, #0]
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f7ff fed6 	bl	800db74 <VL53L0X_device_read_strobe>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	0019      	movs	r1, r3
 800ddcc:	193b      	adds	r3, r7, r4
 800ddce:	193a      	adds	r2, r7, r4
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	430a      	orrs	r2, r1
 800ddd4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ddd6:	2630      	movs	r6, #48	; 0x30
 800ddd8:	19ba      	adds	r2, r7, r6
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2190      	movs	r1, #144	; 0x90
 800ddde:	0018      	movs	r0, r3
 800dde0:	f002 fe10 	bl	8010a04 <VL53L0X_RdDWord>
 800dde4:	0003      	movs	r3, r0
 800dde6:	0019      	movs	r1, r3
 800dde8:	193b      	adds	r3, r7, r4
 800ddea:	193a      	adds	r2, r7, r4
 800ddec:	7812      	ldrb	r2, [r2, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	701a      	strb	r2, [r3, #0]

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	0a1b      	lsrs	r3, r3, #8
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	235e      	movs	r3, #94	; 0x5e
 800ddfa:	18fb      	adds	r3, r7, r3
 800ddfc:	217f      	movs	r1, #127	; 0x7f
 800ddfe:	400a      	ands	r2, r1
 800de00:	701a      	strb	r2, [r3, #0]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	0bdb      	lsrs	r3, r3, #15
 800de06:	b2da      	uxtb	r2, r3
 800de08:	235d      	movs	r3, #93	; 0x5d
 800de0a:	18fb      	adds	r3, r7, r3
 800de0c:	2101      	movs	r1, #1
 800de0e:	400a      	ands	r2, r1
 800de10:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2224      	movs	r2, #36	; 0x24
 800de16:	2194      	movs	r1, #148	; 0x94
 800de18:	0018      	movs	r0, r3
 800de1a:	f002 fccd 	bl	80107b8 <VL53L0X_WrByte>
 800de1e:	0003      	movs	r3, r0
 800de20:	0019      	movs	r1, r3
 800de22:	193b      	adds	r3, r7, r4
 800de24:	193a      	adds	r2, r7, r4
 800de26:	7812      	ldrb	r2, [r2, #0]
 800de28:	430a      	orrs	r2, r1
 800de2a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	0018      	movs	r0, r3
 800de30:	f7ff fea0 	bl	800db74 <VL53L0X_device_read_strobe>
 800de34:	0003      	movs	r3, r0
 800de36:	0019      	movs	r1, r3
 800de38:	193b      	adds	r3, r7, r4
 800de3a:	193a      	adds	r2, r7, r4
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	430a      	orrs	r2, r1
 800de40:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de42:	19ba      	adds	r2, r7, r6
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2190      	movs	r1, #144	; 0x90
 800de48:	0018      	movs	r0, r3
 800de4a:	f002 fddb 	bl	8010a04 <VL53L0X_RdDWord>
 800de4e:	0003      	movs	r3, r0
 800de50:	0019      	movs	r1, r3
 800de52:	193b      	adds	r3, r7, r4
 800de54:	193a      	adds	r2, r7, r4
 800de56:	7812      	ldrb	r2, [r2, #0]
 800de58:	430a      	orrs	r2, r1
 800de5a:	701a      	strb	r2, [r3, #0]


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	0e1b      	lsrs	r3, r3, #24
 800de60:	b2da      	uxtb	r2, r3
 800de62:	2508      	movs	r5, #8
 800de64:	197b      	adds	r3, r7, r5
 800de66:	701a      	strb	r2, [r3, #0]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	0c1b      	lsrs	r3, r3, #16
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	197b      	adds	r3, r7, r5
 800de70:	705a      	strb	r2, [r3, #1]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	0a1b      	lsrs	r3, r3, #8
 800de76:	b2da      	uxtb	r2, r3
 800de78:	197b      	adds	r3, r7, r5
 800de7a:	709a      	strb	r2, [r3, #2]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	197b      	adds	r3, r7, r5
 800de82:	70da      	strb	r2, [r3, #3]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2225      	movs	r2, #37	; 0x25
 800de88:	2194      	movs	r1, #148	; 0x94
 800de8a:	0018      	movs	r0, r3
 800de8c:	f002 fc94 	bl	80107b8 <VL53L0X_WrByte>
 800de90:	0003      	movs	r3, r0
 800de92:	0019      	movs	r1, r3
 800de94:	193b      	adds	r3, r7, r4
 800de96:	193a      	adds	r2, r7, r4
 800de98:	7812      	ldrb	r2, [r2, #0]
 800de9a:	430a      	orrs	r2, r1
 800de9c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0018      	movs	r0, r3
 800dea2:	f7ff fe67 	bl	800db74 <VL53L0X_device_read_strobe>
 800dea6:	0003      	movs	r3, r0
 800dea8:	0019      	movs	r1, r3
 800deaa:	193b      	adds	r3, r7, r4
 800deac:	193a      	adds	r2, r7, r4
 800deae:	7812      	ldrb	r2, [r2, #0]
 800deb0:	430a      	orrs	r2, r1
 800deb2:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800deb4:	19ba      	adds	r2, r7, r6
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2190      	movs	r1, #144	; 0x90
 800deba:	0018      	movs	r0, r3
 800debc:	f002 fda2 	bl	8010a04 <VL53L0X_RdDWord>
 800dec0:	0003      	movs	r3, r0
 800dec2:	0019      	movs	r1, r3
 800dec4:	193b      	adds	r3, r7, r4
 800dec6:	193a      	adds	r2, r7, r4
 800dec8:	7812      	ldrb	r2, [r2, #0]
 800deca:	430a      	orrs	r2, r1
 800decc:	701a      	strb	r2, [r3, #0]

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded0:	0e1b      	lsrs	r3, r3, #24
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	197b      	adds	r3, r7, r5
 800ded6:	711a      	strb	r2, [r3, #4]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ded8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deda:	0c1b      	lsrs	r3, r3, #16
 800dedc:	b2da      	uxtb	r2, r3
 800dede:	197b      	adds	r3, r7, r5
 800dee0:	715a      	strb	r2, [r3, #5]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800dee2:	1cfb      	adds	r3, r7, #3
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2202      	movs	r2, #2
 800dee8:	4013      	ands	r3, r2
 800deea:	d100      	bne.n	800deee <VL53L0X_get_info_from_device+0x2ce>
 800deec:	e1aa      	b.n	800e244 <VL53L0X_get_info_from_device+0x624>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800deee:	233f      	movs	r3, #63	; 0x3f
 800def0:	18fb      	adds	r3, r7, r3
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2202      	movs	r2, #2
 800def6:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800def8:	d000      	beq.n	800defc <VL53L0X_get_info_from_device+0x2dc>
 800defa:	e1a3      	b.n	800e244 <VL53L0X_get_info_from_device+0x624>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2202      	movs	r2, #2
 800df00:	2194      	movs	r1, #148	; 0x94
 800df02:	0018      	movs	r0, r3
 800df04:	f002 fc58 	bl	80107b8 <VL53L0X_WrByte>
 800df08:	0003      	movs	r3, r0
 800df0a:	0019      	movs	r1, r3
 800df0c:	245f      	movs	r4, #95	; 0x5f
 800df0e:	193b      	adds	r3, r7, r4
 800df10:	193a      	adds	r2, r7, r4
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	430a      	orrs	r2, r1
 800df16:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	0018      	movs	r0, r3
 800df1c:	f7ff fe2a 	bl	800db74 <VL53L0X_device_read_strobe>
 800df20:	0003      	movs	r3, r0
 800df22:	0019      	movs	r1, r3
 800df24:	193b      	adds	r3, r7, r4
 800df26:	193a      	adds	r2, r7, r4
 800df28:	7812      	ldrb	r2, [r2, #0]
 800df2a:	430a      	orrs	r2, r1
 800df2c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800df2e:	232f      	movs	r3, #47	; 0x2f
 800df30:	18fa      	adds	r2, r7, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2190      	movs	r1, #144	; 0x90
 800df36:	0018      	movs	r0, r3
 800df38:	f002 fced 	bl	8010916 <VL53L0X_RdByte>
 800df3c:	0003      	movs	r3, r0
 800df3e:	0019      	movs	r1, r3
 800df40:	193b      	adds	r3, r7, r4
 800df42:	193a      	adds	r2, r7, r4
 800df44:	7812      	ldrb	r2, [r2, #0]
 800df46:	430a      	orrs	r2, r1
 800df48:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	227b      	movs	r2, #123	; 0x7b
 800df4e:	2194      	movs	r1, #148	; 0x94
 800df50:	0018      	movs	r0, r3
 800df52:	f002 fc31 	bl	80107b8 <VL53L0X_WrByte>
 800df56:	0003      	movs	r3, r0
 800df58:	0019      	movs	r1, r3
 800df5a:	193b      	adds	r3, r7, r4
 800df5c:	193a      	adds	r2, r7, r4
 800df5e:	7812      	ldrb	r2, [r2, #0]
 800df60:	430a      	orrs	r2, r1
 800df62:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	0018      	movs	r0, r3
 800df68:	f7ff fe04 	bl	800db74 <VL53L0X_device_read_strobe>
 800df6c:	0003      	movs	r3, r0
 800df6e:	0019      	movs	r1, r3
 800df70:	193b      	adds	r3, r7, r4
 800df72:	193a      	adds	r2, r7, r4
 800df74:	7812      	ldrb	r2, [r2, #0]
 800df76:	430a      	orrs	r2, r1
 800df78:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800df7a:	232e      	movs	r3, #46	; 0x2e
 800df7c:	18fa      	adds	r2, r7, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2190      	movs	r1, #144	; 0x90
 800df82:	0018      	movs	r0, r3
 800df84:	f002 fcc7 	bl	8010916 <VL53L0X_RdByte>
 800df88:	0003      	movs	r3, r0
 800df8a:	0019      	movs	r1, r3
 800df8c:	193b      	adds	r3, r7, r4
 800df8e:	193a      	adds	r2, r7, r4
 800df90:	7812      	ldrb	r2, [r2, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2277      	movs	r2, #119	; 0x77
 800df9a:	2194      	movs	r1, #148	; 0x94
 800df9c:	0018      	movs	r0, r3
 800df9e:	f002 fc0b 	bl	80107b8 <VL53L0X_WrByte>
 800dfa2:	0003      	movs	r3, r0
 800dfa4:	0019      	movs	r1, r3
 800dfa6:	193b      	adds	r3, r7, r4
 800dfa8:	193a      	adds	r2, r7, r4
 800dfaa:	7812      	ldrb	r2, [r2, #0]
 800dfac:	430a      	orrs	r2, r1
 800dfae:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f7ff fdde 	bl	800db74 <VL53L0X_device_read_strobe>
 800dfb8:	0003      	movs	r3, r0
 800dfba:	0019      	movs	r1, r3
 800dfbc:	193b      	adds	r3, r7, r4
 800dfbe:	193a      	adds	r2, r7, r4
 800dfc0:	7812      	ldrb	r2, [r2, #0]
 800dfc2:	430a      	orrs	r2, r1
 800dfc4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfc6:	2330      	movs	r3, #48	; 0x30
 800dfc8:	18fa      	adds	r2, r7, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2190      	movs	r1, #144	; 0x90
 800dfce:	0018      	movs	r0, r3
 800dfd0:	f002 fd18 	bl	8010a04 <VL53L0X_RdDWord>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	0019      	movs	r1, r3
 800dfd8:	193b      	adds	r3, r7, r4
 800dfda:	193a      	adds	r2, r7, r4
 800dfdc:	7812      	ldrb	r2, [r2, #0]
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	701a      	strb	r2, [r3, #0]

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe4:	0e5b      	lsrs	r3, r3, #25
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	227f      	movs	r2, #127	; 0x7f
 800dfea:	4013      	ands	r3, r2
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	2510      	movs	r5, #16
 800dff0:	197b      	adds	r3, r7, r5
 800dff2:	701a      	strb	r2, [r3, #0]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	0c9b      	lsrs	r3, r3, #18
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	227f      	movs	r2, #127	; 0x7f
 800dffc:	4013      	ands	r3, r2
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	197b      	adds	r3, r7, r5
 800e002:	705a      	strb	r2, [r3, #1]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800e004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e006:	0adb      	lsrs	r3, r3, #11
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	227f      	movs	r2, #127	; 0x7f
 800e00c:	4013      	ands	r3, r2
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	197b      	adds	r3, r7, r5
 800e012:	709a      	strb	r2, [r3, #2]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	091b      	lsrs	r3, r3, #4
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	227f      	movs	r2, #127	; 0x7f
 800e01c:	4013      	ands	r3, r2
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	197b      	adds	r3, r7, r5
 800e022:	70da      	strb	r2, [r3, #3]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	b2db      	uxtb	r3, r3
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2278      	movs	r2, #120	; 0x78
 800e02e:	4013      	ands	r3, r2
 800e030:	b2da      	uxtb	r2, r3
 800e032:	2637      	movs	r6, #55	; 0x37
 800e034:	19bb      	adds	r3, r7, r6
 800e036:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2278      	movs	r2, #120	; 0x78
 800e03c:	2194      	movs	r1, #148	; 0x94
 800e03e:	0018      	movs	r0, r3
 800e040:	f002 fbba 	bl	80107b8 <VL53L0X_WrByte>
 800e044:	0003      	movs	r3, r0
 800e046:	0019      	movs	r1, r3
 800e048:	193b      	adds	r3, r7, r4
 800e04a:	193a      	adds	r2, r7, r4
 800e04c:	7812      	ldrb	r2, [r2, #0]
 800e04e:	430a      	orrs	r2, r1
 800e050:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	0018      	movs	r0, r3
 800e056:	f7ff fd8d 	bl	800db74 <VL53L0X_device_read_strobe>
 800e05a:	0003      	movs	r3, r0
 800e05c:	0019      	movs	r1, r3
 800e05e:	193b      	adds	r3, r7, r4
 800e060:	193a      	adds	r2, r7, r4
 800e062:	7812      	ldrb	r2, [r2, #0]
 800e064:	430a      	orrs	r2, r1
 800e066:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e068:	2330      	movs	r3, #48	; 0x30
 800e06a:	18fa      	adds	r2, r7, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2190      	movs	r1, #144	; 0x90
 800e070:	0018      	movs	r0, r3
 800e072:	f002 fcc7 	bl	8010a04 <VL53L0X_RdDWord>
 800e076:	0003      	movs	r3, r0
 800e078:	0019      	movs	r1, r3
 800e07a:	193b      	adds	r3, r7, r4
 800e07c:	193a      	adds	r2, r7, r4
 800e07e:	7812      	ldrb	r2, [r2, #0]
 800e080:	430a      	orrs	r2, r1
 800e082:	701a      	strb	r2, [r3, #0]

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800e084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e086:	0f5b      	lsrs	r3, r3, #29
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	227f      	movs	r2, #127	; 0x7f
 800e08c:	4013      	ands	r3, r2
 800e08e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800e090:	0031      	movs	r1, r6
 800e092:	187b      	adds	r3, r7, r1
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	18d3      	adds	r3, r2, r3
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	197b      	adds	r3, r7, r5
 800e09c:	711a      	strb	r2, [r3, #4]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	0d9b      	lsrs	r3, r3, #22
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	227f      	movs	r2, #127	; 0x7f
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	197b      	adds	r3, r7, r5
 800e0ac:	715a      	strb	r2, [r3, #5]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b0:	0bdb      	lsrs	r3, r3, #15
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	227f      	movs	r2, #127	; 0x7f
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	197b      	adds	r3, r7, r5
 800e0bc:	719a      	strb	r2, [r3, #6]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800e0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c0:	0a1b      	lsrs	r3, r3, #8
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	227f      	movs	r2, #127	; 0x7f
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	197b      	adds	r3, r7, r5
 800e0cc:	71da      	strb	r2, [r3, #7]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	085b      	lsrs	r3, r3, #1
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	227f      	movs	r2, #127	; 0x7f
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	197b      	adds	r3, r7, r5
 800e0dc:	721a      	strb	r2, [r3, #8]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	019b      	lsls	r3, r3, #6
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2240      	movs	r2, #64	; 0x40
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	000e      	movs	r6, r1
 800e0ee:	19bb      	adds	r3, r7, r6
 800e0f0:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2279      	movs	r2, #121	; 0x79
 800e0f6:	2194      	movs	r1, #148	; 0x94
 800e0f8:	0018      	movs	r0, r3
 800e0fa:	f002 fb5d 	bl	80107b8 <VL53L0X_WrByte>
 800e0fe:	0003      	movs	r3, r0
 800e100:	0019      	movs	r1, r3
 800e102:	193b      	adds	r3, r7, r4
 800e104:	193a      	adds	r2, r7, r4
 800e106:	7812      	ldrb	r2, [r2, #0]
 800e108:	430a      	orrs	r2, r1
 800e10a:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	0018      	movs	r0, r3
 800e110:	f7ff fd30 	bl	800db74 <VL53L0X_device_read_strobe>
 800e114:	0003      	movs	r3, r0
 800e116:	0019      	movs	r1, r3
 800e118:	193b      	adds	r3, r7, r4
 800e11a:	193a      	adds	r2, r7, r4
 800e11c:	7812      	ldrb	r2, [r2, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e122:	2330      	movs	r3, #48	; 0x30
 800e124:	18fa      	adds	r2, r7, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2190      	movs	r1, #144	; 0x90
 800e12a:	0018      	movs	r0, r3
 800e12c:	f002 fc6a 	bl	8010a04 <VL53L0X_RdDWord>
 800e130:	0003      	movs	r3, r0
 800e132:	0019      	movs	r1, r3
 800e134:	193b      	adds	r3, r7, r4
 800e136:	193a      	adds	r2, r7, r4
 800e138:	7812      	ldrb	r2, [r2, #0]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	701a      	strb	r2, [r3, #0]

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	0e9b      	lsrs	r3, r3, #26
 800e142:	b2db      	uxtb	r3, r3
 800e144:	227f      	movs	r2, #127	; 0x7f
 800e146:	4013      	ands	r3, r2
 800e148:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800e14a:	19bb      	adds	r3, r7, r6
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	18d3      	adds	r3, r2, r3
 800e150:	b2da      	uxtb	r2, r3
 800e152:	197b      	adds	r3, r7, r5
 800e154:	725a      	strb	r2, [r3, #9]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	0cdb      	lsrs	r3, r3, #19
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	227f      	movs	r2, #127	; 0x7f
 800e15e:	4013      	ands	r3, r2
 800e160:	b2da      	uxtb	r2, r3
 800e162:	197b      	adds	r3, r7, r5
 800e164:	729a      	strb	r2, [r3, #10]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	0b1b      	lsrs	r3, r3, #12
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	227f      	movs	r2, #127	; 0x7f
 800e16e:	4013      	ands	r3, r2
 800e170:	b2da      	uxtb	r2, r3
 800e172:	197b      	adds	r3, r7, r5
 800e174:	72da      	strb	r2, [r3, #11]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	095b      	lsrs	r3, r3, #5
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	227f      	movs	r2, #127	; 0x7f
 800e17e:	4013      	ands	r3, r2
 800e180:	b2da      	uxtb	r2, r3
 800e182:	197b      	adds	r3, r7, r5
 800e184:	731a      	strb	r2, [r3, #12]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	227c      	movs	r2, #124	; 0x7c
 800e190:	4013      	ands	r3, r2
 800e192:	b2da      	uxtb	r2, r3
 800e194:	19bb      	adds	r3, r7, r6
 800e196:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	227a      	movs	r2, #122	; 0x7a
 800e19c:	2194      	movs	r1, #148	; 0x94
 800e19e:	0018      	movs	r0, r3
 800e1a0:	f002 fb0a 	bl	80107b8 <VL53L0X_WrByte>
 800e1a4:	0003      	movs	r3, r0
 800e1a6:	0019      	movs	r1, r3
 800e1a8:	193b      	adds	r3, r7, r4
 800e1aa:	193a      	adds	r2, r7, r4
 800e1ac:	7812      	ldrb	r2, [r2, #0]
 800e1ae:	430a      	orrs	r2, r1
 800e1b0:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f7ff fcdd 	bl	800db74 <VL53L0X_device_read_strobe>
 800e1ba:	0003      	movs	r3, r0
 800e1bc:	0019      	movs	r1, r3
 800e1be:	193b      	adds	r3, r7, r4
 800e1c0:	193a      	adds	r2, r7, r4
 800e1c2:	7812      	ldrb	r2, [r2, #0]
 800e1c4:	430a      	orrs	r2, r1
 800e1c6:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e1c8:	2330      	movs	r3, #48	; 0x30
 800e1ca:	18fa      	adds	r2, r7, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2190      	movs	r1, #144	; 0x90
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f002 fc17 	bl	8010a04 <VL53L0X_RdDWord>
 800e1d6:	0003      	movs	r3, r0
 800e1d8:	0019      	movs	r1, r3
 800e1da:	193b      	adds	r3, r7, r4
 800e1dc:	193a      	adds	r2, r7, r4
 800e1de:	7812      	ldrb	r2, [r2, #0]
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	701a      	strb	r2, [r3, #0]

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	0f9b      	lsrs	r3, r3, #30
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	227f      	movs	r2, #127	; 0x7f
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800e1f0:	19bb      	adds	r3, r7, r6
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	18d3      	adds	r3, r2, r3
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	0029      	movs	r1, r5
 800e1fa:	187b      	adds	r3, r7, r1
 800e1fc:	735a      	strb	r2, [r3, #13]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	0ddb      	lsrs	r3, r3, #23
 800e202:	b2db      	uxtb	r3, r3
 800e204:	227f      	movs	r2, #127	; 0x7f
 800e206:	4013      	ands	r3, r2
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	187b      	adds	r3, r7, r1
 800e20c:	739a      	strb	r2, [r3, #14]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	0c1b      	lsrs	r3, r3, #16
 800e212:	b2db      	uxtb	r3, r3
 800e214:	227f      	movs	r2, #127	; 0x7f
 800e216:	4013      	ands	r3, r2
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	187b      	adds	r3, r7, r1
 800e21c:	73da      	strb	r2, [r3, #15]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	0a5b      	lsrs	r3, r3, #9
 800e222:	b2db      	uxtb	r3, r3
 800e224:	227f      	movs	r2, #127	; 0x7f
 800e226:	4013      	ands	r3, r2
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	187b      	adds	r3, r7, r1
 800e22c:	741a      	strb	r2, [r3, #16]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	089b      	lsrs	r3, r3, #2
 800e232:	b2db      	uxtb	r3, r3
 800e234:	227f      	movs	r2, #127	; 0x7f
 800e236:	4013      	ands	r3, r2
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	187b      	adds	r3, r7, r1
 800e23c:	745a      	strb	r2, [r3, #17]
			ProductId[18] = '\0';
 800e23e:	187b      	adds	r3, r7, r1
 800e240:	2200      	movs	r2, #0
 800e242:	749a      	strb	r2, [r3, #18]

		}

		if (((option & 4) == 4) &&
 800e244:	1cfb      	adds	r3, r7, #3
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2204      	movs	r2, #4
 800e24a:	4013      	ands	r3, r2
 800e24c:	d100      	bne.n	800e250 <VL53L0X_get_info_from_device+0x630>
 800e24e:	e0fc      	b.n	800e44a <VL53L0X_get_info_from_device+0x82a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e250:	233f      	movs	r3, #63	; 0x3f
 800e252:	18fb      	adds	r3, r7, r3
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2204      	movs	r2, #4
 800e258:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800e25a:	d000      	beq.n	800e25e <VL53L0X_get_info_from_device+0x63e>
 800e25c:	e0f5      	b.n	800e44a <VL53L0X_get_info_from_device+0x82a>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	227b      	movs	r2, #123	; 0x7b
 800e262:	2194      	movs	r1, #148	; 0x94
 800e264:	0018      	movs	r0, r3
 800e266:	f002 faa7 	bl	80107b8 <VL53L0X_WrByte>
 800e26a:	0003      	movs	r3, r0
 800e26c:	0019      	movs	r1, r3
 800e26e:	245f      	movs	r4, #95	; 0x5f
 800e270:	193b      	adds	r3, r7, r4
 800e272:	193a      	adds	r2, r7, r4
 800e274:	7812      	ldrb	r2, [r2, #0]
 800e276:	430a      	orrs	r2, r1
 800e278:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	0018      	movs	r0, r3
 800e27e:	f7ff fc79 	bl	800db74 <VL53L0X_device_read_strobe>
 800e282:	0003      	movs	r3, r0
 800e284:	0019      	movs	r1, r3
 800e286:	193b      	adds	r3, r7, r4
 800e288:	193a      	adds	r2, r7, r4
 800e28a:	7812      	ldrb	r2, [r2, #0]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e290:	2328      	movs	r3, #40	; 0x28
 800e292:	18fa      	adds	r2, r7, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2190      	movs	r1, #144	; 0x90
 800e298:	0018      	movs	r0, r3
 800e29a:	f002 fbb3 	bl	8010a04 <VL53L0X_RdDWord>
 800e29e:	0003      	movs	r3, r0
 800e2a0:	0019      	movs	r1, r3
 800e2a2:	193b      	adds	r3, r7, r4
 800e2a4:	193a      	adds	r2, r7, r4
 800e2a6:	7812      	ldrb	r2, [r2, #0]
 800e2a8:	430a      	orrs	r2, r1
 800e2aa:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	227c      	movs	r2, #124	; 0x7c
 800e2b0:	2194      	movs	r1, #148	; 0x94
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f002 fa80 	bl	80107b8 <VL53L0X_WrByte>
 800e2b8:	0003      	movs	r3, r0
 800e2ba:	0019      	movs	r1, r3
 800e2bc:	193b      	adds	r3, r7, r4
 800e2be:	193a      	adds	r2, r7, r4
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	0018      	movs	r0, r3
 800e2ca:	f7ff fc53 	bl	800db74 <VL53L0X_device_read_strobe>
 800e2ce:	0003      	movs	r3, r0
 800e2d0:	0019      	movs	r1, r3
 800e2d2:	193b      	adds	r3, r7, r4
 800e2d4:	193a      	adds	r2, r7, r4
 800e2d6:	7812      	ldrb	r2, [r2, #0]
 800e2d8:	430a      	orrs	r2, r1
 800e2da:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e2dc:	2324      	movs	r3, #36	; 0x24
 800e2de:	18fa      	adds	r2, r7, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2190      	movs	r1, #144	; 0x90
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	f002 fb8d 	bl	8010a04 <VL53L0X_RdDWord>
 800e2ea:	0003      	movs	r3, r0
 800e2ec:	0019      	movs	r1, r3
 800e2ee:	193b      	adds	r3, r7, r4
 800e2f0:	193a      	adds	r2, r7, r4
 800e2f2:	7812      	ldrb	r2, [r2, #0]
 800e2f4:	430a      	orrs	r2, r1
 800e2f6:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2273      	movs	r2, #115	; 0x73
 800e2fc:	2194      	movs	r1, #148	; 0x94
 800e2fe:	0018      	movs	r0, r3
 800e300:	f002 fa5a 	bl	80107b8 <VL53L0X_WrByte>
 800e304:	0003      	movs	r3, r0
 800e306:	0019      	movs	r1, r3
 800e308:	193b      	adds	r3, r7, r4
 800e30a:	193a      	adds	r2, r7, r4
 800e30c:	7812      	ldrb	r2, [r2, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	0018      	movs	r0, r3
 800e316:	f7ff fc2d 	bl	800db74 <VL53L0X_device_read_strobe>
 800e31a:	0003      	movs	r3, r0
 800e31c:	0019      	movs	r1, r3
 800e31e:	193b      	adds	r3, r7, r4
 800e320:	193a      	adds	r2, r7, r4
 800e322:	7812      	ldrb	r2, [r2, #0]
 800e324:	430a      	orrs	r2, r1
 800e326:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e328:	2530      	movs	r5, #48	; 0x30
 800e32a:	197a      	adds	r2, r7, r5
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2190      	movs	r1, #144	; 0x90
 800e330:	0018      	movs	r0, r3
 800e332:	f002 fb67 	bl	8010a04 <VL53L0X_RdDWord>
 800e336:	0003      	movs	r3, r0
 800e338:	0019      	movs	r1, r3
 800e33a:	193b      	adds	r3, r7, r4
 800e33c:	193a      	adds	r2, r7, r4
 800e33e:	7812      	ldrb	r2, [r2, #0]
 800e340:	430a      	orrs	r2, r1
 800e342:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800e344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e346:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800e348:	041b      	lsls	r3, r3, #16
 800e34a:	0c1b      	lsrs	r3, r3, #16
 800e34c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2274      	movs	r2, #116	; 0x74
 800e352:	2194      	movs	r1, #148	; 0x94
 800e354:	0018      	movs	r0, r3
 800e356:	f002 fa2f 	bl	80107b8 <VL53L0X_WrByte>
 800e35a:	0003      	movs	r3, r0
 800e35c:	0019      	movs	r1, r3
 800e35e:	193b      	adds	r3, r7, r4
 800e360:	193a      	adds	r2, r7, r4
 800e362:	7812      	ldrb	r2, [r2, #0]
 800e364:	430a      	orrs	r2, r1
 800e366:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	0018      	movs	r0, r3
 800e36c:	f7ff fc02 	bl	800db74 <VL53L0X_device_read_strobe>
 800e370:	0003      	movs	r3, r0
 800e372:	0019      	movs	r1, r3
 800e374:	193b      	adds	r3, r7, r4
 800e376:	193a      	adds	r2, r7, r4
 800e378:	7812      	ldrb	r2, [r2, #0]
 800e37a:	430a      	orrs	r2, r1
 800e37c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e37e:	197a      	adds	r2, r7, r5
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2190      	movs	r1, #144	; 0x90
 800e384:	0018      	movs	r0, r3
 800e386:	f002 fb3d 	bl	8010a04 <VL53L0X_RdDWord>
 800e38a:	0003      	movs	r3, r0
 800e38c:	0019      	movs	r1, r3
 800e38e:	193b      	adds	r3, r7, r4
 800e390:	193a      	adds	r2, r7, r4
 800e392:	7812      	ldrb	r2, [r2, #0]
 800e394:	430a      	orrs	r2, r1
 800e396:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e39c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2275      	movs	r2, #117	; 0x75
 800e3a6:	2194      	movs	r1, #148	; 0x94
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f002 fa05 	bl	80107b8 <VL53L0X_WrByte>
 800e3ae:	0003      	movs	r3, r0
 800e3b0:	0019      	movs	r1, r3
 800e3b2:	193b      	adds	r3, r7, r4
 800e3b4:	193a      	adds	r2, r7, r4
 800e3b6:	7812      	ldrb	r2, [r2, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	0018      	movs	r0, r3
 800e3c0:	f7ff fbd8 	bl	800db74 <VL53L0X_device_read_strobe>
 800e3c4:	0003      	movs	r3, r0
 800e3c6:	0019      	movs	r1, r3
 800e3c8:	193b      	adds	r3, r7, r4
 800e3ca:	193a      	adds	r2, r7, r4
 800e3cc:	7812      	ldrb	r2, [r2, #0]
 800e3ce:	430a      	orrs	r2, r1
 800e3d0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e3d2:	197a      	adds	r2, r7, r5
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2190      	movs	r1, #144	; 0x90
 800e3d8:	0018      	movs	r0, r3
 800e3da:	f002 fb13 	bl	8010a04 <VL53L0X_RdDWord>
 800e3de:	0003      	movs	r3, r0
 800e3e0:	0019      	movs	r1, r3
 800e3e2:	193b      	adds	r3, r7, r4
 800e3e4:	193a      	adds	r2, r7, r4
 800e3e6:	7812      	ldrb	r2, [r2, #0]
 800e3e8:	430a      	orrs	r2, r1
 800e3ea:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e3f0:	041b      	lsls	r3, r3, #16
 800e3f2:	0c1b      	lsrs	r3, r3, #16
 800e3f4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2276      	movs	r2, #118	; 0x76
 800e3fa:	2194      	movs	r1, #148	; 0x94
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	f002 f9db 	bl	80107b8 <VL53L0X_WrByte>
 800e402:	0003      	movs	r3, r0
 800e404:	0019      	movs	r1, r3
 800e406:	193b      	adds	r3, r7, r4
 800e408:	193a      	adds	r2, r7, r4
 800e40a:	7812      	ldrb	r2, [r2, #0]
 800e40c:	430a      	orrs	r2, r1
 800e40e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	0018      	movs	r0, r3
 800e414:	f7ff fbae 	bl	800db74 <VL53L0X_device_read_strobe>
 800e418:	0003      	movs	r3, r0
 800e41a:	0019      	movs	r1, r3
 800e41c:	193b      	adds	r3, r7, r4
 800e41e:	193a      	adds	r2, r7, r4
 800e420:	7812      	ldrb	r2, [r2, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e426:	197a      	adds	r2, r7, r5
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2190      	movs	r1, #144	; 0x90
 800e42c:	0018      	movs	r0, r3
 800e42e:	f002 fae9 	bl	8010a04 <VL53L0X_RdDWord>
 800e432:	0003      	movs	r3, r0
 800e434:	0019      	movs	r1, r3
 800e436:	193b      	adds	r3, r7, r4
 800e438:	193a      	adds	r2, r7, r4
 800e43a:	7812      	ldrb	r2, [r2, #0]
 800e43c:	430a      	orrs	r2, r1
 800e43e:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e446:	4313      	orrs	r3, r2
 800e448:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	2181      	movs	r1, #129	; 0x81
 800e450:	0018      	movs	r0, r3
 800e452:	f002 f9b1 	bl	80107b8 <VL53L0X_WrByte>
 800e456:	0003      	movs	r3, r0
 800e458:	0019      	movs	r1, r3
 800e45a:	245f      	movs	r4, #95	; 0x5f
 800e45c:	193b      	adds	r3, r7, r4
 800e45e:	193a      	adds	r2, r7, r4
 800e460:	7812      	ldrb	r2, [r2, #0]
 800e462:	430a      	orrs	r2, r1
 800e464:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2206      	movs	r2, #6
 800e46a:	21ff      	movs	r1, #255	; 0xff
 800e46c:	0018      	movs	r0, r3
 800e46e:	f002 f9a3 	bl	80107b8 <VL53L0X_WrByte>
 800e472:	0003      	movs	r3, r0
 800e474:	0019      	movs	r1, r3
 800e476:	193b      	adds	r3, r7, r4
 800e478:	193a      	adds	r2, r7, r4
 800e47a:	7812      	ldrb	r2, [r2, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e480:	2537      	movs	r5, #55	; 0x37
 800e482:	197a      	adds	r2, r7, r5
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2183      	movs	r1, #131	; 0x83
 800e488:	0018      	movs	r0, r3
 800e48a:	f002 fa44 	bl	8010916 <VL53L0X_RdByte>
 800e48e:	0003      	movs	r3, r0
 800e490:	0019      	movs	r1, r3
 800e492:	193b      	adds	r3, r7, r4
 800e494:	193a      	adds	r2, r7, r4
 800e496:	7812      	ldrb	r2, [r2, #0]
 800e498:	430a      	orrs	r2, r1
 800e49a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e49c:	197b      	adds	r3, r7, r5
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	4393      	bics	r3, r2
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2183      	movs	r1, #131	; 0x83
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	f002 f984 	bl	80107b8 <VL53L0X_WrByte>
 800e4b0:	0003      	movs	r3, r0
 800e4b2:	0019      	movs	r1, r3
 800e4b4:	193b      	adds	r3, r7, r4
 800e4b6:	193a      	adds	r2, r7, r4
 800e4b8:	7812      	ldrb	r2, [r2, #0]
 800e4ba:	430a      	orrs	r2, r1
 800e4bc:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	21ff      	movs	r1, #255	; 0xff
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f002 f977 	bl	80107b8 <VL53L0X_WrByte>
 800e4ca:	0003      	movs	r3, r0
 800e4cc:	0019      	movs	r1, r3
 800e4ce:	193b      	adds	r3, r7, r4
 800e4d0:	193a      	adds	r2, r7, r4
 800e4d2:	7812      	ldrb	r2, [r2, #0]
 800e4d4:	430a      	orrs	r2, r1
 800e4d6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	2100      	movs	r1, #0
 800e4de:	0018      	movs	r0, r3
 800e4e0:	f002 f96a 	bl	80107b8 <VL53L0X_WrByte>
 800e4e4:	0003      	movs	r3, r0
 800e4e6:	0019      	movs	r1, r3
 800e4e8:	193b      	adds	r3, r7, r4
 800e4ea:	193a      	adds	r2, r7, r4
 800e4ec:	7812      	ldrb	r2, [r2, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	21ff      	movs	r1, #255	; 0xff
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f002 f95d 	bl	80107b8 <VL53L0X_WrByte>
 800e4fe:	0003      	movs	r3, r0
 800e500:	0019      	movs	r1, r3
 800e502:	193b      	adds	r3, r7, r4
 800e504:	193a      	adds	r2, r7, r4
 800e506:	7812      	ldrb	r2, [r2, #0]
 800e508:	430a      	orrs	r2, r1
 800e50a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	2180      	movs	r1, #128	; 0x80
 800e512:	0018      	movs	r0, r3
 800e514:	f002 f950 	bl	80107b8 <VL53L0X_WrByte>
 800e518:	0003      	movs	r3, r0
 800e51a:	0019      	movs	r1, r3
 800e51c:	193b      	adds	r3, r7, r4
 800e51e:	193a      	adds	r2, r7, r4
 800e520:	7812      	ldrb	r2, [r2, #0]
 800e522:	430a      	orrs	r2, r1
 800e524:	701a      	strb	r2, [r3, #0]
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e526:	235f      	movs	r3, #95	; 0x5f
 800e528:	18fb      	adds	r3, r7, r3
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	b25b      	sxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d000      	beq.n	800e534 <VL53L0X_get_info_from_device+0x914>
 800e532:	e0a1      	b.n	800e678 <VL53L0X_get_info_from_device+0xa58>
 800e534:	213f      	movs	r1, #63	; 0x3f
 800e536:	187b      	adds	r3, r7, r1
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	2b07      	cmp	r3, #7
 800e53c:	d100      	bne.n	800e540 <VL53L0X_get_info_from_device+0x920>
 800e53e:	e09b      	b.n	800e678 <VL53L0X_get_info_from_device+0xa58>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e540:	1cfb      	adds	r3, r7, #3
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	2201      	movs	r2, #1
 800e546:	4013      	ands	r3, r2
 800e548:	d028      	beq.n	800e59c <VL53L0X_get_info_from_device+0x97c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e54a:	187b      	adds	r3, r7, r1
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2201      	movs	r2, #1
 800e550:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800e552:	d123      	bne.n	800e59c <VL53L0X_get_info_from_device+0x97c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	235e      	movs	r3, #94	; 0x5e
 800e558:	18f9      	adds	r1, r7, r3
 800e55a:	2314      	movs	r3, #20
 800e55c:	33ff      	adds	r3, #255	; 0xff
 800e55e:	7809      	ldrb	r1, [r1, #0]
 800e560:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	235d      	movs	r3, #93	; 0x5d
 800e566:	18f9      	adds	r1, r7, r3
 800e568:	238a      	movs	r3, #138	; 0x8a
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	7809      	ldrb	r1, [r1, #0]
 800e56e:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e570:	2300      	movs	r3, #0
 800e572:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e574:	e00f      	b.n	800e596 <VL53L0X_get_info_from_device+0x976>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e576:	2308      	movs	r3, #8
 800e578:	18fa      	adds	r2, r7, r3
 800e57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e57c:	18d3      	adds	r3, r2, r3
 800e57e:	7818      	ldrb	r0, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e580:	6879      	ldr	r1, [r7, #4]
 800e582:	2395      	movs	r3, #149	; 0x95
 800e584:	005b      	lsls	r3, r3, #1
 800e586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e588:	188a      	adds	r2, r1, r2
 800e58a:	18d3      	adds	r3, r2, r3
 800e58c:	1c02      	adds	r2, r0, #0
 800e58e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e592:	3301      	adds	r3, #1
 800e594:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e598:	2b05      	cmp	r3, #5
 800e59a:	ddec      	ble.n	800e576 <VL53L0X_get_info_from_device+0x956>
			}
		}

		if (((option & 2) == 2) &&
 800e59c:	1cfb      	adds	r3, r7, #3
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2202      	movs	r2, #2
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	d01b      	beq.n	800e5de <VL53L0X_get_info_from_device+0x9be>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e5a6:	233f      	movs	r3, #63	; 0x3f
 800e5a8:	18fb      	adds	r3, r7, r3
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800e5b0:	d115      	bne.n	800e5de <VL53L0X_get_info_from_device+0x9be>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e5b2:	232f      	movs	r3, #47	; 0x2f
 800e5b4:	18fb      	adds	r3, r7, r3
 800e5b6:	7819      	ldrb	r1, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	22f1      	movs	r2, #241	; 0xf1
 800e5bc:	5499      	strb	r1, [r3, r2]
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e5be:	232e      	movs	r3, #46	; 0x2e
 800e5c0:	18fb      	adds	r3, r7, r3
 800e5c2:	7819      	ldrb	r1, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	22f2      	movs	r2, #242	; 0xf2
 800e5c8:	5499      	strb	r1, [r3, r2]
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	33f3      	adds	r3, #243	; 0xf3
 800e5ce:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e5d0:	2310      	movs	r3, #16
 800e5d2:	18fa      	adds	r2, r7, r3
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	0011      	movs	r1, r2
 800e5d8:	0018      	movs	r0, r3
 800e5da:	f005 f999 	bl	8013910 <strcpy>

		}

		if (((option & 4) == 4) &&
 800e5de:	1cfb      	adds	r3, r7, #3
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2204      	movs	r2, #4
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	d038      	beq.n	800e65a <VL53L0X_get_info_from_device+0xa3a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e5e8:	233f      	movs	r3, #63	; 0x3f
 800e5ea:	18fb      	adds	r3, r7, r3
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800e5f2:	d132      	bne.n	800e65a <VL53L0X_get_info_from_device+0xa3a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	238c      	movs	r3, #140	; 0x8c
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	50d1      	str	r1, [r2, r3]
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e5fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	238e      	movs	r3, #142	; 0x8e
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	50d1      	str	r1, [r2, r3]
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e60a:	025b      	lsls	r3, r3, #9
 800e60c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	2390      	movs	r3, #144	; 0x90
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e616:	50d1      	str	r1, [r2, r3]
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e618:	215a      	movs	r1, #90	; 0x5a
 800e61a:	187b      	adds	r3, r7, r1
 800e61c:	2200      	movs	r2, #0
 800e61e:	801a      	strh	r2, [r3, #0]
			if (DistMeasFixed1104_400_mm != 0) {
 800e620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e622:	2b00      	cmp	r3, #0
 800e624:	d013      	beq.n	800e64e <VL53L0X_get_info_from_device+0xa2e>
					OffsetFixed1104_mm =
 800e626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e62e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e630:	0013      	movs	r3, r2
 800e632:	015b      	lsls	r3, r3, #5
 800e634:	1a9b      	subs	r3, r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	189b      	adds	r3, r3, r2
 800e63a:	00db      	lsls	r3, r3, #3
 800e63c:	091a      	lsrs	r2, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e63e:	187b      	adds	r3, r7, r1
 800e640:	801a      	strh	r2, [r3, #0]
					OffsetMicroMeters *= -1;
 800e642:	187b      	adds	r3, r7, r1
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	425b      	negs	r3, r3
 800e648:	b29a      	uxth	r2, r3
 800e64a:	187b      	adds	r3, r7, r1
 800e64c:	801a      	strh	r2, [r3, #0]
			}

			PALDevDataSet(Dev,
 800e64e:	235a      	movs	r3, #90	; 0x5a
 800e650:	18fb      	adds	r3, r7, r3
 800e652:	2200      	movs	r2, #0
 800e654:	5e9a      	ldrsh	r2, [r3, r2]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e65a:	233f      	movs	r3, #63	; 0x3f
 800e65c:	18fa      	adds	r2, r7, r3
 800e65e:	1cfb      	adds	r3, r7, #3
 800e660:	7812      	ldrb	r2, [r2, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4313      	orrs	r3, r2
 800e666:	b2da      	uxtb	r2, r3
 800e668:	2137      	movs	r1, #55	; 0x37
 800e66a:	187b      	adds	r3, r7, r1
 800e66c:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e66e:	187b      	adds	r3, r7, r1
 800e670:	7819      	ldrb	r1, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	22f0      	movs	r2, #240	; 0xf0
 800e676:	5499      	strb	r1, [r3, r2]
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e678:	235f      	movs	r3, #95	; 0x5f
 800e67a:	18fb      	adds	r3, r7, r3
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	b25b      	sxtb	r3, r3
}
 800e680:	0018      	movs	r0, r3
 800e682:	46bd      	mov	sp, r7
 800e684:	b019      	add	sp, #100	; 0x64
 800e686:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e688 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	000a      	movs	r2, r1
 800e692:	1cfb      	adds	r3, r7, #3
 800e694:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e696:	4a09      	ldr	r2, [pc, #36]	; (800e6bc <VL53L0X_calc_macro_period_ps+0x34>)
 800e698:	2300      	movs	r3, #0
 800e69a:	613a      	str	r2, [r7, #16]
 800e69c:	617b      	str	r3, [r7, #20]

	macro_period_vclks = 2304;
 800e69e:	2390      	movs	r3, #144	; 0x90
 800e6a0:	011b      	lsls	r3, r3, #4
 800e6a2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e6a4:	1cfb      	adds	r3, r7, #3
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	4353      	muls	r3, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	4353      	muls	r3, r2
 800e6b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
}
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	b006      	add	sp, #24
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	00000677 	.word	0x00000677

0800e6c0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e6c8:	2316      	movs	r3, #22
 800e6ca:	18fb      	adds	r3, r7, r3
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e6d4:	230e      	movs	r3, #14
 800e6d6:	18fb      	adds	r3, r7, r3
 800e6d8:	2200      	movs	r2, #0
 800e6da:	801a      	strh	r2, [r3, #0]

	if (timeout_macro_clks > 0) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d01e      	beq.n	800e720 <VL53L0X_encode_timeout+0x60>
		ls_byte = timeout_macro_clks - 1;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e6e8:	e008      	b.n	800e6fc <VL53L0X_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	085b      	lsrs	r3, r3, #1
 800e6ee:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e6f0:	210e      	movs	r1, #14
 800e6f2:	187b      	adds	r3, r7, r1
 800e6f4:	881a      	ldrh	r2, [r3, #0]
 800e6f6:	187b      	adds	r3, r7, r1
 800e6f8:	3201      	adds	r2, #1
 800e6fa:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	22ff      	movs	r2, #255	; 0xff
 800e700:	4393      	bics	r3, r2
 800e702:	d1f2      	bne.n	800e6ea <VL53L0X_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 800e704:	230e      	movs	r3, #14
 800e706:	18fb      	adds	r3, r7, r3
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	021b      	lsls	r3, r3, #8
 800e70c:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	b29b      	uxth	r3, r3
 800e712:	22ff      	movs	r2, #255	; 0xff
 800e714:	4013      	ands	r3, r2
 800e716:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 800e718:	2316      	movs	r3, #22
 800e71a:	18fb      	adds	r3, r7, r3
 800e71c:	188a      	adds	r2, r1, r2
 800e71e:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 800e720:	2316      	movs	r3, #22
 800e722:	18fb      	adds	r3, r7, r3
 800e724:	881b      	ldrh	r3, [r3, #0]

}
 800e726:	0018      	movs	r0, r3
 800e728:	46bd      	mov	sp, r7
 800e72a:	b006      	add	sp, #24
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	0002      	movs	r2, r0
 800e736:	1dbb      	adds	r3, r7, #6
 800e738:	801a      	strh	r2, [r3, #0]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e73e:	1dbb      	adds	r3, r7, #6
 800e740:	881b      	ldrh	r3, [r3, #0]
 800e742:	22ff      	movs	r2, #255	; 0xff
 800e744:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e746:	1dba      	adds	r2, r7, #6
 800e748:	8812      	ldrh	r2, [r2, #0]
 800e74a:	0a12      	lsrs	r2, r2, #8
 800e74c:	b292      	uxth	r2, r2
 800e74e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e750:	3301      	adds	r3, #1
 800e752:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e754:	68fb      	ldr	r3, [r7, #12]
}
 800e756:	0018      	movs	r0, r3
 800e758:	46bd      	mov	sp, r7
 800e75a:	b004      	add	sp, #16
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b088      	sub	sp, #32
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	1dfb      	adds	r3, r7, #7
 800e76a:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e770:	1dfb      	adds	r3, r7, #7
 800e772:	781a      	ldrb	r2, [r3, #0]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	0011      	movs	r1, r2
 800e778:	0018      	movs	r0, r3
 800e77a:	f7ff ff85 	bl	800e688 <VL53L0X_calc_macro_period_ps>
 800e77e:	0003      	movs	r3, r0
 800e780:	61bb      	str	r3, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	33f5      	adds	r3, #245	; 0xf5
 800e786:	33ff      	adds	r3, #255	; 0xff
 800e788:	22fa      	movs	r2, #250	; 0xfa
 800e78a:	0091      	lsls	r1, r2, #2
 800e78c:	0018      	movs	r0, r3
 800e78e:	f7f1 fcd7 	bl	8000140 <__udivsi3>
 800e792:	0003      	movs	r3, r0
 800e794:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	0013      	movs	r3, r2
 800e79a:	015b      	lsls	r3, r3, #5
 800e79c:	1a9b      	subs	r3, r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	189b      	adds	r3, r3, r2
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	001a      	movs	r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	085b      	lsrs	r3, r3, #1
 800e7aa:	18d3      	adds	r3, r2, r3
	timeout_period_mclks =
 800e7ac:	6979      	ldr	r1, [r7, #20]
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f7f1 fcc6 	bl	8000140 <__udivsi3>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
}
 800e7ba:	0018      	movs	r0, r3
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	b008      	add	sp, #32
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b086      	sub	sp, #24
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	0008      	movs	r0, r1
 800e7cc:	0011      	movs	r1, r2
 800e7ce:	1cbb      	adds	r3, r7, #2
 800e7d0:	1c02      	adds	r2, r0, #0
 800e7d2:	801a      	strh	r2, [r3, #0]
 800e7d4:	1c7b      	adds	r3, r7, #1
 800e7d6:	1c0a      	adds	r2, r1, #0
 800e7d8:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e7de:	1c7b      	adds	r3, r7, #1
 800e7e0:	781a      	ldrb	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	0011      	movs	r1, r2
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	f7ff ff4e 	bl	800e688 <VL53L0X_calc_macro_period_ps>
 800e7ec:	0003      	movs	r3, r0
 800e7ee:	613b      	str	r3, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	33f5      	adds	r3, #245	; 0xf5
 800e7f4:	33ff      	adds	r3, #255	; 0xff
 800e7f6:	22fa      	movs	r2, #250	; 0xfa
 800e7f8:	0091      	lsls	r1, r2, #2
 800e7fa:	0018      	movs	r0, r3
 800e7fc:	f7f1 fca0 	bl	8000140 <__udivsi3>
 800e800:	0003      	movs	r3, r0
 800e802:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e804:	1cbb      	adds	r3, r7, #2
 800e806:	881b      	ldrh	r3, [r3, #0]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4353      	muls	r3, r2
 800e80c:	33f5      	adds	r3, #245	; 0xf5
 800e80e:	33ff      	adds	r3, #255	; 0xff
	actual_timeout_period_us =
 800e810:	22fa      	movs	r2, #250	; 0xfa
 800e812:	0091      	lsls	r1, r2, #2
 800e814:	0018      	movs	r0, r3
 800e816:	f7f1 fc93 	bl	8000140 <__udivsi3>
 800e81a:	0003      	movs	r3, r0
 800e81c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	0018      	movs	r0, r3
 800e822:	46bd      	mov	sp, r7
 800e824:	b006      	add	sp, #24
 800e826:	bd80      	pop	{r7, pc}

0800e828 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82a:	b08d      	sub	sp, #52	; 0x34
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	607a      	str	r2, [r7, #4]
 800e832:	200b      	movs	r0, #11
 800e834:	183b      	adds	r3, r7, r0
 800e836:	1c0a      	adds	r2, r1, #0
 800e838:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e83a:	232f      	movs	r3, #47	; 0x2f
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	2200      	movs	r2, #0
 800e840:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e842:	2320      	movs	r3, #32
 800e844:	18fb      	adds	r3, r7, r3
 800e846:	2200      	movs	r2, #0
 800e848:	701a      	strb	r2, [r3, #0]
	uint32_t TimeoutMicroSeconds = 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e84e:	231e      	movs	r3, #30
 800e850:	18fb      	adds	r3, r7, r3
 800e852:	2200      	movs	r2, #0
 800e854:	801a      	strh	r2, [r3, #0]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e856:	2324      	movs	r3, #36	; 0x24
 800e858:	18fb      	adds	r3, r7, r3
 800e85a:	2200      	movs	r2, #0
 800e85c:	801a      	strh	r2, [r3, #0]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e85e:	183b      	adds	r3, r7, r0
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d007      	beq.n	800e876 <get_sequence_step_timeout+0x4e>
 800e866:	183b      	adds	r3, r7, r0
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d003      	beq.n	800e876 <get_sequence_step_timeout+0x4e>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e86e:	183b      	adds	r3, r7, r0
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d130      	bne.n	800e8d8 <get_sequence_step_timeout+0xb0>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e876:	252f      	movs	r5, #47	; 0x2f
 800e878:	197c      	adds	r4, r7, r5
 800e87a:	2321      	movs	r3, #33	; 0x21
 800e87c:	18fa      	adds	r2, r7, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2100      	movs	r1, #0
 800e882:	0018      	movs	r0, r3
 800e884:	f7fc fde0 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800e888:	0003      	movs	r3, r0
 800e88a:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e88c:	197b      	adds	r3, r7, r5
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	b25b      	sxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <get_sequence_step_timeout+0x82>
			Status = VL53L0X_RdByte(Dev,
 800e896:	197c      	adds	r4, r7, r5
 800e898:	2320      	movs	r3, #32
 800e89a:	18fa      	adds	r2, r7, r3
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2146      	movs	r1, #70	; 0x46
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f002 f838 	bl	8010916 <VL53L0X_RdByte>
 800e8a6:	0003      	movs	r3, r0
 800e8a8:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e8aa:	2320      	movs	r3, #32
 800e8ac:	18fb      	adds	r3, r7, r3
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	0018      	movs	r0, r3
 800e8b4:	f7ff ff3b 	bl	800e72e <VL53L0X_decode_timeout>
 800e8b8:	0002      	movs	r2, r0
 800e8ba:	2122      	movs	r1, #34	; 0x22
 800e8bc:	187b      	adds	r3, r7, r1
 800e8be:	801a      	strh	r2, [r3, #0]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e8c0:	2321      	movs	r3, #33	; 0x21
 800e8c2:	18fb      	adds	r3, r7, r3
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	187b      	adds	r3, r7, r1
 800e8c8:	8819      	ldrh	r1, [r3, #0]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	f7ff ff78 	bl	800e7c2 <VL53L0X_calc_timeout_us>
 800e8d2:	0003      	movs	r3, r0
 800e8d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8d6:	e0b6      	b.n	800ea46 <get_sequence_step_timeout+0x21e>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e8d8:	230b      	movs	r3, #11
 800e8da:	18fb      	adds	r3, r7, r3
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b03      	cmp	r3, #3
 800e8e0:	d13e      	bne.n	800e960 <get_sequence_step_timeout+0x138>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e8e2:	252f      	movs	r5, #47	; 0x2f
 800e8e4:	197c      	adds	r4, r7, r5
 800e8e6:	2621      	movs	r6, #33	; 0x21
 800e8e8:	19ba      	adds	r2, r7, r6
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	0018      	movs	r0, r3
 800e8f0:	f7fc fdaa 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800e8f4:	0003      	movs	r3, r0
 800e8f6:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e8f8:	197b      	adds	r3, r7, r5
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	b25b      	sxtb	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d000      	beq.n	800e904 <get_sequence_step_timeout+0xdc>
 800e902:	e0a0      	b.n	800ea46 <get_sequence_step_timeout+0x21e>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e904:	197c      	adds	r4, r7, r5
 800e906:	19ba      	adds	r2, r7, r6
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2100      	movs	r1, #0
 800e90c:	0018      	movs	r0, r3
 800e90e:	f7fc fd9b 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800e912:	0003      	movs	r3, r0
 800e914:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e916:	197b      	adds	r3, r7, r5
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	b25b      	sxtb	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d109      	bne.n	800e934 <get_sequence_step_timeout+0x10c>
				Status = VL53L0X_RdWord(Dev,
 800e920:	197c      	adds	r4, r7, r5
 800e922:	231e      	movs	r3, #30
 800e924:	18fa      	adds	r2, r7, r3
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2151      	movs	r1, #81	; 0x51
 800e92a:	0018      	movs	r0, r3
 800e92c:	f002 f828 	bl	8010980 <VL53L0X_RdWord>
 800e930:	0003      	movs	r3, r0
 800e932:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e934:	231e      	movs	r3, #30
 800e936:	18fb      	adds	r3, r7, r3
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	0018      	movs	r0, r3
 800e93c:	f7ff fef7 	bl	800e72e <VL53L0X_decode_timeout>
 800e940:	0002      	movs	r2, r0
 800e942:	2126      	movs	r1, #38	; 0x26
 800e944:	187b      	adds	r3, r7, r1
 800e946:	801a      	strh	r2, [r3, #0]
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e948:	2321      	movs	r3, #33	; 0x21
 800e94a:	18fb      	adds	r3, r7, r3
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	187b      	adds	r3, r7, r1
 800e950:	8819      	ldrh	r1, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	0018      	movs	r0, r3
 800e956:	f7ff ff34 	bl	800e7c2 <VL53L0X_calc_timeout_us>
 800e95a:	0003      	movs	r3, r0
 800e95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e95e:	e072      	b.n	800ea46 <get_sequence_step_timeout+0x21e>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e960:	230b      	movs	r3, #11
 800e962:	18fb      	adds	r3, r7, r3
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b04      	cmp	r3, #4
 800e968:	d16d      	bne.n	800ea46 <get_sequence_step_timeout+0x21e>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e96a:	2414      	movs	r4, #20
 800e96c:	193a      	adds	r2, r7, r4
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	0011      	movs	r1, r2
 800e972:	0018      	movs	r0, r3
 800e974:	f7fc fec8 	bl	800b708 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e978:	2626      	movs	r6, #38	; 0x26
 800e97a:	19bb      	adds	r3, r7, r6
 800e97c:	2200      	movs	r2, #0
 800e97e:	801a      	strh	r2, [r3, #0]

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e980:	193b      	adds	r3, r7, r4
 800e982:	78db      	ldrb	r3, [r3, #3]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d021      	beq.n	800e9cc <get_sequence_step_timeout+0x1a4>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e988:	252f      	movs	r5, #47	; 0x2f
 800e98a:	197c      	adds	r4, r7, r5
 800e98c:	2321      	movs	r3, #33	; 0x21
 800e98e:	18fa      	adds	r2, r7, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2100      	movs	r1, #0
 800e994:	0018      	movs	r0, r3
 800e996:	f7fc fd57 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800e99a:	0003      	movs	r3, r0
 800e99c:	7023      	strb	r3, [r4, #0]
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e99e:	197b      	adds	r3, r7, r5
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d111      	bne.n	800e9cc <get_sequence_step_timeout+0x1a4>
				Status = VL53L0X_RdWord(Dev,
 800e9a8:	197c      	adds	r4, r7, r5
 800e9aa:	251e      	movs	r5, #30
 800e9ac:	197a      	adds	r2, r7, r5
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2151      	movs	r1, #81	; 0x51
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f001 ffe4 	bl	8010980 <VL53L0X_RdWord>
 800e9b8:	0003      	movs	r3, r0
 800e9ba:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e9bc:	197b      	adds	r3, r7, r5
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	0018      	movs	r0, r3
 800e9c2:	f7ff feb4 	bl	800e72e <VL53L0X_decode_timeout>
 800e9c6:	0002      	movs	r2, r0
 800e9c8:	19bb      	adds	r3, r7, r6
 800e9ca:	801a      	strh	r2, [r3, #0]
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e9cc:	222f      	movs	r2, #47	; 0x2f
 800e9ce:	18bb      	adds	r3, r7, r2
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	b25b      	sxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d109      	bne.n	800e9ec <get_sequence_step_timeout+0x1c4>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e9d8:	18bc      	adds	r4, r7, r2
 800e9da:	2321      	movs	r3, #33	; 0x21
 800e9dc:	18fa      	adds	r2, r7, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	0018      	movs	r0, r3
 800e9e4:	f7fc fd30 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800e9e8:	0003      	movs	r3, r0
 800e9ea:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e9ec:	222f      	movs	r2, #47	; 0x2f
 800e9ee:	18bb      	adds	r3, r7, r2
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	b25b      	sxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d112      	bne.n	800ea1e <get_sequence_step_timeout+0x1f6>
			Status = VL53L0X_RdWord(Dev,
 800e9f8:	18bc      	adds	r4, r7, r2
 800e9fa:	251c      	movs	r5, #28
 800e9fc:	197a      	adds	r2, r7, r5
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2171      	movs	r1, #113	; 0x71
 800ea02:	0018      	movs	r0, r3
 800ea04:	f001 ffbc 	bl	8010980 <VL53L0X_RdWord>
 800ea08:	0003      	movs	r3, r0
 800ea0a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ea0c:	197b      	adds	r3, r7, r5
 800ea0e:	881b      	ldrh	r3, [r3, #0]
 800ea10:	0018      	movs	r0, r3
 800ea12:	f7ff fe8c 	bl	800e72e <VL53L0X_decode_timeout>
 800ea16:	0002      	movs	r2, r0
 800ea18:	2324      	movs	r3, #36	; 0x24
 800ea1a:	18fb      	adds	r3, r7, r3
 800ea1c:	801a      	strh	r2, [r3, #0]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ea1e:	2024      	movs	r0, #36	; 0x24
 800ea20:	183b      	adds	r3, r7, r0
 800ea22:	1839      	adds	r1, r7, r0
 800ea24:	2226      	movs	r2, #38	; 0x26
 800ea26:	18ba      	adds	r2, r7, r2
 800ea28:	8809      	ldrh	r1, [r1, #0]
 800ea2a:	8812      	ldrh	r2, [r2, #0]
 800ea2c:	1a8a      	subs	r2, r1, r2
 800ea2e:	801a      	strh	r2, [r3, #0]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ea30:	2321      	movs	r3, #33	; 0x21
 800ea32:	18fb      	adds	r3, r7, r3
 800ea34:	781a      	ldrb	r2, [r3, #0]
 800ea36:	183b      	adds	r3, r7, r0
 800ea38:	8819      	ldrh	r1, [r3, #0]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f7ff fec0 	bl	800e7c2 <VL53L0X_calc_timeout_us>
 800ea42:	0003      	movs	r3, r0
 800ea44:	62bb      	str	r3, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea4a:	601a      	str	r2, [r3, #0]

	return Status;
 800ea4c:	232f      	movs	r3, #47	; 0x2f
 800ea4e:	18fb      	adds	r3, r7, r3
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	b25b      	sxtb	r3, r3
}
 800ea54:	0018      	movs	r0, r3
 800ea56:	46bd      	mov	sp, r7
 800ea58:	b00d      	add	sp, #52	; 0x34
 800ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea5c <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ea5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5e:	b08b      	sub	sp, #44	; 0x2c
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	607a      	str	r2, [r7, #4]
 800ea66:	200b      	movs	r0, #11
 800ea68:	183b      	adds	r3, r7, r0
 800ea6a:	1c0a      	adds	r2, r1, #0
 800ea6c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea6e:	2327      	movs	r3, #39	; 0x27
 800ea70:	18fb      	adds	r3, r7, r3
 800ea72:	2200      	movs	r2, #0
 800ea74:	701a      	strb	r2, [r3, #0]
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ea76:	183b      	adds	r3, r7, r0
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d007      	beq.n	800ea8e <set_sequence_step_timeout+0x32>
 800ea7e:	183b      	adds	r3, r7, r0
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d003      	beq.n	800ea8e <set_sequence_step_timeout+0x32>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ea86:	183b      	adds	r3, r7, r0
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d147      	bne.n	800eb1e <set_sequence_step_timeout+0xc2>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ea8e:	2527      	movs	r5, #39	; 0x27
 800ea90:	197c      	adds	r4, r7, r5
 800ea92:	261b      	movs	r6, #27
 800ea94:	19ba      	adds	r2, r7, r6
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2100      	movs	r1, #0
 800ea9a:	0018      	movs	r0, r3
 800ea9c:	f7fc fcd4 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800eaa0:	0003      	movs	r3, r0
 800eaa2:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800eaa4:	197b      	adds	r3, r7, r5
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	b25b      	sxtb	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d124      	bne.n	800eaf8 <set_sequence_step_timeout+0x9c>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800eaae:	19bb      	adds	r3, r7, r6
 800eab0:	781a      	ldrb	r2, [r3, #0]
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	0018      	movs	r0, r3
 800eab8:	f7ff fe51 	bl	800e75e <VL53L0X_calc_timeout_mclks>
 800eabc:	0002      	movs	r2, r0
 800eabe:	211c      	movs	r1, #28
 800eac0:	187b      	adds	r3, r7, r1
 800eac2:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800eac4:	187b      	adds	r3, r7, r1
 800eac6:	881a      	ldrh	r2, [r3, #0]
 800eac8:	2380      	movs	r3, #128	; 0x80
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	429a      	cmp	r2, r3
 800eace:	d904      	bls.n	800eada <set_sequence_step_timeout+0x7e>
				MsrcEncodedTimeOut = 255;
 800ead0:	2326      	movs	r3, #38	; 0x26
 800ead2:	18fb      	adds	r3, r7, r3
 800ead4:	22ff      	movs	r2, #255	; 0xff
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	e007      	b.n	800eaea <set_sequence_step_timeout+0x8e>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800eada:	231c      	movs	r3, #28
 800eadc:	18fb      	adds	r3, r7, r3
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	b2da      	uxtb	r2, r3
				MsrcEncodedTimeOut =
 800eae2:	2326      	movs	r3, #38	; 0x26
 800eae4:	18fb      	adds	r3, r7, r3
 800eae6:	3a01      	subs	r2, #1
 800eae8:	701a      	strb	r2, [r3, #0]

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eaea:	2326      	movs	r3, #38	; 0x26
 800eaec:	18fb      	adds	r3, r7, r3
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	b299      	uxth	r1, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	22d8      	movs	r2, #216	; 0xd8
 800eaf6:	5299      	strh	r1, [r3, r2]
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800eaf8:	2227      	movs	r2, #39	; 0x27
 800eafa:	18bb      	adds	r3, r7, r2
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	b25b      	sxtb	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d000      	beq.n	800eb06 <set_sequence_step_timeout+0xaa>
 800eb04:	e0da      	b.n	800ecbc <set_sequence_step_timeout+0x260>
			Status = VL53L0X_WrByte(Dev,
 800eb06:	18bc      	adds	r4, r7, r2
 800eb08:	2326      	movs	r3, #38	; 0x26
 800eb0a:	18fb      	adds	r3, r7, r3
 800eb0c:	781a      	ldrb	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2146      	movs	r1, #70	; 0x46
 800eb12:	0018      	movs	r0, r3
 800eb14:	f001 fe50 	bl	80107b8 <VL53L0X_WrByte>
 800eb18:	0003      	movs	r3, r0
 800eb1a:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800eb1c:	e0ce      	b.n	800ecbc <set_sequence_step_timeout+0x260>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800eb1e:	230b      	movs	r3, #11
 800eb20:	18fb      	adds	r3, r7, r3
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b03      	cmp	r3, #3
 800eb26:	d146      	bne.n	800ebb6 <set_sequence_step_timeout+0x15a>

			if (Status == VL53L0X_ERROR_NONE) {
 800eb28:	2227      	movs	r2, #39	; 0x27
 800eb2a:	18bb      	adds	r3, r7, r2
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	b25b      	sxtb	r3, r3
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d123      	bne.n	800eb7c <set_sequence_step_timeout+0x120>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800eb34:	18bc      	adds	r4, r7, r2
 800eb36:	251b      	movs	r5, #27
 800eb38:	197a      	adds	r2, r7, r5
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	0018      	movs	r0, r3
 800eb40:	f7fc fc82 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800eb44:	0003      	movs	r3, r0
 800eb46:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800eb48:	197b      	adds	r3, r7, r5
 800eb4a:	781a      	ldrb	r2, [r3, #0]
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	0018      	movs	r0, r3
 800eb52:	f7ff fe04 	bl	800e75e <VL53L0X_calc_timeout_mclks>
 800eb56:	0002      	movs	r2, r0
				PreRangeTimeOutMClks =
 800eb58:	2124      	movs	r1, #36	; 0x24
 800eb5a:	187b      	adds	r3, r7, r1
 800eb5c:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800eb5e:	187b      	adds	r3, r7, r1
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	0018      	movs	r0, r3
 800eb64:	f7ff fdac 	bl	800e6c0 <VL53L0X_encode_timeout>
 800eb68:	0003      	movs	r3, r0
 800eb6a:	001a      	movs	r2, r3
 800eb6c:	2118      	movs	r1, #24
 800eb6e:	187b      	adds	r3, r7, r1
 800eb70:	801a      	strh	r2, [r3, #0]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eb72:	187b      	adds	r3, r7, r1
 800eb74:	8819      	ldrh	r1, [r3, #0]
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	22d8      	movs	r2, #216	; 0xd8
 800eb7a:	5299      	strh	r1, [r3, r2]
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800eb7c:	2127      	movs	r1, #39	; 0x27
 800eb7e:	187b      	adds	r3, r7, r1
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	b25b      	sxtb	r3, r3
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10a      	bne.n	800eb9e <set_sequence_step_timeout+0x142>
				Status = VL53L0X_WrWord(Dev,
 800eb88:	2318      	movs	r3, #24
 800eb8a:	18fb      	adds	r3, r7, r3
 800eb8c:	881a      	ldrh	r2, [r3, #0]
 800eb8e:	187c      	adds	r4, r7, r1
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2151      	movs	r1, #81	; 0x51
 800eb94:	0018      	movs	r0, r3
 800eb96:	f001 fe3f 	bl	8010818 <VL53L0X_WrWord>
 800eb9a:	0003      	movs	r3, r0
 800eb9c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800eb9e:	2327      	movs	r3, #39	; 0x27
 800eba0:	18fb      	adds	r3, r7, r3
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	b25b      	sxtb	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d000      	beq.n	800ebac <set_sequence_step_timeout+0x150>
 800ebaa:	e087      	b.n	800ecbc <set_sequence_step_timeout+0x260>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	21e4      	movs	r1, #228	; 0xe4
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	505a      	str	r2, [r3, r1]
 800ebb4:	e082      	b.n	800ecbc <set_sequence_step_timeout+0x260>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ebb6:	230b      	movs	r3, #11
 800ebb8:	18fb      	adds	r3, r7, r3
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b04      	cmp	r3, #4
 800ebbe:	d000      	beq.n	800ebc2 <set_sequence_step_timeout+0x166>
 800ebc0:	e078      	b.n	800ecb4 <set_sequence_step_timeout+0x258>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ebc2:	2410      	movs	r4, #16
 800ebc4:	193a      	adds	r2, r7, r4
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	0011      	movs	r1, r2
 800ebca:	0018      	movs	r0, r3
 800ebcc:	f7fc fd9c 	bl	800b708 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ebd0:	2624      	movs	r6, #36	; 0x24
 800ebd2:	19bb      	adds	r3, r7, r6
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	801a      	strh	r2, [r3, #0]
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ebd8:	193b      	adds	r3, r7, r4
 800ebda:	78db      	ldrb	r3, [r3, #3]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d021      	beq.n	800ec24 <set_sequence_step_timeout+0x1c8>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ebe0:	2527      	movs	r5, #39	; 0x27
 800ebe2:	197c      	adds	r4, r7, r5
 800ebe4:	231b      	movs	r3, #27
 800ebe6:	18fa      	adds	r2, r7, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2100      	movs	r1, #0
 800ebec:	0018      	movs	r0, r3
 800ebee:	f7fc fc2b 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800ebf2:	0003      	movs	r3, r0
 800ebf4:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ebf6:	197b      	adds	r3, r7, r5
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	b25b      	sxtb	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d111      	bne.n	800ec24 <set_sequence_step_timeout+0x1c8>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ec00:	197c      	adds	r4, r7, r5
 800ec02:	2518      	movs	r5, #24
 800ec04:	197a      	adds	r2, r7, r5
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2151      	movs	r1, #81	; 0x51
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f001 feb8 	bl	8010980 <VL53L0X_RdWord>
 800ec10:	0003      	movs	r3, r0
 800ec12:	7023      	strb	r3, [r4, #0]
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ec14:	197b      	adds	r3, r7, r5
 800ec16:	881b      	ldrh	r3, [r3, #0]
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f7ff fd88 	bl	800e72e <VL53L0X_decode_timeout>
 800ec1e:	0002      	movs	r2, r0
					PreRangeTimeOutMClks =
 800ec20:	19bb      	adds	r3, r7, r6
 800ec22:	801a      	strh	r2, [r3, #0]
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ec24:	2227      	movs	r2, #39	; 0x27
 800ec26:	18bb      	adds	r3, r7, r2
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	b25b      	sxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d109      	bne.n	800ec44 <set_sequence_step_timeout+0x1e8>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ec30:	18bc      	adds	r4, r7, r2
 800ec32:	231b      	movs	r3, #27
 800ec34:	18fa      	adds	r2, r7, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2101      	movs	r1, #1
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f7fc fc04 	bl	800b448 <VL53L0X_GetVcselPulsePeriod>
 800ec40:	0003      	movs	r3, r0
 800ec42:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ec44:	2527      	movs	r5, #39	; 0x27
 800ec46:	197b      	adds	r3, r7, r5
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	b25b      	sxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d135      	bne.n	800ecbc <set_sequence_step_timeout+0x260>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ec50:	231b      	movs	r3, #27
 800ec52:	18fb      	adds	r3, r7, r3
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	0018      	movs	r0, r3
 800ec5c:	f7ff fd7f 	bl	800e75e <VL53L0X_calc_timeout_mclks>
 800ec60:	0003      	movs	r3, r0
 800ec62:	623b      	str	r3, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ec64:	2324      	movs	r3, #36	; 0x24
 800ec66:	18fb      	adds	r3, r7, r3
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	6a3a      	ldr	r2, [r7, #32]
 800ec6c:	18d3      	adds	r3, r2, r3
 800ec6e:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ec70:	261e      	movs	r6, #30
 800ec72:	19bc      	adds	r4, r7, r6
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	0018      	movs	r0, r3
 800ec78:	f7ff fd22 	bl	800e6c0 <VL53L0X_encode_timeout>
 800ec7c:	0003      	movs	r3, r0
 800ec7e:	8023      	strh	r3, [r4, #0]

				if (Status == VL53L0X_ERROR_NONE) {
 800ec80:	197b      	adds	r3, r7, r5
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b25b      	sxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d109      	bne.n	800ec9e <set_sequence_step_timeout+0x242>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ec8a:	197c      	adds	r4, r7, r5
 800ec8c:	19bb      	adds	r3, r7, r6
 800ec8e:	881a      	ldrh	r2, [r3, #0]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2171      	movs	r1, #113	; 0x71
 800ec94:	0018      	movs	r0, r3
 800ec96:	f001 fdbf 	bl	8010818 <VL53L0X_WrWord>
 800ec9a:	0003      	movs	r3, r0
 800ec9c:	7023      	strb	r3, [r4, #0]
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ec9e:	2327      	movs	r3, #39	; 0x27
 800eca0:	18fb      	adds	r3, r7, r3
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	b25b      	sxtb	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d108      	bne.n	800ecbc <set_sequence_step_timeout+0x260>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	21dc      	movs	r1, #220	; 0xdc
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	505a      	str	r2, [r3, r1]
 800ecb2:	e003      	b.n	800ecbc <set_sequence_step_timeout+0x260>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ecb4:	2327      	movs	r3, #39	; 0x27
 800ecb6:	18fb      	adds	r3, r7, r3
 800ecb8:	22fc      	movs	r2, #252	; 0xfc
 800ecba:	701a      	strb	r2, [r3, #0]

	}
	return Status;
 800ecbc:	2327      	movs	r3, #39	; 0x27
 800ecbe:	18fb      	adds	r3, r7, r3
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	b25b      	sxtb	r3, r3
}
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	b00b      	add	sp, #44	; 0x2c
 800ecca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eccc <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800eccc:	b5b0      	push	{r4, r5, r7, lr}
 800ecce:	b08a      	sub	sp, #40	; 0x28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	0008      	movs	r0, r1
 800ecd6:	0011      	movs	r1, r2
 800ecd8:	1cfb      	adds	r3, r7, #3
 800ecda:	1c02      	adds	r2, r0, #0
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	1cbb      	adds	r3, r7, #2
 800ece0:	1c0a      	adds	r2, r1, #0
 800ece2:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ece4:	2127      	movs	r1, #39	; 0x27
 800ece6:	187b      	adds	r3, r7, r1
 800ece8:	2200      	movs	r2, #0
 800ecea:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ecec:	2326      	movs	r3, #38	; 0x26
 800ecee:	18fb      	adds	r3, r7, r3
 800ecf0:	220c      	movs	r2, #12
 800ecf2:	701a      	strb	r2, [r3, #0]
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ecf4:	2325      	movs	r3, #37	; 0x25
 800ecf6:	18fb      	adds	r3, r7, r3
 800ecf8:	2212      	movs	r2, #18
 800ecfa:	701a      	strb	r2, [r3, #0]
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ecfc:	2324      	movs	r3, #36	; 0x24
 800ecfe:	18fb      	adds	r3, r7, r3
 800ed00:	2208      	movs	r2, #8
 800ed02:	701a      	strb	r2, [r3, #0]
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800ed04:	2323      	movs	r3, #35	; 0x23
 800ed06:	18fb      	adds	r3, r7, r3
 800ed08:	220e      	movs	r2, #14
 800ed0a:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800ed0c:	230f      	movs	r3, #15
 800ed0e:	18fb      	adds	r3, r7, r3
 800ed10:	2200      	movs	r2, #0
 800ed12:	701a      	strb	r2, [r3, #0]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800ed14:	1cbb      	adds	r3, r7, #2
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	4013      	ands	r3, r2
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d003      	beq.n	800ed2a <VL53L0X_set_vcsel_pulse_period+0x5e>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed22:	187b      	adds	r3, r7, r1
 800ed24:	22fc      	movs	r2, #252	; 0xfc
 800ed26:	701a      	strb	r2, [r3, #0]
 800ed28:	e02c      	b.n	800ed84 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800ed2a:	1cfb      	adds	r3, r7, #3
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d112      	bne.n	800ed58 <VL53L0X_set_vcsel_pulse_period+0x8c>
 800ed32:	1cba      	adds	r2, r7, #2
 800ed34:	2326      	movs	r3, #38	; 0x26
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	7812      	ldrb	r2, [r2, #0]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d306      	bcc.n	800ed4e <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ed40:	1cba      	adds	r2, r7, #2
 800ed42:	2325      	movs	r3, #37	; 0x25
 800ed44:	18fb      	adds	r3, r7, r3
 800ed46:	7812      	ldrb	r2, [r2, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d904      	bls.n	800ed58 <VL53L0X_set_vcsel_pulse_period+0x8c>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed4e:	2327      	movs	r3, #39	; 0x27
 800ed50:	18fb      	adds	r3, r7, r3
 800ed52:	22fc      	movs	r2, #252	; 0xfc
 800ed54:	701a      	strb	r2, [r3, #0]
 800ed56:	e015      	b.n	800ed84 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800ed58:	1cfb      	adds	r3, r7, #3
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d111      	bne.n	800ed84 <VL53L0X_set_vcsel_pulse_period+0xb8>
 800ed60:	1cba      	adds	r2, r7, #2
 800ed62:	2324      	movs	r3, #36	; 0x24
 800ed64:	18fb      	adds	r3, r7, r3
 800ed66:	7812      	ldrb	r2, [r2, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d306      	bcc.n	800ed7c <VL53L0X_set_vcsel_pulse_period+0xb0>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800ed6e:	1cba      	adds	r2, r7, #2
 800ed70:	2323      	movs	r3, #35	; 0x23
 800ed72:	18fb      	adds	r3, r7, r3
 800ed74:	7812      	ldrb	r2, [r2, #0]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d903      	bls.n	800ed84 <VL53L0X_set_vcsel_pulse_period+0xb8>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed7c:	2327      	movs	r3, #39	; 0x27
 800ed7e:	18fb      	adds	r3, r7, r3
 800ed80:	22fc      	movs	r2, #252	; 0xfc
 800ed82:	701a      	strb	r2, [r3, #0]
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800ed84:	2227      	movs	r2, #39	; 0x27
 800ed86:	18bb      	adds	r3, r7, r2
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	b25b      	sxtb	r3, r3
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d003      	beq.n	800ed98 <VL53L0X_set_vcsel_pulse_period+0xcc>
		return Status;
 800ed90:	18bb      	adds	r3, r7, r2
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	b25b      	sxtb	r3, r3
 800ed96:	e292      	b.n	800f2be <VL53L0X_set_vcsel_pulse_period+0x5f2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800ed98:	1cfb      	adds	r3, r7, #3
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d160      	bne.n	800ee62 <VL53L0X_set_vcsel_pulse_period+0x196>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800eda0:	1cbb      	adds	r3, r7, #2
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b0c      	cmp	r3, #12
 800eda6:	d113      	bne.n	800edd0 <VL53L0X_set_vcsel_pulse_period+0x104>

			Status = VL53L0X_WrByte(Dev,
 800eda8:	2527      	movs	r5, #39	; 0x27
 800edaa:	197c      	adds	r4, r7, r5
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2218      	movs	r2, #24
 800edb0:	2157      	movs	r1, #87	; 0x57
 800edb2:	0018      	movs	r0, r3
 800edb4:	f001 fd00 	bl	80107b8 <VL53L0X_WrByte>
 800edb8:	0003      	movs	r3, r0
 800edba:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800edbc:	197c      	adds	r4, r7, r5
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2208      	movs	r2, #8
 800edc2:	2156      	movs	r1, #86	; 0x56
 800edc4:	0018      	movs	r0, r3
 800edc6:	f001 fcf7 	bl	80107b8 <VL53L0X_WrByte>
 800edca:	0003      	movs	r3, r0
 800edcc:	7023      	strb	r3, [r4, #0]
 800edce:	e1b4      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800edd0:	1cbb      	adds	r3, r7, #2
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	2b0e      	cmp	r3, #14
 800edd6:	d113      	bne.n	800ee00 <VL53L0X_set_vcsel_pulse_period+0x134>

			Status = VL53L0X_WrByte(Dev,
 800edd8:	2527      	movs	r5, #39	; 0x27
 800edda:	197c      	adds	r4, r7, r5
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2230      	movs	r2, #48	; 0x30
 800ede0:	2157      	movs	r1, #87	; 0x57
 800ede2:	0018      	movs	r0, r3
 800ede4:	f001 fce8 	bl	80107b8 <VL53L0X_WrByte>
 800ede8:	0003      	movs	r3, r0
 800edea:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800edec:	197c      	adds	r4, r7, r5
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2208      	movs	r2, #8
 800edf2:	2156      	movs	r1, #86	; 0x56
 800edf4:	0018      	movs	r0, r3
 800edf6:	f001 fcdf 	bl	80107b8 <VL53L0X_WrByte>
 800edfa:	0003      	movs	r3, r0
 800edfc:	7023      	strb	r3, [r4, #0]
 800edfe:	e19c      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800ee00:	1cbb      	adds	r3, r7, #2
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	2b10      	cmp	r3, #16
 800ee06:	d113      	bne.n	800ee30 <VL53L0X_set_vcsel_pulse_period+0x164>

			Status = VL53L0X_WrByte(Dev,
 800ee08:	2527      	movs	r5, #39	; 0x27
 800ee0a:	197c      	adds	r4, r7, r5
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2240      	movs	r2, #64	; 0x40
 800ee10:	2157      	movs	r1, #87	; 0x57
 800ee12:	0018      	movs	r0, r3
 800ee14:	f001 fcd0 	bl	80107b8 <VL53L0X_WrByte>
 800ee18:	0003      	movs	r3, r0
 800ee1a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800ee1c:	197c      	adds	r4, r7, r5
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2208      	movs	r2, #8
 800ee22:	2156      	movs	r1, #86	; 0x56
 800ee24:	0018      	movs	r0, r3
 800ee26:	f001 fcc7 	bl	80107b8 <VL53L0X_WrByte>
 800ee2a:	0003      	movs	r3, r0
 800ee2c:	7023      	strb	r3, [r4, #0]
 800ee2e:	e184      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800ee30:	1cbb      	adds	r3, r7, #2
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	2b12      	cmp	r3, #18
 800ee36:	d000      	beq.n	800ee3a <VL53L0X_set_vcsel_pulse_period+0x16e>
 800ee38:	e17f      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800ee3a:	2527      	movs	r5, #39	; 0x27
 800ee3c:	197c      	adds	r4, r7, r5
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2250      	movs	r2, #80	; 0x50
 800ee42:	2157      	movs	r1, #87	; 0x57
 800ee44:	0018      	movs	r0, r3
 800ee46:	f001 fcb7 	bl	80107b8 <VL53L0X_WrByte>
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800ee4e:	197c      	adds	r4, r7, r5
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2208      	movs	r2, #8
 800ee54:	2156      	movs	r1, #86	; 0x56
 800ee56:	0018      	movs	r0, r3
 800ee58:	f001 fcae 	bl	80107b8 <VL53L0X_WrByte>
 800ee5c:	0003      	movs	r3, r0
 800ee5e:	7023      	strb	r3, [r4, #0]
 800ee60:	e16b      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ee62:	1cfb      	adds	r3, r7, #3
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d000      	beq.n	800ee6c <VL53L0X_set_vcsel_pulse_period+0x1a0>
 800ee6a:	e166      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>

		if (VCSELPulsePeriodPCLK == 8) {
 800ee6c:	1cbb      	adds	r3, r7, #2
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b08      	cmp	r3, #8
 800ee72:	d155      	bne.n	800ef20 <VL53L0X_set_vcsel_pulse_period+0x254>

			Status = VL53L0X_WrByte(Dev,
 800ee74:	2527      	movs	r5, #39	; 0x27
 800ee76:	197c      	adds	r4, r7, r5
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2210      	movs	r2, #16
 800ee7c:	2148      	movs	r1, #72	; 0x48
 800ee7e:	0018      	movs	r0, r3
 800ee80:	f001 fc9a 	bl	80107b8 <VL53L0X_WrByte>
 800ee84:	0003      	movs	r3, r0
 800ee86:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ee88:	197c      	adds	r4, r7, r5
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2208      	movs	r2, #8
 800ee8e:	2147      	movs	r1, #71	; 0x47
 800ee90:	0018      	movs	r0, r3
 800ee92:	f001 fc91 	bl	80107b8 <VL53L0X_WrByte>
 800ee96:	0003      	movs	r3, r0
 800ee98:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2202      	movs	r2, #2
 800ee9e:	2132      	movs	r1, #50	; 0x32
 800eea0:	0018      	movs	r0, r3
 800eea2:	f001 fc89 	bl	80107b8 <VL53L0X_WrByte>
 800eea6:	0003      	movs	r3, r0
 800eea8:	0019      	movs	r1, r3
 800eeaa:	002c      	movs	r4, r5
 800eeac:	193b      	adds	r3, r7, r4
 800eeae:	193a      	adds	r2, r7, r4
 800eeb0:	7812      	ldrb	r2, [r2, #0]
 800eeb2:	430a      	orrs	r2, r1
 800eeb4:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	220c      	movs	r2, #12
 800eeba:	2130      	movs	r1, #48	; 0x30
 800eebc:	0018      	movs	r0, r3
 800eebe:	f001 fc7b 	bl	80107b8 <VL53L0X_WrByte>
 800eec2:	0003      	movs	r3, r0
 800eec4:	0019      	movs	r1, r3
 800eec6:	193b      	adds	r3, r7, r4
 800eec8:	193a      	adds	r2, r7, r4
 800eeca:	7812      	ldrb	r2, [r2, #0]
 800eecc:	430a      	orrs	r2, r1
 800eece:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2201      	movs	r2, #1
 800eed4:	21ff      	movs	r1, #255	; 0xff
 800eed6:	0018      	movs	r0, r3
 800eed8:	f001 fc6e 	bl	80107b8 <VL53L0X_WrByte>
 800eedc:	0003      	movs	r3, r0
 800eede:	0019      	movs	r1, r3
 800eee0:	193b      	adds	r3, r7, r4
 800eee2:	193a      	adds	r2, r7, r4
 800eee4:	7812      	ldrb	r2, [r2, #0]
 800eee6:	430a      	orrs	r2, r1
 800eee8:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2230      	movs	r2, #48	; 0x30
 800eeee:	2130      	movs	r1, #48	; 0x30
 800eef0:	0018      	movs	r0, r3
 800eef2:	f001 fc61 	bl	80107b8 <VL53L0X_WrByte>
 800eef6:	0003      	movs	r3, r0
 800eef8:	0019      	movs	r1, r3
 800eefa:	193b      	adds	r3, r7, r4
 800eefc:	193a      	adds	r2, r7, r4
 800eefe:	7812      	ldrb	r2, [r2, #0]
 800ef00:	430a      	orrs	r2, r1
 800ef02:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2200      	movs	r2, #0
 800ef08:	21ff      	movs	r1, #255	; 0xff
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	f001 fc54 	bl	80107b8 <VL53L0X_WrByte>
 800ef10:	0003      	movs	r3, r0
 800ef12:	0019      	movs	r1, r3
 800ef14:	193b      	adds	r3, r7, r4
 800ef16:	193a      	adds	r2, r7, r4
 800ef18:	7812      	ldrb	r2, [r2, #0]
 800ef1a:	430a      	orrs	r2, r1
 800ef1c:	701a      	strb	r2, [r3, #0]
 800ef1e:	e10c      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ef20:	1cbb      	adds	r3, r7, #2
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b0a      	cmp	r3, #10
 800ef26:	d155      	bne.n	800efd4 <VL53L0X_set_vcsel_pulse_period+0x308>

			Status = VL53L0X_WrByte(Dev,
 800ef28:	2527      	movs	r5, #39	; 0x27
 800ef2a:	197c      	adds	r4, r7, r5
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2228      	movs	r2, #40	; 0x28
 800ef30:	2148      	movs	r1, #72	; 0x48
 800ef32:	0018      	movs	r0, r3
 800ef34:	f001 fc40 	bl	80107b8 <VL53L0X_WrByte>
 800ef38:	0003      	movs	r3, r0
 800ef3a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ef3c:	197c      	adds	r4, r7, r5
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2208      	movs	r2, #8
 800ef42:	2147      	movs	r1, #71	; 0x47
 800ef44:	0018      	movs	r0, r3
 800ef46:	f001 fc37 	bl	80107b8 <VL53L0X_WrByte>
 800ef4a:	0003      	movs	r3, r0
 800ef4c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2203      	movs	r2, #3
 800ef52:	2132      	movs	r1, #50	; 0x32
 800ef54:	0018      	movs	r0, r3
 800ef56:	f001 fc2f 	bl	80107b8 <VL53L0X_WrByte>
 800ef5a:	0003      	movs	r3, r0
 800ef5c:	0019      	movs	r1, r3
 800ef5e:	002c      	movs	r4, r5
 800ef60:	193b      	adds	r3, r7, r4
 800ef62:	193a      	adds	r2, r7, r4
 800ef64:	7812      	ldrb	r2, [r2, #0]
 800ef66:	430a      	orrs	r2, r1
 800ef68:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2209      	movs	r2, #9
 800ef6e:	2130      	movs	r1, #48	; 0x30
 800ef70:	0018      	movs	r0, r3
 800ef72:	f001 fc21 	bl	80107b8 <VL53L0X_WrByte>
 800ef76:	0003      	movs	r3, r0
 800ef78:	0019      	movs	r1, r3
 800ef7a:	193b      	adds	r3, r7, r4
 800ef7c:	193a      	adds	r2, r7, r4
 800ef7e:	7812      	ldrb	r2, [r2, #0]
 800ef80:	430a      	orrs	r2, r1
 800ef82:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	21ff      	movs	r1, #255	; 0xff
 800ef8a:	0018      	movs	r0, r3
 800ef8c:	f001 fc14 	bl	80107b8 <VL53L0X_WrByte>
 800ef90:	0003      	movs	r3, r0
 800ef92:	0019      	movs	r1, r3
 800ef94:	193b      	adds	r3, r7, r4
 800ef96:	193a      	adds	r2, r7, r4
 800ef98:	7812      	ldrb	r2, [r2, #0]
 800ef9a:	430a      	orrs	r2, r1
 800ef9c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2220      	movs	r2, #32
 800efa2:	2130      	movs	r1, #48	; 0x30
 800efa4:	0018      	movs	r0, r3
 800efa6:	f001 fc07 	bl	80107b8 <VL53L0X_WrByte>
 800efaa:	0003      	movs	r3, r0
 800efac:	0019      	movs	r1, r3
 800efae:	193b      	adds	r3, r7, r4
 800efb0:	193a      	adds	r2, r7, r4
 800efb2:	7812      	ldrb	r2, [r2, #0]
 800efb4:	430a      	orrs	r2, r1
 800efb6:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	21ff      	movs	r1, #255	; 0xff
 800efbe:	0018      	movs	r0, r3
 800efc0:	f001 fbfa 	bl	80107b8 <VL53L0X_WrByte>
 800efc4:	0003      	movs	r3, r0
 800efc6:	0019      	movs	r1, r3
 800efc8:	193b      	adds	r3, r7, r4
 800efca:	193a      	adds	r2, r7, r4
 800efcc:	7812      	ldrb	r2, [r2, #0]
 800efce:	430a      	orrs	r2, r1
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	e0b2      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800efd4:	1cbb      	adds	r3, r7, #2
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b0c      	cmp	r3, #12
 800efda:	d155      	bne.n	800f088 <VL53L0X_set_vcsel_pulse_period+0x3bc>

			Status = VL53L0X_WrByte(Dev,
 800efdc:	2527      	movs	r5, #39	; 0x27
 800efde:	197c      	adds	r4, r7, r5
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2238      	movs	r2, #56	; 0x38
 800efe4:	2148      	movs	r1, #72	; 0x48
 800efe6:	0018      	movs	r0, r3
 800efe8:	f001 fbe6 	bl	80107b8 <VL53L0X_WrByte>
 800efec:	0003      	movs	r3, r0
 800efee:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800eff0:	197c      	adds	r4, r7, r5
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2208      	movs	r2, #8
 800eff6:	2147      	movs	r1, #71	; 0x47
 800eff8:	0018      	movs	r0, r3
 800effa:	f001 fbdd 	bl	80107b8 <VL53L0X_WrByte>
 800effe:	0003      	movs	r3, r0
 800f000:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2203      	movs	r2, #3
 800f006:	2132      	movs	r1, #50	; 0x32
 800f008:	0018      	movs	r0, r3
 800f00a:	f001 fbd5 	bl	80107b8 <VL53L0X_WrByte>
 800f00e:	0003      	movs	r3, r0
 800f010:	0019      	movs	r1, r3
 800f012:	002c      	movs	r4, r5
 800f014:	193b      	adds	r3, r7, r4
 800f016:	193a      	adds	r2, r7, r4
 800f018:	7812      	ldrb	r2, [r2, #0]
 800f01a:	430a      	orrs	r2, r1
 800f01c:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2208      	movs	r2, #8
 800f022:	2130      	movs	r1, #48	; 0x30
 800f024:	0018      	movs	r0, r3
 800f026:	f001 fbc7 	bl	80107b8 <VL53L0X_WrByte>
 800f02a:	0003      	movs	r3, r0
 800f02c:	0019      	movs	r1, r3
 800f02e:	193b      	adds	r3, r7, r4
 800f030:	193a      	adds	r2, r7, r4
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	430a      	orrs	r2, r1
 800f036:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2201      	movs	r2, #1
 800f03c:	21ff      	movs	r1, #255	; 0xff
 800f03e:	0018      	movs	r0, r3
 800f040:	f001 fbba 	bl	80107b8 <VL53L0X_WrByte>
 800f044:	0003      	movs	r3, r0
 800f046:	0019      	movs	r1, r3
 800f048:	193b      	adds	r3, r7, r4
 800f04a:	193a      	adds	r2, r7, r4
 800f04c:	7812      	ldrb	r2, [r2, #0]
 800f04e:	430a      	orrs	r2, r1
 800f050:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2220      	movs	r2, #32
 800f056:	2130      	movs	r1, #48	; 0x30
 800f058:	0018      	movs	r0, r3
 800f05a:	f001 fbad 	bl	80107b8 <VL53L0X_WrByte>
 800f05e:	0003      	movs	r3, r0
 800f060:	0019      	movs	r1, r3
 800f062:	193b      	adds	r3, r7, r4
 800f064:	193a      	adds	r2, r7, r4
 800f066:	7812      	ldrb	r2, [r2, #0]
 800f068:	430a      	orrs	r2, r1
 800f06a:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	21ff      	movs	r1, #255	; 0xff
 800f072:	0018      	movs	r0, r3
 800f074:	f001 fba0 	bl	80107b8 <VL53L0X_WrByte>
 800f078:	0003      	movs	r3, r0
 800f07a:	0019      	movs	r1, r3
 800f07c:	193b      	adds	r3, r7, r4
 800f07e:	193a      	adds	r2, r7, r4
 800f080:	7812      	ldrb	r2, [r2, #0]
 800f082:	430a      	orrs	r2, r1
 800f084:	701a      	strb	r2, [r3, #0]
 800f086:	e058      	b.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800f088:	1cbb      	adds	r3, r7, #2
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2b0e      	cmp	r3, #14
 800f08e:	d154      	bne.n	800f13a <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800f090:	2527      	movs	r5, #39	; 0x27
 800f092:	197c      	adds	r4, r7, r5
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2248      	movs	r2, #72	; 0x48
 800f098:	2148      	movs	r1, #72	; 0x48
 800f09a:	0018      	movs	r0, r3
 800f09c:	f001 fb8c 	bl	80107b8 <VL53L0X_WrByte>
 800f0a0:	0003      	movs	r3, r0
 800f0a2:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800f0a4:	197c      	adds	r4, r7, r5
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2208      	movs	r2, #8
 800f0aa:	2147      	movs	r1, #71	; 0x47
 800f0ac:	0018      	movs	r0, r3
 800f0ae:	f001 fb83 	bl	80107b8 <VL53L0X_WrByte>
 800f0b2:	0003      	movs	r3, r0
 800f0b4:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2203      	movs	r2, #3
 800f0ba:	2132      	movs	r1, #50	; 0x32
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f001 fb7b 	bl	80107b8 <VL53L0X_WrByte>
 800f0c2:	0003      	movs	r3, r0
 800f0c4:	0019      	movs	r1, r3
 800f0c6:	002c      	movs	r4, r5
 800f0c8:	193b      	adds	r3, r7, r4
 800f0ca:	193a      	adds	r2, r7, r4
 800f0cc:	7812      	ldrb	r2, [r2, #0]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2207      	movs	r2, #7
 800f0d6:	2130      	movs	r1, #48	; 0x30
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f001 fb6d 	bl	80107b8 <VL53L0X_WrByte>
 800f0de:	0003      	movs	r3, r0
 800f0e0:	0019      	movs	r1, r3
 800f0e2:	193b      	adds	r3, r7, r4
 800f0e4:	193a      	adds	r2, r7, r4
 800f0e6:	7812      	ldrb	r2, [r2, #0]
 800f0e8:	430a      	orrs	r2, r1
 800f0ea:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	21ff      	movs	r1, #255	; 0xff
 800f0f2:	0018      	movs	r0, r3
 800f0f4:	f001 fb60 	bl	80107b8 <VL53L0X_WrByte>
 800f0f8:	0003      	movs	r3, r0
 800f0fa:	0019      	movs	r1, r3
 800f0fc:	193b      	adds	r3, r7, r4
 800f0fe:	193a      	adds	r2, r7, r4
 800f100:	7812      	ldrb	r2, [r2, #0]
 800f102:	430a      	orrs	r2, r1
 800f104:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2220      	movs	r2, #32
 800f10a:	2130      	movs	r1, #48	; 0x30
 800f10c:	0018      	movs	r0, r3
 800f10e:	f001 fb53 	bl	80107b8 <VL53L0X_WrByte>
 800f112:	0003      	movs	r3, r0
 800f114:	0019      	movs	r1, r3
 800f116:	193b      	adds	r3, r7, r4
 800f118:	193a      	adds	r2, r7, r4
 800f11a:	7812      	ldrb	r2, [r2, #0]
 800f11c:	430a      	orrs	r2, r1
 800f11e:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	21ff      	movs	r1, #255	; 0xff
 800f126:	0018      	movs	r0, r3
 800f128:	f001 fb46 	bl	80107b8 <VL53L0X_WrByte>
 800f12c:	0003      	movs	r3, r0
 800f12e:	0019      	movs	r1, r3
 800f130:	193b      	adds	r3, r7, r4
 800f132:	193a      	adds	r2, r7, r4
 800f134:	7812      	ldrb	r2, [r2, #0]
 800f136:	430a      	orrs	r2, r1
 800f138:	701a      	strb	r2, [r3, #0]
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800f13a:	2327      	movs	r3, #39	; 0x27
 800f13c:	18fb      	adds	r3, r7, r3
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	b25b      	sxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d000      	beq.n	800f148 <VL53L0X_set_vcsel_pulse_period+0x47c>
 800f146:	e093      	b.n	800f270 <VL53L0X_set_vcsel_pulse_period+0x5a4>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800f148:	2322      	movs	r3, #34	; 0x22
 800f14a:	18fc      	adds	r4, r7, r3
 800f14c:	1cbb      	adds	r3, r7, #2
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	0018      	movs	r0, r3
 800f152:	f7fe fcc6 	bl	800dae2 <VL53L0X_encode_vcsel_period>
 800f156:	0003      	movs	r3, r0
 800f158:	7023      	strb	r3, [r4, #0]
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800f15a:	1cfb      	adds	r3, r7, #3
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d002      	beq.n	800f168 <VL53L0X_set_vcsel_pulse_period+0x49c>
 800f162:	2b01      	cmp	r3, #1
 800f164:	d04f      	beq.n	800f206 <VL53L0X_set_vcsel_pulse_period+0x53a>
 800f166:	e07e      	b.n	800f266 <VL53L0X_set_vcsel_pulse_period+0x59a>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800f168:	2527      	movs	r5, #39	; 0x27
 800f16a:	197c      	adds	r4, r7, r5
 800f16c:	2314      	movs	r3, #20
 800f16e:	18fa      	adds	r2, r7, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2103      	movs	r1, #3
 800f174:	0018      	movs	r0, r3
 800f176:	f7ff fb57 	bl	800e828 <get_sequence_step_timeout>
 800f17a:	0003      	movs	r3, r0
 800f17c:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f17e:	197b      	adds	r3, r7, r5
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	b25b      	sxtb	r3, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	d109      	bne.n	800f19c <VL53L0X_set_vcsel_pulse_period+0x4d0>
				Status = get_sequence_step_timeout(Dev,
 800f188:	197c      	adds	r4, r7, r5
 800f18a:	2310      	movs	r3, #16
 800f18c:	18fa      	adds	r2, r7, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2102      	movs	r1, #2
 800f192:	0018      	movs	r0, r3
 800f194:	f7ff fb48 	bl	800e828 <get_sequence_step_timeout>
 800f198:	0003      	movs	r3, r0
 800f19a:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f19c:	2227      	movs	r2, #39	; 0x27
 800f19e:	18bb      	adds	r3, r7, r2
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	b25b      	sxtb	r3, r3
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10a      	bne.n	800f1be <VL53L0X_set_vcsel_pulse_period+0x4f2>
				Status = VL53L0X_WrByte(Dev,
 800f1a8:	18bc      	adds	r4, r7, r2
 800f1aa:	2322      	movs	r3, #34	; 0x22
 800f1ac:	18fb      	adds	r3, r7, r3
 800f1ae:	781a      	ldrb	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2150      	movs	r1, #80	; 0x50
 800f1b4:	0018      	movs	r0, r3
 800f1b6:	f001 faff 	bl	80107b8 <VL53L0X_WrByte>
 800f1ba:	0003      	movs	r3, r0
 800f1bc:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800f1be:	2127      	movs	r1, #39	; 0x27
 800f1c0:	187b      	adds	r3, r7, r1
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	b25b      	sxtb	r3, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d108      	bne.n	800f1dc <VL53L0X_set_vcsel_pulse_period+0x510>
				Status = set_sequence_step_timeout(Dev,
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	187c      	adds	r4, r7, r1
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2103      	movs	r1, #3
 800f1d2:	0018      	movs	r0, r3
 800f1d4:	f7ff fc42 	bl	800ea5c <set_sequence_step_timeout>
 800f1d8:	0003      	movs	r3, r0
 800f1da:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800f1dc:	2127      	movs	r1, #39	; 0x27
 800f1de:	187b      	adds	r3, r7, r1
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	b25b      	sxtb	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d108      	bne.n	800f1fa <VL53L0X_set_vcsel_pulse_period+0x52e>
				Status = set_sequence_step_timeout(Dev,
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	187c      	adds	r4, r7, r1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2102      	movs	r1, #2
 800f1f0:	0018      	movs	r0, r3
 800f1f2:	f7ff fc33 	bl	800ea5c <set_sequence_step_timeout>
 800f1f6:	0003      	movs	r3, r0
 800f1f8:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	1cba      	adds	r2, r7, #2
 800f1fe:	21e8      	movs	r1, #232	; 0xe8
 800f200:	7812      	ldrb	r2, [r2, #0]
 800f202:	545a      	strb	r2, [r3, r1]
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800f204:	e035      	b.n	800f272 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800f206:	2527      	movs	r5, #39	; 0x27
 800f208:	197c      	adds	r4, r7, r5
 800f20a:	2318      	movs	r3, #24
 800f20c:	18fa      	adds	r2, r7, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2104      	movs	r1, #4
 800f212:	0018      	movs	r0, r3
 800f214:	f7ff fb08 	bl	800e828 <get_sequence_step_timeout>
 800f218:	0003      	movs	r3, r0
 800f21a:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f21c:	197b      	adds	r3, r7, r5
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	b25b      	sxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10a      	bne.n	800f23c <VL53L0X_set_vcsel_pulse_period+0x570>
				Status = VL53L0X_WrByte(Dev,
 800f226:	197c      	adds	r4, r7, r5
 800f228:	2322      	movs	r3, #34	; 0x22
 800f22a:	18fb      	adds	r3, r7, r3
 800f22c:	781a      	ldrb	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2170      	movs	r1, #112	; 0x70
 800f232:	0018      	movs	r0, r3
 800f234:	f001 fac0 	bl	80107b8 <VL53L0X_WrByte>
 800f238:	0003      	movs	r3, r0
 800f23a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800f23c:	2127      	movs	r1, #39	; 0x27
 800f23e:	187b      	adds	r3, r7, r1
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	b25b      	sxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d108      	bne.n	800f25a <VL53L0X_set_vcsel_pulse_period+0x58e>
				Status = set_sequence_step_timeout(Dev,
 800f248:	69ba      	ldr	r2, [r7, #24]
 800f24a:	187c      	adds	r4, r7, r1
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2104      	movs	r1, #4
 800f250:	0018      	movs	r0, r3
 800f252:	f7ff fc03 	bl	800ea5c <set_sequence_step_timeout>
 800f256:	0003      	movs	r3, r0
 800f258:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	1cba      	adds	r2, r7, #2
 800f25e:	21e0      	movs	r1, #224	; 0xe0
 800f260:	7812      	ldrb	r2, [r2, #0]
 800f262:	545a      	strb	r2, [r3, r1]
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800f264:	e005      	b.n	800f272 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f266:	2327      	movs	r3, #39	; 0x27
 800f268:	18fb      	adds	r3, r7, r3
 800f26a:	22fc      	movs	r2, #252	; 0xfc
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	e000      	b.n	800f272 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		}
	}
 800f270:	46c0      	nop			; (mov r8, r8)

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800f272:	2227      	movs	r2, #39	; 0x27
 800f274:	18bb      	adds	r3, r7, r2
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	b25b      	sxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10b      	bne.n	800f296 <VL53L0X_set_vcsel_pulse_period+0x5ca>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	695b      	ldr	r3, [r3, #20]
 800f282:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800f284:	18bc      	adds	r4, r7, r2
 800f286:	69fa      	ldr	r2, [r7, #28]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	0011      	movs	r1, r2
 800f28c:	0018      	movs	r0, r3
 800f28e:	f7fc f887 	bl	800b3a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800f292:	0003      	movs	r3, r0
 800f294:	7023      	strb	r3, [r4, #0]
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800f296:	2227      	movs	r2, #39	; 0x27
 800f298:	18bb      	adds	r3, r7, r2
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	b25b      	sxtb	r3, r3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <VL53L0X_set_vcsel_pulse_period+0x5ea>
		Status = VL53L0X_perform_phase_calibration(
 800f2a2:	18bc      	adds	r4, r7, r2
 800f2a4:	230f      	movs	r3, #15
 800f2a6:	18f9      	adds	r1, r7, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f7fe fae4 	bl	800d87a <VL53L0X_perform_phase_calibration>
 800f2b2:	0003      	movs	r3, r0
 800f2b4:	7023      	strb	r3, [r4, #0]
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800f2b6:	2327      	movs	r3, #39	; 0x27
 800f2b8:	18fb      	adds	r3, r7, r3
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	b25b      	sxtb	r3, r3
}
 800f2be:	0018      	movs	r0, r3
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	b00a      	add	sp, #40	; 0x28
 800f2c4:	bdb0      	pop	{r4, r5, r7, pc}

0800f2c6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800f2c6:	b590      	push	{r4, r7, lr}
 800f2c8:	b087      	sub	sp, #28
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	200b      	movs	r0, #11
 800f2d2:	183b      	adds	r3, r7, r0
 800f2d4:	1c0a      	adds	r2, r1, #0
 800f2d6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f2d8:	2317      	movs	r3, #23
 800f2da:	18fb      	adds	r3, r7, r3
 800f2dc:	2200      	movs	r2, #0
 800f2de:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800f2e0:	183b      	adds	r3, r7, r0
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <VL53L0X_get_vcsel_pulse_period+0x28>
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d00c      	beq.n	800f306 <VL53L0X_get_vcsel_pulse_period+0x40>
 800f2ec:	e017      	b.n	800f31e <VL53L0X_get_vcsel_pulse_period+0x58>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f2ee:	2317      	movs	r3, #23
 800f2f0:	18fc      	adds	r4, r7, r3
 800f2f2:	2316      	movs	r3, #22
 800f2f4:	18fa      	adds	r2, r7, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2150      	movs	r1, #80	; 0x50
 800f2fa:	0018      	movs	r0, r3
 800f2fc:	f001 fb0b 	bl	8010916 <VL53L0X_RdByte>
 800f300:	0003      	movs	r3, r0
 800f302:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f304:	e00f      	b.n	800f326 <VL53L0X_get_vcsel_pulse_period+0x60>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f306:	2317      	movs	r3, #23
 800f308:	18fc      	adds	r4, r7, r3
 800f30a:	2316      	movs	r3, #22
 800f30c:	18fa      	adds	r2, r7, r3
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2170      	movs	r1, #112	; 0x70
 800f312:	0018      	movs	r0, r3
 800f314:	f001 faff 	bl	8010916 <VL53L0X_RdByte>
 800f318:	0003      	movs	r3, r0
 800f31a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f31c:	e003      	b.n	800f326 <VL53L0X_get_vcsel_pulse_period+0x60>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f31e:	2317      	movs	r3, #23
 800f320:	18fb      	adds	r3, r7, r3
 800f322:	22fc      	movs	r2, #252	; 0xfc
 800f324:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800f326:	2317      	movs	r3, #23
 800f328:	18fb      	adds	r3, r7, r3
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	b25b      	sxtb	r3, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d109      	bne.n	800f346 <VL53L0X_get_vcsel_pulse_period+0x80>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800f332:	2316      	movs	r3, #22
 800f334:	18fb      	adds	r3, r7, r3
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	0018      	movs	r0, r3
 800f33a:	f7fe fbbb 	bl	800dab4 <VL53L0X_decode_vcsel_period>
 800f33e:	0003      	movs	r3, r0
 800f340:	001a      	movs	r2, r3
		*pVCSELPulsePeriodPCLK =
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	701a      	strb	r2, [r3, #0]

	return Status;
 800f346:	2317      	movs	r3, #23
 800f348:	18fb      	adds	r3, r7, r3
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b25b      	sxtb	r3, r3
}
 800f34e:	0018      	movs	r0, r3
 800f350:	46bd      	mov	sp, r7
 800f352:	b007      	add	sp, #28
 800f354:	bd90      	pop	{r4, r7, pc}
	...

0800f358 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800f358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35a:	b093      	sub	sp, #76	; 0x4c
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f362:	2147      	movs	r1, #71	; 0x47
 800f364:	187b      	adds	r3, r7, r1
 800f366:	2200      	movs	r2, #0
 800f368:	701a      	strb	r2, [r3, #0]
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f36a:	23fa      	movs	r3, #250	; 0xfa
 800f36c:	00db      	lsls	r3, r3, #3
 800f36e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f370:	4b7a      	ldr	r3, [pc, #488]	; (800f55c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x204>)
 800f372:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800f374:	23f0      	movs	r3, #240	; 0xf0
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f37a:	23a5      	movs	r3, #165	; 0xa5
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800f380:	4b77      	ldr	r3, [pc, #476]	; (800f560 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x208>)
 800f382:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800f384:	4b77      	ldr	r3, [pc, #476]	; (800f564 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x20c>)
 800f386:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f388:	23a5      	movs	r3, #165	; 0xa5
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f38e:	4b76      	ldr	r3, [pc, #472]	; (800f568 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x210>)
 800f390:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f392:	2300      	movs	r3, #0
 800f394:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800f396:	4b75      	ldr	r3, [pc, #468]	; (800f56c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x214>)
 800f398:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d206      	bcs.n	800f3b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x5c>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f3a6:	187b      	adds	r3, r7, r1
 800f3a8:	22fc      	movs	r2, #252	; 0xfc
 800f3aa:	701a      	strb	r2, [r3, #0]
		return Status;
 800f3ac:	187b      	adds	r3, r7, r1
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	b25b      	sxtb	r3, r3
 800f3b2:	e0ce      	b.n	800f552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800f3b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b8:	18d3      	adds	r3, r2, r3
	FinalRangeTimingBudgetMicroSeconds =
 800f3ba:	683a      	ldr	r2, [r7, #0]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f3c0:	2647      	movs	r6, #71	; 0x47
 800f3c2:	19bc      	adds	r4, r7, r6
 800f3c4:	2514      	movs	r5, #20
 800f3c6:	197a      	adds	r2, r7, r5
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	0011      	movs	r1, r2
 800f3cc:	0018      	movs	r0, r3
 800f3ce:	f7fc f99b 	bl	800b708 <VL53L0X_GetSequenceStepEnables>
 800f3d2:	0003      	movs	r3, r0
 800f3d4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE &&
 800f3d6:	19bb      	adds	r3, r7, r6
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	b25b      	sxtb	r3, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d000      	beq.n	800f3e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8a>
 800f3e0:	e06d      	b.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
		(SchedulerSequenceSteps.TccOn  ||
 800f3e2:	197b      	adds	r3, r7, r5
 800f3e4:	781b      	ldrb	r3, [r3, #0]
	if (Status == VL53L0X_ERROR_NONE &&
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d107      	bne.n	800f3fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.MsrcOn ||
 800f3ea:	197b      	adds	r3, r7, r5
 800f3ec:	785b      	ldrb	r3, [r3, #1]
		(SchedulerSequenceSteps.TccOn  ||
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d103      	bne.n	800f3fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.DssOn)) {
 800f3f2:	197b      	adds	r3, r7, r5
 800f3f4:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d061      	beq.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800f3fa:	2547      	movs	r5, #71	; 0x47
 800f3fc:	197c      	adds	r4, r7, r5
 800f3fe:	2310      	movs	r3, #16
 800f400:	18fa      	adds	r2, r7, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2102      	movs	r1, #2
 800f406:	0018      	movs	r0, r3
 800f408:	f7ff fa0e 	bl	800e828 <get_sequence_step_timeout>
 800f40c:	0003      	movs	r3, r0
 800f40e:	7023      	strb	r3, [r4, #0]
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800f410:	197b      	adds	r3, r7, r5
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	b25b      	sxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			return Status;
 800f41a:	197b      	adds	r3, r7, r5
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	b25b      	sxtb	r3, r3
 800f420:	e097      	b.n	800f552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800f422:	2314      	movs	r3, #20
 800f424:	18fb      	adds	r3, r7, r3
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d010      	beq.n	800f44e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800f42c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800f42e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f430:	18d3      	adds	r3, r2, r3
 800f432:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f438:	429a      	cmp	r2, r3
 800f43a:	d204      	bcs.n	800f446 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xee>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800f43c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	1ad3      	subs	r3, r2, r3
 800f442:	643b      	str	r3, [r7, #64]	; 0x40
 800f444:	e003      	b.n	800f44e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f446:	2347      	movs	r3, #71	; 0x47
 800f448:	18fb      	adds	r3, r7, r3
 800f44a:	22fc      	movs	r2, #252	; 0xfc
 800f44c:	701a      	strb	r2, [r3, #0]
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800f44e:	2247      	movs	r2, #71	; 0x47
 800f450:	18bb      	adds	r3, r7, r2
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	b25b      	sxtb	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x10a>
			LOG_FUNCTION_END(Status);
			return Status;
 800f45a:	18bb      	adds	r3, r7, r2
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	b25b      	sxtb	r3, r3
 800f460:	e077      	b.n	800f552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800f462:	2314      	movs	r3, #20
 800f464:	18fb      	adds	r3, r7, r3
 800f466:	789b      	ldrb	r3, [r3, #2]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d012      	beq.n	800f492 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	18d3      	adds	r3, r2, r3
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f476:	69fa      	ldr	r2, [r7, #28]
 800f478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d204      	bcs.n	800f488 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x130>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f47e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	1ad3      	subs	r3, r2, r3
 800f484:	643b      	str	r3, [r7, #64]	; 0x40
 800f486:	e01a      	b.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f488:	2347      	movs	r3, #71	; 0x47
 800f48a:	18fb      	adds	r3, r7, r3
 800f48c:	22fc      	movs	r2, #252	; 0xfc
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	e015      	b.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800f492:	2314      	movs	r3, #20
 800f494:	18fb      	adds	r3, r7, r3
 800f496:	785b      	ldrb	r3, [r3, #1]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d010      	beq.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4a0:	18d3      	adds	r3, r2, r3
 800f4a2:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f4a4:	69fa      	ldr	r2, [r7, #28]
 800f4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d204      	bcs.n	800f4b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f4ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f4b4:	e003      	b.n	800f4be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f4b6:	2347      	movs	r3, #71	; 0x47
 800f4b8:	18fb      	adds	r3, r7, r3
 800f4ba:	22fc      	movs	r2, #252	; 0xfc
 800f4bc:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f4be:	2247      	movs	r2, #71	; 0x47
 800f4c0:	18bb      	adds	r3, r7, r2
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	b25b      	sxtb	r3, r3
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d003      	beq.n	800f4d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17a>
		LOG_FUNCTION_END(Status);
		return Status;
 800f4ca:	18bb      	adds	r3, r7, r2
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	b25b      	sxtb	r3, r3
 800f4d0:	e03f      	b.n	800f552 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800f4d2:	2314      	movs	r3, #20
 800f4d4:	18fb      	adds	r3, r7, r3
 800f4d6:	78db      	ldrb	r3, [r3, #3]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d01b      	beq.n	800f514 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800f4dc:	2347      	movs	r3, #71	; 0x47
 800f4de:	18fc      	adds	r4, r7, r3
 800f4e0:	230c      	movs	r3, #12
 800f4e2:	18fa      	adds	r2, r7, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2103      	movs	r1, #3
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f7ff f99d 	bl	800e828 <get_sequence_step_timeout>
 800f4ee:	0003      	movs	r3, r0
 800f4f0:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4f6:	18d3      	adds	r3, r2, r3
 800f4f8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f4fa:	69fa      	ldr	r2, [r7, #28]
 800f4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d204      	bcs.n	800f50c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800f502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	643b      	str	r3, [r7, #64]	; 0x40
 800f50a:	e003      	b.n	800f514 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f50c:	2347      	movs	r3, #71	; 0x47
 800f50e:	18fb      	adds	r3, r7, r3
 800f510:	22fc      	movs	r2, #252	; 0xfc
 800f512:	701a      	strb	r2, [r3, #0]
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800f514:	2147      	movs	r1, #71	; 0x47
 800f516:	187b      	adds	r3, r7, r1
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	b25b      	sxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d114      	bne.n	800f54a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>
		SchedulerSequenceSteps.FinalRangeOn) {
 800f520:	2314      	movs	r3, #20
 800f522:	18fb      	adds	r3, r7, r3
 800f524:	791b      	ldrb	r3, [r3, #4]
	if (Status == VL53L0X_ERROR_NONE &&
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00f      	beq.n	800f54a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>

		FinalRangeTimingBudgetMicroSeconds -=
 800f52a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800f532:	187c      	adds	r4, r7, r1
 800f534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2104      	movs	r1, #4
 800f53a:	0018      	movs	r0, r3
 800f53c:	f7ff fa8e 	bl	800ea5c <set_sequence_step_timeout>
 800f540:	0003      	movs	r3, r0
 800f542:	7023      	strb	r3, [r4, #0]
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800f54a:	2347      	movs	r3, #71	; 0x47
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	b25b      	sxtb	r3, r3
}
 800f552:	0018      	movs	r0, r3
 800f554:	46bd      	mov	sp, r7
 800f556:	b013      	add	sp, #76	; 0x4c
 800f558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55a:	46c0      	nop			; (mov r8, r8)
 800f55c:	00000776 	.word	0x00000776
 800f560:	0000024e 	.word	0x0000024e
 800f564:	000002b2 	.word	0x000002b2
 800f568:	00000226 	.word	0x00000226
 800f56c:	00004e20 	.word	0x00004e20

0800f570 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800f570:	b5b0      	push	{r4, r5, r7, lr}
 800f572:	b090      	sub	sp, #64	; 0x40
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f57a:	213f      	movs	r1, #63	; 0x3f
 800f57c:	187b      	adds	r3, r7, r1
 800f57e:	2200      	movs	r2, #0
 800f580:	701a      	strb	r2, [r3, #0]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f582:	23fa      	movs	r3, #250	; 0xfa
 800f584:	00db      	lsls	r3, r3, #3
 800f586:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f588:	4b5e      	ldr	r3, [pc, #376]	; (800f704 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x194>)
 800f58a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800f58c:	23f0      	movs	r3, #240	; 0xf0
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f592:	23a5      	movs	r3, #165	; 0xa5
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800f598:	4b5b      	ldr	r3, [pc, #364]	; (800f708 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x198>)
 800f59a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800f59c:	4b5b      	ldr	r3, [pc, #364]	; (800f70c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>)
 800f59e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f5a0:	23a5      	movs	r3, #165	; 0xa5
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f5a6:	4b5a      	ldr	r3, [pc, #360]	; (800f710 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a0>)
 800f5a8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800f5ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b2:	18d2      	adds	r2, r2, r3
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f5b8:	000d      	movs	r5, r1
 800f5ba:	187c      	adds	r4, r7, r1
 800f5bc:	2318      	movs	r3, #24
 800f5be:	18fa      	adds	r2, r7, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	0011      	movs	r1, r2
 800f5c4:	0018      	movs	r0, r3
 800f5c6:	f7fc f89f 	bl	800b708 <VL53L0X_GetSequenceStepEnables>
 800f5ca:	0003      	movs	r3, r0
 800f5cc:	7023      	strb	r3, [r4, #0]

	if (Status != VL53L0X_ERROR_NONE) {
 800f5ce:	197b      	adds	r3, r7, r5
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	b25b      	sxtb	r3, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d003      	beq.n	800f5e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
		LOG_FUNCTION_END(Status);
		return Status;
 800f5d8:	197b      	adds	r3, r7, r5
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	b25b      	sxtb	r3, r3
 800f5de:	e08d      	b.n	800f6fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800f5e0:	2218      	movs	r2, #24
 800f5e2:	18bb      	adds	r3, r7, r2
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d107      	bne.n	800f5fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.MsrcOn ||
 800f5ea:	18bb      	adds	r3, r7, r2
 800f5ec:	785b      	ldrb	r3, [r3, #1]
	if (SchedulerSequenceSteps.TccOn  ||
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d103      	bne.n	800f5fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.DssOn) {
 800f5f2:	18bb      	adds	r3, r7, r2
 800f5f4:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d038      	beq.n	800f66c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>

		Status = get_sequence_step_timeout(Dev,
 800f5fa:	253f      	movs	r5, #63	; 0x3f
 800f5fc:	197c      	adds	r4, r7, r5
 800f5fe:	2310      	movs	r3, #16
 800f600:	18fa      	adds	r2, r7, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2102      	movs	r1, #2
 800f606:	0018      	movs	r0, r3
 800f608:	f7ff f90e 	bl	800e828 <get_sequence_step_timeout>
 800f60c:	0003      	movs	r3, r0
 800f60e:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800f610:	197b      	adds	r3, r7, r5
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	b25b      	sxtb	r3, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d128      	bne.n	800f66c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
			if (SchedulerSequenceSteps.TccOn) {
 800f61a:	2318      	movs	r3, #24
 800f61c:	18fb      	adds	r3, r7, r3
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc4>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f628:	6939      	ldr	r1, [r7, #16]
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800f62e:	18d2      	adds	r2, r2, r3
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800f634:	2318      	movs	r3, #24
 800f636:	18fb      	adds	r3, r7, r3
 800f638:	789b      	ldrb	r3, [r3, #2]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d009      	beq.n	800f652 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800f642:	6939      	ldr	r1, [r7, #16]
 800f644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f646:	18cb      	adds	r3, r1, r3
 800f648:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f64a:	18d2      	adds	r2, r2, r3
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	e00c      	b.n	800f66c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800f652:	2318      	movs	r3, #24
 800f654:	18fb      	adds	r3, r7, r3
 800f656:	785b      	ldrb	r3, [r3, #1]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d007      	beq.n	800f66c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f660:	6939      	ldr	r1, [r7, #16]
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800f666:	18d2      	adds	r2, r2, r3
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f66c:	223f      	movs	r2, #63	; 0x3f
 800f66e:	18bb      	adds	r3, r7, r2
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	b25b      	sxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d116      	bne.n	800f6a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800f678:	2318      	movs	r3, #24
 800f67a:	18fb      	adds	r3, r7, r3
 800f67c:	78db      	ldrb	r3, [r3, #3]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d011      	beq.n	800f6a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
			Status = get_sequence_step_timeout(Dev,
 800f682:	18bc      	adds	r4, r7, r2
 800f684:	230c      	movs	r3, #12
 800f686:	18fa      	adds	r2, r7, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2103      	movs	r1, #3
 800f68c:	0018      	movs	r0, r3
 800f68e:	f7ff f8cb 	bl	800e828 <get_sequence_step_timeout>
 800f692:	0003      	movs	r3, r0
 800f694:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f69a:	68f9      	ldr	r1, [r7, #12]
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800f6a0:	18d2      	adds	r2, r2, r3
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6a6:	223f      	movs	r2, #63	; 0x3f
 800f6a8:	18bb      	adds	r3, r7, r2
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	b25b      	sxtb	r3, r3
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d116      	bne.n	800f6e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f6b2:	2318      	movs	r3, #24
 800f6b4:	18fb      	adds	r3, r7, r3
 800f6b6:	791b      	ldrb	r3, [r3, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d011      	beq.n	800f6e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
			Status = get_sequence_step_timeout(Dev,
 800f6bc:	18bc      	adds	r4, r7, r2
 800f6be:	2314      	movs	r3, #20
 800f6c0:	18fa      	adds	r2, r7, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2104      	movs	r1, #4
 800f6c6:	0018      	movs	r0, r3
 800f6c8:	f7ff f8ae 	bl	800e828 <get_sequence_step_timeout>
 800f6cc:	0003      	movs	r3, r0
 800f6ce:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f6d4:	6979      	ldr	r1, [r7, #20]
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800f6da:	18d2      	adds	r2, r2, r3
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f6e0:	233f      	movs	r3, #63	; 0x3f
 800f6e2:	18fb      	adds	r3, r7, r3
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	b25b      	sxtb	r3, r3
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d103      	bne.n	800f6f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x184>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f6f4:	233f      	movs	r3, #63	; 0x3f
 800f6f6:	18fb      	adds	r3, r7, r3
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	b25b      	sxtb	r3, r3
}
 800f6fc:	0018      	movs	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	b010      	add	sp, #64	; 0x40
 800f702:	bdb0      	pop	{r4, r5, r7, pc}
 800f704:	00000776 	.word	0x00000776
 800f708:	0000024e 	.word	0x0000024e
 800f70c:	000002b2 	.word	0x000002b2
 800f710:	00000226 	.word	0x00000226

0800f714 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f714:	b5b0      	push	{r4, r5, r7, lr}
 800f716:	b088      	sub	sp, #32
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f71e:	231f      	movs	r3, #31
 800f720:	18fb      	adds	r3, r7, r3
 800f722:	2200      	movs	r2, #0
 800f724:	701a      	strb	r2, [r3, #0]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f72a:	e105      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	18d2      	adds	r2, r2, r3
 800f732:	2113      	movs	r1, #19
 800f734:	187b      	adds	r3, r7, r1
 800f736:	7812      	ldrb	r2, [r2, #0]
 800f738:	701a      	strb	r2, [r3, #0]
		Index++;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	3301      	adds	r3, #1
 800f73e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f740:	187b      	adds	r3, r7, r1
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2bff      	cmp	r3, #255	; 0xff
 800f746:	d000      	beq.n	800f74a <VL53L0X_load_tuning_settings+0x36>
 800f748:	e0ba      	b.n	800f8c0 <VL53L0X_load_tuning_settings+0x1ac>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	683a      	ldr	r2, [r7, #0]
 800f74e:	18d2      	adds	r2, r2, r3
 800f750:	2111      	movs	r1, #17
 800f752:	187b      	adds	r3, r7, r1
 800f754:	7812      	ldrb	r2, [r2, #0]
 800f756:	701a      	strb	r2, [r3, #0]
			Index++;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	3301      	adds	r3, #1
 800f75c:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f75e:	187b      	adds	r3, r7, r1
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b03      	cmp	r3, #3
 800f764:	d100      	bne.n	800f768 <VL53L0X_load_tuning_settings+0x54>
 800f766:	e07f      	b.n	800f868 <VL53L0X_load_tuning_settings+0x154>
 800f768:	dd00      	ble.n	800f76c <VL53L0X_load_tuning_settings+0x58>
 800f76a:	e0a4      	b.n	800f8b6 <VL53L0X_load_tuning_settings+0x1a2>
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d054      	beq.n	800f81a <VL53L0X_load_tuning_settings+0x106>
 800f770:	dd00      	ble.n	800f774 <VL53L0X_load_tuning_settings+0x60>
 800f772:	e0a0      	b.n	800f8b6 <VL53L0X_load_tuning_settings+0x1a2>
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <VL53L0X_load_tuning_settings+0x6a>
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d027      	beq.n	800f7cc <VL53L0X_load_tuning_settings+0xb8>
 800f77c:	e09b      	b.n	800f8b6 <VL53L0X_load_tuning_settings+0x1a2>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	18d2      	adds	r2, r2, r3
 800f784:	2110      	movs	r1, #16
 800f786:	187b      	adds	r3, r7, r1
 800f788:	7812      	ldrb	r2, [r2, #0]
 800f78a:	701a      	strb	r2, [r3, #0]
				Index++;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	3301      	adds	r3, #1
 800f790:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	18d2      	adds	r2, r2, r3
 800f798:	200f      	movs	r0, #15
 800f79a:	183b      	adds	r3, r7, r0
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	701a      	strb	r2, [r3, #0]
				Index++;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f7a6:	187b      	adds	r3, r7, r1
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	b299      	uxth	r1, r3
 800f7b0:	183b      	adds	r3, r7, r0
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	200c      	movs	r0, #12
 800f7b8:	183b      	adds	r3, r7, r0
 800f7ba:	188a      	adds	r2, r1, r2
 800f7bc:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	1839      	adds	r1, r7, r0
 800f7c2:	239a      	movs	r3, #154	; 0x9a
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	8809      	ldrh	r1, [r1, #0]
 800f7c8:	52d1      	strh	r1, [r2, r3]
				break;
 800f7ca:	e0b5      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	18d2      	adds	r2, r2, r3
 800f7d2:	2110      	movs	r1, #16
 800f7d4:	187b      	adds	r3, r7, r1
 800f7d6:	7812      	ldrb	r2, [r2, #0]
 800f7d8:	701a      	strb	r2, [r3, #0]
				Index++;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	18d2      	adds	r2, r2, r3
 800f7e6:	200f      	movs	r0, #15
 800f7e8:	183b      	adds	r3, r7, r0
 800f7ea:	7812      	ldrb	r2, [r2, #0]
 800f7ec:	701a      	strb	r2, [r3, #0]
				Index++;
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f7f4:	187b      	adds	r3, r7, r1
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	021b      	lsls	r3, r3, #8
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	183b      	adds	r3, r7, r0
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	b29a      	uxth	r2, r3
 800f804:	200c      	movs	r0, #12
 800f806:	183b      	adds	r3, r7, r0
 800f808:	188a      	adds	r2, r1, r2
 800f80a:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	1839      	adds	r1, r7, r0
 800f810:	239b      	movs	r3, #155	; 0x9b
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	8809      	ldrh	r1, [r1, #0]
 800f816:	52d1      	strh	r1, [r2, r3]
					Temp16);
				break;
 800f818:	e08e      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	683a      	ldr	r2, [r7, #0]
 800f81e:	18d2      	adds	r2, r2, r3
 800f820:	2110      	movs	r1, #16
 800f822:	187b      	adds	r3, r7, r1
 800f824:	7812      	ldrb	r2, [r2, #0]
 800f826:	701a      	strb	r2, [r3, #0]
				Index++;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	3301      	adds	r3, #1
 800f82c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	18d2      	adds	r2, r2, r3
 800f834:	200f      	movs	r0, #15
 800f836:	183b      	adds	r3, r7, r0
 800f838:	7812      	ldrb	r2, [r2, #0]
 800f83a:	701a      	strb	r2, [r3, #0]
				Index++;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	3301      	adds	r3, #1
 800f840:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f842:	187b      	adds	r3, r7, r1
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	b29b      	uxth	r3, r3
 800f848:	021b      	lsls	r3, r3, #8
 800f84a:	b299      	uxth	r1, r3
 800f84c:	183b      	adds	r3, r7, r0
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	b29a      	uxth	r2, r3
 800f852:	200c      	movs	r0, #12
 800f854:	183b      	adds	r3, r7, r0
 800f856:	188a      	adds	r2, r1, r2
 800f858:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	1839      	adds	r1, r7, r0
 800f85e:	239c      	movs	r3, #156	; 0x9c
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	8809      	ldrh	r1, [r1, #0]
 800f864:	52d1      	strh	r1, [r2, r3]
				break;
 800f866:	e067      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	683a      	ldr	r2, [r7, #0]
 800f86c:	18d2      	adds	r2, r2, r3
 800f86e:	2110      	movs	r1, #16
 800f870:	187b      	adds	r3, r7, r1
 800f872:	7812      	ldrb	r2, [r2, #0]
 800f874:	701a      	strb	r2, [r3, #0]
				Index++;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	3301      	adds	r3, #1
 800f87a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	683a      	ldr	r2, [r7, #0]
 800f880:	18d2      	adds	r2, r2, r3
 800f882:	200f      	movs	r0, #15
 800f884:	183b      	adds	r3, r7, r0
 800f886:	7812      	ldrb	r2, [r2, #0]
 800f888:	701a      	strb	r2, [r3, #0]
				Index++;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	3301      	adds	r3, #1
 800f88e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f890:	187b      	adds	r3, r7, r1
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	b29b      	uxth	r3, r3
 800f896:	021b      	lsls	r3, r3, #8
 800f898:	b299      	uxth	r1, r3
 800f89a:	183b      	adds	r3, r7, r0
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	200c      	movs	r0, #12
 800f8a2:	183b      	adds	r3, r7, r0
 800f8a4:	188a      	adds	r2, r1, r2
 800f8a6:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	1839      	adds	r1, r7, r0
 800f8ac:	239e      	movs	r3, #158	; 0x9e
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	8809      	ldrh	r1, [r1, #0]
 800f8b2:	52d1      	strh	r1, [r2, r3]
				break;
 800f8b4:	e040      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f8b6:	231f      	movs	r3, #31
 800f8b8:	18fb      	adds	r3, r7, r3
 800f8ba:	22fc      	movs	r2, #252	; 0xfc
 800f8bc:	701a      	strb	r2, [r3, #0]
 800f8be:	e03b      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
			}

		} else if (NumberOfWrites <= 4) {
 800f8c0:	2313      	movs	r3, #19
 800f8c2:	18fb      	adds	r3, r7, r3
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d832      	bhi.n	800f930 <VL53L0X_load_tuning_settings+0x21c>
			Address = *(pTuningSettingBuffer + Index);
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	683a      	ldr	r2, [r7, #0]
 800f8ce:	18d2      	adds	r2, r2, r3
 800f8d0:	2312      	movs	r3, #18
 800f8d2:	18fb      	adds	r3, r7, r3
 800f8d4:	7812      	ldrb	r2, [r2, #0]
 800f8d6:	701a      	strb	r2, [r3, #0]
			Index++;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f8de:	2300      	movs	r3, #0
 800f8e0:	61bb      	str	r3, [r7, #24]
 800f8e2:	e00f      	b.n	800f904 <VL53L0X_load_tuning_settings+0x1f0>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	18d3      	adds	r3, r2, r3
 800f8ea:	7819      	ldrb	r1, [r3, #0]
 800f8ec:	2308      	movs	r3, #8
 800f8ee:	18fa      	adds	r2, r7, r3
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	18d3      	adds	r3, r2, r3
 800f8f4:	1c0a      	adds	r2, r1, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	3301      	adds	r3, #1
 800f902:	61bb      	str	r3, [r7, #24]
 800f904:	2113      	movs	r1, #19
 800f906:	187b      	adds	r3, r7, r1
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	69ba      	ldr	r2, [r7, #24]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	dbe9      	blt.n	800f8e4 <VL53L0X_load_tuning_settings+0x1d0>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f910:	187b      	adds	r3, r7, r1
 800f912:	781d      	ldrb	r5, [r3, #0]
 800f914:	231f      	movs	r3, #31
 800f916:	18fc      	adds	r4, r7, r3
 800f918:	2308      	movs	r3, #8
 800f91a:	18fa      	adds	r2, r7, r3
 800f91c:	2312      	movs	r3, #18
 800f91e:	18fb      	adds	r3, r7, r3
 800f920:	7819      	ldrb	r1, [r3, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	002b      	movs	r3, r5
 800f926:	f000 fed5 	bl	80106d4 <VL53L0X_WriteMulti>
 800f92a:	0003      	movs	r3, r0
 800f92c:	7023      	strb	r3, [r4, #0]
 800f92e:	e003      	b.n	800f938 <VL53L0X_load_tuning_settings+0x224>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f930:	231f      	movs	r3, #31
 800f932:	18fb      	adds	r3, r7, r3
 800f934:	22fc      	movs	r2, #252	; 0xfc
 800f936:	701a      	strb	r2, [r3, #0]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	683a      	ldr	r2, [r7, #0]
 800f93c:	18d3      	adds	r3, r2, r3
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d006      	beq.n	800f952 <VL53L0X_load_tuning_settings+0x23e>
 800f944:	231f      	movs	r3, #31
 800f946:	18fb      	adds	r3, r7, r3
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	b25b      	sxtb	r3, r3
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d100      	bne.n	800f952 <VL53L0X_load_tuning_settings+0x23e>
 800f950:	e6ec      	b.n	800f72c <VL53L0X_load_tuning_settings+0x18>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f952:	231f      	movs	r3, #31
 800f954:	18fb      	adds	r3, r7, r3
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	b25b      	sxtb	r3, r3
}
 800f95a:	0018      	movs	r0, r3
 800f95c:	46bd      	mov	sp, r7
 800f95e:	b008      	add	sp, #32
 800f960:	bdb0      	pop	{r4, r5, r7, pc}

0800f962 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f962:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f964:	b089      	sub	sp, #36	; 0x24
 800f966:	af00      	add	r7, sp, #0
 800f968:	60f8      	str	r0, [r7, #12]
 800f96a:	60b9      	str	r1, [r7, #8]
 800f96c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f96e:	251f      	movs	r5, #31
 800f970:	197b      	adds	r3, r7, r5
 800f972:	2200      	movs	r2, #0
 800f974:	701a      	strb	r2, [r3, #0]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f97c:	197c      	adds	r4, r7, r5
 800f97e:	2613      	movs	r6, #19
 800f980:	19ba      	adds	r2, r7, r6
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	0011      	movs	r1, r2
 800f986:	0018      	movs	r0, r3
 800f988:	f7fb ff77 	bl	800b87a <VL53L0X_GetXTalkCompensationEnable>
 800f98c:	0003      	movs	r3, r0
 800f98e:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800f990:	197b      	adds	r3, r7, r5
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	b25b      	sxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d111      	bne.n	800f9be <VL53L0X_get_total_xtalk_rate+0x5c>

		if (xtalkCompEnable) {
 800f99a:	19bb      	adds	r3, r7, r6
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00d      	beq.n	800f9be <VL53L0X_get_total_xtalk_rate+0x5c>

			VL53L0X_GETPARAMETERFIELD(
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	8a9b      	ldrh	r3, [r3, #20]
 800f9ac:	001a      	movs	r2, r3
			totalXtalkMegaCps =
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	4353      	muls	r3, r2
 800f9b2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	3380      	adds	r3, #128	; 0x80
 800f9b8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f9be:	231f      	movs	r3, #31
 800f9c0:	18fb      	adds	r3, r7, r3
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	b25b      	sxtb	r3, r3
}
 800f9c6:	0018      	movs	r0, r3
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	b009      	add	sp, #36	; 0x24
 800f9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9ce <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f9ce:	b5b0      	push	{r4, r5, r7, lr}
 800f9d0:	b086      	sub	sp, #24
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	60f8      	str	r0, [r7, #12]
 800f9d6:	60b9      	str	r1, [r7, #8]
 800f9d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9da:	2517      	movs	r5, #23
 800f9dc:	197b      	adds	r3, r7, r5
 800f9de:	2200      	movs	r2, #0
 800f9e0:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f9ea:	197c      	adds	r4, r7, r5
 800f9ec:	2310      	movs	r3, #16
 800f9ee:	18fa      	adds	r2, r7, r3
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	0018      	movs	r0, r3
 800f9f6:	f7ff ffb4 	bl	800f962 <VL53L0X_get_total_xtalk_rate>
 800f9fa:	0003      	movs	r3, r0
 800f9fc:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f9fe:	197b      	adds	r3, r7, r5
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	b25b      	sxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d105      	bne.n	800fa14 <VL53L0X_get_total_signal_rate+0x46>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	18d2      	adds	r2, r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	601a      	str	r2, [r3, #0]

	return Status;
 800fa14:	2317      	movs	r3, #23
 800fa16:	18fb      	adds	r3, r7, r3
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	b25b      	sxtb	r3, r3
}
 800fa1c:	0018      	movs	r0, r3
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	b006      	add	sp, #24
 800fa22:	bdb0      	pop	{r4, r5, r7, pc}

0800fa24 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b09a      	sub	sp, #104	; 0x68
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800fa32:	2312      	movs	r3, #18
 800fa34:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800fa36:	2380      	movs	r3, #128	; 0x80
 800fa38:	01db      	lsls	r3, r3, #7
 800fa3a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800fa3c:	2342      	movs	r3, #66	; 0x42
 800fa3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800fa40:	2306      	movs	r3, #6
 800fa42:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800fa44:	2307      	movs	r3, #7
 800fa46:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa48:	2343      	movs	r3, #67	; 0x43
 800fa4a:	18fb      	adds	r3, r7, r3
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	23aa      	movs	r3, #170	; 0xaa
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	5ad3      	ldrh	r3, [r2, r3]
	dmaxCalRange_mm =
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	23ac      	movs	r3, #172	; 0xac
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	58d3      	ldr	r3, [r2, r3]
 800fa62:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800fa64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa68:	4353      	muls	r3, r2
 800fa6a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800fa6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa6e:	3380      	adds	r3, #128	; 0x80
 800fa70:	0a1b      	lsrs	r3, r3, #8
 800fa72:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800fa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa78:	4353      	muls	r3, r2
 800fa7a:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d01c      	beq.n	800fac0 <VL53L0X_calc_dmax+0x9c>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	029b      	lsls	r3, r3, #10
 800fa8a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800fa90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa92:	18d3      	adds	r3, r2, r3
 800fa94:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fa9a:	f7f0 fb51 	bl	8000140 <__udivsi3>
 800fa9e:	0003      	movs	r3, r0
 800faa0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800faa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800faa4:	0013      	movs	r3, r2
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	189b      	adds	r3, r3, r2
 800faaa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800faac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faae:	435b      	muls	r3, r3
 800fab0:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800fab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fab4:	2280      	movs	r2, #128	; 0x80
 800fab6:	0212      	lsls	r2, r2, #8
 800fab8:	4694      	mov	ip, r2
 800faba:	4463      	add	r3, ip
 800fabc:	0c1b      	lsrs	r3, r3, #16
 800fabe:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fac4:	4353      	muls	r3, r2
 800fac6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	2280      	movs	r2, #128	; 0x80
 800facc:	0212      	lsls	r2, r2, #8
 800face:	4694      	mov	ip, r2
 800fad0:	4463      	add	r3, ip
 800fad2:	0c1b      	lsrs	r3, r3, #16
 800fad4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	435b      	muls	r3, r3
 800fada:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800fadc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fade:	2280      	movs	r2, #128	; 0x80
 800fae0:	0212      	lsls	r2, r2, #8
 800fae2:	4694      	mov	ip, r2
 800fae4:	4463      	add	r3, ip
 800fae6:	0c1b      	lsrs	r3, r3, #16
 800fae8:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800faea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faec:	085a      	lsrs	r2, r3, #1
 800faee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf0:	18d3      	adds	r3, r2, r3
 800faf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800faf4:	0018      	movs	r0, r3
 800faf6:	f7f0 fb23 	bl	8000140 <__udivsi3>
 800fafa:	0003      	movs	r3, r0
 800fafc:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb02:	4353      	muls	r3, r2
 800fb04:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800fb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb08:	2380      	movs	r3, #128	; 0x80
 800fb0a:	025b      	lsls	r3, r3, #9
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d302      	bcc.n	800fb16 <VL53L0X_calc_dmax+0xf2>
		minSignalNeeded_p3 = 0xfff00000;
 800fb10:	4b5d      	ldr	r3, [pc, #372]	; (800fc88 <VL53L0X_calc_dmax+0x264>)
 800fb12:	663b      	str	r3, [r7, #96]	; 0x60
 800fb14:	e017      	b.n	800fb46 <VL53L0X_calc_dmax+0x122>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800fb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb18:	085a      	lsrs	r2, r3, #1
 800fb1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb1c:	18d3      	adds	r3, r2, r3
 800fb1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb20:	0018      	movs	r0, r3
 800fb22:	f7f0 fb0d 	bl	8000140 <__udivsi3>
 800fb26:	0003      	movs	r3, r0
 800fb28:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800fb2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb2e:	4353      	muls	r3, r2
 800fb30:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800fb32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb34:	2280      	movs	r2, #128	; 0x80
 800fb36:	0212      	lsls	r2, r2, #8
 800fb38:	4694      	mov	ip, r2
 800fb3a:	4463      	add	r3, ip
 800fb3c:	0c1b      	lsrs	r3, r3, #16
 800fb3e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800fb40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb42:	435b      	muls	r3, r3
 800fb44:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800fb46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb48:	039b      	lsls	r3, r3, #14
 800fb4a:	33f5      	adds	r3, #245	; 0xf5
 800fb4c:	33ff      	adds	r3, #255	; 0xff
 800fb4e:	22fa      	movs	r2, #250	; 0xfa
 800fb50:	0091      	lsls	r1, r2, #2
 800fb52:	0018      	movs	r0, r3
 800fb54:	f7f0 faf4 	bl	8000140 <__udivsi3>
 800fb58:	0003      	movs	r3, r0
 800fb5a:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800fb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5e:	435b      	muls	r3, r3
 800fb60:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800fb62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb64:	435b      	muls	r3, r3
 800fb66:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800fb68:	6a3b      	ldr	r3, [r7, #32]
 800fb6a:	3308      	adds	r3, #8
 800fb6c:	091b      	lsrs	r3, r3, #4
 800fb6e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800fb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb72:	6a3b      	ldr	r3, [r7, #32]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800fb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb7a:	0013      	movs	r3, r2
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	189b      	adds	r3, r3, r2
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	2280      	movs	r2, #128	; 0x80
 800fb88:	0192      	lsls	r2, r2, #6
 800fb8a:	4694      	mov	ip, r2
 800fb8c:	4463      	add	r3, ip
 800fb8e:	0b9b      	lsrs	r3, r3, #14
 800fb90:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800fb92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb96:	18d3      	adds	r3, r2, r3
 800fb98:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800fb9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb9c:	085b      	lsrs	r3, r3, #1
 800fb9e:	69ba      	ldr	r2, [r7, #24]
 800fba0:	18d3      	adds	r3, r2, r3
 800fba2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800fba4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fba6:	69b8      	ldr	r0, [r7, #24]
 800fba8:	f7f0 faca 	bl	8000140 <__udivsi3>
 800fbac:	0003      	movs	r3, r0
 800fbae:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	039b      	lsls	r3, r3, #14
 800fbb4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	085b      	lsrs	r3, r3, #1
 800fbba:	69ba      	ldr	r2, [r7, #24]
 800fbbc:	18d3      	adds	r3, r2, r3
 800fbbe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800fbc0:	69f9      	ldr	r1, [r7, #28]
 800fbc2:	69b8      	ldr	r0, [r7, #24]
 800fbc4:	f7f0 fabc 	bl	8000140 <__udivsi3>
 800fbc8:	0003      	movs	r3, r0
 800fbca:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fbd0:	4353      	muls	r3, r2
 800fbd2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	33f5      	adds	r3, #245	; 0xf5
 800fbd8:	33ff      	adds	r3, #255	; 0xff
 800fbda:	22fa      	movs	r2, #250	; 0xfa
 800fbdc:	0091      	lsls	r1, r2, #2
 800fbde:	0018      	movs	r0, r3
 800fbe0:	f7f0 faae 	bl	8000140 <__udivsi3>
 800fbe4:	0003      	movs	r3, r0
 800fbe6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	011b      	lsls	r3, r3, #4
 800fbec:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	33f5      	adds	r3, #245	; 0xf5
 800fbf2:	33ff      	adds	r3, #255	; 0xff
 800fbf4:	22fa      	movs	r2, #250	; 0xfa
 800fbf6:	0091      	lsls	r1, r2, #2
 800fbf8:	0018      	movs	r0, r3
 800fbfa:	f7f0 faa1 	bl	8000140 <__udivsi3>
 800fbfe:	0003      	movs	r3, r0
 800fc00:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800fc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc04:	3380      	adds	r3, #128	; 0x80
 800fc06:	0a1b      	lsrs	r3, r3, #8
 800fc08:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00a      	beq.n	800fc26 <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	085a      	lsrs	r2, r3, #1
 800fc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc16:	18d3      	adds	r3, r2, r3
 800fc18:	6979      	ldr	r1, [r7, #20]
 800fc1a:	0018      	movs	r0, r3
 800fc1c:	f7f0 fa90 	bl	8000140 <__udivsi3>
 800fc20:	0003      	movs	r3, r0
 800fc22:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc24:	e001      	b.n	800fc2a <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800fc26:	2300      	movs	r3, #0
 800fc28:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800fc2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	f7fd ff6f 	bl	800db10 <VL53L0X_isqrt>
 800fc32:	0003      	movs	r3, r0
 800fc34:	613b      	str	r3, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d00a      	beq.n	800fc52 <VL53L0X_calc_dmax+0x22e>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	085a      	lsrs	r2, r3, #1
 800fc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc42:	18d3      	adds	r3, r2, r3
 800fc44:	69b9      	ldr	r1, [r7, #24]
 800fc46:	0018      	movs	r0, r3
 800fc48:	f7f0 fa7a 	bl	8000140 <__udivsi3>
 800fc4c:	0003      	movs	r3, r0
 800fc4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc50:	e001      	b.n	800fc56 <VL53L0X_calc_dmax+0x232>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800fc56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc58:	0018      	movs	r0, r3
 800fc5a:	f7fd ff59 	bl	800db10 <VL53L0X_isqrt>
 800fc5e:	0003      	movs	r3, r0
 800fc60:	65fb      	str	r3, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800fc62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800fc68:	693a      	ldr	r2, [r7, #16]
 800fc6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d902      	bls.n	800fc76 <VL53L0X_calc_dmax+0x252>
		*pdmax_mm = dmaxAmbient;
 800fc70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc74:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800fc76:	2343      	movs	r3, #67	; 0x43
 800fc78:	18fb      	adds	r3, r7, r3
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	b25b      	sxtb	r3, r3
}
 800fc7e:	0018      	movs	r0, r3
 800fc80:	46bd      	mov	sp, r7
 800fc82:	b01a      	add	sp, #104	; 0x68
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	46c0      	nop			; (mov r8, r8)
 800fc88:	fff00000 	.word	0xfff00000

0800fc8c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800fc8c:	b5b0      	push	{r4, r5, r7, lr}
 800fc8e:	b0b4      	sub	sp, #208	; 0xd0
 800fc90:	af04      	add	r7, sp, #16
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800fc9a:	23c8      	movs	r3, #200	; 0xc8
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	2290      	movs	r2, #144	; 0x90
 800fca0:	18ba      	adds	r2, r7, r2
 800fca2:	6013      	str	r3, [r2, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800fca4:	2396      	movs	r3, #150	; 0x96
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	228c      	movs	r2, #140	; 0x8c
 800fcaa:	18b9      	adds	r1, r7, r2
 800fcac:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800fcae:	23c8      	movs	r3, #200	; 0xc8
 800fcb0:	035b      	lsls	r3, r3, #13
 800fcb2:	2188      	movs	r1, #136	; 0x88
 800fcb4:	1879      	adds	r1, r7, r1
 800fcb6:	600b      	str	r3, [r1, #0]
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800fcb8:	4bb5      	ldr	r3, [pc, #724]	; (800ff90 <VL53L0X_calc_sigma_estimate+0x304>)
 800fcba:	2184      	movs	r1, #132	; 0x84
 800fcbc:	1879      	adds	r1, r7, r1
 800fcbe:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800fcc0:	4bb4      	ldr	r3, [pc, #720]	; (800ff94 <VL53L0X_calc_sigma_estimate+0x308>)
 800fcc2:	2180      	movs	r1, #128	; 0x80
 800fcc4:	1879      	adds	r1, r7, r1
 800fcc6:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800fcc8:	23f0      	movs	r3, #240	; 0xf0
 800fcca:	021b      	lsls	r3, r3, #8
 800fccc:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800fcce:	18bb      	adds	r3, r7, r2
 800fcd0:	6819      	ldr	r1, [r3, #0]
 800fcd2:	23f0      	movs	r3, #240	; 0xf0
 800fcd4:	0618      	lsls	r0, r3, #24
 800fcd6:	f7f0 fa33 	bl	8000140 <__udivsi3>
 800fcda:	0003      	movs	r3, r0
 800fcdc:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800fcde:	4bae      	ldr	r3, [pc, #696]	; (800ff98 <VL53L0X_calc_sigma_estimate+0x30c>)
 800fce0:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800fce2:	2380      	movs	r3, #128	; 0x80
 800fce4:	021b      	lsls	r3, r3, #8
 800fce6:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800fce8:	23c8      	movs	r3, #200	; 0xc8
 800fcea:	039b      	lsls	r3, r3, #14
 800fcec:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800fcee:	4bab      	ldr	r3, [pc, #684]	; (800ff9c <VL53L0X_calc_sigma_estimate+0x310>)
 800fcf0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fcf2:	219f      	movs	r1, #159	; 0x9f
 800fcf4:	187b      	adds	r3, r7, r1
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	701a      	strb	r2, [r3, #0]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	691a      	ldr	r2, [r3, #16]
 800fd04:	0013      	movs	r3, r2
 800fd06:	015b      	lsls	r3, r3, #5
 800fd08:	1a9b      	subs	r3, r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	189b      	adds	r3, r3, r2
 800fd0e:	00db      	lsls	r3, r3, #3
	ambientRate_kcps =
 800fd10:	0c1b      	lsrs	r3, r3, #16
 800fd12:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800fd1a:	000d      	movs	r5, r1
 800fd1c:	187c      	adds	r4, r7, r1
 800fd1e:	2310      	movs	r3, #16
 800fd20:	18fa      	adds	r2, r7, r3
 800fd22:	68b9      	ldr	r1, [r7, #8]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	0018      	movs	r0, r3
 800fd28:	f7ff fe51 	bl	800f9ce <VL53L0X_get_total_signal_rate>
 800fd2c:	0003      	movs	r3, r0
 800fd2e:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800fd30:	197c      	adds	r4, r7, r5
 800fd32:	2314      	movs	r3, #20
 800fd34:	18fa      	adds	r2, r7, r3
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	0018      	movs	r0, r3
 800fd3c:	f7ff fe11 	bl	800f962 <VL53L0X_get_total_xtalk_rate>
 800fd40:	0003      	movs	r3, r0
 800fd42:	7023      	strb	r3, [r4, #0]


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	0013      	movs	r3, r2
 800fd48:	015b      	lsls	r3, r3, #5
 800fd4a:	1a9b      	subs	r3, r3, r2
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	189b      	adds	r3, r3, r2
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800fd54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd56:	2280      	movs	r2, #128	; 0x80
 800fd58:	0212      	lsls	r2, r2, #8
 800fd5a:	4694      	mov	ip, r2
 800fd5c:	4463      	add	r3, ip
 800fd5e:	0c1b      	lsrs	r3, r3, #16
 800fd60:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	0013      	movs	r3, r2
 800fd66:	015b      	lsls	r3, r3, #5
 800fd68:	1a9b      	subs	r3, r3, r2
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	189b      	adds	r3, r3, r2
 800fd6e:	00db      	lsls	r3, r3, #3
 800fd70:	21a0      	movs	r1, #160	; 0xa0
 800fd72:	187a      	adds	r2, r7, r1
 800fd74:	6013      	str	r3, [r2, #0]

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800fd76:	187b      	adds	r3, r7, r1
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d902      	bls.n	800fd86 <VL53L0X_calc_sigma_estimate+0xfa>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800fd80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd82:	187a      	adds	r2, r7, r1
 800fd84:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800fd86:	239f      	movs	r3, #159	; 0x9f
 800fd88:	18fb      	adds	r3, r7, r3
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	b25b      	sxtb	r3, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d174      	bne.n	800fe7c <VL53L0X_calc_sigma_estimate+0x1f0>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	22dc      	movs	r2, #220	; 0xdc
 800fd96:	589b      	ldr	r3, [r3, r2]
 800fd98:	20b8      	movs	r0, #184	; 0xb8
 800fd9a:	183a      	adds	r2, r7, r0
 800fd9c:	6013      	str	r3, [r2, #0]
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fd9e:	245b      	movs	r4, #91	; 0x5b
 800fda0:	193b      	adds	r3, r7, r4
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	21e0      	movs	r1, #224	; 0xe0
 800fda6:	5c52      	ldrb	r2, [r2, r1]
 800fda8:	701a      	strb	r2, [r3, #0]
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800fdaa:	193b      	adds	r3, r7, r4
 800fdac:	781a      	ldrb	r2, [r3, #0]
 800fdae:	183b      	adds	r3, r7, r0
 800fdb0:	6819      	ldr	r1, [r3, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	0018      	movs	r0, r3
 800fdb6:	f7fe fcd2 	bl	800e75e <VL53L0X_calc_timeout_mclks>
 800fdba:	0003      	movs	r3, r0
 800fdbc:	657b      	str	r3, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	22e4      	movs	r2, #228	; 0xe4
 800fdc2:	589b      	ldr	r3, [r3, r2]
 800fdc4:	20b4      	movs	r0, #180	; 0xb4
 800fdc6:	183a      	adds	r2, r7, r0
 800fdc8:	6013      	str	r3, [r2, #0]
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fdca:	2553      	movs	r5, #83	; 0x53
 800fdcc:	197b      	adds	r3, r7, r5
 800fdce:	68fa      	ldr	r2, [r7, #12]
 800fdd0:	21e8      	movs	r1, #232	; 0xe8
 800fdd2:	5c52      	ldrb	r2, [r2, r1]
 800fdd4:	701a      	strb	r2, [r3, #0]
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800fdd6:	197b      	adds	r3, r7, r5
 800fdd8:	781a      	ldrb	r2, [r3, #0]
 800fdda:	183b      	adds	r3, r7, r0
 800fddc:	6819      	ldr	r1, [r3, #0]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	0018      	movs	r0, r3
 800fde2:	f7fe fcbc 	bl	800e75e <VL53L0X_calc_timeout_mclks>
 800fde6:	0003      	movs	r3, r0
 800fde8:	64fb      	str	r3, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800fdea:	2303      	movs	r3, #3
 800fdec:	2298      	movs	r2, #152	; 0x98
 800fdee:	18b9      	adds	r1, r7, r2
 800fdf0:	600b      	str	r3, [r1, #0]
		if (finalRangeVcselPCLKS == 8)
 800fdf2:	193b      	adds	r3, r7, r4
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2b08      	cmp	r3, #8
 800fdf8:	d102      	bne.n	800fe00 <VL53L0X_calc_sigma_estimate+0x174>
			vcselWidth = 2;
 800fdfa:	2302      	movs	r3, #2
 800fdfc:	18ba      	adds	r2, r7, r2
 800fdfe:	6013      	str	r3, [r2, #0]


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800fe00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe04:	18d3      	adds	r3, r2, r3
		peakVcselDuration_us = vcselWidth * 2048 *
 800fe06:	2298      	movs	r2, #152	; 0x98
 800fe08:	18ba      	adds	r2, r7, r2
 800fe0a:	6812      	ldr	r2, [r2, #0]
 800fe0c:	4353      	muls	r3, r2
 800fe0e:	02db      	lsls	r3, r3, #11
 800fe10:	2494      	movs	r4, #148	; 0x94
 800fe12:	193a      	adds	r2, r7, r4
 800fe14:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800fe16:	193b      	adds	r3, r7, r4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	33f5      	adds	r3, #245	; 0xf5
 800fe1c:	33ff      	adds	r3, #255	; 0xff
 800fe1e:	22fa      	movs	r2, #250	; 0xfa
 800fe20:	0091      	lsls	r1, r2, #2
 800fe22:	0018      	movs	r0, r3
 800fe24:	f7f0 f98c 	bl	8000140 <__udivsi3>
 800fe28:	0003      	movs	r3, r0
 800fe2a:	193a      	adds	r2, r7, r4
 800fe2c:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us *= cPllPeriod_ps;
 800fe2e:	193b      	adds	r3, r7, r4
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe34:	4353      	muls	r3, r2
 800fe36:	193a      	adds	r2, r7, r4
 800fe38:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800fe3a:	193b      	adds	r3, r7, r4
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	33f5      	adds	r3, #245	; 0xf5
 800fe40:	33ff      	adds	r3, #255	; 0xff
 800fe42:	22fa      	movs	r2, #250	; 0xfa
 800fe44:	0091      	lsls	r1, r2, #2
 800fe46:	0018      	movs	r0, r3
 800fe48:	f7f0 f97a 	bl	8000140 <__udivsi3>
 800fe4c:	0003      	movs	r3, r0
 800fe4e:	0021      	movs	r1, r4
 800fe50:	187a      	adds	r2, r7, r1
 800fe52:	6013      	str	r3, [r2, #0]

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	3380      	adds	r3, #128	; 0x80
 800fe58:	0a1b      	lsrs	r3, r3, #8
 800fe5a:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800fe5c:	693a      	ldr	r2, [r7, #16]
 800fe5e:	187b      	adds	r3, r7, r1
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4353      	muls	r3, r2
 800fe64:	22bc      	movs	r2, #188	; 0xbc
 800fe66:	18b9      	adds	r1, r7, r2
 800fe68:	600b      	str	r3, [r1, #0]
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800fe6a:	18bb      	adds	r3, r7, r2
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	3380      	adds	r3, #128	; 0x80
 800fe70:	0a1b      	lsrs	r3, r3, #8
 800fe72:	18ba      	adds	r2, r7, r2
 800fe74:	6013      	str	r3, [r2, #0]

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	021b      	lsls	r3, r3, #8
 800fe7a:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800fe7c:	229f      	movs	r2, #159	; 0x9f
 800fe7e:	18bb      	adds	r3, r7, r2
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	b25b      	sxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <VL53L0X_calc_sigma_estimate+0x204>
		LOG_FUNCTION_END(Status);
		return Status;
 800fe88:	18bb      	adds	r3, r7, r2
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	b25b      	sxtb	r3, r3
 800fe8e:	e198      	b.n	80101c2 <VL53L0X_calc_sigma_estimate+0x536>
	}

	if (peakSignalRate_kcps == 0) {
 800fe90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10e      	bne.n	800feb4 <VL53L0X_calc_sigma_estimate+0x228>
		*pSigmaEstimate = cSigmaEstMax;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2180      	movs	r1, #128	; 0x80
 800fe9a:	187a      	adds	r2, r7, r1
 800fe9c:	6812      	ldr	r2, [r2, #0]
 800fe9e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	23a0      	movs	r3, #160	; 0xa0
 800fea4:	005b      	lsls	r3, r3, #1
 800fea6:	1879      	adds	r1, r7, r1
 800fea8:	6809      	ldr	r1, [r1, #0]
 800feaa:	50d1      	str	r1, [r2, r3]
		*pDmax_mm = 0;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2200      	movs	r2, #0
 800feb0:	601a      	str	r2, [r3, #0]
 800feb2:	e182      	b.n	80101ba <VL53L0X_calc_sigma_estimate+0x52e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800feb4:	22bc      	movs	r2, #188	; 0xbc
 800feb6:	18bb      	adds	r3, r7, r2
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d102      	bne.n	800fec4 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800febe:	2301      	movs	r3, #1
 800fec0:	18ba      	adds	r2, r7, r2
 800fec2:	6013      	str	r3, [r2, #0]

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800fec4:	2390      	movs	r3, #144	; 0x90
 800fec6:	18fb      	adds	r3, r7, r3
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800fecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fece:	041b      	lsls	r3, r3, #16
 800fed0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fed2:	0018      	movs	r0, r3
 800fed4:	f7f0 f934 	bl	8000140 <__udivsi3>
 800fed8:	0003      	movs	r3, r0
 800feda:	21b0      	movs	r1, #176	; 0xb0
 800fedc:	187a      	adds	r2, r7, r1
 800fede:	6013      	str	r3, [r2, #0]
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800fee0:	187b      	adds	r3, r7, r1
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d902      	bls.n	800fef0 <VL53L0X_calc_sigma_estimate+0x264>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800feea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800feec:	187a      	adds	r2, r7, r1
 800feee:	6013      	str	r3, [r2, #0]
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800fef0:	21b0      	movs	r1, #176	; 0xb0
 800fef2:	187b      	adds	r3, r7, r1
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	228c      	movs	r2, #140	; 0x8c
 800fef8:	18ba      	adds	r2, r7, r2
 800fefa:	6812      	ldr	r2, [r2, #0]
 800fefc:	4353      	muls	r3, r2
 800fefe:	187a      	adds	r2, r7, r1
 800ff00:	6013      	str	r3, [r2, #0]

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ff02:	23bc      	movs	r3, #188	; 0xbc
 800ff04:	18fb      	adds	r3, r7, r3
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	0013      	movs	r3, r2
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	0018      	movs	r0, r3
 800ff12:	f7fd fdfd 	bl	800db10 <VL53L0X_isqrt>
 800ff16:	0003      	movs	r3, r0
 800ff18:	005b      	lsls	r3, r3, #1
 800ff1a:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	891b      	ldrh	r3, [r3, #8]
 800ff20:	001a      	movs	r2, r3
 800ff22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff24:	4353      	muls	r3, r2
 800ff26:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ff28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff2a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ff2c:	23a0      	movs	r3, #160	; 0xa0
 800ff2e:	18fb      	adds	r3, r7, r3
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ff34:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ff36:	33f5      	adds	r3, #245	; 0xf5
 800ff38:	33ff      	adds	r3, #255	; 0xff
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ff3a:	22fa      	movs	r2, #250	; 0xfa
 800ff3c:	0091      	lsls	r1, r2, #2
 800ff3e:	0018      	movs	r0, r3
 800ff40:	f7f0 f8fe 	bl	8000140 <__udivsi3>
 800ff44:	0003      	movs	r3, r0
 800ff46:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ff48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff4a:	041b      	lsls	r3, r3, #16
 800ff4c:	33f5      	adds	r3, #245	; 0xf5
 800ff4e:	33ff      	adds	r3, #255	; 0xff
 800ff50:	22fa      	movs	r2, #250	; 0xfa
 800ff52:	0091      	lsls	r1, r2, #2
 800ff54:	0018      	movs	r0, r3
 800ff56:	f7f0 f8f3 	bl	8000140 <__udivsi3>
 800ff5a:	0003      	movs	r3, r0
 800ff5c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ff5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff60:	021b      	lsls	r3, r3, #8
 800ff62:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ff64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ff68:	f7f0 f8ea 	bl	8000140 <__udivsi3>
 800ff6c:	0003      	movs	r3, r0
 800ff6e:	17da      	asrs	r2, r3, #31
 800ff70:	189b      	adds	r3, r3, r2
 800ff72:	4053      	eors	r3, r2
 800ff74:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ff76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff78:	021b      	lsls	r3, r3, #8
 800ff7a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	7e1b      	ldrb	r3, [r3, #24]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00d      	beq.n	800ffa0 <VL53L0X_calc_sigma_estimate+0x314>
			pwMult = 1 << 16;
 800ff84:	2380      	movs	r3, #128	; 0x80
 800ff86:	025b      	lsls	r3, r3, #9
 800ff88:	22ac      	movs	r2, #172	; 0xac
 800ff8a:	18ba      	adds	r2, r7, r2
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	e039      	b.n	8010004 <VL53L0X_calc_sigma_estimate+0x378>
 800ff90:	0000125c 	.word	0x0000125c
 800ff94:	028f87ae 	.word	0x028f87ae
 800ff98:	0006999a 	.word	0x0006999a
 800ff9c:	00000677 	.word	0x00000677
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ffa0:	2384      	movs	r3, #132	; 0x84
 800ffa2:	18fb      	adds	r3, r7, r3
 800ffa4:	6819      	ldr	r1, [r3, #0]
 800ffa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ffa8:	f7f0 f8ca 	bl	8000140 <__udivsi3>
 800ffac:	0003      	movs	r3, r0
 800ffae:	21ac      	movs	r1, #172	; 0xac
 800ffb0:	187a      	adds	r2, r7, r1
 800ffb2:	6013      	str	r3, [r2, #0]
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ffb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb6:	2280      	movs	r2, #128	; 0x80
 800ffb8:	0252      	lsls	r2, r2, #9
 800ffba:	1ad2      	subs	r2, r2, r3
 800ffbc:	187b      	adds	r3, r7, r1
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4353      	muls	r3, r2
 800ffc2:	187a      	adds	r2, r7, r1
 800ffc4:	6013      	str	r3, [r2, #0]

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800ffc6:	187b      	adds	r3, r7, r1
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ffcc:	18d3      	adds	r3, r2, r3
 800ffce:	0c1b      	lsrs	r3, r3, #16
 800ffd0:	000a      	movs	r2, r1
 800ffd2:	18b9      	adds	r1, r7, r2
 800ffd4:	600b      	str	r3, [r1, #0]

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ffd6:	18bb      	adds	r3, r7, r2
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2180      	movs	r1, #128	; 0x80
 800ffdc:	0249      	lsls	r1, r1, #9
 800ffde:	468c      	mov	ip, r1
 800ffe0:	4463      	add	r3, ip
 800ffe2:	18b9      	adds	r1, r7, r2
 800ffe4:	600b      	str	r3, [r1, #0]
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ffe6:	18bb      	adds	r3, r7, r2
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	085b      	lsrs	r3, r3, #1
 800ffec:	18b9      	adds	r1, r7, r2
 800ffee:	600b      	str	r3, [r1, #0]
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800fff0:	18bb      	adds	r3, r7, r2
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	435b      	muls	r3, r3
 800fff6:	18b9      	adds	r1, r7, r2
 800fff8:	600b      	str	r3, [r1, #0]

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800fffa:	18bb      	adds	r3, r7, r2
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	0b9b      	lsrs	r3, r3, #14
 8010000:	18ba      	adds	r2, r7, r2
 8010002:	6013      	str	r3, [r2, #0]
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8010004:	23ac      	movs	r3, #172	; 0xac
 8010006:	18fb      	adds	r3, r7, r3
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801000c:	4353      	muls	r3, r2
 801000e:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8010010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010012:	2280      	movs	r2, #128	; 0x80
 8010014:	0212      	lsls	r2, r2, #8
 8010016:	4694      	mov	ip, r2
 8010018:	4463      	add	r3, ip
 801001a:	0c1b      	lsrs	r3, r3, #16
 801001c:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 801001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010020:	435b      	muls	r3, r3
 8010022:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8010024:	23b0      	movs	r3, #176	; 0xb0
 8010026:	18fb      	adds	r3, r7, r3
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	2280      	movs	r2, #128	; 0x80
 8010030:	0212      	lsls	r2, r2, #8
 8010032:	4694      	mov	ip, r2
 8010034:	4463      	add	r3, ip
 8010036:	0c1b      	lsrs	r3, r3, #16
 8010038:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 801003a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003c:	435b      	muls	r3, r3
 801003e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8010040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010044:	18d3      	adds	r3, r2, r3
 8010046:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8010048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004a:	0018      	movs	r0, r3
 801004c:	f7fd fd60 	bl	800db10 <VL53L0X_isqrt>
 8010050:	0003      	movs	r3, r0
 8010052:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8010054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010056:	041b      	lsls	r3, r3, #16
 8010058:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 801005a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005c:	3332      	adds	r3, #50	; 0x32
 801005e:	2164      	movs	r1, #100	; 0x64
 8010060:	0018      	movs	r0, r3
 8010062:	f7f0 f86d 	bl	8000140 <__udivsi3>
 8010066:	0003      	movs	r3, r0
 8010068:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801006a:	0018      	movs	r0, r3
 801006c:	f7f0 f868 	bl	8000140 <__udivsi3>
 8010070:	0003      	movs	r3, r0
 8010072:	21a8      	movs	r1, #168	; 0xa8
 8010074:	187a      	adds	r2, r7, r1
 8010076:	6013      	str	r3, [r2, #0]
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8010078:	187b      	adds	r3, r7, r1
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a53      	ldr	r2, [pc, #332]	; (80101cc <VL53L0X_calc_sigma_estimate+0x540>)
 801007e:	4353      	muls	r3, r2
 8010080:	000a      	movs	r2, r1
 8010082:	18b9      	adds	r1, r7, r2
 8010084:	600b      	str	r3, [r1, #0]

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8010086:	18bb      	adds	r3, r7, r2
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4951      	ldr	r1, [pc, #324]	; (80101d0 <VL53L0X_calc_sigma_estimate+0x544>)
 801008c:	468c      	mov	ip, r1
 801008e:	4463      	add	r3, ip
 8010090:	18b9      	adds	r1, r7, r2
 8010092:	600b      	str	r3, [r1, #0]
		sigmaEstRtn		 /= 10000;
 8010094:	0014      	movs	r4, r2
 8010096:	18bb      	adds	r3, r7, r2
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	494e      	ldr	r1, [pc, #312]	; (80101d4 <VL53L0X_calc_sigma_estimate+0x548>)
 801009c:	0018      	movs	r0, r3
 801009e:	f7f0 f84f 	bl	8000140 <__udivsi3>
 80100a2:	0003      	movs	r3, r0
 80100a4:	0021      	movs	r1, r4
 80100a6:	187a      	adds	r2, r7, r1
 80100a8:	6013      	str	r3, [r2, #0]

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80100aa:	187b      	adds	r3, r7, r1
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d902      	bls.n	80100ba <VL53L0X_calc_sigma_estimate+0x42e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80100b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80100b6:	187a      	adds	r2, r7, r1
 80100b8:	6013      	str	r3, [r2, #0]
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80100ba:	23b8      	movs	r3, #184	; 0xb8
 80100bc:	18fb      	adds	r3, r7, r3
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	23b4      	movs	r3, #180	; 0xb4
 80100c2:	18fb      	adds	r3, r7, r3
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	18d3      	adds	r3, r2, r3
 80100c8:	33f5      	adds	r3, #245	; 0xf5
 80100ca:	33ff      	adds	r3, #255	; 0xff
		finalRangeIntegrationTimeMilliSecs =
 80100cc:	22fa      	movs	r2, #250	; 0xfa
 80100ce:	0091      	lsls	r1, r2, #2
 80100d0:	0018      	movs	r0, r3
 80100d2:	f7f0 f835 	bl	8000140 <__udivsi3>
 80100d6:	0003      	movs	r3, r0
 80100d8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80100de:	2388      	movs	r3, #136	; 0x88
 80100e0:	18fb      	adds	r3, r7, r3
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	18d3      	adds	r3, r2, r3
 80100e6:	6a39      	ldr	r1, [r7, #32]
 80100e8:	0018      	movs	r0, r3
 80100ea:	f7f0 f829 	bl	8000140 <__udivsi3>
 80100ee:	0003      	movs	r3, r0
 80100f0:	0018      	movs	r0, r3
 80100f2:	f7fd fd0d 	bl	800db10 <VL53L0X_isqrt>
 80100f6:	0003      	movs	r3, r0
 80100f8:	61fb      	str	r3, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	021b      	lsls	r3, r3, #8
 80100fe:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	33f5      	adds	r3, #245	; 0xf5
 8010104:	33ff      	adds	r3, #255	; 0xff
 8010106:	22fa      	movs	r2, #250	; 0xfa
 8010108:	0091      	lsls	r1, r2, #2
 801010a:	0018      	movs	r0, r3
 801010c:	f7f0 f818 	bl	8000140 <__udivsi3>
 8010110:	0003      	movs	r3, r0
 8010112:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8010114:	23a8      	movs	r3, #168	; 0xa8
 8010116:	18fb      	adds	r3, r7, r3
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	435b      	muls	r3, r3
 801011c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	435b      	muls	r3, r3
 8010122:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8010124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010128:	18d3      	adds	r3, r2, r3
 801012a:	0018      	movs	r0, r3
 801012c:	f7fd fcf0 	bl	800db10 <VL53L0X_isqrt>
 8010130:	0003      	movs	r3, r0
 8010132:	61bb      	str	r3, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8010134:	69ba      	ldr	r2, [r7, #24]
 8010136:	0013      	movs	r3, r2
 8010138:	015b      	lsls	r3, r3, #5
 801013a:	1a9b      	subs	r3, r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	189b      	adds	r3, r3, r2
 8010140:	00db      	lsls	r3, r3, #3
 8010142:	22a4      	movs	r2, #164	; 0xa4
 8010144:	18b9      	adds	r1, r7, r2
 8010146:	600b      	str	r3, [r1, #0]

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8010148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00b      	beq.n	8010166 <VL53L0X_calc_sigma_estimate+0x4da>
 801014e:	23bc      	movs	r3, #188	; 0xbc
 8010150:	18fb      	adds	r3, r7, r3
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d006      	beq.n	8010166 <VL53L0X_calc_sigma_estimate+0x4da>
 8010158:	18bb      	adds	r3, r7, r2
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	2380      	movs	r3, #128	; 0x80
 801015e:	18fb      	adds	r3, r7, r3
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	429a      	cmp	r2, r3
 8010164:	d905      	bls.n	8010172 <VL53L0X_calc_sigma_estimate+0x4e6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8010166:	2380      	movs	r3, #128	; 0x80
 8010168:	18fb      	adds	r3, r7, r3
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	22a4      	movs	r2, #164	; 0xa4
 801016e:	18ba      	adds	r2, r7, r2
 8010170:	6013      	str	r3, [r2, #0]
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	22a4      	movs	r2, #164	; 0xa4
 8010176:	18ba      	adds	r2, r7, r2
 8010178:	6812      	ldr	r2, [r2, #0]
 801017a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6819      	ldr	r1, [r3, #0]
 8010180:	68fa      	ldr	r2, [r7, #12]
 8010182:	23a0      	movs	r3, #160	; 0xa0
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	50d1      	str	r1, [r2, r3]
		Status = VL53L0X_calc_dmax(
 8010188:	6939      	ldr	r1, [r7, #16]
 801018a:	239f      	movs	r3, #159	; 0x9f
 801018c:	18fc      	adds	r4, r7, r3
 801018e:	23ac      	movs	r3, #172	; 0xac
 8010190:	18fb      	adds	r3, r7, r3
 8010192:	681d      	ldr	r5, [r3, #0]
 8010194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	9303      	str	r3, [sp, #12]
 801019c:	2394      	movs	r3, #148	; 0x94
 801019e:	18fb      	adds	r3, r7, r3
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	23b0      	movs	r3, #176	; 0xb0
 80101a6:	18fb      	adds	r3, r7, r3
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	9301      	str	r3, [sp, #4]
 80101ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	002b      	movs	r3, r5
 80101b2:	f7ff fc37 	bl	800fa24 <VL53L0X_calc_dmax>
 80101b6:	0003      	movs	r3, r0
 80101b8:	7023      	strb	r3, [r4, #0]
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80101ba:	239f      	movs	r3, #159	; 0x9f
 80101bc:	18fb      	adds	r3, r7, r3
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b25b      	sxtb	r3, r3
}
 80101c2:	0018      	movs	r0, r3
 80101c4:	46bd      	mov	sp, r7
 80101c6:	b030      	add	sp, #192	; 0xc0
 80101c8:	bdb0      	pop	{r4, r5, r7, pc}
 80101ca:	46c0      	nop			; (mov r8, r8)
 80101cc:	00000bb5 	.word	0x00000bb5
 80101d0:	00001388 	.word	0x00001388
 80101d4:	00002710 	.word	0x00002710

080101d8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80101d8:	b5b0      	push	{r4, r5, r7, lr}
 80101da:	b090      	sub	sp, #64	; 0x40
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	0008      	movs	r0, r1
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	0019      	movs	r1, r3
 80101e6:	240b      	movs	r4, #11
 80101e8:	193b      	adds	r3, r7, r4
 80101ea:	1c02      	adds	r2, r0, #0
 80101ec:	701a      	strb	r2, [r3, #0]
 80101ee:	2308      	movs	r3, #8
 80101f0:	18fb      	adds	r3, r7, r3
 80101f2:	1c0a      	adds	r2, r1, #0
 80101f4:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80101f6:	233f      	movs	r3, #63	; 0x3f
 80101f8:	18fb      	adds	r3, r7, r3
 80101fa:	2200      	movs	r2, #0
 80101fc:	701a      	strb	r2, [r3, #0]
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80101fe:	233d      	movs	r3, #61	; 0x3d
 8010200:	18fb      	adds	r3, r7, r3
 8010202:	2200      	movs	r2, #0
 8010204:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipflag = 0;
 8010206:	233c      	movs	r3, #60	; 0x3c
 8010208:	18fb      	adds	r3, r7, r3
 801020a:	2200      	movs	r2, #0
 801020c:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdflag = 0;
 801020e:	233b      	movs	r3, #59	; 0x3b
 8010210:	18fb      	adds	r3, r7, r3
 8010212:	2200      	movs	r2, #0
 8010214:	701a      	strb	r2, [r3, #0]
	uint8_t SigmaLimitCheckEnable = 0;
 8010216:	232b      	movs	r3, #43	; 0x2b
 8010218:	18fb      	adds	r3, r7, r3
 801021a:	2200      	movs	r2, #0
 801021c:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 801021e:	232a      	movs	r3, #42	; 0x2a
 8010220:	18fb      	adds	r3, r7, r3
 8010222:	2200      	movs	r2, #0
 8010224:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8010226:	2329      	movs	r3, #41	; 0x29
 8010228:	18fb      	adds	r3, r7, r3
 801022a:	2200      	movs	r2, #0
 801022c:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 801022e:	2328      	movs	r3, #40	; 0x28
 8010230:	18fb      	adds	r3, r7, r3
 8010232:	2200      	movs	r2, #0
 8010234:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8010236:	2132      	movs	r1, #50	; 0x32
 8010238:	187b      	adds	r3, r7, r1
 801023a:	2200      	movs	r2, #0
 801023c:	701a      	strb	r2, [r3, #0]
	uint16_t tmpWord = 0;
 801023e:	2316      	movs	r3, #22
 8010240:	18fb      	adds	r3, r7, r3
 8010242:	2200      	movs	r2, #0
 8010244:	801a      	strh	r2, [r3, #0]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 801024a:	193b      	adds	r3, r7, r4
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	10db      	asrs	r3, r3, #3
 8010250:	b2da      	uxtb	r2, r3
 8010252:	0008      	movs	r0, r1
 8010254:	187b      	adds	r3, r7, r1
 8010256:	210f      	movs	r1, #15
 8010258:	400a      	ands	r2, r1
 801025a:	701a      	strb	r2, [r3, #0]

	if (DeviceRangeStatusInternal == 0 ||
 801025c:	0002      	movs	r2, r0
 801025e:	18bb      	adds	r3, r7, r2
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d017      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
 8010266:	18bb      	adds	r3, r7, r2
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	2b05      	cmp	r3, #5
 801026c:	d013      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 5 ||
 801026e:	18bb      	adds	r3, r7, r2
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	2b07      	cmp	r3, #7
 8010274:	d00f      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 7 ||
 8010276:	18bb      	adds	r3, r7, r2
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b0c      	cmp	r3, #12
 801027c:	d00b      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 12 ||
 801027e:	18bb      	adds	r3, r7, r2
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	2b0d      	cmp	r3, #13
 8010284:	d007      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 13 ||
 8010286:	18bb      	adds	r3, r7, r2
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	2b0e      	cmp	r3, #14
 801028c:	d003      	beq.n	8010296 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 14 ||
 801028e:	18bb      	adds	r3, r7, r2
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2b0f      	cmp	r3, #15
 8010294:	d104      	bne.n	80102a0 <VL53L0X_get_pal_range_status+0xc8>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8010296:	233e      	movs	r3, #62	; 0x3e
 8010298:	18fb      	adds	r3, r7, r3
 801029a:	2201      	movs	r2, #1
 801029c:	701a      	strb	r2, [r3, #0]
 801029e:	e003      	b.n	80102a8 <VL53L0X_get_pal_range_status+0xd0>
	} else {
		NoneFlag = 0;
 80102a0:	233e      	movs	r3, #62	; 0x3e
 80102a2:	18fb      	adds	r3, r7, r3
 80102a4:	2200      	movs	r2, #0
 80102a6:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80102a8:	223f      	movs	r2, #63	; 0x3f
 80102aa:	18bb      	adds	r3, r7, r2
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	b25b      	sxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d109      	bne.n	80102c8 <VL53L0X_get_pal_range_status+0xf0>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80102b4:	18bc      	adds	r4, r7, r2
 80102b6:	232b      	movs	r3, #43	; 0x2b
 80102b8:	18fa      	adds	r2, r7, r3
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2100      	movs	r1, #0
 80102be:	0018      	movs	r0, r3
 80102c0:	f7fb fbec 	bl	800ba9c <VL53L0X_GetLimitCheckEnable>
 80102c4:	0003      	movs	r3, r0
 80102c6:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80102c8:	232b      	movs	r3, #43	; 0x2b
 80102ca:	18fb      	adds	r3, r7, r3
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d034      	beq.n	801033c <VL53L0X_get_pal_range_status+0x164>
 80102d2:	253f      	movs	r5, #63	; 0x3f
 80102d4:	197b      	adds	r3, r7, r5
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	b25b      	sxtb	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d12e      	bne.n	801033c <VL53L0X_get_pal_range_status+0x164>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80102de:	197c      	adds	r4, r7, r5
 80102e0:	2310      	movs	r3, #16
 80102e2:	18fb      	adds	r3, r7, r3
 80102e4:	2224      	movs	r2, #36	; 0x24
 80102e6:	18ba      	adds	r2, r7, r2
 80102e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f7ff fcce 	bl	800fc8c <VL53L0X_calc_sigma_estimate>
 80102f0:	0003      	movs	r3, r0
 80102f2:	7023      	strb	r3, [r4, #0]
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80102f4:	197b      	adds	r3, r7, r5
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	b25b      	sxtb	r3, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d103      	bne.n	8010306 <VL53L0X_get_pal_range_status+0x12e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	b29a      	uxth	r2, r3
 8010302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010304:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8010306:	223f      	movs	r2, #63	; 0x3f
 8010308:	18bb      	adds	r3, r7, r2
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	b25b      	sxtb	r3, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d114      	bne.n	801033c <VL53L0X_get_pal_range_status+0x164>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8010312:	18bc      	adds	r4, r7, r2
 8010314:	2320      	movs	r3, #32
 8010316:	18fa      	adds	r2, r7, r3
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2100      	movs	r1, #0
 801031c:	0018      	movs	r0, r3
 801031e:	f7fb fc61 	bl	800bbe4 <VL53L0X_GetLimitCheckValue>
 8010322:	0003      	movs	r3, r0
 8010324:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8010326:	6a3b      	ldr	r3, [r7, #32]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d007      	beq.n	801033c <VL53L0X_get_pal_range_status+0x164>
				(SigmaEstimate > SigmaLimitValue))
 801032c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d903      	bls.n	801033c <VL53L0X_get_pal_range_status+0x164>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8010334:	233d      	movs	r3, #61	; 0x3d
 8010336:	18fb      	adds	r3, r7, r3
 8010338:	2201      	movs	r2, #1
 801033a:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 801033c:	223f      	movs	r2, #63	; 0x3f
 801033e:	18bb      	adds	r3, r7, r2
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	b25b      	sxtb	r3, r3
 8010344:	2b00      	cmp	r3, #0
 8010346:	d109      	bne.n	801035c <VL53L0X_get_pal_range_status+0x184>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8010348:	18bc      	adds	r4, r7, r2
 801034a:	2329      	movs	r3, #41	; 0x29
 801034c:	18fa      	adds	r2, r7, r3
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2102      	movs	r1, #2
 8010352:	0018      	movs	r0, r3
 8010354:	f7fb fba2 	bl	800ba9c <VL53L0X_GetLimitCheckEnable>
 8010358:	0003      	movs	r3, r0
 801035a:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 801035c:	2329      	movs	r3, #41	; 0x29
 801035e:	18fb      	adds	r3, r7, r3
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d051      	beq.n	801040a <VL53L0X_get_pal_range_status+0x232>
 8010366:	253f      	movs	r5, #63	; 0x3f
 8010368:	197b      	adds	r3, r7, r5
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	b25b      	sxtb	r3, r3
 801036e:	2b00      	cmp	r3, #0
 8010370:	d14b      	bne.n	801040a <VL53L0X_get_pal_range_status+0x232>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8010372:	197c      	adds	r4, r7, r5
 8010374:	231c      	movs	r3, #28
 8010376:	18fa      	adds	r2, r7, r3
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2102      	movs	r1, #2
 801037c:	0018      	movs	r0, r3
 801037e:	f7fb fc31 	bl	800bbe4 <VL53L0X_GetLimitCheckValue>
 8010382:	0003      	movs	r3, r0
 8010384:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8010386:	197b      	adds	r3, r7, r5
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	b25b      	sxtb	r3, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	d108      	bne.n	80103a2 <VL53L0X_get_pal_range_status+0x1ca>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8010390:	197c      	adds	r4, r7, r5
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2201      	movs	r2, #1
 8010396:	21ff      	movs	r1, #255	; 0xff
 8010398:	0018      	movs	r0, r3
 801039a:	f000 fa0d 	bl	80107b8 <VL53L0X_WrByte>
 801039e:	0003      	movs	r3, r0
 80103a0:	7023      	strb	r3, [r4, #0]

		if (Status == VL53L0X_ERROR_NONE)
 80103a2:	223f      	movs	r2, #63	; 0x3f
 80103a4:	18bb      	adds	r3, r7, r2
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	b25b      	sxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d109      	bne.n	80103c2 <VL53L0X_get_pal_range_status+0x1ea>
			Status = VL53L0X_RdWord(Dev,
 80103ae:	18bc      	adds	r4, r7, r2
 80103b0:	2316      	movs	r3, #22
 80103b2:	18fa      	adds	r2, r7, r3
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	21b6      	movs	r1, #182	; 0xb6
 80103b8:	0018      	movs	r0, r3
 80103ba:	f000 fae1 	bl	8010980 <VL53L0X_RdWord>
 80103be:	0003      	movs	r3, r0
 80103c0:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80103c2:	223f      	movs	r2, #63	; 0x3f
 80103c4:	18bb      	adds	r3, r7, r2
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	b25b      	sxtb	r3, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d108      	bne.n	80103e0 <VL53L0X_get_pal_range_status+0x208>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80103ce:	18bc      	adds	r4, r7, r2
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2200      	movs	r2, #0
 80103d4:	21ff      	movs	r1, #255	; 0xff
 80103d6:	0018      	movs	r0, r3
 80103d8:	f000 f9ee 	bl	80107b8 <VL53L0X_WrByte>
 80103dc:	0003      	movs	r3, r0
 80103de:	7023      	strb	r3, [r4, #0]

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80103e0:	2316      	movs	r3, #22
 80103e2:	18fb      	adds	r3, r7, r3
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	025b      	lsls	r3, r3, #9
 80103e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	23a4      	movs	r3, #164	; 0xa4
 80103ee:	005b      	lsls	r3, r3, #1
 80103f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103f2:	50d1      	str	r1, [r2, r3]

		if ((SignalRefClipValue > 0) &&
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d007      	beq.n	801040a <VL53L0X_get_pal_range_status+0x232>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80103fa:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80103fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103fe:	429a      	cmp	r2, r3
 8010400:	d903      	bls.n	801040a <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8010402:	233c      	movs	r3, #60	; 0x3c
 8010404:	18fb      	adds	r3, r7, r3
 8010406:	2201      	movs	r2, #1
 8010408:	701a      	strb	r2, [r3, #0]
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 801040a:	223f      	movs	r2, #63	; 0x3f
 801040c:	18bb      	adds	r3, r7, r2
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	b25b      	sxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	d109      	bne.n	801042a <VL53L0X_get_pal_range_status+0x252>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8010416:	18bc      	adds	r4, r7, r2
 8010418:	2328      	movs	r3, #40	; 0x28
 801041a:	18fa      	adds	r2, r7, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2103      	movs	r1, #3
 8010420:	0018      	movs	r0, r3
 8010422:	f7fb fb3b 	bl	800ba9c <VL53L0X_GetLimitCheckEnable>
 8010426:	0003      	movs	r3, r0
 8010428:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 801042a:	2328      	movs	r3, #40	; 0x28
 801042c:	18fb      	adds	r3, r7, r3
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d02e      	beq.n	8010492 <VL53L0X_get_pal_range_status+0x2ba>
 8010434:	233f      	movs	r3, #63	; 0x3f
 8010436:	18fb      	adds	r3, r7, r3
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	b25b      	sxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d128      	bne.n	8010492 <VL53L0X_get_pal_range_status+0x2ba>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8010440:	2308      	movs	r3, #8
 8010442:	18fb      	adds	r3, r7, r3
 8010444:	881b      	ldrh	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d102      	bne.n	8010450 <VL53L0X_get_pal_range_status+0x278>
			SignalRatePerSpad = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	637b      	str	r3, [r7, #52]	; 0x34
 801044e:	e00a      	b.n	8010466 <VL53L0X_get_pal_range_status+0x28e>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	021a      	lsls	r2, r3, #8
 8010454:	2308      	movs	r3, #8
 8010456:	18fb      	adds	r3, r7, r3
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	0019      	movs	r1, r3
 801045c:	0010      	movs	r0, r2
 801045e:	f7ef fe6f 	bl	8000140 <__udivsi3>
 8010462:	0003      	movs	r3, r0
 8010464:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8010466:	233f      	movs	r3, #63	; 0x3f
 8010468:	18fc      	adds	r4, r7, r3
 801046a:	2318      	movs	r3, #24
 801046c:	18fa      	adds	r2, r7, r3
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2103      	movs	r1, #3
 8010472:	0018      	movs	r0, r3
 8010474:	f7fb fbb6 	bl	800bbe4 <VL53L0X_GetLimitCheckValue>
 8010478:	0003      	movs	r3, r0
 801047a:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d007      	beq.n	8010492 <VL53L0X_get_pal_range_status+0x2ba>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8010482:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8010484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010486:	429a      	cmp	r2, r3
 8010488:	d203      	bcs.n	8010492 <VL53L0X_get_pal_range_status+0x2ba>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 801048a:	233b      	movs	r3, #59	; 0x3b
 801048c:	18fb      	adds	r3, r7, r3
 801048e:	2201      	movs	r2, #1
 8010490:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010492:	233f      	movs	r3, #63	; 0x3f
 8010494:	18fb      	adds	r3, r7, r3
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	b25b      	sxtb	r3, r3
 801049a:	2b00      	cmp	r3, #0
 801049c:	d152      	bne.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		if (NoneFlag == 1) {
 801049e:	233e      	movs	r3, #62	; 0x3e
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d103      	bne.n	80104b0 <VL53L0X_get_pal_range_status+0x2d8>
			*pPalRangeStatus = 255;	 /* NONE */
 80104a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104aa:	22ff      	movs	r2, #255	; 0xff
 80104ac:	701a      	strb	r2, [r3, #0]
 80104ae:	e049      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 1 ||
 80104b0:	2232      	movs	r2, #50	; 0x32
 80104b2:	18bb      	adds	r3, r7, r2
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d007      	beq.n	80104ca <VL53L0X_get_pal_range_status+0x2f2>
 80104ba:	18bb      	adds	r3, r7, r2
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d003      	beq.n	80104ca <VL53L0X_get_pal_range_status+0x2f2>
					DeviceRangeStatusInternal == 2 ||
 80104c2:	18bb      	adds	r3, r7, r2
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b03      	cmp	r3, #3
 80104c8:	d103      	bne.n	80104d2 <VL53L0X_get_pal_range_status+0x2fa>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80104ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104cc:	2205      	movs	r2, #5
 80104ce:	701a      	strb	r2, [r3, #0]
 80104d0:	e038      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 6 ||
 80104d2:	2232      	movs	r2, #50	; 0x32
 80104d4:	18bb      	adds	r3, r7, r2
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	2b06      	cmp	r3, #6
 80104da:	d003      	beq.n	80104e4 <VL53L0X_get_pal_range_status+0x30c>
 80104dc:	18bb      	adds	r3, r7, r2
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	2b09      	cmp	r3, #9
 80104e2:	d103      	bne.n	80104ec <VL53L0X_get_pal_range_status+0x314>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80104e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e6:	2204      	movs	r2, #4
 80104e8:	701a      	strb	r2, [r3, #0]
 80104ea:	e02b      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 8 ||
 80104ec:	2232      	movs	r2, #50	; 0x32
 80104ee:	18bb      	adds	r3, r7, r2
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	2b08      	cmp	r3, #8
 80104f4:	d008      	beq.n	8010508 <VL53L0X_get_pal_range_status+0x330>
 80104f6:	18bb      	adds	r3, r7, r2
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b0a      	cmp	r3, #10
 80104fc:	d004      	beq.n	8010508 <VL53L0X_get_pal_range_status+0x330>
					DeviceRangeStatusInternal == 10 ||
 80104fe:	233c      	movs	r3, #60	; 0x3c
 8010500:	18fb      	adds	r3, r7, r3
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d103      	bne.n	8010510 <VL53L0X_get_pal_range_status+0x338>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8010508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801050a:	2203      	movs	r2, #3
 801050c:	701a      	strb	r2, [r3, #0]
 801050e:	e019      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 4 ||
 8010510:	2332      	movs	r3, #50	; 0x32
 8010512:	18fb      	adds	r3, r7, r3
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b04      	cmp	r3, #4
 8010518:	d004      	beq.n	8010524 <VL53L0X_get_pal_range_status+0x34c>
 801051a:	233b      	movs	r3, #59	; 0x3b
 801051c:	18fb      	adds	r3, r7, r3
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d103      	bne.n	801052c <VL53L0X_get_pal_range_status+0x354>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8010524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010526:	2202      	movs	r2, #2
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	e00b      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else if (SigmaLimitflag == 1) {
 801052c:	233d      	movs	r3, #61	; 0x3d
 801052e:	18fb      	adds	r3, r7, r3
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d103      	bne.n	801053e <VL53L0X_get_pal_range_status+0x366>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8010536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010538:	2201      	movs	r2, #1
 801053a:	701a      	strb	r2, [r3, #0]
 801053c:	e002      	b.n	8010544 <VL53L0X_get_pal_range_status+0x36c>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 801053e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010540:	2200      	movs	r2, #0
 8010542:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8010544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d102      	bne.n	8010552 <VL53L0X_get_pal_range_status+0x37a>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 801054c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054e:	2200      	movs	r2, #0
 8010550:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8010552:	253f      	movs	r5, #63	; 0x3f
 8010554:	197c      	adds	r4, r7, r5
 8010556:	232a      	movs	r3, #42	; 0x2a
 8010558:	18fa      	adds	r2, r7, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2101      	movs	r1, #1
 801055e:	0018      	movs	r0, r3
 8010560:	f7fb fa9c 	bl	800ba9c <VL53L0X_GetLimitCheckEnable>
 8010564:	0003      	movs	r3, r0
 8010566:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8010568:	197b      	adds	r3, r7, r5
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	b25b      	sxtb	r3, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d163      	bne.n	801063a <VL53L0X_get_pal_range_status+0x462>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8010572:	232b      	movs	r3, #43	; 0x2b
 8010574:	18fb      	adds	r3, r7, r3
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d004      	beq.n	8010586 <VL53L0X_get_pal_range_status+0x3ae>
 801057c:	233d      	movs	r3, #61	; 0x3d
 801057e:	18fb      	adds	r3, r7, r3
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d104      	bne.n	8010590 <VL53L0X_get_pal_range_status+0x3b8>
			Temp8 = 1;
 8010586:	2333      	movs	r3, #51	; 0x33
 8010588:	18fb      	adds	r3, r7, r3
 801058a:	2201      	movs	r2, #1
 801058c:	701a      	strb	r2, [r3, #0]
 801058e:	e003      	b.n	8010598 <VL53L0X_get_pal_range_status+0x3c0>
		else
			Temp8 = 0;
 8010590:	2333      	movs	r3, #51	; 0x33
 8010592:	18fb      	adds	r3, r7, r3
 8010594:	2200      	movs	r2, #0
 8010596:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2233      	movs	r2, #51	; 0x33
 801059c:	18ba      	adds	r2, r7, r2
 801059e:	212e      	movs	r1, #46	; 0x2e
 80105a0:	7812      	ldrb	r2, [r2, #0]
 80105a2:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80105a4:	2332      	movs	r3, #50	; 0x32
 80105a6:	18fb      	adds	r3, r7, r3
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	2b04      	cmp	r3, #4
 80105ac:	d004      	beq.n	80105b8 <VL53L0X_get_pal_range_status+0x3e0>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80105ae:	232a      	movs	r3, #42	; 0x2a
 80105b0:	18fb      	adds	r3, r7, r3
 80105b2:	781b      	ldrb	r3, [r3, #0]
		if ((DeviceRangeStatusInternal == 4) ||
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d104      	bne.n	80105c2 <VL53L0X_get_pal_range_status+0x3ea>
			Temp8 = 1;
 80105b8:	2333      	movs	r3, #51	; 0x33
 80105ba:	18fb      	adds	r3, r7, r3
 80105bc:	2201      	movs	r2, #1
 80105be:	701a      	strb	r2, [r3, #0]
 80105c0:	e003      	b.n	80105ca <VL53L0X_get_pal_range_status+0x3f2>
		else
			Temp8 = 0;
 80105c2:	2333      	movs	r3, #51	; 0x33
 80105c4:	18fb      	adds	r3, r7, r3
 80105c6:	2200      	movs	r2, #0
 80105c8:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2233      	movs	r2, #51	; 0x33
 80105ce:	18ba      	adds	r2, r7, r2
 80105d0:	212f      	movs	r1, #47	; 0x2f
 80105d2:	7812      	ldrb	r2, [r2, #0]
 80105d4:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80105d6:	2329      	movs	r3, #41	; 0x29
 80105d8:	18fb      	adds	r3, r7, r3
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d004      	beq.n	80105ea <VL53L0X_get_pal_range_status+0x412>
 80105e0:	233c      	movs	r3, #60	; 0x3c
 80105e2:	18fb      	adds	r3, r7, r3
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d104      	bne.n	80105f4 <VL53L0X_get_pal_range_status+0x41c>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80105ea:	2333      	movs	r3, #51	; 0x33
 80105ec:	18fb      	adds	r3, r7, r3
 80105ee:	2201      	movs	r2, #1
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e003      	b.n	80105fc <VL53L0X_get_pal_range_status+0x424>
		else
			Temp8 = 0;
 80105f4:	2333      	movs	r3, #51	; 0x33
 80105f6:	18fb      	adds	r3, r7, r3
 80105f8:	2200      	movs	r2, #0
 80105fa:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2233      	movs	r2, #51	; 0x33
 8010600:	18ba      	adds	r2, r7, r2
 8010602:	2130      	movs	r1, #48	; 0x30
 8010604:	7812      	ldrb	r2, [r2, #0]
 8010606:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8010608:	2328      	movs	r3, #40	; 0x28
 801060a:	18fb      	adds	r3, r7, r3
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d004      	beq.n	801061c <VL53L0X_get_pal_range_status+0x444>
 8010612:	233b      	movs	r3, #59	; 0x3b
 8010614:	18fb      	adds	r3, r7, r3
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b01      	cmp	r3, #1
 801061a:	d104      	bne.n	8010626 <VL53L0X_get_pal_range_status+0x44e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 801061c:	2333      	movs	r3, #51	; 0x33
 801061e:	18fb      	adds	r3, r7, r3
 8010620:	2201      	movs	r2, #1
 8010622:	701a      	strb	r2, [r3, #0]
 8010624:	e003      	b.n	801062e <VL53L0X_get_pal_range_status+0x456>
		else
			Temp8 = 0;
 8010626:	2333      	movs	r3, #51	; 0x33
 8010628:	18fb      	adds	r3, r7, r3
 801062a:	2200      	movs	r2, #0
 801062c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2233      	movs	r2, #51	; 0x33
 8010632:	18ba      	adds	r2, r7, r2
 8010634:	2131      	movs	r1, #49	; 0x31
 8010636:	7812      	ldrb	r2, [r2, #0]
 8010638:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801063a:	233f      	movs	r3, #63	; 0x3f
 801063c:	18fb      	adds	r3, r7, r3
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	b25b      	sxtb	r3, r3

}
 8010642:	0018      	movs	r0, r3
 8010644:	46bd      	mov	sp, r7
 8010646:	b010      	add	sp, #64	; 0x40
 8010648:	bdb0      	pop	{r4, r5, r7, pc}

0801064a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801064a:	b590      	push	{r4, r7, lr}
 801064c:	b089      	sub	sp, #36	; 0x24
 801064e:	af02      	add	r7, sp, #8
 8010650:	60f8      	str	r0, [r7, #12]
 8010652:	60b9      	str	r1, [r7, #8]
 8010654:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	330a      	adds	r3, #10
 801065a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	23ae      	movs	r3, #174	; 0xae
 8010660:	005b      	lsls	r3, r3, #1
 8010662:	58d0      	ldr	r0, [r2, r3]
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	23b0      	movs	r3, #176	; 0xb0
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	5cd3      	ldrb	r3, [r2, r3]
 801066c:	b299      	uxth	r1, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	b29c      	uxth	r4, r3
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	68ba      	ldr	r2, [r7, #8]
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	0023      	movs	r3, r4
 801067a:	f7f5 fa91 	bl	8005ba0 <HAL_I2C_Master_Transmit>
 801067e:	0003      	movs	r3, r0
 8010680:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8010682:	693b      	ldr	r3, [r7, #16]
}
 8010684:	0018      	movs	r0, r3
 8010686:	46bd      	mov	sp, r7
 8010688:	b007      	add	sp, #28
 801068a:	bd90      	pop	{r4, r7, pc}

0801068c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b089      	sub	sp, #36	; 0x24
 8010690:	af02      	add	r7, sp, #8
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	330a      	adds	r3, #10
 801069c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	23ae      	movs	r3, #174	; 0xae
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	58d0      	ldr	r0, [r2, r3]
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	23b0      	movs	r3, #176	; 0xb0
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	5cd3      	ldrb	r3, [r2, r3]
 80106ae:	2201      	movs	r2, #1
 80106b0:	4313      	orrs	r3, r2
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	b299      	uxth	r1, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	b29c      	uxth	r4, r3
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	68ba      	ldr	r2, [r7, #8]
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	0023      	movs	r3, r4
 80106c2:	f7f5 fb75 	bl	8005db0 <HAL_I2C_Master_Receive>
 80106c6:	0003      	movs	r3, r0
 80106c8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80106ca:	693b      	ldr	r3, [r7, #16]
}
 80106cc:	0018      	movs	r0, r3
 80106ce:	46bd      	mov	sp, r7
 80106d0:	b007      	add	sp, #28
 80106d2:	bd90      	pop	{r4, r7, pc}

080106d4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b086      	sub	sp, #24
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	607a      	str	r2, [r7, #4]
 80106de:	603b      	str	r3, [r7, #0]
 80106e0:	230b      	movs	r3, #11
 80106e2:	18fb      	adds	r3, r7, r3
 80106e4:	1c0a      	adds	r2, r1, #0
 80106e6:	701a      	strb	r2, [r3, #0]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80106e8:	2317      	movs	r3, #23
 80106ea:	18fb      	adds	r3, r7, r3
 80106ec:	2200      	movs	r2, #0
 80106ee:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	2b3f      	cmp	r3, #63	; 0x3f
 80106f4:	d902      	bls.n	80106fc <VL53L0X_WriteMulti+0x28>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80106f6:	2304      	movs	r3, #4
 80106f8:	425b      	negs	r3, r3
 80106fa:	e01e      	b.n	801073a <VL53L0X_WriteMulti+0x66>
    }
    _I2CBuffer[0] = index;
 80106fc:	4b11      	ldr	r3, [pc, #68]	; (8010744 <VL53L0X_WriteMulti+0x70>)
 80106fe:	220b      	movs	r2, #11
 8010700:	18ba      	adds	r2, r7, r2
 8010702:	7812      	ldrb	r2, [r2, #0]
 8010704:	701a      	strb	r2, [r3, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	4b0f      	ldr	r3, [pc, #60]	; (8010748 <VL53L0X_WriteMulti+0x74>)
 801070c:	0018      	movs	r0, r3
 801070e:	f002 fb95 	bl	8012e3c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	490b      	ldr	r1, [pc, #44]	; (8010744 <VL53L0X_WriteMulti+0x70>)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	0018      	movs	r0, r3
 801071c:	f7ff ff95 	bl	801064a <_I2CWrite>
 8010720:	0003      	movs	r3, r0
 8010722:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d003      	beq.n	8010732 <VL53L0X_WriteMulti+0x5e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801072a:	2317      	movs	r3, #23
 801072c:	18fb      	adds	r3, r7, r3
 801072e:	22ec      	movs	r2, #236	; 0xec
 8010730:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8010732:	2317      	movs	r3, #23
 8010734:	18fb      	adds	r3, r7, r3
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	b25b      	sxtb	r3, r3
}
 801073a:	0018      	movs	r0, r3
 801073c:	46bd      	mov	sp, r7
 801073e:	b006      	add	sp, #24
 8010740:	bd80      	pop	{r7, pc}
 8010742:	46c0      	nop			; (mov r8, r8)
 8010744:	20000db0 	.word	0x20000db0
 8010748:	20000db1 	.word	0x20000db1

0801074c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 801074c:	b590      	push	{r4, r7, lr}
 801074e:	b087      	sub	sp, #28
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	607a      	str	r2, [r7, #4]
 8010756:	603b      	str	r3, [r7, #0]
 8010758:	200b      	movs	r0, #11
 801075a:	183b      	adds	r3, r7, r0
 801075c:	1c0a      	adds	r2, r1, #0
 801075e:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010760:	2417      	movs	r4, #23
 8010762:	193b      	adds	r3, r7, r4
 8010764:	2200      	movs	r2, #0
 8010766:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010768:	1839      	adds	r1, r7, r0
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2201      	movs	r2, #1
 801076e:	0018      	movs	r0, r3
 8010770:	f7ff ff6b 	bl	801064a <_I2CWrite>
 8010774:	0003      	movs	r3, r0
 8010776:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d003      	beq.n	8010786 <VL53L0X_ReadMulti+0x3a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801077e:	193b      	adds	r3, r7, r4
 8010780:	22ec      	movs	r2, #236	; 0xec
 8010782:	701a      	strb	r2, [r3, #0]
        goto done;
 8010784:	e010      	b.n	80107a8 <VL53L0X_ReadMulti+0x5c>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	6879      	ldr	r1, [r7, #4]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	0018      	movs	r0, r3
 801078e:	f7ff ff7d 	bl	801068c <_I2CRead>
 8010792:	0003      	movs	r3, r0
 8010794:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d004      	beq.n	80107a6 <VL53L0X_ReadMulti+0x5a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801079c:	2317      	movs	r3, #23
 801079e:	18fb      	adds	r3, r7, r3
 80107a0:	22ec      	movs	r2, #236	; 0xec
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	e000      	b.n	80107a8 <VL53L0X_ReadMulti+0x5c>
    }
done:
 80107a6:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 80107a8:	2317      	movs	r3, #23
 80107aa:	18fb      	adds	r3, r7, r3
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	b25b      	sxtb	r3, r3
}
 80107b0:	0018      	movs	r0, r3
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b007      	add	sp, #28
 80107b6:	bd90      	pop	{r4, r7, pc}

080107b8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80107b8:	b590      	push	{r4, r7, lr}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	0008      	movs	r0, r1
 80107c2:	0011      	movs	r1, r2
 80107c4:	1cfb      	adds	r3, r7, #3
 80107c6:	1c02      	adds	r2, r0, #0
 80107c8:	701a      	strb	r2, [r3, #0]
 80107ca:	1cbb      	adds	r3, r7, #2
 80107cc:	1c0a      	adds	r2, r1, #0
 80107ce:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80107d0:	240f      	movs	r4, #15
 80107d2:	193b      	adds	r3, r7, r4
 80107d4:	2200      	movs	r2, #0
 80107d6:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80107d8:	4b0e      	ldr	r3, [pc, #56]	; (8010814 <VL53L0X_WrByte+0x5c>)
 80107da:	1cfa      	adds	r2, r7, #3
 80107dc:	7812      	ldrb	r2, [r2, #0]
 80107de:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data;
 80107e0:	4b0c      	ldr	r3, [pc, #48]	; (8010814 <VL53L0X_WrByte+0x5c>)
 80107e2:	1cba      	adds	r2, r7, #2
 80107e4:	7812      	ldrb	r2, [r2, #0]
 80107e6:	705a      	strb	r2, [r3, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80107e8:	490a      	ldr	r1, [pc, #40]	; (8010814 <VL53L0X_WrByte+0x5c>)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2202      	movs	r2, #2
 80107ee:	0018      	movs	r0, r3
 80107f0:	f7ff ff2b 	bl	801064a <_I2CWrite>
 80107f4:	0003      	movs	r3, r0
 80107f6:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <VL53L0X_WrByte+0x4c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80107fe:	193b      	adds	r3, r7, r4
 8010800:	22ec      	movs	r2, #236	; 0xec
 8010802:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8010804:	230f      	movs	r3, #15
 8010806:	18fb      	adds	r3, r7, r3
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	b25b      	sxtb	r3, r3
}
 801080c:	0018      	movs	r0, r3
 801080e:	46bd      	mov	sp, r7
 8010810:	b005      	add	sp, #20
 8010812:	bd90      	pop	{r4, r7, pc}
 8010814:	20000db0 	.word	0x20000db0

08010818 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8010818:	b590      	push	{r4, r7, lr}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	0008      	movs	r0, r1
 8010822:	0011      	movs	r1, r2
 8010824:	1cfb      	adds	r3, r7, #3
 8010826:	1c02      	adds	r2, r0, #0
 8010828:	701a      	strb	r2, [r3, #0]
 801082a:	003b      	movs	r3, r7
 801082c:	1c0a      	adds	r2, r1, #0
 801082e:	801a      	strh	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010830:	240f      	movs	r4, #15
 8010832:	193b      	adds	r3, r7, r4
 8010834:	2200      	movs	r2, #0
 8010836:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8010838:	4b12      	ldr	r3, [pc, #72]	; (8010884 <VL53L0X_WrWord+0x6c>)
 801083a:	1cfa      	adds	r2, r7, #3
 801083c:	7812      	ldrb	r2, [r2, #0]
 801083e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8010840:	003b      	movs	r3, r7
 8010842:	881b      	ldrh	r3, [r3, #0]
 8010844:	0a1b      	lsrs	r3, r3, #8
 8010846:	b29b      	uxth	r3, r3
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4b0e      	ldr	r3, [pc, #56]	; (8010884 <VL53L0X_WrWord+0x6c>)
 801084c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 801084e:	003b      	movs	r3, r7
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	b2da      	uxtb	r2, r3
 8010854:	4b0b      	ldr	r3, [pc, #44]	; (8010884 <VL53L0X_WrWord+0x6c>)
 8010856:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010858:	490a      	ldr	r1, [pc, #40]	; (8010884 <VL53L0X_WrWord+0x6c>)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2203      	movs	r2, #3
 801085e:	0018      	movs	r0, r3
 8010860:	f7ff fef3 	bl	801064a <_I2CWrite>
 8010864:	0003      	movs	r3, r0
 8010866:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <VL53L0X_WrWord+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801086e:	193b      	adds	r3, r7, r4
 8010870:	22ec      	movs	r2, #236	; 0xec
 8010872:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8010874:	230f      	movs	r3, #15
 8010876:	18fb      	adds	r3, r7, r3
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	b25b      	sxtb	r3, r3
}
 801087c:	0018      	movs	r0, r3
 801087e:	46bd      	mov	sp, r7
 8010880:	b005      	add	sp, #20
 8010882:	bd90      	pop	{r4, r7, pc}
 8010884:	20000db0 	.word	0x20000db0

08010888 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8010888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	000c      	movs	r4, r1
 8010892:	0010      	movs	r0, r2
 8010894:	0019      	movs	r1, r3
 8010896:	1cfb      	adds	r3, r7, #3
 8010898:	1c22      	adds	r2, r4, #0
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	1cbb      	adds	r3, r7, #2
 801089e:	1c02      	adds	r2, r0, #0
 80108a0:	701a      	strb	r2, [r3, #0]
 80108a2:	1c7b      	adds	r3, r7, #1
 80108a4:	1c0a      	adds	r2, r1, #0
 80108a6:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80108a8:	250f      	movs	r5, #15
 80108aa:	197b      	adds	r3, r7, r5
 80108ac:	2200      	movs	r2, #0
 80108ae:	701a      	strb	r2, [r3, #0]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80108b0:	197c      	adds	r4, r7, r5
 80108b2:	260e      	movs	r6, #14
 80108b4:	19ba      	adds	r2, r7, r6
 80108b6:	1cfb      	adds	r3, r7, #3
 80108b8:	7819      	ldrb	r1, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	0018      	movs	r0, r3
 80108be:	f000 f82a 	bl	8010916 <VL53L0X_RdByte>
 80108c2:	0003      	movs	r3, r0
 80108c4:	7023      	strb	r3, [r4, #0]
    if (Status) {
 80108c6:	0029      	movs	r1, r5
 80108c8:	187b      	adds	r3, r7, r1
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	b25b      	sxtb	r3, r3
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d118      	bne.n	8010904 <VL53L0X_UpdateByte+0x7c>
        goto done;
    }
    data = (data & AndData) | OrData;
 80108d2:	0030      	movs	r0, r6
 80108d4:	183b      	adds	r3, r7, r0
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	1cba      	adds	r2, r7, #2
 80108da:	7812      	ldrb	r2, [r2, #0]
 80108dc:	4013      	ands	r3, r2
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	1c7b      	adds	r3, r7, #1
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	4313      	orrs	r3, r2
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	183b      	adds	r3, r7, r0
 80108ea:	701a      	strb	r2, [r3, #0]
    Status = VL53L0X_WrByte(Dev, index, data);
 80108ec:	183b      	adds	r3, r7, r0
 80108ee:	781a      	ldrb	r2, [r3, #0]
 80108f0:	187c      	adds	r4, r7, r1
 80108f2:	1cfb      	adds	r3, r7, #3
 80108f4:	7819      	ldrb	r1, [r3, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	0018      	movs	r0, r3
 80108fa:	f7ff ff5d 	bl	80107b8 <VL53L0X_WrByte>
 80108fe:	0003      	movs	r3, r0
 8010900:	7023      	strb	r3, [r4, #0]
 8010902:	e000      	b.n	8010906 <VL53L0X_UpdateByte+0x7e>
        goto done;
 8010904:	46c0      	nop			; (mov r8, r8)
done:
    return Status;
 8010906:	230f      	movs	r3, #15
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	b25b      	sxtb	r3, r3
}
 801090e:	0018      	movs	r0, r3
 8010910:	46bd      	mov	sp, r7
 8010912:	b005      	add	sp, #20
 8010914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010916 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8010916:	b590      	push	{r4, r7, lr}
 8010918:	b087      	sub	sp, #28
 801091a:	af00      	add	r7, sp, #0
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	200b      	movs	r0, #11
 8010922:	183b      	adds	r3, r7, r0
 8010924:	1c0a      	adds	r2, r1, #0
 8010926:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010928:	2417      	movs	r4, #23
 801092a:	193b      	adds	r3, r7, r4
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010930:	1839      	adds	r1, r7, r0
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2201      	movs	r2, #1
 8010936:	0018      	movs	r0, r3
 8010938:	f7ff fe87 	bl	801064a <_I2CWrite>
 801093c:	0003      	movs	r3, r0
 801093e:	613b      	str	r3, [r7, #16]
    if( status_int ){
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d003      	beq.n	801094e <VL53L0X_RdByte+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010946:	193b      	adds	r3, r7, r4
 8010948:	22ec      	movs	r2, #236	; 0xec
 801094a:	701a      	strb	r2, [r3, #0]
        goto done;
 801094c:	e010      	b.n	8010970 <VL53L0X_RdByte+0x5a>
    }
    status_int = _I2CRead(Dev, data, 1);
 801094e:	6879      	ldr	r1, [r7, #4]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2201      	movs	r2, #1
 8010954:	0018      	movs	r0, r3
 8010956:	f7ff fe99 	bl	801068c <_I2CRead>
 801095a:	0003      	movs	r3, r0
 801095c:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d004      	beq.n	801096e <VL53L0X_RdByte+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010964:	2317      	movs	r3, #23
 8010966:	18fb      	adds	r3, r7, r3
 8010968:	22ec      	movs	r2, #236	; 0xec
 801096a:	701a      	strb	r2, [r3, #0]
 801096c:	e000      	b.n	8010970 <VL53L0X_RdByte+0x5a>
    }
done:
 801096e:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 8010970:	2317      	movs	r3, #23
 8010972:	18fb      	adds	r3, r7, r3
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	b25b      	sxtb	r3, r3
}
 8010978:	0018      	movs	r0, r3
 801097a:	46bd      	mov	sp, r7
 801097c:	b007      	add	sp, #28
 801097e:	bd90      	pop	{r4, r7, pc}

08010980 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8010980:	b590      	push	{r4, r7, lr}
 8010982:	b087      	sub	sp, #28
 8010984:	af00      	add	r7, sp, #0
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	607a      	str	r2, [r7, #4]
 801098a:	200b      	movs	r0, #11
 801098c:	183b      	adds	r3, r7, r0
 801098e:	1c0a      	adds	r2, r1, #0
 8010990:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010992:	2417      	movs	r4, #23
 8010994:	193b      	adds	r3, r7, r4
 8010996:	2200      	movs	r2, #0
 8010998:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801099a:	1839      	adds	r1, r7, r0
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2201      	movs	r2, #1
 80109a0:	0018      	movs	r0, r3
 80109a2:	f7ff fe52 	bl	801064a <_I2CWrite>
 80109a6:	0003      	movs	r3, r0
 80109a8:	613b      	str	r3, [r7, #16]

    if( status_int ){
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d003      	beq.n	80109b8 <VL53L0X_RdWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80109b0:	193b      	adds	r3, r7, r4
 80109b2:	22ec      	movs	r2, #236	; 0xec
 80109b4:	701a      	strb	r2, [r3, #0]
        goto done;
 80109b6:	e01b      	b.n	80109f0 <VL53L0X_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80109b8:	4911      	ldr	r1, [pc, #68]	; (8010a00 <VL53L0X_RdWord+0x80>)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2202      	movs	r2, #2
 80109be:	0018      	movs	r0, r3
 80109c0:	f7ff fe64 	bl	801068c <_I2CRead>
 80109c4:	0003      	movs	r3, r0
 80109c6:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d004      	beq.n	80109d8 <VL53L0X_RdWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80109ce:	2317      	movs	r3, #23
 80109d0:	18fb      	adds	r3, r7, r3
 80109d2:	22ec      	movs	r2, #236	; 0xec
 80109d4:	701a      	strb	r2, [r3, #0]
        goto done;
 80109d6:	e00b      	b.n	80109f0 <VL53L0X_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80109d8:	4b09      	ldr	r3, [pc, #36]	; (8010a00 <VL53L0X_RdWord+0x80>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	b29b      	uxth	r3, r3
 80109de:	021b      	lsls	r3, r3, #8
 80109e0:	b29a      	uxth	r2, r3
 80109e2:	4b07      	ldr	r3, [pc, #28]	; (8010a00 <VL53L0X_RdWord+0x80>)
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	18d3      	adds	r3, r2, r3
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80109f0:	2317      	movs	r3, #23
 80109f2:	18fb      	adds	r3, r7, r3
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	b25b      	sxtb	r3, r3
}
 80109f8:	0018      	movs	r0, r3
 80109fa:	46bd      	mov	sp, r7
 80109fc:	b007      	add	sp, #28
 80109fe:	bd90      	pop	{r4, r7, pc}
 8010a00:	20000db0 	.word	0x20000db0

08010a04 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010a04:	b590      	push	{r4, r7, lr}
 8010a06:	b087      	sub	sp, #28
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	607a      	str	r2, [r7, #4]
 8010a0e:	200b      	movs	r0, #11
 8010a10:	183b      	adds	r3, r7, r0
 8010a12:	1c0a      	adds	r2, r1, #0
 8010a14:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010a16:	2417      	movs	r4, #23
 8010a18:	193b      	adds	r3, r7, r4
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8010a1e:	1839      	adds	r1, r7, r0
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2201      	movs	r2, #1
 8010a24:	0018      	movs	r0, r3
 8010a26:	f7ff fe10 	bl	801064a <_I2CWrite>
 8010a2a:	0003      	movs	r3, r0
 8010a2c:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d003      	beq.n	8010a3c <VL53L0X_RdDWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010a34:	193b      	adds	r3, r7, r4
 8010a36:	22ec      	movs	r2, #236	; 0xec
 8010a38:	701a      	strb	r2, [r3, #0]
        goto done;
 8010a3a:	e01f      	b.n	8010a7c <VL53L0X_RdDWord+0x78>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8010a3c:	4913      	ldr	r1, [pc, #76]	; (8010a8c <VL53L0X_RdDWord+0x88>)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2204      	movs	r2, #4
 8010a42:	0018      	movs	r0, r3
 8010a44:	f7ff fe22 	bl	801068c <_I2CRead>
 8010a48:	0003      	movs	r3, r0
 8010a4a:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d004      	beq.n	8010a5c <VL53L0X_RdDWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010a52:	2317      	movs	r3, #23
 8010a54:	18fb      	adds	r3, r7, r3
 8010a56:	22ec      	movs	r2, #236	; 0xec
 8010a58:	701a      	strb	r2, [r3, #0]
        goto done;
 8010a5a:	e00f      	b.n	8010a7c <VL53L0X_RdDWord+0x78>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8010a5c:	4b0b      	ldr	r3, [pc, #44]	; (8010a8c <VL53L0X_RdDWord+0x88>)
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	061a      	lsls	r2, r3, #24
 8010a62:	4b0a      	ldr	r3, [pc, #40]	; (8010a8c <VL53L0X_RdDWord+0x88>)
 8010a64:	785b      	ldrb	r3, [r3, #1]
 8010a66:	041b      	lsls	r3, r3, #16
 8010a68:	18d2      	adds	r2, r2, r3
 8010a6a:	4b08      	ldr	r3, [pc, #32]	; (8010a8c <VL53L0X_RdDWord+0x88>)
 8010a6c:	789b      	ldrb	r3, [r3, #2]
 8010a6e:	021b      	lsls	r3, r3, #8
 8010a70:	18d3      	adds	r3, r2, r3
 8010a72:	4a06      	ldr	r2, [pc, #24]	; (8010a8c <VL53L0X_RdDWord+0x88>)
 8010a74:	78d2      	ldrb	r2, [r2, #3]
 8010a76:	189a      	adds	r2, r3, r2
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8010a7c:	2317      	movs	r3, #23
 8010a7e:	18fb      	adds	r3, r7, r3
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	b25b      	sxtb	r3, r3
}
 8010a84:	0018      	movs	r0, r3
 8010a86:	46bd      	mov	sp, r7
 8010a88:	b007      	add	sp, #28
 8010a8a:	bd90      	pop	{r4, r7, pc}
 8010a8c:	20000db0 	.word	0x20000db0

08010a90 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8010a90:	b590      	push	{r4, r7, lr}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010a98:	240f      	movs	r4, #15
 8010a9a:	193b      	adds	r3, r7, r4
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]

    // do nothing
    VL53L0X_OsDelay();
 8010aa0:	2002      	movs	r0, #2
 8010aa2:	f7f3 ffe5 	bl	8004a70 <HAL_Delay>
    return status;
 8010aa6:	193b      	adds	r3, r7, r4
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	b25b      	sxtb	r3, r3
}
 8010aac:	0018      	movs	r0, r3
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	b005      	add	sp, #20
 8010ab2:	bd90      	pop	{r4, r7, pc}

08010ab4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	0002      	movs	r2, r0
 8010abc:	1dbb      	adds	r3, r7, #6
 8010abe:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ac4:	1dbb      	adds	r3, r7, #6
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	5e9b      	ldrsh	r3, [r3, r2]
 8010aca:	2b84      	cmp	r3, #132	; 0x84
 8010acc:	d006      	beq.n	8010adc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8010ace:	1dbb      	adds	r3, r7, #6
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	5e9a      	ldrsh	r2, [r3, r2]
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	18d3      	adds	r3, r2, r3
 8010ad8:	3303      	adds	r3, #3
 8010ada:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010adc:	68fb      	ldr	r3, [r7, #12]
}
 8010ade:	0018      	movs	r0, r3
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	b004      	add	sp, #16
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010aea:	f000 fd85 	bl	80115f8 <vTaskStartScheduler>
  
  return osOK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	0018      	movs	r0, r3
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af8:	b087      	sub	sp, #28
 8010afa:	af02      	add	r7, sp, #8
 8010afc:	6078      	str	r0, [r7, #4]
 8010afe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	685c      	ldr	r4, [r3, #4]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b0c:	b29e      	uxth	r6, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2208      	movs	r2, #8
 8010b12:	5e9b      	ldrsh	r3, [r3, r2]
 8010b14:	0018      	movs	r0, r3
 8010b16:	f7ff ffcd 	bl	8010ab4 <makeFreeRtosPriority>
 8010b1a:	0001      	movs	r1, r0
 8010b1c:	683a      	ldr	r2, [r7, #0]
 8010b1e:	230c      	movs	r3, #12
 8010b20:	18fb      	adds	r3, r7, r3
 8010b22:	9301      	str	r3, [sp, #4]
 8010b24:	9100      	str	r1, [sp, #0]
 8010b26:	0013      	movs	r3, r2
 8010b28:	0032      	movs	r2, r6
 8010b2a:	0029      	movs	r1, r5
 8010b2c:	0020      	movs	r0, r4
 8010b2e:	f000 fb34 	bl	801119a <xTaskCreate>
 8010b32:	0003      	movs	r3, r0
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d001      	beq.n	8010b3c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	e000      	b.n	8010b3e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
}
 8010b3e:	0018      	movs	r0, r3
 8010b40:	46bd      	mov	sp, r7
 8010b42:	b005      	add	sp, #20
 8010b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010b46:	b580      	push	{r7, lr}
 8010b48:	b084      	sub	sp, #16
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <osDelay+0x16>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	e000      	b.n	8010b5e <osDelay+0x18>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	0018      	movs	r0, r3
 8010b60:	f000 fc4a 	bl	80113f8 <vTaskDelay>
  
  return osOK;
 8010b64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010b66:	0018      	movs	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	b004      	add	sp, #16
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b082      	sub	sp, #8
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	3308      	adds	r3, #8
 8010b7a:	001a      	movs	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2201      	movs	r2, #1
 8010b84:	4252      	negs	r2, r2
 8010b86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	3308      	adds	r3, #8
 8010b8c:	001a      	movs	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3308      	adds	r3, #8
 8010b96:	001a      	movs	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ba2:	46c0      	nop			; (mov r8, r8)
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	b002      	add	sp, #8
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b082      	sub	sp, #8
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010bb8:	46c0      	nop			; (mov r8, r8)
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	b002      	add	sp, #8
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	689a      	ldr	r2, [r3, #8]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	601a      	str	r2, [r3, #0]
}
 8010bfc:	46c0      	nop			; (mov r8, r8)
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	b004      	add	sp, #16
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	3301      	adds	r3, #1
 8010c18:	d103      	bne.n	8010c22 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	60fb      	str	r3, [r7, #12]
 8010c20:	e00c      	b.n	8010c3c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	3308      	adds	r3, #8
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	e002      	b.n	8010c30 <vListInsert+0x2c>
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	60fb      	str	r3, [r7, #12]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d2f6      	bcs.n	8010c2a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	685a      	ldr	r2, [r3, #4]
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	683a      	ldr	r2, [r7, #0]
 8010c4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	601a      	str	r2, [r3, #0]
}
 8010c68:	46c0      	nop			; (mov r8, r8)
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	b004      	add	sp, #16
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6892      	ldr	r2, [r2, #8]
 8010c86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	6852      	ldr	r2, [r2, #4]
 8010c90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d103      	bne.n	8010ca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	689a      	ldr	r2, [r3, #8]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	1e5a      	subs	r2, r3, #1
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
}
 8010cb8:	0018      	movs	r0, r3
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	b004      	add	sp, #16
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <xQueueGenericReset+0x18>
 8010cd4:	b672      	cpsid	i
 8010cd6:	e7fe      	b.n	8010cd6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8010cd8:	f001 fac2 	bl	8012260 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce8:	434b      	muls	r3, r1
 8010cea:	18d2      	adds	r2, r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d06:	1e59      	subs	r1, r3, #1
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d0c:	434b      	muls	r3, r1
 8010d0e:	18d2      	adds	r2, r2, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2244      	movs	r2, #68	; 0x44
 8010d18:	21ff      	movs	r1, #255	; 0xff
 8010d1a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2245      	movs	r2, #69	; 0x45
 8010d20:	21ff      	movs	r1, #255	; 0xff
 8010d22:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d10d      	bne.n	8010d46 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	691b      	ldr	r3, [r3, #16]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d013      	beq.n	8010d5a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	3310      	adds	r3, #16
 8010d36:	0018      	movs	r0, r3
 8010d38:	f000 fe4c 	bl	80119d4 <xTaskRemoveFromEventList>
 8010d3c:	1e03      	subs	r3, r0, #0
 8010d3e:	d00c      	beq.n	8010d5a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010d40:	f001 fa7e 	bl	8012240 <vPortYield>
 8010d44:	e009      	b.n	8010d5a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	3310      	adds	r3, #16
 8010d4a:	0018      	movs	r0, r3
 8010d4c:	f7ff ff0f 	bl	8010b6e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	3324      	adds	r3, #36	; 0x24
 8010d54:	0018      	movs	r0, r3
 8010d56:	f7ff ff0a 	bl	8010b6e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010d5a:	f001 fa93 	bl	8012284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010d5e:	2301      	movs	r3, #1
}
 8010d60:	0018      	movs	r0, r3
 8010d62:	46bd      	mov	sp, r7
 8010d64:	b004      	add	sp, #16
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d68:	b590      	push	{r4, r7, lr}
 8010d6a:	b08b      	sub	sp, #44	; 0x2c
 8010d6c:	af02      	add	r7, sp, #8
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	1dfb      	adds	r3, r7, #7
 8010d74:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d101      	bne.n	8010d80 <xQueueGenericCreate+0x18>
 8010d7c:	b672      	cpsid	i
 8010d7e:	e7fe      	b.n	8010d7e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	68ba      	ldr	r2, [r7, #8]
 8010d84:	4353      	muls	r3, r2
 8010d86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	3348      	adds	r3, #72	; 0x48
 8010d8c:	0018      	movs	r0, r3
 8010d8e:	f001 faff 	bl	8012390 <pvPortMalloc>
 8010d92:	0003      	movs	r3, r0
 8010d94:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00e      	beq.n	8010dba <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	3348      	adds	r3, #72	; 0x48
 8010da4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010da6:	1dfb      	adds	r3, r7, #7
 8010da8:	781c      	ldrb	r4, [r3, #0]
 8010daa:	697a      	ldr	r2, [r7, #20]
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	0023      	movs	r3, r4
 8010db6:	f000 f805 	bl	8010dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010dba:	69bb      	ldr	r3, [r7, #24]
	}
 8010dbc:	0018      	movs	r0, r3
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	b009      	add	sp, #36	; 0x24
 8010dc2:	bd90      	pop	{r4, r7, pc}

08010dc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	001a      	movs	r2, r3
 8010dd2:	1cfb      	adds	r3, r7, #3
 8010dd4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	69ba      	ldr	r2, [r7, #24]
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	e002      	b.n	8010dea <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	68ba      	ldr	r2, [r7, #8]
 8010df4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	2101      	movs	r1, #1
 8010dfa:	0018      	movs	r0, r3
 8010dfc:	f7ff ff60 	bl	8010cc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e00:	46c0      	nop			; (mov r8, r8)
 8010e02:	46bd      	mov	sp, r7
 8010e04:	b004      	add	sp, #16
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e16:	69bb      	ldr	r3, [r7, #24]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d101      	bne.n	8010e20 <xQueueGiveFromISR+0x18>
 8010e1c:	b672      	cpsid	i
 8010e1e:	e7fe      	b.n	8010e1e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <xQueueGiveFromISR+0x24>
 8010e28:	b672      	cpsid	i
 8010e2a:	e7fe      	b.n	8010e2a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d103      	bne.n	8010e3c <xQueueGiveFromISR+0x34>
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d101      	bne.n	8010e40 <xQueueGiveFromISR+0x38>
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e000      	b.n	8010e42 <xQueueGiveFromISR+0x3a>
 8010e40:	2300      	movs	r3, #0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <xQueueGiveFromISR+0x42>
 8010e46:	b672      	cpsid	i
 8010e48:	e7fe      	b.n	8010e48 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e4a:	f001 fa33 	bl	80122b4 <ulSetInterruptMaskFromISR>
 8010e4e:	0003      	movs	r3, r0
 8010e50:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e56:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e58:	69bb      	ldr	r3, [r7, #24]
 8010e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d22c      	bcs.n	8010ebc <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e62:	200f      	movs	r0, #15
 8010e64:	183b      	adds	r3, r7, r0
 8010e66:	69ba      	ldr	r2, [r7, #24]
 8010e68:	2145      	movs	r1, #69	; 0x45
 8010e6a:	5c52      	ldrb	r2, [r2, r1]
 8010e6c:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	1c5a      	adds	r2, r3, #1
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e76:	183b      	adds	r3, r7, r0
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	b25b      	sxtb	r3, r3
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	d111      	bne.n	8010ea4 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d016      	beq.n	8010eb6 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	3324      	adds	r3, #36	; 0x24
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	f000 fda1 	bl	80119d4 <xTaskRemoveFromEventList>
 8010e92:	1e03      	subs	r3, r0, #0
 8010e94:	d00f      	beq.n	8010eb6 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00c      	beq.n	8010eb6 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	601a      	str	r2, [r3, #0]
 8010ea2:	e008      	b.n	8010eb6 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ea4:	230f      	movs	r3, #15
 8010ea6:	18fb      	adds	r3, r7, r3
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	b259      	sxtb	r1, r3
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	2245      	movs	r2, #69	; 0x45
 8010eb4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	61fb      	str	r3, [r7, #28]
 8010eba:	e001      	b.n	8010ec0 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	0018      	movs	r0, r3
 8010ec4:	f001 f9fc 	bl	80122c0 <vClearInterruptMaskFromISR>

	return xReturn;
 8010ec8:	69fb      	ldr	r3, [r7, #28]
}
 8010eca:	0018      	movs	r0, r3
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	b008      	add	sp, #32
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b08a      	sub	sp, #40	; 0x28
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010edc:	2300      	movs	r3, #0
 8010ede:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <xQueueSemaphoreTake+0x20>
 8010eee:	b672      	cpsid	i
 8010ef0:	e7fe      	b.n	8010ef0 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d001      	beq.n	8010efe <xQueueSemaphoreTake+0x2c>
 8010efa:	b672      	cpsid	i
 8010efc:	e7fe      	b.n	8010efc <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010efe:	f000 fee5 	bl	8011ccc <xTaskGetSchedulerState>
 8010f02:	1e03      	subs	r3, r0, #0
 8010f04:	d102      	bne.n	8010f0c <xQueueSemaphoreTake+0x3a>
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <xQueueSemaphoreTake+0x3e>
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e000      	b.n	8010f12 <xQueueSemaphoreTake+0x40>
 8010f10:	2300      	movs	r3, #0
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d101      	bne.n	8010f1a <xQueueSemaphoreTake+0x48>
 8010f16:	b672      	cpsid	i
 8010f18:	e7fe      	b.n	8010f18 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f1a:	f001 f9a1 	bl	8012260 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f22:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d01d      	beq.n	8010f66 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	1e5a      	subs	r2, r3, #1
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d104      	bne.n	8010f44 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010f3a:	f000 ffbb 	bl	8011eb4 <pvTaskIncrementMutexHeldCount>
 8010f3e:	0002      	movs	r2, r0
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	691b      	ldr	r3, [r3, #16]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d008      	beq.n	8010f5e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	3310      	adds	r3, #16
 8010f50:	0018      	movs	r0, r3
 8010f52:	f000 fd3f 	bl	80119d4 <xTaskRemoveFromEventList>
 8010f56:	1e03      	subs	r3, r0, #0
 8010f58:	d001      	beq.n	8010f5e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f5a:	f001 f971 	bl	8012240 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f5e:	f001 f991 	bl	8012284 <vPortExitCritical>
				return pdPASS;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e08b      	b.n	801107e <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d108      	bne.n	8010f7e <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010f6c:	6a3b      	ldr	r3, [r7, #32]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d001      	beq.n	8010f76 <xQueueSemaphoreTake+0xa4>
 8010f72:	b672      	cpsid	i
 8010f74:	e7fe      	b.n	8010f74 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010f76:	f001 f985 	bl	8012284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	e07f      	b.n	801107e <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d106      	bne.n	8010f92 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f84:	230c      	movs	r3, #12
 8010f86:	18fb      	adds	r3, r7, r3
 8010f88:	0018      	movs	r0, r3
 8010f8a:	f000 fd7f 	bl	8011a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f92:	f001 f977 	bl	8012284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f96:	f000 fb65 	bl	8011664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f9a:	f001 f961 	bl	8012260 <vPortEnterCritical>
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	2244      	movs	r2, #68	; 0x44
 8010fa2:	5c9b      	ldrb	r3, [r3, r2]
 8010fa4:	b25b      	sxtb	r3, r3
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	d103      	bne.n	8010fb2 <xQueueSemaphoreTake+0xe0>
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	2244      	movs	r2, #68	; 0x44
 8010fae:	2100      	movs	r1, #0
 8010fb0:	5499      	strb	r1, [r3, r2]
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	2245      	movs	r2, #69	; 0x45
 8010fb6:	5c9b      	ldrb	r3, [r3, r2]
 8010fb8:	b25b      	sxtb	r3, r3
 8010fba:	3301      	adds	r3, #1
 8010fbc:	d103      	bne.n	8010fc6 <xQueueSemaphoreTake+0xf4>
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	2245      	movs	r2, #69	; 0x45
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	5499      	strb	r1, [r3, r2]
 8010fc6:	f001 f95d 	bl	8012284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fca:	003a      	movs	r2, r7
 8010fcc:	230c      	movs	r3, #12
 8010fce:	18fb      	adds	r3, r7, r3
 8010fd0:	0011      	movs	r1, r2
 8010fd2:	0018      	movs	r0, r3
 8010fd4:	f000 fd6e 	bl	8011ab4 <xTaskCheckForTimeOut>
 8010fd8:	1e03      	subs	r3, r0, #0
 8010fda:	d12e      	bne.n	801103a <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	0018      	movs	r0, r3
 8010fe0:	f000 f8c5 	bl	801116e <prvIsQueueEmpty>
 8010fe4:	1e03      	subs	r3, r0, #0
 8010fe6:	d021      	beq.n	801102c <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10a      	bne.n	8011006 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8010ff0:	f001 f936 	bl	8012260 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	0018      	movs	r0, r3
 8010ffa:	f000 fe83 	bl	8011d04 <xTaskPriorityInherit>
 8010ffe:	0003      	movs	r3, r0
 8011000:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8011002:	f001 f93f 	bl	8012284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	3324      	adds	r3, #36	; 0x24
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	0011      	movs	r1, r2
 801100e:	0018      	movs	r0, r3
 8011010:	f000 fcc2 	bl	8011998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	0018      	movs	r0, r3
 8011018:	f000 f84b 	bl	80110b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801101c:	f000 fb2e 	bl	801167c <xTaskResumeAll>
 8011020:	1e03      	subs	r3, r0, #0
 8011022:	d000      	beq.n	8011026 <xQueueSemaphoreTake+0x154>
 8011024:	e779      	b.n	8010f1a <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8011026:	f001 f90b 	bl	8012240 <vPortYield>
 801102a:	e776      	b.n	8010f1a <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	0018      	movs	r0, r3
 8011030:	f000 f83f 	bl	80110b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011034:	f000 fb22 	bl	801167c <xTaskResumeAll>
 8011038:	e76f      	b.n	8010f1a <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801103a:	69fb      	ldr	r3, [r7, #28]
 801103c:	0018      	movs	r0, r3
 801103e:	f000 f838 	bl	80110b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011042:	f000 fb1b 	bl	801167c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	0018      	movs	r0, r3
 801104a:	f000 f890 	bl	801116e <prvIsQueueEmpty>
 801104e:	1e03      	subs	r3, r0, #0
 8011050:	d100      	bne.n	8011054 <xQueueSemaphoreTake+0x182>
 8011052:	e762      	b.n	8010f1a <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011054:	6a3b      	ldr	r3, [r7, #32]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d010      	beq.n	801107c <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 801105a:	f001 f901 	bl	8012260 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	0018      	movs	r0, r3
 8011062:	f000 f810 	bl	8011086 <prvGetDisinheritPriorityAfterTimeout>
 8011066:	0003      	movs	r3, r0
 8011068:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	697a      	ldr	r2, [r7, #20]
 8011070:	0011      	movs	r1, r2
 8011072:	0018      	movs	r0, r3
 8011074:	f000 feae 	bl	8011dd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011078:	f001 f904 	bl	8012284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801107c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801107e:	0018      	movs	r0, r3
 8011080:	46bd      	mov	sp, r7
 8011082:	b00a      	add	sp, #40	; 0x28
 8011084:	bd80      	pop	{r7, pc}

08011086 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011086:	b580      	push	{r7, lr}
 8011088:	b084      	sub	sp, #16
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011092:	2b00      	cmp	r3, #0
 8011094:	d006      	beq.n	80110a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2207      	movs	r2, #7
 801109e:	1ad3      	subs	r3, r2, r3
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	e001      	b.n	80110a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80110a4:	2300      	movs	r3, #0
 80110a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80110a8:	68fb      	ldr	r3, [r7, #12]
	}
 80110aa:	0018      	movs	r0, r3
 80110ac:	46bd      	mov	sp, r7
 80110ae:	b004      	add	sp, #16
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b084      	sub	sp, #16
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80110ba:	f001 f8d1 	bl	8012260 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80110be:	230f      	movs	r3, #15
 80110c0:	18fb      	adds	r3, r7, r3
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	2145      	movs	r1, #69	; 0x45
 80110c6:	5c52      	ldrb	r2, [r2, r1]
 80110c8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110ca:	e013      	b.n	80110f4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d016      	beq.n	8011102 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	3324      	adds	r3, #36	; 0x24
 80110d8:	0018      	movs	r0, r3
 80110da:	f000 fc7b 	bl	80119d4 <xTaskRemoveFromEventList>
 80110de:	1e03      	subs	r3, r0, #0
 80110e0:	d001      	beq.n	80110e6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80110e2:	f000 fd37 	bl	8011b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80110e6:	210f      	movs	r1, #15
 80110e8:	187b      	adds	r3, r7, r1
 80110ea:	781b      	ldrb	r3, [r3, #0]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	b2da      	uxtb	r2, r3
 80110f0:	187b      	adds	r3, r7, r1
 80110f2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80110f4:	230f      	movs	r3, #15
 80110f6:	18fb      	adds	r3, r7, r3
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	b25b      	sxtb	r3, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	dce5      	bgt.n	80110cc <prvUnlockQueue+0x1a>
 8011100:	e000      	b.n	8011104 <prvUnlockQueue+0x52>
					break;
 8011102:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2245      	movs	r2, #69	; 0x45
 8011108:	21ff      	movs	r1, #255	; 0xff
 801110a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801110c:	f001 f8ba 	bl	8012284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011110:	f001 f8a6 	bl	8012260 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011114:	230e      	movs	r3, #14
 8011116:	18fb      	adds	r3, r7, r3
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	2144      	movs	r1, #68	; 0x44
 801111c:	5c52      	ldrb	r2, [r2, r1]
 801111e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011120:	e013      	b.n	801114a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	691b      	ldr	r3, [r3, #16]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d016      	beq.n	8011158 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	3310      	adds	r3, #16
 801112e:	0018      	movs	r0, r3
 8011130:	f000 fc50 	bl	80119d4 <xTaskRemoveFromEventList>
 8011134:	1e03      	subs	r3, r0, #0
 8011136:	d001      	beq.n	801113c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8011138:	f000 fd0c 	bl	8011b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801113c:	210e      	movs	r1, #14
 801113e:	187b      	adds	r3, r7, r1
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	3b01      	subs	r3, #1
 8011144:	b2da      	uxtb	r2, r3
 8011146:	187b      	adds	r3, r7, r1
 8011148:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801114a:	230e      	movs	r3, #14
 801114c:	18fb      	adds	r3, r7, r3
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	b25b      	sxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	dce5      	bgt.n	8011122 <prvUnlockQueue+0x70>
 8011156:	e000      	b.n	801115a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8011158:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2244      	movs	r2, #68	; 0x44
 801115e:	21ff      	movs	r1, #255	; 0xff
 8011160:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8011162:	f001 f88f 	bl	8012284 <vPortExitCritical>
}
 8011166:	46c0      	nop			; (mov r8, r8)
 8011168:	46bd      	mov	sp, r7
 801116a:	b004      	add	sp, #16
 801116c:	bd80      	pop	{r7, pc}

0801116e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011176:	f001 f873 	bl	8012260 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801117e:	2b00      	cmp	r3, #0
 8011180:	d102      	bne.n	8011188 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011182:	2301      	movs	r3, #1
 8011184:	60fb      	str	r3, [r7, #12]
 8011186:	e001      	b.n	801118c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011188:	2300      	movs	r3, #0
 801118a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801118c:	f001 f87a 	bl	8012284 <vPortExitCritical>

	return xReturn;
 8011190:	68fb      	ldr	r3, [r7, #12]
}
 8011192:	0018      	movs	r0, r3
 8011194:	46bd      	mov	sp, r7
 8011196:	b004      	add	sp, #16
 8011198:	bd80      	pop	{r7, pc}

0801119a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801119a:	b590      	push	{r4, r7, lr}
 801119c:	b08d      	sub	sp, #52	; 0x34
 801119e:	af04      	add	r7, sp, #16
 80111a0:	60f8      	str	r0, [r7, #12]
 80111a2:	60b9      	str	r1, [r7, #8]
 80111a4:	603b      	str	r3, [r7, #0]
 80111a6:	1dbb      	adds	r3, r7, #6
 80111a8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80111aa:	1dbb      	adds	r3, r7, #6
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	0018      	movs	r0, r3
 80111b2:	f001 f8ed 	bl	8012390 <pvPortMalloc>
 80111b6:	0003      	movs	r3, r0
 80111b8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d010      	beq.n	80111e2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80111c0:	2054      	movs	r0, #84	; 0x54
 80111c2:	f001 f8e5 	bl	8012390 <pvPortMalloc>
 80111c6:	0003      	movs	r3, r0
 80111c8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d003      	beq.n	80111d8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	697a      	ldr	r2, [r7, #20]
 80111d4:	631a      	str	r2, [r3, #48]	; 0x30
 80111d6:	e006      	b.n	80111e6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	0018      	movs	r0, r3
 80111dc:	f001 f984 	bl	80124e8 <vPortFree>
 80111e0:	e001      	b.n	80111e6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80111e2:	2300      	movs	r3, #0
 80111e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d016      	beq.n	801121a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80111ec:	1dbb      	adds	r3, r7, #6
 80111ee:	881a      	ldrh	r2, [r3, #0]
 80111f0:	683c      	ldr	r4, [r7, #0]
 80111f2:	68b9      	ldr	r1, [r7, #8]
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	2300      	movs	r3, #0
 80111f8:	9303      	str	r3, [sp, #12]
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	9302      	str	r3, [sp, #8]
 80111fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	0023      	movs	r3, r4
 8011208:	f000 f810 	bl	801122c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801120c:	69fb      	ldr	r3, [r7, #28]
 801120e:	0018      	movs	r0, r3
 8011210:	f000 f88e 	bl	8011330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011214:	2301      	movs	r3, #1
 8011216:	61bb      	str	r3, [r7, #24]
 8011218:	e002      	b.n	8011220 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801121a:	2301      	movs	r3, #1
 801121c:	425b      	negs	r3, r3
 801121e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011220:	69bb      	ldr	r3, [r7, #24]
	}
 8011222:	0018      	movs	r0, r3
 8011224:	46bd      	mov	sp, r7
 8011226:	b009      	add	sp, #36	; 0x24
 8011228:	bd90      	pop	{r4, r7, pc}
	...

0801122c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801123c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	493a      	ldr	r1, [pc, #232]	; (801132c <prvInitialiseNewTask+0x100>)
 8011242:	468c      	mov	ip, r1
 8011244:	4463      	add	r3, ip
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	18d3      	adds	r3, r2, r3
 801124a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	2207      	movs	r2, #7
 8011250:	4393      	bics	r3, r2
 8011252:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	2207      	movs	r2, #7
 8011258:	4013      	ands	r3, r2
 801125a:	d001      	beq.n	8011260 <prvInitialiseNewTask+0x34>
 801125c:	b672      	cpsid	i
 801125e:	e7fe      	b.n	801125e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d020      	beq.n	80112a8 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011266:	2300      	movs	r3, #0
 8011268:	617b      	str	r3, [r7, #20]
 801126a:	e013      	b.n	8011294 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801126c:	68ba      	ldr	r2, [r7, #8]
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	18d3      	adds	r3, r2, r3
 8011272:	7818      	ldrb	r0, [r3, #0]
 8011274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011276:	2134      	movs	r1, #52	; 0x34
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	18d3      	adds	r3, r2, r3
 801127c:	185b      	adds	r3, r3, r1
 801127e:	1c02      	adds	r2, r0, #0
 8011280:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011282:	68ba      	ldr	r2, [r7, #8]
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	18d3      	adds	r3, r2, r3
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d006      	beq.n	801129c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	3301      	adds	r3, #1
 8011292:	617b      	str	r3, [r7, #20]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	2b0f      	cmp	r3, #15
 8011298:	d9e8      	bls.n	801126c <prvInitialiseNewTask+0x40>
 801129a:	e000      	b.n	801129e <prvInitialiseNewTask+0x72>
			{
				break;
 801129c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a0:	2243      	movs	r2, #67	; 0x43
 80112a2:	2100      	movs	r1, #0
 80112a4:	5499      	strb	r1, [r3, r2]
 80112a6:	e003      	b.n	80112b0 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80112a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112aa:	2234      	movs	r2, #52	; 0x34
 80112ac:	2100      	movs	r1, #0
 80112ae:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80112b0:	6a3b      	ldr	r3, [r7, #32]
 80112b2:	2b06      	cmp	r3, #6
 80112b4:	d901      	bls.n	80112ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80112b6:	2306      	movs	r3, #6
 80112b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80112ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112bc:	6a3a      	ldr	r2, [r7, #32]
 80112be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80112c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c2:	6a3a      	ldr	r2, [r7, #32]
 80112c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	2200      	movs	r2, #0
 80112ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	3304      	adds	r3, #4
 80112d0:	0018      	movs	r0, r3
 80112d2:	f7ff fc6a 	bl	8010baa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	3318      	adds	r3, #24
 80112da:	0018      	movs	r0, r3
 80112dc:	f7ff fc65 	bl	8010baa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80112e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	2207      	movs	r2, #7
 80112ea:	1ad2      	subs	r2, r2, r3
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80112f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80112f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f8:	2200      	movs	r2, #0
 80112fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	2250      	movs	r2, #80	; 0x50
 8011300:	2100      	movs	r1, #0
 8011302:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	68f9      	ldr	r1, [r7, #12]
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	0018      	movs	r0, r3
 801130c:	f000 ff0e 	bl	801212c <pxPortInitialiseStack>
 8011310:	0002      	movs	r2, r0
 8011312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011314:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011318:	2b00      	cmp	r3, #0
 801131a:	d002      	beq.n	8011322 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011322:	46c0      	nop			; (mov r8, r8)
 8011324:	46bd      	mov	sp, r7
 8011326:	b006      	add	sp, #24
 8011328:	bd80      	pop	{r7, pc}
 801132a:	46c0      	nop			; (mov r8, r8)
 801132c:	3fffffff 	.word	0x3fffffff

08011330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011338:	f000 ff92 	bl	8012260 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801133c:	4b28      	ldr	r3, [pc, #160]	; (80113e0 <prvAddNewTaskToReadyList+0xb0>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	4b27      	ldr	r3, [pc, #156]	; (80113e0 <prvAddNewTaskToReadyList+0xb0>)
 8011344:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8011346:	4b27      	ldr	r3, [pc, #156]	; (80113e4 <prvAddNewTaskToReadyList+0xb4>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d109      	bne.n	8011362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801134e:	4b25      	ldr	r3, [pc, #148]	; (80113e4 <prvAddNewTaskToReadyList+0xb4>)
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011354:	4b22      	ldr	r3, [pc, #136]	; (80113e0 <prvAddNewTaskToReadyList+0xb0>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d110      	bne.n	801137e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801135c:	f000 fc14 	bl	8011b88 <prvInitialiseTaskLists>
 8011360:	e00d      	b.n	801137e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011362:	4b21      	ldr	r3, [pc, #132]	; (80113e8 <prvAddNewTaskToReadyList+0xb8>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d109      	bne.n	801137e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801136a:	4b1e      	ldr	r3, [pc, #120]	; (80113e4 <prvAddNewTaskToReadyList+0xb4>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011374:	429a      	cmp	r2, r3
 8011376:	d802      	bhi.n	801137e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011378:	4b1a      	ldr	r3, [pc, #104]	; (80113e4 <prvAddNewTaskToReadyList+0xb4>)
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801137e:	4b1b      	ldr	r3, [pc, #108]	; (80113ec <prvAddNewTaskToReadyList+0xbc>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	4b19      	ldr	r3, [pc, #100]	; (80113ec <prvAddNewTaskToReadyList+0xbc>)
 8011386:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801138c:	4b18      	ldr	r3, [pc, #96]	; (80113f0 <prvAddNewTaskToReadyList+0xc0>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	429a      	cmp	r2, r3
 8011392:	d903      	bls.n	801139c <prvAddNewTaskToReadyList+0x6c>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011398:	4b15      	ldr	r3, [pc, #84]	; (80113f0 <prvAddNewTaskToReadyList+0xc0>)
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a0:	0013      	movs	r3, r2
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	189b      	adds	r3, r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	4a12      	ldr	r2, [pc, #72]	; (80113f4 <prvAddNewTaskToReadyList+0xc4>)
 80113aa:	189a      	adds	r2, r3, r2
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	3304      	adds	r3, #4
 80113b0:	0019      	movs	r1, r3
 80113b2:	0010      	movs	r0, r2
 80113b4:	f7ff fc04 	bl	8010bc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80113b8:	f000 ff64 	bl	8012284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80113bc:	4b0a      	ldr	r3, [pc, #40]	; (80113e8 <prvAddNewTaskToReadyList+0xb8>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d008      	beq.n	80113d6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80113c4:	4b07      	ldr	r3, [pc, #28]	; (80113e4 <prvAddNewTaskToReadyList+0xb4>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d201      	bcs.n	80113d6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80113d2:	f000 ff35 	bl	8012240 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113d6:	46c0      	nop			; (mov r8, r8)
 80113d8:	46bd      	mov	sp, r7
 80113da:	b002      	add	sp, #8
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	46c0      	nop			; (mov r8, r8)
 80113e0:	20000ef0 	.word	0x20000ef0
 80113e4:	20000df0 	.word	0x20000df0
 80113e8:	20000efc 	.word	0x20000efc
 80113ec:	20000f0c 	.word	0x20000f0c
 80113f0:	20000ef8 	.word	0x20000ef8
 80113f4:	20000df4 	.word	0x20000df4

080113f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011400:	2300      	movs	r3, #0
 8011402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d010      	beq.n	801142c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801140a:	4b0d      	ldr	r3, [pc, #52]	; (8011440 <vTaskDelay+0x48>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d001      	beq.n	8011416 <vTaskDelay+0x1e>
 8011412:	b672      	cpsid	i
 8011414:	e7fe      	b.n	8011414 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8011416:	f000 f925 	bl	8011664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2100      	movs	r1, #0
 801141e:	0018      	movs	r0, r3
 8011420:	f000 fe30 	bl	8012084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011424:	f000 f92a 	bl	801167c <xTaskResumeAll>
 8011428:	0003      	movs	r3, r0
 801142a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8011432:	f000 ff05 	bl	8012240 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011436:	46c0      	nop			; (mov r8, r8)
 8011438:	46bd      	mov	sp, r7
 801143a:	b004      	add	sp, #16
 801143c:	bd80      	pop	{r7, pc}
 801143e:	46c0      	nop			; (mov r8, r8)
 8011440:	20000f18 	.word	0x20000f18

08011444 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801144c:	f000 ff08 	bl	8012260 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d102      	bne.n	801145c <vTaskSuspend+0x18>
 8011456:	4b29      	ldr	r3, [pc, #164]	; (80114fc <vTaskSuspend+0xb8>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	e000      	b.n	801145e <vTaskSuspend+0x1a>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	3304      	adds	r3, #4
 8011464:	0018      	movs	r0, r3
 8011466:	f7ff fc03 	bl	8010c70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801146e:	2b00      	cmp	r3, #0
 8011470:	d004      	beq.n	801147c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	3318      	adds	r3, #24
 8011476:	0018      	movs	r0, r3
 8011478:	f7ff fbfa 	bl	8010c70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	1d1a      	adds	r2, r3, #4
 8011480:	4b1f      	ldr	r3, [pc, #124]	; (8011500 <vTaskSuspend+0xbc>)
 8011482:	0011      	movs	r1, r2
 8011484:	0018      	movs	r0, r3
 8011486:	f7ff fb9b 	bl	8010bc0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2250      	movs	r2, #80	; 0x50
 801148e:	5c9b      	ldrb	r3, [r3, r2]
 8011490:	b2db      	uxtb	r3, r3
 8011492:	2b01      	cmp	r3, #1
 8011494:	d103      	bne.n	801149e <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2250      	movs	r2, #80	; 0x50
 801149a:	2100      	movs	r1, #0
 801149c:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801149e:	f000 fef1 	bl	8012284 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80114a2:	4b18      	ldr	r3, [pc, #96]	; (8011504 <vTaskSuspend+0xc0>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d005      	beq.n	80114b6 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80114aa:	f000 fed9 	bl	8012260 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80114ae:	f000 fbef 	bl	8011c90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80114b2:	f000 fee7 	bl	8012284 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80114b6:	4b11      	ldr	r3, [pc, #68]	; (80114fc <vTaskSuspend+0xb8>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d118      	bne.n	80114f2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80114c0:	4b10      	ldr	r3, [pc, #64]	; (8011504 <vTaskSuspend+0xc0>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d008      	beq.n	80114da <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80114c8:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <vTaskSuspend+0xc4>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <vTaskSuspend+0x90>
 80114d0:	b672      	cpsid	i
 80114d2:	e7fe      	b.n	80114d2 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80114d4:	f000 feb4 	bl	8012240 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114d8:	e00b      	b.n	80114f2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80114da:	4b09      	ldr	r3, [pc, #36]	; (8011500 <vTaskSuspend+0xbc>)
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	4b0b      	ldr	r3, [pc, #44]	; (801150c <vTaskSuspend+0xc8>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d103      	bne.n	80114ee <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80114e6:	4b05      	ldr	r3, [pc, #20]	; (80114fc <vTaskSuspend+0xb8>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	601a      	str	r2, [r3, #0]
	}
 80114ec:	e001      	b.n	80114f2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80114ee:	f000 fa01 	bl	80118f4 <vTaskSwitchContext>
	}
 80114f2:	46c0      	nop			; (mov r8, r8)
 80114f4:	46bd      	mov	sp, r7
 80114f6:	b004      	add	sp, #16
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	46c0      	nop			; (mov r8, r8)
 80114fc:	20000df0 	.word	0x20000df0
 8011500:	20000edc 	.word	0x20000edc
 8011504:	20000efc 	.word	0x20000efc
 8011508:	20000f18 	.word	0x20000f18
 801150c:	20000ef0 	.word	0x20000ef0

08011510 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8011518:	2300      	movs	r3, #0
 801151a:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d101      	bne.n	801152a <prvTaskIsTaskSuspended+0x1a>
 8011526:	b672      	cpsid	i
 8011528:	e7fe      	b.n	8011528 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	695a      	ldr	r2, [r3, #20]
 801152e:	4b09      	ldr	r3, [pc, #36]	; (8011554 <prvTaskIsTaskSuspended+0x44>)
 8011530:	429a      	cmp	r2, r3
 8011532:	d10a      	bne.n	801154a <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011538:	4b07      	ldr	r3, [pc, #28]	; (8011558 <prvTaskIsTaskSuspended+0x48>)
 801153a:	429a      	cmp	r2, r3
 801153c:	d005      	beq.n	801154a <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011542:	2b00      	cmp	r3, #0
 8011544:	d101      	bne.n	801154a <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8011546:	2301      	movs	r3, #1
 8011548:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801154a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801154c:	0018      	movs	r0, r3
 801154e:	46bd      	mov	sp, r7
 8011550:	b004      	add	sp, #16
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20000edc 	.word	0x20000edc
 8011558:	20000eb0 	.word	0x20000eb0

0801155c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <vTaskResume+0x16>
 801156e:	b672      	cpsid	i
 8011570:	e7fe      	b.n	8011570 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011572:	4b1e      	ldr	r3, [pc, #120]	; (80115ec <vTaskResume+0x90>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	429a      	cmp	r2, r3
 801157a:	d032      	beq.n	80115e2 <vTaskResume+0x86>
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d02f      	beq.n	80115e2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8011582:	f000 fe6d 	bl	8012260 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	0018      	movs	r0, r3
 801158a:	f7ff ffc1 	bl	8011510 <prvTaskIsTaskSuspended>
 801158e:	1e03      	subs	r3, r0, #0
 8011590:	d025      	beq.n	80115de <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	3304      	adds	r3, #4
 8011596:	0018      	movs	r0, r3
 8011598:	f7ff fb6a 	bl	8010c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a0:	4b13      	ldr	r3, [pc, #76]	; (80115f0 <vTaskResume+0x94>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d903      	bls.n	80115b0 <vTaskResume+0x54>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ac:	4b10      	ldr	r3, [pc, #64]	; (80115f0 <vTaskResume+0x94>)
 80115ae:	601a      	str	r2, [r3, #0]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b4:	0013      	movs	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	189b      	adds	r3, r3, r2
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	4a0d      	ldr	r2, [pc, #52]	; (80115f4 <vTaskResume+0x98>)
 80115be:	189a      	adds	r2, r3, r2
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	3304      	adds	r3, #4
 80115c4:	0019      	movs	r1, r3
 80115c6:	0010      	movs	r0, r2
 80115c8:	f7ff fafa 	bl	8010bc0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d0:	4b06      	ldr	r3, [pc, #24]	; (80115ec <vTaskResume+0x90>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d301      	bcc.n	80115de <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80115da:	f000 fe31 	bl	8012240 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80115de:	f000 fe51 	bl	8012284 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115e2:	46c0      	nop			; (mov r8, r8)
 80115e4:	46bd      	mov	sp, r7
 80115e6:	b004      	add	sp, #16
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	46c0      	nop			; (mov r8, r8)
 80115ec:	20000df0 	.word	0x20000df0
 80115f0:	20000ef8 	.word	0x20000ef8
 80115f4:	20000df4 	.word	0x20000df4

080115f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80115fe:	4913      	ldr	r1, [pc, #76]	; (801164c <vTaskStartScheduler+0x54>)
 8011600:	4813      	ldr	r0, [pc, #76]	; (8011650 <vTaskStartScheduler+0x58>)
 8011602:	4b14      	ldr	r3, [pc, #80]	; (8011654 <vTaskStartScheduler+0x5c>)
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	2300      	movs	r3, #0
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	2300      	movs	r3, #0
 801160c:	2280      	movs	r2, #128	; 0x80
 801160e:	f7ff fdc4 	bl	801119a <xTaskCreate>
 8011612:	0003      	movs	r3, r0
 8011614:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2b01      	cmp	r3, #1
 801161a:	d10d      	bne.n	8011638 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801161c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801161e:	4b0e      	ldr	r3, [pc, #56]	; (8011658 <vTaskStartScheduler+0x60>)
 8011620:	2201      	movs	r2, #1
 8011622:	4252      	negs	r2, r2
 8011624:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011626:	4b0d      	ldr	r3, [pc, #52]	; (801165c <vTaskStartScheduler+0x64>)
 8011628:	2201      	movs	r2, #1
 801162a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801162c:	4b0c      	ldr	r3, [pc, #48]	; (8011660 <vTaskStartScheduler+0x68>)
 801162e:	2200      	movs	r2, #0
 8011630:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011632:	f000 fde1 	bl	80121f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011636:	e004      	b.n	8011642 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3301      	adds	r3, #1
 801163c:	d101      	bne.n	8011642 <vTaskStartScheduler+0x4a>
 801163e:	b672      	cpsid	i
 8011640:	e7fe      	b.n	8011640 <vTaskStartScheduler+0x48>
}
 8011642:	46c0      	nop			; (mov r8, r8)
 8011644:	46bd      	mov	sp, r7
 8011646:	b002      	add	sp, #8
 8011648:	bd80      	pop	{r7, pc}
 801164a:	46c0      	nop			; (mov r8, r8)
 801164c:	080167e8 	.word	0x080167e8
 8011650:	08011b69 	.word	0x08011b69
 8011654:	20000f14 	.word	0x20000f14
 8011658:	20000f10 	.word	0x20000f10
 801165c:	20000efc 	.word	0x20000efc
 8011660:	20000ef4 	.word	0x20000ef4

08011664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011664:	b580      	push	{r7, lr}
 8011666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011668:	4b03      	ldr	r3, [pc, #12]	; (8011678 <vTaskSuspendAll+0x14>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	1c5a      	adds	r2, r3, #1
 801166e:	4b02      	ldr	r3, [pc, #8]	; (8011678 <vTaskSuspendAll+0x14>)
 8011670:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011672:	46c0      	nop			; (mov r8, r8)
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	20000f18 	.word	0x20000f18

0801167c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011686:	2300      	movs	r3, #0
 8011688:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801168a:	4b3a      	ldr	r3, [pc, #232]	; (8011774 <xTaskResumeAll+0xf8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d101      	bne.n	8011696 <xTaskResumeAll+0x1a>
 8011692:	b672      	cpsid	i
 8011694:	e7fe      	b.n	8011694 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011696:	f000 fde3 	bl	8012260 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801169a:	4b36      	ldr	r3, [pc, #216]	; (8011774 <xTaskResumeAll+0xf8>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	1e5a      	subs	r2, r3, #1
 80116a0:	4b34      	ldr	r3, [pc, #208]	; (8011774 <xTaskResumeAll+0xf8>)
 80116a2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116a4:	4b33      	ldr	r3, [pc, #204]	; (8011774 <xTaskResumeAll+0xf8>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d15b      	bne.n	8011764 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80116ac:	4b32      	ldr	r3, [pc, #200]	; (8011778 <xTaskResumeAll+0xfc>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d057      	beq.n	8011764 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80116b4:	e02f      	b.n	8011716 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116b6:	4b31      	ldr	r3, [pc, #196]	; (801177c <xTaskResumeAll+0x100>)
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	3318      	adds	r3, #24
 80116c2:	0018      	movs	r0, r3
 80116c4:	f7ff fad4 	bl	8010c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3304      	adds	r3, #4
 80116cc:	0018      	movs	r0, r3
 80116ce:	f7ff facf 	bl	8010c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d6:	4b2a      	ldr	r3, [pc, #168]	; (8011780 <xTaskResumeAll+0x104>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d903      	bls.n	80116e6 <xTaskResumeAll+0x6a>
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e2:	4b27      	ldr	r3, [pc, #156]	; (8011780 <xTaskResumeAll+0x104>)
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ea:	0013      	movs	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	189b      	adds	r3, r3, r2
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4a24      	ldr	r2, [pc, #144]	; (8011784 <xTaskResumeAll+0x108>)
 80116f4:	189a      	adds	r2, r3, r2
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3304      	adds	r3, #4
 80116fa:	0019      	movs	r1, r3
 80116fc:	0010      	movs	r0, r2
 80116fe:	f7ff fa5f 	bl	8010bc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011706:	4b20      	ldr	r3, [pc, #128]	; (8011788 <xTaskResumeAll+0x10c>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170c:	429a      	cmp	r2, r3
 801170e:	d302      	bcc.n	8011716 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8011710:	4b1e      	ldr	r3, [pc, #120]	; (801178c <xTaskResumeAll+0x110>)
 8011712:	2201      	movs	r2, #1
 8011714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011716:	4b19      	ldr	r3, [pc, #100]	; (801177c <xTaskResumeAll+0x100>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1cb      	bne.n	80116b6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011724:	f000 fab4 	bl	8011c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011728:	4b19      	ldr	r3, [pc, #100]	; (8011790 <xTaskResumeAll+0x114>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00f      	beq.n	8011754 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011734:	f000 f82e 	bl	8011794 <xTaskIncrementTick>
 8011738:	1e03      	subs	r3, r0, #0
 801173a:	d002      	beq.n	8011742 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 801173c:	4b13      	ldr	r3, [pc, #76]	; (801178c <xTaskResumeAll+0x110>)
 801173e:	2201      	movs	r2, #1
 8011740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	3b01      	subs	r3, #1
 8011746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1f2      	bne.n	8011734 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 801174e:	4b10      	ldr	r3, [pc, #64]	; (8011790 <xTaskResumeAll+0x114>)
 8011750:	2200      	movs	r2, #0
 8011752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011754:	4b0d      	ldr	r3, [pc, #52]	; (801178c <xTaskResumeAll+0x110>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d003      	beq.n	8011764 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801175c:	2301      	movs	r3, #1
 801175e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011760:	f000 fd6e 	bl	8012240 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011764:	f000 fd8e 	bl	8012284 <vPortExitCritical>

	return xAlreadyYielded;
 8011768:	68bb      	ldr	r3, [r7, #8]
}
 801176a:	0018      	movs	r0, r3
 801176c:	46bd      	mov	sp, r7
 801176e:	b004      	add	sp, #16
 8011770:	bd80      	pop	{r7, pc}
 8011772:	46c0      	nop			; (mov r8, r8)
 8011774:	20000f18 	.word	0x20000f18
 8011778:	20000ef0 	.word	0x20000ef0
 801177c:	20000eb0 	.word	0x20000eb0
 8011780:	20000ef8 	.word	0x20000ef8
 8011784:	20000df4 	.word	0x20000df4
 8011788:	20000df0 	.word	0x20000df0
 801178c:	20000f04 	.word	0x20000f04
 8011790:	20000f00 	.word	0x20000f00

08011794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b086      	sub	sp, #24
 8011798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801179a:	2300      	movs	r3, #0
 801179c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801179e:	4b4a      	ldr	r3, [pc, #296]	; (80118c8 <xTaskIncrementTick+0x134>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d000      	beq.n	80117a8 <xTaskIncrementTick+0x14>
 80117a6:	e084      	b.n	80118b2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80117a8:	4b48      	ldr	r3, [pc, #288]	; (80118cc <xTaskIncrementTick+0x138>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3301      	adds	r3, #1
 80117ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80117b0:	4b46      	ldr	r3, [pc, #280]	; (80118cc <xTaskIncrementTick+0x138>)
 80117b2:	693a      	ldr	r2, [r7, #16]
 80117b4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d117      	bne.n	80117ec <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80117bc:	4b44      	ldr	r3, [pc, #272]	; (80118d0 <xTaskIncrementTick+0x13c>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <xTaskIncrementTick+0x36>
 80117c6:	b672      	cpsid	i
 80117c8:	e7fe      	b.n	80117c8 <xTaskIncrementTick+0x34>
 80117ca:	4b41      	ldr	r3, [pc, #260]	; (80118d0 <xTaskIncrementTick+0x13c>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	60fb      	str	r3, [r7, #12]
 80117d0:	4b40      	ldr	r3, [pc, #256]	; (80118d4 <xTaskIncrementTick+0x140>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	4b3e      	ldr	r3, [pc, #248]	; (80118d0 <xTaskIncrementTick+0x13c>)
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	4b3e      	ldr	r3, [pc, #248]	; (80118d4 <xTaskIncrementTick+0x140>)
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	4b3e      	ldr	r3, [pc, #248]	; (80118d8 <xTaskIncrementTick+0x144>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	1c5a      	adds	r2, r3, #1
 80117e4:	4b3c      	ldr	r3, [pc, #240]	; (80118d8 <xTaskIncrementTick+0x144>)
 80117e6:	601a      	str	r2, [r3, #0]
 80117e8:	f000 fa52 	bl	8011c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80117ec:	4b3b      	ldr	r3, [pc, #236]	; (80118dc <xTaskIncrementTick+0x148>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d349      	bcc.n	801188a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117f6:	4b36      	ldr	r3, [pc, #216]	; (80118d0 <xTaskIncrementTick+0x13c>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d104      	bne.n	801180a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011800:	4b36      	ldr	r3, [pc, #216]	; (80118dc <xTaskIncrementTick+0x148>)
 8011802:	2201      	movs	r2, #1
 8011804:	4252      	negs	r2, r2
 8011806:	601a      	str	r2, [r3, #0]
					break;
 8011808:	e03f      	b.n	801188a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801180a:	4b31      	ldr	r3, [pc, #196]	; (80118d0 <xTaskIncrementTick+0x13c>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801181a:	693a      	ldr	r2, [r7, #16]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	429a      	cmp	r2, r3
 8011820:	d203      	bcs.n	801182a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011822:	4b2e      	ldr	r3, [pc, #184]	; (80118dc <xTaskIncrementTick+0x148>)
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011828:	e02f      	b.n	801188a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	3304      	adds	r3, #4
 801182e:	0018      	movs	r0, r3
 8011830:	f7ff fa1e 	bl	8010c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011838:	2b00      	cmp	r3, #0
 801183a:	d004      	beq.n	8011846 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	3318      	adds	r3, #24
 8011840:	0018      	movs	r0, r3
 8011842:	f7ff fa15 	bl	8010c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801184a:	4b25      	ldr	r3, [pc, #148]	; (80118e0 <xTaskIncrementTick+0x14c>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	429a      	cmp	r2, r3
 8011850:	d903      	bls.n	801185a <xTaskIncrementTick+0xc6>
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011856:	4b22      	ldr	r3, [pc, #136]	; (80118e0 <xTaskIncrementTick+0x14c>)
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801185e:	0013      	movs	r3, r2
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	189b      	adds	r3, r3, r2
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	4a1f      	ldr	r2, [pc, #124]	; (80118e4 <xTaskIncrementTick+0x150>)
 8011868:	189a      	adds	r2, r3, r2
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	3304      	adds	r3, #4
 801186e:	0019      	movs	r1, r3
 8011870:	0010      	movs	r0, r2
 8011872:	f7ff f9a5 	bl	8010bc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187a:	4b1b      	ldr	r3, [pc, #108]	; (80118e8 <xTaskIncrementTick+0x154>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011880:	429a      	cmp	r2, r3
 8011882:	d3b8      	bcc.n	80117f6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011884:	2301      	movs	r3, #1
 8011886:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011888:	e7b5      	b.n	80117f6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801188a:	4b17      	ldr	r3, [pc, #92]	; (80118e8 <xTaskIncrementTick+0x154>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011890:	4914      	ldr	r1, [pc, #80]	; (80118e4 <xTaskIncrementTick+0x150>)
 8011892:	0013      	movs	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	189b      	adds	r3, r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	585b      	ldr	r3, [r3, r1]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d901      	bls.n	80118a4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80118a0:	2301      	movs	r3, #1
 80118a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80118a4:	4b11      	ldr	r3, [pc, #68]	; (80118ec <xTaskIncrementTick+0x158>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d007      	beq.n	80118bc <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80118ac:	2301      	movs	r3, #1
 80118ae:	617b      	str	r3, [r7, #20]
 80118b0:	e004      	b.n	80118bc <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80118b2:	4b0f      	ldr	r3, [pc, #60]	; (80118f0 <xTaskIncrementTick+0x15c>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	1c5a      	adds	r2, r3, #1
 80118b8:	4b0d      	ldr	r3, [pc, #52]	; (80118f0 <xTaskIncrementTick+0x15c>)
 80118ba:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80118bc:	697b      	ldr	r3, [r7, #20]
}
 80118be:	0018      	movs	r0, r3
 80118c0:	46bd      	mov	sp, r7
 80118c2:	b006      	add	sp, #24
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	46c0      	nop			; (mov r8, r8)
 80118c8:	20000f18 	.word	0x20000f18
 80118cc:	20000ef4 	.word	0x20000ef4
 80118d0:	20000ea8 	.word	0x20000ea8
 80118d4:	20000eac 	.word	0x20000eac
 80118d8:	20000f08 	.word	0x20000f08
 80118dc:	20000f10 	.word	0x20000f10
 80118e0:	20000ef8 	.word	0x20000ef8
 80118e4:	20000df4 	.word	0x20000df4
 80118e8:	20000df0 	.word	0x20000df0
 80118ec:	20000f04 	.word	0x20000f04
 80118f0:	20000f00 	.word	0x20000f00

080118f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80118fa:	4b22      	ldr	r3, [pc, #136]	; (8011984 <vTaskSwitchContext+0x90>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d003      	beq.n	801190a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011902:	4b21      	ldr	r3, [pc, #132]	; (8011988 <vTaskSwitchContext+0x94>)
 8011904:	2201      	movs	r2, #1
 8011906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011908:	e037      	b.n	801197a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 801190a:	4b1f      	ldr	r3, [pc, #124]	; (8011988 <vTaskSwitchContext+0x94>)
 801190c:	2200      	movs	r2, #0
 801190e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011910:	4b1e      	ldr	r3, [pc, #120]	; (801198c <vTaskSwitchContext+0x98>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	e007      	b.n	8011928 <vTaskSwitchContext+0x34>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d101      	bne.n	8011922 <vTaskSwitchContext+0x2e>
 801191e:	b672      	cpsid	i
 8011920:	e7fe      	b.n	8011920 <vTaskSwitchContext+0x2c>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	3b01      	subs	r3, #1
 8011926:	607b      	str	r3, [r7, #4]
 8011928:	4919      	ldr	r1, [pc, #100]	; (8011990 <vTaskSwitchContext+0x9c>)
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	0013      	movs	r3, r2
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	189b      	adds	r3, r3, r2
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	585b      	ldr	r3, [r3, r1]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d0ee      	beq.n	8011918 <vTaskSwitchContext+0x24>
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	0013      	movs	r3, r2
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	189b      	adds	r3, r3, r2
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	4a12      	ldr	r2, [pc, #72]	; (8011990 <vTaskSwitchContext+0x9c>)
 8011946:	189b      	adds	r3, r3, r2
 8011948:	603b      	str	r3, [r7, #0]
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	685a      	ldr	r2, [r3, #4]
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	605a      	str	r2, [r3, #4]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	685a      	ldr	r2, [r3, #4]
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	3308      	adds	r3, #8
 801195c:	429a      	cmp	r2, r3
 801195e:	d104      	bne.n	801196a <vTaskSwitchContext+0x76>
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	685a      	ldr	r2, [r3, #4]
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	605a      	str	r2, [r3, #4]
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	68da      	ldr	r2, [r3, #12]
 8011970:	4b08      	ldr	r3, [pc, #32]	; (8011994 <vTaskSwitchContext+0xa0>)
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	4b05      	ldr	r3, [pc, #20]	; (801198c <vTaskSwitchContext+0x98>)
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	601a      	str	r2, [r3, #0]
}
 801197a:	46c0      	nop			; (mov r8, r8)
 801197c:	46bd      	mov	sp, r7
 801197e:	b002      	add	sp, #8
 8011980:	bd80      	pop	{r7, pc}
 8011982:	46c0      	nop			; (mov r8, r8)
 8011984:	20000f18 	.word	0x20000f18
 8011988:	20000f04 	.word	0x20000f04
 801198c:	20000ef8 	.word	0x20000ef8
 8011990:	20000df4 	.word	0x20000df4
 8011994:	20000df0 	.word	0x20000df0

08011998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d101      	bne.n	80119ac <vTaskPlaceOnEventList+0x14>
 80119a8:	b672      	cpsid	i
 80119aa:	e7fe      	b.n	80119aa <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119ac:	4b08      	ldr	r3, [pc, #32]	; (80119d0 <vTaskPlaceOnEventList+0x38>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	3318      	adds	r3, #24
 80119b2:	001a      	movs	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	0011      	movs	r1, r2
 80119b8:	0018      	movs	r0, r3
 80119ba:	f7ff f923 	bl	8010c04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	2101      	movs	r1, #1
 80119c2:	0018      	movs	r0, r3
 80119c4:	f000 fb5e 	bl	8012084 <prvAddCurrentTaskToDelayedList>
}
 80119c8:	46c0      	nop			; (mov r8, r8)
 80119ca:	46bd      	mov	sp, r7
 80119cc:	b002      	add	sp, #8
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	20000df0 	.word	0x20000df0

080119d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	68db      	ldr	r3, [r3, #12]
 80119e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d101      	bne.n	80119ee <xTaskRemoveFromEventList+0x1a>
 80119ea:	b672      	cpsid	i
 80119ec:	e7fe      	b.n	80119ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	3318      	adds	r3, #24
 80119f2:	0018      	movs	r0, r3
 80119f4:	f7ff f93c 	bl	8010c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119f8:	4b1e      	ldr	r3, [pc, #120]	; (8011a74 <xTaskRemoveFromEventList+0xa0>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d11d      	bne.n	8011a3c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	3304      	adds	r3, #4
 8011a04:	0018      	movs	r0, r3
 8011a06:	f7ff f933 	bl	8010c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0e:	4b1a      	ldr	r3, [pc, #104]	; (8011a78 <xTaskRemoveFromEventList+0xa4>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d903      	bls.n	8011a1e <xTaskRemoveFromEventList+0x4a>
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1a:	4b17      	ldr	r3, [pc, #92]	; (8011a78 <xTaskRemoveFromEventList+0xa4>)
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a22:	0013      	movs	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	189b      	adds	r3, r3, r2
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	4a14      	ldr	r2, [pc, #80]	; (8011a7c <xTaskRemoveFromEventList+0xa8>)
 8011a2c:	189a      	adds	r2, r3, r2
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	3304      	adds	r3, #4
 8011a32:	0019      	movs	r1, r3
 8011a34:	0010      	movs	r0, r2
 8011a36:	f7ff f8c3 	bl	8010bc0 <vListInsertEnd>
 8011a3a:	e007      	b.n	8011a4c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	3318      	adds	r3, #24
 8011a40:	001a      	movs	r2, r3
 8011a42:	4b0f      	ldr	r3, [pc, #60]	; (8011a80 <xTaskRemoveFromEventList+0xac>)
 8011a44:	0011      	movs	r1, r2
 8011a46:	0018      	movs	r0, r3
 8011a48:	f7ff f8ba 	bl	8010bc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a50:	4b0c      	ldr	r3, [pc, #48]	; (8011a84 <xTaskRemoveFromEventList+0xb0>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d905      	bls.n	8011a66 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a5e:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <xTaskRemoveFromEventList+0xb4>)
 8011a60:	2201      	movs	r2, #1
 8011a62:	601a      	str	r2, [r3, #0]
 8011a64:	e001      	b.n	8011a6a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8011a66:	2300      	movs	r3, #0
 8011a68:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
}
 8011a6c:	0018      	movs	r0, r3
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	b004      	add	sp, #16
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	20000f18 	.word	0x20000f18
 8011a78:	20000ef8 	.word	0x20000ef8
 8011a7c:	20000df4 	.word	0x20000df4
 8011a80:	20000eb0 	.word	0x20000eb0
 8011a84:	20000df0 	.word	0x20000df0
 8011a88:	20000f04 	.word	0x20000f04

08011a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a94:	4b05      	ldr	r3, [pc, #20]	; (8011aac <vTaskInternalSetTimeOutState+0x20>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a9c:	4b04      	ldr	r3, [pc, #16]	; (8011ab0 <vTaskInternalSetTimeOutState+0x24>)
 8011a9e:	681a      	ldr	r2, [r3, #0]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	605a      	str	r2, [r3, #4]
}
 8011aa4:	46c0      	nop			; (mov r8, r8)
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	b002      	add	sp, #8
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	20000f08 	.word	0x20000f08
 8011ab0:	20000ef4 	.word	0x20000ef4

08011ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <xTaskCheckForTimeOut+0x14>
 8011ac4:	b672      	cpsid	i
 8011ac6:	e7fe      	b.n	8011ac6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d101      	bne.n	8011ad2 <xTaskCheckForTimeOut+0x1e>
 8011ace:	b672      	cpsid	i
 8011ad0:	e7fe      	b.n	8011ad0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8011ad2:	f000 fbc5 	bl	8012260 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011ad6:	4b1d      	ldr	r3, [pc, #116]	; (8011b4c <xTaskCheckForTimeOut+0x98>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	693a      	ldr	r2, [r7, #16]
 8011ae2:	1ad3      	subs	r3, r2, r3
 8011ae4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	3301      	adds	r3, #1
 8011aec:	d102      	bne.n	8011af4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011aee:	2300      	movs	r3, #0
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e024      	b.n	8011b3e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	4b15      	ldr	r3, [pc, #84]	; (8011b50 <xTaskCheckForTimeOut+0x9c>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d007      	beq.n	8011b10 <xTaskCheckForTimeOut+0x5c>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	693a      	ldr	r2, [r7, #16]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d302      	bcc.n	8011b10 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	617b      	str	r3, [r7, #20]
 8011b0e:	e016      	b.n	8011b3e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d20c      	bcs.n	8011b34 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	1ad2      	subs	r2, r2, r3
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	0018      	movs	r0, r3
 8011b2a:	f7ff ffaf 	bl	8011a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	617b      	str	r3, [r7, #20]
 8011b32:	e004      	b.n	8011b3e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2200      	movs	r2, #0
 8011b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8011b3e:	f000 fba1 	bl	8012284 <vPortExitCritical>

	return xReturn;
 8011b42:	697b      	ldr	r3, [r7, #20]
}
 8011b44:	0018      	movs	r0, r3
 8011b46:	46bd      	mov	sp, r7
 8011b48:	b006      	add	sp, #24
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	20000ef4 	.word	0x20000ef4
 8011b50:	20000f08 	.word	0x20000f08

08011b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011b58:	4b02      	ldr	r3, [pc, #8]	; (8011b64 <vTaskMissedYield+0x10>)
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	601a      	str	r2, [r3, #0]
}
 8011b5e:	46c0      	nop			; (mov r8, r8)
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	20000f04 	.word	0x20000f04

08011b68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b70:	f000 f84e 	bl	8011c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b74:	4b03      	ldr	r3, [pc, #12]	; (8011b84 <prvIdleTask+0x1c>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d9f9      	bls.n	8011b70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b7c:	f000 fb60 	bl	8012240 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011b80:	e7f6      	b.n	8011b70 <prvIdleTask+0x8>
 8011b82:	46c0      	nop			; (mov r8, r8)
 8011b84:	20000df4 	.word	0x20000df4

08011b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b8e:	2300      	movs	r3, #0
 8011b90:	607b      	str	r3, [r7, #4]
 8011b92:	e00c      	b.n	8011bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	0013      	movs	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	189b      	adds	r3, r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4a14      	ldr	r2, [pc, #80]	; (8011bf0 <prvInitialiseTaskLists+0x68>)
 8011ba0:	189b      	adds	r3, r3, r2
 8011ba2:	0018      	movs	r0, r3
 8011ba4:	f7fe ffe3 	bl	8010b6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	3301      	adds	r3, #1
 8011bac:	607b      	str	r3, [r7, #4]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b06      	cmp	r3, #6
 8011bb2:	d9ef      	bls.n	8011b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011bb4:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <prvInitialiseTaskLists+0x6c>)
 8011bb6:	0018      	movs	r0, r3
 8011bb8:	f7fe ffd9 	bl	8010b6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011bbc:	4b0e      	ldr	r3, [pc, #56]	; (8011bf8 <prvInitialiseTaskLists+0x70>)
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f7fe ffd5 	bl	8010b6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011bc4:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <prvInitialiseTaskLists+0x74>)
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	f7fe ffd1 	bl	8010b6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011bcc:	4b0c      	ldr	r3, [pc, #48]	; (8011c00 <prvInitialiseTaskLists+0x78>)
 8011bce:	0018      	movs	r0, r3
 8011bd0:	f7fe ffcd 	bl	8010b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011bd4:	4b0b      	ldr	r3, [pc, #44]	; (8011c04 <prvInitialiseTaskLists+0x7c>)
 8011bd6:	0018      	movs	r0, r3
 8011bd8:	f7fe ffc9 	bl	8010b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011bdc:	4b0a      	ldr	r3, [pc, #40]	; (8011c08 <prvInitialiseTaskLists+0x80>)
 8011bde:	4a05      	ldr	r2, [pc, #20]	; (8011bf4 <prvInitialiseTaskLists+0x6c>)
 8011be0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011be2:	4b0a      	ldr	r3, [pc, #40]	; (8011c0c <prvInitialiseTaskLists+0x84>)
 8011be4:	4a04      	ldr	r2, [pc, #16]	; (8011bf8 <prvInitialiseTaskLists+0x70>)
 8011be6:	601a      	str	r2, [r3, #0]
}
 8011be8:	46c0      	nop			; (mov r8, r8)
 8011bea:	46bd      	mov	sp, r7
 8011bec:	b002      	add	sp, #8
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20000df4 	.word	0x20000df4
 8011bf4:	20000e80 	.word	0x20000e80
 8011bf8:	20000e94 	.word	0x20000e94
 8011bfc:	20000eb0 	.word	0x20000eb0
 8011c00:	20000ec4 	.word	0x20000ec4
 8011c04:	20000edc 	.word	0x20000edc
 8011c08:	20000ea8 	.word	0x20000ea8
 8011c0c:	20000eac 	.word	0x20000eac

08011c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c16:	e01a      	b.n	8011c4e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8011c18:	f000 fb22 	bl	8012260 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c1c:	4b10      	ldr	r3, [pc, #64]	; (8011c60 <prvCheckTasksWaitingTermination+0x50>)
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	3304      	adds	r3, #4
 8011c28:	0018      	movs	r0, r3
 8011c2a:	f7ff f821 	bl	8010c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011c2e:	4b0d      	ldr	r3, [pc, #52]	; (8011c64 <prvCheckTasksWaitingTermination+0x54>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	1e5a      	subs	r2, r3, #1
 8011c34:	4b0b      	ldr	r3, [pc, #44]	; (8011c64 <prvCheckTasksWaitingTermination+0x54>)
 8011c36:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011c38:	4b0b      	ldr	r3, [pc, #44]	; (8011c68 <prvCheckTasksWaitingTermination+0x58>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	1e5a      	subs	r2, r3, #1
 8011c3e:	4b0a      	ldr	r3, [pc, #40]	; (8011c68 <prvCheckTasksWaitingTermination+0x58>)
 8011c40:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011c42:	f000 fb1f 	bl	8012284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	0018      	movs	r0, r3
 8011c4a:	f000 f80f 	bl	8011c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011c4e:	4b06      	ldr	r3, [pc, #24]	; (8011c68 <prvCheckTasksWaitingTermination+0x58>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1e0      	bne.n	8011c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011c56:	46c0      	nop			; (mov r8, r8)
 8011c58:	46c0      	nop			; (mov r8, r8)
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	b002      	add	sp, #8
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	20000ec4 	.word	0x20000ec4
 8011c64:	20000ef0 	.word	0x20000ef0
 8011c68:	20000ed8 	.word	0x20000ed8

08011c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c78:	0018      	movs	r0, r3
 8011c7a:	f000 fc35 	bl	80124e8 <vPortFree>
			vPortFree( pxTCB );
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	0018      	movs	r0, r3
 8011c82:	f000 fc31 	bl	80124e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011c86:	46c0      	nop			; (mov r8, r8)
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	b002      	add	sp, #8
 8011c8c:	bd80      	pop	{r7, pc}
	...

08011c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c96:	4b0b      	ldr	r3, [pc, #44]	; (8011cc4 <prvResetNextTaskUnblockTime+0x34>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d104      	bne.n	8011caa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011ca0:	4b09      	ldr	r3, [pc, #36]	; (8011cc8 <prvResetNextTaskUnblockTime+0x38>)
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	4252      	negs	r2, r2
 8011ca6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ca8:	e008      	b.n	8011cbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011caa:	4b06      	ldr	r3, [pc, #24]	; (8011cc4 <prvResetNextTaskUnblockTime+0x34>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	68db      	ldr	r3, [r3, #12]
 8011cb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685a      	ldr	r2, [r3, #4]
 8011cb8:	4b03      	ldr	r3, [pc, #12]	; (8011cc8 <prvResetNextTaskUnblockTime+0x38>)
 8011cba:	601a      	str	r2, [r3, #0]
}
 8011cbc:	46c0      	nop			; (mov r8, r8)
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	b002      	add	sp, #8
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20000ea8 	.word	0x20000ea8
 8011cc8:	20000f10 	.word	0x20000f10

08011ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011cd2:	4b0a      	ldr	r3, [pc, #40]	; (8011cfc <xTaskGetSchedulerState+0x30>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d102      	bne.n	8011ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	607b      	str	r3, [r7, #4]
 8011cde:	e008      	b.n	8011cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ce0:	4b07      	ldr	r3, [pc, #28]	; (8011d00 <xTaskGetSchedulerState+0x34>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d102      	bne.n	8011cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ce8:	2302      	movs	r3, #2
 8011cea:	607b      	str	r3, [r7, #4]
 8011cec:	e001      	b.n	8011cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011cf2:	687b      	ldr	r3, [r7, #4]
	}
 8011cf4:	0018      	movs	r0, r3
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	b002      	add	sp, #8
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	20000efc 	.word	0x20000efc
 8011d00:	20000f18 	.word	0x20000f18

08011d04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011d10:	2300      	movs	r3, #0
 8011d12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d051      	beq.n	8011dbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d1e:	4b2a      	ldr	r3, [pc, #168]	; (8011dc8 <xTaskPriorityInherit+0xc4>)
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d241      	bcs.n	8011dac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	699b      	ldr	r3, [r3, #24]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	db06      	blt.n	8011d3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d30:	4b25      	ldr	r3, [pc, #148]	; (8011dc8 <xTaskPriorityInherit+0xc4>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d36:	2207      	movs	r2, #7
 8011d38:	1ad2      	subs	r2, r2, r3
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	6959      	ldr	r1, [r3, #20]
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d46:	0013      	movs	r3, r2
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	189b      	adds	r3, r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4a1f      	ldr	r2, [pc, #124]	; (8011dcc <xTaskPriorityInherit+0xc8>)
 8011d50:	189b      	adds	r3, r3, r2
 8011d52:	4299      	cmp	r1, r3
 8011d54:	d122      	bne.n	8011d9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	3304      	adds	r3, #4
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	f7fe ff88 	bl	8010c70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d60:	4b19      	ldr	r3, [pc, #100]	; (8011dc8 <xTaskPriorityInherit+0xc4>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d6e:	4b18      	ldr	r3, [pc, #96]	; (8011dd0 <xTaskPriorityInherit+0xcc>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d903      	bls.n	8011d7e <xTaskPriorityInherit+0x7a>
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d7a:	4b15      	ldr	r3, [pc, #84]	; (8011dd0 <xTaskPriorityInherit+0xcc>)
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d82:	0013      	movs	r3, r2
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	189b      	adds	r3, r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4a10      	ldr	r2, [pc, #64]	; (8011dcc <xTaskPriorityInherit+0xc8>)
 8011d8c:	189a      	adds	r2, r3, r2
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	3304      	adds	r3, #4
 8011d92:	0019      	movs	r1, r3
 8011d94:	0010      	movs	r0, r2
 8011d96:	f7fe ff13 	bl	8010bc0 <vListInsertEnd>
 8011d9a:	e004      	b.n	8011da6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d9c:	4b0a      	ldr	r3, [pc, #40]	; (8011dc8 <xTaskPriorityInherit+0xc4>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011da6:	2301      	movs	r3, #1
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e008      	b.n	8011dbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011db0:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <xTaskPriorityInherit+0xc4>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d201      	bcs.n	8011dbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8011dc0:	0018      	movs	r0, r3
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	b004      	add	sp, #16
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	20000df0 	.word	0x20000df0
 8011dcc:	20000df4 	.word	0x20000df4
 8011dd0:	20000ef8 	.word	0x20000ef8

08011dd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b086      	sub	sp, #24
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011de2:	2301      	movs	r3, #1
 8011de4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d058      	beq.n	8011e9e <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d101      	bne.n	8011df8 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8011df4:	b672      	cpsid	i
 8011df6:	e7fe      	b.n	8011df6 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dfc:	683a      	ldr	r2, [r7, #0]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d902      	bls.n	8011e08 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	617b      	str	r3, [r7, #20]
 8011e06:	e002      	b.n	8011e0e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e0c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d042      	beq.n	8011e9e <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d13d      	bne.n	8011e9e <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011e22:	4b21      	ldr	r3, [pc, #132]	; (8011ea8 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	693a      	ldr	r2, [r7, #16]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d101      	bne.n	8011e30 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8011e2c:	b672      	cpsid	i
 8011e2e:	e7fe      	b.n	8011e2e <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e34:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	697a      	ldr	r2, [r7, #20]
 8011e3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	699b      	ldr	r3, [r3, #24]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	db04      	blt.n	8011e4e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	2207      	movs	r2, #7
 8011e48:	1ad2      	subs	r2, r2, r3
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6959      	ldr	r1, [r3, #20]
 8011e52:	68ba      	ldr	r2, [r7, #8]
 8011e54:	0013      	movs	r3, r2
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	189b      	adds	r3, r3, r2
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4a13      	ldr	r2, [pc, #76]	; (8011eac <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8011e5e:	189b      	adds	r3, r3, r2
 8011e60:	4299      	cmp	r1, r3
 8011e62:	d11c      	bne.n	8011e9e <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	3304      	adds	r3, #4
 8011e68:	0018      	movs	r0, r3
 8011e6a:	f7fe ff01 	bl	8010c70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011e6e:	693b      	ldr	r3, [r7, #16]
 8011e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e72:	4b0f      	ldr	r3, [pc, #60]	; (8011eb0 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d903      	bls.n	8011e82 <vTaskPriorityDisinheritAfterTimeout+0xae>
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e7e:	4b0c      	ldr	r3, [pc, #48]	; (8011eb0 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8011e80:	601a      	str	r2, [r3, #0]
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e86:	0013      	movs	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	189b      	adds	r3, r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4a07      	ldr	r2, [pc, #28]	; (8011eac <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8011e90:	189a      	adds	r2, r3, r2
 8011e92:	693b      	ldr	r3, [r7, #16]
 8011e94:	3304      	adds	r3, #4
 8011e96:	0019      	movs	r1, r3
 8011e98:	0010      	movs	r0, r2
 8011e9a:	f7fe fe91 	bl	8010bc0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011e9e:	46c0      	nop			; (mov r8, r8)
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	b006      	add	sp, #24
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	46c0      	nop			; (mov r8, r8)
 8011ea8:	20000df0 	.word	0x20000df0
 8011eac:	20000df4 	.word	0x20000df4
 8011eb0:	20000ef8 	.word	0x20000ef8

08011eb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011eb8:	4b06      	ldr	r3, [pc, #24]	; (8011ed4 <pvTaskIncrementMutexHeldCount+0x20>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d004      	beq.n	8011eca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011ec0:	4b04      	ldr	r3, [pc, #16]	; (8011ed4 <pvTaskIncrementMutexHeldCount+0x20>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011ec6:	3201      	adds	r2, #1
 8011ec8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011eca:	4b02      	ldr	r3, [pc, #8]	; (8011ed4 <pvTaskIncrementMutexHeldCount+0x20>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
	}
 8011ece:	0018      	movs	r0, r3
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20000df0 	.word	0x20000df0

08011ed8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8011ee2:	f000 f9bd 	bl	8012260 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8011ee6:	4b1c      	ldr	r3, [pc, #112]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10e      	bne.n	8011f0e <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011ef0:	4b19      	ldr	r3, [pc, #100]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2250      	movs	r2, #80	; 0x50
 8011ef6:	2101      	movs	r1, #1
 8011ef8:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d006      	beq.n	8011f0e <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	2101      	movs	r1, #1
 8011f04:	0018      	movs	r0, r3
 8011f06:	f000 f8bd 	bl	8012084 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011f0a:	f000 f999 	bl	8012240 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011f0e:	f000 f9b9 	bl	8012284 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011f12:	f000 f9a5 	bl	8012260 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011f16:	4b10      	ldr	r3, [pc, #64]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f1c:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d00c      	beq.n	8011f3e <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d004      	beq.n	8011f34 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011f2a:	4b0b      	ldr	r3, [pc, #44]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	64da      	str	r2, [r3, #76]	; 0x4c
 8011f32:	e004      	b.n	8011f3e <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011f34:	4b08      	ldr	r3, [pc, #32]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	3a01      	subs	r2, #1
 8011f3c:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f3e:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <ulTaskNotifyTake+0x80>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2250      	movs	r2, #80	; 0x50
 8011f44:	2100      	movs	r1, #0
 8011f46:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8011f48:	f000 f99c 	bl	8012284 <vPortExitCritical>

		return ulReturn;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8011f4e:	0018      	movs	r0, r3
 8011f50:	46bd      	mov	sp, r7
 8011f52:	b004      	add	sp, #16
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	46c0      	nop			; (mov r8, r8)
 8011f58:	20000df0 	.word	0x20000df0

08011f5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b088      	sub	sp, #32
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	603b      	str	r3, [r7, #0]
 8011f68:	1dfb      	adds	r3, r7, #7
 8011f6a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d101      	bne.n	8011f7a <xTaskGenericNotify+0x1e>
 8011f76:	b672      	cpsid	i
 8011f78:	e7fe      	b.n	8011f78 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8011f7e:	f000 f96f 	bl	8012260 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d003      	beq.n	8011f90 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011f88:	69bb      	ldr	r3, [r7, #24]
 8011f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011f90:	2317      	movs	r3, #23
 8011f92:	18fb      	adds	r3, r7, r3
 8011f94:	69ba      	ldr	r2, [r7, #24]
 8011f96:	2150      	movs	r1, #80	; 0x50
 8011f98:	5c52      	ldrb	r2, [r2, r1]
 8011f9a:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	2250      	movs	r2, #80	; 0x50
 8011fa0:	2102      	movs	r1, #2
 8011fa2:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8011fa4:	1dfb      	adds	r3, r7, #7
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	2b04      	cmp	r3, #4
 8011faa:	d821      	bhi.n	8011ff0 <xTaskGenericNotify+0x94>
 8011fac:	009a      	lsls	r2, r3, #2
 8011fae:	4b31      	ldr	r3, [pc, #196]	; (8012074 <xTaskGenericNotify+0x118>)
 8011fb0:	18d3      	adds	r3, r2, r3
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	431a      	orrs	r2, r3
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011fc2:	e01e      	b.n	8012002 <xTaskGenericNotify+0xa6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	69bb      	ldr	r3, [r7, #24]
 8011fcc:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011fce:	e018      	b.n	8012002 <xTaskGenericNotify+0xa6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8011fd6:	e014      	b.n	8012002 <xTaskGenericNotify+0xa6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011fd8:	2317      	movs	r3, #23
 8011fda:	18fb      	adds	r3, r7, r3
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	d003      	beq.n	8011fea <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011fe8:	e00b      	b.n	8012002 <xTaskGenericNotify+0xa6>
						xReturn = pdFAIL;
 8011fea:	2300      	movs	r3, #0
 8011fec:	61fb      	str	r3, [r7, #28]
					break;
 8011fee:	e008      	b.n	8012002 <xTaskGenericNotify+0xa6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011ff0:	69bb      	ldr	r3, [r7, #24]
 8011ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	d003      	beq.n	8012000 <xTaskGenericNotify+0xa4>
 8011ff8:	b672      	cpsid	i
 8011ffa:	e7fe      	b.n	8011ffa <xTaskGenericNotify+0x9e>
					break;
 8011ffc:	46c0      	nop			; (mov r8, r8)
 8011ffe:	e000      	b.n	8012002 <xTaskGenericNotify+0xa6>

					break;
 8012000:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012002:	2317      	movs	r3, #23
 8012004:	18fb      	adds	r3, r7, r3
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d12b      	bne.n	8012064 <xTaskGenericNotify+0x108>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	3304      	adds	r3, #4
 8012010:	0018      	movs	r0, r3
 8012012:	f7fe fe2d 	bl	8010c70 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801201a:	4b17      	ldr	r3, [pc, #92]	; (8012078 <xTaskGenericNotify+0x11c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	429a      	cmp	r2, r3
 8012020:	d903      	bls.n	801202a <xTaskGenericNotify+0xce>
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012026:	4b14      	ldr	r3, [pc, #80]	; (8012078 <xTaskGenericNotify+0x11c>)
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801202e:	0013      	movs	r3, r2
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	189b      	adds	r3, r3, r2
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	4a11      	ldr	r2, [pc, #68]	; (801207c <xTaskGenericNotify+0x120>)
 8012038:	189a      	adds	r2, r3, r2
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	3304      	adds	r3, #4
 801203e:	0019      	movs	r1, r3
 8012040:	0010      	movs	r0, r2
 8012042:	f7fe fdbd 	bl	8010bc0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <xTaskGenericNotify+0xf6>
 801204e:	b672      	cpsid	i
 8012050:	e7fe      	b.n	8012050 <xTaskGenericNotify+0xf4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012056:	4b0a      	ldr	r3, [pc, #40]	; (8012080 <xTaskGenericNotify+0x124>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205c:	429a      	cmp	r2, r3
 801205e:	d901      	bls.n	8012064 <xTaskGenericNotify+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012060:	f000 f8ee 	bl	8012240 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012064:	f000 f90e 	bl	8012284 <vPortExitCritical>

		return xReturn;
 8012068:	69fb      	ldr	r3, [r7, #28]
	}
 801206a:	0018      	movs	r0, r3
 801206c:	46bd      	mov	sp, r7
 801206e:	b008      	add	sp, #32
 8012070:	bd80      	pop	{r7, pc}
 8012072:	46c0      	nop			; (mov r8, r8)
 8012074:	08016ad8 	.word	0x08016ad8
 8012078:	20000ef8 	.word	0x20000ef8
 801207c:	20000df4 	.word	0x20000df4
 8012080:	20000df0 	.word	0x20000df0

08012084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801208e:	4b21      	ldr	r3, [pc, #132]	; (8012114 <prvAddCurrentTaskToDelayedList+0x90>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012094:	4b20      	ldr	r3, [pc, #128]	; (8012118 <prvAddCurrentTaskToDelayedList+0x94>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	3304      	adds	r3, #4
 801209a:	0018      	movs	r0, r3
 801209c:	f7fe fde8 	bl	8010c70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	3301      	adds	r3, #1
 80120a4:	d10b      	bne.n	80120be <prvAddCurrentTaskToDelayedList+0x3a>
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d008      	beq.n	80120be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120ac:	4b1a      	ldr	r3, [pc, #104]	; (8012118 <prvAddCurrentTaskToDelayedList+0x94>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	1d1a      	adds	r2, r3, #4
 80120b2:	4b1a      	ldr	r3, [pc, #104]	; (801211c <prvAddCurrentTaskToDelayedList+0x98>)
 80120b4:	0011      	movs	r1, r2
 80120b6:	0018      	movs	r0, r3
 80120b8:	f7fe fd82 	bl	8010bc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80120bc:	e026      	b.n	801210c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80120be:	68fa      	ldr	r2, [r7, #12]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	18d3      	adds	r3, r2, r3
 80120c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80120c6:	4b14      	ldr	r3, [pc, #80]	; (8012118 <prvAddCurrentTaskToDelayedList+0x94>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	68ba      	ldr	r2, [r7, #8]
 80120cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d209      	bcs.n	80120ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120d6:	4b12      	ldr	r3, [pc, #72]	; (8012120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	4b0f      	ldr	r3, [pc, #60]	; (8012118 <prvAddCurrentTaskToDelayedList+0x94>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	3304      	adds	r3, #4
 80120e0:	0019      	movs	r1, r3
 80120e2:	0010      	movs	r0, r2
 80120e4:	f7fe fd8e 	bl	8010c04 <vListInsert>
}
 80120e8:	e010      	b.n	801210c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80120ea:	4b0e      	ldr	r3, [pc, #56]	; (8012124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b0a      	ldr	r3, [pc, #40]	; (8012118 <prvAddCurrentTaskToDelayedList+0x94>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	3304      	adds	r3, #4
 80120f4:	0019      	movs	r1, r3
 80120f6:	0010      	movs	r0, r2
 80120f8:	f7fe fd84 	bl	8010c04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80120fc:	4b0a      	ldr	r3, [pc, #40]	; (8012128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	429a      	cmp	r2, r3
 8012104:	d202      	bcs.n	801210c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012106:	4b08      	ldr	r3, [pc, #32]	; (8012128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012108:	68ba      	ldr	r2, [r7, #8]
 801210a:	601a      	str	r2, [r3, #0]
}
 801210c:	46c0      	nop			; (mov r8, r8)
 801210e:	46bd      	mov	sp, r7
 8012110:	b004      	add	sp, #16
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20000ef4 	.word	0x20000ef4
 8012118:	20000df0 	.word	0x20000df0
 801211c:	20000edc 	.word	0x20000edc
 8012120:	20000eac 	.word	0x20000eac
 8012124:	20000ea8 	.word	0x20000ea8
 8012128:	20000f10 	.word	0x20000f10

0801212c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	3b04      	subs	r3, #4
 801213c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2280      	movs	r2, #128	; 0x80
 8012142:	0452      	lsls	r2, r2, #17
 8012144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3b04      	subs	r3, #4
 801214a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801214c:	68ba      	ldr	r2, [r7, #8]
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	3b04      	subs	r3, #4
 8012156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012158:	4a08      	ldr	r2, [pc, #32]	; (801217c <pxPortInitialiseStack+0x50>)
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3b14      	subs	r3, #20
 8012162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	3b20      	subs	r3, #32
 801216e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012170:	68fb      	ldr	r3, [r7, #12]
}
 8012172:	0018      	movs	r0, r3
 8012174:	46bd      	mov	sp, r7
 8012176:	b004      	add	sp, #16
 8012178:	bd80      	pop	{r7, pc}
 801217a:	46c0      	nop			; (mov r8, r8)
 801217c:	08012181 	.word	0x08012181

08012180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8012186:	2300      	movs	r3, #0
 8012188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801218a:	4b08      	ldr	r3, [pc, #32]	; (80121ac <prvTaskExitError+0x2c>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	d001      	beq.n	8012196 <prvTaskExitError+0x16>
 8012192:	b672      	cpsid	i
 8012194:	e7fe      	b.n	8012194 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8012196:	b672      	cpsid	i
	while( ulDummy == 0 )
 8012198:	46c0      	nop			; (mov r8, r8)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d0fc      	beq.n	801219a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80121a0:	46c0      	nop			; (mov r8, r8)
 80121a2:	46c0      	nop			; (mov r8, r8)
 80121a4:	46bd      	mov	sp, r7
 80121a6:	b002      	add	sp, #8
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	46c0      	nop			; (mov r8, r8)
 80121ac:	200002c8 	.word	0x200002c8

080121b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80121b4:	46c0      	nop			; (mov r8, r8)
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	0000      	movs	r0, r0
 80121bc:	0000      	movs	r0, r0
	...

080121c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80121c0:	4a0b      	ldr	r2, [pc, #44]	; (80121f0 <pxCurrentTCBConst2>)
 80121c2:	6813      	ldr	r3, [r2, #0]
 80121c4:	6818      	ldr	r0, [r3, #0]
 80121c6:	3020      	adds	r0, #32
 80121c8:	f380 8809 	msr	PSP, r0
 80121cc:	2002      	movs	r0, #2
 80121ce:	f380 8814 	msr	CONTROL, r0
 80121d2:	f3bf 8f6f 	isb	sy
 80121d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80121d8:	46ae      	mov	lr, r5
 80121da:	bc08      	pop	{r3}
 80121dc:	bc04      	pop	{r2}
 80121de:	b662      	cpsie	i
 80121e0:	4718      	bx	r3
 80121e2:	46c0      	nop			; (mov r8, r8)
 80121e4:	46c0      	nop			; (mov r8, r8)
 80121e6:	46c0      	nop			; (mov r8, r8)
 80121e8:	46c0      	nop			; (mov r8, r8)
 80121ea:	46c0      	nop			; (mov r8, r8)
 80121ec:	46c0      	nop			; (mov r8, r8)
 80121ee:	46c0      	nop			; (mov r8, r8)

080121f0 <pxCurrentTCBConst2>:
 80121f0:	20000df0 	.word	0x20000df0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80121f4:	46c0      	nop			; (mov r8, r8)
 80121f6:	46c0      	nop			; (mov r8, r8)

080121f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80121fc:	4b0e      	ldr	r3, [pc, #56]	; (8012238 <xPortStartScheduler+0x40>)
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	4b0d      	ldr	r3, [pc, #52]	; (8012238 <xPortStartScheduler+0x40>)
 8012202:	21ff      	movs	r1, #255	; 0xff
 8012204:	0409      	lsls	r1, r1, #16
 8012206:	430a      	orrs	r2, r1
 8012208:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801220a:	4b0b      	ldr	r3, [pc, #44]	; (8012238 <xPortStartScheduler+0x40>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	4b0a      	ldr	r3, [pc, #40]	; (8012238 <xPortStartScheduler+0x40>)
 8012210:	21ff      	movs	r1, #255	; 0xff
 8012212:	0609      	lsls	r1, r1, #24
 8012214:	430a      	orrs	r2, r1
 8012216:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012218:	f000 f898 	bl	801234c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801221c:	4b07      	ldr	r3, [pc, #28]	; (801223c <xPortStartScheduler+0x44>)
 801221e:	2200      	movs	r2, #0
 8012220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8012222:	f7ff ffcd 	bl	80121c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012226:	f7ff fb65 	bl	80118f4 <vTaskSwitchContext>
	prvTaskExitError();
 801222a:	f7ff ffa9 	bl	8012180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801222e:	2300      	movs	r3, #0
}
 8012230:	0018      	movs	r0, r3
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	46c0      	nop			; (mov r8, r8)
 8012238:	e000ed20 	.word	0xe000ed20
 801223c:	200002c8 	.word	0x200002c8

08012240 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012244:	4b05      	ldr	r3, [pc, #20]	; (801225c <vPortYield+0x1c>)
 8012246:	2280      	movs	r2, #128	; 0x80
 8012248:	0552      	lsls	r2, r2, #21
 801224a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801224c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012250:	f3bf 8f6f 	isb	sy
}
 8012254:	46c0      	nop			; (mov r8, r8)
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	46c0      	nop			; (mov r8, r8)
 801225c:	e000ed04 	.word	0xe000ed04

08012260 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012260:	b580      	push	{r7, lr}
 8012262:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8012264:	b672      	cpsid	i
	uxCriticalNesting++;
 8012266:	4b06      	ldr	r3, [pc, #24]	; (8012280 <vPortEnterCritical+0x20>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	4b04      	ldr	r3, [pc, #16]	; (8012280 <vPortEnterCritical+0x20>)
 801226e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8012270:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012274:	f3bf 8f6f 	isb	sy
}
 8012278:	46c0      	nop			; (mov r8, r8)
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	46c0      	nop			; (mov r8, r8)
 8012280:	200002c8 	.word	0x200002c8

08012284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012284:	b580      	push	{r7, lr}
 8012286:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012288:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <vPortExitCritical+0x2c>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d101      	bne.n	8012294 <vPortExitCritical+0x10>
 8012290:	b672      	cpsid	i
 8012292:	e7fe      	b.n	8012292 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8012294:	4b06      	ldr	r3, [pc, #24]	; (80122b0 <vPortExitCritical+0x2c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	1e5a      	subs	r2, r3, #1
 801229a:	4b05      	ldr	r3, [pc, #20]	; (80122b0 <vPortExitCritical+0x2c>)
 801229c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801229e:	4b04      	ldr	r3, [pc, #16]	; (80122b0 <vPortExitCritical+0x2c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d100      	bne.n	80122a8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80122a6:	b662      	cpsie	i
	}
}
 80122a8:	46c0      	nop			; (mov r8, r8)
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	46c0      	nop			; (mov r8, r8)
 80122b0:	200002c8 	.word	0x200002c8

080122b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80122b4:	f3ef 8010 	mrs	r0, PRIMASK
 80122b8:	b672      	cpsid	i
 80122ba:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80122bc:	46c0      	nop			; (mov r8, r8)
 80122be:	0018      	movs	r0, r3

080122c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80122c0:	f380 8810 	msr	PRIMASK, r0
 80122c4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80122c6:	46c0      	nop			; (mov r8, r8)
	...

080122d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80122d0:	f3ef 8009 	mrs	r0, PSP
 80122d4:	4b0e      	ldr	r3, [pc, #56]	; (8012310 <pxCurrentTCBConst>)
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	3820      	subs	r0, #32
 80122da:	6010      	str	r0, [r2, #0]
 80122dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80122de:	4644      	mov	r4, r8
 80122e0:	464d      	mov	r5, r9
 80122e2:	4656      	mov	r6, sl
 80122e4:	465f      	mov	r7, fp
 80122e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80122e8:	b508      	push	{r3, lr}
 80122ea:	b672      	cpsid	i
 80122ec:	f7ff fb02 	bl	80118f4 <vTaskSwitchContext>
 80122f0:	b662      	cpsie	i
 80122f2:	bc0c      	pop	{r2, r3}
 80122f4:	6811      	ldr	r1, [r2, #0]
 80122f6:	6808      	ldr	r0, [r1, #0]
 80122f8:	3010      	adds	r0, #16
 80122fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80122fc:	46a0      	mov	r8, r4
 80122fe:	46a9      	mov	r9, r5
 8012300:	46b2      	mov	sl, r6
 8012302:	46bb      	mov	fp, r7
 8012304:	f380 8809 	msr	PSP, r0
 8012308:	3820      	subs	r0, #32
 801230a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801230c:	4718      	bx	r3
 801230e:	46c0      	nop			; (mov r8, r8)

08012310 <pxCurrentTCBConst>:
 8012310:	20000df0 	.word	0x20000df0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8012314:	46c0      	nop			; (mov r8, r8)
 8012316:	46c0      	nop			; (mov r8, r8)

08012318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801231e:	f7ff ffc9 	bl	80122b4 <ulSetInterruptMaskFromISR>
 8012322:	0003      	movs	r3, r0
 8012324:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012326:	f7ff fa35 	bl	8011794 <xTaskIncrementTick>
 801232a:	1e03      	subs	r3, r0, #0
 801232c:	d003      	beq.n	8012336 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801232e:	4b06      	ldr	r3, [pc, #24]	; (8012348 <xPortSysTickHandler+0x30>)
 8012330:	2280      	movs	r2, #128	; 0x80
 8012332:	0552      	lsls	r2, r2, #21
 8012334:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	0018      	movs	r0, r3
 801233a:	f7ff ffc1 	bl	80122c0 <vClearInterruptMaskFromISR>
}
 801233e:	46c0      	nop			; (mov r8, r8)
 8012340:	46bd      	mov	sp, r7
 8012342:	b002      	add	sp, #8
 8012344:	bd80      	pop	{r7, pc}
 8012346:	46c0      	nop			; (mov r8, r8)
 8012348:	e000ed04 	.word	0xe000ed04

0801234c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801234c:	b580      	push	{r7, lr}
 801234e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012350:	4b0b      	ldr	r3, [pc, #44]	; (8012380 <vPortSetupTimerInterrupt+0x34>)
 8012352:	2200      	movs	r2, #0
 8012354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012356:	4b0b      	ldr	r3, [pc, #44]	; (8012384 <vPortSetupTimerInterrupt+0x38>)
 8012358:	2200      	movs	r2, #0
 801235a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801235c:	4b0a      	ldr	r3, [pc, #40]	; (8012388 <vPortSetupTimerInterrupt+0x3c>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	22fa      	movs	r2, #250	; 0xfa
 8012362:	0091      	lsls	r1, r2, #2
 8012364:	0018      	movs	r0, r3
 8012366:	f7ed feeb 	bl	8000140 <__udivsi3>
 801236a:	0003      	movs	r3, r0
 801236c:	001a      	movs	r2, r3
 801236e:	4b07      	ldr	r3, [pc, #28]	; (801238c <vPortSetupTimerInterrupt+0x40>)
 8012370:	3a01      	subs	r2, #1
 8012372:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8012374:	4b02      	ldr	r3, [pc, #8]	; (8012380 <vPortSetupTimerInterrupt+0x34>)
 8012376:	2207      	movs	r2, #7
 8012378:	601a      	str	r2, [r3, #0]
}
 801237a:	46c0      	nop			; (mov r8, r8)
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	e000e010 	.word	0xe000e010
 8012384:	e000e018 	.word	0xe000e018
 8012388:	20000000 	.word	0x20000000
 801238c:	e000e014 	.word	0xe000e014

08012390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012398:	2300      	movs	r3, #0
 801239a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801239c:	f7ff f962 	bl	8011664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123a0:	4b4b      	ldr	r3, [pc, #300]	; (80124d0 <pvPortMalloc+0x140>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d101      	bne.n	80123ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123a8:	f000 f8ec 	bl	8012584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123ac:	4b49      	ldr	r3, [pc, #292]	; (80124d4 <pvPortMalloc+0x144>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	4013      	ands	r3, r2
 80123b4:	d000      	beq.n	80123b8 <pvPortMalloc+0x28>
 80123b6:	e07e      	b.n	80124b6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d012      	beq.n	80123e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80123be:	2208      	movs	r2, #8
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	189b      	adds	r3, r3, r2
 80123c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2207      	movs	r2, #7
 80123ca:	4013      	ands	r3, r2
 80123cc:	d00a      	beq.n	80123e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2207      	movs	r2, #7
 80123d2:	4393      	bics	r3, r2
 80123d4:	3308      	adds	r3, #8
 80123d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2207      	movs	r2, #7
 80123dc:	4013      	ands	r3, r2
 80123de:	d001      	beq.n	80123e4 <pvPortMalloc+0x54>
 80123e0:	b672      	cpsid	i
 80123e2:	e7fe      	b.n	80123e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d065      	beq.n	80124b6 <pvPortMalloc+0x126>
 80123ea:	4b3b      	ldr	r3, [pc, #236]	; (80124d8 <pvPortMalloc+0x148>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d860      	bhi.n	80124b6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123f4:	4b39      	ldr	r3, [pc, #228]	; (80124dc <pvPortMalloc+0x14c>)
 80123f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80123f8:	4b38      	ldr	r3, [pc, #224]	; (80124dc <pvPortMalloc+0x14c>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123fe:	e004      	b.n	801240a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	429a      	cmp	r2, r3
 8012412:	d903      	bls.n	801241c <pvPortMalloc+0x8c>
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1f1      	bne.n	8012400 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801241c:	4b2c      	ldr	r3, [pc, #176]	; (80124d0 <pvPortMalloc+0x140>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	697a      	ldr	r2, [r7, #20]
 8012422:	429a      	cmp	r2, r3
 8012424:	d047      	beq.n	80124b6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2208      	movs	r2, #8
 801242c:	189b      	adds	r3, r3, r2
 801242e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	685a      	ldr	r2, [r3, #4]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	1ad2      	subs	r2, r2, r3
 8012440:	2308      	movs	r3, #8
 8012442:	005b      	lsls	r3, r3, #1
 8012444:	429a      	cmp	r2, r3
 8012446:	d916      	bls.n	8012476 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012448:	697a      	ldr	r2, [r7, #20]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	18d3      	adds	r3, r2, r3
 801244e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	2207      	movs	r2, #7
 8012454:	4013      	ands	r3, r2
 8012456:	d001      	beq.n	801245c <pvPortMalloc+0xcc>
 8012458:	b672      	cpsid	i
 801245a:	e7fe      	b.n	801245a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	1ad2      	subs	r2, r2, r3
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	0018      	movs	r0, r3
 8012472:	f000 f8e7 	bl	8012644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012476:	4b18      	ldr	r3, [pc, #96]	; (80124d8 <pvPortMalloc+0x148>)
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	1ad2      	subs	r2, r2, r3
 8012480:	4b15      	ldr	r3, [pc, #84]	; (80124d8 <pvPortMalloc+0x148>)
 8012482:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012484:	4b14      	ldr	r3, [pc, #80]	; (80124d8 <pvPortMalloc+0x148>)
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	4b15      	ldr	r3, [pc, #84]	; (80124e0 <pvPortMalloc+0x150>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	429a      	cmp	r2, r3
 801248e:	d203      	bcs.n	8012498 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012490:	4b11      	ldr	r3, [pc, #68]	; (80124d8 <pvPortMalloc+0x148>)
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <pvPortMalloc+0x150>)
 8012496:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	685a      	ldr	r2, [r3, #4]
 801249c:	4b0d      	ldr	r3, [pc, #52]	; (80124d4 <pvPortMalloc+0x144>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	431a      	orrs	r2, r3
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	2200      	movs	r2, #0
 80124aa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124ac:	4b0d      	ldr	r3, [pc, #52]	; (80124e4 <pvPortMalloc+0x154>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	1c5a      	adds	r2, r3, #1
 80124b2:	4b0c      	ldr	r3, [pc, #48]	; (80124e4 <pvPortMalloc+0x154>)
 80124b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124b6:	f7ff f8e1 	bl	801167c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2207      	movs	r2, #7
 80124be:	4013      	ands	r3, r2
 80124c0:	d001      	beq.n	80124c6 <pvPortMalloc+0x136>
 80124c2:	b672      	cpsid	i
 80124c4:	e7fe      	b.n	80124c4 <pvPortMalloc+0x134>
	return pvReturn;
 80124c6:	68fb      	ldr	r3, [r7, #12]
}
 80124c8:	0018      	movs	r0, r3
 80124ca:	46bd      	mov	sp, r7
 80124cc:	b006      	add	sp, #24
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	20005d44 	.word	0x20005d44
 80124d4:	20005d58 	.word	0x20005d58
 80124d8:	20005d48 	.word	0x20005d48
 80124dc:	20005d3c 	.word	0x20005d3c
 80124e0:	20005d4c 	.word	0x20005d4c
 80124e4:	20005d50 	.word	0x20005d50

080124e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d03a      	beq.n	8012570 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80124fa:	2308      	movs	r3, #8
 80124fc:	425b      	negs	r3, r3
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	18d3      	adds	r3, r2, r3
 8012502:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	4b1a      	ldr	r3, [pc, #104]	; (8012578 <vPortFree+0x90>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4013      	ands	r3, r2
 8012512:	d101      	bne.n	8012518 <vPortFree+0x30>
 8012514:	b672      	cpsid	i
 8012516:	e7fe      	b.n	8012516 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <vPortFree+0x3c>
 8012520:	b672      	cpsid	i
 8012522:	e7fe      	b.n	8012522 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	685a      	ldr	r2, [r3, #4]
 8012528:	4b13      	ldr	r3, [pc, #76]	; (8012578 <vPortFree+0x90>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	4013      	ands	r3, r2
 801252e:	d01f      	beq.n	8012570 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d11b      	bne.n	8012570 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	685a      	ldr	r2, [r3, #4]
 801253c:	4b0e      	ldr	r3, [pc, #56]	; (8012578 <vPortFree+0x90>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	43db      	mvns	r3, r3
 8012542:	401a      	ands	r2, r3
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012548:	f7ff f88c 	bl	8011664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	685a      	ldr	r2, [r3, #4]
 8012550:	4b0a      	ldr	r3, [pc, #40]	; (801257c <vPortFree+0x94>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	18d2      	adds	r2, r2, r3
 8012556:	4b09      	ldr	r3, [pc, #36]	; (801257c <vPortFree+0x94>)
 8012558:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	0018      	movs	r0, r3
 801255e:	f000 f871 	bl	8012644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012562:	4b07      	ldr	r3, [pc, #28]	; (8012580 <vPortFree+0x98>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	1c5a      	adds	r2, r3, #1
 8012568:	4b05      	ldr	r3, [pc, #20]	; (8012580 <vPortFree+0x98>)
 801256a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801256c:	f7ff f886 	bl	801167c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012570:	46c0      	nop			; (mov r8, r8)
 8012572:	46bd      	mov	sp, r7
 8012574:	b004      	add	sp, #16
 8012576:	bd80      	pop	{r7, pc}
 8012578:	20005d58 	.word	0x20005d58
 801257c:	20005d48 	.word	0x20005d48
 8012580:	20005d54 	.word	0x20005d54

08012584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801258a:	4b27      	ldr	r3, [pc, #156]	; (8012628 <prvHeapInit+0xa4>)
 801258c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801258e:	4b27      	ldr	r3, [pc, #156]	; (801262c <prvHeapInit+0xa8>)
 8012590:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	2207      	movs	r2, #7
 8012596:	4013      	ands	r3, r2
 8012598:	d00c      	beq.n	80125b4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	3307      	adds	r3, #7
 801259e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2207      	movs	r2, #7
 80125a4:	4393      	bics	r3, r2
 80125a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	1ad2      	subs	r2, r2, r3
 80125ae:	4b1f      	ldr	r3, [pc, #124]	; (801262c <prvHeapInit+0xa8>)
 80125b0:	18d3      	adds	r3, r2, r3
 80125b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80125b8:	4b1d      	ldr	r3, [pc, #116]	; (8012630 <prvHeapInit+0xac>)
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80125be:	4b1c      	ldr	r3, [pc, #112]	; (8012630 <prvHeapInit+0xac>)
 80125c0:	2200      	movs	r2, #0
 80125c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	18d3      	adds	r3, r2, r3
 80125ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80125cc:	2208      	movs	r2, #8
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	1a9b      	subs	r3, r3, r2
 80125d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2207      	movs	r2, #7
 80125d8:	4393      	bics	r3, r2
 80125da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80125dc:	68fa      	ldr	r2, [r7, #12]
 80125de:	4b15      	ldr	r3, [pc, #84]	; (8012634 <prvHeapInit+0xb0>)
 80125e0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80125e2:	4b14      	ldr	r3, [pc, #80]	; (8012634 <prvHeapInit+0xb0>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2200      	movs	r2, #0
 80125e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80125ea:	4b12      	ldr	r3, [pc, #72]	; (8012634 <prvHeapInit+0xb0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2200      	movs	r2, #0
 80125f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	1ad2      	subs	r2, r2, r3
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012600:	4b0c      	ldr	r3, [pc, #48]	; (8012634 <prvHeapInit+0xb0>)
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	4b0a      	ldr	r3, [pc, #40]	; (8012638 <prvHeapInit+0xb4>)
 801260e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	4b09      	ldr	r3, [pc, #36]	; (801263c <prvHeapInit+0xb8>)
 8012616:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012618:	4b09      	ldr	r3, [pc, #36]	; (8012640 <prvHeapInit+0xbc>)
 801261a:	2280      	movs	r2, #128	; 0x80
 801261c:	0612      	lsls	r2, r2, #24
 801261e:	601a      	str	r2, [r3, #0]
}
 8012620:	46c0      	nop			; (mov r8, r8)
 8012622:	46bd      	mov	sp, r7
 8012624:	b004      	add	sp, #16
 8012626:	bd80      	pop	{r7, pc}
 8012628:	00004e20 	.word	0x00004e20
 801262c:	20000f1c 	.word	0x20000f1c
 8012630:	20005d3c 	.word	0x20005d3c
 8012634:	20005d44 	.word	0x20005d44
 8012638:	20005d4c 	.word	0x20005d4c
 801263c:	20005d48 	.word	0x20005d48
 8012640:	20005d58 	.word	0x20005d58

08012644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801264c:	4b27      	ldr	r3, [pc, #156]	; (80126ec <prvInsertBlockIntoFreeList+0xa8>)
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	e002      	b.n	8012658 <prvInsertBlockIntoFreeList+0x14>
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60fb      	str	r3, [r7, #12]
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	429a      	cmp	r2, r3
 8012660:	d8f7      	bhi.n	8012652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	18d3      	adds	r3, r2, r3
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	429a      	cmp	r2, r3
 8012672:	d108      	bne.n	8012686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	685a      	ldr	r2, [r3, #4]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	18d2      	adds	r2, r2, r3
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	68ba      	ldr	r2, [r7, #8]
 8012690:	18d2      	adds	r2, r2, r3
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	429a      	cmp	r2, r3
 8012698:	d118      	bne.n	80126cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	4b14      	ldr	r3, [pc, #80]	; (80126f0 <prvInsertBlockIntoFreeList+0xac>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d00d      	beq.n	80126c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685a      	ldr	r2, [r3, #4]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	18d2      	adds	r2, r2, r3
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	601a      	str	r2, [r3, #0]
 80126c0:	e008      	b.n	80126d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80126c2:	4b0b      	ldr	r3, [pc, #44]	; (80126f0 <prvInsertBlockIntoFreeList+0xac>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	e003      	b.n	80126d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80126d4:	68fa      	ldr	r2, [r7, #12]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d002      	beq.n	80126e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126e2:	46c0      	nop			; (mov r8, r8)
 80126e4:	46bd      	mov	sp, r7
 80126e6:	b004      	add	sp, #16
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	46c0      	nop			; (mov r8, r8)
 80126ec:	20005d3c 	.word	0x20005d3c
 80126f0:	20005d44 	.word	0x20005d44

080126f4 <initialisation_mesure_capteur>:
	}
	HAL_GPIO_WritePin(GPIOB, GPIO1_Pin, state);
	HAL_GPIO_WritePin(GPIOB, XSHUT_Pin, state);
}

void initialisation_mesure_capteur(){
 80126f4:	b580      	push	{r7, lr}
 80126f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit(&huart1, "TEST2 ",6,100);
	//HAL_Delay(500);

	Message_Size = sizeof(intro);
 80126f8:	4b3a      	ldr	r3, [pc, #232]	; (80127e4 <initialisation_mesure_capteur+0xf0>)
 80126fa:	221c      	movs	r2, #28
 80126fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, intro, Message_Size, 100);
 80126fe:	4b39      	ldr	r3, [pc, #228]	; (80127e4 <initialisation_mesure_capteur+0xf0>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	b29a      	uxth	r2, r3
 8012704:	4938      	ldr	r1, [pc, #224]	; (80127e8 <initialisation_mesure_capteur+0xf4>)
 8012706:	4839      	ldr	r0, [pc, #228]	; (80127ec <initialisation_mesure_capteur+0xf8>)
 8012708:	2364      	movs	r3, #100	; 0x64
 801270a:	f7f6 fa8f 	bl	8008c2c <HAL_UART_Transmit>

	Dev->I2cHandle = &hi2c2;
 801270e:	4b38      	ldr	r3, [pc, #224]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	23ae      	movs	r3, #174	; 0xae
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	4937      	ldr	r1, [pc, #220]	; (80127f4 <initialisation_mesure_capteur+0x100>)
 8012718:	50d1      	str	r1, [r2, r3]
	Dev->I2cDevAddr = 0x52; //adresse de l'I2C dans la datasheet du VL530X
 801271a:	4b35      	ldr	r3, [pc, #212]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	23b0      	movs	r3, #176	; 0xb0
 8012720:	005b      	lsls	r3, r3, #1
 8012722:	2152      	movs	r1, #82	; 0x52
 8012724:	54d1      	strb	r1, [r2, r3]
	//On active Le port KSHUT qui est le port permettant de recevoir les valeurs
	//HAL_GPIO_WritePin(GPIOB, XSHUT_C1_Pin, GPIO_PIN_SET); // Enable XSHUT
	//vTaskDelay(20);

	//TOF_Enable(1, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO1_C2_Pin, GPIO_PIN_SET);
 8012726:	2380      	movs	r3, #128	; 0x80
 8012728:	019b      	lsls	r3, r3, #6
 801272a:	4833      	ldr	r0, [pc, #204]	; (80127f8 <initialisation_mesure_capteur+0x104>)
 801272c:	2201      	movs	r2, #1
 801272e:	0019      	movs	r1, r3
 8012730:	f7f3 f94e 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, XSHUT_C2_Pin, GPIO_PIN_SET);
 8012734:	2380      	movs	r3, #128	; 0x80
 8012736:	015b      	lsls	r3, r3, #5
 8012738:	482f      	ldr	r0, [pc, #188]	; (80127f8 <initialisation_mesure_capteur+0x104>)
 801273a:	2201      	movs	r2, #1
 801273c:	0019      	movs	r1, r3
 801273e:	f7f3 f947 	bl	80059d0 <HAL_GPIO_WritePin>


	//Simple mesure pour Capteur
	VL53L0X_WaitDeviceBooted(Dev);
 8012742:	4b2b      	ldr	r3, [pc, #172]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	0018      	movs	r0, r3
 8012748:	f7f8 fcf6 	bl	800b138 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 801274c:	4b28      	ldr	r3, [pc, #160]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	0018      	movs	r0, r3
 8012752:	f7f8 f989 	bl	800aa68 <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8012756:	4b26      	ldr	r3, [pc, #152]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	0018      	movs	r0, r3
 801275c:	f7f8 fb1e 	bl	800ad9c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8012760:	4b23      	ldr	r3, [pc, #140]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	4a25      	ldr	r2, [pc, #148]	; (80127fc <initialisation_mesure_capteur+0x108>)
 8012766:	4926      	ldr	r1, [pc, #152]	; (8012800 <initialisation_mesure_capteur+0x10c>)
 8012768:	0018      	movs	r0, r3
 801276a:	f7f9 fb70 	bl	800be4e <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 801276e:	4b20      	ldr	r3, [pc, #128]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a24      	ldr	r2, [pc, #144]	; (8012804 <initialisation_mesure_capteur+0x110>)
 8012774:	4924      	ldr	r1, [pc, #144]	; (8012808 <initialisation_mesure_capteur+0x114>)
 8012776:	0018      	movs	r0, r3
 8012778:	f7fa f93e 	bl	800c9f8 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 801277c:	4b1c      	ldr	r3, [pc, #112]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2100      	movs	r1, #0
 8012782:	0018      	movs	r0, r3
 8012784:	f7f8 fda0 	bl	800b2c8 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8012788:	4b19      	ldr	r3, [pc, #100]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2201      	movs	r2, #1
 801278e:	2100      	movs	r1, #0
 8012790:	0018      	movs	r0, r3
 8012792:	f7f9 f8c7 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8012796:	4b16      	ldr	r3, [pc, #88]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2201      	movs	r2, #1
 801279c:	2101      	movs	r1, #1
 801279e:	0018      	movs	r0, r3
 80127a0:	f7f9 f8c0 	bl	800b924 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80127a4:	4b12      	ldr	r3, [pc, #72]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4a18      	ldr	r2, [pc, #96]	; (801280c <initialisation_mesure_capteur+0x118>)
 80127aa:	2101      	movs	r1, #1
 80127ac:	0018      	movs	r0, r3
 80127ae:	f7f9 f9a5 	bl	800bafc <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80127b2:	4b0f      	ldr	r3, [pc, #60]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	22f0      	movs	r2, #240	; 0xf0
 80127b8:	0392      	lsls	r2, r2, #14
 80127ba:	2100      	movs	r1, #0
 80127bc:	0018      	movs	r0, r3
 80127be:	f7f9 f99d 	bl	800bafc <VL53L0X_SetLimitCheckValue>
	//VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 1910);
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80127c2:	4b0b      	ldr	r3, [pc, #44]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2212      	movs	r2, #18
 80127c8:	2100      	movs	r1, #0
 80127ca:	0018      	movs	r0, r3
 80127cc:	f7f8 fe1a 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80127d0:	4b07      	ldr	r3, [pc, #28]	; (80127f0 <initialisation_mesure_capteur+0xfc>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	220e      	movs	r2, #14
 80127d6:	2101      	movs	r1, #1
 80127d8:	0018      	movs	r0, r3
 80127da:	f7f8 fe13 	bl	800b404 <VL53L0X_SetVcselPulsePeriod>

	/* USER CODE END 2 */

}
 80127de:	46c0      	nop			; (mov r8, r8)
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	20005da5 	.word	0x20005da5
 80127e8:	200002cc 	.word	0x200002cc
 80127ec:	20000c84 	.word	0x20000c84
 80127f0:	200002e8 	.word	0x200002e8
 80127f4:	20000754 	.word	0x20000754
 80127f8:	50000400 	.word	0x50000400
 80127fc:	20005d62 	.word	0x20005d62
 8012800:	20005d61 	.word	0x20005d61
 8012804:	20005d60 	.word	0x20005d60
 8012808:	20005d5c 	.word	0x20005d5c
 801280c:	00001999 	.word	0x00001999

08012810 <mesure_et_affichage>:

void mesure_et_affichage(){
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8012816:	4b24      	ldr	r3, [pc, #144]	; (80128a8 <mesure_et_affichage+0x98>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a24      	ldr	r2, [pc, #144]	; (80128ac <mesure_et_affichage+0x9c>)
 801281c:	0011      	movs	r1, r2
 801281e:	0018      	movs	r0, r3
 8012820:	f7f9 fe58 	bl	800c4d4 <VL53L0X_PerformSingleRangingMeasurement>
		DMaxMillimeter_size = sprintf((char*)resultat2, "RangeDMaxMillimeter: %i\n\r", RangingData.RangeDMaxMilliMeter );

		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
		HAL_UART_Transmit(&huart1, resultat2, DMaxMillimeter_size, 100);
	}*/
	if(RangingData.RangeStatus == 0){
 8012824:	4b21      	ldr	r3, [pc, #132]	; (80128ac <mesure_et_affichage+0x9c>)
 8012826:	7e1b      	ldrb	r3, [r3, #24]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d138      	bne.n	801289e <mesure_et_affichage+0x8e>
		//Value = 0 means value is valid.
		int distance =RangingData.RangeMilliMeter;
 801282c:	4b1f      	ldr	r3, [pc, #124]	; (80128ac <mesure_et_affichage+0x9c>)
 801282e:	891b      	ldrh	r3, [r3, #8]
 8012830:	607b      	str	r3, [r7, #4]

		Message_resultat_Size = sprintf((char*)Message_resultat, "Distance en millimetre: %i\n\r", distance);
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	491e      	ldr	r1, [pc, #120]	; (80128b0 <mesure_et_affichage+0xa0>)
 8012836:	4b1f      	ldr	r3, [pc, #124]	; (80128b4 <mesure_et_affichage+0xa4>)
 8012838:	0018      	movs	r0, r3
 801283a:	f001 f849 	bl	80138d0 <siprintf>
 801283e:	0003      	movs	r3, r0
 8012840:	b2da      	uxtb	r2, r3
 8012842:	4b1d      	ldr	r3, [pc, #116]	; (80128b8 <mesure_et_affichage+0xa8>)
 8012844:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 8012846:	4b1c      	ldr	r3, [pc, #112]	; (80128b8 <mesure_et_affichage+0xa8>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	b29a      	uxth	r2, r3
 801284c:	4919      	ldr	r1, [pc, #100]	; (80128b4 <mesure_et_affichage+0xa4>)
 801284e:	481b      	ldr	r0, [pc, #108]	; (80128bc <mesure_et_affichage+0xac>)
 8012850:	2364      	movs	r3, #100	; 0x64
 8012852:	f7f6 f9eb 	bl	8008c2c <HAL_UART_Transmit>

		if(distance<200){
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2bc7      	cmp	r3, #199	; 0xc7
 801285a:	dc11      	bgt.n	8012880 <mesure_et_affichage+0x70>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_SET); // Enable XSHUT
 801285c:	2380      	movs	r3, #128	; 0x80
 801285e:	011b      	lsls	r3, r3, #4
 8012860:	4817      	ldr	r0, [pc, #92]	; (80128c0 <mesure_et_affichage+0xb0>)
 8012862:	2201      	movs	r2, #1
 8012864:	0019      	movs	r1, r3
 8012866:	f7f3 f8b3 	bl	80059d0 <HAL_GPIO_WritePin>
			//HAL_Delay(200);

			//Activer le TOF2 quand le TOF 1 a capté une distance à la canette inférieure à 6cm
			//TOF_Enable(1, GPIO_PIN_RESET);
			//TOF_Enable(2, GPIO_PIN_SET);
			h_cmd_motor.cmd='s';
 801286a:	4b16      	ldr	r3, [pc, #88]	; (80128c4 <mesure_et_affichage+0xb4>)
 801286c:	2273      	movs	r2, #115	; 0x73
 801286e:	701a      	strb	r2, [r3, #0]
			xTaskNotifyGive(h_motor);
 8012870:	4b15      	ldr	r3, [pc, #84]	; (80128c8 <mesure_et_affichage+0xb8>)
 8012872:	6818      	ldr	r0, [r3, #0]
 8012874:	2300      	movs	r3, #0
 8012876:	2202      	movs	r2, #2
 8012878:	2100      	movs	r1, #0
 801287a:	f7ff fb6f 	bl	8011f5c <xTaskGenericNotify>
			HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);

		}
		//HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
	}
}
 801287e:	e00e      	b.n	801289e <mesure_et_affichage+0x8e>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_RESET);
 8012880:	2380      	movs	r3, #128	; 0x80
 8012882:	011b      	lsls	r3, r3, #4
 8012884:	480e      	ldr	r0, [pc, #56]	; (80128c0 <mesure_et_affichage+0xb0>)
 8012886:	2200      	movs	r2, #0
 8012888:	0019      	movs	r1, r3
 801288a:	f7f3 f8a1 	bl	80059d0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 801288e:	4b0a      	ldr	r3, [pc, #40]	; (80128b8 <mesure_et_affichage+0xa8>)
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	b29a      	uxth	r2, r3
 8012894:	4907      	ldr	r1, [pc, #28]	; (80128b4 <mesure_et_affichage+0xa4>)
 8012896:	4809      	ldr	r0, [pc, #36]	; (80128bc <mesure_et_affichage+0xac>)
 8012898:	2364      	movs	r3, #100	; 0x64
 801289a:	f7f6 f9c7 	bl	8008c2c <HAL_UART_Transmit>
}
 801289e:	46c0      	nop			; (mov r8, r8)
 80128a0:	46bd      	mov	sp, r7
 80128a2:	b002      	add	sp, #8
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	46c0      	nop			; (mov r8, r8)
 80128a8:	200002e8 	.word	0x200002e8
 80128ac:	20005da8 	.word	0x20005da8
 80128b0:	080167f0 	.word	0x080167f0
 80128b4:	20005d64 	.word	0x20005d64
 80128b8:	20005da4 	.word	0x20005da4
 80128bc:	20000c84 	.word	0x20000c84
 80128c0:	50000800 	.word	0x50000800
 80128c4:	2000068c 	.word	0x2000068c
 80128c8:	20000688 	.word	0x20000688

080128cc <TOF_shell>:

int TOF_shell(h_shell_t * pshell, int argc, char ** argv){
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
	if (argc == 1){
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d10e      	bne.n	80128fc <TOF_shell+0x30>
		if(*argv[0]=='t'){
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b74      	cmp	r3, #116	; 0x74
 80128e6:	d110      	bne.n	801290a <TOF_shell+0x3e>
			printf("Le capteur TOF est activé\r\n");
 80128e8:	4b0a      	ldr	r3, [pc, #40]	; (8012914 <TOF_shell+0x48>)
 80128ea:	0018      	movs	r0, r3
 80128ec:	f000 ffb2 	bl	8013854 <puts>
			vTaskResume(h_tof);
 80128f0:	4b09      	ldr	r3, [pc, #36]	; (8012918 <TOF_shell+0x4c>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	0018      	movs	r0, r3
 80128f6:	f7fe fe31 	bl	801155c <vTaskResume>
 80128fa:	e006      	b.n	801290a <TOF_shell+0x3e>
		}
	}
	else{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 80128fc:	4b07      	ldr	r3, [pc, #28]	; (801291c <TOF_shell+0x50>)
 80128fe:	0018      	movs	r0, r3
 8012900:	f000 ffa8 	bl	8013854 <puts>
		return -1;
 8012904:	2301      	movs	r3, #1
 8012906:	425b      	negs	r3, r3
 8012908:	e000      	b.n	801290c <TOF_shell+0x40>
	}
	return 0;
 801290a:	2300      	movs	r3, #0
}
 801290c:	0018      	movs	r0, r3
 801290e:	46bd      	mov	sp, r7
 8012910:	b004      	add	sp, #16
 8012912:	bd80      	pop	{r7, pc}
 8012914:	08016810 	.word	0x08016810
 8012918:	20005f54 	.word	0x20005f54
 801291c:	0801682c 	.word	0x0801682c

08012920 <taskTOF>:

//task TOF
void taskTOF(void *pTOF){
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
	printf("Tâche TOF créée\r\n");
 8012928:	4b0d      	ldr	r3, [pc, #52]	; (8012960 <taskTOF+0x40>)
 801292a:	0018      	movs	r0, r3
 801292c:	f000 ff92 	bl	8013854 <puts>
	vTaskSuspend(0);
 8012930:	2000      	movs	r0, #0
 8012932:	f7fe fd87 	bl	8011444 <vTaskSuspend>
	//Init TOF
	initialisation_mesure_capteur();
 8012936:	f7ff fedd 	bl	80126f4 <initialisation_mesure_capteur>

	int index = 0;
 801293a:	2300      	movs	r3, #0
 801293c:	60fb      	str	r3, [r7, #12]
	for(;;){
		index++;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	3301      	adds	r3, #1
 8012942:	60fb      	str	r3, [r7, #12]
		mesure_et_affichage();
 8012944:	f7ff ff64 	bl	8012810 <mesure_et_affichage>
		if(index==TAB_SIZE2){
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	2396      	movs	r3, #150	; 0x96
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	429a      	cmp	r2, r3
 8012950:	d1f5      	bne.n	801293e <taskTOF+0x1e>
			index=0;
 8012952:	2300      	movs	r3, #0
 8012954:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(0);
 8012956:	2000      	movs	r0, #0
 8012958:	f7fe fd74 	bl	8011444 <vTaskSuspend>
		index++;
 801295c:	e7ef      	b.n	801293e <taskTOF+0x1e>
 801295e:	46c0      	nop			; (mov r8, r8)
 8012960:	08016854 	.word	0x08016854

08012964 <shell_uart_receive_irq_cb>:
TaskHandle_t h_task_shell = NULL;

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 801296a:	2300      	movs	r3, #0
 801296c:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 801296e:	4b09      	ldr	r3, [pc, #36]	; (8012994 <shell_uart_receive_irq_cb+0x30>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	1d3a      	adds	r2, r7, #4
 8012974:	0011      	movs	r1, r2
 8012976:	0018      	movs	r0, r3
 8012978:	f7fe fa46 	bl	8010e08 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d003      	beq.n	801298a <shell_uart_receive_irq_cb+0x26>
 8012982:	4b05      	ldr	r3, [pc, #20]	; (8012998 <shell_uart_receive_irq_cb+0x34>)
 8012984:	2280      	movs	r2, #128	; 0x80
 8012986:	0552      	lsls	r2, r2, #21
 8012988:	601a      	str	r2, [r3, #0]
}
 801298a:	46c0      	nop			; (mov r8, r8)
 801298c:	46bd      	mov	sp, r7
 801298e:	b002      	add	sp, #8
 8012990:	bd80      	pop	{r7, pc}
 8012992:	46c0      	nop			; (mov r8, r8)
 8012994:	20005f5c 	.word	0x20005f5c
 8012998:	e000ed04 	.word	0xe000ed04

0801299c <uart_read>:

static char uart_read() {
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 80129a2:	1df9      	adds	r1, r7, #7
 80129a4:	4b09      	ldr	r3, [pc, #36]	; (80129cc <uart_read+0x30>)
 80129a6:	2201      	movs	r2, #1
 80129a8:	0018      	movs	r0, r3
 80129aa:	f7f6 f9db 	bl	8008d64 <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 80129ae:	4b08      	ldr	r3, [pc, #32]	; (80129d0 <uart_read+0x34>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2201      	movs	r2, #1
 80129b4:	4252      	negs	r2, r2
 80129b6:	0011      	movs	r1, r2
 80129b8:	0018      	movs	r0, r3
 80129ba:	f7fe fa8a 	bl	8010ed2 <xQueueSemaphoreTake>

	return c;
 80129be:	1dfb      	adds	r3, r7, #7
 80129c0:	781b      	ldrb	r3, [r3, #0]
}
 80129c2:	0018      	movs	r0, r3
 80129c4:	46bd      	mov	sp, r7
 80129c6:	b002      	add	sp, #8
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	46c0      	nop			; (mov r8, r8)
 80129cc:	20000c84 	.word	0x20000c84
 80129d0:	20005f5c 	.word	0x20005f5c

080129d4 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80129d4:	b590      	push	{r4, r7, lr}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	000a      	movs	r2, r1
 80129de:	1cbb      	adds	r3, r7, #2
 80129e0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80129e2:	2301      	movs	r3, #1
 80129e4:	425c      	negs	r4, r3
 80129e6:	1cbb      	adds	r3, r7, #2
 80129e8:	881a      	ldrh	r2, [r3, #0]
 80129ea:	6879      	ldr	r1, [r7, #4]
 80129ec:	4804      	ldr	r0, [pc, #16]	; (8012a00 <uart_write+0x2c>)
 80129ee:	0023      	movs	r3, r4
 80129f0:	f7f6 f91c 	bl	8008c2c <HAL_UART_Transmit>
	return size;
 80129f4:	1cbb      	adds	r3, r7, #2
 80129f6:	881b      	ldrh	r3, [r3, #0]
}
 80129f8:	0018      	movs	r0, r3
 80129fa:	46bd      	mov	sp, r7
 80129fc:	b003      	add	sp, #12
 80129fe:	bd90      	pop	{r4, r7, pc}
 8012a00:	20000c84 	.word	0x20000c84

08012a04 <sh_help>:

static int sh_help(h_shell_t *pshell, int argc, char ** argv) {
 8012a04:	b590      	push	{r4, r7, lr}
 8012a06:	b089      	sub	sp, #36	; 0x24
 8012a08:	af02      	add	r7, sp, #8
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	60b9      	str	r1, [r7, #8]
 8012a0e:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < pshell->shell_func_list_size ; i++) {
 8012a10:	2300      	movs	r3, #0
 8012a12:	617b      	str	r3, [r7, #20]
 8012a14:	e02c      	b.n	8012a70 <sh_help+0x6c>
		int size;
		size = snprintf (pshell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", pshell->shell_func_list[i].c, pshell->shell_func_list[i].description);
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	22c1      	movs	r2, #193	; 0xc1
 8012a1a:	0092      	lsls	r2, r2, #2
 8012a1c:	1898      	adds	r0, r3, r2
 8012a1e:	68f9      	ldr	r1, [r7, #12]
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	0013      	movs	r3, r2
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	189b      	adds	r3, r3, r2
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	18cb      	adds	r3, r1, r3
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	001c      	movs	r4, r3
 8012a32:	68f9      	ldr	r1, [r7, #12]
 8012a34:	697a      	ldr	r2, [r7, #20]
 8012a36:	0013      	movs	r3, r2
 8012a38:	005b      	lsls	r3, r3, #1
 8012a3a:	189b      	adds	r3, r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	18cb      	adds	r3, r1, r3
 8012a40:	330c      	adds	r3, #12
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	4a0f      	ldr	r2, [pc, #60]	; (8012a84 <sh_help+0x80>)
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	0023      	movs	r3, r4
 8012a4a:	2128      	movs	r1, #40	; 0x28
 8012a4c:	f000 ff0c 	bl	8013868 <sniprintf>
 8012a50:	0003      	movs	r3, r0
 8012a52:	613b      	str	r3, [r7, #16]
		uart_write(pshell->print_buffer, size);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	22c1      	movs	r2, #193	; 0xc1
 8012a58:	0092      	lsls	r2, r2, #2
 8012a5a:	4694      	mov	ip, r2
 8012a5c:	4463      	add	r3, ip
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	b292      	uxth	r2, r2
 8012a62:	0011      	movs	r1, r2
 8012a64:	0018      	movs	r0, r3
 8012a66:	f7ff ffb5 	bl	80129d4 <uart_write>
	for(i = 0 ; i < pshell->shell_func_list_size ; i++) {
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	617b      	str	r3, [r7, #20]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	697a      	ldr	r2, [r7, #20]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	dbcd      	blt.n	8012a16 <sh_help+0x12>
	}

	return 0;
 8012a7a:	2300      	movs	r3, #0
}
 8012a7c:	0018      	movs	r0, r3
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	b007      	add	sp, #28
 8012a82:	bd90      	pop	{r4, r7, pc}
 8012a84:	08016868 	.word	0x08016868

08012a88 <shell_init>:

void shell_init(h_shell_t *pshell) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
	int size = 0;
 8012a90:	2300      	movs	r3, #0
 8012a92:	60fb      	str	r3, [r7, #12]
	pshell->shell_func_list_size = 0;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	601a      	str	r2, [r3, #0]
	sprintf(pshell->backspace,"\b \b");
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	22cb      	movs	r2, #203	; 0xcb
 8012a9e:	0092      	lsls	r2, r2, #2
 8012aa0:	4694      	mov	ip, r2
 8012aa2:	4463      	add	r3, ip
 8012aa4:	4a1f      	ldr	r2, [pc, #124]	; (8012b24 <shell_init+0x9c>)
 8012aa6:	0011      	movs	r1, r2
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	f000 ff11 	bl	80138d0 <siprintf>
	sprintf(pshell->prompt,"> ");
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4a1d      	ldr	r2, [pc, #116]	; (8012b28 <shell_init+0xa0>)
 8012ab2:	4694      	mov	ip, r2
 8012ab4:	4463      	add	r3, ip
 8012ab6:	4a1d      	ldr	r2, [pc, #116]	; (8012b2c <shell_init+0xa4>)
 8012ab8:	0011      	movs	r1, r2
 8012aba:	0018      	movs	r0, r3
 8012abc:	f000 ff08 	bl	80138d0 <siprintf>
	size = snprintf (pshell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Robot beer shell =====\r\n");
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	22c1      	movs	r2, #193	; 0xc1
 8012ac4:	0092      	lsls	r2, r2, #2
 8012ac6:	4694      	mov	ip, r2
 8012ac8:	4463      	add	r3, ip
 8012aca:	4a19      	ldr	r2, [pc, #100]	; (8012b30 <shell_init+0xa8>)
 8012acc:	2128      	movs	r1, #40	; 0x28
 8012ace:	0018      	movs	r0, r3
 8012ad0:	f000 feca 	bl	8013868 <sniprintf>
 8012ad4:	0003      	movs	r3, r0
 8012ad6:	60fb      	str	r3, [r7, #12]
	uart_write(pshell->print_buffer, size);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	22c1      	movs	r2, #193	; 0xc1
 8012adc:	0092      	lsls	r2, r2, #2
 8012ade:	4694      	mov	ip, r2
 8012ae0:	4463      	add	r3, ip
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	b292      	uxth	r2, r2
 8012ae6:	0011      	movs	r1, r2
 8012ae8:	0018      	movs	r0, r3
 8012aea:	f7ff ff73 	bl	80129d4 <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8012aee:	2203      	movs	r2, #3
 8012af0:	2100      	movs	r1, #0
 8012af2:	2001      	movs	r0, #1
 8012af4:	f7fe f938 	bl	8010d68 <xQueueGenericCreate>
 8012af8:	0002      	movs	r2, r0
 8012afa:	4b0e      	ldr	r3, [pc, #56]	; (8012b34 <shell_init+0xac>)
 8012afc:	601a      	str	r2, [r3, #0]
	if (sem_uart_read == NULL)
 8012afe:	4b0d      	ldr	r3, [pc, #52]	; (8012b34 <shell_init+0xac>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d104      	bne.n	8012b10 <shell_init+0x88>
	{
		printf("Error semaphore shell\r\n");
 8012b06:	4b0c      	ldr	r3, [pc, #48]	; (8012b38 <shell_init+0xb0>)
 8012b08:	0018      	movs	r0, r3
 8012b0a:	f000 fea3 	bl	8013854 <puts>
		while(1);
 8012b0e:	e7fe      	b.n	8012b0e <shell_init+0x86>
	}

	shell_add(pshell,'h', sh_help, "Help");
 8012b10:	4b0a      	ldr	r3, [pc, #40]	; (8012b3c <shell_init+0xb4>)
 8012b12:	4a0b      	ldr	r2, [pc, #44]	; (8012b40 <shell_init+0xb8>)
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	2168      	movs	r1, #104	; 0x68
 8012b18:	f000 f814 	bl	8012b44 <shell_add>

}
 8012b1c:	46c0      	nop			; (mov r8, r8)
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	b004      	add	sp, #16
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	08016874 	.word	0x08016874
 8012b28:	0000032f 	.word	0x0000032f
 8012b2c:	08016878 	.word	0x08016878
 8012b30:	0801687c 	.word	0x0801687c
 8012b34:	20005f5c 	.word	0x20005f5c
 8012b38:	080168a0 	.word	0x080168a0
 8012b3c:	080168b8 	.word	0x080168b8
 8012b40:	08012a05 	.word	0x08012a05

08012b44 <shell_add>:

int shell_add(h_shell_t *pshell, char c, int (* pfunc)(h_shell_t *pshell,int argc, char ** argv), char * description) {
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	607a      	str	r2, [r7, #4]
 8012b4e:	603b      	str	r3, [r7, #0]
 8012b50:	200b      	movs	r0, #11
 8012b52:	183b      	adds	r3, r7, r0
 8012b54:	1c0a      	adds	r2, r1, #0
 8012b56:	701a      	strb	r2, [r3, #0]
	if (pshell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8012b5e:	dc28      	bgt.n	8012bb2 <shell_add+0x6e>
		pshell->shell_func_list[pshell->shell_func_list_size].c = c;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	68f9      	ldr	r1, [r7, #12]
 8012b66:	0013      	movs	r3, r2
 8012b68:	005b      	lsls	r3, r3, #1
 8012b6a:	189b      	adds	r3, r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	18cb      	adds	r3, r1, r3
 8012b70:	3304      	adds	r3, #4
 8012b72:	183a      	adds	r2, r7, r0
 8012b74:	7812      	ldrb	r2, [r2, #0]
 8012b76:	701a      	strb	r2, [r3, #0]
		pshell->shell_func_list[pshell->shell_func_list_size].func = pfunc;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	68f9      	ldr	r1, [r7, #12]
 8012b7e:	0013      	movs	r3, r2
 8012b80:	005b      	lsls	r3, r3, #1
 8012b82:	189b      	adds	r3, r3, r2
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	18cb      	adds	r3, r1, r3
 8012b88:	3308      	adds	r3, #8
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	601a      	str	r2, [r3, #0]
		pshell->shell_func_list[pshell->shell_func_list_size].description = description;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68f9      	ldr	r1, [r7, #12]
 8012b94:	0013      	movs	r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	189b      	adds	r3, r3, r2
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	18cb      	adds	r3, r1, r3
 8012b9e:	330c      	adds	r3, #12
 8012ba0:	683a      	ldr	r2, [r7, #0]
 8012ba2:	601a      	str	r2, [r3, #0]
		pshell->shell_func_list_size++;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	1c5a      	adds	r2, r3, #1
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	601a      	str	r2, [r3, #0]
		return 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	e001      	b.n	8012bb6 <shell_add+0x72>
	}

	return -1;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	425b      	negs	r3, r3
}
 8012bb6:	0018      	movs	r0, r3
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	b004      	add	sp, #16
 8012bbc:	bd80      	pop	{r7, pc}
	...

08012bc0 <shell_exec>:

static int shell_exec( h_shell_t *pshell, char * buf) {
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b090      	sub	sp, #64	; 0x40
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 8012bca:	2333      	movs	r3, #51	; 0x33
 8012bcc:	18fb      	adds	r3, r7, r3
 8012bce:	683a      	ldr	r2, [r7, #0]
 8012bd0:	7812      	ldrb	r2, [r2, #0]
 8012bd2:	701a      	strb	r2, [r3, #0]

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < pshell->shell_func_list_size ; i++) {
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012bd8:	e043      	b.n	8012c62 <shell_exec+0xa2>
		if (pshell->shell_func_list[i].c == c) {
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bde:	0013      	movs	r3, r2
 8012be0:	005b      	lsls	r3, r3, #1
 8012be2:	189b      	adds	r3, r3, r2
 8012be4:	009b      	lsls	r3, r3, #2
 8012be6:	18cb      	adds	r3, r1, r3
 8012be8:	3304      	adds	r3, #4
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2233      	movs	r2, #51	; 0x33
 8012bee:	18ba      	adds	r2, r7, r2
 8012bf0:	7812      	ldrb	r2, [r2, #0]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d132      	bne.n	8012c5c <shell_exec+0x9c>
			argc = 1;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8012bfa:	230c      	movs	r3, #12
 8012bfc:	18fb      	adds	r3, r7, r3
 8012bfe:	683a      	ldr	r2, [r7, #0]
 8012c00:	601a      	str	r2, [r3, #0]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	637b      	str	r3, [r7, #52]	; 0x34
 8012c06:	e012      	b.n	8012c2e <shell_exec+0x6e>
				if(*p == ' ') {
 8012c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b20      	cmp	r3, #32
 8012c0e:	d10b      	bne.n	8012c28 <shell_exec+0x68>
					*p = '\0';
 8012c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c12:	2200      	movs	r2, #0
 8012c14:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8012c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c18:	1c5a      	adds	r2, r3, #1
 8012c1a:	63ba      	str	r2, [r7, #56]	; 0x38
 8012c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c1e:	1c51      	adds	r1, r2, #1
 8012c20:	220c      	movs	r2, #12
 8012c22:	18ba      	adds	r2, r7, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	5099      	str	r1, [r3, r2]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8012c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8012c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d002      	beq.n	8012c3c <shell_exec+0x7c>
 8012c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c38:	2b07      	cmp	r3, #7
 8012c3a:	dde5      	ble.n	8012c08 <shell_exec+0x48>
				}
			}

			return pshell->shell_func_list[i].func(pshell,argc, argv);
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c40:	0013      	movs	r3, r2
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	189b      	adds	r3, r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	18cb      	adds	r3, r1, r3
 8012c4a:	3308      	adds	r3, #8
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	220c      	movs	r2, #12
 8012c50:	18ba      	adds	r2, r7, r2
 8012c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	4798      	blx	r3
 8012c58:	0003      	movs	r3, r0
 8012c5a:	e021      	b.n	8012ca0 <shell_exec+0xe0>
	for(i = 0 ; i < pshell->shell_func_list_size ; i++) {
 8012c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c5e:	3301      	adds	r3, #1
 8012c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	dbb6      	blt.n	8012bda <shell_exec+0x1a>
		}
	}

	int size;
	size = snprintf (pshell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	22c1      	movs	r2, #193	; 0xc1
 8012c70:	0092      	lsls	r2, r2, #2
 8012c72:	1898      	adds	r0, r3, r2
 8012c74:	2333      	movs	r3, #51	; 0x33
 8012c76:	18fb      	adds	r3, r7, r3
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	4a0b      	ldr	r2, [pc, #44]	; (8012ca8 <shell_exec+0xe8>)
 8012c7c:	2128      	movs	r1, #40	; 0x28
 8012c7e:	f000 fdf3 	bl	8013868 <sniprintf>
 8012c82:	0003      	movs	r3, r0
 8012c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	uart_write(pshell->print_buffer, size);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	22c1      	movs	r2, #193	; 0xc1
 8012c8a:	0092      	lsls	r2, r2, #2
 8012c8c:	4694      	mov	ip, r2
 8012c8e:	4463      	add	r3, ip
 8012c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c92:	b292      	uxth	r2, r2
 8012c94:	0011      	movs	r1, r2
 8012c96:	0018      	movs	r0, r3
 8012c98:	f7ff fe9c 	bl	80129d4 <uart_write>
	return -1;
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	425b      	negs	r3, r3
}
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	b010      	add	sp, #64	; 0x40
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	080168c0 	.word	0x080168c0

08012cac <shell_run>:


int shell_run(h_shell_t *pshell) {
 8012cac:	b590      	push	{r4, r7, lr}
 8012cae:	b087      	sub	sp, #28
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	613b      	str	r3, [r7, #16]


	while (1) {
		uart_write(pshell->prompt, 2);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	4a43      	ldr	r2, [pc, #268]	; (8012dcc <shell_run+0x120>)
 8012cc0:	4694      	mov	ip, r2
 8012cc2:	4463      	add	r3, ip
 8012cc4:	2102      	movs	r1, #2
 8012cc6:	0018      	movs	r0, r3
 8012cc8:	f7ff fe84 	bl	80129d4 <uart_write>
		reading = 1;
 8012ccc:	2301      	movs	r3, #1
 8012cce:	617b      	str	r3, [r7, #20]

		while(reading) {
 8012cd0:	e070      	b.n	8012db4 <shell_run+0x108>
			char c = uart_read();
 8012cd2:	f7ff fe63 	bl	801299c <uart_read>
 8012cd6:	0003      	movs	r3, r0
 8012cd8:	001a      	movs	r2, r3
 8012cda:	210b      	movs	r1, #11
 8012cdc:	187b      	adds	r3, r7, r1
 8012cde:	701a      	strb	r2, [r3, #0]
			int size;

			switch (c) {
 8012ce0:	187b      	adds	r3, r7, r1
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b08      	cmp	r3, #8
 8012ce6:	d03f      	beq.n	8012d68 <shell_run+0xbc>
 8012ce8:	2b0d      	cmp	r3, #13
 8012cea:	d14d      	bne.n	8012d88 <shell_run+0xdc>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (pshell->print_buffer, BUFFER_SIZE, "\r\n");
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	22c1      	movs	r2, #193	; 0xc1
 8012cf0:	0092      	lsls	r2, r2, #2
 8012cf2:	4694      	mov	ip, r2
 8012cf4:	4463      	add	r3, ip
 8012cf6:	4a36      	ldr	r2, [pc, #216]	; (8012dd0 <shell_run+0x124>)
 8012cf8:	2128      	movs	r1, #40	; 0x28
 8012cfa:	0018      	movs	r0, r3
 8012cfc:	f000 fdb4 	bl	8013868 <sniprintf>
 8012d00:	0003      	movs	r3, r0
 8012d02:	60fb      	str	r3, [r7, #12]
				uart_write(pshell->print_buffer, size);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	22c1      	movs	r2, #193	; 0xc1
 8012d08:	0092      	lsls	r2, r2, #2
 8012d0a:	4694      	mov	ip, r2
 8012d0c:	4463      	add	r3, ip
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	b292      	uxth	r2, r2
 8012d12:	0011      	movs	r1, r2
 8012d14:	0018      	movs	r0, r3
 8012d16:	f7ff fe5d 	bl	80129d4 <uart_write>
				pshell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	1c5a      	adds	r2, r3, #1
 8012d1e:	613a      	str	r2, [r7, #16]
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	492c      	ldr	r1, [pc, #176]	; (8012dd4 <shell_run+0x128>)
 8012d24:	18d3      	adds	r3, r2, r3
 8012d26:	185b      	adds	r3, r3, r1
 8012d28:	2200      	movs	r2, #0
 8012d2a:	701a      	strb	r2, [r3, #0]
				size = snprintf (pshell->print_buffer, BUFFER_SIZE, ":%s\r\n", pshell->cmd_buffer);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	22c1      	movs	r2, #193	; 0xc1
 8012d30:	0092      	lsls	r2, r2, #2
 8012d32:	1898      	adds	r0, r3, r2
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	4a27      	ldr	r2, [pc, #156]	; (8012dd4 <shell_run+0x128>)
 8012d38:	4694      	mov	ip, r2
 8012d3a:	4463      	add	r3, ip
 8012d3c:	4a26      	ldr	r2, [pc, #152]	; (8012dd8 <shell_run+0x12c>)
 8012d3e:	2128      	movs	r1, #40	; 0x28
 8012d40:	f000 fd92 	bl	8013868 <sniprintf>
 8012d44:	0003      	movs	r3, r0
 8012d46:	60fb      	str	r3, [r7, #12]
				uart_write(pshell->print_buffer, size);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	22c1      	movs	r2, #193	; 0xc1
 8012d4c:	0092      	lsls	r2, r2, #2
 8012d4e:	4694      	mov	ip, r2
 8012d50:	4463      	add	r3, ip
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	b292      	uxth	r2, r2
 8012d56:	0011      	movs	r1, r2
 8012d58:	0018      	movs	r0, r3
 8012d5a:	f7ff fe3b 	bl	80129d4 <uart_write>
				reading = 0;        //exit read loop
 8012d5e:	2300      	movs	r3, #0
 8012d60:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8012d62:	2300      	movs	r3, #0
 8012d64:	613b      	str	r3, [r7, #16]
				break;
 8012d66:	e025      	b.n	8012db4 <shell_run+0x108>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	dd21      	ble.n	8012db2 <shell_run+0x106>
					pos--;          //remove it in buffer
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	3b01      	subs	r3, #1
 8012d72:	613b      	str	r3, [r7, #16]

					uart_write(pshell->backspace, 3);	// delete the char on the terminal
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	22cb      	movs	r2, #203	; 0xcb
 8012d78:	0092      	lsls	r2, r2, #2
 8012d7a:	4694      	mov	ip, r2
 8012d7c:	4463      	add	r3, ip
 8012d7e:	2103      	movs	r1, #3
 8012d80:	0018      	movs	r0, r3
 8012d82:	f7ff fe27 	bl	80129d4 <uart_write>
				}
				break;
 8012d86:	e014      	b.n	8012db2 <shell_run+0x106>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	2b27      	cmp	r3, #39	; 0x27
 8012d8c:	dc12      	bgt.n	8012db4 <shell_run+0x108>
					uart_write(&c, 1);
 8012d8e:	240b      	movs	r4, #11
 8012d90:	193b      	adds	r3, r7, r4
 8012d92:	2101      	movs	r1, #1
 8012d94:	0018      	movs	r0, r3
 8012d96:	f7ff fe1d 	bl	80129d4 <uart_write>
					pshell->cmd_buffer[pos++] = c; //store
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	1c5a      	adds	r2, r3, #1
 8012d9e:	613a      	str	r2, [r7, #16]
 8012da0:	193a      	adds	r2, r7, r4
 8012da2:	7810      	ldrb	r0, [r2, #0]
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	490b      	ldr	r1, [pc, #44]	; (8012dd4 <shell_run+0x128>)
 8012da8:	18d3      	adds	r3, r2, r3
 8012daa:	185b      	adds	r3, r3, r1
 8012dac:	1c02      	adds	r2, r0, #0
 8012dae:	701a      	strb	r2, [r3, #0]
 8012db0:	e000      	b.n	8012db4 <shell_run+0x108>
				break;
 8012db2:	46c0      	nop			; (mov r8, r8)
		while(reading) {
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d18b      	bne.n	8012cd2 <shell_run+0x26>
				}
			}
		}
		shell_exec(pshell,pshell->cmd_buffer);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4a05      	ldr	r2, [pc, #20]	; (8012dd4 <shell_run+0x128>)
 8012dbe:	189a      	adds	r2, r3, r2
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	0011      	movs	r1, r2
 8012dc4:	0018      	movs	r0, r3
 8012dc6:	f7ff fefb 	bl	8012bc0 <shell_exec>
		uart_write(pshell->prompt, 2);
 8012dca:	e777      	b.n	8012cbc <shell_run+0x10>
 8012dcc:	0000032f 	.word	0x0000032f
 8012dd0:	080168d8 	.word	0x080168d8
 8012dd4:	00000331 	.word	0x00000331
 8012dd8:	080168dc 	.word	0x080168dc

08012ddc <atoi>:
 8012ddc:	b510      	push	{r4, lr}
 8012dde:	220a      	movs	r2, #10
 8012de0:	2100      	movs	r1, #0
 8012de2:	f000 fe2b 	bl	8013a3c <strtol>
 8012de6:	bd10      	pop	{r4, pc}

08012de8 <__errno>:
 8012de8:	4b01      	ldr	r3, [pc, #4]	; (8012df0 <__errno+0x8>)
 8012dea:	6818      	ldr	r0, [r3, #0]
 8012dec:	4770      	bx	lr
 8012dee:	46c0      	nop			; (mov r8, r8)
 8012df0:	200002ec 	.word	0x200002ec

08012df4 <__libc_init_array>:
 8012df4:	b570      	push	{r4, r5, r6, lr}
 8012df6:	2600      	movs	r6, #0
 8012df8:	4d0c      	ldr	r5, [pc, #48]	; (8012e2c <__libc_init_array+0x38>)
 8012dfa:	4c0d      	ldr	r4, [pc, #52]	; (8012e30 <__libc_init_array+0x3c>)
 8012dfc:	1b64      	subs	r4, r4, r5
 8012dfe:	10a4      	asrs	r4, r4, #2
 8012e00:	42a6      	cmp	r6, r4
 8012e02:	d109      	bne.n	8012e18 <__libc_init_array+0x24>
 8012e04:	2600      	movs	r6, #0
 8012e06:	f003 f929 	bl	801605c <_init>
 8012e0a:	4d0a      	ldr	r5, [pc, #40]	; (8012e34 <__libc_init_array+0x40>)
 8012e0c:	4c0a      	ldr	r4, [pc, #40]	; (8012e38 <__libc_init_array+0x44>)
 8012e0e:	1b64      	subs	r4, r4, r5
 8012e10:	10a4      	asrs	r4, r4, #2
 8012e12:	42a6      	cmp	r6, r4
 8012e14:	d105      	bne.n	8012e22 <__libc_init_array+0x2e>
 8012e16:	bd70      	pop	{r4, r5, r6, pc}
 8012e18:	00b3      	lsls	r3, r6, #2
 8012e1a:	58eb      	ldr	r3, [r5, r3]
 8012e1c:	4798      	blx	r3
 8012e1e:	3601      	adds	r6, #1
 8012e20:	e7ee      	b.n	8012e00 <__libc_init_array+0xc>
 8012e22:	00b3      	lsls	r3, r6, #2
 8012e24:	58eb      	ldr	r3, [r5, r3]
 8012e26:	4798      	blx	r3
 8012e28:	3601      	adds	r6, #1
 8012e2a:	e7f2      	b.n	8012e12 <__libc_init_array+0x1e>
 8012e2c:	08016ecc 	.word	0x08016ecc
 8012e30:	08016ecc 	.word	0x08016ecc
 8012e34:	08016ecc 	.word	0x08016ecc
 8012e38:	08016ed0 	.word	0x08016ed0

08012e3c <memcpy>:
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	b510      	push	{r4, lr}
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d100      	bne.n	8012e46 <memcpy+0xa>
 8012e44:	bd10      	pop	{r4, pc}
 8012e46:	5ccc      	ldrb	r4, [r1, r3]
 8012e48:	54c4      	strb	r4, [r0, r3]
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	e7f8      	b.n	8012e40 <memcpy+0x4>

08012e4e <memset>:
 8012e4e:	0003      	movs	r3, r0
 8012e50:	1882      	adds	r2, r0, r2
 8012e52:	4293      	cmp	r3, r2
 8012e54:	d100      	bne.n	8012e58 <memset+0xa>
 8012e56:	4770      	bx	lr
 8012e58:	7019      	strb	r1, [r3, #0]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	e7f9      	b.n	8012e52 <memset+0x4>

08012e5e <__cvt>:
 8012e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e60:	001e      	movs	r6, r3
 8012e62:	2300      	movs	r3, #0
 8012e64:	0014      	movs	r4, r2
 8012e66:	b08b      	sub	sp, #44	; 0x2c
 8012e68:	429e      	cmp	r6, r3
 8012e6a:	da04      	bge.n	8012e76 <__cvt+0x18>
 8012e6c:	2180      	movs	r1, #128	; 0x80
 8012e6e:	0609      	lsls	r1, r1, #24
 8012e70:	1873      	adds	r3, r6, r1
 8012e72:	001e      	movs	r6, r3
 8012e74:	232d      	movs	r3, #45	; 0x2d
 8012e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e78:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012e7a:	7013      	strb	r3, [r2, #0]
 8012e7c:	2320      	movs	r3, #32
 8012e7e:	2203      	movs	r2, #3
 8012e80:	439f      	bics	r7, r3
 8012e82:	2f46      	cmp	r7, #70	; 0x46
 8012e84:	d007      	beq.n	8012e96 <__cvt+0x38>
 8012e86:	003b      	movs	r3, r7
 8012e88:	3b45      	subs	r3, #69	; 0x45
 8012e8a:	4259      	negs	r1, r3
 8012e8c:	414b      	adcs	r3, r1
 8012e8e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012e90:	3a01      	subs	r2, #1
 8012e92:	18cb      	adds	r3, r1, r3
 8012e94:	9310      	str	r3, [sp, #64]	; 0x40
 8012e96:	ab09      	add	r3, sp, #36	; 0x24
 8012e98:	9304      	str	r3, [sp, #16]
 8012e9a:	ab08      	add	r3, sp, #32
 8012e9c:	9303      	str	r3, [sp, #12]
 8012e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ea0:	9200      	str	r2, [sp, #0]
 8012ea2:	9302      	str	r3, [sp, #8]
 8012ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012ea6:	0022      	movs	r2, r4
 8012ea8:	9301      	str	r3, [sp, #4]
 8012eaa:	0033      	movs	r3, r6
 8012eac:	f000 ff2c 	bl	8013d08 <_dtoa_r>
 8012eb0:	0005      	movs	r5, r0
 8012eb2:	2f47      	cmp	r7, #71	; 0x47
 8012eb4:	d102      	bne.n	8012ebc <__cvt+0x5e>
 8012eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012eb8:	07db      	lsls	r3, r3, #31
 8012eba:	d528      	bpl.n	8012f0e <__cvt+0xb0>
 8012ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012ebe:	18eb      	adds	r3, r5, r3
 8012ec0:	9307      	str	r3, [sp, #28]
 8012ec2:	2f46      	cmp	r7, #70	; 0x46
 8012ec4:	d114      	bne.n	8012ef0 <__cvt+0x92>
 8012ec6:	782b      	ldrb	r3, [r5, #0]
 8012ec8:	2b30      	cmp	r3, #48	; 0x30
 8012eca:	d10c      	bne.n	8012ee6 <__cvt+0x88>
 8012ecc:	2200      	movs	r2, #0
 8012ece:	2300      	movs	r3, #0
 8012ed0:	0020      	movs	r0, r4
 8012ed2:	0031      	movs	r1, r6
 8012ed4:	f7ed faba 	bl	800044c <__aeabi_dcmpeq>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d104      	bne.n	8012ee6 <__cvt+0x88>
 8012edc:	2301      	movs	r3, #1
 8012ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012ee0:	1a9b      	subs	r3, r3, r2
 8012ee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012ee4:	6013      	str	r3, [r2, #0]
 8012ee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ee8:	9a07      	ldr	r2, [sp, #28]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	18d3      	adds	r3, r2, r3
 8012eee:	9307      	str	r3, [sp, #28]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	0020      	movs	r0, r4
 8012ef6:	0031      	movs	r1, r6
 8012ef8:	f7ed faa8 	bl	800044c <__aeabi_dcmpeq>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d001      	beq.n	8012f04 <__cvt+0xa6>
 8012f00:	9b07      	ldr	r3, [sp, #28]
 8012f02:	9309      	str	r3, [sp, #36]	; 0x24
 8012f04:	2230      	movs	r2, #48	; 0x30
 8012f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f08:	9907      	ldr	r1, [sp, #28]
 8012f0a:	428b      	cmp	r3, r1
 8012f0c:	d306      	bcc.n	8012f1c <__cvt+0xbe>
 8012f0e:	0028      	movs	r0, r5
 8012f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012f14:	1b5b      	subs	r3, r3, r5
 8012f16:	6013      	str	r3, [r2, #0]
 8012f18:	b00b      	add	sp, #44	; 0x2c
 8012f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f1c:	1c59      	adds	r1, r3, #1
 8012f1e:	9109      	str	r1, [sp, #36]	; 0x24
 8012f20:	701a      	strb	r2, [r3, #0]
 8012f22:	e7f0      	b.n	8012f06 <__cvt+0xa8>

08012f24 <__exponent>:
 8012f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f26:	1c83      	adds	r3, r0, #2
 8012f28:	b087      	sub	sp, #28
 8012f2a:	9303      	str	r3, [sp, #12]
 8012f2c:	0005      	movs	r5, r0
 8012f2e:	000c      	movs	r4, r1
 8012f30:	232b      	movs	r3, #43	; 0x2b
 8012f32:	7002      	strb	r2, [r0, #0]
 8012f34:	2900      	cmp	r1, #0
 8012f36:	da01      	bge.n	8012f3c <__exponent+0x18>
 8012f38:	424c      	negs	r4, r1
 8012f3a:	3302      	adds	r3, #2
 8012f3c:	706b      	strb	r3, [r5, #1]
 8012f3e:	2c09      	cmp	r4, #9
 8012f40:	dd31      	ble.n	8012fa6 <__exponent+0x82>
 8012f42:	270a      	movs	r7, #10
 8012f44:	ab04      	add	r3, sp, #16
 8012f46:	1dde      	adds	r6, r3, #7
 8012f48:	0020      	movs	r0, r4
 8012f4a:	0039      	movs	r1, r7
 8012f4c:	9601      	str	r6, [sp, #4]
 8012f4e:	f7ed fa67 	bl	8000420 <__aeabi_idivmod>
 8012f52:	3e01      	subs	r6, #1
 8012f54:	3130      	adds	r1, #48	; 0x30
 8012f56:	0020      	movs	r0, r4
 8012f58:	7031      	strb	r1, [r6, #0]
 8012f5a:	0039      	movs	r1, r7
 8012f5c:	9402      	str	r4, [sp, #8]
 8012f5e:	f7ed f979 	bl	8000254 <__divsi3>
 8012f62:	9b02      	ldr	r3, [sp, #8]
 8012f64:	0004      	movs	r4, r0
 8012f66:	2b63      	cmp	r3, #99	; 0x63
 8012f68:	dcee      	bgt.n	8012f48 <__exponent+0x24>
 8012f6a:	9b01      	ldr	r3, [sp, #4]
 8012f6c:	3430      	adds	r4, #48	; 0x30
 8012f6e:	1e9a      	subs	r2, r3, #2
 8012f70:	0013      	movs	r3, r2
 8012f72:	9903      	ldr	r1, [sp, #12]
 8012f74:	7014      	strb	r4, [r2, #0]
 8012f76:	a804      	add	r0, sp, #16
 8012f78:	3007      	adds	r0, #7
 8012f7a:	4298      	cmp	r0, r3
 8012f7c:	d80e      	bhi.n	8012f9c <__exponent+0x78>
 8012f7e:	ab04      	add	r3, sp, #16
 8012f80:	3307      	adds	r3, #7
 8012f82:	2000      	movs	r0, #0
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d804      	bhi.n	8012f92 <__exponent+0x6e>
 8012f88:	ab04      	add	r3, sp, #16
 8012f8a:	3009      	adds	r0, #9
 8012f8c:	18c0      	adds	r0, r0, r3
 8012f8e:	9b01      	ldr	r3, [sp, #4]
 8012f90:	1ac0      	subs	r0, r0, r3
 8012f92:	9b03      	ldr	r3, [sp, #12]
 8012f94:	1818      	adds	r0, r3, r0
 8012f96:	1b40      	subs	r0, r0, r5
 8012f98:	b007      	add	sp, #28
 8012f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f9c:	7818      	ldrb	r0, [r3, #0]
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	7008      	strb	r0, [r1, #0]
 8012fa2:	3101      	adds	r1, #1
 8012fa4:	e7e7      	b.n	8012f76 <__exponent+0x52>
 8012fa6:	2330      	movs	r3, #48	; 0x30
 8012fa8:	18e4      	adds	r4, r4, r3
 8012faa:	70ab      	strb	r3, [r5, #2]
 8012fac:	1d28      	adds	r0, r5, #4
 8012fae:	70ec      	strb	r4, [r5, #3]
 8012fb0:	e7f1      	b.n	8012f96 <__exponent+0x72>
	...

08012fb4 <_printf_float>:
 8012fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fb6:	b095      	sub	sp, #84	; 0x54
 8012fb8:	000c      	movs	r4, r1
 8012fba:	9209      	str	r2, [sp, #36]	; 0x24
 8012fbc:	001e      	movs	r6, r3
 8012fbe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012fc0:	0007      	movs	r7, r0
 8012fc2:	f001 fe89 	bl	8014cd8 <_localeconv_r>
 8012fc6:	6803      	ldr	r3, [r0, #0]
 8012fc8:	0018      	movs	r0, r3
 8012fca:	930c      	str	r3, [sp, #48]	; 0x30
 8012fcc:	f7ed f89c 	bl	8000108 <strlen>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	9312      	str	r3, [sp, #72]	; 0x48
 8012fd4:	7e23      	ldrb	r3, [r4, #24]
 8012fd6:	2207      	movs	r2, #7
 8012fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8012fda:	6823      	ldr	r3, [r4, #0]
 8012fdc:	900e      	str	r0, [sp, #56]	; 0x38
 8012fde:	930d      	str	r3, [sp, #52]	; 0x34
 8012fe0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012fe2:	682b      	ldr	r3, [r5, #0]
 8012fe4:	05c9      	lsls	r1, r1, #23
 8012fe6:	d547      	bpl.n	8013078 <_printf_float+0xc4>
 8012fe8:	189b      	adds	r3, r3, r2
 8012fea:	4393      	bics	r3, r2
 8012fec:	001a      	movs	r2, r3
 8012fee:	3208      	adds	r2, #8
 8012ff0:	602a      	str	r2, [r5, #0]
 8012ff2:	681a      	ldr	r2, [r3, #0]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	64a2      	str	r2, [r4, #72]	; 0x48
 8012ff8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012ffe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013000:	930b      	str	r3, [sp, #44]	; 0x2c
 8013002:	006b      	lsls	r3, r5, #1
 8013004:	085b      	lsrs	r3, r3, #1
 8013006:	930f      	str	r3, [sp, #60]	; 0x3c
 8013008:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801300a:	4ba7      	ldr	r3, [pc, #668]	; (80132a8 <_printf_float+0x2f4>)
 801300c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801300e:	4252      	negs	r2, r2
 8013010:	f7ee ff86 	bl	8001f20 <__aeabi_dcmpun>
 8013014:	2800      	cmp	r0, #0
 8013016:	d131      	bne.n	801307c <_printf_float+0xc8>
 8013018:	2201      	movs	r2, #1
 801301a:	4ba3      	ldr	r3, [pc, #652]	; (80132a8 <_printf_float+0x2f4>)
 801301c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801301e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013020:	4252      	negs	r2, r2
 8013022:	f7ed fa23 	bl	800046c <__aeabi_dcmple>
 8013026:	2800      	cmp	r0, #0
 8013028:	d128      	bne.n	801307c <_printf_float+0xc8>
 801302a:	2200      	movs	r2, #0
 801302c:	2300      	movs	r3, #0
 801302e:	0029      	movs	r1, r5
 8013030:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013032:	f7ed fa11 	bl	8000458 <__aeabi_dcmplt>
 8013036:	2800      	cmp	r0, #0
 8013038:	d003      	beq.n	8013042 <_printf_float+0x8e>
 801303a:	0023      	movs	r3, r4
 801303c:	222d      	movs	r2, #45	; 0x2d
 801303e:	3343      	adds	r3, #67	; 0x43
 8013040:	701a      	strb	r2, [r3, #0]
 8013042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013044:	4d99      	ldr	r5, [pc, #612]	; (80132ac <_printf_float+0x2f8>)
 8013046:	2b47      	cmp	r3, #71	; 0x47
 8013048:	d900      	bls.n	801304c <_printf_float+0x98>
 801304a:	4d99      	ldr	r5, [pc, #612]	; (80132b0 <_printf_float+0x2fc>)
 801304c:	2303      	movs	r3, #3
 801304e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013050:	6123      	str	r3, [r4, #16]
 8013052:	3301      	adds	r3, #1
 8013054:	439a      	bics	r2, r3
 8013056:	2300      	movs	r3, #0
 8013058:	6022      	str	r2, [r4, #0]
 801305a:	930b      	str	r3, [sp, #44]	; 0x2c
 801305c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801305e:	0021      	movs	r1, r4
 8013060:	0038      	movs	r0, r7
 8013062:	9600      	str	r6, [sp, #0]
 8013064:	aa13      	add	r2, sp, #76	; 0x4c
 8013066:	f000 f9e7 	bl	8013438 <_printf_common>
 801306a:	1c43      	adds	r3, r0, #1
 801306c:	d000      	beq.n	8013070 <_printf_float+0xbc>
 801306e:	e0a2      	b.n	80131b6 <_printf_float+0x202>
 8013070:	2001      	movs	r0, #1
 8013072:	4240      	negs	r0, r0
 8013074:	b015      	add	sp, #84	; 0x54
 8013076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013078:	3307      	adds	r3, #7
 801307a:	e7b6      	b.n	8012fea <_printf_float+0x36>
 801307c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801307e:	002b      	movs	r3, r5
 8013080:	0010      	movs	r0, r2
 8013082:	0029      	movs	r1, r5
 8013084:	f7ee ff4c 	bl	8001f20 <__aeabi_dcmpun>
 8013088:	2800      	cmp	r0, #0
 801308a:	d00b      	beq.n	80130a4 <_printf_float+0xf0>
 801308c:	2d00      	cmp	r5, #0
 801308e:	da03      	bge.n	8013098 <_printf_float+0xe4>
 8013090:	0023      	movs	r3, r4
 8013092:	222d      	movs	r2, #45	; 0x2d
 8013094:	3343      	adds	r3, #67	; 0x43
 8013096:	701a      	strb	r2, [r3, #0]
 8013098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801309a:	4d86      	ldr	r5, [pc, #536]	; (80132b4 <_printf_float+0x300>)
 801309c:	2b47      	cmp	r3, #71	; 0x47
 801309e:	d9d5      	bls.n	801304c <_printf_float+0x98>
 80130a0:	4d85      	ldr	r5, [pc, #532]	; (80132b8 <_printf_float+0x304>)
 80130a2:	e7d3      	b.n	801304c <_printf_float+0x98>
 80130a4:	2220      	movs	r2, #32
 80130a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80130a8:	6863      	ldr	r3, [r4, #4]
 80130aa:	4391      	bics	r1, r2
 80130ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80130ae:	1c5a      	adds	r2, r3, #1
 80130b0:	d149      	bne.n	8013146 <_printf_float+0x192>
 80130b2:	3307      	adds	r3, #7
 80130b4:	6063      	str	r3, [r4, #4]
 80130b6:	2380      	movs	r3, #128	; 0x80
 80130b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	4313      	orrs	r3, r2
 80130be:	2200      	movs	r2, #0
 80130c0:	9206      	str	r2, [sp, #24]
 80130c2:	aa12      	add	r2, sp, #72	; 0x48
 80130c4:	9205      	str	r2, [sp, #20]
 80130c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130c8:	a908      	add	r1, sp, #32
 80130ca:	9204      	str	r2, [sp, #16]
 80130cc:	aa11      	add	r2, sp, #68	; 0x44
 80130ce:	9203      	str	r2, [sp, #12]
 80130d0:	2223      	movs	r2, #35	; 0x23
 80130d2:	6023      	str	r3, [r4, #0]
 80130d4:	9301      	str	r3, [sp, #4]
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	1852      	adds	r2, r2, r1
 80130da:	9202      	str	r2, [sp, #8]
 80130dc:	9300      	str	r3, [sp, #0]
 80130de:	0038      	movs	r0, r7
 80130e0:	002b      	movs	r3, r5
 80130e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130e4:	f7ff febb 	bl	8012e5e <__cvt>
 80130e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130ea:	0005      	movs	r5, r0
 80130ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80130ee:	2b47      	cmp	r3, #71	; 0x47
 80130f0:	d108      	bne.n	8013104 <_printf_float+0x150>
 80130f2:	1ccb      	adds	r3, r1, #3
 80130f4:	db02      	blt.n	80130fc <_printf_float+0x148>
 80130f6:	6863      	ldr	r3, [r4, #4]
 80130f8:	4299      	cmp	r1, r3
 80130fa:	dd48      	ble.n	801318e <_printf_float+0x1da>
 80130fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130fe:	3b02      	subs	r3, #2
 8013100:	b2db      	uxtb	r3, r3
 8013102:	930a      	str	r3, [sp, #40]	; 0x28
 8013104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013106:	2b65      	cmp	r3, #101	; 0x65
 8013108:	d824      	bhi.n	8013154 <_printf_float+0x1a0>
 801310a:	0020      	movs	r0, r4
 801310c:	001a      	movs	r2, r3
 801310e:	3901      	subs	r1, #1
 8013110:	3050      	adds	r0, #80	; 0x50
 8013112:	9111      	str	r1, [sp, #68]	; 0x44
 8013114:	f7ff ff06 	bl	8012f24 <__exponent>
 8013118:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801311a:	900b      	str	r0, [sp, #44]	; 0x2c
 801311c:	1813      	adds	r3, r2, r0
 801311e:	6123      	str	r3, [r4, #16]
 8013120:	2a01      	cmp	r2, #1
 8013122:	dc02      	bgt.n	801312a <_printf_float+0x176>
 8013124:	6822      	ldr	r2, [r4, #0]
 8013126:	07d2      	lsls	r2, r2, #31
 8013128:	d501      	bpl.n	801312e <_printf_float+0x17a>
 801312a:	3301      	adds	r3, #1
 801312c:	6123      	str	r3, [r4, #16]
 801312e:	2323      	movs	r3, #35	; 0x23
 8013130:	aa08      	add	r2, sp, #32
 8013132:	189b      	adds	r3, r3, r2
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d100      	bne.n	801313c <_printf_float+0x188>
 801313a:	e78f      	b.n	801305c <_printf_float+0xa8>
 801313c:	0023      	movs	r3, r4
 801313e:	222d      	movs	r2, #45	; 0x2d
 8013140:	3343      	adds	r3, #67	; 0x43
 8013142:	701a      	strb	r2, [r3, #0]
 8013144:	e78a      	b.n	801305c <_printf_float+0xa8>
 8013146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013148:	2a47      	cmp	r2, #71	; 0x47
 801314a:	d1b4      	bne.n	80130b6 <_printf_float+0x102>
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1b2      	bne.n	80130b6 <_printf_float+0x102>
 8013150:	3301      	adds	r3, #1
 8013152:	e7af      	b.n	80130b4 <_printf_float+0x100>
 8013154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013156:	2b66      	cmp	r3, #102	; 0x66
 8013158:	d11b      	bne.n	8013192 <_printf_float+0x1de>
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	2900      	cmp	r1, #0
 801315e:	dd0d      	ble.n	801317c <_printf_float+0x1c8>
 8013160:	6121      	str	r1, [r4, #16]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d102      	bne.n	801316c <_printf_float+0x1b8>
 8013166:	6822      	ldr	r2, [r4, #0]
 8013168:	07d2      	lsls	r2, r2, #31
 801316a:	d502      	bpl.n	8013172 <_printf_float+0x1be>
 801316c:	3301      	adds	r3, #1
 801316e:	1859      	adds	r1, r3, r1
 8013170:	6121      	str	r1, [r4, #16]
 8013172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013174:	65a3      	str	r3, [r4, #88]	; 0x58
 8013176:	2300      	movs	r3, #0
 8013178:	930b      	str	r3, [sp, #44]	; 0x2c
 801317a:	e7d8      	b.n	801312e <_printf_float+0x17a>
 801317c:	2b00      	cmp	r3, #0
 801317e:	d103      	bne.n	8013188 <_printf_float+0x1d4>
 8013180:	2201      	movs	r2, #1
 8013182:	6821      	ldr	r1, [r4, #0]
 8013184:	4211      	tst	r1, r2
 8013186:	d000      	beq.n	801318a <_printf_float+0x1d6>
 8013188:	1c9a      	adds	r2, r3, #2
 801318a:	6122      	str	r2, [r4, #16]
 801318c:	e7f1      	b.n	8013172 <_printf_float+0x1be>
 801318e:	2367      	movs	r3, #103	; 0x67
 8013190:	930a      	str	r3, [sp, #40]	; 0x28
 8013192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013196:	4293      	cmp	r3, r2
 8013198:	db06      	blt.n	80131a8 <_printf_float+0x1f4>
 801319a:	6822      	ldr	r2, [r4, #0]
 801319c:	6123      	str	r3, [r4, #16]
 801319e:	07d2      	lsls	r2, r2, #31
 80131a0:	d5e7      	bpl.n	8013172 <_printf_float+0x1be>
 80131a2:	3301      	adds	r3, #1
 80131a4:	6123      	str	r3, [r4, #16]
 80131a6:	e7e4      	b.n	8013172 <_printf_float+0x1be>
 80131a8:	2101      	movs	r1, #1
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	dc01      	bgt.n	80131b2 <_printf_float+0x1fe>
 80131ae:	1849      	adds	r1, r1, r1
 80131b0:	1ac9      	subs	r1, r1, r3
 80131b2:	1852      	adds	r2, r2, r1
 80131b4:	e7e9      	b.n	801318a <_printf_float+0x1d6>
 80131b6:	6822      	ldr	r2, [r4, #0]
 80131b8:	0553      	lsls	r3, r2, #21
 80131ba:	d407      	bmi.n	80131cc <_printf_float+0x218>
 80131bc:	6923      	ldr	r3, [r4, #16]
 80131be:	002a      	movs	r2, r5
 80131c0:	0038      	movs	r0, r7
 80131c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131c4:	47b0      	blx	r6
 80131c6:	1c43      	adds	r3, r0, #1
 80131c8:	d128      	bne.n	801321c <_printf_float+0x268>
 80131ca:	e751      	b.n	8013070 <_printf_float+0xbc>
 80131cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ce:	2b65      	cmp	r3, #101	; 0x65
 80131d0:	d800      	bhi.n	80131d4 <_printf_float+0x220>
 80131d2:	e0e1      	b.n	8013398 <_printf_float+0x3e4>
 80131d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80131d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80131d8:	2200      	movs	r2, #0
 80131da:	2300      	movs	r3, #0
 80131dc:	f7ed f936 	bl	800044c <__aeabi_dcmpeq>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d031      	beq.n	8013248 <_printf_float+0x294>
 80131e4:	2301      	movs	r3, #1
 80131e6:	0038      	movs	r0, r7
 80131e8:	4a34      	ldr	r2, [pc, #208]	; (80132bc <_printf_float+0x308>)
 80131ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131ec:	47b0      	blx	r6
 80131ee:	1c43      	adds	r3, r0, #1
 80131f0:	d100      	bne.n	80131f4 <_printf_float+0x240>
 80131f2:	e73d      	b.n	8013070 <_printf_float+0xbc>
 80131f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80131f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80131f8:	4293      	cmp	r3, r2
 80131fa:	db02      	blt.n	8013202 <_printf_float+0x24e>
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	07db      	lsls	r3, r3, #31
 8013200:	d50c      	bpl.n	801321c <_printf_float+0x268>
 8013202:	0038      	movs	r0, r7
 8013204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013208:	9909      	ldr	r1, [sp, #36]	; 0x24
 801320a:	47b0      	blx	r6
 801320c:	2500      	movs	r5, #0
 801320e:	1c43      	adds	r3, r0, #1
 8013210:	d100      	bne.n	8013214 <_printf_float+0x260>
 8013212:	e72d      	b.n	8013070 <_printf_float+0xbc>
 8013214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013216:	3b01      	subs	r3, #1
 8013218:	42ab      	cmp	r3, r5
 801321a:	dc0a      	bgt.n	8013232 <_printf_float+0x27e>
 801321c:	6823      	ldr	r3, [r4, #0]
 801321e:	079b      	lsls	r3, r3, #30
 8013220:	d500      	bpl.n	8013224 <_printf_float+0x270>
 8013222:	e106      	b.n	8013432 <_printf_float+0x47e>
 8013224:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013226:	68e0      	ldr	r0, [r4, #12]
 8013228:	4298      	cmp	r0, r3
 801322a:	db00      	blt.n	801322e <_printf_float+0x27a>
 801322c:	e722      	b.n	8013074 <_printf_float+0xc0>
 801322e:	0018      	movs	r0, r3
 8013230:	e720      	b.n	8013074 <_printf_float+0xc0>
 8013232:	0022      	movs	r2, r4
 8013234:	2301      	movs	r3, #1
 8013236:	0038      	movs	r0, r7
 8013238:	9909      	ldr	r1, [sp, #36]	; 0x24
 801323a:	321a      	adds	r2, #26
 801323c:	47b0      	blx	r6
 801323e:	1c43      	adds	r3, r0, #1
 8013240:	d100      	bne.n	8013244 <_printf_float+0x290>
 8013242:	e715      	b.n	8013070 <_printf_float+0xbc>
 8013244:	3501      	adds	r5, #1
 8013246:	e7e5      	b.n	8013214 <_printf_float+0x260>
 8013248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801324a:	2b00      	cmp	r3, #0
 801324c:	dc38      	bgt.n	80132c0 <_printf_float+0x30c>
 801324e:	2301      	movs	r3, #1
 8013250:	0038      	movs	r0, r7
 8013252:	4a1a      	ldr	r2, [pc, #104]	; (80132bc <_printf_float+0x308>)
 8013254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013256:	47b0      	blx	r6
 8013258:	1c43      	adds	r3, r0, #1
 801325a:	d100      	bne.n	801325e <_printf_float+0x2aa>
 801325c:	e708      	b.n	8013070 <_printf_float+0xbc>
 801325e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013262:	4313      	orrs	r3, r2
 8013264:	d102      	bne.n	801326c <_printf_float+0x2b8>
 8013266:	6823      	ldr	r3, [r4, #0]
 8013268:	07db      	lsls	r3, r3, #31
 801326a:	d5d7      	bpl.n	801321c <_printf_float+0x268>
 801326c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801326e:	0038      	movs	r0, r7
 8013270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013272:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013274:	47b0      	blx	r6
 8013276:	1c43      	adds	r3, r0, #1
 8013278:	d100      	bne.n	801327c <_printf_float+0x2c8>
 801327a:	e6f9      	b.n	8013070 <_printf_float+0xbc>
 801327c:	2300      	movs	r3, #0
 801327e:	930a      	str	r3, [sp, #40]	; 0x28
 8013280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013284:	425b      	negs	r3, r3
 8013286:	4293      	cmp	r3, r2
 8013288:	dc01      	bgt.n	801328e <_printf_float+0x2da>
 801328a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801328c:	e797      	b.n	80131be <_printf_float+0x20a>
 801328e:	0022      	movs	r2, r4
 8013290:	2301      	movs	r3, #1
 8013292:	0038      	movs	r0, r7
 8013294:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013296:	321a      	adds	r2, #26
 8013298:	47b0      	blx	r6
 801329a:	1c43      	adds	r3, r0, #1
 801329c:	d100      	bne.n	80132a0 <_printf_float+0x2ec>
 801329e:	e6e7      	b.n	8013070 <_printf_float+0xbc>
 80132a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132a2:	3301      	adds	r3, #1
 80132a4:	e7eb      	b.n	801327e <_printf_float+0x2ca>
 80132a6:	46c0      	nop			; (mov r8, r8)
 80132a8:	7fefffff 	.word	0x7fefffff
 80132ac:	08016af0 	.word	0x08016af0
 80132b0:	08016af4 	.word	0x08016af4
 80132b4:	08016af8 	.word	0x08016af8
 80132b8:	08016afc 	.word	0x08016afc
 80132bc:	08016b00 	.word	0x08016b00
 80132c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132c4:	920a      	str	r2, [sp, #40]	; 0x28
 80132c6:	429a      	cmp	r2, r3
 80132c8:	dd00      	ble.n	80132cc <_printf_float+0x318>
 80132ca:	930a      	str	r3, [sp, #40]	; 0x28
 80132cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dc3c      	bgt.n	801334c <_printf_float+0x398>
 80132d2:	2300      	movs	r3, #0
 80132d4:	930d      	str	r3, [sp, #52]	; 0x34
 80132d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132d8:	43db      	mvns	r3, r3
 80132da:	17db      	asrs	r3, r3, #31
 80132dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80132de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80132e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80132e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132e6:	4013      	ands	r3, r2
 80132e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132ee:	4293      	cmp	r3, r2
 80132f0:	dc34      	bgt.n	801335c <_printf_float+0x3a8>
 80132f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132f6:	4293      	cmp	r3, r2
 80132f8:	db3d      	blt.n	8013376 <_printf_float+0x3c2>
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	07db      	lsls	r3, r3, #31
 80132fe:	d43a      	bmi.n	8013376 <_printf_float+0x3c2>
 8013300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013304:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013306:	1ad3      	subs	r3, r2, r3
 8013308:	1a52      	subs	r2, r2, r1
 801330a:	920a      	str	r2, [sp, #40]	; 0x28
 801330c:	429a      	cmp	r2, r3
 801330e:	dd00      	ble.n	8013312 <_printf_float+0x35e>
 8013310:	930a      	str	r3, [sp, #40]	; 0x28
 8013312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013314:	2b00      	cmp	r3, #0
 8013316:	dc36      	bgt.n	8013386 <_printf_float+0x3d2>
 8013318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801331a:	2500      	movs	r5, #0
 801331c:	43db      	mvns	r3, r3
 801331e:	17db      	asrs	r3, r3, #31
 8013320:	930b      	str	r3, [sp, #44]	; 0x2c
 8013322:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013326:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013328:	1a9b      	subs	r3, r3, r2
 801332a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801332c:	400a      	ands	r2, r1
 801332e:	1a9b      	subs	r3, r3, r2
 8013330:	42ab      	cmp	r3, r5
 8013332:	dc00      	bgt.n	8013336 <_printf_float+0x382>
 8013334:	e772      	b.n	801321c <_printf_float+0x268>
 8013336:	0022      	movs	r2, r4
 8013338:	2301      	movs	r3, #1
 801333a:	0038      	movs	r0, r7
 801333c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801333e:	321a      	adds	r2, #26
 8013340:	47b0      	blx	r6
 8013342:	1c43      	adds	r3, r0, #1
 8013344:	d100      	bne.n	8013348 <_printf_float+0x394>
 8013346:	e693      	b.n	8013070 <_printf_float+0xbc>
 8013348:	3501      	adds	r5, #1
 801334a:	e7ea      	b.n	8013322 <_printf_float+0x36e>
 801334c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801334e:	002a      	movs	r2, r5
 8013350:	0038      	movs	r0, r7
 8013352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013354:	47b0      	blx	r6
 8013356:	1c43      	adds	r3, r0, #1
 8013358:	d1bb      	bne.n	80132d2 <_printf_float+0x31e>
 801335a:	e689      	b.n	8013070 <_printf_float+0xbc>
 801335c:	0022      	movs	r2, r4
 801335e:	2301      	movs	r3, #1
 8013360:	0038      	movs	r0, r7
 8013362:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013364:	321a      	adds	r2, #26
 8013366:	47b0      	blx	r6
 8013368:	1c43      	adds	r3, r0, #1
 801336a:	d100      	bne.n	801336e <_printf_float+0x3ba>
 801336c:	e680      	b.n	8013070 <_printf_float+0xbc>
 801336e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013370:	3301      	adds	r3, #1
 8013372:	930d      	str	r3, [sp, #52]	; 0x34
 8013374:	e7b3      	b.n	80132de <_printf_float+0x32a>
 8013376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013378:	0038      	movs	r0, r7
 801337a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801337c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801337e:	47b0      	blx	r6
 8013380:	1c43      	adds	r3, r0, #1
 8013382:	d1bd      	bne.n	8013300 <_printf_float+0x34c>
 8013384:	e674      	b.n	8013070 <_printf_float+0xbc>
 8013386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013388:	0038      	movs	r0, r7
 801338a:	18ea      	adds	r2, r5, r3
 801338c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801338e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013390:	47b0      	blx	r6
 8013392:	1c43      	adds	r3, r0, #1
 8013394:	d1c0      	bne.n	8013318 <_printf_float+0x364>
 8013396:	e66b      	b.n	8013070 <_printf_float+0xbc>
 8013398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801339a:	2b01      	cmp	r3, #1
 801339c:	dc02      	bgt.n	80133a4 <_printf_float+0x3f0>
 801339e:	2301      	movs	r3, #1
 80133a0:	421a      	tst	r2, r3
 80133a2:	d034      	beq.n	801340e <_printf_float+0x45a>
 80133a4:	2301      	movs	r3, #1
 80133a6:	002a      	movs	r2, r5
 80133a8:	0038      	movs	r0, r7
 80133aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ac:	47b0      	blx	r6
 80133ae:	1c43      	adds	r3, r0, #1
 80133b0:	d100      	bne.n	80133b4 <_printf_float+0x400>
 80133b2:	e65d      	b.n	8013070 <_printf_float+0xbc>
 80133b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133b6:	0038      	movs	r0, r7
 80133b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133bc:	47b0      	blx	r6
 80133be:	1c43      	adds	r3, r0, #1
 80133c0:	d100      	bne.n	80133c4 <_printf_float+0x410>
 80133c2:	e655      	b.n	8013070 <_printf_float+0xbc>
 80133c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80133c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80133c8:	2200      	movs	r2, #0
 80133ca:	2300      	movs	r3, #0
 80133cc:	f7ed f83e 	bl	800044c <__aeabi_dcmpeq>
 80133d0:	2800      	cmp	r0, #0
 80133d2:	d11a      	bne.n	801340a <_printf_float+0x456>
 80133d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133d6:	1c6a      	adds	r2, r5, #1
 80133d8:	3b01      	subs	r3, #1
 80133da:	0038      	movs	r0, r7
 80133dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133de:	47b0      	blx	r6
 80133e0:	1c43      	adds	r3, r0, #1
 80133e2:	d10e      	bne.n	8013402 <_printf_float+0x44e>
 80133e4:	e644      	b.n	8013070 <_printf_float+0xbc>
 80133e6:	0022      	movs	r2, r4
 80133e8:	2301      	movs	r3, #1
 80133ea:	0038      	movs	r0, r7
 80133ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ee:	321a      	adds	r2, #26
 80133f0:	47b0      	blx	r6
 80133f2:	1c43      	adds	r3, r0, #1
 80133f4:	d100      	bne.n	80133f8 <_printf_float+0x444>
 80133f6:	e63b      	b.n	8013070 <_printf_float+0xbc>
 80133f8:	3501      	adds	r5, #1
 80133fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80133fc:	3b01      	subs	r3, #1
 80133fe:	42ab      	cmp	r3, r5
 8013400:	dcf1      	bgt.n	80133e6 <_printf_float+0x432>
 8013402:	0022      	movs	r2, r4
 8013404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013406:	3250      	adds	r2, #80	; 0x50
 8013408:	e6da      	b.n	80131c0 <_printf_float+0x20c>
 801340a:	2500      	movs	r5, #0
 801340c:	e7f5      	b.n	80133fa <_printf_float+0x446>
 801340e:	002a      	movs	r2, r5
 8013410:	e7e3      	b.n	80133da <_printf_float+0x426>
 8013412:	0022      	movs	r2, r4
 8013414:	2301      	movs	r3, #1
 8013416:	0038      	movs	r0, r7
 8013418:	9909      	ldr	r1, [sp, #36]	; 0x24
 801341a:	3219      	adds	r2, #25
 801341c:	47b0      	blx	r6
 801341e:	1c43      	adds	r3, r0, #1
 8013420:	d100      	bne.n	8013424 <_printf_float+0x470>
 8013422:	e625      	b.n	8013070 <_printf_float+0xbc>
 8013424:	3501      	adds	r5, #1
 8013426:	68e3      	ldr	r3, [r4, #12]
 8013428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	42ab      	cmp	r3, r5
 801342e:	dcf0      	bgt.n	8013412 <_printf_float+0x45e>
 8013430:	e6f8      	b.n	8013224 <_printf_float+0x270>
 8013432:	2500      	movs	r5, #0
 8013434:	e7f7      	b.n	8013426 <_printf_float+0x472>
 8013436:	46c0      	nop			; (mov r8, r8)

08013438 <_printf_common>:
 8013438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801343a:	0015      	movs	r5, r2
 801343c:	9301      	str	r3, [sp, #4]
 801343e:	688a      	ldr	r2, [r1, #8]
 8013440:	690b      	ldr	r3, [r1, #16]
 8013442:	000c      	movs	r4, r1
 8013444:	9000      	str	r0, [sp, #0]
 8013446:	4293      	cmp	r3, r2
 8013448:	da00      	bge.n	801344c <_printf_common+0x14>
 801344a:	0013      	movs	r3, r2
 801344c:	0022      	movs	r2, r4
 801344e:	602b      	str	r3, [r5, #0]
 8013450:	3243      	adds	r2, #67	; 0x43
 8013452:	7812      	ldrb	r2, [r2, #0]
 8013454:	2a00      	cmp	r2, #0
 8013456:	d001      	beq.n	801345c <_printf_common+0x24>
 8013458:	3301      	adds	r3, #1
 801345a:	602b      	str	r3, [r5, #0]
 801345c:	6823      	ldr	r3, [r4, #0]
 801345e:	069b      	lsls	r3, r3, #26
 8013460:	d502      	bpl.n	8013468 <_printf_common+0x30>
 8013462:	682b      	ldr	r3, [r5, #0]
 8013464:	3302      	adds	r3, #2
 8013466:	602b      	str	r3, [r5, #0]
 8013468:	6822      	ldr	r2, [r4, #0]
 801346a:	2306      	movs	r3, #6
 801346c:	0017      	movs	r7, r2
 801346e:	401f      	ands	r7, r3
 8013470:	421a      	tst	r2, r3
 8013472:	d027      	beq.n	80134c4 <_printf_common+0x8c>
 8013474:	0023      	movs	r3, r4
 8013476:	3343      	adds	r3, #67	; 0x43
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	1e5a      	subs	r2, r3, #1
 801347c:	4193      	sbcs	r3, r2
 801347e:	6822      	ldr	r2, [r4, #0]
 8013480:	0692      	lsls	r2, r2, #26
 8013482:	d430      	bmi.n	80134e6 <_printf_common+0xae>
 8013484:	0022      	movs	r2, r4
 8013486:	9901      	ldr	r1, [sp, #4]
 8013488:	9800      	ldr	r0, [sp, #0]
 801348a:	9e08      	ldr	r6, [sp, #32]
 801348c:	3243      	adds	r2, #67	; 0x43
 801348e:	47b0      	blx	r6
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d025      	beq.n	80134e0 <_printf_common+0xa8>
 8013494:	2306      	movs	r3, #6
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	682a      	ldr	r2, [r5, #0]
 801349a:	68e1      	ldr	r1, [r4, #12]
 801349c:	2500      	movs	r5, #0
 801349e:	4003      	ands	r3, r0
 80134a0:	2b04      	cmp	r3, #4
 80134a2:	d103      	bne.n	80134ac <_printf_common+0x74>
 80134a4:	1a8d      	subs	r5, r1, r2
 80134a6:	43eb      	mvns	r3, r5
 80134a8:	17db      	asrs	r3, r3, #31
 80134aa:	401d      	ands	r5, r3
 80134ac:	68a3      	ldr	r3, [r4, #8]
 80134ae:	6922      	ldr	r2, [r4, #16]
 80134b0:	4293      	cmp	r3, r2
 80134b2:	dd01      	ble.n	80134b8 <_printf_common+0x80>
 80134b4:	1a9b      	subs	r3, r3, r2
 80134b6:	18ed      	adds	r5, r5, r3
 80134b8:	2700      	movs	r7, #0
 80134ba:	42bd      	cmp	r5, r7
 80134bc:	d120      	bne.n	8013500 <_printf_common+0xc8>
 80134be:	2000      	movs	r0, #0
 80134c0:	e010      	b.n	80134e4 <_printf_common+0xac>
 80134c2:	3701      	adds	r7, #1
 80134c4:	68e3      	ldr	r3, [r4, #12]
 80134c6:	682a      	ldr	r2, [r5, #0]
 80134c8:	1a9b      	subs	r3, r3, r2
 80134ca:	42bb      	cmp	r3, r7
 80134cc:	ddd2      	ble.n	8013474 <_printf_common+0x3c>
 80134ce:	0022      	movs	r2, r4
 80134d0:	2301      	movs	r3, #1
 80134d2:	9901      	ldr	r1, [sp, #4]
 80134d4:	9800      	ldr	r0, [sp, #0]
 80134d6:	9e08      	ldr	r6, [sp, #32]
 80134d8:	3219      	adds	r2, #25
 80134da:	47b0      	blx	r6
 80134dc:	1c43      	adds	r3, r0, #1
 80134de:	d1f0      	bne.n	80134c2 <_printf_common+0x8a>
 80134e0:	2001      	movs	r0, #1
 80134e2:	4240      	negs	r0, r0
 80134e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80134e6:	2030      	movs	r0, #48	; 0x30
 80134e8:	18e1      	adds	r1, r4, r3
 80134ea:	3143      	adds	r1, #67	; 0x43
 80134ec:	7008      	strb	r0, [r1, #0]
 80134ee:	0021      	movs	r1, r4
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	3145      	adds	r1, #69	; 0x45
 80134f4:	7809      	ldrb	r1, [r1, #0]
 80134f6:	18a2      	adds	r2, r4, r2
 80134f8:	3243      	adds	r2, #67	; 0x43
 80134fa:	3302      	adds	r3, #2
 80134fc:	7011      	strb	r1, [r2, #0]
 80134fe:	e7c1      	b.n	8013484 <_printf_common+0x4c>
 8013500:	0022      	movs	r2, r4
 8013502:	2301      	movs	r3, #1
 8013504:	9901      	ldr	r1, [sp, #4]
 8013506:	9800      	ldr	r0, [sp, #0]
 8013508:	9e08      	ldr	r6, [sp, #32]
 801350a:	321a      	adds	r2, #26
 801350c:	47b0      	blx	r6
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	d0e6      	beq.n	80134e0 <_printf_common+0xa8>
 8013512:	3701      	adds	r7, #1
 8013514:	e7d1      	b.n	80134ba <_printf_common+0x82>
	...

08013518 <_printf_i>:
 8013518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801351a:	b08b      	sub	sp, #44	; 0x2c
 801351c:	9206      	str	r2, [sp, #24]
 801351e:	000a      	movs	r2, r1
 8013520:	3243      	adds	r2, #67	; 0x43
 8013522:	9307      	str	r3, [sp, #28]
 8013524:	9005      	str	r0, [sp, #20]
 8013526:	9204      	str	r2, [sp, #16]
 8013528:	7e0a      	ldrb	r2, [r1, #24]
 801352a:	000c      	movs	r4, r1
 801352c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801352e:	2a78      	cmp	r2, #120	; 0x78
 8013530:	d807      	bhi.n	8013542 <_printf_i+0x2a>
 8013532:	2a62      	cmp	r2, #98	; 0x62
 8013534:	d809      	bhi.n	801354a <_printf_i+0x32>
 8013536:	2a00      	cmp	r2, #0
 8013538:	d100      	bne.n	801353c <_printf_i+0x24>
 801353a:	e0c1      	b.n	80136c0 <_printf_i+0x1a8>
 801353c:	2a58      	cmp	r2, #88	; 0x58
 801353e:	d100      	bne.n	8013542 <_printf_i+0x2a>
 8013540:	e08c      	b.n	801365c <_printf_i+0x144>
 8013542:	0026      	movs	r6, r4
 8013544:	3642      	adds	r6, #66	; 0x42
 8013546:	7032      	strb	r2, [r6, #0]
 8013548:	e022      	b.n	8013590 <_printf_i+0x78>
 801354a:	0010      	movs	r0, r2
 801354c:	3863      	subs	r0, #99	; 0x63
 801354e:	2815      	cmp	r0, #21
 8013550:	d8f7      	bhi.n	8013542 <_printf_i+0x2a>
 8013552:	f7ec fdeb 	bl	800012c <__gnu_thumb1_case_shi>
 8013556:	0016      	.short	0x0016
 8013558:	fff6001f 	.word	0xfff6001f
 801355c:	fff6fff6 	.word	0xfff6fff6
 8013560:	001ffff6 	.word	0x001ffff6
 8013564:	fff6fff6 	.word	0xfff6fff6
 8013568:	fff6fff6 	.word	0xfff6fff6
 801356c:	003600a8 	.word	0x003600a8
 8013570:	fff6009a 	.word	0xfff6009a
 8013574:	00b9fff6 	.word	0x00b9fff6
 8013578:	0036fff6 	.word	0x0036fff6
 801357c:	fff6fff6 	.word	0xfff6fff6
 8013580:	009e      	.short	0x009e
 8013582:	0026      	movs	r6, r4
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	3642      	adds	r6, #66	; 0x42
 8013588:	1d11      	adds	r1, r2, #4
 801358a:	6019      	str	r1, [r3, #0]
 801358c:	6813      	ldr	r3, [r2, #0]
 801358e:	7033      	strb	r3, [r6, #0]
 8013590:	2301      	movs	r3, #1
 8013592:	e0a7      	b.n	80136e4 <_printf_i+0x1cc>
 8013594:	6808      	ldr	r0, [r1, #0]
 8013596:	6819      	ldr	r1, [r3, #0]
 8013598:	1d0a      	adds	r2, r1, #4
 801359a:	0605      	lsls	r5, r0, #24
 801359c:	d50b      	bpl.n	80135b6 <_printf_i+0x9e>
 801359e:	680d      	ldr	r5, [r1, #0]
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	2d00      	cmp	r5, #0
 80135a4:	da03      	bge.n	80135ae <_printf_i+0x96>
 80135a6:	232d      	movs	r3, #45	; 0x2d
 80135a8:	9a04      	ldr	r2, [sp, #16]
 80135aa:	426d      	negs	r5, r5
 80135ac:	7013      	strb	r3, [r2, #0]
 80135ae:	4b61      	ldr	r3, [pc, #388]	; (8013734 <_printf_i+0x21c>)
 80135b0:	270a      	movs	r7, #10
 80135b2:	9303      	str	r3, [sp, #12]
 80135b4:	e01b      	b.n	80135ee <_printf_i+0xd6>
 80135b6:	680d      	ldr	r5, [r1, #0]
 80135b8:	601a      	str	r2, [r3, #0]
 80135ba:	0641      	lsls	r1, r0, #25
 80135bc:	d5f1      	bpl.n	80135a2 <_printf_i+0x8a>
 80135be:	b22d      	sxth	r5, r5
 80135c0:	e7ef      	b.n	80135a2 <_printf_i+0x8a>
 80135c2:	680d      	ldr	r5, [r1, #0]
 80135c4:	6819      	ldr	r1, [r3, #0]
 80135c6:	1d08      	adds	r0, r1, #4
 80135c8:	6018      	str	r0, [r3, #0]
 80135ca:	062e      	lsls	r6, r5, #24
 80135cc:	d501      	bpl.n	80135d2 <_printf_i+0xba>
 80135ce:	680d      	ldr	r5, [r1, #0]
 80135d0:	e003      	b.n	80135da <_printf_i+0xc2>
 80135d2:	066d      	lsls	r5, r5, #25
 80135d4:	d5fb      	bpl.n	80135ce <_printf_i+0xb6>
 80135d6:	680d      	ldr	r5, [r1, #0]
 80135d8:	b2ad      	uxth	r5, r5
 80135da:	4b56      	ldr	r3, [pc, #344]	; (8013734 <_printf_i+0x21c>)
 80135dc:	2708      	movs	r7, #8
 80135de:	9303      	str	r3, [sp, #12]
 80135e0:	2a6f      	cmp	r2, #111	; 0x6f
 80135e2:	d000      	beq.n	80135e6 <_printf_i+0xce>
 80135e4:	3702      	adds	r7, #2
 80135e6:	0023      	movs	r3, r4
 80135e8:	2200      	movs	r2, #0
 80135ea:	3343      	adds	r3, #67	; 0x43
 80135ec:	701a      	strb	r2, [r3, #0]
 80135ee:	6863      	ldr	r3, [r4, #4]
 80135f0:	60a3      	str	r3, [r4, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	db03      	blt.n	80135fe <_printf_i+0xe6>
 80135f6:	2204      	movs	r2, #4
 80135f8:	6821      	ldr	r1, [r4, #0]
 80135fa:	4391      	bics	r1, r2
 80135fc:	6021      	str	r1, [r4, #0]
 80135fe:	2d00      	cmp	r5, #0
 8013600:	d102      	bne.n	8013608 <_printf_i+0xf0>
 8013602:	9e04      	ldr	r6, [sp, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d00c      	beq.n	8013622 <_printf_i+0x10a>
 8013608:	9e04      	ldr	r6, [sp, #16]
 801360a:	0028      	movs	r0, r5
 801360c:	0039      	movs	r1, r7
 801360e:	f7ec fe1d 	bl	800024c <__aeabi_uidivmod>
 8013612:	9b03      	ldr	r3, [sp, #12]
 8013614:	3e01      	subs	r6, #1
 8013616:	5c5b      	ldrb	r3, [r3, r1]
 8013618:	7033      	strb	r3, [r6, #0]
 801361a:	002b      	movs	r3, r5
 801361c:	0005      	movs	r5, r0
 801361e:	429f      	cmp	r7, r3
 8013620:	d9f3      	bls.n	801360a <_printf_i+0xf2>
 8013622:	2f08      	cmp	r7, #8
 8013624:	d109      	bne.n	801363a <_printf_i+0x122>
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	07db      	lsls	r3, r3, #31
 801362a:	d506      	bpl.n	801363a <_printf_i+0x122>
 801362c:	6863      	ldr	r3, [r4, #4]
 801362e:	6922      	ldr	r2, [r4, #16]
 8013630:	4293      	cmp	r3, r2
 8013632:	dc02      	bgt.n	801363a <_printf_i+0x122>
 8013634:	2330      	movs	r3, #48	; 0x30
 8013636:	3e01      	subs	r6, #1
 8013638:	7033      	strb	r3, [r6, #0]
 801363a:	9b04      	ldr	r3, [sp, #16]
 801363c:	1b9b      	subs	r3, r3, r6
 801363e:	6123      	str	r3, [r4, #16]
 8013640:	9b07      	ldr	r3, [sp, #28]
 8013642:	0021      	movs	r1, r4
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	9805      	ldr	r0, [sp, #20]
 8013648:	9b06      	ldr	r3, [sp, #24]
 801364a:	aa09      	add	r2, sp, #36	; 0x24
 801364c:	f7ff fef4 	bl	8013438 <_printf_common>
 8013650:	1c43      	adds	r3, r0, #1
 8013652:	d14c      	bne.n	80136ee <_printf_i+0x1d6>
 8013654:	2001      	movs	r0, #1
 8013656:	4240      	negs	r0, r0
 8013658:	b00b      	add	sp, #44	; 0x2c
 801365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801365c:	3145      	adds	r1, #69	; 0x45
 801365e:	700a      	strb	r2, [r1, #0]
 8013660:	4a34      	ldr	r2, [pc, #208]	; (8013734 <_printf_i+0x21c>)
 8013662:	9203      	str	r2, [sp, #12]
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	6821      	ldr	r1, [r4, #0]
 8013668:	ca20      	ldmia	r2!, {r5}
 801366a:	601a      	str	r2, [r3, #0]
 801366c:	0608      	lsls	r0, r1, #24
 801366e:	d516      	bpl.n	801369e <_printf_i+0x186>
 8013670:	07cb      	lsls	r3, r1, #31
 8013672:	d502      	bpl.n	801367a <_printf_i+0x162>
 8013674:	2320      	movs	r3, #32
 8013676:	4319      	orrs	r1, r3
 8013678:	6021      	str	r1, [r4, #0]
 801367a:	2710      	movs	r7, #16
 801367c:	2d00      	cmp	r5, #0
 801367e:	d1b2      	bne.n	80135e6 <_printf_i+0xce>
 8013680:	2320      	movs	r3, #32
 8013682:	6822      	ldr	r2, [r4, #0]
 8013684:	439a      	bics	r2, r3
 8013686:	6022      	str	r2, [r4, #0]
 8013688:	e7ad      	b.n	80135e6 <_printf_i+0xce>
 801368a:	2220      	movs	r2, #32
 801368c:	6809      	ldr	r1, [r1, #0]
 801368e:	430a      	orrs	r2, r1
 8013690:	6022      	str	r2, [r4, #0]
 8013692:	0022      	movs	r2, r4
 8013694:	2178      	movs	r1, #120	; 0x78
 8013696:	3245      	adds	r2, #69	; 0x45
 8013698:	7011      	strb	r1, [r2, #0]
 801369a:	4a27      	ldr	r2, [pc, #156]	; (8013738 <_printf_i+0x220>)
 801369c:	e7e1      	b.n	8013662 <_printf_i+0x14a>
 801369e:	0648      	lsls	r0, r1, #25
 80136a0:	d5e6      	bpl.n	8013670 <_printf_i+0x158>
 80136a2:	b2ad      	uxth	r5, r5
 80136a4:	e7e4      	b.n	8013670 <_printf_i+0x158>
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	680d      	ldr	r5, [r1, #0]
 80136aa:	1d10      	adds	r0, r2, #4
 80136ac:	6949      	ldr	r1, [r1, #20]
 80136ae:	6018      	str	r0, [r3, #0]
 80136b0:	6813      	ldr	r3, [r2, #0]
 80136b2:	062e      	lsls	r6, r5, #24
 80136b4:	d501      	bpl.n	80136ba <_printf_i+0x1a2>
 80136b6:	6019      	str	r1, [r3, #0]
 80136b8:	e002      	b.n	80136c0 <_printf_i+0x1a8>
 80136ba:	066d      	lsls	r5, r5, #25
 80136bc:	d5fb      	bpl.n	80136b6 <_printf_i+0x19e>
 80136be:	8019      	strh	r1, [r3, #0]
 80136c0:	2300      	movs	r3, #0
 80136c2:	9e04      	ldr	r6, [sp, #16]
 80136c4:	6123      	str	r3, [r4, #16]
 80136c6:	e7bb      	b.n	8013640 <_printf_i+0x128>
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	1d11      	adds	r1, r2, #4
 80136cc:	6019      	str	r1, [r3, #0]
 80136ce:	6816      	ldr	r6, [r2, #0]
 80136d0:	2100      	movs	r1, #0
 80136d2:	0030      	movs	r0, r6
 80136d4:	6862      	ldr	r2, [r4, #4]
 80136d6:	f001 fb7d 	bl	8014dd4 <memchr>
 80136da:	2800      	cmp	r0, #0
 80136dc:	d001      	beq.n	80136e2 <_printf_i+0x1ca>
 80136de:	1b80      	subs	r0, r0, r6
 80136e0:	6060      	str	r0, [r4, #4]
 80136e2:	6863      	ldr	r3, [r4, #4]
 80136e4:	6123      	str	r3, [r4, #16]
 80136e6:	2300      	movs	r3, #0
 80136e8:	9a04      	ldr	r2, [sp, #16]
 80136ea:	7013      	strb	r3, [r2, #0]
 80136ec:	e7a8      	b.n	8013640 <_printf_i+0x128>
 80136ee:	6923      	ldr	r3, [r4, #16]
 80136f0:	0032      	movs	r2, r6
 80136f2:	9906      	ldr	r1, [sp, #24]
 80136f4:	9805      	ldr	r0, [sp, #20]
 80136f6:	9d07      	ldr	r5, [sp, #28]
 80136f8:	47a8      	blx	r5
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	d0aa      	beq.n	8013654 <_printf_i+0x13c>
 80136fe:	6823      	ldr	r3, [r4, #0]
 8013700:	079b      	lsls	r3, r3, #30
 8013702:	d415      	bmi.n	8013730 <_printf_i+0x218>
 8013704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013706:	68e0      	ldr	r0, [r4, #12]
 8013708:	4298      	cmp	r0, r3
 801370a:	daa5      	bge.n	8013658 <_printf_i+0x140>
 801370c:	0018      	movs	r0, r3
 801370e:	e7a3      	b.n	8013658 <_printf_i+0x140>
 8013710:	0022      	movs	r2, r4
 8013712:	2301      	movs	r3, #1
 8013714:	9906      	ldr	r1, [sp, #24]
 8013716:	9805      	ldr	r0, [sp, #20]
 8013718:	9e07      	ldr	r6, [sp, #28]
 801371a:	3219      	adds	r2, #25
 801371c:	47b0      	blx	r6
 801371e:	1c43      	adds	r3, r0, #1
 8013720:	d098      	beq.n	8013654 <_printf_i+0x13c>
 8013722:	3501      	adds	r5, #1
 8013724:	68e3      	ldr	r3, [r4, #12]
 8013726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013728:	1a9b      	subs	r3, r3, r2
 801372a:	42ab      	cmp	r3, r5
 801372c:	dcf0      	bgt.n	8013710 <_printf_i+0x1f8>
 801372e:	e7e9      	b.n	8013704 <_printf_i+0x1ec>
 8013730:	2500      	movs	r5, #0
 8013732:	e7f7      	b.n	8013724 <_printf_i+0x20c>
 8013734:	08016b02 	.word	0x08016b02
 8013738:	08016b13 	.word	0x08016b13

0801373c <iprintf>:
 801373c:	b40f      	push	{r0, r1, r2, r3}
 801373e:	4b0b      	ldr	r3, [pc, #44]	; (801376c <iprintf+0x30>)
 8013740:	b513      	push	{r0, r1, r4, lr}
 8013742:	681c      	ldr	r4, [r3, #0]
 8013744:	2c00      	cmp	r4, #0
 8013746:	d005      	beq.n	8013754 <iprintf+0x18>
 8013748:	69a3      	ldr	r3, [r4, #24]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d102      	bne.n	8013754 <iprintf+0x18>
 801374e:	0020      	movs	r0, r4
 8013750:	f001 fa22 	bl	8014b98 <__sinit>
 8013754:	ab05      	add	r3, sp, #20
 8013756:	0020      	movs	r0, r4
 8013758:	9a04      	ldr	r2, [sp, #16]
 801375a:	68a1      	ldr	r1, [r4, #8]
 801375c:	9301      	str	r3, [sp, #4]
 801375e:	f002 f979 	bl	8015a54 <_vfiprintf_r>
 8013762:	bc16      	pop	{r1, r2, r4}
 8013764:	bc08      	pop	{r3}
 8013766:	b004      	add	sp, #16
 8013768:	4718      	bx	r3
 801376a:	46c0      	nop			; (mov r8, r8)
 801376c:	200002ec 	.word	0x200002ec

08013770 <_puts_r>:
 8013770:	b570      	push	{r4, r5, r6, lr}
 8013772:	0005      	movs	r5, r0
 8013774:	000e      	movs	r6, r1
 8013776:	2800      	cmp	r0, #0
 8013778:	d004      	beq.n	8013784 <_puts_r+0x14>
 801377a:	6983      	ldr	r3, [r0, #24]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d101      	bne.n	8013784 <_puts_r+0x14>
 8013780:	f001 fa0a 	bl	8014b98 <__sinit>
 8013784:	69ab      	ldr	r3, [r5, #24]
 8013786:	68ac      	ldr	r4, [r5, #8]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d102      	bne.n	8013792 <_puts_r+0x22>
 801378c:	0028      	movs	r0, r5
 801378e:	f001 fa03 	bl	8014b98 <__sinit>
 8013792:	4b2d      	ldr	r3, [pc, #180]	; (8013848 <_puts_r+0xd8>)
 8013794:	429c      	cmp	r4, r3
 8013796:	d122      	bne.n	80137de <_puts_r+0x6e>
 8013798:	686c      	ldr	r4, [r5, #4]
 801379a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801379c:	07db      	lsls	r3, r3, #31
 801379e:	d405      	bmi.n	80137ac <_puts_r+0x3c>
 80137a0:	89a3      	ldrh	r3, [r4, #12]
 80137a2:	059b      	lsls	r3, r3, #22
 80137a4:	d402      	bmi.n	80137ac <_puts_r+0x3c>
 80137a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137a8:	f001 fa9b 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 80137ac:	89a3      	ldrh	r3, [r4, #12]
 80137ae:	071b      	lsls	r3, r3, #28
 80137b0:	d502      	bpl.n	80137b8 <_puts_r+0x48>
 80137b2:	6923      	ldr	r3, [r4, #16]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d129      	bne.n	801380c <_puts_r+0x9c>
 80137b8:	0021      	movs	r1, r4
 80137ba:	0028      	movs	r0, r5
 80137bc:	f000 f9a0 	bl	8013b00 <__swsetup_r>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d023      	beq.n	801380c <_puts_r+0x9c>
 80137c4:	2501      	movs	r5, #1
 80137c6:	426d      	negs	r5, r5
 80137c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137ca:	07db      	lsls	r3, r3, #31
 80137cc:	d405      	bmi.n	80137da <_puts_r+0x6a>
 80137ce:	89a3      	ldrh	r3, [r4, #12]
 80137d0:	059b      	lsls	r3, r3, #22
 80137d2:	d402      	bmi.n	80137da <_puts_r+0x6a>
 80137d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137d6:	f001 fa85 	bl	8014ce4 <__retarget_lock_release_recursive>
 80137da:	0028      	movs	r0, r5
 80137dc:	bd70      	pop	{r4, r5, r6, pc}
 80137de:	4b1b      	ldr	r3, [pc, #108]	; (801384c <_puts_r+0xdc>)
 80137e0:	429c      	cmp	r4, r3
 80137e2:	d101      	bne.n	80137e8 <_puts_r+0x78>
 80137e4:	68ac      	ldr	r4, [r5, #8]
 80137e6:	e7d8      	b.n	801379a <_puts_r+0x2a>
 80137e8:	4b19      	ldr	r3, [pc, #100]	; (8013850 <_puts_r+0xe0>)
 80137ea:	429c      	cmp	r4, r3
 80137ec:	d1d5      	bne.n	801379a <_puts_r+0x2a>
 80137ee:	68ec      	ldr	r4, [r5, #12]
 80137f0:	e7d3      	b.n	801379a <_puts_r+0x2a>
 80137f2:	3601      	adds	r6, #1
 80137f4:	60a3      	str	r3, [r4, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	da04      	bge.n	8013804 <_puts_r+0x94>
 80137fa:	69a2      	ldr	r2, [r4, #24]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	dc16      	bgt.n	801382e <_puts_r+0xbe>
 8013800:	290a      	cmp	r1, #10
 8013802:	d014      	beq.n	801382e <_puts_r+0xbe>
 8013804:	6823      	ldr	r3, [r4, #0]
 8013806:	1c5a      	adds	r2, r3, #1
 8013808:	6022      	str	r2, [r4, #0]
 801380a:	7019      	strb	r1, [r3, #0]
 801380c:	68a3      	ldr	r3, [r4, #8]
 801380e:	7831      	ldrb	r1, [r6, #0]
 8013810:	3b01      	subs	r3, #1
 8013812:	2900      	cmp	r1, #0
 8013814:	d1ed      	bne.n	80137f2 <_puts_r+0x82>
 8013816:	60a3      	str	r3, [r4, #8]
 8013818:	2b00      	cmp	r3, #0
 801381a:	da0f      	bge.n	801383c <_puts_r+0xcc>
 801381c:	0028      	movs	r0, r5
 801381e:	0022      	movs	r2, r4
 8013820:	310a      	adds	r1, #10
 8013822:	f000 f917 	bl	8013a54 <__swbuf_r>
 8013826:	250a      	movs	r5, #10
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d1cd      	bne.n	80137c8 <_puts_r+0x58>
 801382c:	e7ca      	b.n	80137c4 <_puts_r+0x54>
 801382e:	0022      	movs	r2, r4
 8013830:	0028      	movs	r0, r5
 8013832:	f000 f90f 	bl	8013a54 <__swbuf_r>
 8013836:	1c43      	adds	r3, r0, #1
 8013838:	d1e8      	bne.n	801380c <_puts_r+0x9c>
 801383a:	e7c3      	b.n	80137c4 <_puts_r+0x54>
 801383c:	250a      	movs	r5, #10
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	1c5a      	adds	r2, r3, #1
 8013842:	6022      	str	r2, [r4, #0]
 8013844:	701d      	strb	r5, [r3, #0]
 8013846:	e7bf      	b.n	80137c8 <_puts_r+0x58>
 8013848:	08016cd8 	.word	0x08016cd8
 801384c:	08016cf8 	.word	0x08016cf8
 8013850:	08016cb8 	.word	0x08016cb8

08013854 <puts>:
 8013854:	b510      	push	{r4, lr}
 8013856:	4b03      	ldr	r3, [pc, #12]	; (8013864 <puts+0x10>)
 8013858:	0001      	movs	r1, r0
 801385a:	6818      	ldr	r0, [r3, #0]
 801385c:	f7ff ff88 	bl	8013770 <_puts_r>
 8013860:	bd10      	pop	{r4, pc}
 8013862:	46c0      	nop			; (mov r8, r8)
 8013864:	200002ec 	.word	0x200002ec

08013868 <sniprintf>:
 8013868:	b40c      	push	{r2, r3}
 801386a:	b530      	push	{r4, r5, lr}
 801386c:	4b17      	ldr	r3, [pc, #92]	; (80138cc <sniprintf+0x64>)
 801386e:	000c      	movs	r4, r1
 8013870:	681d      	ldr	r5, [r3, #0]
 8013872:	b09d      	sub	sp, #116	; 0x74
 8013874:	2900      	cmp	r1, #0
 8013876:	da08      	bge.n	801388a <sniprintf+0x22>
 8013878:	238b      	movs	r3, #139	; 0x8b
 801387a:	2001      	movs	r0, #1
 801387c:	602b      	str	r3, [r5, #0]
 801387e:	4240      	negs	r0, r0
 8013880:	b01d      	add	sp, #116	; 0x74
 8013882:	bc30      	pop	{r4, r5}
 8013884:	bc08      	pop	{r3}
 8013886:	b002      	add	sp, #8
 8013888:	4718      	bx	r3
 801388a:	2382      	movs	r3, #130	; 0x82
 801388c:	466a      	mov	r2, sp
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	8293      	strh	r3, [r2, #20]
 8013892:	2300      	movs	r3, #0
 8013894:	9002      	str	r0, [sp, #8]
 8013896:	9006      	str	r0, [sp, #24]
 8013898:	4299      	cmp	r1, r3
 801389a:	d000      	beq.n	801389e <sniprintf+0x36>
 801389c:	1e4b      	subs	r3, r1, #1
 801389e:	9304      	str	r3, [sp, #16]
 80138a0:	9307      	str	r3, [sp, #28]
 80138a2:	2301      	movs	r3, #1
 80138a4:	466a      	mov	r2, sp
 80138a6:	425b      	negs	r3, r3
 80138a8:	82d3      	strh	r3, [r2, #22]
 80138aa:	0028      	movs	r0, r5
 80138ac:	ab21      	add	r3, sp, #132	; 0x84
 80138ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138b0:	a902      	add	r1, sp, #8
 80138b2:	9301      	str	r3, [sp, #4]
 80138b4:	f001 ffa6 	bl	8015804 <_svfiprintf_r>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	da01      	bge.n	80138c0 <sniprintf+0x58>
 80138bc:	238b      	movs	r3, #139	; 0x8b
 80138be:	602b      	str	r3, [r5, #0]
 80138c0:	2c00      	cmp	r4, #0
 80138c2:	d0dd      	beq.n	8013880 <sniprintf+0x18>
 80138c4:	2300      	movs	r3, #0
 80138c6:	9a02      	ldr	r2, [sp, #8]
 80138c8:	7013      	strb	r3, [r2, #0]
 80138ca:	e7d9      	b.n	8013880 <sniprintf+0x18>
 80138cc:	200002ec 	.word	0x200002ec

080138d0 <siprintf>:
 80138d0:	b40e      	push	{r1, r2, r3}
 80138d2:	b500      	push	{lr}
 80138d4:	490b      	ldr	r1, [pc, #44]	; (8013904 <siprintf+0x34>)
 80138d6:	b09c      	sub	sp, #112	; 0x70
 80138d8:	ab1d      	add	r3, sp, #116	; 0x74
 80138da:	9002      	str	r0, [sp, #8]
 80138dc:	9006      	str	r0, [sp, #24]
 80138de:	9107      	str	r1, [sp, #28]
 80138e0:	9104      	str	r1, [sp, #16]
 80138e2:	4809      	ldr	r0, [pc, #36]	; (8013908 <siprintf+0x38>)
 80138e4:	4909      	ldr	r1, [pc, #36]	; (801390c <siprintf+0x3c>)
 80138e6:	cb04      	ldmia	r3!, {r2}
 80138e8:	9105      	str	r1, [sp, #20]
 80138ea:	6800      	ldr	r0, [r0, #0]
 80138ec:	a902      	add	r1, sp, #8
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	f001 ff88 	bl	8015804 <_svfiprintf_r>
 80138f4:	2300      	movs	r3, #0
 80138f6:	9a02      	ldr	r2, [sp, #8]
 80138f8:	7013      	strb	r3, [r2, #0]
 80138fa:	b01c      	add	sp, #112	; 0x70
 80138fc:	bc08      	pop	{r3}
 80138fe:	b003      	add	sp, #12
 8013900:	4718      	bx	r3
 8013902:	46c0      	nop			; (mov r8, r8)
 8013904:	7fffffff 	.word	0x7fffffff
 8013908:	200002ec 	.word	0x200002ec
 801390c:	ffff0208 	.word	0xffff0208

08013910 <strcpy>:
 8013910:	0003      	movs	r3, r0
 8013912:	780a      	ldrb	r2, [r1, #0]
 8013914:	3101      	adds	r1, #1
 8013916:	701a      	strb	r2, [r3, #0]
 8013918:	3301      	adds	r3, #1
 801391a:	2a00      	cmp	r2, #0
 801391c:	d1f9      	bne.n	8013912 <strcpy+0x2>
 801391e:	4770      	bx	lr

08013920 <_strtol_l.constprop.0>:
 8013920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013922:	b087      	sub	sp, #28
 8013924:	001e      	movs	r6, r3
 8013926:	9005      	str	r0, [sp, #20]
 8013928:	9101      	str	r1, [sp, #4]
 801392a:	9202      	str	r2, [sp, #8]
 801392c:	2b01      	cmp	r3, #1
 801392e:	d045      	beq.n	80139bc <_strtol_l.constprop.0+0x9c>
 8013930:	000b      	movs	r3, r1
 8013932:	2e24      	cmp	r6, #36	; 0x24
 8013934:	d842      	bhi.n	80139bc <_strtol_l.constprop.0+0x9c>
 8013936:	4a3f      	ldr	r2, [pc, #252]	; (8013a34 <_strtol_l.constprop.0+0x114>)
 8013938:	2108      	movs	r1, #8
 801393a:	4694      	mov	ip, r2
 801393c:	001a      	movs	r2, r3
 801393e:	4660      	mov	r0, ip
 8013940:	7814      	ldrb	r4, [r2, #0]
 8013942:	3301      	adds	r3, #1
 8013944:	5d00      	ldrb	r0, [r0, r4]
 8013946:	001d      	movs	r5, r3
 8013948:	0007      	movs	r7, r0
 801394a:	400f      	ands	r7, r1
 801394c:	4208      	tst	r0, r1
 801394e:	d1f5      	bne.n	801393c <_strtol_l.constprop.0+0x1c>
 8013950:	2c2d      	cmp	r4, #45	; 0x2d
 8013952:	d13a      	bne.n	80139ca <_strtol_l.constprop.0+0xaa>
 8013954:	2701      	movs	r7, #1
 8013956:	781c      	ldrb	r4, [r3, #0]
 8013958:	1c95      	adds	r5, r2, #2
 801395a:	2e00      	cmp	r6, #0
 801395c:	d065      	beq.n	8013a2a <_strtol_l.constprop.0+0x10a>
 801395e:	2e10      	cmp	r6, #16
 8013960:	d109      	bne.n	8013976 <_strtol_l.constprop.0+0x56>
 8013962:	2c30      	cmp	r4, #48	; 0x30
 8013964:	d107      	bne.n	8013976 <_strtol_l.constprop.0+0x56>
 8013966:	2220      	movs	r2, #32
 8013968:	782b      	ldrb	r3, [r5, #0]
 801396a:	4393      	bics	r3, r2
 801396c:	2b58      	cmp	r3, #88	; 0x58
 801396e:	d157      	bne.n	8013a20 <_strtol_l.constprop.0+0x100>
 8013970:	2610      	movs	r6, #16
 8013972:	786c      	ldrb	r4, [r5, #1]
 8013974:	3502      	adds	r5, #2
 8013976:	4b30      	ldr	r3, [pc, #192]	; (8013a38 <_strtol_l.constprop.0+0x118>)
 8013978:	0031      	movs	r1, r6
 801397a:	18fb      	adds	r3, r7, r3
 801397c:	0018      	movs	r0, r3
 801397e:	9303      	str	r3, [sp, #12]
 8013980:	f7ec fc64 	bl	800024c <__aeabi_uidivmod>
 8013984:	2300      	movs	r3, #0
 8013986:	2201      	movs	r2, #1
 8013988:	4684      	mov	ip, r0
 801398a:	0018      	movs	r0, r3
 801398c:	9104      	str	r1, [sp, #16]
 801398e:	4252      	negs	r2, r2
 8013990:	0021      	movs	r1, r4
 8013992:	3930      	subs	r1, #48	; 0x30
 8013994:	2909      	cmp	r1, #9
 8013996:	d81d      	bhi.n	80139d4 <_strtol_l.constprop.0+0xb4>
 8013998:	000c      	movs	r4, r1
 801399a:	42a6      	cmp	r6, r4
 801399c:	dd28      	ble.n	80139f0 <_strtol_l.constprop.0+0xd0>
 801399e:	2b00      	cmp	r3, #0
 80139a0:	db24      	blt.n	80139ec <_strtol_l.constprop.0+0xcc>
 80139a2:	0013      	movs	r3, r2
 80139a4:	4584      	cmp	ip, r0
 80139a6:	d306      	bcc.n	80139b6 <_strtol_l.constprop.0+0x96>
 80139a8:	d102      	bne.n	80139b0 <_strtol_l.constprop.0+0x90>
 80139aa:	9904      	ldr	r1, [sp, #16]
 80139ac:	42a1      	cmp	r1, r4
 80139ae:	db02      	blt.n	80139b6 <_strtol_l.constprop.0+0x96>
 80139b0:	2301      	movs	r3, #1
 80139b2:	4370      	muls	r0, r6
 80139b4:	1820      	adds	r0, r4, r0
 80139b6:	782c      	ldrb	r4, [r5, #0]
 80139b8:	3501      	adds	r5, #1
 80139ba:	e7e9      	b.n	8013990 <_strtol_l.constprop.0+0x70>
 80139bc:	f7ff fa14 	bl	8012de8 <__errno>
 80139c0:	2316      	movs	r3, #22
 80139c2:	6003      	str	r3, [r0, #0]
 80139c4:	2000      	movs	r0, #0
 80139c6:	b007      	add	sp, #28
 80139c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ca:	2c2b      	cmp	r4, #43	; 0x2b
 80139cc:	d1c5      	bne.n	801395a <_strtol_l.constprop.0+0x3a>
 80139ce:	781c      	ldrb	r4, [r3, #0]
 80139d0:	1c95      	adds	r5, r2, #2
 80139d2:	e7c2      	b.n	801395a <_strtol_l.constprop.0+0x3a>
 80139d4:	0021      	movs	r1, r4
 80139d6:	3941      	subs	r1, #65	; 0x41
 80139d8:	2919      	cmp	r1, #25
 80139da:	d801      	bhi.n	80139e0 <_strtol_l.constprop.0+0xc0>
 80139dc:	3c37      	subs	r4, #55	; 0x37
 80139de:	e7dc      	b.n	801399a <_strtol_l.constprop.0+0x7a>
 80139e0:	0021      	movs	r1, r4
 80139e2:	3961      	subs	r1, #97	; 0x61
 80139e4:	2919      	cmp	r1, #25
 80139e6:	d803      	bhi.n	80139f0 <_strtol_l.constprop.0+0xd0>
 80139e8:	3c57      	subs	r4, #87	; 0x57
 80139ea:	e7d6      	b.n	801399a <_strtol_l.constprop.0+0x7a>
 80139ec:	0013      	movs	r3, r2
 80139ee:	e7e2      	b.n	80139b6 <_strtol_l.constprop.0+0x96>
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	da09      	bge.n	8013a08 <_strtol_l.constprop.0+0xe8>
 80139f4:	2322      	movs	r3, #34	; 0x22
 80139f6:	9a05      	ldr	r2, [sp, #20]
 80139f8:	9803      	ldr	r0, [sp, #12]
 80139fa:	6013      	str	r3, [r2, #0]
 80139fc:	9b02      	ldr	r3, [sp, #8]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d0e1      	beq.n	80139c6 <_strtol_l.constprop.0+0xa6>
 8013a02:	1e6b      	subs	r3, r5, #1
 8013a04:	9301      	str	r3, [sp, #4]
 8013a06:	e007      	b.n	8013a18 <_strtol_l.constprop.0+0xf8>
 8013a08:	2f00      	cmp	r7, #0
 8013a0a:	d000      	beq.n	8013a0e <_strtol_l.constprop.0+0xee>
 8013a0c:	4240      	negs	r0, r0
 8013a0e:	9a02      	ldr	r2, [sp, #8]
 8013a10:	2a00      	cmp	r2, #0
 8013a12:	d0d8      	beq.n	80139c6 <_strtol_l.constprop.0+0xa6>
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1f4      	bne.n	8013a02 <_strtol_l.constprop.0+0xe2>
 8013a18:	9b02      	ldr	r3, [sp, #8]
 8013a1a:	9a01      	ldr	r2, [sp, #4]
 8013a1c:	601a      	str	r2, [r3, #0]
 8013a1e:	e7d2      	b.n	80139c6 <_strtol_l.constprop.0+0xa6>
 8013a20:	2430      	movs	r4, #48	; 0x30
 8013a22:	2e00      	cmp	r6, #0
 8013a24:	d1a7      	bne.n	8013976 <_strtol_l.constprop.0+0x56>
 8013a26:	3608      	adds	r6, #8
 8013a28:	e7a5      	b.n	8013976 <_strtol_l.constprop.0+0x56>
 8013a2a:	2c30      	cmp	r4, #48	; 0x30
 8013a2c:	d09b      	beq.n	8013966 <_strtol_l.constprop.0+0x46>
 8013a2e:	260a      	movs	r6, #10
 8013a30:	e7a1      	b.n	8013976 <_strtol_l.constprop.0+0x56>
 8013a32:	46c0      	nop			; (mov r8, r8)
 8013a34:	08016b25 	.word	0x08016b25
 8013a38:	7fffffff 	.word	0x7fffffff

08013a3c <strtol>:
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	0013      	movs	r3, r2
 8013a40:	000a      	movs	r2, r1
 8013a42:	0001      	movs	r1, r0
 8013a44:	4802      	ldr	r0, [pc, #8]	; (8013a50 <strtol+0x14>)
 8013a46:	6800      	ldr	r0, [r0, #0]
 8013a48:	f7ff ff6a 	bl	8013920 <_strtol_l.constprop.0>
 8013a4c:	bd10      	pop	{r4, pc}
 8013a4e:	46c0      	nop			; (mov r8, r8)
 8013a50:	200002ec 	.word	0x200002ec

08013a54 <__swbuf_r>:
 8013a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a56:	0005      	movs	r5, r0
 8013a58:	000e      	movs	r6, r1
 8013a5a:	0014      	movs	r4, r2
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d004      	beq.n	8013a6a <__swbuf_r+0x16>
 8013a60:	6983      	ldr	r3, [r0, #24]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d101      	bne.n	8013a6a <__swbuf_r+0x16>
 8013a66:	f001 f897 	bl	8014b98 <__sinit>
 8013a6a:	4b22      	ldr	r3, [pc, #136]	; (8013af4 <__swbuf_r+0xa0>)
 8013a6c:	429c      	cmp	r4, r3
 8013a6e:	d12e      	bne.n	8013ace <__swbuf_r+0x7a>
 8013a70:	686c      	ldr	r4, [r5, #4]
 8013a72:	69a3      	ldr	r3, [r4, #24]
 8013a74:	60a3      	str	r3, [r4, #8]
 8013a76:	89a3      	ldrh	r3, [r4, #12]
 8013a78:	071b      	lsls	r3, r3, #28
 8013a7a:	d532      	bpl.n	8013ae2 <__swbuf_r+0x8e>
 8013a7c:	6923      	ldr	r3, [r4, #16]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d02f      	beq.n	8013ae2 <__swbuf_r+0x8e>
 8013a82:	6823      	ldr	r3, [r4, #0]
 8013a84:	6922      	ldr	r2, [r4, #16]
 8013a86:	b2f7      	uxtb	r7, r6
 8013a88:	1a98      	subs	r0, r3, r2
 8013a8a:	6963      	ldr	r3, [r4, #20]
 8013a8c:	b2f6      	uxtb	r6, r6
 8013a8e:	4283      	cmp	r3, r0
 8013a90:	dc05      	bgt.n	8013a9e <__swbuf_r+0x4a>
 8013a92:	0021      	movs	r1, r4
 8013a94:	0028      	movs	r0, r5
 8013a96:	f000 ffdd 	bl	8014a54 <_fflush_r>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	d127      	bne.n	8013aee <__swbuf_r+0x9a>
 8013a9e:	68a3      	ldr	r3, [r4, #8]
 8013aa0:	3001      	adds	r0, #1
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	60a3      	str	r3, [r4, #8]
 8013aa6:	6823      	ldr	r3, [r4, #0]
 8013aa8:	1c5a      	adds	r2, r3, #1
 8013aaa:	6022      	str	r2, [r4, #0]
 8013aac:	701f      	strb	r7, [r3, #0]
 8013aae:	6963      	ldr	r3, [r4, #20]
 8013ab0:	4283      	cmp	r3, r0
 8013ab2:	d004      	beq.n	8013abe <__swbuf_r+0x6a>
 8013ab4:	89a3      	ldrh	r3, [r4, #12]
 8013ab6:	07db      	lsls	r3, r3, #31
 8013ab8:	d507      	bpl.n	8013aca <__swbuf_r+0x76>
 8013aba:	2e0a      	cmp	r6, #10
 8013abc:	d105      	bne.n	8013aca <__swbuf_r+0x76>
 8013abe:	0021      	movs	r1, r4
 8013ac0:	0028      	movs	r0, r5
 8013ac2:	f000 ffc7 	bl	8014a54 <_fflush_r>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d111      	bne.n	8013aee <__swbuf_r+0x9a>
 8013aca:	0030      	movs	r0, r6
 8013acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ace:	4b0a      	ldr	r3, [pc, #40]	; (8013af8 <__swbuf_r+0xa4>)
 8013ad0:	429c      	cmp	r4, r3
 8013ad2:	d101      	bne.n	8013ad8 <__swbuf_r+0x84>
 8013ad4:	68ac      	ldr	r4, [r5, #8]
 8013ad6:	e7cc      	b.n	8013a72 <__swbuf_r+0x1e>
 8013ad8:	4b08      	ldr	r3, [pc, #32]	; (8013afc <__swbuf_r+0xa8>)
 8013ada:	429c      	cmp	r4, r3
 8013adc:	d1c9      	bne.n	8013a72 <__swbuf_r+0x1e>
 8013ade:	68ec      	ldr	r4, [r5, #12]
 8013ae0:	e7c7      	b.n	8013a72 <__swbuf_r+0x1e>
 8013ae2:	0021      	movs	r1, r4
 8013ae4:	0028      	movs	r0, r5
 8013ae6:	f000 f80b 	bl	8013b00 <__swsetup_r>
 8013aea:	2800      	cmp	r0, #0
 8013aec:	d0c9      	beq.n	8013a82 <__swbuf_r+0x2e>
 8013aee:	2601      	movs	r6, #1
 8013af0:	4276      	negs	r6, r6
 8013af2:	e7ea      	b.n	8013aca <__swbuf_r+0x76>
 8013af4:	08016cd8 	.word	0x08016cd8
 8013af8:	08016cf8 	.word	0x08016cf8
 8013afc:	08016cb8 	.word	0x08016cb8

08013b00 <__swsetup_r>:
 8013b00:	4b37      	ldr	r3, [pc, #220]	; (8013be0 <__swsetup_r+0xe0>)
 8013b02:	b570      	push	{r4, r5, r6, lr}
 8013b04:	681d      	ldr	r5, [r3, #0]
 8013b06:	0006      	movs	r6, r0
 8013b08:	000c      	movs	r4, r1
 8013b0a:	2d00      	cmp	r5, #0
 8013b0c:	d005      	beq.n	8013b1a <__swsetup_r+0x1a>
 8013b0e:	69ab      	ldr	r3, [r5, #24]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d102      	bne.n	8013b1a <__swsetup_r+0x1a>
 8013b14:	0028      	movs	r0, r5
 8013b16:	f001 f83f 	bl	8014b98 <__sinit>
 8013b1a:	4b32      	ldr	r3, [pc, #200]	; (8013be4 <__swsetup_r+0xe4>)
 8013b1c:	429c      	cmp	r4, r3
 8013b1e:	d10f      	bne.n	8013b40 <__swsetup_r+0x40>
 8013b20:	686c      	ldr	r4, [r5, #4]
 8013b22:	230c      	movs	r3, #12
 8013b24:	5ee2      	ldrsh	r2, [r4, r3]
 8013b26:	b293      	uxth	r3, r2
 8013b28:	0711      	lsls	r1, r2, #28
 8013b2a:	d42d      	bmi.n	8013b88 <__swsetup_r+0x88>
 8013b2c:	06d9      	lsls	r1, r3, #27
 8013b2e:	d411      	bmi.n	8013b54 <__swsetup_r+0x54>
 8013b30:	2309      	movs	r3, #9
 8013b32:	2001      	movs	r0, #1
 8013b34:	6033      	str	r3, [r6, #0]
 8013b36:	3337      	adds	r3, #55	; 0x37
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	81a3      	strh	r3, [r4, #12]
 8013b3c:	4240      	negs	r0, r0
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}
 8013b40:	4b29      	ldr	r3, [pc, #164]	; (8013be8 <__swsetup_r+0xe8>)
 8013b42:	429c      	cmp	r4, r3
 8013b44:	d101      	bne.n	8013b4a <__swsetup_r+0x4a>
 8013b46:	68ac      	ldr	r4, [r5, #8]
 8013b48:	e7eb      	b.n	8013b22 <__swsetup_r+0x22>
 8013b4a:	4b28      	ldr	r3, [pc, #160]	; (8013bec <__swsetup_r+0xec>)
 8013b4c:	429c      	cmp	r4, r3
 8013b4e:	d1e8      	bne.n	8013b22 <__swsetup_r+0x22>
 8013b50:	68ec      	ldr	r4, [r5, #12]
 8013b52:	e7e6      	b.n	8013b22 <__swsetup_r+0x22>
 8013b54:	075b      	lsls	r3, r3, #29
 8013b56:	d513      	bpl.n	8013b80 <__swsetup_r+0x80>
 8013b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b5a:	2900      	cmp	r1, #0
 8013b5c:	d008      	beq.n	8013b70 <__swsetup_r+0x70>
 8013b5e:	0023      	movs	r3, r4
 8013b60:	3344      	adds	r3, #68	; 0x44
 8013b62:	4299      	cmp	r1, r3
 8013b64:	d002      	beq.n	8013b6c <__swsetup_r+0x6c>
 8013b66:	0030      	movs	r0, r6
 8013b68:	f001 fd08 	bl	801557c <_free_r>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	6363      	str	r3, [r4, #52]	; 0x34
 8013b70:	2224      	movs	r2, #36	; 0x24
 8013b72:	89a3      	ldrh	r3, [r4, #12]
 8013b74:	4393      	bics	r3, r2
 8013b76:	81a3      	strh	r3, [r4, #12]
 8013b78:	2300      	movs	r3, #0
 8013b7a:	6063      	str	r3, [r4, #4]
 8013b7c:	6923      	ldr	r3, [r4, #16]
 8013b7e:	6023      	str	r3, [r4, #0]
 8013b80:	2308      	movs	r3, #8
 8013b82:	89a2      	ldrh	r2, [r4, #12]
 8013b84:	4313      	orrs	r3, r2
 8013b86:	81a3      	strh	r3, [r4, #12]
 8013b88:	6923      	ldr	r3, [r4, #16]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d10b      	bne.n	8013ba6 <__swsetup_r+0xa6>
 8013b8e:	21a0      	movs	r1, #160	; 0xa0
 8013b90:	2280      	movs	r2, #128	; 0x80
 8013b92:	89a3      	ldrh	r3, [r4, #12]
 8013b94:	0089      	lsls	r1, r1, #2
 8013b96:	0092      	lsls	r2, r2, #2
 8013b98:	400b      	ands	r3, r1
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d003      	beq.n	8013ba6 <__swsetup_r+0xa6>
 8013b9e:	0021      	movs	r1, r4
 8013ba0:	0030      	movs	r0, r6
 8013ba2:	f001 f8c9 	bl	8014d38 <__smakebuf_r>
 8013ba6:	220c      	movs	r2, #12
 8013ba8:	5ea3      	ldrsh	r3, [r4, r2]
 8013baa:	2001      	movs	r0, #1
 8013bac:	001a      	movs	r2, r3
 8013bae:	b299      	uxth	r1, r3
 8013bb0:	4002      	ands	r2, r0
 8013bb2:	4203      	tst	r3, r0
 8013bb4:	d00f      	beq.n	8013bd6 <__swsetup_r+0xd6>
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	60a2      	str	r2, [r4, #8]
 8013bba:	6962      	ldr	r2, [r4, #20]
 8013bbc:	4252      	negs	r2, r2
 8013bbe:	61a2      	str	r2, [r4, #24]
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	6922      	ldr	r2, [r4, #16]
 8013bc4:	4282      	cmp	r2, r0
 8013bc6:	d1ba      	bne.n	8013b3e <__swsetup_r+0x3e>
 8013bc8:	060a      	lsls	r2, r1, #24
 8013bca:	d5b8      	bpl.n	8013b3e <__swsetup_r+0x3e>
 8013bcc:	2240      	movs	r2, #64	; 0x40
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	81a3      	strh	r3, [r4, #12]
 8013bd2:	3801      	subs	r0, #1
 8013bd4:	e7b3      	b.n	8013b3e <__swsetup_r+0x3e>
 8013bd6:	0788      	lsls	r0, r1, #30
 8013bd8:	d400      	bmi.n	8013bdc <__swsetup_r+0xdc>
 8013bda:	6962      	ldr	r2, [r4, #20]
 8013bdc:	60a2      	str	r2, [r4, #8]
 8013bde:	e7ef      	b.n	8013bc0 <__swsetup_r+0xc0>
 8013be0:	200002ec 	.word	0x200002ec
 8013be4:	08016cd8 	.word	0x08016cd8
 8013be8:	08016cf8 	.word	0x08016cf8
 8013bec:	08016cb8 	.word	0x08016cb8

08013bf0 <quorem>:
 8013bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bf2:	0006      	movs	r6, r0
 8013bf4:	690b      	ldr	r3, [r1, #16]
 8013bf6:	6932      	ldr	r2, [r6, #16]
 8013bf8:	b087      	sub	sp, #28
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	9103      	str	r1, [sp, #12]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	db65      	blt.n	8013cce <quorem+0xde>
 8013c02:	3b01      	subs	r3, #1
 8013c04:	009c      	lsls	r4, r3, #2
 8013c06:	9300      	str	r3, [sp, #0]
 8013c08:	000b      	movs	r3, r1
 8013c0a:	3314      	adds	r3, #20
 8013c0c:	9305      	str	r3, [sp, #20]
 8013c0e:	191b      	adds	r3, r3, r4
 8013c10:	9304      	str	r3, [sp, #16]
 8013c12:	0033      	movs	r3, r6
 8013c14:	3314      	adds	r3, #20
 8013c16:	9302      	str	r3, [sp, #8]
 8013c18:	191c      	adds	r4, r3, r4
 8013c1a:	9b04      	ldr	r3, [sp, #16]
 8013c1c:	6827      	ldr	r7, [r4, #0]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	0038      	movs	r0, r7
 8013c22:	1c5d      	adds	r5, r3, #1
 8013c24:	0029      	movs	r1, r5
 8013c26:	9301      	str	r3, [sp, #4]
 8013c28:	f7ec fa8a 	bl	8000140 <__udivsi3>
 8013c2c:	9001      	str	r0, [sp, #4]
 8013c2e:	42af      	cmp	r7, r5
 8013c30:	d324      	bcc.n	8013c7c <quorem+0x8c>
 8013c32:	2500      	movs	r5, #0
 8013c34:	46ac      	mov	ip, r5
 8013c36:	9802      	ldr	r0, [sp, #8]
 8013c38:	9f05      	ldr	r7, [sp, #20]
 8013c3a:	cf08      	ldmia	r7!, {r3}
 8013c3c:	9a01      	ldr	r2, [sp, #4]
 8013c3e:	b299      	uxth	r1, r3
 8013c40:	4351      	muls	r1, r2
 8013c42:	0c1b      	lsrs	r3, r3, #16
 8013c44:	4353      	muls	r3, r2
 8013c46:	1949      	adds	r1, r1, r5
 8013c48:	0c0a      	lsrs	r2, r1, #16
 8013c4a:	189b      	adds	r3, r3, r2
 8013c4c:	6802      	ldr	r2, [r0, #0]
 8013c4e:	b289      	uxth	r1, r1
 8013c50:	b292      	uxth	r2, r2
 8013c52:	4462      	add	r2, ip
 8013c54:	1a52      	subs	r2, r2, r1
 8013c56:	6801      	ldr	r1, [r0, #0]
 8013c58:	0c1d      	lsrs	r5, r3, #16
 8013c5a:	0c09      	lsrs	r1, r1, #16
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	1acb      	subs	r3, r1, r3
 8013c60:	1411      	asrs	r1, r2, #16
 8013c62:	185b      	adds	r3, r3, r1
 8013c64:	1419      	asrs	r1, r3, #16
 8013c66:	b292      	uxth	r2, r2
 8013c68:	041b      	lsls	r3, r3, #16
 8013c6a:	431a      	orrs	r2, r3
 8013c6c:	9b04      	ldr	r3, [sp, #16]
 8013c6e:	468c      	mov	ip, r1
 8013c70:	c004      	stmia	r0!, {r2}
 8013c72:	42bb      	cmp	r3, r7
 8013c74:	d2e1      	bcs.n	8013c3a <quorem+0x4a>
 8013c76:	6823      	ldr	r3, [r4, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d030      	beq.n	8013cde <quorem+0xee>
 8013c7c:	0030      	movs	r0, r6
 8013c7e:	9903      	ldr	r1, [sp, #12]
 8013c80:	f001 fb38 	bl	80152f4 <__mcmp>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	db21      	blt.n	8013ccc <quorem+0xdc>
 8013c88:	0030      	movs	r0, r6
 8013c8a:	2400      	movs	r4, #0
 8013c8c:	9b01      	ldr	r3, [sp, #4]
 8013c8e:	9903      	ldr	r1, [sp, #12]
 8013c90:	3301      	adds	r3, #1
 8013c92:	9301      	str	r3, [sp, #4]
 8013c94:	3014      	adds	r0, #20
 8013c96:	3114      	adds	r1, #20
 8013c98:	6803      	ldr	r3, [r0, #0]
 8013c9a:	c920      	ldmia	r1!, {r5}
 8013c9c:	b29a      	uxth	r2, r3
 8013c9e:	1914      	adds	r4, r2, r4
 8013ca0:	b2aa      	uxth	r2, r5
 8013ca2:	1aa2      	subs	r2, r4, r2
 8013ca4:	0c1b      	lsrs	r3, r3, #16
 8013ca6:	0c2d      	lsrs	r5, r5, #16
 8013ca8:	1414      	asrs	r4, r2, #16
 8013caa:	1b5b      	subs	r3, r3, r5
 8013cac:	191b      	adds	r3, r3, r4
 8013cae:	141c      	asrs	r4, r3, #16
 8013cb0:	b292      	uxth	r2, r2
 8013cb2:	041b      	lsls	r3, r3, #16
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	c008      	stmia	r0!, {r3}
 8013cb8:	9b04      	ldr	r3, [sp, #16]
 8013cba:	428b      	cmp	r3, r1
 8013cbc:	d2ec      	bcs.n	8013c98 <quorem+0xa8>
 8013cbe:	9b00      	ldr	r3, [sp, #0]
 8013cc0:	9a02      	ldr	r2, [sp, #8]
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	18d3      	adds	r3, r2, r3
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	2a00      	cmp	r2, #0
 8013cca:	d015      	beq.n	8013cf8 <quorem+0x108>
 8013ccc:	9801      	ldr	r0, [sp, #4]
 8013cce:	b007      	add	sp, #28
 8013cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cd2:	6823      	ldr	r3, [r4, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d106      	bne.n	8013ce6 <quorem+0xf6>
 8013cd8:	9b00      	ldr	r3, [sp, #0]
 8013cda:	3b01      	subs	r3, #1
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	9b02      	ldr	r3, [sp, #8]
 8013ce0:	3c04      	subs	r4, #4
 8013ce2:	42a3      	cmp	r3, r4
 8013ce4:	d3f5      	bcc.n	8013cd2 <quorem+0xe2>
 8013ce6:	9b00      	ldr	r3, [sp, #0]
 8013ce8:	6133      	str	r3, [r6, #16]
 8013cea:	e7c7      	b.n	8013c7c <quorem+0x8c>
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	d106      	bne.n	8013d00 <quorem+0x110>
 8013cf2:	9a00      	ldr	r2, [sp, #0]
 8013cf4:	3a01      	subs	r2, #1
 8013cf6:	9200      	str	r2, [sp, #0]
 8013cf8:	9a02      	ldr	r2, [sp, #8]
 8013cfa:	3b04      	subs	r3, #4
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d3f5      	bcc.n	8013cec <quorem+0xfc>
 8013d00:	9b00      	ldr	r3, [sp, #0]
 8013d02:	6133      	str	r3, [r6, #16]
 8013d04:	e7e2      	b.n	8013ccc <quorem+0xdc>
	...

08013d08 <_dtoa_r>:
 8013d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d0a:	b09d      	sub	sp, #116	; 0x74
 8013d0c:	9202      	str	r2, [sp, #8]
 8013d0e:	9303      	str	r3, [sp, #12]
 8013d10:	9b02      	ldr	r3, [sp, #8]
 8013d12:	9c03      	ldr	r4, [sp, #12]
 8013d14:	9308      	str	r3, [sp, #32]
 8013d16:	9409      	str	r4, [sp, #36]	; 0x24
 8013d18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013d1a:	0007      	movs	r7, r0
 8013d1c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8013d1e:	2c00      	cmp	r4, #0
 8013d20:	d10e      	bne.n	8013d40 <_dtoa_r+0x38>
 8013d22:	2010      	movs	r0, #16
 8013d24:	f001 f84c 	bl	8014dc0 <malloc>
 8013d28:	1e02      	subs	r2, r0, #0
 8013d2a:	6278      	str	r0, [r7, #36]	; 0x24
 8013d2c:	d104      	bne.n	8013d38 <_dtoa_r+0x30>
 8013d2e:	21ea      	movs	r1, #234	; 0xea
 8013d30:	4bc7      	ldr	r3, [pc, #796]	; (8014050 <_dtoa_r+0x348>)
 8013d32:	48c8      	ldr	r0, [pc, #800]	; (8014054 <_dtoa_r+0x34c>)
 8013d34:	f002 f83a 	bl	8015dac <__assert_func>
 8013d38:	6044      	str	r4, [r0, #4]
 8013d3a:	6084      	str	r4, [r0, #8]
 8013d3c:	6004      	str	r4, [r0, #0]
 8013d3e:	60c4      	str	r4, [r0, #12]
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	6819      	ldr	r1, [r3, #0]
 8013d44:	2900      	cmp	r1, #0
 8013d46:	d00a      	beq.n	8013d5e <_dtoa_r+0x56>
 8013d48:	685a      	ldr	r2, [r3, #4]
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	4093      	lsls	r3, r2
 8013d4e:	604a      	str	r2, [r1, #4]
 8013d50:	608b      	str	r3, [r1, #8]
 8013d52:	0038      	movs	r0, r7
 8013d54:	f001 f88e 	bl	8014e74 <_Bfree>
 8013d58:	2200      	movs	r2, #0
 8013d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5c:	601a      	str	r2, [r3, #0]
 8013d5e:	9b03      	ldr	r3, [sp, #12]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	da20      	bge.n	8013da6 <_dtoa_r+0x9e>
 8013d64:	2301      	movs	r3, #1
 8013d66:	602b      	str	r3, [r5, #0]
 8013d68:	9b03      	ldr	r3, [sp, #12]
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	085b      	lsrs	r3, r3, #1
 8013d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013d72:	4bb9      	ldr	r3, [pc, #740]	; (8014058 <_dtoa_r+0x350>)
 8013d74:	4ab8      	ldr	r2, [pc, #736]	; (8014058 <_dtoa_r+0x350>)
 8013d76:	402b      	ands	r3, r5
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d117      	bne.n	8013dac <_dtoa_r+0xa4>
 8013d7c:	4bb7      	ldr	r3, [pc, #732]	; (801405c <_dtoa_r+0x354>)
 8013d7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013d80:	0328      	lsls	r0, r5, #12
 8013d82:	6013      	str	r3, [r2, #0]
 8013d84:	9b02      	ldr	r3, [sp, #8]
 8013d86:	0b00      	lsrs	r0, r0, #12
 8013d88:	4318      	orrs	r0, r3
 8013d8a:	d101      	bne.n	8013d90 <_dtoa_r+0x88>
 8013d8c:	f000 fdbf 	bl	801490e <_dtoa_r+0xc06>
 8013d90:	48b3      	ldr	r0, [pc, #716]	; (8014060 <_dtoa_r+0x358>)
 8013d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d94:	9006      	str	r0, [sp, #24]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d002      	beq.n	8013da0 <_dtoa_r+0x98>
 8013d9a:	4bb2      	ldr	r3, [pc, #712]	; (8014064 <_dtoa_r+0x35c>)
 8013d9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013d9e:	6013      	str	r3, [r2, #0]
 8013da0:	9806      	ldr	r0, [sp, #24]
 8013da2:	b01d      	add	sp, #116	; 0x74
 8013da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013da6:	2300      	movs	r3, #0
 8013da8:	602b      	str	r3, [r5, #0]
 8013daa:	e7e1      	b.n	8013d70 <_dtoa_r+0x68>
 8013dac:	9b08      	ldr	r3, [sp, #32]
 8013dae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013db0:	9312      	str	r3, [sp, #72]	; 0x48
 8013db2:	9413      	str	r4, [sp, #76]	; 0x4c
 8013db4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013db6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013db8:	2200      	movs	r2, #0
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f7ec fb46 	bl	800044c <__aeabi_dcmpeq>
 8013dc0:	1e04      	subs	r4, r0, #0
 8013dc2:	d009      	beq.n	8013dd8 <_dtoa_r+0xd0>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013dc8:	6013      	str	r3, [r2, #0]
 8013dca:	4ba7      	ldr	r3, [pc, #668]	; (8014068 <_dtoa_r+0x360>)
 8013dcc:	9306      	str	r3, [sp, #24]
 8013dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d0e5      	beq.n	8013da0 <_dtoa_r+0x98>
 8013dd4:	4ba5      	ldr	r3, [pc, #660]	; (801406c <_dtoa_r+0x364>)
 8013dd6:	e7e1      	b.n	8013d9c <_dtoa_r+0x94>
 8013dd8:	ab1a      	add	r3, sp, #104	; 0x68
 8013dda:	9301      	str	r3, [sp, #4]
 8013ddc:	ab1b      	add	r3, sp, #108	; 0x6c
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	0038      	movs	r0, r7
 8013de2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013de4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013de6:	f001 fb39 	bl	801545c <__d2b>
 8013dea:	006e      	lsls	r6, r5, #1
 8013dec:	9005      	str	r0, [sp, #20]
 8013dee:	0d76      	lsrs	r6, r6, #21
 8013df0:	d100      	bne.n	8013df4 <_dtoa_r+0xec>
 8013df2:	e07c      	b.n	8013eee <_dtoa_r+0x1e6>
 8013df4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013df6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013dfa:	4a9d      	ldr	r2, [pc, #628]	; (8014070 <_dtoa_r+0x368>)
 8013dfc:	031b      	lsls	r3, r3, #12
 8013dfe:	0b1b      	lsrs	r3, r3, #12
 8013e00:	431a      	orrs	r2, r3
 8013e02:	0011      	movs	r1, r2
 8013e04:	4b9b      	ldr	r3, [pc, #620]	; (8014074 <_dtoa_r+0x36c>)
 8013e06:	9418      	str	r4, [sp, #96]	; 0x60
 8013e08:	18f6      	adds	r6, r6, r3
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	4b9a      	ldr	r3, [pc, #616]	; (8014078 <_dtoa_r+0x370>)
 8013e0e:	f7ed fcf5 	bl	80017fc <__aeabi_dsub>
 8013e12:	4a9a      	ldr	r2, [pc, #616]	; (801407c <_dtoa_r+0x374>)
 8013e14:	4b9a      	ldr	r3, [pc, #616]	; (8014080 <_dtoa_r+0x378>)
 8013e16:	f7ed fa85 	bl	8001324 <__aeabi_dmul>
 8013e1a:	4a9a      	ldr	r2, [pc, #616]	; (8014084 <_dtoa_r+0x37c>)
 8013e1c:	4b9a      	ldr	r3, [pc, #616]	; (8014088 <_dtoa_r+0x380>)
 8013e1e:	f7ec fb43 	bl	80004a8 <__aeabi_dadd>
 8013e22:	0004      	movs	r4, r0
 8013e24:	0030      	movs	r0, r6
 8013e26:	000d      	movs	r5, r1
 8013e28:	f7ee f8ce 	bl	8001fc8 <__aeabi_i2d>
 8013e2c:	4a97      	ldr	r2, [pc, #604]	; (801408c <_dtoa_r+0x384>)
 8013e2e:	4b98      	ldr	r3, [pc, #608]	; (8014090 <_dtoa_r+0x388>)
 8013e30:	f7ed fa78 	bl	8001324 <__aeabi_dmul>
 8013e34:	0002      	movs	r2, r0
 8013e36:	000b      	movs	r3, r1
 8013e38:	0020      	movs	r0, r4
 8013e3a:	0029      	movs	r1, r5
 8013e3c:	f7ec fb34 	bl	80004a8 <__aeabi_dadd>
 8013e40:	0004      	movs	r4, r0
 8013e42:	000d      	movs	r5, r1
 8013e44:	f7ee f88a 	bl	8001f5c <__aeabi_d2iz>
 8013e48:	2200      	movs	r2, #0
 8013e4a:	9002      	str	r0, [sp, #8]
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	0020      	movs	r0, r4
 8013e50:	0029      	movs	r1, r5
 8013e52:	f7ec fb01 	bl	8000458 <__aeabi_dcmplt>
 8013e56:	2800      	cmp	r0, #0
 8013e58:	d00b      	beq.n	8013e72 <_dtoa_r+0x16a>
 8013e5a:	9802      	ldr	r0, [sp, #8]
 8013e5c:	f7ee f8b4 	bl	8001fc8 <__aeabi_i2d>
 8013e60:	002b      	movs	r3, r5
 8013e62:	0022      	movs	r2, r4
 8013e64:	f7ec faf2 	bl	800044c <__aeabi_dcmpeq>
 8013e68:	4243      	negs	r3, r0
 8013e6a:	4158      	adcs	r0, r3
 8013e6c:	9b02      	ldr	r3, [sp, #8]
 8013e6e:	1a1b      	subs	r3, r3, r0
 8013e70:	9302      	str	r3, [sp, #8]
 8013e72:	2301      	movs	r3, #1
 8013e74:	9316      	str	r3, [sp, #88]	; 0x58
 8013e76:	9b02      	ldr	r3, [sp, #8]
 8013e78:	2b16      	cmp	r3, #22
 8013e7a:	d80f      	bhi.n	8013e9c <_dtoa_r+0x194>
 8013e7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013e7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013e80:	00da      	lsls	r2, r3, #3
 8013e82:	4b84      	ldr	r3, [pc, #528]	; (8014094 <_dtoa_r+0x38c>)
 8013e84:	189b      	adds	r3, r3, r2
 8013e86:	681a      	ldr	r2, [r3, #0]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	f7ec fae5 	bl	8000458 <__aeabi_dcmplt>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d049      	beq.n	8013f26 <_dtoa_r+0x21e>
 8013e92:	9b02      	ldr	r3, [sp, #8]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	9302      	str	r3, [sp, #8]
 8013e98:	2300      	movs	r3, #0
 8013e9a:	9316      	str	r3, [sp, #88]	; 0x58
 8013e9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013e9e:	1b9e      	subs	r6, r3, r6
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ea4:	0033      	movs	r3, r6
 8013ea6:	3b01      	subs	r3, #1
 8013ea8:	930d      	str	r3, [sp, #52]	; 0x34
 8013eaa:	d504      	bpl.n	8013eb6 <_dtoa_r+0x1ae>
 8013eac:	2301      	movs	r3, #1
 8013eae:	1b9b      	subs	r3, r3, r6
 8013eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8013eb6:	9b02      	ldr	r3, [sp, #8]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	db36      	blt.n	8013f2a <_dtoa_r+0x222>
 8013ebc:	9a02      	ldr	r2, [sp, #8]
 8013ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ec0:	4694      	mov	ip, r2
 8013ec2:	4463      	add	r3, ip
 8013ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	9215      	str	r2, [sp, #84]	; 0x54
 8013eca:	930e      	str	r3, [sp, #56]	; 0x38
 8013ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ece:	2401      	movs	r4, #1
 8013ed0:	2b09      	cmp	r3, #9
 8013ed2:	d864      	bhi.n	8013f9e <_dtoa_r+0x296>
 8013ed4:	2b05      	cmp	r3, #5
 8013ed6:	dd02      	ble.n	8013ede <_dtoa_r+0x1d6>
 8013ed8:	2400      	movs	r4, #0
 8013eda:	3b04      	subs	r3, #4
 8013edc:	9322      	str	r3, [sp, #136]	; 0x88
 8013ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ee0:	1e98      	subs	r0, r3, #2
 8013ee2:	2803      	cmp	r0, #3
 8013ee4:	d864      	bhi.n	8013fb0 <_dtoa_r+0x2a8>
 8013ee6:	f7ec f917 	bl	8000118 <__gnu_thumb1_case_uqi>
 8013eea:	3829      	.short	0x3829
 8013eec:	5836      	.short	0x5836
 8013eee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013ef0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013ef2:	189e      	adds	r6, r3, r2
 8013ef4:	4b68      	ldr	r3, [pc, #416]	; (8014098 <_dtoa_r+0x390>)
 8013ef6:	18f2      	adds	r2, r6, r3
 8013ef8:	2a20      	cmp	r2, #32
 8013efa:	dd0f      	ble.n	8013f1c <_dtoa_r+0x214>
 8013efc:	2340      	movs	r3, #64	; 0x40
 8013efe:	1a9b      	subs	r3, r3, r2
 8013f00:	409d      	lsls	r5, r3
 8013f02:	4b66      	ldr	r3, [pc, #408]	; (801409c <_dtoa_r+0x394>)
 8013f04:	9802      	ldr	r0, [sp, #8]
 8013f06:	18f3      	adds	r3, r6, r3
 8013f08:	40d8      	lsrs	r0, r3
 8013f0a:	4328      	orrs	r0, r5
 8013f0c:	f7ee f88c 	bl	8002028 <__aeabi_ui2d>
 8013f10:	2301      	movs	r3, #1
 8013f12:	4c63      	ldr	r4, [pc, #396]	; (80140a0 <_dtoa_r+0x398>)
 8013f14:	3e01      	subs	r6, #1
 8013f16:	1909      	adds	r1, r1, r4
 8013f18:	9318      	str	r3, [sp, #96]	; 0x60
 8013f1a:	e776      	b.n	8013e0a <_dtoa_r+0x102>
 8013f1c:	2320      	movs	r3, #32
 8013f1e:	9802      	ldr	r0, [sp, #8]
 8013f20:	1a9b      	subs	r3, r3, r2
 8013f22:	4098      	lsls	r0, r3
 8013f24:	e7f2      	b.n	8013f0c <_dtoa_r+0x204>
 8013f26:	9016      	str	r0, [sp, #88]	; 0x58
 8013f28:	e7b8      	b.n	8013e9c <_dtoa_r+0x194>
 8013f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f2c:	9a02      	ldr	r2, [sp, #8]
 8013f2e:	1a9b      	subs	r3, r3, r2
 8013f30:	930a      	str	r3, [sp, #40]	; 0x28
 8013f32:	4253      	negs	r3, r2
 8013f34:	930e      	str	r3, [sp, #56]	; 0x38
 8013f36:	2300      	movs	r3, #0
 8013f38:	9315      	str	r3, [sp, #84]	; 0x54
 8013f3a:	e7c7      	b.n	8013ecc <_dtoa_r+0x1c4>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f42:	930c      	str	r3, [sp, #48]	; 0x30
 8013f44:	9307      	str	r3, [sp, #28]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	dc13      	bgt.n	8013f72 <_dtoa_r+0x26a>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	001a      	movs	r2, r3
 8013f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8013f50:	9307      	str	r3, [sp, #28]
 8013f52:	9223      	str	r2, [sp, #140]	; 0x8c
 8013f54:	e00d      	b.n	8013f72 <_dtoa_r+0x26a>
 8013f56:	2301      	movs	r3, #1
 8013f58:	e7f1      	b.n	8013f3e <_dtoa_r+0x236>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f60:	4694      	mov	ip, r2
 8013f62:	9b02      	ldr	r3, [sp, #8]
 8013f64:	4463      	add	r3, ip
 8013f66:	930c      	str	r3, [sp, #48]	; 0x30
 8013f68:	3301      	adds	r3, #1
 8013f6a:	9307      	str	r3, [sp, #28]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	dc00      	bgt.n	8013f72 <_dtoa_r+0x26a>
 8013f70:	2301      	movs	r3, #1
 8013f72:	2200      	movs	r2, #0
 8013f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f76:	6042      	str	r2, [r0, #4]
 8013f78:	3204      	adds	r2, #4
 8013f7a:	0015      	movs	r5, r2
 8013f7c:	3514      	adds	r5, #20
 8013f7e:	6841      	ldr	r1, [r0, #4]
 8013f80:	429d      	cmp	r5, r3
 8013f82:	d919      	bls.n	8013fb8 <_dtoa_r+0x2b0>
 8013f84:	0038      	movs	r0, r7
 8013f86:	f000 ff31 	bl	8014dec <_Balloc>
 8013f8a:	9006      	str	r0, [sp, #24]
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d117      	bne.n	8013fc0 <_dtoa_r+0x2b8>
 8013f90:	21d5      	movs	r1, #213	; 0xd5
 8013f92:	0002      	movs	r2, r0
 8013f94:	4b43      	ldr	r3, [pc, #268]	; (80140a4 <_dtoa_r+0x39c>)
 8013f96:	0049      	lsls	r1, r1, #1
 8013f98:	e6cb      	b.n	8013d32 <_dtoa_r+0x2a>
 8013f9a:	2301      	movs	r3, #1
 8013f9c:	e7de      	b.n	8013f5c <_dtoa_r+0x254>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	940f      	str	r4, [sp, #60]	; 0x3c
 8013fa2:	9322      	str	r3, [sp, #136]	; 0x88
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8013fa8:	9307      	str	r3, [sp, #28]
 8013faa:	2200      	movs	r2, #0
 8013fac:	3313      	adds	r3, #19
 8013fae:	e7d0      	b.n	8013f52 <_dtoa_r+0x24a>
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fb4:	3b02      	subs	r3, #2
 8013fb6:	e7f6      	b.n	8013fa6 <_dtoa_r+0x29e>
 8013fb8:	3101      	adds	r1, #1
 8013fba:	6041      	str	r1, [r0, #4]
 8013fbc:	0052      	lsls	r2, r2, #1
 8013fbe:	e7dc      	b.n	8013f7a <_dtoa_r+0x272>
 8013fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc2:	9a06      	ldr	r2, [sp, #24]
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	9b07      	ldr	r3, [sp, #28]
 8013fc8:	2b0e      	cmp	r3, #14
 8013fca:	d900      	bls.n	8013fce <_dtoa_r+0x2c6>
 8013fcc:	e0eb      	b.n	80141a6 <_dtoa_r+0x49e>
 8013fce:	2c00      	cmp	r4, #0
 8013fd0:	d100      	bne.n	8013fd4 <_dtoa_r+0x2cc>
 8013fd2:	e0e8      	b.n	80141a6 <_dtoa_r+0x49e>
 8013fd4:	9b02      	ldr	r3, [sp, #8]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	dd68      	ble.n	80140ac <_dtoa_r+0x3a4>
 8013fda:	001a      	movs	r2, r3
 8013fdc:	210f      	movs	r1, #15
 8013fde:	4b2d      	ldr	r3, [pc, #180]	; (8014094 <_dtoa_r+0x38c>)
 8013fe0:	400a      	ands	r2, r1
 8013fe2:	00d2      	lsls	r2, r2, #3
 8013fe4:	189b      	adds	r3, r3, r2
 8013fe6:	681d      	ldr	r5, [r3, #0]
 8013fe8:	685e      	ldr	r6, [r3, #4]
 8013fea:	9b02      	ldr	r3, [sp, #8]
 8013fec:	111c      	asrs	r4, r3, #4
 8013fee:	2302      	movs	r3, #2
 8013ff0:	9310      	str	r3, [sp, #64]	; 0x40
 8013ff2:	9b02      	ldr	r3, [sp, #8]
 8013ff4:	05db      	lsls	r3, r3, #23
 8013ff6:	d50b      	bpl.n	8014010 <_dtoa_r+0x308>
 8013ff8:	4b2b      	ldr	r3, [pc, #172]	; (80140a8 <_dtoa_r+0x3a0>)
 8013ffa:	400c      	ands	r4, r1
 8013ffc:	6a1a      	ldr	r2, [r3, #32]
 8013ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014000:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014002:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014004:	f7ec fd8c 	bl	8000b20 <__aeabi_ddiv>
 8014008:	2303      	movs	r3, #3
 801400a:	9008      	str	r0, [sp, #32]
 801400c:	9109      	str	r1, [sp, #36]	; 0x24
 801400e:	9310      	str	r3, [sp, #64]	; 0x40
 8014010:	4b25      	ldr	r3, [pc, #148]	; (80140a8 <_dtoa_r+0x3a0>)
 8014012:	9314      	str	r3, [sp, #80]	; 0x50
 8014014:	2c00      	cmp	r4, #0
 8014016:	d108      	bne.n	801402a <_dtoa_r+0x322>
 8014018:	9808      	ldr	r0, [sp, #32]
 801401a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801401c:	002a      	movs	r2, r5
 801401e:	0033      	movs	r3, r6
 8014020:	f7ec fd7e 	bl	8000b20 <__aeabi_ddiv>
 8014024:	9008      	str	r0, [sp, #32]
 8014026:	9109      	str	r1, [sp, #36]	; 0x24
 8014028:	e05c      	b.n	80140e4 <_dtoa_r+0x3dc>
 801402a:	2301      	movs	r3, #1
 801402c:	421c      	tst	r4, r3
 801402e:	d00b      	beq.n	8014048 <_dtoa_r+0x340>
 8014030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014032:	0028      	movs	r0, r5
 8014034:	3301      	adds	r3, #1
 8014036:	9310      	str	r3, [sp, #64]	; 0x40
 8014038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801403a:	0031      	movs	r1, r6
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	f7ed f970 	bl	8001324 <__aeabi_dmul>
 8014044:	0005      	movs	r5, r0
 8014046:	000e      	movs	r6, r1
 8014048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801404a:	1064      	asrs	r4, r4, #1
 801404c:	3308      	adds	r3, #8
 801404e:	e7e0      	b.n	8014012 <_dtoa_r+0x30a>
 8014050:	08016c32 	.word	0x08016c32
 8014054:	08016c49 	.word	0x08016c49
 8014058:	7ff00000 	.word	0x7ff00000
 801405c:	0000270f 	.word	0x0000270f
 8014060:	08016c2e 	.word	0x08016c2e
 8014064:	08016c31 	.word	0x08016c31
 8014068:	08016b00 	.word	0x08016b00
 801406c:	08016b01 	.word	0x08016b01
 8014070:	3ff00000 	.word	0x3ff00000
 8014074:	fffffc01 	.word	0xfffffc01
 8014078:	3ff80000 	.word	0x3ff80000
 801407c:	636f4361 	.word	0x636f4361
 8014080:	3fd287a7 	.word	0x3fd287a7
 8014084:	8b60c8b3 	.word	0x8b60c8b3
 8014088:	3fc68a28 	.word	0x3fc68a28
 801408c:	509f79fb 	.word	0x509f79fb
 8014090:	3fd34413 	.word	0x3fd34413
 8014094:	08016da0 	.word	0x08016da0
 8014098:	00000432 	.word	0x00000432
 801409c:	00000412 	.word	0x00000412
 80140a0:	fe100000 	.word	0xfe100000
 80140a4:	08016ca4 	.word	0x08016ca4
 80140a8:	08016d78 	.word	0x08016d78
 80140ac:	2302      	movs	r3, #2
 80140ae:	9310      	str	r3, [sp, #64]	; 0x40
 80140b0:	9b02      	ldr	r3, [sp, #8]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d016      	beq.n	80140e4 <_dtoa_r+0x3dc>
 80140b6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80140b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80140ba:	425c      	negs	r4, r3
 80140bc:	230f      	movs	r3, #15
 80140be:	4ab6      	ldr	r2, [pc, #728]	; (8014398 <_dtoa_r+0x690>)
 80140c0:	4023      	ands	r3, r4
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	18d3      	adds	r3, r2, r3
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	f7ed f92b 	bl	8001324 <__aeabi_dmul>
 80140ce:	2601      	movs	r6, #1
 80140d0:	2300      	movs	r3, #0
 80140d2:	9008      	str	r0, [sp, #32]
 80140d4:	9109      	str	r1, [sp, #36]	; 0x24
 80140d6:	4db1      	ldr	r5, [pc, #708]	; (801439c <_dtoa_r+0x694>)
 80140d8:	1124      	asrs	r4, r4, #4
 80140da:	2c00      	cmp	r4, #0
 80140dc:	d000      	beq.n	80140e0 <_dtoa_r+0x3d8>
 80140de:	e094      	b.n	801420a <_dtoa_r+0x502>
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d19f      	bne.n	8014024 <_dtoa_r+0x31c>
 80140e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d100      	bne.n	80140ec <_dtoa_r+0x3e4>
 80140ea:	e09b      	b.n	8014224 <_dtoa_r+0x51c>
 80140ec:	9c08      	ldr	r4, [sp, #32]
 80140ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80140f0:	2200      	movs	r2, #0
 80140f2:	0020      	movs	r0, r4
 80140f4:	0029      	movs	r1, r5
 80140f6:	4baa      	ldr	r3, [pc, #680]	; (80143a0 <_dtoa_r+0x698>)
 80140f8:	f7ec f9ae 	bl	8000458 <__aeabi_dcmplt>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d100      	bne.n	8014102 <_dtoa_r+0x3fa>
 8014100:	e090      	b.n	8014224 <_dtoa_r+0x51c>
 8014102:	9b07      	ldr	r3, [sp, #28]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d100      	bne.n	801410a <_dtoa_r+0x402>
 8014108:	e08c      	b.n	8014224 <_dtoa_r+0x51c>
 801410a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801410c:	2b00      	cmp	r3, #0
 801410e:	dd46      	ble.n	801419e <_dtoa_r+0x496>
 8014110:	9b02      	ldr	r3, [sp, #8]
 8014112:	2200      	movs	r2, #0
 8014114:	0020      	movs	r0, r4
 8014116:	0029      	movs	r1, r5
 8014118:	1e5e      	subs	r6, r3, #1
 801411a:	4ba2      	ldr	r3, [pc, #648]	; (80143a4 <_dtoa_r+0x69c>)
 801411c:	f7ed f902 	bl	8001324 <__aeabi_dmul>
 8014120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014122:	9008      	str	r0, [sp, #32]
 8014124:	9109      	str	r1, [sp, #36]	; 0x24
 8014126:	3301      	adds	r3, #1
 8014128:	9310      	str	r3, [sp, #64]	; 0x40
 801412a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801412c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801412e:	9c08      	ldr	r4, [sp, #32]
 8014130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014132:	9314      	str	r3, [sp, #80]	; 0x50
 8014134:	f7ed ff48 	bl	8001fc8 <__aeabi_i2d>
 8014138:	0022      	movs	r2, r4
 801413a:	002b      	movs	r3, r5
 801413c:	f7ed f8f2 	bl	8001324 <__aeabi_dmul>
 8014140:	2200      	movs	r2, #0
 8014142:	4b99      	ldr	r3, [pc, #612]	; (80143a8 <_dtoa_r+0x6a0>)
 8014144:	f7ec f9b0 	bl	80004a8 <__aeabi_dadd>
 8014148:	9010      	str	r0, [sp, #64]	; 0x40
 801414a:	9111      	str	r1, [sp, #68]	; 0x44
 801414c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801414e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014150:	9208      	str	r2, [sp, #32]
 8014152:	9309      	str	r3, [sp, #36]	; 0x24
 8014154:	4a95      	ldr	r2, [pc, #596]	; (80143ac <_dtoa_r+0x6a4>)
 8014156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014158:	4694      	mov	ip, r2
 801415a:	4463      	add	r3, ip
 801415c:	9317      	str	r3, [sp, #92]	; 0x5c
 801415e:	9309      	str	r3, [sp, #36]	; 0x24
 8014160:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014162:	2b00      	cmp	r3, #0
 8014164:	d161      	bne.n	801422a <_dtoa_r+0x522>
 8014166:	2200      	movs	r2, #0
 8014168:	0020      	movs	r0, r4
 801416a:	0029      	movs	r1, r5
 801416c:	4b90      	ldr	r3, [pc, #576]	; (80143b0 <_dtoa_r+0x6a8>)
 801416e:	f7ed fb45 	bl	80017fc <__aeabi_dsub>
 8014172:	9a08      	ldr	r2, [sp, #32]
 8014174:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014176:	0004      	movs	r4, r0
 8014178:	000d      	movs	r5, r1
 801417a:	f7ec f981 	bl	8000480 <__aeabi_dcmpgt>
 801417e:	2800      	cmp	r0, #0
 8014180:	d000      	beq.n	8014184 <_dtoa_r+0x47c>
 8014182:	e2af      	b.n	80146e4 <_dtoa_r+0x9dc>
 8014184:	488b      	ldr	r0, [pc, #556]	; (80143b4 <_dtoa_r+0x6ac>)
 8014186:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014188:	4684      	mov	ip, r0
 801418a:	4461      	add	r1, ip
 801418c:	000b      	movs	r3, r1
 801418e:	0020      	movs	r0, r4
 8014190:	0029      	movs	r1, r5
 8014192:	9a08      	ldr	r2, [sp, #32]
 8014194:	f7ec f960 	bl	8000458 <__aeabi_dcmplt>
 8014198:	2800      	cmp	r0, #0
 801419a:	d000      	beq.n	801419e <_dtoa_r+0x496>
 801419c:	e29f      	b.n	80146de <_dtoa_r+0x9d6>
 801419e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80141a2:	9308      	str	r3, [sp, #32]
 80141a4:	9409      	str	r4, [sp, #36]	; 0x24
 80141a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	da00      	bge.n	80141ae <_dtoa_r+0x4a6>
 80141ac:	e172      	b.n	8014494 <_dtoa_r+0x78c>
 80141ae:	9a02      	ldr	r2, [sp, #8]
 80141b0:	2a0e      	cmp	r2, #14
 80141b2:	dd00      	ble.n	80141b6 <_dtoa_r+0x4ae>
 80141b4:	e16e      	b.n	8014494 <_dtoa_r+0x78c>
 80141b6:	4b78      	ldr	r3, [pc, #480]	; (8014398 <_dtoa_r+0x690>)
 80141b8:	00d2      	lsls	r2, r2, #3
 80141ba:	189b      	adds	r3, r3, r2
 80141bc:	685c      	ldr	r4, [r3, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	930a      	str	r3, [sp, #40]	; 0x28
 80141c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80141c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	db00      	blt.n	80141cc <_dtoa_r+0x4c4>
 80141ca:	e0f7      	b.n	80143bc <_dtoa_r+0x6b4>
 80141cc:	9b07      	ldr	r3, [sp, #28]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	dd00      	ble.n	80141d4 <_dtoa_r+0x4cc>
 80141d2:	e0f3      	b.n	80143bc <_dtoa_r+0x6b4>
 80141d4:	d000      	beq.n	80141d8 <_dtoa_r+0x4d0>
 80141d6:	e282      	b.n	80146de <_dtoa_r+0x9d6>
 80141d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141dc:	2200      	movs	r2, #0
 80141de:	4b74      	ldr	r3, [pc, #464]	; (80143b0 <_dtoa_r+0x6a8>)
 80141e0:	f7ed f8a0 	bl	8001324 <__aeabi_dmul>
 80141e4:	9a08      	ldr	r2, [sp, #32]
 80141e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e8:	f7ec f954 	bl	8000494 <__aeabi_dcmpge>
 80141ec:	9e07      	ldr	r6, [sp, #28]
 80141ee:	0035      	movs	r5, r6
 80141f0:	2800      	cmp	r0, #0
 80141f2:	d000      	beq.n	80141f6 <_dtoa_r+0x4ee>
 80141f4:	e259      	b.n	80146aa <_dtoa_r+0x9a2>
 80141f6:	9b06      	ldr	r3, [sp, #24]
 80141f8:	9a06      	ldr	r2, [sp, #24]
 80141fa:	3301      	adds	r3, #1
 80141fc:	9308      	str	r3, [sp, #32]
 80141fe:	2331      	movs	r3, #49	; 0x31
 8014200:	7013      	strb	r3, [r2, #0]
 8014202:	9b02      	ldr	r3, [sp, #8]
 8014204:	3301      	adds	r3, #1
 8014206:	9302      	str	r3, [sp, #8]
 8014208:	e254      	b.n	80146b4 <_dtoa_r+0x9ac>
 801420a:	4234      	tst	r4, r6
 801420c:	d007      	beq.n	801421e <_dtoa_r+0x516>
 801420e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014210:	3301      	adds	r3, #1
 8014212:	9310      	str	r3, [sp, #64]	; 0x40
 8014214:	682a      	ldr	r2, [r5, #0]
 8014216:	686b      	ldr	r3, [r5, #4]
 8014218:	f7ed f884 	bl	8001324 <__aeabi_dmul>
 801421c:	0033      	movs	r3, r6
 801421e:	1064      	asrs	r4, r4, #1
 8014220:	3508      	adds	r5, #8
 8014222:	e75a      	b.n	80140da <_dtoa_r+0x3d2>
 8014224:	9e02      	ldr	r6, [sp, #8]
 8014226:	9b07      	ldr	r3, [sp, #28]
 8014228:	e780      	b.n	801412c <_dtoa_r+0x424>
 801422a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801422c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801422e:	1e5a      	subs	r2, r3, #1
 8014230:	4b59      	ldr	r3, [pc, #356]	; (8014398 <_dtoa_r+0x690>)
 8014232:	00d2      	lsls	r2, r2, #3
 8014234:	189b      	adds	r3, r3, r2
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	2900      	cmp	r1, #0
 801423c:	d051      	beq.n	80142e2 <_dtoa_r+0x5da>
 801423e:	2000      	movs	r0, #0
 8014240:	495d      	ldr	r1, [pc, #372]	; (80143b8 <_dtoa_r+0x6b0>)
 8014242:	f7ec fc6d 	bl	8000b20 <__aeabi_ddiv>
 8014246:	9a08      	ldr	r2, [sp, #32]
 8014248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424a:	f7ed fad7 	bl	80017fc <__aeabi_dsub>
 801424e:	9a06      	ldr	r2, [sp, #24]
 8014250:	9b06      	ldr	r3, [sp, #24]
 8014252:	4694      	mov	ip, r2
 8014254:	9317      	str	r3, [sp, #92]	; 0x5c
 8014256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014258:	9010      	str	r0, [sp, #64]	; 0x40
 801425a:	9111      	str	r1, [sp, #68]	; 0x44
 801425c:	4463      	add	r3, ip
 801425e:	9319      	str	r3, [sp, #100]	; 0x64
 8014260:	0029      	movs	r1, r5
 8014262:	0020      	movs	r0, r4
 8014264:	f7ed fe7a 	bl	8001f5c <__aeabi_d2iz>
 8014268:	9014      	str	r0, [sp, #80]	; 0x50
 801426a:	f7ed fead 	bl	8001fc8 <__aeabi_i2d>
 801426e:	0002      	movs	r2, r0
 8014270:	000b      	movs	r3, r1
 8014272:	0020      	movs	r0, r4
 8014274:	0029      	movs	r1, r5
 8014276:	f7ed fac1 	bl	80017fc <__aeabi_dsub>
 801427a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801427c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801427e:	3301      	adds	r3, #1
 8014280:	9308      	str	r3, [sp, #32]
 8014282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014284:	0004      	movs	r4, r0
 8014286:	3330      	adds	r3, #48	; 0x30
 8014288:	7013      	strb	r3, [r2, #0]
 801428a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801428c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801428e:	000d      	movs	r5, r1
 8014290:	f7ec f8e2 	bl	8000458 <__aeabi_dcmplt>
 8014294:	2800      	cmp	r0, #0
 8014296:	d175      	bne.n	8014384 <_dtoa_r+0x67c>
 8014298:	0022      	movs	r2, r4
 801429a:	002b      	movs	r3, r5
 801429c:	2000      	movs	r0, #0
 801429e:	4940      	ldr	r1, [pc, #256]	; (80143a0 <_dtoa_r+0x698>)
 80142a0:	f7ed faac 	bl	80017fc <__aeabi_dsub>
 80142a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142a8:	f7ec f8d6 	bl	8000458 <__aeabi_dcmplt>
 80142ac:	2800      	cmp	r0, #0
 80142ae:	d000      	beq.n	80142b2 <_dtoa_r+0x5aa>
 80142b0:	e0d2      	b.n	8014458 <_dtoa_r+0x750>
 80142b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142b4:	9a08      	ldr	r2, [sp, #32]
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d100      	bne.n	80142bc <_dtoa_r+0x5b4>
 80142ba:	e770      	b.n	801419e <_dtoa_r+0x496>
 80142bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80142be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80142c0:	2200      	movs	r2, #0
 80142c2:	4b38      	ldr	r3, [pc, #224]	; (80143a4 <_dtoa_r+0x69c>)
 80142c4:	f7ed f82e 	bl	8001324 <__aeabi_dmul>
 80142c8:	4b36      	ldr	r3, [pc, #216]	; (80143a4 <_dtoa_r+0x69c>)
 80142ca:	9010      	str	r0, [sp, #64]	; 0x40
 80142cc:	9111      	str	r1, [sp, #68]	; 0x44
 80142ce:	2200      	movs	r2, #0
 80142d0:	0020      	movs	r0, r4
 80142d2:	0029      	movs	r1, r5
 80142d4:	f7ed f826 	bl	8001324 <__aeabi_dmul>
 80142d8:	9b08      	ldr	r3, [sp, #32]
 80142da:	0004      	movs	r4, r0
 80142dc:	000d      	movs	r5, r1
 80142de:	9317      	str	r3, [sp, #92]	; 0x5c
 80142e0:	e7be      	b.n	8014260 <_dtoa_r+0x558>
 80142e2:	9808      	ldr	r0, [sp, #32]
 80142e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142e6:	f7ed f81d 	bl	8001324 <__aeabi_dmul>
 80142ea:	9a06      	ldr	r2, [sp, #24]
 80142ec:	9b06      	ldr	r3, [sp, #24]
 80142ee:	4694      	mov	ip, r2
 80142f0:	9308      	str	r3, [sp, #32]
 80142f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80142f4:	9010      	str	r0, [sp, #64]	; 0x40
 80142f6:	9111      	str	r1, [sp, #68]	; 0x44
 80142f8:	4463      	add	r3, ip
 80142fa:	9319      	str	r3, [sp, #100]	; 0x64
 80142fc:	0029      	movs	r1, r5
 80142fe:	0020      	movs	r0, r4
 8014300:	f7ed fe2c 	bl	8001f5c <__aeabi_d2iz>
 8014304:	9017      	str	r0, [sp, #92]	; 0x5c
 8014306:	f7ed fe5f 	bl	8001fc8 <__aeabi_i2d>
 801430a:	0002      	movs	r2, r0
 801430c:	000b      	movs	r3, r1
 801430e:	0020      	movs	r0, r4
 8014310:	0029      	movs	r1, r5
 8014312:	f7ed fa73 	bl	80017fc <__aeabi_dsub>
 8014316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014318:	9a08      	ldr	r2, [sp, #32]
 801431a:	3330      	adds	r3, #48	; 0x30
 801431c:	7013      	strb	r3, [r2, #0]
 801431e:	0013      	movs	r3, r2
 8014320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014322:	3301      	adds	r3, #1
 8014324:	0004      	movs	r4, r0
 8014326:	000d      	movs	r5, r1
 8014328:	9308      	str	r3, [sp, #32]
 801432a:	4293      	cmp	r3, r2
 801432c:	d12c      	bne.n	8014388 <_dtoa_r+0x680>
 801432e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014330:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014332:	9a06      	ldr	r2, [sp, #24]
 8014334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014336:	4694      	mov	ip, r2
 8014338:	4463      	add	r3, ip
 801433a:	2200      	movs	r2, #0
 801433c:	9308      	str	r3, [sp, #32]
 801433e:	4b1e      	ldr	r3, [pc, #120]	; (80143b8 <_dtoa_r+0x6b0>)
 8014340:	f7ec f8b2 	bl	80004a8 <__aeabi_dadd>
 8014344:	0002      	movs	r2, r0
 8014346:	000b      	movs	r3, r1
 8014348:	0020      	movs	r0, r4
 801434a:	0029      	movs	r1, r5
 801434c:	f7ec f898 	bl	8000480 <__aeabi_dcmpgt>
 8014350:	2800      	cmp	r0, #0
 8014352:	d000      	beq.n	8014356 <_dtoa_r+0x64e>
 8014354:	e080      	b.n	8014458 <_dtoa_r+0x750>
 8014356:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801435a:	2000      	movs	r0, #0
 801435c:	4916      	ldr	r1, [pc, #88]	; (80143b8 <_dtoa_r+0x6b0>)
 801435e:	f7ed fa4d 	bl	80017fc <__aeabi_dsub>
 8014362:	0002      	movs	r2, r0
 8014364:	000b      	movs	r3, r1
 8014366:	0020      	movs	r0, r4
 8014368:	0029      	movs	r1, r5
 801436a:	f7ec f875 	bl	8000458 <__aeabi_dcmplt>
 801436e:	2800      	cmp	r0, #0
 8014370:	d100      	bne.n	8014374 <_dtoa_r+0x66c>
 8014372:	e714      	b.n	801419e <_dtoa_r+0x496>
 8014374:	9b08      	ldr	r3, [sp, #32]
 8014376:	001a      	movs	r2, r3
 8014378:	3a01      	subs	r2, #1
 801437a:	9208      	str	r2, [sp, #32]
 801437c:	7812      	ldrb	r2, [r2, #0]
 801437e:	2a30      	cmp	r2, #48	; 0x30
 8014380:	d0f8      	beq.n	8014374 <_dtoa_r+0x66c>
 8014382:	9308      	str	r3, [sp, #32]
 8014384:	9602      	str	r6, [sp, #8]
 8014386:	e055      	b.n	8014434 <_dtoa_r+0x72c>
 8014388:	2200      	movs	r2, #0
 801438a:	4b06      	ldr	r3, [pc, #24]	; (80143a4 <_dtoa_r+0x69c>)
 801438c:	f7ec ffca 	bl	8001324 <__aeabi_dmul>
 8014390:	0004      	movs	r4, r0
 8014392:	000d      	movs	r5, r1
 8014394:	e7b2      	b.n	80142fc <_dtoa_r+0x5f4>
 8014396:	46c0      	nop			; (mov r8, r8)
 8014398:	08016da0 	.word	0x08016da0
 801439c:	08016d78 	.word	0x08016d78
 80143a0:	3ff00000 	.word	0x3ff00000
 80143a4:	40240000 	.word	0x40240000
 80143a8:	401c0000 	.word	0x401c0000
 80143ac:	fcc00000 	.word	0xfcc00000
 80143b0:	40140000 	.word	0x40140000
 80143b4:	7cc00000 	.word	0x7cc00000
 80143b8:	3fe00000 	.word	0x3fe00000
 80143bc:	9b07      	ldr	r3, [sp, #28]
 80143be:	9e06      	ldr	r6, [sp, #24]
 80143c0:	3b01      	subs	r3, #1
 80143c2:	199b      	adds	r3, r3, r6
 80143c4:	930c      	str	r3, [sp, #48]	; 0x30
 80143c6:	9c08      	ldr	r4, [sp, #32]
 80143c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80143ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143ce:	0020      	movs	r0, r4
 80143d0:	0029      	movs	r1, r5
 80143d2:	f7ec fba5 	bl	8000b20 <__aeabi_ddiv>
 80143d6:	f7ed fdc1 	bl	8001f5c <__aeabi_d2iz>
 80143da:	9007      	str	r0, [sp, #28]
 80143dc:	f7ed fdf4 	bl	8001fc8 <__aeabi_i2d>
 80143e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143e4:	f7ec ff9e 	bl	8001324 <__aeabi_dmul>
 80143e8:	0002      	movs	r2, r0
 80143ea:	000b      	movs	r3, r1
 80143ec:	0020      	movs	r0, r4
 80143ee:	0029      	movs	r1, r5
 80143f0:	f7ed fa04 	bl	80017fc <__aeabi_dsub>
 80143f4:	0033      	movs	r3, r6
 80143f6:	9a07      	ldr	r2, [sp, #28]
 80143f8:	3601      	adds	r6, #1
 80143fa:	3230      	adds	r2, #48	; 0x30
 80143fc:	701a      	strb	r2, [r3, #0]
 80143fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014400:	9608      	str	r6, [sp, #32]
 8014402:	429a      	cmp	r2, r3
 8014404:	d139      	bne.n	801447a <_dtoa_r+0x772>
 8014406:	0002      	movs	r2, r0
 8014408:	000b      	movs	r3, r1
 801440a:	f7ec f84d 	bl	80004a8 <__aeabi_dadd>
 801440e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014412:	0004      	movs	r4, r0
 8014414:	000d      	movs	r5, r1
 8014416:	f7ec f833 	bl	8000480 <__aeabi_dcmpgt>
 801441a:	2800      	cmp	r0, #0
 801441c:	d11b      	bne.n	8014456 <_dtoa_r+0x74e>
 801441e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014422:	0020      	movs	r0, r4
 8014424:	0029      	movs	r1, r5
 8014426:	f7ec f811 	bl	800044c <__aeabi_dcmpeq>
 801442a:	2800      	cmp	r0, #0
 801442c:	d002      	beq.n	8014434 <_dtoa_r+0x72c>
 801442e:	9b07      	ldr	r3, [sp, #28]
 8014430:	07db      	lsls	r3, r3, #31
 8014432:	d410      	bmi.n	8014456 <_dtoa_r+0x74e>
 8014434:	0038      	movs	r0, r7
 8014436:	9905      	ldr	r1, [sp, #20]
 8014438:	f000 fd1c 	bl	8014e74 <_Bfree>
 801443c:	2300      	movs	r3, #0
 801443e:	9a08      	ldr	r2, [sp, #32]
 8014440:	9802      	ldr	r0, [sp, #8]
 8014442:	7013      	strb	r3, [r2, #0]
 8014444:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014446:	3001      	adds	r0, #1
 8014448:	6018      	str	r0, [r3, #0]
 801444a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801444c:	2b00      	cmp	r3, #0
 801444e:	d100      	bne.n	8014452 <_dtoa_r+0x74a>
 8014450:	e4a6      	b.n	8013da0 <_dtoa_r+0x98>
 8014452:	601a      	str	r2, [r3, #0]
 8014454:	e4a4      	b.n	8013da0 <_dtoa_r+0x98>
 8014456:	9e02      	ldr	r6, [sp, #8]
 8014458:	9b08      	ldr	r3, [sp, #32]
 801445a:	9308      	str	r3, [sp, #32]
 801445c:	3b01      	subs	r3, #1
 801445e:	781a      	ldrb	r2, [r3, #0]
 8014460:	2a39      	cmp	r2, #57	; 0x39
 8014462:	d106      	bne.n	8014472 <_dtoa_r+0x76a>
 8014464:	9a06      	ldr	r2, [sp, #24]
 8014466:	429a      	cmp	r2, r3
 8014468:	d1f7      	bne.n	801445a <_dtoa_r+0x752>
 801446a:	2230      	movs	r2, #48	; 0x30
 801446c:	9906      	ldr	r1, [sp, #24]
 801446e:	3601      	adds	r6, #1
 8014470:	700a      	strb	r2, [r1, #0]
 8014472:	781a      	ldrb	r2, [r3, #0]
 8014474:	3201      	adds	r2, #1
 8014476:	701a      	strb	r2, [r3, #0]
 8014478:	e784      	b.n	8014384 <_dtoa_r+0x67c>
 801447a:	2200      	movs	r2, #0
 801447c:	4baa      	ldr	r3, [pc, #680]	; (8014728 <_dtoa_r+0xa20>)
 801447e:	f7ec ff51 	bl	8001324 <__aeabi_dmul>
 8014482:	2200      	movs	r2, #0
 8014484:	2300      	movs	r3, #0
 8014486:	0004      	movs	r4, r0
 8014488:	000d      	movs	r5, r1
 801448a:	f7eb ffdf 	bl	800044c <__aeabi_dcmpeq>
 801448e:	2800      	cmp	r0, #0
 8014490:	d09b      	beq.n	80143ca <_dtoa_r+0x6c2>
 8014492:	e7cf      	b.n	8014434 <_dtoa_r+0x72c>
 8014494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014496:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014498:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801449a:	2d00      	cmp	r5, #0
 801449c:	d012      	beq.n	80144c4 <_dtoa_r+0x7bc>
 801449e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80144a0:	2a01      	cmp	r2, #1
 80144a2:	dc66      	bgt.n	8014572 <_dtoa_r+0x86a>
 80144a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80144a6:	2a00      	cmp	r2, #0
 80144a8:	d05d      	beq.n	8014566 <_dtoa_r+0x85e>
 80144aa:	4aa0      	ldr	r2, [pc, #640]	; (801472c <_dtoa_r+0xa24>)
 80144ac:	189b      	adds	r3, r3, r2
 80144ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144b0:	2101      	movs	r1, #1
 80144b2:	18d2      	adds	r2, r2, r3
 80144b4:	920a      	str	r2, [sp, #40]	; 0x28
 80144b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144b8:	0038      	movs	r0, r7
 80144ba:	18d3      	adds	r3, r2, r3
 80144bc:	930d      	str	r3, [sp, #52]	; 0x34
 80144be:	f000 fd89 	bl	8014fd4 <__i2b>
 80144c2:	0005      	movs	r5, r0
 80144c4:	2c00      	cmp	r4, #0
 80144c6:	dd0e      	ble.n	80144e6 <_dtoa_r+0x7de>
 80144c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	dd0b      	ble.n	80144e6 <_dtoa_r+0x7de>
 80144ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144d0:	0023      	movs	r3, r4
 80144d2:	4294      	cmp	r4, r2
 80144d4:	dd00      	ble.n	80144d8 <_dtoa_r+0x7d0>
 80144d6:	0013      	movs	r3, r2
 80144d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144da:	1ae4      	subs	r4, r4, r3
 80144dc:	1ad2      	subs	r2, r2, r3
 80144de:	920a      	str	r2, [sp, #40]	; 0x28
 80144e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	930d      	str	r3, [sp, #52]	; 0x34
 80144e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d01f      	beq.n	801452c <_dtoa_r+0x824>
 80144ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d054      	beq.n	801459c <_dtoa_r+0x894>
 80144f2:	2e00      	cmp	r6, #0
 80144f4:	dd11      	ble.n	801451a <_dtoa_r+0x812>
 80144f6:	0029      	movs	r1, r5
 80144f8:	0032      	movs	r2, r6
 80144fa:	0038      	movs	r0, r7
 80144fc:	f000 fe30 	bl	8015160 <__pow5mult>
 8014500:	9a05      	ldr	r2, [sp, #20]
 8014502:	0001      	movs	r1, r0
 8014504:	0005      	movs	r5, r0
 8014506:	0038      	movs	r0, r7
 8014508:	f000 fd7a 	bl	8015000 <__multiply>
 801450c:	9905      	ldr	r1, [sp, #20]
 801450e:	9014      	str	r0, [sp, #80]	; 0x50
 8014510:	0038      	movs	r0, r7
 8014512:	f000 fcaf 	bl	8014e74 <_Bfree>
 8014516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014518:	9305      	str	r3, [sp, #20]
 801451a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801451c:	1b9a      	subs	r2, r3, r6
 801451e:	42b3      	cmp	r3, r6
 8014520:	d004      	beq.n	801452c <_dtoa_r+0x824>
 8014522:	0038      	movs	r0, r7
 8014524:	9905      	ldr	r1, [sp, #20]
 8014526:	f000 fe1b 	bl	8015160 <__pow5mult>
 801452a:	9005      	str	r0, [sp, #20]
 801452c:	2101      	movs	r1, #1
 801452e:	0038      	movs	r0, r7
 8014530:	f000 fd50 	bl	8014fd4 <__i2b>
 8014534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014536:	0006      	movs	r6, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	dd31      	ble.n	80145a0 <_dtoa_r+0x898>
 801453c:	001a      	movs	r2, r3
 801453e:	0001      	movs	r1, r0
 8014540:	0038      	movs	r0, r7
 8014542:	f000 fe0d 	bl	8015160 <__pow5mult>
 8014546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014548:	0006      	movs	r6, r0
 801454a:	2b01      	cmp	r3, #1
 801454c:	dd2d      	ble.n	80145aa <_dtoa_r+0x8a2>
 801454e:	2300      	movs	r3, #0
 8014550:	930e      	str	r3, [sp, #56]	; 0x38
 8014552:	6933      	ldr	r3, [r6, #16]
 8014554:	3303      	adds	r3, #3
 8014556:	009b      	lsls	r3, r3, #2
 8014558:	18f3      	adds	r3, r6, r3
 801455a:	6858      	ldr	r0, [r3, #4]
 801455c:	f000 fcf2 	bl	8014f44 <__hi0bits>
 8014560:	2320      	movs	r3, #32
 8014562:	1a18      	subs	r0, r3, r0
 8014564:	e039      	b.n	80145da <_dtoa_r+0x8d2>
 8014566:	2336      	movs	r3, #54	; 0x36
 8014568:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801456a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801456c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801456e:	1a9b      	subs	r3, r3, r2
 8014570:	e79d      	b.n	80144ae <_dtoa_r+0x7a6>
 8014572:	9b07      	ldr	r3, [sp, #28]
 8014574:	1e5e      	subs	r6, r3, #1
 8014576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014578:	42b3      	cmp	r3, r6
 801457a:	db07      	blt.n	801458c <_dtoa_r+0x884>
 801457c:	1b9e      	subs	r6, r3, r6
 801457e:	9b07      	ldr	r3, [sp, #28]
 8014580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014582:	2b00      	cmp	r3, #0
 8014584:	da93      	bge.n	80144ae <_dtoa_r+0x7a6>
 8014586:	1ae4      	subs	r4, r4, r3
 8014588:	2300      	movs	r3, #0
 801458a:	e790      	b.n	80144ae <_dtoa_r+0x7a6>
 801458c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801458e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014590:	1af3      	subs	r3, r6, r3
 8014592:	18d3      	adds	r3, r2, r3
 8014594:	960e      	str	r6, [sp, #56]	; 0x38
 8014596:	9315      	str	r3, [sp, #84]	; 0x54
 8014598:	2600      	movs	r6, #0
 801459a:	e7f0      	b.n	801457e <_dtoa_r+0x876>
 801459c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801459e:	e7c0      	b.n	8014522 <_dtoa_r+0x81a>
 80145a0:	2300      	movs	r3, #0
 80145a2:	930e      	str	r3, [sp, #56]	; 0x38
 80145a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	dc13      	bgt.n	80145d2 <_dtoa_r+0x8ca>
 80145aa:	2300      	movs	r3, #0
 80145ac:	930e      	str	r3, [sp, #56]	; 0x38
 80145ae:	9b08      	ldr	r3, [sp, #32]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d10e      	bne.n	80145d2 <_dtoa_r+0x8ca>
 80145b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b6:	031b      	lsls	r3, r3, #12
 80145b8:	d10b      	bne.n	80145d2 <_dtoa_r+0x8ca>
 80145ba:	4b5d      	ldr	r3, [pc, #372]	; (8014730 <_dtoa_r+0xa28>)
 80145bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145be:	4213      	tst	r3, r2
 80145c0:	d007      	beq.n	80145d2 <_dtoa_r+0x8ca>
 80145c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145c4:	3301      	adds	r3, #1
 80145c6:	930a      	str	r3, [sp, #40]	; 0x28
 80145c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ca:	3301      	adds	r3, #1
 80145cc:	930d      	str	r3, [sp, #52]	; 0x34
 80145ce:	2301      	movs	r3, #1
 80145d0:	930e      	str	r3, [sp, #56]	; 0x38
 80145d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145d4:	2001      	movs	r0, #1
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1bb      	bne.n	8014552 <_dtoa_r+0x84a>
 80145da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145dc:	221f      	movs	r2, #31
 80145de:	1818      	adds	r0, r3, r0
 80145e0:	0003      	movs	r3, r0
 80145e2:	4013      	ands	r3, r2
 80145e4:	4210      	tst	r0, r2
 80145e6:	d046      	beq.n	8014676 <_dtoa_r+0x96e>
 80145e8:	3201      	adds	r2, #1
 80145ea:	1ad2      	subs	r2, r2, r3
 80145ec:	2a04      	cmp	r2, #4
 80145ee:	dd3f      	ble.n	8014670 <_dtoa_r+0x968>
 80145f0:	221c      	movs	r2, #28
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145f6:	18e4      	adds	r4, r4, r3
 80145f8:	18d2      	adds	r2, r2, r3
 80145fa:	920a      	str	r2, [sp, #40]	; 0x28
 80145fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145fe:	18d3      	adds	r3, r2, r3
 8014600:	930d      	str	r3, [sp, #52]	; 0x34
 8014602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014604:	2b00      	cmp	r3, #0
 8014606:	dd05      	ble.n	8014614 <_dtoa_r+0x90c>
 8014608:	001a      	movs	r2, r3
 801460a:	0038      	movs	r0, r7
 801460c:	9905      	ldr	r1, [sp, #20]
 801460e:	f000 fe03 	bl	8015218 <__lshift>
 8014612:	9005      	str	r0, [sp, #20]
 8014614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014616:	2b00      	cmp	r3, #0
 8014618:	dd05      	ble.n	8014626 <_dtoa_r+0x91e>
 801461a:	0031      	movs	r1, r6
 801461c:	001a      	movs	r2, r3
 801461e:	0038      	movs	r0, r7
 8014620:	f000 fdfa 	bl	8015218 <__lshift>
 8014624:	0006      	movs	r6, r0
 8014626:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014628:	2b00      	cmp	r3, #0
 801462a:	d026      	beq.n	801467a <_dtoa_r+0x972>
 801462c:	0031      	movs	r1, r6
 801462e:	9805      	ldr	r0, [sp, #20]
 8014630:	f000 fe60 	bl	80152f4 <__mcmp>
 8014634:	2800      	cmp	r0, #0
 8014636:	da20      	bge.n	801467a <_dtoa_r+0x972>
 8014638:	9b02      	ldr	r3, [sp, #8]
 801463a:	220a      	movs	r2, #10
 801463c:	3b01      	subs	r3, #1
 801463e:	9302      	str	r3, [sp, #8]
 8014640:	0038      	movs	r0, r7
 8014642:	2300      	movs	r3, #0
 8014644:	9905      	ldr	r1, [sp, #20]
 8014646:	f000 fc39 	bl	8014ebc <__multadd>
 801464a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801464c:	9005      	str	r0, [sp, #20]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d100      	bne.n	8014654 <_dtoa_r+0x94c>
 8014652:	e166      	b.n	8014922 <_dtoa_r+0xc1a>
 8014654:	2300      	movs	r3, #0
 8014656:	0029      	movs	r1, r5
 8014658:	220a      	movs	r2, #10
 801465a:	0038      	movs	r0, r7
 801465c:	f000 fc2e 	bl	8014ebc <__multadd>
 8014660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014662:	0005      	movs	r5, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	dc47      	bgt.n	80146f8 <_dtoa_r+0x9f0>
 8014668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801466a:	2b02      	cmp	r3, #2
 801466c:	dc0d      	bgt.n	801468a <_dtoa_r+0x982>
 801466e:	e043      	b.n	80146f8 <_dtoa_r+0x9f0>
 8014670:	2a04      	cmp	r2, #4
 8014672:	d0c6      	beq.n	8014602 <_dtoa_r+0x8fa>
 8014674:	0013      	movs	r3, r2
 8014676:	331c      	adds	r3, #28
 8014678:	e7bc      	b.n	80145f4 <_dtoa_r+0x8ec>
 801467a:	9b07      	ldr	r3, [sp, #28]
 801467c:	2b00      	cmp	r3, #0
 801467e:	dc35      	bgt.n	80146ec <_dtoa_r+0x9e4>
 8014680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014682:	2b02      	cmp	r3, #2
 8014684:	dd32      	ble.n	80146ec <_dtoa_r+0x9e4>
 8014686:	9b07      	ldr	r3, [sp, #28]
 8014688:	930c      	str	r3, [sp, #48]	; 0x30
 801468a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801468c:	2b00      	cmp	r3, #0
 801468e:	d10c      	bne.n	80146aa <_dtoa_r+0x9a2>
 8014690:	0031      	movs	r1, r6
 8014692:	2205      	movs	r2, #5
 8014694:	0038      	movs	r0, r7
 8014696:	f000 fc11 	bl	8014ebc <__multadd>
 801469a:	0006      	movs	r6, r0
 801469c:	0001      	movs	r1, r0
 801469e:	9805      	ldr	r0, [sp, #20]
 80146a0:	f000 fe28 	bl	80152f4 <__mcmp>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	dd00      	ble.n	80146aa <_dtoa_r+0x9a2>
 80146a8:	e5a5      	b.n	80141f6 <_dtoa_r+0x4ee>
 80146aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80146ac:	43db      	mvns	r3, r3
 80146ae:	9302      	str	r3, [sp, #8]
 80146b0:	9b06      	ldr	r3, [sp, #24]
 80146b2:	9308      	str	r3, [sp, #32]
 80146b4:	2400      	movs	r4, #0
 80146b6:	0031      	movs	r1, r6
 80146b8:	0038      	movs	r0, r7
 80146ba:	f000 fbdb 	bl	8014e74 <_Bfree>
 80146be:	2d00      	cmp	r5, #0
 80146c0:	d100      	bne.n	80146c4 <_dtoa_r+0x9bc>
 80146c2:	e6b7      	b.n	8014434 <_dtoa_r+0x72c>
 80146c4:	2c00      	cmp	r4, #0
 80146c6:	d005      	beq.n	80146d4 <_dtoa_r+0x9cc>
 80146c8:	42ac      	cmp	r4, r5
 80146ca:	d003      	beq.n	80146d4 <_dtoa_r+0x9cc>
 80146cc:	0021      	movs	r1, r4
 80146ce:	0038      	movs	r0, r7
 80146d0:	f000 fbd0 	bl	8014e74 <_Bfree>
 80146d4:	0029      	movs	r1, r5
 80146d6:	0038      	movs	r0, r7
 80146d8:	f000 fbcc 	bl	8014e74 <_Bfree>
 80146dc:	e6aa      	b.n	8014434 <_dtoa_r+0x72c>
 80146de:	2600      	movs	r6, #0
 80146e0:	0035      	movs	r5, r6
 80146e2:	e7e2      	b.n	80146aa <_dtoa_r+0x9a2>
 80146e4:	9602      	str	r6, [sp, #8]
 80146e6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80146e8:	0035      	movs	r5, r6
 80146ea:	e584      	b.n	80141f6 <_dtoa_r+0x4ee>
 80146ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d100      	bne.n	80146f4 <_dtoa_r+0x9ec>
 80146f2:	e0ce      	b.n	8014892 <_dtoa_r+0xb8a>
 80146f4:	9b07      	ldr	r3, [sp, #28]
 80146f6:	930c      	str	r3, [sp, #48]	; 0x30
 80146f8:	2c00      	cmp	r4, #0
 80146fa:	dd05      	ble.n	8014708 <_dtoa_r+0xa00>
 80146fc:	0029      	movs	r1, r5
 80146fe:	0022      	movs	r2, r4
 8014700:	0038      	movs	r0, r7
 8014702:	f000 fd89 	bl	8015218 <__lshift>
 8014706:	0005      	movs	r5, r0
 8014708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801470a:	0028      	movs	r0, r5
 801470c:	2b00      	cmp	r3, #0
 801470e:	d022      	beq.n	8014756 <_dtoa_r+0xa4e>
 8014710:	0038      	movs	r0, r7
 8014712:	6869      	ldr	r1, [r5, #4]
 8014714:	f000 fb6a 	bl	8014dec <_Balloc>
 8014718:	1e04      	subs	r4, r0, #0
 801471a:	d10f      	bne.n	801473c <_dtoa_r+0xa34>
 801471c:	0002      	movs	r2, r0
 801471e:	4b05      	ldr	r3, [pc, #20]	; (8014734 <_dtoa_r+0xa2c>)
 8014720:	4905      	ldr	r1, [pc, #20]	; (8014738 <_dtoa_r+0xa30>)
 8014722:	f7ff fb06 	bl	8013d32 <_dtoa_r+0x2a>
 8014726:	46c0      	nop			; (mov r8, r8)
 8014728:	40240000 	.word	0x40240000
 801472c:	00000433 	.word	0x00000433
 8014730:	7ff00000 	.word	0x7ff00000
 8014734:	08016ca4 	.word	0x08016ca4
 8014738:	000002ea 	.word	0x000002ea
 801473c:	0029      	movs	r1, r5
 801473e:	692b      	ldr	r3, [r5, #16]
 8014740:	310c      	adds	r1, #12
 8014742:	1c9a      	adds	r2, r3, #2
 8014744:	0092      	lsls	r2, r2, #2
 8014746:	300c      	adds	r0, #12
 8014748:	f7fe fb78 	bl	8012e3c <memcpy>
 801474c:	2201      	movs	r2, #1
 801474e:	0021      	movs	r1, r4
 8014750:	0038      	movs	r0, r7
 8014752:	f000 fd61 	bl	8015218 <__lshift>
 8014756:	9b06      	ldr	r3, [sp, #24]
 8014758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801475a:	930a      	str	r3, [sp, #40]	; 0x28
 801475c:	3b01      	subs	r3, #1
 801475e:	189b      	adds	r3, r3, r2
 8014760:	2201      	movs	r2, #1
 8014762:	002c      	movs	r4, r5
 8014764:	0005      	movs	r5, r0
 8014766:	9314      	str	r3, [sp, #80]	; 0x50
 8014768:	9b08      	ldr	r3, [sp, #32]
 801476a:	4013      	ands	r3, r2
 801476c:	930f      	str	r3, [sp, #60]	; 0x3c
 801476e:	0031      	movs	r1, r6
 8014770:	9805      	ldr	r0, [sp, #20]
 8014772:	f7ff fa3d 	bl	8013bf0 <quorem>
 8014776:	0003      	movs	r3, r0
 8014778:	0021      	movs	r1, r4
 801477a:	3330      	adds	r3, #48	; 0x30
 801477c:	900d      	str	r0, [sp, #52]	; 0x34
 801477e:	9805      	ldr	r0, [sp, #20]
 8014780:	9307      	str	r3, [sp, #28]
 8014782:	f000 fdb7 	bl	80152f4 <__mcmp>
 8014786:	002a      	movs	r2, r5
 8014788:	900e      	str	r0, [sp, #56]	; 0x38
 801478a:	0031      	movs	r1, r6
 801478c:	0038      	movs	r0, r7
 801478e:	f000 fdcd 	bl	801532c <__mdiff>
 8014792:	68c3      	ldr	r3, [r0, #12]
 8014794:	9008      	str	r0, [sp, #32]
 8014796:	9310      	str	r3, [sp, #64]	; 0x40
 8014798:	2301      	movs	r3, #1
 801479a:	930c      	str	r3, [sp, #48]	; 0x30
 801479c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d104      	bne.n	80147ac <_dtoa_r+0xaa4>
 80147a2:	0001      	movs	r1, r0
 80147a4:	9805      	ldr	r0, [sp, #20]
 80147a6:	f000 fda5 	bl	80152f4 <__mcmp>
 80147aa:	900c      	str	r0, [sp, #48]	; 0x30
 80147ac:	0038      	movs	r0, r7
 80147ae:	9908      	ldr	r1, [sp, #32]
 80147b0:	f000 fb60 	bl	8014e74 <_Bfree>
 80147b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147b8:	3301      	adds	r3, #1
 80147ba:	9308      	str	r3, [sp, #32]
 80147bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80147be:	4313      	orrs	r3, r2
 80147c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147c2:	4313      	orrs	r3, r2
 80147c4:	d10c      	bne.n	80147e0 <_dtoa_r+0xad8>
 80147c6:	9b07      	ldr	r3, [sp, #28]
 80147c8:	2b39      	cmp	r3, #57	; 0x39
 80147ca:	d026      	beq.n	801481a <_dtoa_r+0xb12>
 80147cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	dd02      	ble.n	80147d8 <_dtoa_r+0xad0>
 80147d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147d4:	3331      	adds	r3, #49	; 0x31
 80147d6:	9307      	str	r3, [sp, #28]
 80147d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147da:	9a07      	ldr	r2, [sp, #28]
 80147dc:	701a      	strb	r2, [r3, #0]
 80147de:	e76a      	b.n	80146b6 <_dtoa_r+0x9ae>
 80147e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	db04      	blt.n	80147f0 <_dtoa_r+0xae8>
 80147e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80147e8:	4313      	orrs	r3, r2
 80147ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147ec:	4313      	orrs	r3, r2
 80147ee:	d11f      	bne.n	8014830 <_dtoa_r+0xb28>
 80147f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	ddf0      	ble.n	80147d8 <_dtoa_r+0xad0>
 80147f6:	9905      	ldr	r1, [sp, #20]
 80147f8:	2201      	movs	r2, #1
 80147fa:	0038      	movs	r0, r7
 80147fc:	f000 fd0c 	bl	8015218 <__lshift>
 8014800:	0031      	movs	r1, r6
 8014802:	9005      	str	r0, [sp, #20]
 8014804:	f000 fd76 	bl	80152f4 <__mcmp>
 8014808:	2800      	cmp	r0, #0
 801480a:	dc03      	bgt.n	8014814 <_dtoa_r+0xb0c>
 801480c:	d1e4      	bne.n	80147d8 <_dtoa_r+0xad0>
 801480e:	9b07      	ldr	r3, [sp, #28]
 8014810:	07db      	lsls	r3, r3, #31
 8014812:	d5e1      	bpl.n	80147d8 <_dtoa_r+0xad0>
 8014814:	9b07      	ldr	r3, [sp, #28]
 8014816:	2b39      	cmp	r3, #57	; 0x39
 8014818:	d1db      	bne.n	80147d2 <_dtoa_r+0xaca>
 801481a:	2339      	movs	r3, #57	; 0x39
 801481c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801481e:	7013      	strb	r3, [r2, #0]
 8014820:	9b08      	ldr	r3, [sp, #32]
 8014822:	9308      	str	r3, [sp, #32]
 8014824:	3b01      	subs	r3, #1
 8014826:	781a      	ldrb	r2, [r3, #0]
 8014828:	2a39      	cmp	r2, #57	; 0x39
 801482a:	d068      	beq.n	80148fe <_dtoa_r+0xbf6>
 801482c:	3201      	adds	r2, #1
 801482e:	e7d5      	b.n	80147dc <_dtoa_r+0xad4>
 8014830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014832:	2b00      	cmp	r3, #0
 8014834:	dd07      	ble.n	8014846 <_dtoa_r+0xb3e>
 8014836:	9b07      	ldr	r3, [sp, #28]
 8014838:	2b39      	cmp	r3, #57	; 0x39
 801483a:	d0ee      	beq.n	801481a <_dtoa_r+0xb12>
 801483c:	9b07      	ldr	r3, [sp, #28]
 801483e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014840:	3301      	adds	r3, #1
 8014842:	7013      	strb	r3, [r2, #0]
 8014844:	e737      	b.n	80146b6 <_dtoa_r+0x9ae>
 8014846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014848:	9a07      	ldr	r2, [sp, #28]
 801484a:	701a      	strb	r2, [r3, #0]
 801484c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801484e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014850:	4293      	cmp	r3, r2
 8014852:	d03e      	beq.n	80148d2 <_dtoa_r+0xbca>
 8014854:	2300      	movs	r3, #0
 8014856:	220a      	movs	r2, #10
 8014858:	9905      	ldr	r1, [sp, #20]
 801485a:	0038      	movs	r0, r7
 801485c:	f000 fb2e 	bl	8014ebc <__multadd>
 8014860:	2300      	movs	r3, #0
 8014862:	9005      	str	r0, [sp, #20]
 8014864:	220a      	movs	r2, #10
 8014866:	0021      	movs	r1, r4
 8014868:	0038      	movs	r0, r7
 801486a:	42ac      	cmp	r4, r5
 801486c:	d106      	bne.n	801487c <_dtoa_r+0xb74>
 801486e:	f000 fb25 	bl	8014ebc <__multadd>
 8014872:	0004      	movs	r4, r0
 8014874:	0005      	movs	r5, r0
 8014876:	9b08      	ldr	r3, [sp, #32]
 8014878:	930a      	str	r3, [sp, #40]	; 0x28
 801487a:	e778      	b.n	801476e <_dtoa_r+0xa66>
 801487c:	f000 fb1e 	bl	8014ebc <__multadd>
 8014880:	0029      	movs	r1, r5
 8014882:	0004      	movs	r4, r0
 8014884:	2300      	movs	r3, #0
 8014886:	220a      	movs	r2, #10
 8014888:	0038      	movs	r0, r7
 801488a:	f000 fb17 	bl	8014ebc <__multadd>
 801488e:	0005      	movs	r5, r0
 8014890:	e7f1      	b.n	8014876 <_dtoa_r+0xb6e>
 8014892:	9b07      	ldr	r3, [sp, #28]
 8014894:	930c      	str	r3, [sp, #48]	; 0x30
 8014896:	2400      	movs	r4, #0
 8014898:	0031      	movs	r1, r6
 801489a:	9805      	ldr	r0, [sp, #20]
 801489c:	f7ff f9a8 	bl	8013bf0 <quorem>
 80148a0:	9b06      	ldr	r3, [sp, #24]
 80148a2:	3030      	adds	r0, #48	; 0x30
 80148a4:	5518      	strb	r0, [r3, r4]
 80148a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148a8:	3401      	adds	r4, #1
 80148aa:	9007      	str	r0, [sp, #28]
 80148ac:	42a3      	cmp	r3, r4
 80148ae:	dd07      	ble.n	80148c0 <_dtoa_r+0xbb8>
 80148b0:	2300      	movs	r3, #0
 80148b2:	220a      	movs	r2, #10
 80148b4:	0038      	movs	r0, r7
 80148b6:	9905      	ldr	r1, [sp, #20]
 80148b8:	f000 fb00 	bl	8014ebc <__multadd>
 80148bc:	9005      	str	r0, [sp, #20]
 80148be:	e7eb      	b.n	8014898 <_dtoa_r+0xb90>
 80148c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148c2:	2001      	movs	r0, #1
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	dd00      	ble.n	80148ca <_dtoa_r+0xbc2>
 80148c8:	0018      	movs	r0, r3
 80148ca:	2400      	movs	r4, #0
 80148cc:	9b06      	ldr	r3, [sp, #24]
 80148ce:	181b      	adds	r3, r3, r0
 80148d0:	9308      	str	r3, [sp, #32]
 80148d2:	9905      	ldr	r1, [sp, #20]
 80148d4:	2201      	movs	r2, #1
 80148d6:	0038      	movs	r0, r7
 80148d8:	f000 fc9e 	bl	8015218 <__lshift>
 80148dc:	0031      	movs	r1, r6
 80148de:	9005      	str	r0, [sp, #20]
 80148e0:	f000 fd08 	bl	80152f4 <__mcmp>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	dc9b      	bgt.n	8014820 <_dtoa_r+0xb18>
 80148e8:	d102      	bne.n	80148f0 <_dtoa_r+0xbe8>
 80148ea:	9b07      	ldr	r3, [sp, #28]
 80148ec:	07db      	lsls	r3, r3, #31
 80148ee:	d497      	bmi.n	8014820 <_dtoa_r+0xb18>
 80148f0:	9b08      	ldr	r3, [sp, #32]
 80148f2:	9308      	str	r3, [sp, #32]
 80148f4:	3b01      	subs	r3, #1
 80148f6:	781a      	ldrb	r2, [r3, #0]
 80148f8:	2a30      	cmp	r2, #48	; 0x30
 80148fa:	d0fa      	beq.n	80148f2 <_dtoa_r+0xbea>
 80148fc:	e6db      	b.n	80146b6 <_dtoa_r+0x9ae>
 80148fe:	9a06      	ldr	r2, [sp, #24]
 8014900:	429a      	cmp	r2, r3
 8014902:	d18e      	bne.n	8014822 <_dtoa_r+0xb1a>
 8014904:	9b02      	ldr	r3, [sp, #8]
 8014906:	3301      	adds	r3, #1
 8014908:	9302      	str	r3, [sp, #8]
 801490a:	2331      	movs	r3, #49	; 0x31
 801490c:	e799      	b.n	8014842 <_dtoa_r+0xb3a>
 801490e:	4b09      	ldr	r3, [pc, #36]	; (8014934 <_dtoa_r+0xc2c>)
 8014910:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014912:	9306      	str	r3, [sp, #24]
 8014914:	4b08      	ldr	r3, [pc, #32]	; (8014938 <_dtoa_r+0xc30>)
 8014916:	2a00      	cmp	r2, #0
 8014918:	d001      	beq.n	801491e <_dtoa_r+0xc16>
 801491a:	f7ff fa3f 	bl	8013d9c <_dtoa_r+0x94>
 801491e:	f7ff fa3f 	bl	8013da0 <_dtoa_r+0x98>
 8014922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014924:	2b00      	cmp	r3, #0
 8014926:	dcb6      	bgt.n	8014896 <_dtoa_r+0xb8e>
 8014928:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801492a:	2b02      	cmp	r3, #2
 801492c:	dd00      	ble.n	8014930 <_dtoa_r+0xc28>
 801492e:	e6ac      	b.n	801468a <_dtoa_r+0x982>
 8014930:	e7b1      	b.n	8014896 <_dtoa_r+0xb8e>
 8014932:	46c0      	nop			; (mov r8, r8)
 8014934:	08016c25 	.word	0x08016c25
 8014938:	08016c2d 	.word	0x08016c2d

0801493c <__sflush_r>:
 801493c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801493e:	898b      	ldrh	r3, [r1, #12]
 8014940:	0005      	movs	r5, r0
 8014942:	000c      	movs	r4, r1
 8014944:	071a      	lsls	r2, r3, #28
 8014946:	d45f      	bmi.n	8014a08 <__sflush_r+0xcc>
 8014948:	684a      	ldr	r2, [r1, #4]
 801494a:	2a00      	cmp	r2, #0
 801494c:	dc04      	bgt.n	8014958 <__sflush_r+0x1c>
 801494e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8014950:	2a00      	cmp	r2, #0
 8014952:	dc01      	bgt.n	8014958 <__sflush_r+0x1c>
 8014954:	2000      	movs	r0, #0
 8014956:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014958:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801495a:	2f00      	cmp	r7, #0
 801495c:	d0fa      	beq.n	8014954 <__sflush_r+0x18>
 801495e:	2200      	movs	r2, #0
 8014960:	2180      	movs	r1, #128	; 0x80
 8014962:	682e      	ldr	r6, [r5, #0]
 8014964:	602a      	str	r2, [r5, #0]
 8014966:	001a      	movs	r2, r3
 8014968:	0149      	lsls	r1, r1, #5
 801496a:	400a      	ands	r2, r1
 801496c:	420b      	tst	r3, r1
 801496e:	d034      	beq.n	80149da <__sflush_r+0x9e>
 8014970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	075b      	lsls	r3, r3, #29
 8014976:	d506      	bpl.n	8014986 <__sflush_r+0x4a>
 8014978:	6863      	ldr	r3, [r4, #4]
 801497a:	1ac0      	subs	r0, r0, r3
 801497c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <__sflush_r+0x4a>
 8014982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014984:	1ac0      	subs	r0, r0, r3
 8014986:	0002      	movs	r2, r0
 8014988:	6a21      	ldr	r1, [r4, #32]
 801498a:	2300      	movs	r3, #0
 801498c:	0028      	movs	r0, r5
 801498e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014990:	47b8      	blx	r7
 8014992:	89a1      	ldrh	r1, [r4, #12]
 8014994:	1c43      	adds	r3, r0, #1
 8014996:	d106      	bne.n	80149a6 <__sflush_r+0x6a>
 8014998:	682b      	ldr	r3, [r5, #0]
 801499a:	2b1d      	cmp	r3, #29
 801499c:	d831      	bhi.n	8014a02 <__sflush_r+0xc6>
 801499e:	4a2c      	ldr	r2, [pc, #176]	; (8014a50 <__sflush_r+0x114>)
 80149a0:	40da      	lsrs	r2, r3
 80149a2:	07d3      	lsls	r3, r2, #31
 80149a4:	d52d      	bpl.n	8014a02 <__sflush_r+0xc6>
 80149a6:	2300      	movs	r3, #0
 80149a8:	6063      	str	r3, [r4, #4]
 80149aa:	6923      	ldr	r3, [r4, #16]
 80149ac:	6023      	str	r3, [r4, #0]
 80149ae:	04cb      	lsls	r3, r1, #19
 80149b0:	d505      	bpl.n	80149be <__sflush_r+0x82>
 80149b2:	1c43      	adds	r3, r0, #1
 80149b4:	d102      	bne.n	80149bc <__sflush_r+0x80>
 80149b6:	682b      	ldr	r3, [r5, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d100      	bne.n	80149be <__sflush_r+0x82>
 80149bc:	6560      	str	r0, [r4, #84]	; 0x54
 80149be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149c0:	602e      	str	r6, [r5, #0]
 80149c2:	2900      	cmp	r1, #0
 80149c4:	d0c6      	beq.n	8014954 <__sflush_r+0x18>
 80149c6:	0023      	movs	r3, r4
 80149c8:	3344      	adds	r3, #68	; 0x44
 80149ca:	4299      	cmp	r1, r3
 80149cc:	d002      	beq.n	80149d4 <__sflush_r+0x98>
 80149ce:	0028      	movs	r0, r5
 80149d0:	f000 fdd4 	bl	801557c <_free_r>
 80149d4:	2000      	movs	r0, #0
 80149d6:	6360      	str	r0, [r4, #52]	; 0x34
 80149d8:	e7bd      	b.n	8014956 <__sflush_r+0x1a>
 80149da:	2301      	movs	r3, #1
 80149dc:	0028      	movs	r0, r5
 80149de:	6a21      	ldr	r1, [r4, #32]
 80149e0:	47b8      	blx	r7
 80149e2:	1c43      	adds	r3, r0, #1
 80149e4:	d1c5      	bne.n	8014972 <__sflush_r+0x36>
 80149e6:	682b      	ldr	r3, [r5, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d0c2      	beq.n	8014972 <__sflush_r+0x36>
 80149ec:	2b1d      	cmp	r3, #29
 80149ee:	d001      	beq.n	80149f4 <__sflush_r+0xb8>
 80149f0:	2b16      	cmp	r3, #22
 80149f2:	d101      	bne.n	80149f8 <__sflush_r+0xbc>
 80149f4:	602e      	str	r6, [r5, #0]
 80149f6:	e7ad      	b.n	8014954 <__sflush_r+0x18>
 80149f8:	2340      	movs	r3, #64	; 0x40
 80149fa:	89a2      	ldrh	r2, [r4, #12]
 80149fc:	4313      	orrs	r3, r2
 80149fe:	81a3      	strh	r3, [r4, #12]
 8014a00:	e7a9      	b.n	8014956 <__sflush_r+0x1a>
 8014a02:	2340      	movs	r3, #64	; 0x40
 8014a04:	430b      	orrs	r3, r1
 8014a06:	e7fa      	b.n	80149fe <__sflush_r+0xc2>
 8014a08:	690f      	ldr	r7, [r1, #16]
 8014a0a:	2f00      	cmp	r7, #0
 8014a0c:	d0a2      	beq.n	8014954 <__sflush_r+0x18>
 8014a0e:	680a      	ldr	r2, [r1, #0]
 8014a10:	600f      	str	r7, [r1, #0]
 8014a12:	1bd2      	subs	r2, r2, r7
 8014a14:	9201      	str	r2, [sp, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	079b      	lsls	r3, r3, #30
 8014a1a:	d100      	bne.n	8014a1e <__sflush_r+0xe2>
 8014a1c:	694a      	ldr	r2, [r1, #20]
 8014a1e:	60a2      	str	r2, [r4, #8]
 8014a20:	9b01      	ldr	r3, [sp, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	dc00      	bgt.n	8014a28 <__sflush_r+0xec>
 8014a26:	e795      	b.n	8014954 <__sflush_r+0x18>
 8014a28:	003a      	movs	r2, r7
 8014a2a:	0028      	movs	r0, r5
 8014a2c:	9b01      	ldr	r3, [sp, #4]
 8014a2e:	6a21      	ldr	r1, [r4, #32]
 8014a30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a32:	47b0      	blx	r6
 8014a34:	2800      	cmp	r0, #0
 8014a36:	dc06      	bgt.n	8014a46 <__sflush_r+0x10a>
 8014a38:	2340      	movs	r3, #64	; 0x40
 8014a3a:	2001      	movs	r0, #1
 8014a3c:	89a2      	ldrh	r2, [r4, #12]
 8014a3e:	4240      	negs	r0, r0
 8014a40:	4313      	orrs	r3, r2
 8014a42:	81a3      	strh	r3, [r4, #12]
 8014a44:	e787      	b.n	8014956 <__sflush_r+0x1a>
 8014a46:	9b01      	ldr	r3, [sp, #4]
 8014a48:	183f      	adds	r7, r7, r0
 8014a4a:	1a1b      	subs	r3, r3, r0
 8014a4c:	9301      	str	r3, [sp, #4]
 8014a4e:	e7e7      	b.n	8014a20 <__sflush_r+0xe4>
 8014a50:	20400001 	.word	0x20400001

08014a54 <_fflush_r>:
 8014a54:	690b      	ldr	r3, [r1, #16]
 8014a56:	b570      	push	{r4, r5, r6, lr}
 8014a58:	0005      	movs	r5, r0
 8014a5a:	000c      	movs	r4, r1
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d102      	bne.n	8014a66 <_fflush_r+0x12>
 8014a60:	2500      	movs	r5, #0
 8014a62:	0028      	movs	r0, r5
 8014a64:	bd70      	pop	{r4, r5, r6, pc}
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d004      	beq.n	8014a74 <_fflush_r+0x20>
 8014a6a:	6983      	ldr	r3, [r0, #24]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d101      	bne.n	8014a74 <_fflush_r+0x20>
 8014a70:	f000 f892 	bl	8014b98 <__sinit>
 8014a74:	4b14      	ldr	r3, [pc, #80]	; (8014ac8 <_fflush_r+0x74>)
 8014a76:	429c      	cmp	r4, r3
 8014a78:	d11b      	bne.n	8014ab2 <_fflush_r+0x5e>
 8014a7a:	686c      	ldr	r4, [r5, #4]
 8014a7c:	220c      	movs	r2, #12
 8014a7e:	5ea3      	ldrsh	r3, [r4, r2]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d0ed      	beq.n	8014a60 <_fflush_r+0xc>
 8014a84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a86:	07d2      	lsls	r2, r2, #31
 8014a88:	d404      	bmi.n	8014a94 <_fflush_r+0x40>
 8014a8a:	059b      	lsls	r3, r3, #22
 8014a8c:	d402      	bmi.n	8014a94 <_fflush_r+0x40>
 8014a8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a90:	f000 f927 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8014a94:	0028      	movs	r0, r5
 8014a96:	0021      	movs	r1, r4
 8014a98:	f7ff ff50 	bl	801493c <__sflush_r>
 8014a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a9e:	0005      	movs	r5, r0
 8014aa0:	07db      	lsls	r3, r3, #31
 8014aa2:	d4de      	bmi.n	8014a62 <_fflush_r+0xe>
 8014aa4:	89a3      	ldrh	r3, [r4, #12]
 8014aa6:	059b      	lsls	r3, r3, #22
 8014aa8:	d4db      	bmi.n	8014a62 <_fflush_r+0xe>
 8014aaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014aac:	f000 f91a 	bl	8014ce4 <__retarget_lock_release_recursive>
 8014ab0:	e7d7      	b.n	8014a62 <_fflush_r+0xe>
 8014ab2:	4b06      	ldr	r3, [pc, #24]	; (8014acc <_fflush_r+0x78>)
 8014ab4:	429c      	cmp	r4, r3
 8014ab6:	d101      	bne.n	8014abc <_fflush_r+0x68>
 8014ab8:	68ac      	ldr	r4, [r5, #8]
 8014aba:	e7df      	b.n	8014a7c <_fflush_r+0x28>
 8014abc:	4b04      	ldr	r3, [pc, #16]	; (8014ad0 <_fflush_r+0x7c>)
 8014abe:	429c      	cmp	r4, r3
 8014ac0:	d1dc      	bne.n	8014a7c <_fflush_r+0x28>
 8014ac2:	68ec      	ldr	r4, [r5, #12]
 8014ac4:	e7da      	b.n	8014a7c <_fflush_r+0x28>
 8014ac6:	46c0      	nop			; (mov r8, r8)
 8014ac8:	08016cd8 	.word	0x08016cd8
 8014acc:	08016cf8 	.word	0x08016cf8
 8014ad0:	08016cb8 	.word	0x08016cb8

08014ad4 <std>:
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	b510      	push	{r4, lr}
 8014ad8:	0004      	movs	r4, r0
 8014ada:	6003      	str	r3, [r0, #0]
 8014adc:	6043      	str	r3, [r0, #4]
 8014ade:	6083      	str	r3, [r0, #8]
 8014ae0:	8181      	strh	r1, [r0, #12]
 8014ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8014ae4:	0019      	movs	r1, r3
 8014ae6:	81c2      	strh	r2, [r0, #14]
 8014ae8:	6103      	str	r3, [r0, #16]
 8014aea:	6143      	str	r3, [r0, #20]
 8014aec:	6183      	str	r3, [r0, #24]
 8014aee:	2208      	movs	r2, #8
 8014af0:	305c      	adds	r0, #92	; 0x5c
 8014af2:	f7fe f9ac 	bl	8012e4e <memset>
 8014af6:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <std+0x38>)
 8014af8:	6224      	str	r4, [r4, #32]
 8014afa:	6263      	str	r3, [r4, #36]	; 0x24
 8014afc:	4b04      	ldr	r3, [pc, #16]	; (8014b10 <std+0x3c>)
 8014afe:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b00:	4b04      	ldr	r3, [pc, #16]	; (8014b14 <std+0x40>)
 8014b02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b04:	4b04      	ldr	r3, [pc, #16]	; (8014b18 <std+0x44>)
 8014b06:	6323      	str	r3, [r4, #48]	; 0x30
 8014b08:	bd10      	pop	{r4, pc}
 8014b0a:	46c0      	nop			; (mov r8, r8)
 8014b0c:	08015ced 	.word	0x08015ced
 8014b10:	08015d15 	.word	0x08015d15
 8014b14:	08015d4d 	.word	0x08015d4d
 8014b18:	08015d79 	.word	0x08015d79

08014b1c <_cleanup_r>:
 8014b1c:	b510      	push	{r4, lr}
 8014b1e:	4902      	ldr	r1, [pc, #8]	; (8014b28 <_cleanup_r+0xc>)
 8014b20:	f000 f8ba 	bl	8014c98 <_fwalk_reent>
 8014b24:	bd10      	pop	{r4, pc}
 8014b26:	46c0      	nop			; (mov r8, r8)
 8014b28:	08014a55 	.word	0x08014a55

08014b2c <__sfmoreglue>:
 8014b2c:	b570      	push	{r4, r5, r6, lr}
 8014b2e:	2568      	movs	r5, #104	; 0x68
 8014b30:	1e4a      	subs	r2, r1, #1
 8014b32:	4355      	muls	r5, r2
 8014b34:	000e      	movs	r6, r1
 8014b36:	0029      	movs	r1, r5
 8014b38:	3174      	adds	r1, #116	; 0x74
 8014b3a:	f000 fd8b 	bl	8015654 <_malloc_r>
 8014b3e:	1e04      	subs	r4, r0, #0
 8014b40:	d008      	beq.n	8014b54 <__sfmoreglue+0x28>
 8014b42:	2100      	movs	r1, #0
 8014b44:	002a      	movs	r2, r5
 8014b46:	6001      	str	r1, [r0, #0]
 8014b48:	6046      	str	r6, [r0, #4]
 8014b4a:	300c      	adds	r0, #12
 8014b4c:	60a0      	str	r0, [r4, #8]
 8014b4e:	3268      	adds	r2, #104	; 0x68
 8014b50:	f7fe f97d 	bl	8012e4e <memset>
 8014b54:	0020      	movs	r0, r4
 8014b56:	bd70      	pop	{r4, r5, r6, pc}

08014b58 <__sfp_lock_acquire>:
 8014b58:	b510      	push	{r4, lr}
 8014b5a:	4802      	ldr	r0, [pc, #8]	; (8014b64 <__sfp_lock_acquire+0xc>)
 8014b5c:	f000 f8c1 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8014b60:	bd10      	pop	{r4, pc}
 8014b62:	46c0      	nop			; (mov r8, r8)
 8014b64:	20005f61 	.word	0x20005f61

08014b68 <__sfp_lock_release>:
 8014b68:	b510      	push	{r4, lr}
 8014b6a:	4802      	ldr	r0, [pc, #8]	; (8014b74 <__sfp_lock_release+0xc>)
 8014b6c:	f000 f8ba 	bl	8014ce4 <__retarget_lock_release_recursive>
 8014b70:	bd10      	pop	{r4, pc}
 8014b72:	46c0      	nop			; (mov r8, r8)
 8014b74:	20005f61 	.word	0x20005f61

08014b78 <__sinit_lock_acquire>:
 8014b78:	b510      	push	{r4, lr}
 8014b7a:	4802      	ldr	r0, [pc, #8]	; (8014b84 <__sinit_lock_acquire+0xc>)
 8014b7c:	f000 f8b1 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8014b80:	bd10      	pop	{r4, pc}
 8014b82:	46c0      	nop			; (mov r8, r8)
 8014b84:	20005f62 	.word	0x20005f62

08014b88 <__sinit_lock_release>:
 8014b88:	b510      	push	{r4, lr}
 8014b8a:	4802      	ldr	r0, [pc, #8]	; (8014b94 <__sinit_lock_release+0xc>)
 8014b8c:	f000 f8aa 	bl	8014ce4 <__retarget_lock_release_recursive>
 8014b90:	bd10      	pop	{r4, pc}
 8014b92:	46c0      	nop			; (mov r8, r8)
 8014b94:	20005f62 	.word	0x20005f62

08014b98 <__sinit>:
 8014b98:	b513      	push	{r0, r1, r4, lr}
 8014b9a:	0004      	movs	r4, r0
 8014b9c:	f7ff ffec 	bl	8014b78 <__sinit_lock_acquire>
 8014ba0:	69a3      	ldr	r3, [r4, #24]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d002      	beq.n	8014bac <__sinit+0x14>
 8014ba6:	f7ff ffef 	bl	8014b88 <__sinit_lock_release>
 8014baa:	bd13      	pop	{r0, r1, r4, pc}
 8014bac:	64a3      	str	r3, [r4, #72]	; 0x48
 8014bae:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8014bb2:	4b13      	ldr	r3, [pc, #76]	; (8014c00 <__sinit+0x68>)
 8014bb4:	4a13      	ldr	r2, [pc, #76]	; (8014c04 <__sinit+0x6c>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8014bba:	9301      	str	r3, [sp, #4]
 8014bbc:	42a3      	cmp	r3, r4
 8014bbe:	d101      	bne.n	8014bc4 <__sinit+0x2c>
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	61a3      	str	r3, [r4, #24]
 8014bc4:	0020      	movs	r0, r4
 8014bc6:	f000 f81f 	bl	8014c08 <__sfp>
 8014bca:	6060      	str	r0, [r4, #4]
 8014bcc:	0020      	movs	r0, r4
 8014bce:	f000 f81b 	bl	8014c08 <__sfp>
 8014bd2:	60a0      	str	r0, [r4, #8]
 8014bd4:	0020      	movs	r0, r4
 8014bd6:	f000 f817 	bl	8014c08 <__sfp>
 8014bda:	2200      	movs	r2, #0
 8014bdc:	2104      	movs	r1, #4
 8014bde:	60e0      	str	r0, [r4, #12]
 8014be0:	6860      	ldr	r0, [r4, #4]
 8014be2:	f7ff ff77 	bl	8014ad4 <std>
 8014be6:	2201      	movs	r2, #1
 8014be8:	2109      	movs	r1, #9
 8014bea:	68a0      	ldr	r0, [r4, #8]
 8014bec:	f7ff ff72 	bl	8014ad4 <std>
 8014bf0:	2202      	movs	r2, #2
 8014bf2:	2112      	movs	r1, #18
 8014bf4:	68e0      	ldr	r0, [r4, #12]
 8014bf6:	f7ff ff6d 	bl	8014ad4 <std>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	61a3      	str	r3, [r4, #24]
 8014bfe:	e7d2      	b.n	8014ba6 <__sinit+0xe>
 8014c00:	08016aec 	.word	0x08016aec
 8014c04:	08014b1d 	.word	0x08014b1d

08014c08 <__sfp>:
 8014c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c0a:	0007      	movs	r7, r0
 8014c0c:	f7ff ffa4 	bl	8014b58 <__sfp_lock_acquire>
 8014c10:	4b1f      	ldr	r3, [pc, #124]	; (8014c90 <__sfp+0x88>)
 8014c12:	681e      	ldr	r6, [r3, #0]
 8014c14:	69b3      	ldr	r3, [r6, #24]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d102      	bne.n	8014c20 <__sfp+0x18>
 8014c1a:	0030      	movs	r0, r6
 8014c1c:	f7ff ffbc 	bl	8014b98 <__sinit>
 8014c20:	3648      	adds	r6, #72	; 0x48
 8014c22:	68b4      	ldr	r4, [r6, #8]
 8014c24:	6873      	ldr	r3, [r6, #4]
 8014c26:	3b01      	subs	r3, #1
 8014c28:	d504      	bpl.n	8014c34 <__sfp+0x2c>
 8014c2a:	6833      	ldr	r3, [r6, #0]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d022      	beq.n	8014c76 <__sfp+0x6e>
 8014c30:	6836      	ldr	r6, [r6, #0]
 8014c32:	e7f6      	b.n	8014c22 <__sfp+0x1a>
 8014c34:	220c      	movs	r2, #12
 8014c36:	5ea5      	ldrsh	r5, [r4, r2]
 8014c38:	2d00      	cmp	r5, #0
 8014c3a:	d11a      	bne.n	8014c72 <__sfp+0x6a>
 8014c3c:	0020      	movs	r0, r4
 8014c3e:	4b15      	ldr	r3, [pc, #84]	; (8014c94 <__sfp+0x8c>)
 8014c40:	3058      	adds	r0, #88	; 0x58
 8014c42:	60e3      	str	r3, [r4, #12]
 8014c44:	6665      	str	r5, [r4, #100]	; 0x64
 8014c46:	f000 f84b 	bl	8014ce0 <__retarget_lock_init_recursive>
 8014c4a:	f7ff ff8d 	bl	8014b68 <__sfp_lock_release>
 8014c4e:	0020      	movs	r0, r4
 8014c50:	2208      	movs	r2, #8
 8014c52:	0029      	movs	r1, r5
 8014c54:	6025      	str	r5, [r4, #0]
 8014c56:	60a5      	str	r5, [r4, #8]
 8014c58:	6065      	str	r5, [r4, #4]
 8014c5a:	6125      	str	r5, [r4, #16]
 8014c5c:	6165      	str	r5, [r4, #20]
 8014c5e:	61a5      	str	r5, [r4, #24]
 8014c60:	305c      	adds	r0, #92	; 0x5c
 8014c62:	f7fe f8f4 	bl	8012e4e <memset>
 8014c66:	6365      	str	r5, [r4, #52]	; 0x34
 8014c68:	63a5      	str	r5, [r4, #56]	; 0x38
 8014c6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8014c6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8014c6e:	0020      	movs	r0, r4
 8014c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c72:	3468      	adds	r4, #104	; 0x68
 8014c74:	e7d7      	b.n	8014c26 <__sfp+0x1e>
 8014c76:	2104      	movs	r1, #4
 8014c78:	0038      	movs	r0, r7
 8014c7a:	f7ff ff57 	bl	8014b2c <__sfmoreglue>
 8014c7e:	1e04      	subs	r4, r0, #0
 8014c80:	6030      	str	r0, [r6, #0]
 8014c82:	d1d5      	bne.n	8014c30 <__sfp+0x28>
 8014c84:	f7ff ff70 	bl	8014b68 <__sfp_lock_release>
 8014c88:	230c      	movs	r3, #12
 8014c8a:	603b      	str	r3, [r7, #0]
 8014c8c:	e7ef      	b.n	8014c6e <__sfp+0x66>
 8014c8e:	46c0      	nop			; (mov r8, r8)
 8014c90:	08016aec 	.word	0x08016aec
 8014c94:	ffff0001 	.word	0xffff0001

08014c98 <_fwalk_reent>:
 8014c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c9a:	0004      	movs	r4, r0
 8014c9c:	0006      	movs	r6, r0
 8014c9e:	2700      	movs	r7, #0
 8014ca0:	9101      	str	r1, [sp, #4]
 8014ca2:	3448      	adds	r4, #72	; 0x48
 8014ca4:	6863      	ldr	r3, [r4, #4]
 8014ca6:	68a5      	ldr	r5, [r4, #8]
 8014ca8:	9300      	str	r3, [sp, #0]
 8014caa:	9b00      	ldr	r3, [sp, #0]
 8014cac:	3b01      	subs	r3, #1
 8014cae:	9300      	str	r3, [sp, #0]
 8014cb0:	d504      	bpl.n	8014cbc <_fwalk_reent+0x24>
 8014cb2:	6824      	ldr	r4, [r4, #0]
 8014cb4:	2c00      	cmp	r4, #0
 8014cb6:	d1f5      	bne.n	8014ca4 <_fwalk_reent+0xc>
 8014cb8:	0038      	movs	r0, r7
 8014cba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014cbc:	89ab      	ldrh	r3, [r5, #12]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d908      	bls.n	8014cd4 <_fwalk_reent+0x3c>
 8014cc2:	220e      	movs	r2, #14
 8014cc4:	5eab      	ldrsh	r3, [r5, r2]
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	d004      	beq.n	8014cd4 <_fwalk_reent+0x3c>
 8014cca:	0029      	movs	r1, r5
 8014ccc:	0030      	movs	r0, r6
 8014cce:	9b01      	ldr	r3, [sp, #4]
 8014cd0:	4798      	blx	r3
 8014cd2:	4307      	orrs	r7, r0
 8014cd4:	3568      	adds	r5, #104	; 0x68
 8014cd6:	e7e8      	b.n	8014caa <_fwalk_reent+0x12>

08014cd8 <_localeconv_r>:
 8014cd8:	4800      	ldr	r0, [pc, #0]	; (8014cdc <_localeconv_r+0x4>)
 8014cda:	4770      	bx	lr
 8014cdc:	20000440 	.word	0x20000440

08014ce0 <__retarget_lock_init_recursive>:
 8014ce0:	4770      	bx	lr

08014ce2 <__retarget_lock_acquire_recursive>:
 8014ce2:	4770      	bx	lr

08014ce4 <__retarget_lock_release_recursive>:
 8014ce4:	4770      	bx	lr
	...

08014ce8 <__swhatbuf_r>:
 8014ce8:	b570      	push	{r4, r5, r6, lr}
 8014cea:	000e      	movs	r6, r1
 8014cec:	001d      	movs	r5, r3
 8014cee:	230e      	movs	r3, #14
 8014cf0:	5ec9      	ldrsh	r1, [r1, r3]
 8014cf2:	0014      	movs	r4, r2
 8014cf4:	b096      	sub	sp, #88	; 0x58
 8014cf6:	2900      	cmp	r1, #0
 8014cf8:	da08      	bge.n	8014d0c <__swhatbuf_r+0x24>
 8014cfa:	220c      	movs	r2, #12
 8014cfc:	5eb3      	ldrsh	r3, [r6, r2]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	602a      	str	r2, [r5, #0]
 8014d02:	061b      	lsls	r3, r3, #24
 8014d04:	d411      	bmi.n	8014d2a <__swhatbuf_r+0x42>
 8014d06:	2380      	movs	r3, #128	; 0x80
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	e00f      	b.n	8014d2c <__swhatbuf_r+0x44>
 8014d0c:	466a      	mov	r2, sp
 8014d0e:	f001 f88d 	bl	8015e2c <_fstat_r>
 8014d12:	2800      	cmp	r0, #0
 8014d14:	dbf1      	blt.n	8014cfa <__swhatbuf_r+0x12>
 8014d16:	23f0      	movs	r3, #240	; 0xf0
 8014d18:	9901      	ldr	r1, [sp, #4]
 8014d1a:	021b      	lsls	r3, r3, #8
 8014d1c:	4019      	ands	r1, r3
 8014d1e:	4b05      	ldr	r3, [pc, #20]	; (8014d34 <__swhatbuf_r+0x4c>)
 8014d20:	18c9      	adds	r1, r1, r3
 8014d22:	424b      	negs	r3, r1
 8014d24:	4159      	adcs	r1, r3
 8014d26:	6029      	str	r1, [r5, #0]
 8014d28:	e7ed      	b.n	8014d06 <__swhatbuf_r+0x1e>
 8014d2a:	2340      	movs	r3, #64	; 0x40
 8014d2c:	2000      	movs	r0, #0
 8014d2e:	6023      	str	r3, [r4, #0]
 8014d30:	b016      	add	sp, #88	; 0x58
 8014d32:	bd70      	pop	{r4, r5, r6, pc}
 8014d34:	ffffe000 	.word	0xffffe000

08014d38 <__smakebuf_r>:
 8014d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d3a:	2602      	movs	r6, #2
 8014d3c:	898b      	ldrh	r3, [r1, #12]
 8014d3e:	0005      	movs	r5, r0
 8014d40:	000c      	movs	r4, r1
 8014d42:	4233      	tst	r3, r6
 8014d44:	d006      	beq.n	8014d54 <__smakebuf_r+0x1c>
 8014d46:	0023      	movs	r3, r4
 8014d48:	3347      	adds	r3, #71	; 0x47
 8014d4a:	6023      	str	r3, [r4, #0]
 8014d4c:	6123      	str	r3, [r4, #16]
 8014d4e:	2301      	movs	r3, #1
 8014d50:	6163      	str	r3, [r4, #20]
 8014d52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014d54:	466a      	mov	r2, sp
 8014d56:	ab01      	add	r3, sp, #4
 8014d58:	f7ff ffc6 	bl	8014ce8 <__swhatbuf_r>
 8014d5c:	9900      	ldr	r1, [sp, #0]
 8014d5e:	0007      	movs	r7, r0
 8014d60:	0028      	movs	r0, r5
 8014d62:	f000 fc77 	bl	8015654 <_malloc_r>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d108      	bne.n	8014d7c <__smakebuf_r+0x44>
 8014d6a:	220c      	movs	r2, #12
 8014d6c:	5ea3      	ldrsh	r3, [r4, r2]
 8014d6e:	059a      	lsls	r2, r3, #22
 8014d70:	d4ef      	bmi.n	8014d52 <__smakebuf_r+0x1a>
 8014d72:	2203      	movs	r2, #3
 8014d74:	4393      	bics	r3, r2
 8014d76:	431e      	orrs	r6, r3
 8014d78:	81a6      	strh	r6, [r4, #12]
 8014d7a:	e7e4      	b.n	8014d46 <__smakebuf_r+0xe>
 8014d7c:	4b0f      	ldr	r3, [pc, #60]	; (8014dbc <__smakebuf_r+0x84>)
 8014d7e:	62ab      	str	r3, [r5, #40]	; 0x28
 8014d80:	2380      	movs	r3, #128	; 0x80
 8014d82:	89a2      	ldrh	r2, [r4, #12]
 8014d84:	6020      	str	r0, [r4, #0]
 8014d86:	4313      	orrs	r3, r2
 8014d88:	81a3      	strh	r3, [r4, #12]
 8014d8a:	9b00      	ldr	r3, [sp, #0]
 8014d8c:	6120      	str	r0, [r4, #16]
 8014d8e:	6163      	str	r3, [r4, #20]
 8014d90:	9b01      	ldr	r3, [sp, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d00d      	beq.n	8014db2 <__smakebuf_r+0x7a>
 8014d96:	0028      	movs	r0, r5
 8014d98:	230e      	movs	r3, #14
 8014d9a:	5ee1      	ldrsh	r1, [r4, r3]
 8014d9c:	f001 f858 	bl	8015e50 <_isatty_r>
 8014da0:	2800      	cmp	r0, #0
 8014da2:	d006      	beq.n	8014db2 <__smakebuf_r+0x7a>
 8014da4:	2203      	movs	r2, #3
 8014da6:	89a3      	ldrh	r3, [r4, #12]
 8014da8:	4393      	bics	r3, r2
 8014daa:	001a      	movs	r2, r3
 8014dac:	2301      	movs	r3, #1
 8014dae:	4313      	orrs	r3, r2
 8014db0:	81a3      	strh	r3, [r4, #12]
 8014db2:	89a0      	ldrh	r0, [r4, #12]
 8014db4:	4307      	orrs	r7, r0
 8014db6:	81a7      	strh	r7, [r4, #12]
 8014db8:	e7cb      	b.n	8014d52 <__smakebuf_r+0x1a>
 8014dba:	46c0      	nop			; (mov r8, r8)
 8014dbc:	08014b1d 	.word	0x08014b1d

08014dc0 <malloc>:
 8014dc0:	b510      	push	{r4, lr}
 8014dc2:	4b03      	ldr	r3, [pc, #12]	; (8014dd0 <malloc+0x10>)
 8014dc4:	0001      	movs	r1, r0
 8014dc6:	6818      	ldr	r0, [r3, #0]
 8014dc8:	f000 fc44 	bl	8015654 <_malloc_r>
 8014dcc:	bd10      	pop	{r4, pc}
 8014dce:	46c0      	nop			; (mov r8, r8)
 8014dd0:	200002ec 	.word	0x200002ec

08014dd4 <memchr>:
 8014dd4:	b2c9      	uxtb	r1, r1
 8014dd6:	1882      	adds	r2, r0, r2
 8014dd8:	4290      	cmp	r0, r2
 8014dda:	d101      	bne.n	8014de0 <memchr+0xc>
 8014ddc:	2000      	movs	r0, #0
 8014dde:	4770      	bx	lr
 8014de0:	7803      	ldrb	r3, [r0, #0]
 8014de2:	428b      	cmp	r3, r1
 8014de4:	d0fb      	beq.n	8014dde <memchr+0xa>
 8014de6:	3001      	adds	r0, #1
 8014de8:	e7f6      	b.n	8014dd8 <memchr+0x4>
	...

08014dec <_Balloc>:
 8014dec:	b570      	push	{r4, r5, r6, lr}
 8014dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014df0:	0006      	movs	r6, r0
 8014df2:	000c      	movs	r4, r1
 8014df4:	2d00      	cmp	r5, #0
 8014df6:	d10e      	bne.n	8014e16 <_Balloc+0x2a>
 8014df8:	2010      	movs	r0, #16
 8014dfa:	f7ff ffe1 	bl	8014dc0 <malloc>
 8014dfe:	1e02      	subs	r2, r0, #0
 8014e00:	6270      	str	r0, [r6, #36]	; 0x24
 8014e02:	d104      	bne.n	8014e0e <_Balloc+0x22>
 8014e04:	2166      	movs	r1, #102	; 0x66
 8014e06:	4b19      	ldr	r3, [pc, #100]	; (8014e6c <_Balloc+0x80>)
 8014e08:	4819      	ldr	r0, [pc, #100]	; (8014e70 <_Balloc+0x84>)
 8014e0a:	f000 ffcf 	bl	8015dac <__assert_func>
 8014e0e:	6045      	str	r5, [r0, #4]
 8014e10:	6085      	str	r5, [r0, #8]
 8014e12:	6005      	str	r5, [r0, #0]
 8014e14:	60c5      	str	r5, [r0, #12]
 8014e16:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8014e18:	68eb      	ldr	r3, [r5, #12]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d013      	beq.n	8014e46 <_Balloc+0x5a>
 8014e1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e20:	00a2      	lsls	r2, r4, #2
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	189b      	adds	r3, r3, r2
 8014e26:	6818      	ldr	r0, [r3, #0]
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d118      	bne.n	8014e5e <_Balloc+0x72>
 8014e2c:	2101      	movs	r1, #1
 8014e2e:	000d      	movs	r5, r1
 8014e30:	40a5      	lsls	r5, r4
 8014e32:	1d6a      	adds	r2, r5, #5
 8014e34:	0030      	movs	r0, r6
 8014e36:	0092      	lsls	r2, r2, #2
 8014e38:	f000 fb74 	bl	8015524 <_calloc_r>
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d00c      	beq.n	8014e5a <_Balloc+0x6e>
 8014e40:	6044      	str	r4, [r0, #4]
 8014e42:	6085      	str	r5, [r0, #8]
 8014e44:	e00d      	b.n	8014e62 <_Balloc+0x76>
 8014e46:	2221      	movs	r2, #33	; 0x21
 8014e48:	2104      	movs	r1, #4
 8014e4a:	0030      	movs	r0, r6
 8014e4c:	f000 fb6a 	bl	8015524 <_calloc_r>
 8014e50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e52:	60e8      	str	r0, [r5, #12]
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d1e1      	bne.n	8014e1e <_Balloc+0x32>
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	bd70      	pop	{r4, r5, r6, pc}
 8014e5e:	6802      	ldr	r2, [r0, #0]
 8014e60:	601a      	str	r2, [r3, #0]
 8014e62:	2300      	movs	r3, #0
 8014e64:	6103      	str	r3, [r0, #16]
 8014e66:	60c3      	str	r3, [r0, #12]
 8014e68:	e7f8      	b.n	8014e5c <_Balloc+0x70>
 8014e6a:	46c0      	nop			; (mov r8, r8)
 8014e6c:	08016c32 	.word	0x08016c32
 8014e70:	08016d18 	.word	0x08016d18

08014e74 <_Bfree>:
 8014e74:	b570      	push	{r4, r5, r6, lr}
 8014e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014e78:	0005      	movs	r5, r0
 8014e7a:	000c      	movs	r4, r1
 8014e7c:	2e00      	cmp	r6, #0
 8014e7e:	d10e      	bne.n	8014e9e <_Bfree+0x2a>
 8014e80:	2010      	movs	r0, #16
 8014e82:	f7ff ff9d 	bl	8014dc0 <malloc>
 8014e86:	1e02      	subs	r2, r0, #0
 8014e88:	6268      	str	r0, [r5, #36]	; 0x24
 8014e8a:	d104      	bne.n	8014e96 <_Bfree+0x22>
 8014e8c:	218a      	movs	r1, #138	; 0x8a
 8014e8e:	4b09      	ldr	r3, [pc, #36]	; (8014eb4 <_Bfree+0x40>)
 8014e90:	4809      	ldr	r0, [pc, #36]	; (8014eb8 <_Bfree+0x44>)
 8014e92:	f000 ff8b 	bl	8015dac <__assert_func>
 8014e96:	6046      	str	r6, [r0, #4]
 8014e98:	6086      	str	r6, [r0, #8]
 8014e9a:	6006      	str	r6, [r0, #0]
 8014e9c:	60c6      	str	r6, [r0, #12]
 8014e9e:	2c00      	cmp	r4, #0
 8014ea0:	d007      	beq.n	8014eb2 <_Bfree+0x3e>
 8014ea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014ea4:	6862      	ldr	r2, [r4, #4]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	0092      	lsls	r2, r2, #2
 8014eaa:	189b      	adds	r3, r3, r2
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	6022      	str	r2, [r4, #0]
 8014eb0:	601c      	str	r4, [r3, #0]
 8014eb2:	bd70      	pop	{r4, r5, r6, pc}
 8014eb4:	08016c32 	.word	0x08016c32
 8014eb8:	08016d18 	.word	0x08016d18

08014ebc <__multadd>:
 8014ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ebe:	000e      	movs	r6, r1
 8014ec0:	9001      	str	r0, [sp, #4]
 8014ec2:	000c      	movs	r4, r1
 8014ec4:	001d      	movs	r5, r3
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	690f      	ldr	r7, [r1, #16]
 8014eca:	3614      	adds	r6, #20
 8014ecc:	6833      	ldr	r3, [r6, #0]
 8014ece:	3001      	adds	r0, #1
 8014ed0:	b299      	uxth	r1, r3
 8014ed2:	4351      	muls	r1, r2
 8014ed4:	0c1b      	lsrs	r3, r3, #16
 8014ed6:	4353      	muls	r3, r2
 8014ed8:	1949      	adds	r1, r1, r5
 8014eda:	0c0d      	lsrs	r5, r1, #16
 8014edc:	195b      	adds	r3, r3, r5
 8014ede:	0c1d      	lsrs	r5, r3, #16
 8014ee0:	b289      	uxth	r1, r1
 8014ee2:	041b      	lsls	r3, r3, #16
 8014ee4:	185b      	adds	r3, r3, r1
 8014ee6:	c608      	stmia	r6!, {r3}
 8014ee8:	4287      	cmp	r7, r0
 8014eea:	dcef      	bgt.n	8014ecc <__multadd+0x10>
 8014eec:	2d00      	cmp	r5, #0
 8014eee:	d022      	beq.n	8014f36 <__multadd+0x7a>
 8014ef0:	68a3      	ldr	r3, [r4, #8]
 8014ef2:	42bb      	cmp	r3, r7
 8014ef4:	dc19      	bgt.n	8014f2a <__multadd+0x6e>
 8014ef6:	6863      	ldr	r3, [r4, #4]
 8014ef8:	9801      	ldr	r0, [sp, #4]
 8014efa:	1c59      	adds	r1, r3, #1
 8014efc:	f7ff ff76 	bl	8014dec <_Balloc>
 8014f00:	1e06      	subs	r6, r0, #0
 8014f02:	d105      	bne.n	8014f10 <__multadd+0x54>
 8014f04:	0002      	movs	r2, r0
 8014f06:	21b5      	movs	r1, #181	; 0xb5
 8014f08:	4b0c      	ldr	r3, [pc, #48]	; (8014f3c <__multadd+0x80>)
 8014f0a:	480d      	ldr	r0, [pc, #52]	; (8014f40 <__multadd+0x84>)
 8014f0c:	f000 ff4e 	bl	8015dac <__assert_func>
 8014f10:	0021      	movs	r1, r4
 8014f12:	6923      	ldr	r3, [r4, #16]
 8014f14:	310c      	adds	r1, #12
 8014f16:	1c9a      	adds	r2, r3, #2
 8014f18:	0092      	lsls	r2, r2, #2
 8014f1a:	300c      	adds	r0, #12
 8014f1c:	f7fd ff8e 	bl	8012e3c <memcpy>
 8014f20:	0021      	movs	r1, r4
 8014f22:	9801      	ldr	r0, [sp, #4]
 8014f24:	f7ff ffa6 	bl	8014e74 <_Bfree>
 8014f28:	0034      	movs	r4, r6
 8014f2a:	1d3b      	adds	r3, r7, #4
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	18e3      	adds	r3, r4, r3
 8014f30:	605d      	str	r5, [r3, #4]
 8014f32:	1c7b      	adds	r3, r7, #1
 8014f34:	6123      	str	r3, [r4, #16]
 8014f36:	0020      	movs	r0, r4
 8014f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014f3a:	46c0      	nop			; (mov r8, r8)
 8014f3c:	08016ca4 	.word	0x08016ca4
 8014f40:	08016d18 	.word	0x08016d18

08014f44 <__hi0bits>:
 8014f44:	0003      	movs	r3, r0
 8014f46:	0c02      	lsrs	r2, r0, #16
 8014f48:	2000      	movs	r0, #0
 8014f4a:	4282      	cmp	r2, r0
 8014f4c:	d101      	bne.n	8014f52 <__hi0bits+0xe>
 8014f4e:	041b      	lsls	r3, r3, #16
 8014f50:	3010      	adds	r0, #16
 8014f52:	0e1a      	lsrs	r2, r3, #24
 8014f54:	d101      	bne.n	8014f5a <__hi0bits+0x16>
 8014f56:	3008      	adds	r0, #8
 8014f58:	021b      	lsls	r3, r3, #8
 8014f5a:	0f1a      	lsrs	r2, r3, #28
 8014f5c:	d101      	bne.n	8014f62 <__hi0bits+0x1e>
 8014f5e:	3004      	adds	r0, #4
 8014f60:	011b      	lsls	r3, r3, #4
 8014f62:	0f9a      	lsrs	r2, r3, #30
 8014f64:	d101      	bne.n	8014f6a <__hi0bits+0x26>
 8014f66:	3002      	adds	r0, #2
 8014f68:	009b      	lsls	r3, r3, #2
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	db03      	blt.n	8014f76 <__hi0bits+0x32>
 8014f6e:	3001      	adds	r0, #1
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	d400      	bmi.n	8014f76 <__hi0bits+0x32>
 8014f74:	2020      	movs	r0, #32
 8014f76:	4770      	bx	lr

08014f78 <__lo0bits>:
 8014f78:	6803      	ldr	r3, [r0, #0]
 8014f7a:	0002      	movs	r2, r0
 8014f7c:	2107      	movs	r1, #7
 8014f7e:	0018      	movs	r0, r3
 8014f80:	4008      	ands	r0, r1
 8014f82:	420b      	tst	r3, r1
 8014f84:	d00d      	beq.n	8014fa2 <__lo0bits+0x2a>
 8014f86:	3906      	subs	r1, #6
 8014f88:	2000      	movs	r0, #0
 8014f8a:	420b      	tst	r3, r1
 8014f8c:	d105      	bne.n	8014f9a <__lo0bits+0x22>
 8014f8e:	3002      	adds	r0, #2
 8014f90:	4203      	tst	r3, r0
 8014f92:	d003      	beq.n	8014f9c <__lo0bits+0x24>
 8014f94:	40cb      	lsrs	r3, r1
 8014f96:	0008      	movs	r0, r1
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	4770      	bx	lr
 8014f9c:	089b      	lsrs	r3, r3, #2
 8014f9e:	6013      	str	r3, [r2, #0]
 8014fa0:	e7fb      	b.n	8014f9a <__lo0bits+0x22>
 8014fa2:	b299      	uxth	r1, r3
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	d101      	bne.n	8014fac <__lo0bits+0x34>
 8014fa8:	2010      	movs	r0, #16
 8014faa:	0c1b      	lsrs	r3, r3, #16
 8014fac:	b2d9      	uxtb	r1, r3
 8014fae:	2900      	cmp	r1, #0
 8014fb0:	d101      	bne.n	8014fb6 <__lo0bits+0x3e>
 8014fb2:	3008      	adds	r0, #8
 8014fb4:	0a1b      	lsrs	r3, r3, #8
 8014fb6:	0719      	lsls	r1, r3, #28
 8014fb8:	d101      	bne.n	8014fbe <__lo0bits+0x46>
 8014fba:	3004      	adds	r0, #4
 8014fbc:	091b      	lsrs	r3, r3, #4
 8014fbe:	0799      	lsls	r1, r3, #30
 8014fc0:	d101      	bne.n	8014fc6 <__lo0bits+0x4e>
 8014fc2:	3002      	adds	r0, #2
 8014fc4:	089b      	lsrs	r3, r3, #2
 8014fc6:	07d9      	lsls	r1, r3, #31
 8014fc8:	d4e9      	bmi.n	8014f9e <__lo0bits+0x26>
 8014fca:	3001      	adds	r0, #1
 8014fcc:	085b      	lsrs	r3, r3, #1
 8014fce:	d1e6      	bne.n	8014f9e <__lo0bits+0x26>
 8014fd0:	2020      	movs	r0, #32
 8014fd2:	e7e2      	b.n	8014f9a <__lo0bits+0x22>

08014fd4 <__i2b>:
 8014fd4:	b510      	push	{r4, lr}
 8014fd6:	000c      	movs	r4, r1
 8014fd8:	2101      	movs	r1, #1
 8014fda:	f7ff ff07 	bl	8014dec <_Balloc>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	d106      	bne.n	8014ff0 <__i2b+0x1c>
 8014fe2:	21a0      	movs	r1, #160	; 0xa0
 8014fe4:	0002      	movs	r2, r0
 8014fe6:	4b04      	ldr	r3, [pc, #16]	; (8014ff8 <__i2b+0x24>)
 8014fe8:	4804      	ldr	r0, [pc, #16]	; (8014ffc <__i2b+0x28>)
 8014fea:	0049      	lsls	r1, r1, #1
 8014fec:	f000 fede 	bl	8015dac <__assert_func>
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	6144      	str	r4, [r0, #20]
 8014ff4:	6103      	str	r3, [r0, #16]
 8014ff6:	bd10      	pop	{r4, pc}
 8014ff8:	08016ca4 	.word	0x08016ca4
 8014ffc:	08016d18 	.word	0x08016d18

08015000 <__multiply>:
 8015000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015002:	690b      	ldr	r3, [r1, #16]
 8015004:	0014      	movs	r4, r2
 8015006:	6912      	ldr	r2, [r2, #16]
 8015008:	000d      	movs	r5, r1
 801500a:	b089      	sub	sp, #36	; 0x24
 801500c:	4293      	cmp	r3, r2
 801500e:	da01      	bge.n	8015014 <__multiply+0x14>
 8015010:	0025      	movs	r5, r4
 8015012:	000c      	movs	r4, r1
 8015014:	692f      	ldr	r7, [r5, #16]
 8015016:	6926      	ldr	r6, [r4, #16]
 8015018:	6869      	ldr	r1, [r5, #4]
 801501a:	19bb      	adds	r3, r7, r6
 801501c:	9302      	str	r3, [sp, #8]
 801501e:	68ab      	ldr	r3, [r5, #8]
 8015020:	19ba      	adds	r2, r7, r6
 8015022:	4293      	cmp	r3, r2
 8015024:	da00      	bge.n	8015028 <__multiply+0x28>
 8015026:	3101      	adds	r1, #1
 8015028:	f7ff fee0 	bl	8014dec <_Balloc>
 801502c:	9001      	str	r0, [sp, #4]
 801502e:	2800      	cmp	r0, #0
 8015030:	d106      	bne.n	8015040 <__multiply+0x40>
 8015032:	215e      	movs	r1, #94	; 0x5e
 8015034:	0002      	movs	r2, r0
 8015036:	4b48      	ldr	r3, [pc, #288]	; (8015158 <__multiply+0x158>)
 8015038:	4848      	ldr	r0, [pc, #288]	; (801515c <__multiply+0x15c>)
 801503a:	31ff      	adds	r1, #255	; 0xff
 801503c:	f000 feb6 	bl	8015dac <__assert_func>
 8015040:	9b01      	ldr	r3, [sp, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	3314      	adds	r3, #20
 8015046:	469c      	mov	ip, r3
 8015048:	19bb      	adds	r3, r7, r6
 801504a:	009b      	lsls	r3, r3, #2
 801504c:	4463      	add	r3, ip
 801504e:	9303      	str	r3, [sp, #12]
 8015050:	4663      	mov	r3, ip
 8015052:	9903      	ldr	r1, [sp, #12]
 8015054:	428b      	cmp	r3, r1
 8015056:	d32c      	bcc.n	80150b2 <__multiply+0xb2>
 8015058:	002b      	movs	r3, r5
 801505a:	0022      	movs	r2, r4
 801505c:	3314      	adds	r3, #20
 801505e:	00bf      	lsls	r7, r7, #2
 8015060:	3214      	adds	r2, #20
 8015062:	9306      	str	r3, [sp, #24]
 8015064:	00b6      	lsls	r6, r6, #2
 8015066:	19db      	adds	r3, r3, r7
 8015068:	9304      	str	r3, [sp, #16]
 801506a:	1993      	adds	r3, r2, r6
 801506c:	9307      	str	r3, [sp, #28]
 801506e:	2304      	movs	r3, #4
 8015070:	9305      	str	r3, [sp, #20]
 8015072:	002b      	movs	r3, r5
 8015074:	9904      	ldr	r1, [sp, #16]
 8015076:	3315      	adds	r3, #21
 8015078:	9200      	str	r2, [sp, #0]
 801507a:	4299      	cmp	r1, r3
 801507c:	d305      	bcc.n	801508a <__multiply+0x8a>
 801507e:	1b4b      	subs	r3, r1, r5
 8015080:	3b15      	subs	r3, #21
 8015082:	089b      	lsrs	r3, r3, #2
 8015084:	3301      	adds	r3, #1
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	9305      	str	r3, [sp, #20]
 801508a:	9b07      	ldr	r3, [sp, #28]
 801508c:	9a00      	ldr	r2, [sp, #0]
 801508e:	429a      	cmp	r2, r3
 8015090:	d311      	bcc.n	80150b6 <__multiply+0xb6>
 8015092:	9b02      	ldr	r3, [sp, #8]
 8015094:	2b00      	cmp	r3, #0
 8015096:	dd06      	ble.n	80150a6 <__multiply+0xa6>
 8015098:	9b03      	ldr	r3, [sp, #12]
 801509a:	3b04      	subs	r3, #4
 801509c:	9303      	str	r3, [sp, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	9300      	str	r3, [sp, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d053      	beq.n	801514e <__multiply+0x14e>
 80150a6:	9b01      	ldr	r3, [sp, #4]
 80150a8:	9a02      	ldr	r2, [sp, #8]
 80150aa:	0018      	movs	r0, r3
 80150ac:	611a      	str	r2, [r3, #16]
 80150ae:	b009      	add	sp, #36	; 0x24
 80150b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b2:	c304      	stmia	r3!, {r2}
 80150b4:	e7cd      	b.n	8015052 <__multiply+0x52>
 80150b6:	9b00      	ldr	r3, [sp, #0]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	b298      	uxth	r0, r3
 80150bc:	2800      	cmp	r0, #0
 80150be:	d01b      	beq.n	80150f8 <__multiply+0xf8>
 80150c0:	4667      	mov	r7, ip
 80150c2:	2400      	movs	r4, #0
 80150c4:	9e06      	ldr	r6, [sp, #24]
 80150c6:	ce02      	ldmia	r6!, {r1}
 80150c8:	683a      	ldr	r2, [r7, #0]
 80150ca:	b28b      	uxth	r3, r1
 80150cc:	4343      	muls	r3, r0
 80150ce:	b292      	uxth	r2, r2
 80150d0:	189b      	adds	r3, r3, r2
 80150d2:	191b      	adds	r3, r3, r4
 80150d4:	0c0c      	lsrs	r4, r1, #16
 80150d6:	4344      	muls	r4, r0
 80150d8:	683a      	ldr	r2, [r7, #0]
 80150da:	0c11      	lsrs	r1, r2, #16
 80150dc:	1861      	adds	r1, r4, r1
 80150de:	0c1c      	lsrs	r4, r3, #16
 80150e0:	1909      	adds	r1, r1, r4
 80150e2:	0c0c      	lsrs	r4, r1, #16
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	0409      	lsls	r1, r1, #16
 80150e8:	430b      	orrs	r3, r1
 80150ea:	c708      	stmia	r7!, {r3}
 80150ec:	9b04      	ldr	r3, [sp, #16]
 80150ee:	42b3      	cmp	r3, r6
 80150f0:	d8e9      	bhi.n	80150c6 <__multiply+0xc6>
 80150f2:	4663      	mov	r3, ip
 80150f4:	9a05      	ldr	r2, [sp, #20]
 80150f6:	509c      	str	r4, [r3, r2]
 80150f8:	9b00      	ldr	r3, [sp, #0]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	0c1e      	lsrs	r6, r3, #16
 80150fe:	d020      	beq.n	8015142 <__multiply+0x142>
 8015100:	4663      	mov	r3, ip
 8015102:	002c      	movs	r4, r5
 8015104:	4660      	mov	r0, ip
 8015106:	2700      	movs	r7, #0
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	3414      	adds	r4, #20
 801510c:	6822      	ldr	r2, [r4, #0]
 801510e:	b29b      	uxth	r3, r3
 8015110:	b291      	uxth	r1, r2
 8015112:	4371      	muls	r1, r6
 8015114:	6802      	ldr	r2, [r0, #0]
 8015116:	0c12      	lsrs	r2, r2, #16
 8015118:	1889      	adds	r1, r1, r2
 801511a:	19cf      	adds	r7, r1, r7
 801511c:	0439      	lsls	r1, r7, #16
 801511e:	430b      	orrs	r3, r1
 8015120:	6003      	str	r3, [r0, #0]
 8015122:	cc02      	ldmia	r4!, {r1}
 8015124:	6843      	ldr	r3, [r0, #4]
 8015126:	0c09      	lsrs	r1, r1, #16
 8015128:	4371      	muls	r1, r6
 801512a:	b29b      	uxth	r3, r3
 801512c:	0c3f      	lsrs	r7, r7, #16
 801512e:	18cb      	adds	r3, r1, r3
 8015130:	9a04      	ldr	r2, [sp, #16]
 8015132:	19db      	adds	r3, r3, r7
 8015134:	0c1f      	lsrs	r7, r3, #16
 8015136:	3004      	adds	r0, #4
 8015138:	42a2      	cmp	r2, r4
 801513a:	d8e7      	bhi.n	801510c <__multiply+0x10c>
 801513c:	4662      	mov	r2, ip
 801513e:	9905      	ldr	r1, [sp, #20]
 8015140:	5053      	str	r3, [r2, r1]
 8015142:	9b00      	ldr	r3, [sp, #0]
 8015144:	3304      	adds	r3, #4
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	2304      	movs	r3, #4
 801514a:	449c      	add	ip, r3
 801514c:	e79d      	b.n	801508a <__multiply+0x8a>
 801514e:	9b02      	ldr	r3, [sp, #8]
 8015150:	3b01      	subs	r3, #1
 8015152:	9302      	str	r3, [sp, #8]
 8015154:	e79d      	b.n	8015092 <__multiply+0x92>
 8015156:	46c0      	nop			; (mov r8, r8)
 8015158:	08016ca4 	.word	0x08016ca4
 801515c:	08016d18 	.word	0x08016d18

08015160 <__pow5mult>:
 8015160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015162:	2303      	movs	r3, #3
 8015164:	0015      	movs	r5, r2
 8015166:	0007      	movs	r7, r0
 8015168:	000e      	movs	r6, r1
 801516a:	401a      	ands	r2, r3
 801516c:	421d      	tst	r5, r3
 801516e:	d008      	beq.n	8015182 <__pow5mult+0x22>
 8015170:	4925      	ldr	r1, [pc, #148]	; (8015208 <__pow5mult+0xa8>)
 8015172:	3a01      	subs	r2, #1
 8015174:	0092      	lsls	r2, r2, #2
 8015176:	5852      	ldr	r2, [r2, r1]
 8015178:	2300      	movs	r3, #0
 801517a:	0031      	movs	r1, r6
 801517c:	f7ff fe9e 	bl	8014ebc <__multadd>
 8015180:	0006      	movs	r6, r0
 8015182:	10ad      	asrs	r5, r5, #2
 8015184:	d03d      	beq.n	8015202 <__pow5mult+0xa2>
 8015186:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8015188:	2c00      	cmp	r4, #0
 801518a:	d10f      	bne.n	80151ac <__pow5mult+0x4c>
 801518c:	2010      	movs	r0, #16
 801518e:	f7ff fe17 	bl	8014dc0 <malloc>
 8015192:	1e02      	subs	r2, r0, #0
 8015194:	6278      	str	r0, [r7, #36]	; 0x24
 8015196:	d105      	bne.n	80151a4 <__pow5mult+0x44>
 8015198:	21d7      	movs	r1, #215	; 0xd7
 801519a:	4b1c      	ldr	r3, [pc, #112]	; (801520c <__pow5mult+0xac>)
 801519c:	481c      	ldr	r0, [pc, #112]	; (8015210 <__pow5mult+0xb0>)
 801519e:	0049      	lsls	r1, r1, #1
 80151a0:	f000 fe04 	bl	8015dac <__assert_func>
 80151a4:	6044      	str	r4, [r0, #4]
 80151a6:	6084      	str	r4, [r0, #8]
 80151a8:	6004      	str	r4, [r0, #0]
 80151aa:	60c4      	str	r4, [r0, #12]
 80151ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ae:	689c      	ldr	r4, [r3, #8]
 80151b0:	9301      	str	r3, [sp, #4]
 80151b2:	2c00      	cmp	r4, #0
 80151b4:	d108      	bne.n	80151c8 <__pow5mult+0x68>
 80151b6:	0038      	movs	r0, r7
 80151b8:	4916      	ldr	r1, [pc, #88]	; (8015214 <__pow5mult+0xb4>)
 80151ba:	f7ff ff0b 	bl	8014fd4 <__i2b>
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	0004      	movs	r4, r0
 80151c2:	6098      	str	r0, [r3, #8]
 80151c4:	2300      	movs	r3, #0
 80151c6:	6003      	str	r3, [r0, #0]
 80151c8:	2301      	movs	r3, #1
 80151ca:	421d      	tst	r5, r3
 80151cc:	d00a      	beq.n	80151e4 <__pow5mult+0x84>
 80151ce:	0031      	movs	r1, r6
 80151d0:	0022      	movs	r2, r4
 80151d2:	0038      	movs	r0, r7
 80151d4:	f7ff ff14 	bl	8015000 <__multiply>
 80151d8:	0031      	movs	r1, r6
 80151da:	9001      	str	r0, [sp, #4]
 80151dc:	0038      	movs	r0, r7
 80151de:	f7ff fe49 	bl	8014e74 <_Bfree>
 80151e2:	9e01      	ldr	r6, [sp, #4]
 80151e4:	106d      	asrs	r5, r5, #1
 80151e6:	d00c      	beq.n	8015202 <__pow5mult+0xa2>
 80151e8:	6820      	ldr	r0, [r4, #0]
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d107      	bne.n	80151fe <__pow5mult+0x9e>
 80151ee:	0022      	movs	r2, r4
 80151f0:	0021      	movs	r1, r4
 80151f2:	0038      	movs	r0, r7
 80151f4:	f7ff ff04 	bl	8015000 <__multiply>
 80151f8:	2300      	movs	r3, #0
 80151fa:	6020      	str	r0, [r4, #0]
 80151fc:	6003      	str	r3, [r0, #0]
 80151fe:	0004      	movs	r4, r0
 8015200:	e7e2      	b.n	80151c8 <__pow5mult+0x68>
 8015202:	0030      	movs	r0, r6
 8015204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015206:	46c0      	nop			; (mov r8, r8)
 8015208:	08016e68 	.word	0x08016e68
 801520c:	08016c32 	.word	0x08016c32
 8015210:	08016d18 	.word	0x08016d18
 8015214:	00000271 	.word	0x00000271

08015218 <__lshift>:
 8015218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801521a:	000c      	movs	r4, r1
 801521c:	0017      	movs	r7, r2
 801521e:	6923      	ldr	r3, [r4, #16]
 8015220:	1155      	asrs	r5, r2, #5
 8015222:	b087      	sub	sp, #28
 8015224:	18eb      	adds	r3, r5, r3
 8015226:	9302      	str	r3, [sp, #8]
 8015228:	3301      	adds	r3, #1
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	6849      	ldr	r1, [r1, #4]
 801522e:	68a3      	ldr	r3, [r4, #8]
 8015230:	9004      	str	r0, [sp, #16]
 8015232:	9a01      	ldr	r2, [sp, #4]
 8015234:	4293      	cmp	r3, r2
 8015236:	db10      	blt.n	801525a <__lshift+0x42>
 8015238:	9804      	ldr	r0, [sp, #16]
 801523a:	f7ff fdd7 	bl	8014dec <_Balloc>
 801523e:	2300      	movs	r3, #0
 8015240:	0002      	movs	r2, r0
 8015242:	0006      	movs	r6, r0
 8015244:	0019      	movs	r1, r3
 8015246:	3214      	adds	r2, #20
 8015248:	4298      	cmp	r0, r3
 801524a:	d10c      	bne.n	8015266 <__lshift+0x4e>
 801524c:	21da      	movs	r1, #218	; 0xda
 801524e:	0002      	movs	r2, r0
 8015250:	4b26      	ldr	r3, [pc, #152]	; (80152ec <__lshift+0xd4>)
 8015252:	4827      	ldr	r0, [pc, #156]	; (80152f0 <__lshift+0xd8>)
 8015254:	31ff      	adds	r1, #255	; 0xff
 8015256:	f000 fda9 	bl	8015dac <__assert_func>
 801525a:	3101      	adds	r1, #1
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	e7e8      	b.n	8015232 <__lshift+0x1a>
 8015260:	0098      	lsls	r0, r3, #2
 8015262:	5011      	str	r1, [r2, r0]
 8015264:	3301      	adds	r3, #1
 8015266:	42ab      	cmp	r3, r5
 8015268:	dbfa      	blt.n	8015260 <__lshift+0x48>
 801526a:	43eb      	mvns	r3, r5
 801526c:	17db      	asrs	r3, r3, #31
 801526e:	401d      	ands	r5, r3
 8015270:	211f      	movs	r1, #31
 8015272:	0023      	movs	r3, r4
 8015274:	0038      	movs	r0, r7
 8015276:	00ad      	lsls	r5, r5, #2
 8015278:	1955      	adds	r5, r2, r5
 801527a:	6922      	ldr	r2, [r4, #16]
 801527c:	3314      	adds	r3, #20
 801527e:	0092      	lsls	r2, r2, #2
 8015280:	4008      	ands	r0, r1
 8015282:	4684      	mov	ip, r0
 8015284:	189a      	adds	r2, r3, r2
 8015286:	420f      	tst	r7, r1
 8015288:	d02a      	beq.n	80152e0 <__lshift+0xc8>
 801528a:	3101      	adds	r1, #1
 801528c:	1a09      	subs	r1, r1, r0
 801528e:	9105      	str	r1, [sp, #20]
 8015290:	2100      	movs	r1, #0
 8015292:	9503      	str	r5, [sp, #12]
 8015294:	4667      	mov	r7, ip
 8015296:	6818      	ldr	r0, [r3, #0]
 8015298:	40b8      	lsls	r0, r7
 801529a:	4301      	orrs	r1, r0
 801529c:	9803      	ldr	r0, [sp, #12]
 801529e:	c002      	stmia	r0!, {r1}
 80152a0:	cb02      	ldmia	r3!, {r1}
 80152a2:	9003      	str	r0, [sp, #12]
 80152a4:	9805      	ldr	r0, [sp, #20]
 80152a6:	40c1      	lsrs	r1, r0
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d8f3      	bhi.n	8015294 <__lshift+0x7c>
 80152ac:	0020      	movs	r0, r4
 80152ae:	3015      	adds	r0, #21
 80152b0:	2304      	movs	r3, #4
 80152b2:	4282      	cmp	r2, r0
 80152b4:	d304      	bcc.n	80152c0 <__lshift+0xa8>
 80152b6:	1b13      	subs	r3, r2, r4
 80152b8:	3b15      	subs	r3, #21
 80152ba:	089b      	lsrs	r3, r3, #2
 80152bc:	3301      	adds	r3, #1
 80152be:	009b      	lsls	r3, r3, #2
 80152c0:	50e9      	str	r1, [r5, r3]
 80152c2:	2900      	cmp	r1, #0
 80152c4:	d002      	beq.n	80152cc <__lshift+0xb4>
 80152c6:	9b02      	ldr	r3, [sp, #8]
 80152c8:	3302      	adds	r3, #2
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	9b01      	ldr	r3, [sp, #4]
 80152ce:	9804      	ldr	r0, [sp, #16]
 80152d0:	3b01      	subs	r3, #1
 80152d2:	0021      	movs	r1, r4
 80152d4:	6133      	str	r3, [r6, #16]
 80152d6:	f7ff fdcd 	bl	8014e74 <_Bfree>
 80152da:	0030      	movs	r0, r6
 80152dc:	b007      	add	sp, #28
 80152de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152e0:	cb02      	ldmia	r3!, {r1}
 80152e2:	c502      	stmia	r5!, {r1}
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d8fb      	bhi.n	80152e0 <__lshift+0xc8>
 80152e8:	e7f0      	b.n	80152cc <__lshift+0xb4>
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	08016ca4 	.word	0x08016ca4
 80152f0:	08016d18 	.word	0x08016d18

080152f4 <__mcmp>:
 80152f4:	6902      	ldr	r2, [r0, #16]
 80152f6:	690b      	ldr	r3, [r1, #16]
 80152f8:	b530      	push	{r4, r5, lr}
 80152fa:	0004      	movs	r4, r0
 80152fc:	1ad0      	subs	r0, r2, r3
 80152fe:	429a      	cmp	r2, r3
 8015300:	d10d      	bne.n	801531e <__mcmp+0x2a>
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	3414      	adds	r4, #20
 8015306:	3114      	adds	r1, #20
 8015308:	18e2      	adds	r2, r4, r3
 801530a:	18c9      	adds	r1, r1, r3
 801530c:	3a04      	subs	r2, #4
 801530e:	3904      	subs	r1, #4
 8015310:	6815      	ldr	r5, [r2, #0]
 8015312:	680b      	ldr	r3, [r1, #0]
 8015314:	429d      	cmp	r5, r3
 8015316:	d003      	beq.n	8015320 <__mcmp+0x2c>
 8015318:	2001      	movs	r0, #1
 801531a:	429d      	cmp	r5, r3
 801531c:	d303      	bcc.n	8015326 <__mcmp+0x32>
 801531e:	bd30      	pop	{r4, r5, pc}
 8015320:	4294      	cmp	r4, r2
 8015322:	d3f3      	bcc.n	801530c <__mcmp+0x18>
 8015324:	e7fb      	b.n	801531e <__mcmp+0x2a>
 8015326:	4240      	negs	r0, r0
 8015328:	e7f9      	b.n	801531e <__mcmp+0x2a>
	...

0801532c <__mdiff>:
 801532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801532e:	000e      	movs	r6, r1
 8015330:	0007      	movs	r7, r0
 8015332:	0011      	movs	r1, r2
 8015334:	0030      	movs	r0, r6
 8015336:	b087      	sub	sp, #28
 8015338:	0014      	movs	r4, r2
 801533a:	f7ff ffdb 	bl	80152f4 <__mcmp>
 801533e:	1e05      	subs	r5, r0, #0
 8015340:	d110      	bne.n	8015364 <__mdiff+0x38>
 8015342:	0001      	movs	r1, r0
 8015344:	0038      	movs	r0, r7
 8015346:	f7ff fd51 	bl	8014dec <_Balloc>
 801534a:	1e02      	subs	r2, r0, #0
 801534c:	d104      	bne.n	8015358 <__mdiff+0x2c>
 801534e:	4b40      	ldr	r3, [pc, #256]	; (8015450 <__mdiff+0x124>)
 8015350:	4940      	ldr	r1, [pc, #256]	; (8015454 <__mdiff+0x128>)
 8015352:	4841      	ldr	r0, [pc, #260]	; (8015458 <__mdiff+0x12c>)
 8015354:	f000 fd2a 	bl	8015dac <__assert_func>
 8015358:	2301      	movs	r3, #1
 801535a:	6145      	str	r5, [r0, #20]
 801535c:	6103      	str	r3, [r0, #16]
 801535e:	0010      	movs	r0, r2
 8015360:	b007      	add	sp, #28
 8015362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015364:	2301      	movs	r3, #1
 8015366:	9301      	str	r3, [sp, #4]
 8015368:	2800      	cmp	r0, #0
 801536a:	db04      	blt.n	8015376 <__mdiff+0x4a>
 801536c:	0023      	movs	r3, r4
 801536e:	0034      	movs	r4, r6
 8015370:	001e      	movs	r6, r3
 8015372:	2300      	movs	r3, #0
 8015374:	9301      	str	r3, [sp, #4]
 8015376:	0038      	movs	r0, r7
 8015378:	6861      	ldr	r1, [r4, #4]
 801537a:	f7ff fd37 	bl	8014dec <_Balloc>
 801537e:	1e02      	subs	r2, r0, #0
 8015380:	d103      	bne.n	801538a <__mdiff+0x5e>
 8015382:	2190      	movs	r1, #144	; 0x90
 8015384:	4b32      	ldr	r3, [pc, #200]	; (8015450 <__mdiff+0x124>)
 8015386:	0089      	lsls	r1, r1, #2
 8015388:	e7e3      	b.n	8015352 <__mdiff+0x26>
 801538a:	9b01      	ldr	r3, [sp, #4]
 801538c:	2700      	movs	r7, #0
 801538e:	60c3      	str	r3, [r0, #12]
 8015390:	6920      	ldr	r0, [r4, #16]
 8015392:	3414      	adds	r4, #20
 8015394:	9401      	str	r4, [sp, #4]
 8015396:	9b01      	ldr	r3, [sp, #4]
 8015398:	0084      	lsls	r4, r0, #2
 801539a:	191b      	adds	r3, r3, r4
 801539c:	0034      	movs	r4, r6
 801539e:	9302      	str	r3, [sp, #8]
 80153a0:	6933      	ldr	r3, [r6, #16]
 80153a2:	3414      	adds	r4, #20
 80153a4:	0099      	lsls	r1, r3, #2
 80153a6:	1863      	adds	r3, r4, r1
 80153a8:	9303      	str	r3, [sp, #12]
 80153aa:	0013      	movs	r3, r2
 80153ac:	3314      	adds	r3, #20
 80153ae:	469c      	mov	ip, r3
 80153b0:	9305      	str	r3, [sp, #20]
 80153b2:	9b01      	ldr	r3, [sp, #4]
 80153b4:	9304      	str	r3, [sp, #16]
 80153b6:	9b04      	ldr	r3, [sp, #16]
 80153b8:	cc02      	ldmia	r4!, {r1}
 80153ba:	cb20      	ldmia	r3!, {r5}
 80153bc:	9304      	str	r3, [sp, #16]
 80153be:	b2ab      	uxth	r3, r5
 80153c0:	19df      	adds	r7, r3, r7
 80153c2:	b28b      	uxth	r3, r1
 80153c4:	1afb      	subs	r3, r7, r3
 80153c6:	0c09      	lsrs	r1, r1, #16
 80153c8:	0c2d      	lsrs	r5, r5, #16
 80153ca:	1a6d      	subs	r5, r5, r1
 80153cc:	1419      	asrs	r1, r3, #16
 80153ce:	186d      	adds	r5, r5, r1
 80153d0:	4661      	mov	r1, ip
 80153d2:	142f      	asrs	r7, r5, #16
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	042d      	lsls	r5, r5, #16
 80153d8:	432b      	orrs	r3, r5
 80153da:	c108      	stmia	r1!, {r3}
 80153dc:	9b03      	ldr	r3, [sp, #12]
 80153de:	468c      	mov	ip, r1
 80153e0:	42a3      	cmp	r3, r4
 80153e2:	d8e8      	bhi.n	80153b6 <__mdiff+0x8a>
 80153e4:	0031      	movs	r1, r6
 80153e6:	9c03      	ldr	r4, [sp, #12]
 80153e8:	3115      	adds	r1, #21
 80153ea:	2304      	movs	r3, #4
 80153ec:	428c      	cmp	r4, r1
 80153ee:	d304      	bcc.n	80153fa <__mdiff+0xce>
 80153f0:	1ba3      	subs	r3, r4, r6
 80153f2:	3b15      	subs	r3, #21
 80153f4:	089b      	lsrs	r3, r3, #2
 80153f6:	3301      	adds	r3, #1
 80153f8:	009b      	lsls	r3, r3, #2
 80153fa:	9901      	ldr	r1, [sp, #4]
 80153fc:	18cc      	adds	r4, r1, r3
 80153fe:	9905      	ldr	r1, [sp, #20]
 8015400:	0026      	movs	r6, r4
 8015402:	18cb      	adds	r3, r1, r3
 8015404:	469c      	mov	ip, r3
 8015406:	9902      	ldr	r1, [sp, #8]
 8015408:	428e      	cmp	r6, r1
 801540a:	d310      	bcc.n	801542e <__mdiff+0x102>
 801540c:	9e02      	ldr	r6, [sp, #8]
 801540e:	1ee1      	subs	r1, r4, #3
 8015410:	2500      	movs	r5, #0
 8015412:	428e      	cmp	r6, r1
 8015414:	d304      	bcc.n	8015420 <__mdiff+0xf4>
 8015416:	0031      	movs	r1, r6
 8015418:	3103      	adds	r1, #3
 801541a:	1b0c      	subs	r4, r1, r4
 801541c:	08a4      	lsrs	r4, r4, #2
 801541e:	00a5      	lsls	r5, r4, #2
 8015420:	195b      	adds	r3, r3, r5
 8015422:	3b04      	subs	r3, #4
 8015424:	6819      	ldr	r1, [r3, #0]
 8015426:	2900      	cmp	r1, #0
 8015428:	d00f      	beq.n	801544a <__mdiff+0x11e>
 801542a:	6110      	str	r0, [r2, #16]
 801542c:	e797      	b.n	801535e <__mdiff+0x32>
 801542e:	ce02      	ldmia	r6!, {r1}
 8015430:	b28d      	uxth	r5, r1
 8015432:	19ed      	adds	r5, r5, r7
 8015434:	0c0f      	lsrs	r7, r1, #16
 8015436:	1429      	asrs	r1, r5, #16
 8015438:	1879      	adds	r1, r7, r1
 801543a:	140f      	asrs	r7, r1, #16
 801543c:	b2ad      	uxth	r5, r5
 801543e:	0409      	lsls	r1, r1, #16
 8015440:	430d      	orrs	r5, r1
 8015442:	4661      	mov	r1, ip
 8015444:	c120      	stmia	r1!, {r5}
 8015446:	468c      	mov	ip, r1
 8015448:	e7dd      	b.n	8015406 <__mdiff+0xda>
 801544a:	3801      	subs	r0, #1
 801544c:	e7e9      	b.n	8015422 <__mdiff+0xf6>
 801544e:	46c0      	nop			; (mov r8, r8)
 8015450:	08016ca4 	.word	0x08016ca4
 8015454:	00000232 	.word	0x00000232
 8015458:	08016d18 	.word	0x08016d18

0801545c <__d2b>:
 801545c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801545e:	2101      	movs	r1, #1
 8015460:	0014      	movs	r4, r2
 8015462:	001e      	movs	r6, r3
 8015464:	9f08      	ldr	r7, [sp, #32]
 8015466:	f7ff fcc1 	bl	8014dec <_Balloc>
 801546a:	1e05      	subs	r5, r0, #0
 801546c:	d105      	bne.n	801547a <__d2b+0x1e>
 801546e:	0002      	movs	r2, r0
 8015470:	4b26      	ldr	r3, [pc, #152]	; (801550c <__d2b+0xb0>)
 8015472:	4927      	ldr	r1, [pc, #156]	; (8015510 <__d2b+0xb4>)
 8015474:	4827      	ldr	r0, [pc, #156]	; (8015514 <__d2b+0xb8>)
 8015476:	f000 fc99 	bl	8015dac <__assert_func>
 801547a:	0333      	lsls	r3, r6, #12
 801547c:	0076      	lsls	r6, r6, #1
 801547e:	0b1b      	lsrs	r3, r3, #12
 8015480:	0d76      	lsrs	r6, r6, #21
 8015482:	d124      	bne.n	80154ce <__d2b+0x72>
 8015484:	9301      	str	r3, [sp, #4]
 8015486:	2c00      	cmp	r4, #0
 8015488:	d027      	beq.n	80154da <__d2b+0x7e>
 801548a:	4668      	mov	r0, sp
 801548c:	9400      	str	r4, [sp, #0]
 801548e:	f7ff fd73 	bl	8014f78 <__lo0bits>
 8015492:	9c00      	ldr	r4, [sp, #0]
 8015494:	2800      	cmp	r0, #0
 8015496:	d01e      	beq.n	80154d6 <__d2b+0x7a>
 8015498:	9b01      	ldr	r3, [sp, #4]
 801549a:	2120      	movs	r1, #32
 801549c:	001a      	movs	r2, r3
 801549e:	1a09      	subs	r1, r1, r0
 80154a0:	408a      	lsls	r2, r1
 80154a2:	40c3      	lsrs	r3, r0
 80154a4:	4322      	orrs	r2, r4
 80154a6:	616a      	str	r2, [r5, #20]
 80154a8:	9301      	str	r3, [sp, #4]
 80154aa:	9c01      	ldr	r4, [sp, #4]
 80154ac:	61ac      	str	r4, [r5, #24]
 80154ae:	1e63      	subs	r3, r4, #1
 80154b0:	419c      	sbcs	r4, r3
 80154b2:	3401      	adds	r4, #1
 80154b4:	612c      	str	r4, [r5, #16]
 80154b6:	2e00      	cmp	r6, #0
 80154b8:	d018      	beq.n	80154ec <__d2b+0x90>
 80154ba:	4b17      	ldr	r3, [pc, #92]	; (8015518 <__d2b+0xbc>)
 80154bc:	18f6      	adds	r6, r6, r3
 80154be:	2335      	movs	r3, #53	; 0x35
 80154c0:	1836      	adds	r6, r6, r0
 80154c2:	1a18      	subs	r0, r3, r0
 80154c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154c6:	603e      	str	r6, [r7, #0]
 80154c8:	6018      	str	r0, [r3, #0]
 80154ca:	0028      	movs	r0, r5
 80154cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80154ce:	2280      	movs	r2, #128	; 0x80
 80154d0:	0352      	lsls	r2, r2, #13
 80154d2:	4313      	orrs	r3, r2
 80154d4:	e7d6      	b.n	8015484 <__d2b+0x28>
 80154d6:	616c      	str	r4, [r5, #20]
 80154d8:	e7e7      	b.n	80154aa <__d2b+0x4e>
 80154da:	a801      	add	r0, sp, #4
 80154dc:	f7ff fd4c 	bl	8014f78 <__lo0bits>
 80154e0:	2401      	movs	r4, #1
 80154e2:	9b01      	ldr	r3, [sp, #4]
 80154e4:	612c      	str	r4, [r5, #16]
 80154e6:	616b      	str	r3, [r5, #20]
 80154e8:	3020      	adds	r0, #32
 80154ea:	e7e4      	b.n	80154b6 <__d2b+0x5a>
 80154ec:	4b0b      	ldr	r3, [pc, #44]	; (801551c <__d2b+0xc0>)
 80154ee:	18c0      	adds	r0, r0, r3
 80154f0:	4b0b      	ldr	r3, [pc, #44]	; (8015520 <__d2b+0xc4>)
 80154f2:	6038      	str	r0, [r7, #0]
 80154f4:	18e3      	adds	r3, r4, r3
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	18eb      	adds	r3, r5, r3
 80154fa:	6958      	ldr	r0, [r3, #20]
 80154fc:	f7ff fd22 	bl	8014f44 <__hi0bits>
 8015500:	0164      	lsls	r4, r4, #5
 8015502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015504:	1a24      	subs	r4, r4, r0
 8015506:	601c      	str	r4, [r3, #0]
 8015508:	e7df      	b.n	80154ca <__d2b+0x6e>
 801550a:	46c0      	nop			; (mov r8, r8)
 801550c:	08016ca4 	.word	0x08016ca4
 8015510:	0000030a 	.word	0x0000030a
 8015514:	08016d18 	.word	0x08016d18
 8015518:	fffffbcd 	.word	0xfffffbcd
 801551c:	fffffbce 	.word	0xfffffbce
 8015520:	3fffffff 	.word	0x3fffffff

08015524 <_calloc_r>:
 8015524:	b570      	push	{r4, r5, r6, lr}
 8015526:	0c13      	lsrs	r3, r2, #16
 8015528:	0c0d      	lsrs	r5, r1, #16
 801552a:	d11e      	bne.n	801556a <_calloc_r+0x46>
 801552c:	2b00      	cmp	r3, #0
 801552e:	d10c      	bne.n	801554a <_calloc_r+0x26>
 8015530:	b289      	uxth	r1, r1
 8015532:	b294      	uxth	r4, r2
 8015534:	434c      	muls	r4, r1
 8015536:	0021      	movs	r1, r4
 8015538:	f000 f88c 	bl	8015654 <_malloc_r>
 801553c:	1e05      	subs	r5, r0, #0
 801553e:	d01b      	beq.n	8015578 <_calloc_r+0x54>
 8015540:	0022      	movs	r2, r4
 8015542:	2100      	movs	r1, #0
 8015544:	f7fd fc83 	bl	8012e4e <memset>
 8015548:	e016      	b.n	8015578 <_calloc_r+0x54>
 801554a:	1c1d      	adds	r5, r3, #0
 801554c:	1c0b      	adds	r3, r1, #0
 801554e:	b292      	uxth	r2, r2
 8015550:	b289      	uxth	r1, r1
 8015552:	b29c      	uxth	r4, r3
 8015554:	4351      	muls	r1, r2
 8015556:	b2ab      	uxth	r3, r5
 8015558:	4363      	muls	r3, r4
 801555a:	0c0c      	lsrs	r4, r1, #16
 801555c:	191c      	adds	r4, r3, r4
 801555e:	0c22      	lsrs	r2, r4, #16
 8015560:	d107      	bne.n	8015572 <_calloc_r+0x4e>
 8015562:	0424      	lsls	r4, r4, #16
 8015564:	b289      	uxth	r1, r1
 8015566:	430c      	orrs	r4, r1
 8015568:	e7e5      	b.n	8015536 <_calloc_r+0x12>
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <_calloc_r+0x4e>
 801556e:	1c13      	adds	r3, r2, #0
 8015570:	e7ed      	b.n	801554e <_calloc_r+0x2a>
 8015572:	230c      	movs	r3, #12
 8015574:	2500      	movs	r5, #0
 8015576:	6003      	str	r3, [r0, #0]
 8015578:	0028      	movs	r0, r5
 801557a:	bd70      	pop	{r4, r5, r6, pc}

0801557c <_free_r>:
 801557c:	b570      	push	{r4, r5, r6, lr}
 801557e:	0005      	movs	r5, r0
 8015580:	2900      	cmp	r1, #0
 8015582:	d010      	beq.n	80155a6 <_free_r+0x2a>
 8015584:	1f0c      	subs	r4, r1, #4
 8015586:	6823      	ldr	r3, [r4, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	da00      	bge.n	801558e <_free_r+0x12>
 801558c:	18e4      	adds	r4, r4, r3
 801558e:	0028      	movs	r0, r5
 8015590:	f000 fcaa 	bl	8015ee8 <__malloc_lock>
 8015594:	4a1d      	ldr	r2, [pc, #116]	; (801560c <_free_r+0x90>)
 8015596:	6813      	ldr	r3, [r2, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d105      	bne.n	80155a8 <_free_r+0x2c>
 801559c:	6063      	str	r3, [r4, #4]
 801559e:	6014      	str	r4, [r2, #0]
 80155a0:	0028      	movs	r0, r5
 80155a2:	f000 fca9 	bl	8015ef8 <__malloc_unlock>
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	42a3      	cmp	r3, r4
 80155aa:	d908      	bls.n	80155be <_free_r+0x42>
 80155ac:	6821      	ldr	r1, [r4, #0]
 80155ae:	1860      	adds	r0, r4, r1
 80155b0:	4283      	cmp	r3, r0
 80155b2:	d1f3      	bne.n	801559c <_free_r+0x20>
 80155b4:	6818      	ldr	r0, [r3, #0]
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	1841      	adds	r1, r0, r1
 80155ba:	6021      	str	r1, [r4, #0]
 80155bc:	e7ee      	b.n	801559c <_free_r+0x20>
 80155be:	001a      	movs	r2, r3
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d001      	beq.n	80155ca <_free_r+0x4e>
 80155c6:	42a3      	cmp	r3, r4
 80155c8:	d9f9      	bls.n	80155be <_free_r+0x42>
 80155ca:	6811      	ldr	r1, [r2, #0]
 80155cc:	1850      	adds	r0, r2, r1
 80155ce:	42a0      	cmp	r0, r4
 80155d0:	d10b      	bne.n	80155ea <_free_r+0x6e>
 80155d2:	6820      	ldr	r0, [r4, #0]
 80155d4:	1809      	adds	r1, r1, r0
 80155d6:	1850      	adds	r0, r2, r1
 80155d8:	6011      	str	r1, [r2, #0]
 80155da:	4283      	cmp	r3, r0
 80155dc:	d1e0      	bne.n	80155a0 <_free_r+0x24>
 80155de:	6818      	ldr	r0, [r3, #0]
 80155e0:	685b      	ldr	r3, [r3, #4]
 80155e2:	1841      	adds	r1, r0, r1
 80155e4:	6011      	str	r1, [r2, #0]
 80155e6:	6053      	str	r3, [r2, #4]
 80155e8:	e7da      	b.n	80155a0 <_free_r+0x24>
 80155ea:	42a0      	cmp	r0, r4
 80155ec:	d902      	bls.n	80155f4 <_free_r+0x78>
 80155ee:	230c      	movs	r3, #12
 80155f0:	602b      	str	r3, [r5, #0]
 80155f2:	e7d5      	b.n	80155a0 <_free_r+0x24>
 80155f4:	6821      	ldr	r1, [r4, #0]
 80155f6:	1860      	adds	r0, r4, r1
 80155f8:	4283      	cmp	r3, r0
 80155fa:	d103      	bne.n	8015604 <_free_r+0x88>
 80155fc:	6818      	ldr	r0, [r3, #0]
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	1841      	adds	r1, r0, r1
 8015602:	6021      	str	r1, [r4, #0]
 8015604:	6063      	str	r3, [r4, #4]
 8015606:	6054      	str	r4, [r2, #4]
 8015608:	e7ca      	b.n	80155a0 <_free_r+0x24>
 801560a:	46c0      	nop			; (mov r8, r8)
 801560c:	20005f64 	.word	0x20005f64

08015610 <sbrk_aligned>:
 8015610:	b570      	push	{r4, r5, r6, lr}
 8015612:	4e0f      	ldr	r6, [pc, #60]	; (8015650 <sbrk_aligned+0x40>)
 8015614:	000d      	movs	r5, r1
 8015616:	6831      	ldr	r1, [r6, #0]
 8015618:	0004      	movs	r4, r0
 801561a:	2900      	cmp	r1, #0
 801561c:	d102      	bne.n	8015624 <sbrk_aligned+0x14>
 801561e:	f000 fb53 	bl	8015cc8 <_sbrk_r>
 8015622:	6030      	str	r0, [r6, #0]
 8015624:	0029      	movs	r1, r5
 8015626:	0020      	movs	r0, r4
 8015628:	f000 fb4e 	bl	8015cc8 <_sbrk_r>
 801562c:	1c43      	adds	r3, r0, #1
 801562e:	d00a      	beq.n	8015646 <sbrk_aligned+0x36>
 8015630:	2303      	movs	r3, #3
 8015632:	1cc5      	adds	r5, r0, #3
 8015634:	439d      	bics	r5, r3
 8015636:	42a8      	cmp	r0, r5
 8015638:	d007      	beq.n	801564a <sbrk_aligned+0x3a>
 801563a:	1a29      	subs	r1, r5, r0
 801563c:	0020      	movs	r0, r4
 801563e:	f000 fb43 	bl	8015cc8 <_sbrk_r>
 8015642:	1c43      	adds	r3, r0, #1
 8015644:	d101      	bne.n	801564a <sbrk_aligned+0x3a>
 8015646:	2501      	movs	r5, #1
 8015648:	426d      	negs	r5, r5
 801564a:	0028      	movs	r0, r5
 801564c:	bd70      	pop	{r4, r5, r6, pc}
 801564e:	46c0      	nop			; (mov r8, r8)
 8015650:	20005f68 	.word	0x20005f68

08015654 <_malloc_r>:
 8015654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015656:	2203      	movs	r2, #3
 8015658:	1ccb      	adds	r3, r1, #3
 801565a:	4393      	bics	r3, r2
 801565c:	3308      	adds	r3, #8
 801565e:	0006      	movs	r6, r0
 8015660:	001f      	movs	r7, r3
 8015662:	2b0c      	cmp	r3, #12
 8015664:	d232      	bcs.n	80156cc <_malloc_r+0x78>
 8015666:	270c      	movs	r7, #12
 8015668:	42b9      	cmp	r1, r7
 801566a:	d831      	bhi.n	80156d0 <_malloc_r+0x7c>
 801566c:	0030      	movs	r0, r6
 801566e:	f000 fc3b 	bl	8015ee8 <__malloc_lock>
 8015672:	4d32      	ldr	r5, [pc, #200]	; (801573c <_malloc_r+0xe8>)
 8015674:	682b      	ldr	r3, [r5, #0]
 8015676:	001c      	movs	r4, r3
 8015678:	2c00      	cmp	r4, #0
 801567a:	d12e      	bne.n	80156da <_malloc_r+0x86>
 801567c:	0039      	movs	r1, r7
 801567e:	0030      	movs	r0, r6
 8015680:	f7ff ffc6 	bl	8015610 <sbrk_aligned>
 8015684:	0004      	movs	r4, r0
 8015686:	1c43      	adds	r3, r0, #1
 8015688:	d11e      	bne.n	80156c8 <_malloc_r+0x74>
 801568a:	682c      	ldr	r4, [r5, #0]
 801568c:	0025      	movs	r5, r4
 801568e:	2d00      	cmp	r5, #0
 8015690:	d14a      	bne.n	8015728 <_malloc_r+0xd4>
 8015692:	6823      	ldr	r3, [r4, #0]
 8015694:	0029      	movs	r1, r5
 8015696:	18e3      	adds	r3, r4, r3
 8015698:	0030      	movs	r0, r6
 801569a:	9301      	str	r3, [sp, #4]
 801569c:	f000 fb14 	bl	8015cc8 <_sbrk_r>
 80156a0:	9b01      	ldr	r3, [sp, #4]
 80156a2:	4283      	cmp	r3, r0
 80156a4:	d143      	bne.n	801572e <_malloc_r+0xda>
 80156a6:	6823      	ldr	r3, [r4, #0]
 80156a8:	3703      	adds	r7, #3
 80156aa:	1aff      	subs	r7, r7, r3
 80156ac:	2303      	movs	r3, #3
 80156ae:	439f      	bics	r7, r3
 80156b0:	3708      	adds	r7, #8
 80156b2:	2f0c      	cmp	r7, #12
 80156b4:	d200      	bcs.n	80156b8 <_malloc_r+0x64>
 80156b6:	270c      	movs	r7, #12
 80156b8:	0039      	movs	r1, r7
 80156ba:	0030      	movs	r0, r6
 80156bc:	f7ff ffa8 	bl	8015610 <sbrk_aligned>
 80156c0:	1c43      	adds	r3, r0, #1
 80156c2:	d034      	beq.n	801572e <_malloc_r+0xda>
 80156c4:	6823      	ldr	r3, [r4, #0]
 80156c6:	19df      	adds	r7, r3, r7
 80156c8:	6027      	str	r7, [r4, #0]
 80156ca:	e013      	b.n	80156f4 <_malloc_r+0xa0>
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dacb      	bge.n	8015668 <_malloc_r+0x14>
 80156d0:	230c      	movs	r3, #12
 80156d2:	2500      	movs	r5, #0
 80156d4:	6033      	str	r3, [r6, #0]
 80156d6:	0028      	movs	r0, r5
 80156d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80156da:	6822      	ldr	r2, [r4, #0]
 80156dc:	1bd1      	subs	r1, r2, r7
 80156de:	d420      	bmi.n	8015722 <_malloc_r+0xce>
 80156e0:	290b      	cmp	r1, #11
 80156e2:	d917      	bls.n	8015714 <_malloc_r+0xc0>
 80156e4:	19e2      	adds	r2, r4, r7
 80156e6:	6027      	str	r7, [r4, #0]
 80156e8:	42a3      	cmp	r3, r4
 80156ea:	d111      	bne.n	8015710 <_malloc_r+0xbc>
 80156ec:	602a      	str	r2, [r5, #0]
 80156ee:	6863      	ldr	r3, [r4, #4]
 80156f0:	6011      	str	r1, [r2, #0]
 80156f2:	6053      	str	r3, [r2, #4]
 80156f4:	0030      	movs	r0, r6
 80156f6:	0025      	movs	r5, r4
 80156f8:	f000 fbfe 	bl	8015ef8 <__malloc_unlock>
 80156fc:	2207      	movs	r2, #7
 80156fe:	350b      	adds	r5, #11
 8015700:	1d23      	adds	r3, r4, #4
 8015702:	4395      	bics	r5, r2
 8015704:	1aea      	subs	r2, r5, r3
 8015706:	429d      	cmp	r5, r3
 8015708:	d0e5      	beq.n	80156d6 <_malloc_r+0x82>
 801570a:	1b5b      	subs	r3, r3, r5
 801570c:	50a3      	str	r3, [r4, r2]
 801570e:	e7e2      	b.n	80156d6 <_malloc_r+0x82>
 8015710:	605a      	str	r2, [r3, #4]
 8015712:	e7ec      	b.n	80156ee <_malloc_r+0x9a>
 8015714:	6862      	ldr	r2, [r4, #4]
 8015716:	42a3      	cmp	r3, r4
 8015718:	d101      	bne.n	801571e <_malloc_r+0xca>
 801571a:	602a      	str	r2, [r5, #0]
 801571c:	e7ea      	b.n	80156f4 <_malloc_r+0xa0>
 801571e:	605a      	str	r2, [r3, #4]
 8015720:	e7e8      	b.n	80156f4 <_malloc_r+0xa0>
 8015722:	0023      	movs	r3, r4
 8015724:	6864      	ldr	r4, [r4, #4]
 8015726:	e7a7      	b.n	8015678 <_malloc_r+0x24>
 8015728:	002c      	movs	r4, r5
 801572a:	686d      	ldr	r5, [r5, #4]
 801572c:	e7af      	b.n	801568e <_malloc_r+0x3a>
 801572e:	230c      	movs	r3, #12
 8015730:	0030      	movs	r0, r6
 8015732:	6033      	str	r3, [r6, #0]
 8015734:	f000 fbe0 	bl	8015ef8 <__malloc_unlock>
 8015738:	e7cd      	b.n	80156d6 <_malloc_r+0x82>
 801573a:	46c0      	nop			; (mov r8, r8)
 801573c:	20005f64 	.word	0x20005f64

08015740 <__ssputs_r>:
 8015740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015742:	688e      	ldr	r6, [r1, #8]
 8015744:	b085      	sub	sp, #20
 8015746:	0007      	movs	r7, r0
 8015748:	000c      	movs	r4, r1
 801574a:	9203      	str	r2, [sp, #12]
 801574c:	9301      	str	r3, [sp, #4]
 801574e:	429e      	cmp	r6, r3
 8015750:	d83c      	bhi.n	80157cc <__ssputs_r+0x8c>
 8015752:	2390      	movs	r3, #144	; 0x90
 8015754:	898a      	ldrh	r2, [r1, #12]
 8015756:	00db      	lsls	r3, r3, #3
 8015758:	421a      	tst	r2, r3
 801575a:	d034      	beq.n	80157c6 <__ssputs_r+0x86>
 801575c:	6909      	ldr	r1, [r1, #16]
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	6960      	ldr	r0, [r4, #20]
 8015762:	1a5b      	subs	r3, r3, r1
 8015764:	9302      	str	r3, [sp, #8]
 8015766:	2303      	movs	r3, #3
 8015768:	4343      	muls	r3, r0
 801576a:	0fdd      	lsrs	r5, r3, #31
 801576c:	18ed      	adds	r5, r5, r3
 801576e:	9b01      	ldr	r3, [sp, #4]
 8015770:	9802      	ldr	r0, [sp, #8]
 8015772:	3301      	adds	r3, #1
 8015774:	181b      	adds	r3, r3, r0
 8015776:	106d      	asrs	r5, r5, #1
 8015778:	42ab      	cmp	r3, r5
 801577a:	d900      	bls.n	801577e <__ssputs_r+0x3e>
 801577c:	001d      	movs	r5, r3
 801577e:	0553      	lsls	r3, r2, #21
 8015780:	d532      	bpl.n	80157e8 <__ssputs_r+0xa8>
 8015782:	0029      	movs	r1, r5
 8015784:	0038      	movs	r0, r7
 8015786:	f7ff ff65 	bl	8015654 <_malloc_r>
 801578a:	1e06      	subs	r6, r0, #0
 801578c:	d109      	bne.n	80157a2 <__ssputs_r+0x62>
 801578e:	230c      	movs	r3, #12
 8015790:	603b      	str	r3, [r7, #0]
 8015792:	2340      	movs	r3, #64	; 0x40
 8015794:	2001      	movs	r0, #1
 8015796:	89a2      	ldrh	r2, [r4, #12]
 8015798:	4240      	negs	r0, r0
 801579a:	4313      	orrs	r3, r2
 801579c:	81a3      	strh	r3, [r4, #12]
 801579e:	b005      	add	sp, #20
 80157a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157a2:	9a02      	ldr	r2, [sp, #8]
 80157a4:	6921      	ldr	r1, [r4, #16]
 80157a6:	f7fd fb49 	bl	8012e3c <memcpy>
 80157aa:	89a3      	ldrh	r3, [r4, #12]
 80157ac:	4a14      	ldr	r2, [pc, #80]	; (8015800 <__ssputs_r+0xc0>)
 80157ae:	401a      	ands	r2, r3
 80157b0:	2380      	movs	r3, #128	; 0x80
 80157b2:	4313      	orrs	r3, r2
 80157b4:	81a3      	strh	r3, [r4, #12]
 80157b6:	9b02      	ldr	r3, [sp, #8]
 80157b8:	6126      	str	r6, [r4, #16]
 80157ba:	18f6      	adds	r6, r6, r3
 80157bc:	6026      	str	r6, [r4, #0]
 80157be:	6165      	str	r5, [r4, #20]
 80157c0:	9e01      	ldr	r6, [sp, #4]
 80157c2:	1aed      	subs	r5, r5, r3
 80157c4:	60a5      	str	r5, [r4, #8]
 80157c6:	9b01      	ldr	r3, [sp, #4]
 80157c8:	429e      	cmp	r6, r3
 80157ca:	d900      	bls.n	80157ce <__ssputs_r+0x8e>
 80157cc:	9e01      	ldr	r6, [sp, #4]
 80157ce:	0032      	movs	r2, r6
 80157d0:	9903      	ldr	r1, [sp, #12]
 80157d2:	6820      	ldr	r0, [r4, #0]
 80157d4:	f000 fb74 	bl	8015ec0 <memmove>
 80157d8:	68a3      	ldr	r3, [r4, #8]
 80157da:	2000      	movs	r0, #0
 80157dc:	1b9b      	subs	r3, r3, r6
 80157de:	60a3      	str	r3, [r4, #8]
 80157e0:	6823      	ldr	r3, [r4, #0]
 80157e2:	199e      	adds	r6, r3, r6
 80157e4:	6026      	str	r6, [r4, #0]
 80157e6:	e7da      	b.n	801579e <__ssputs_r+0x5e>
 80157e8:	002a      	movs	r2, r5
 80157ea:	0038      	movs	r0, r7
 80157ec:	f000 fb8c 	bl	8015f08 <_realloc_r>
 80157f0:	1e06      	subs	r6, r0, #0
 80157f2:	d1e0      	bne.n	80157b6 <__ssputs_r+0x76>
 80157f4:	0038      	movs	r0, r7
 80157f6:	6921      	ldr	r1, [r4, #16]
 80157f8:	f7ff fec0 	bl	801557c <_free_r>
 80157fc:	e7c7      	b.n	801578e <__ssputs_r+0x4e>
 80157fe:	46c0      	nop			; (mov r8, r8)
 8015800:	fffffb7f 	.word	0xfffffb7f

08015804 <_svfiprintf_r>:
 8015804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015806:	b0a1      	sub	sp, #132	; 0x84
 8015808:	9003      	str	r0, [sp, #12]
 801580a:	001d      	movs	r5, r3
 801580c:	898b      	ldrh	r3, [r1, #12]
 801580e:	000f      	movs	r7, r1
 8015810:	0016      	movs	r6, r2
 8015812:	061b      	lsls	r3, r3, #24
 8015814:	d511      	bpl.n	801583a <_svfiprintf_r+0x36>
 8015816:	690b      	ldr	r3, [r1, #16]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d10e      	bne.n	801583a <_svfiprintf_r+0x36>
 801581c:	2140      	movs	r1, #64	; 0x40
 801581e:	f7ff ff19 	bl	8015654 <_malloc_r>
 8015822:	6038      	str	r0, [r7, #0]
 8015824:	6138      	str	r0, [r7, #16]
 8015826:	2800      	cmp	r0, #0
 8015828:	d105      	bne.n	8015836 <_svfiprintf_r+0x32>
 801582a:	230c      	movs	r3, #12
 801582c:	9a03      	ldr	r2, [sp, #12]
 801582e:	3801      	subs	r0, #1
 8015830:	6013      	str	r3, [r2, #0]
 8015832:	b021      	add	sp, #132	; 0x84
 8015834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015836:	2340      	movs	r3, #64	; 0x40
 8015838:	617b      	str	r3, [r7, #20]
 801583a:	2300      	movs	r3, #0
 801583c:	ac08      	add	r4, sp, #32
 801583e:	6163      	str	r3, [r4, #20]
 8015840:	3320      	adds	r3, #32
 8015842:	7663      	strb	r3, [r4, #25]
 8015844:	3310      	adds	r3, #16
 8015846:	76a3      	strb	r3, [r4, #26]
 8015848:	9507      	str	r5, [sp, #28]
 801584a:	0035      	movs	r5, r6
 801584c:	782b      	ldrb	r3, [r5, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d001      	beq.n	8015856 <_svfiprintf_r+0x52>
 8015852:	2b25      	cmp	r3, #37	; 0x25
 8015854:	d147      	bne.n	80158e6 <_svfiprintf_r+0xe2>
 8015856:	1bab      	subs	r3, r5, r6
 8015858:	9305      	str	r3, [sp, #20]
 801585a:	42b5      	cmp	r5, r6
 801585c:	d00c      	beq.n	8015878 <_svfiprintf_r+0x74>
 801585e:	0032      	movs	r2, r6
 8015860:	0039      	movs	r1, r7
 8015862:	9803      	ldr	r0, [sp, #12]
 8015864:	f7ff ff6c 	bl	8015740 <__ssputs_r>
 8015868:	1c43      	adds	r3, r0, #1
 801586a:	d100      	bne.n	801586e <_svfiprintf_r+0x6a>
 801586c:	e0ae      	b.n	80159cc <_svfiprintf_r+0x1c8>
 801586e:	6962      	ldr	r2, [r4, #20]
 8015870:	9b05      	ldr	r3, [sp, #20]
 8015872:	4694      	mov	ip, r2
 8015874:	4463      	add	r3, ip
 8015876:	6163      	str	r3, [r4, #20]
 8015878:	782b      	ldrb	r3, [r5, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d100      	bne.n	8015880 <_svfiprintf_r+0x7c>
 801587e:	e0a5      	b.n	80159cc <_svfiprintf_r+0x1c8>
 8015880:	2201      	movs	r2, #1
 8015882:	2300      	movs	r3, #0
 8015884:	4252      	negs	r2, r2
 8015886:	6062      	str	r2, [r4, #4]
 8015888:	a904      	add	r1, sp, #16
 801588a:	3254      	adds	r2, #84	; 0x54
 801588c:	1852      	adds	r2, r2, r1
 801588e:	1c6e      	adds	r6, r5, #1
 8015890:	6023      	str	r3, [r4, #0]
 8015892:	60e3      	str	r3, [r4, #12]
 8015894:	60a3      	str	r3, [r4, #8]
 8015896:	7013      	strb	r3, [r2, #0]
 8015898:	65a3      	str	r3, [r4, #88]	; 0x58
 801589a:	2205      	movs	r2, #5
 801589c:	7831      	ldrb	r1, [r6, #0]
 801589e:	4854      	ldr	r0, [pc, #336]	; (80159f0 <_svfiprintf_r+0x1ec>)
 80158a0:	f7ff fa98 	bl	8014dd4 <memchr>
 80158a4:	1c75      	adds	r5, r6, #1
 80158a6:	2800      	cmp	r0, #0
 80158a8:	d11f      	bne.n	80158ea <_svfiprintf_r+0xe6>
 80158aa:	6822      	ldr	r2, [r4, #0]
 80158ac:	06d3      	lsls	r3, r2, #27
 80158ae:	d504      	bpl.n	80158ba <_svfiprintf_r+0xb6>
 80158b0:	2353      	movs	r3, #83	; 0x53
 80158b2:	a904      	add	r1, sp, #16
 80158b4:	185b      	adds	r3, r3, r1
 80158b6:	2120      	movs	r1, #32
 80158b8:	7019      	strb	r1, [r3, #0]
 80158ba:	0713      	lsls	r3, r2, #28
 80158bc:	d504      	bpl.n	80158c8 <_svfiprintf_r+0xc4>
 80158be:	2353      	movs	r3, #83	; 0x53
 80158c0:	a904      	add	r1, sp, #16
 80158c2:	185b      	adds	r3, r3, r1
 80158c4:	212b      	movs	r1, #43	; 0x2b
 80158c6:	7019      	strb	r1, [r3, #0]
 80158c8:	7833      	ldrb	r3, [r6, #0]
 80158ca:	2b2a      	cmp	r3, #42	; 0x2a
 80158cc:	d016      	beq.n	80158fc <_svfiprintf_r+0xf8>
 80158ce:	0035      	movs	r5, r6
 80158d0:	2100      	movs	r1, #0
 80158d2:	200a      	movs	r0, #10
 80158d4:	68e3      	ldr	r3, [r4, #12]
 80158d6:	782a      	ldrb	r2, [r5, #0]
 80158d8:	1c6e      	adds	r6, r5, #1
 80158da:	3a30      	subs	r2, #48	; 0x30
 80158dc:	2a09      	cmp	r2, #9
 80158de:	d94e      	bls.n	801597e <_svfiprintf_r+0x17a>
 80158e0:	2900      	cmp	r1, #0
 80158e2:	d111      	bne.n	8015908 <_svfiprintf_r+0x104>
 80158e4:	e017      	b.n	8015916 <_svfiprintf_r+0x112>
 80158e6:	3501      	adds	r5, #1
 80158e8:	e7b0      	b.n	801584c <_svfiprintf_r+0x48>
 80158ea:	4b41      	ldr	r3, [pc, #260]	; (80159f0 <_svfiprintf_r+0x1ec>)
 80158ec:	6822      	ldr	r2, [r4, #0]
 80158ee:	1ac0      	subs	r0, r0, r3
 80158f0:	2301      	movs	r3, #1
 80158f2:	4083      	lsls	r3, r0
 80158f4:	4313      	orrs	r3, r2
 80158f6:	002e      	movs	r6, r5
 80158f8:	6023      	str	r3, [r4, #0]
 80158fa:	e7ce      	b.n	801589a <_svfiprintf_r+0x96>
 80158fc:	9b07      	ldr	r3, [sp, #28]
 80158fe:	1d19      	adds	r1, r3, #4
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	9107      	str	r1, [sp, #28]
 8015904:	2b00      	cmp	r3, #0
 8015906:	db01      	blt.n	801590c <_svfiprintf_r+0x108>
 8015908:	930b      	str	r3, [sp, #44]	; 0x2c
 801590a:	e004      	b.n	8015916 <_svfiprintf_r+0x112>
 801590c:	425b      	negs	r3, r3
 801590e:	60e3      	str	r3, [r4, #12]
 8015910:	2302      	movs	r3, #2
 8015912:	4313      	orrs	r3, r2
 8015914:	6023      	str	r3, [r4, #0]
 8015916:	782b      	ldrb	r3, [r5, #0]
 8015918:	2b2e      	cmp	r3, #46	; 0x2e
 801591a:	d10a      	bne.n	8015932 <_svfiprintf_r+0x12e>
 801591c:	786b      	ldrb	r3, [r5, #1]
 801591e:	2b2a      	cmp	r3, #42	; 0x2a
 8015920:	d135      	bne.n	801598e <_svfiprintf_r+0x18a>
 8015922:	9b07      	ldr	r3, [sp, #28]
 8015924:	3502      	adds	r5, #2
 8015926:	1d1a      	adds	r2, r3, #4
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	9207      	str	r2, [sp, #28]
 801592c:	2b00      	cmp	r3, #0
 801592e:	db2b      	blt.n	8015988 <_svfiprintf_r+0x184>
 8015930:	9309      	str	r3, [sp, #36]	; 0x24
 8015932:	4e30      	ldr	r6, [pc, #192]	; (80159f4 <_svfiprintf_r+0x1f0>)
 8015934:	2203      	movs	r2, #3
 8015936:	0030      	movs	r0, r6
 8015938:	7829      	ldrb	r1, [r5, #0]
 801593a:	f7ff fa4b 	bl	8014dd4 <memchr>
 801593e:	2800      	cmp	r0, #0
 8015940:	d006      	beq.n	8015950 <_svfiprintf_r+0x14c>
 8015942:	2340      	movs	r3, #64	; 0x40
 8015944:	1b80      	subs	r0, r0, r6
 8015946:	4083      	lsls	r3, r0
 8015948:	6822      	ldr	r2, [r4, #0]
 801594a:	3501      	adds	r5, #1
 801594c:	4313      	orrs	r3, r2
 801594e:	6023      	str	r3, [r4, #0]
 8015950:	7829      	ldrb	r1, [r5, #0]
 8015952:	2206      	movs	r2, #6
 8015954:	4828      	ldr	r0, [pc, #160]	; (80159f8 <_svfiprintf_r+0x1f4>)
 8015956:	1c6e      	adds	r6, r5, #1
 8015958:	7621      	strb	r1, [r4, #24]
 801595a:	f7ff fa3b 	bl	8014dd4 <memchr>
 801595e:	2800      	cmp	r0, #0
 8015960:	d03c      	beq.n	80159dc <_svfiprintf_r+0x1d8>
 8015962:	4b26      	ldr	r3, [pc, #152]	; (80159fc <_svfiprintf_r+0x1f8>)
 8015964:	2b00      	cmp	r3, #0
 8015966:	d125      	bne.n	80159b4 <_svfiprintf_r+0x1b0>
 8015968:	2207      	movs	r2, #7
 801596a:	9b07      	ldr	r3, [sp, #28]
 801596c:	3307      	adds	r3, #7
 801596e:	4393      	bics	r3, r2
 8015970:	3308      	adds	r3, #8
 8015972:	9307      	str	r3, [sp, #28]
 8015974:	6963      	ldr	r3, [r4, #20]
 8015976:	9a04      	ldr	r2, [sp, #16]
 8015978:	189b      	adds	r3, r3, r2
 801597a:	6163      	str	r3, [r4, #20]
 801597c:	e765      	b.n	801584a <_svfiprintf_r+0x46>
 801597e:	4343      	muls	r3, r0
 8015980:	0035      	movs	r5, r6
 8015982:	2101      	movs	r1, #1
 8015984:	189b      	adds	r3, r3, r2
 8015986:	e7a6      	b.n	80158d6 <_svfiprintf_r+0xd2>
 8015988:	2301      	movs	r3, #1
 801598a:	425b      	negs	r3, r3
 801598c:	e7d0      	b.n	8015930 <_svfiprintf_r+0x12c>
 801598e:	2300      	movs	r3, #0
 8015990:	200a      	movs	r0, #10
 8015992:	001a      	movs	r2, r3
 8015994:	3501      	adds	r5, #1
 8015996:	6063      	str	r3, [r4, #4]
 8015998:	7829      	ldrb	r1, [r5, #0]
 801599a:	1c6e      	adds	r6, r5, #1
 801599c:	3930      	subs	r1, #48	; 0x30
 801599e:	2909      	cmp	r1, #9
 80159a0:	d903      	bls.n	80159aa <_svfiprintf_r+0x1a6>
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d0c5      	beq.n	8015932 <_svfiprintf_r+0x12e>
 80159a6:	9209      	str	r2, [sp, #36]	; 0x24
 80159a8:	e7c3      	b.n	8015932 <_svfiprintf_r+0x12e>
 80159aa:	4342      	muls	r2, r0
 80159ac:	0035      	movs	r5, r6
 80159ae:	2301      	movs	r3, #1
 80159b0:	1852      	adds	r2, r2, r1
 80159b2:	e7f1      	b.n	8015998 <_svfiprintf_r+0x194>
 80159b4:	ab07      	add	r3, sp, #28
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	003a      	movs	r2, r7
 80159ba:	0021      	movs	r1, r4
 80159bc:	4b10      	ldr	r3, [pc, #64]	; (8015a00 <_svfiprintf_r+0x1fc>)
 80159be:	9803      	ldr	r0, [sp, #12]
 80159c0:	f7fd faf8 	bl	8012fb4 <_printf_float>
 80159c4:	9004      	str	r0, [sp, #16]
 80159c6:	9b04      	ldr	r3, [sp, #16]
 80159c8:	3301      	adds	r3, #1
 80159ca:	d1d3      	bne.n	8015974 <_svfiprintf_r+0x170>
 80159cc:	89bb      	ldrh	r3, [r7, #12]
 80159ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80159d0:	065b      	lsls	r3, r3, #25
 80159d2:	d400      	bmi.n	80159d6 <_svfiprintf_r+0x1d2>
 80159d4:	e72d      	b.n	8015832 <_svfiprintf_r+0x2e>
 80159d6:	2001      	movs	r0, #1
 80159d8:	4240      	negs	r0, r0
 80159da:	e72a      	b.n	8015832 <_svfiprintf_r+0x2e>
 80159dc:	ab07      	add	r3, sp, #28
 80159de:	9300      	str	r3, [sp, #0]
 80159e0:	003a      	movs	r2, r7
 80159e2:	0021      	movs	r1, r4
 80159e4:	4b06      	ldr	r3, [pc, #24]	; (8015a00 <_svfiprintf_r+0x1fc>)
 80159e6:	9803      	ldr	r0, [sp, #12]
 80159e8:	f7fd fd96 	bl	8013518 <_printf_i>
 80159ec:	e7ea      	b.n	80159c4 <_svfiprintf_r+0x1c0>
 80159ee:	46c0      	nop			; (mov r8, r8)
 80159f0:	08016e74 	.word	0x08016e74
 80159f4:	08016e7a 	.word	0x08016e7a
 80159f8:	08016e7e 	.word	0x08016e7e
 80159fc:	08012fb5 	.word	0x08012fb5
 8015a00:	08015741 	.word	0x08015741

08015a04 <__sfputc_r>:
 8015a04:	6893      	ldr	r3, [r2, #8]
 8015a06:	b510      	push	{r4, lr}
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	6093      	str	r3, [r2, #8]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	da04      	bge.n	8015a1a <__sfputc_r+0x16>
 8015a10:	6994      	ldr	r4, [r2, #24]
 8015a12:	42a3      	cmp	r3, r4
 8015a14:	db07      	blt.n	8015a26 <__sfputc_r+0x22>
 8015a16:	290a      	cmp	r1, #10
 8015a18:	d005      	beq.n	8015a26 <__sfputc_r+0x22>
 8015a1a:	6813      	ldr	r3, [r2, #0]
 8015a1c:	1c58      	adds	r0, r3, #1
 8015a1e:	6010      	str	r0, [r2, #0]
 8015a20:	7019      	strb	r1, [r3, #0]
 8015a22:	0008      	movs	r0, r1
 8015a24:	bd10      	pop	{r4, pc}
 8015a26:	f7fe f815 	bl	8013a54 <__swbuf_r>
 8015a2a:	0001      	movs	r1, r0
 8015a2c:	e7f9      	b.n	8015a22 <__sfputc_r+0x1e>

08015a2e <__sfputs_r>:
 8015a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a30:	0006      	movs	r6, r0
 8015a32:	000f      	movs	r7, r1
 8015a34:	0014      	movs	r4, r2
 8015a36:	18d5      	adds	r5, r2, r3
 8015a38:	42ac      	cmp	r4, r5
 8015a3a:	d101      	bne.n	8015a40 <__sfputs_r+0x12>
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	e007      	b.n	8015a50 <__sfputs_r+0x22>
 8015a40:	7821      	ldrb	r1, [r4, #0]
 8015a42:	003a      	movs	r2, r7
 8015a44:	0030      	movs	r0, r6
 8015a46:	f7ff ffdd 	bl	8015a04 <__sfputc_r>
 8015a4a:	3401      	adds	r4, #1
 8015a4c:	1c43      	adds	r3, r0, #1
 8015a4e:	d1f3      	bne.n	8015a38 <__sfputs_r+0xa>
 8015a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a54 <_vfiprintf_r>:
 8015a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a56:	b0a1      	sub	sp, #132	; 0x84
 8015a58:	0006      	movs	r6, r0
 8015a5a:	000c      	movs	r4, r1
 8015a5c:	001f      	movs	r7, r3
 8015a5e:	9203      	str	r2, [sp, #12]
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d004      	beq.n	8015a6e <_vfiprintf_r+0x1a>
 8015a64:	6983      	ldr	r3, [r0, #24]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d101      	bne.n	8015a6e <_vfiprintf_r+0x1a>
 8015a6a:	f7ff f895 	bl	8014b98 <__sinit>
 8015a6e:	4b8e      	ldr	r3, [pc, #568]	; (8015ca8 <_vfiprintf_r+0x254>)
 8015a70:	429c      	cmp	r4, r3
 8015a72:	d11c      	bne.n	8015aae <_vfiprintf_r+0x5a>
 8015a74:	6874      	ldr	r4, [r6, #4]
 8015a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a78:	07db      	lsls	r3, r3, #31
 8015a7a:	d405      	bmi.n	8015a88 <_vfiprintf_r+0x34>
 8015a7c:	89a3      	ldrh	r3, [r4, #12]
 8015a7e:	059b      	lsls	r3, r3, #22
 8015a80:	d402      	bmi.n	8015a88 <_vfiprintf_r+0x34>
 8015a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a84:	f7ff f92d 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	071b      	lsls	r3, r3, #28
 8015a8c:	d502      	bpl.n	8015a94 <_vfiprintf_r+0x40>
 8015a8e:	6923      	ldr	r3, [r4, #16]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d11d      	bne.n	8015ad0 <_vfiprintf_r+0x7c>
 8015a94:	0021      	movs	r1, r4
 8015a96:	0030      	movs	r0, r6
 8015a98:	f7fe f832 	bl	8013b00 <__swsetup_r>
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	d017      	beq.n	8015ad0 <_vfiprintf_r+0x7c>
 8015aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015aa2:	07db      	lsls	r3, r3, #31
 8015aa4:	d50d      	bpl.n	8015ac2 <_vfiprintf_r+0x6e>
 8015aa6:	2001      	movs	r0, #1
 8015aa8:	4240      	negs	r0, r0
 8015aaa:	b021      	add	sp, #132	; 0x84
 8015aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aae:	4b7f      	ldr	r3, [pc, #508]	; (8015cac <_vfiprintf_r+0x258>)
 8015ab0:	429c      	cmp	r4, r3
 8015ab2:	d101      	bne.n	8015ab8 <_vfiprintf_r+0x64>
 8015ab4:	68b4      	ldr	r4, [r6, #8]
 8015ab6:	e7de      	b.n	8015a76 <_vfiprintf_r+0x22>
 8015ab8:	4b7d      	ldr	r3, [pc, #500]	; (8015cb0 <_vfiprintf_r+0x25c>)
 8015aba:	429c      	cmp	r4, r3
 8015abc:	d1db      	bne.n	8015a76 <_vfiprintf_r+0x22>
 8015abe:	68f4      	ldr	r4, [r6, #12]
 8015ac0:	e7d9      	b.n	8015a76 <_vfiprintf_r+0x22>
 8015ac2:	89a3      	ldrh	r3, [r4, #12]
 8015ac4:	059b      	lsls	r3, r3, #22
 8015ac6:	d4ee      	bmi.n	8015aa6 <_vfiprintf_r+0x52>
 8015ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aca:	f7ff f90b 	bl	8014ce4 <__retarget_lock_release_recursive>
 8015ace:	e7ea      	b.n	8015aa6 <_vfiprintf_r+0x52>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	ad08      	add	r5, sp, #32
 8015ad4:	616b      	str	r3, [r5, #20]
 8015ad6:	3320      	adds	r3, #32
 8015ad8:	766b      	strb	r3, [r5, #25]
 8015ada:	3310      	adds	r3, #16
 8015adc:	76ab      	strb	r3, [r5, #26]
 8015ade:	9707      	str	r7, [sp, #28]
 8015ae0:	9f03      	ldr	r7, [sp, #12]
 8015ae2:	783b      	ldrb	r3, [r7, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d001      	beq.n	8015aec <_vfiprintf_r+0x98>
 8015ae8:	2b25      	cmp	r3, #37	; 0x25
 8015aea:	d14e      	bne.n	8015b8a <_vfiprintf_r+0x136>
 8015aec:	9b03      	ldr	r3, [sp, #12]
 8015aee:	1afb      	subs	r3, r7, r3
 8015af0:	9305      	str	r3, [sp, #20]
 8015af2:	9b03      	ldr	r3, [sp, #12]
 8015af4:	429f      	cmp	r7, r3
 8015af6:	d00d      	beq.n	8015b14 <_vfiprintf_r+0xc0>
 8015af8:	9b05      	ldr	r3, [sp, #20]
 8015afa:	0021      	movs	r1, r4
 8015afc:	0030      	movs	r0, r6
 8015afe:	9a03      	ldr	r2, [sp, #12]
 8015b00:	f7ff ff95 	bl	8015a2e <__sfputs_r>
 8015b04:	1c43      	adds	r3, r0, #1
 8015b06:	d100      	bne.n	8015b0a <_vfiprintf_r+0xb6>
 8015b08:	e0b5      	b.n	8015c76 <_vfiprintf_r+0x222>
 8015b0a:	696a      	ldr	r2, [r5, #20]
 8015b0c:	9b05      	ldr	r3, [sp, #20]
 8015b0e:	4694      	mov	ip, r2
 8015b10:	4463      	add	r3, ip
 8015b12:	616b      	str	r3, [r5, #20]
 8015b14:	783b      	ldrb	r3, [r7, #0]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d100      	bne.n	8015b1c <_vfiprintf_r+0xc8>
 8015b1a:	e0ac      	b.n	8015c76 <_vfiprintf_r+0x222>
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	1c7b      	adds	r3, r7, #1
 8015b20:	9303      	str	r3, [sp, #12]
 8015b22:	2300      	movs	r3, #0
 8015b24:	4252      	negs	r2, r2
 8015b26:	606a      	str	r2, [r5, #4]
 8015b28:	a904      	add	r1, sp, #16
 8015b2a:	3254      	adds	r2, #84	; 0x54
 8015b2c:	1852      	adds	r2, r2, r1
 8015b2e:	602b      	str	r3, [r5, #0]
 8015b30:	60eb      	str	r3, [r5, #12]
 8015b32:	60ab      	str	r3, [r5, #8]
 8015b34:	7013      	strb	r3, [r2, #0]
 8015b36:	65ab      	str	r3, [r5, #88]	; 0x58
 8015b38:	9b03      	ldr	r3, [sp, #12]
 8015b3a:	2205      	movs	r2, #5
 8015b3c:	7819      	ldrb	r1, [r3, #0]
 8015b3e:	485d      	ldr	r0, [pc, #372]	; (8015cb4 <_vfiprintf_r+0x260>)
 8015b40:	f7ff f948 	bl	8014dd4 <memchr>
 8015b44:	9b03      	ldr	r3, [sp, #12]
 8015b46:	1c5f      	adds	r7, r3, #1
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d120      	bne.n	8015b8e <_vfiprintf_r+0x13a>
 8015b4c:	682a      	ldr	r2, [r5, #0]
 8015b4e:	06d3      	lsls	r3, r2, #27
 8015b50:	d504      	bpl.n	8015b5c <_vfiprintf_r+0x108>
 8015b52:	2353      	movs	r3, #83	; 0x53
 8015b54:	a904      	add	r1, sp, #16
 8015b56:	185b      	adds	r3, r3, r1
 8015b58:	2120      	movs	r1, #32
 8015b5a:	7019      	strb	r1, [r3, #0]
 8015b5c:	0713      	lsls	r3, r2, #28
 8015b5e:	d504      	bpl.n	8015b6a <_vfiprintf_r+0x116>
 8015b60:	2353      	movs	r3, #83	; 0x53
 8015b62:	a904      	add	r1, sp, #16
 8015b64:	185b      	adds	r3, r3, r1
 8015b66:	212b      	movs	r1, #43	; 0x2b
 8015b68:	7019      	strb	r1, [r3, #0]
 8015b6a:	9b03      	ldr	r3, [sp, #12]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8015b70:	d016      	beq.n	8015ba0 <_vfiprintf_r+0x14c>
 8015b72:	2100      	movs	r1, #0
 8015b74:	68eb      	ldr	r3, [r5, #12]
 8015b76:	9f03      	ldr	r7, [sp, #12]
 8015b78:	783a      	ldrb	r2, [r7, #0]
 8015b7a:	1c78      	adds	r0, r7, #1
 8015b7c:	3a30      	subs	r2, #48	; 0x30
 8015b7e:	4684      	mov	ip, r0
 8015b80:	2a09      	cmp	r2, #9
 8015b82:	d94f      	bls.n	8015c24 <_vfiprintf_r+0x1d0>
 8015b84:	2900      	cmp	r1, #0
 8015b86:	d111      	bne.n	8015bac <_vfiprintf_r+0x158>
 8015b88:	e017      	b.n	8015bba <_vfiprintf_r+0x166>
 8015b8a:	3701      	adds	r7, #1
 8015b8c:	e7a9      	b.n	8015ae2 <_vfiprintf_r+0x8e>
 8015b8e:	4b49      	ldr	r3, [pc, #292]	; (8015cb4 <_vfiprintf_r+0x260>)
 8015b90:	682a      	ldr	r2, [r5, #0]
 8015b92:	1ac0      	subs	r0, r0, r3
 8015b94:	2301      	movs	r3, #1
 8015b96:	4083      	lsls	r3, r0
 8015b98:	4313      	orrs	r3, r2
 8015b9a:	602b      	str	r3, [r5, #0]
 8015b9c:	9703      	str	r7, [sp, #12]
 8015b9e:	e7cb      	b.n	8015b38 <_vfiprintf_r+0xe4>
 8015ba0:	9b07      	ldr	r3, [sp, #28]
 8015ba2:	1d19      	adds	r1, r3, #4
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	9107      	str	r1, [sp, #28]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	db01      	blt.n	8015bb0 <_vfiprintf_r+0x15c>
 8015bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bae:	e004      	b.n	8015bba <_vfiprintf_r+0x166>
 8015bb0:	425b      	negs	r3, r3
 8015bb2:	60eb      	str	r3, [r5, #12]
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	4313      	orrs	r3, r2
 8015bb8:	602b      	str	r3, [r5, #0]
 8015bba:	783b      	ldrb	r3, [r7, #0]
 8015bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8015bbe:	d10a      	bne.n	8015bd6 <_vfiprintf_r+0x182>
 8015bc0:	787b      	ldrb	r3, [r7, #1]
 8015bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8015bc4:	d137      	bne.n	8015c36 <_vfiprintf_r+0x1e2>
 8015bc6:	9b07      	ldr	r3, [sp, #28]
 8015bc8:	3702      	adds	r7, #2
 8015bca:	1d1a      	adds	r2, r3, #4
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	9207      	str	r2, [sp, #28]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	db2d      	blt.n	8015c30 <_vfiprintf_r+0x1dc>
 8015bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd6:	2203      	movs	r2, #3
 8015bd8:	7839      	ldrb	r1, [r7, #0]
 8015bda:	4837      	ldr	r0, [pc, #220]	; (8015cb8 <_vfiprintf_r+0x264>)
 8015bdc:	f7ff f8fa 	bl	8014dd4 <memchr>
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d007      	beq.n	8015bf4 <_vfiprintf_r+0x1a0>
 8015be4:	4b34      	ldr	r3, [pc, #208]	; (8015cb8 <_vfiprintf_r+0x264>)
 8015be6:	682a      	ldr	r2, [r5, #0]
 8015be8:	1ac0      	subs	r0, r0, r3
 8015bea:	2340      	movs	r3, #64	; 0x40
 8015bec:	4083      	lsls	r3, r0
 8015bee:	4313      	orrs	r3, r2
 8015bf0:	3701      	adds	r7, #1
 8015bf2:	602b      	str	r3, [r5, #0]
 8015bf4:	7839      	ldrb	r1, [r7, #0]
 8015bf6:	1c7b      	adds	r3, r7, #1
 8015bf8:	2206      	movs	r2, #6
 8015bfa:	4830      	ldr	r0, [pc, #192]	; (8015cbc <_vfiprintf_r+0x268>)
 8015bfc:	9303      	str	r3, [sp, #12]
 8015bfe:	7629      	strb	r1, [r5, #24]
 8015c00:	f7ff f8e8 	bl	8014dd4 <memchr>
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d045      	beq.n	8015c94 <_vfiprintf_r+0x240>
 8015c08:	4b2d      	ldr	r3, [pc, #180]	; (8015cc0 <_vfiprintf_r+0x26c>)
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d127      	bne.n	8015c5e <_vfiprintf_r+0x20a>
 8015c0e:	2207      	movs	r2, #7
 8015c10:	9b07      	ldr	r3, [sp, #28]
 8015c12:	3307      	adds	r3, #7
 8015c14:	4393      	bics	r3, r2
 8015c16:	3308      	adds	r3, #8
 8015c18:	9307      	str	r3, [sp, #28]
 8015c1a:	696b      	ldr	r3, [r5, #20]
 8015c1c:	9a04      	ldr	r2, [sp, #16]
 8015c1e:	189b      	adds	r3, r3, r2
 8015c20:	616b      	str	r3, [r5, #20]
 8015c22:	e75d      	b.n	8015ae0 <_vfiprintf_r+0x8c>
 8015c24:	210a      	movs	r1, #10
 8015c26:	434b      	muls	r3, r1
 8015c28:	4667      	mov	r7, ip
 8015c2a:	189b      	adds	r3, r3, r2
 8015c2c:	3909      	subs	r1, #9
 8015c2e:	e7a3      	b.n	8015b78 <_vfiprintf_r+0x124>
 8015c30:	2301      	movs	r3, #1
 8015c32:	425b      	negs	r3, r3
 8015c34:	e7ce      	b.n	8015bd4 <_vfiprintf_r+0x180>
 8015c36:	2300      	movs	r3, #0
 8015c38:	001a      	movs	r2, r3
 8015c3a:	3701      	adds	r7, #1
 8015c3c:	606b      	str	r3, [r5, #4]
 8015c3e:	7839      	ldrb	r1, [r7, #0]
 8015c40:	1c78      	adds	r0, r7, #1
 8015c42:	3930      	subs	r1, #48	; 0x30
 8015c44:	4684      	mov	ip, r0
 8015c46:	2909      	cmp	r1, #9
 8015c48:	d903      	bls.n	8015c52 <_vfiprintf_r+0x1fe>
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d0c3      	beq.n	8015bd6 <_vfiprintf_r+0x182>
 8015c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8015c50:	e7c1      	b.n	8015bd6 <_vfiprintf_r+0x182>
 8015c52:	230a      	movs	r3, #10
 8015c54:	435a      	muls	r2, r3
 8015c56:	4667      	mov	r7, ip
 8015c58:	1852      	adds	r2, r2, r1
 8015c5a:	3b09      	subs	r3, #9
 8015c5c:	e7ef      	b.n	8015c3e <_vfiprintf_r+0x1ea>
 8015c5e:	ab07      	add	r3, sp, #28
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	0022      	movs	r2, r4
 8015c64:	0029      	movs	r1, r5
 8015c66:	0030      	movs	r0, r6
 8015c68:	4b16      	ldr	r3, [pc, #88]	; (8015cc4 <_vfiprintf_r+0x270>)
 8015c6a:	f7fd f9a3 	bl	8012fb4 <_printf_float>
 8015c6e:	9004      	str	r0, [sp, #16]
 8015c70:	9b04      	ldr	r3, [sp, #16]
 8015c72:	3301      	adds	r3, #1
 8015c74:	d1d1      	bne.n	8015c1a <_vfiprintf_r+0x1c6>
 8015c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c78:	07db      	lsls	r3, r3, #31
 8015c7a:	d405      	bmi.n	8015c88 <_vfiprintf_r+0x234>
 8015c7c:	89a3      	ldrh	r3, [r4, #12]
 8015c7e:	059b      	lsls	r3, r3, #22
 8015c80:	d402      	bmi.n	8015c88 <_vfiprintf_r+0x234>
 8015c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c84:	f7ff f82e 	bl	8014ce4 <__retarget_lock_release_recursive>
 8015c88:	89a3      	ldrh	r3, [r4, #12]
 8015c8a:	065b      	lsls	r3, r3, #25
 8015c8c:	d500      	bpl.n	8015c90 <_vfiprintf_r+0x23c>
 8015c8e:	e70a      	b.n	8015aa6 <_vfiprintf_r+0x52>
 8015c90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015c92:	e70a      	b.n	8015aaa <_vfiprintf_r+0x56>
 8015c94:	ab07      	add	r3, sp, #28
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	0022      	movs	r2, r4
 8015c9a:	0029      	movs	r1, r5
 8015c9c:	0030      	movs	r0, r6
 8015c9e:	4b09      	ldr	r3, [pc, #36]	; (8015cc4 <_vfiprintf_r+0x270>)
 8015ca0:	f7fd fc3a 	bl	8013518 <_printf_i>
 8015ca4:	e7e3      	b.n	8015c6e <_vfiprintf_r+0x21a>
 8015ca6:	46c0      	nop			; (mov r8, r8)
 8015ca8:	08016cd8 	.word	0x08016cd8
 8015cac:	08016cf8 	.word	0x08016cf8
 8015cb0:	08016cb8 	.word	0x08016cb8
 8015cb4:	08016e74 	.word	0x08016e74
 8015cb8:	08016e7a 	.word	0x08016e7a
 8015cbc:	08016e7e 	.word	0x08016e7e
 8015cc0:	08012fb5 	.word	0x08012fb5
 8015cc4:	08015a2f 	.word	0x08015a2f

08015cc8 <_sbrk_r>:
 8015cc8:	2300      	movs	r3, #0
 8015cca:	b570      	push	{r4, r5, r6, lr}
 8015ccc:	4d06      	ldr	r5, [pc, #24]	; (8015ce8 <_sbrk_r+0x20>)
 8015cce:	0004      	movs	r4, r0
 8015cd0:	0008      	movs	r0, r1
 8015cd2:	602b      	str	r3, [r5, #0]
 8015cd4:	f7ee f8de 	bl	8003e94 <_sbrk>
 8015cd8:	1c43      	adds	r3, r0, #1
 8015cda:	d103      	bne.n	8015ce4 <_sbrk_r+0x1c>
 8015cdc:	682b      	ldr	r3, [r5, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d000      	beq.n	8015ce4 <_sbrk_r+0x1c>
 8015ce2:	6023      	str	r3, [r4, #0]
 8015ce4:	bd70      	pop	{r4, r5, r6, pc}
 8015ce6:	46c0      	nop			; (mov r8, r8)
 8015ce8:	20005f6c 	.word	0x20005f6c

08015cec <__sread>:
 8015cec:	b570      	push	{r4, r5, r6, lr}
 8015cee:	000c      	movs	r4, r1
 8015cf0:	250e      	movs	r5, #14
 8015cf2:	5f49      	ldrsh	r1, [r1, r5]
 8015cf4:	f000 f938 	bl	8015f68 <_read_r>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	db03      	blt.n	8015d04 <__sread+0x18>
 8015cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015cfe:	181b      	adds	r3, r3, r0
 8015d00:	6563      	str	r3, [r4, #84]	; 0x54
 8015d02:	bd70      	pop	{r4, r5, r6, pc}
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	4a02      	ldr	r2, [pc, #8]	; (8015d10 <__sread+0x24>)
 8015d08:	4013      	ands	r3, r2
 8015d0a:	81a3      	strh	r3, [r4, #12]
 8015d0c:	e7f9      	b.n	8015d02 <__sread+0x16>
 8015d0e:	46c0      	nop			; (mov r8, r8)
 8015d10:	ffffefff 	.word	0xffffefff

08015d14 <__swrite>:
 8015d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d16:	001f      	movs	r7, r3
 8015d18:	898b      	ldrh	r3, [r1, #12]
 8015d1a:	0005      	movs	r5, r0
 8015d1c:	000c      	movs	r4, r1
 8015d1e:	0016      	movs	r6, r2
 8015d20:	05db      	lsls	r3, r3, #23
 8015d22:	d505      	bpl.n	8015d30 <__swrite+0x1c>
 8015d24:	230e      	movs	r3, #14
 8015d26:	5ec9      	ldrsh	r1, [r1, r3]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	2302      	movs	r3, #2
 8015d2c:	f000 f8a2 	bl	8015e74 <_lseek_r>
 8015d30:	89a3      	ldrh	r3, [r4, #12]
 8015d32:	4a05      	ldr	r2, [pc, #20]	; (8015d48 <__swrite+0x34>)
 8015d34:	0028      	movs	r0, r5
 8015d36:	4013      	ands	r3, r2
 8015d38:	81a3      	strh	r3, [r4, #12]
 8015d3a:	0032      	movs	r2, r6
 8015d3c:	230e      	movs	r3, #14
 8015d3e:	5ee1      	ldrsh	r1, [r4, r3]
 8015d40:	003b      	movs	r3, r7
 8015d42:	f000 f81f 	bl	8015d84 <_write_r>
 8015d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d48:	ffffefff 	.word	0xffffefff

08015d4c <__sseek>:
 8015d4c:	b570      	push	{r4, r5, r6, lr}
 8015d4e:	000c      	movs	r4, r1
 8015d50:	250e      	movs	r5, #14
 8015d52:	5f49      	ldrsh	r1, [r1, r5]
 8015d54:	f000 f88e 	bl	8015e74 <_lseek_r>
 8015d58:	89a3      	ldrh	r3, [r4, #12]
 8015d5a:	1c42      	adds	r2, r0, #1
 8015d5c:	d103      	bne.n	8015d66 <__sseek+0x1a>
 8015d5e:	4a05      	ldr	r2, [pc, #20]	; (8015d74 <__sseek+0x28>)
 8015d60:	4013      	ands	r3, r2
 8015d62:	81a3      	strh	r3, [r4, #12]
 8015d64:	bd70      	pop	{r4, r5, r6, pc}
 8015d66:	2280      	movs	r2, #128	; 0x80
 8015d68:	0152      	lsls	r2, r2, #5
 8015d6a:	4313      	orrs	r3, r2
 8015d6c:	81a3      	strh	r3, [r4, #12]
 8015d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8015d70:	e7f8      	b.n	8015d64 <__sseek+0x18>
 8015d72:	46c0      	nop			; (mov r8, r8)
 8015d74:	ffffefff 	.word	0xffffefff

08015d78 <__sclose>:
 8015d78:	b510      	push	{r4, lr}
 8015d7a:	230e      	movs	r3, #14
 8015d7c:	5ec9      	ldrsh	r1, [r1, r3]
 8015d7e:	f000 f833 	bl	8015de8 <_close_r>
 8015d82:	bd10      	pop	{r4, pc}

08015d84 <_write_r>:
 8015d84:	b570      	push	{r4, r5, r6, lr}
 8015d86:	0004      	movs	r4, r0
 8015d88:	0008      	movs	r0, r1
 8015d8a:	0011      	movs	r1, r2
 8015d8c:	001a      	movs	r2, r3
 8015d8e:	2300      	movs	r3, #0
 8015d90:	4d05      	ldr	r5, [pc, #20]	; (8015da8 <_write_r+0x24>)
 8015d92:	602b      	str	r3, [r5, #0]
 8015d94:	f7ee f835 	bl	8003e02 <_write>
 8015d98:	1c43      	adds	r3, r0, #1
 8015d9a:	d103      	bne.n	8015da4 <_write_r+0x20>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d000      	beq.n	8015da4 <_write_r+0x20>
 8015da2:	6023      	str	r3, [r4, #0]
 8015da4:	bd70      	pop	{r4, r5, r6, pc}
 8015da6:	46c0      	nop			; (mov r8, r8)
 8015da8:	20005f6c 	.word	0x20005f6c

08015dac <__assert_func>:
 8015dac:	b530      	push	{r4, r5, lr}
 8015dae:	0014      	movs	r4, r2
 8015db0:	001a      	movs	r2, r3
 8015db2:	4b09      	ldr	r3, [pc, #36]	; (8015dd8 <__assert_func+0x2c>)
 8015db4:	0005      	movs	r5, r0
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	b085      	sub	sp, #20
 8015dba:	68d8      	ldr	r0, [r3, #12]
 8015dbc:	4b07      	ldr	r3, [pc, #28]	; (8015ddc <__assert_func+0x30>)
 8015dbe:	2c00      	cmp	r4, #0
 8015dc0:	d101      	bne.n	8015dc6 <__assert_func+0x1a>
 8015dc2:	4b07      	ldr	r3, [pc, #28]	; (8015de0 <__assert_func+0x34>)
 8015dc4:	001c      	movs	r4, r3
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	9100      	str	r1, [sp, #0]
 8015dca:	002b      	movs	r3, r5
 8015dcc:	4905      	ldr	r1, [pc, #20]	; (8015de4 <__assert_func+0x38>)
 8015dce:	9402      	str	r4, [sp, #8]
 8015dd0:	f000 f81c 	bl	8015e0c <fiprintf>
 8015dd4:	f000 f8e9 	bl	8015faa <abort>
 8015dd8:	200002ec 	.word	0x200002ec
 8015ddc:	08016e85 	.word	0x08016e85
 8015de0:	08016ec0 	.word	0x08016ec0
 8015de4:	08016e92 	.word	0x08016e92

08015de8 <_close_r>:
 8015de8:	2300      	movs	r3, #0
 8015dea:	b570      	push	{r4, r5, r6, lr}
 8015dec:	4d06      	ldr	r5, [pc, #24]	; (8015e08 <_close_r+0x20>)
 8015dee:	0004      	movs	r4, r0
 8015df0:	0008      	movs	r0, r1
 8015df2:	602b      	str	r3, [r5, #0]
 8015df4:	f7ee f821 	bl	8003e3a <_close>
 8015df8:	1c43      	adds	r3, r0, #1
 8015dfa:	d103      	bne.n	8015e04 <_close_r+0x1c>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d000      	beq.n	8015e04 <_close_r+0x1c>
 8015e02:	6023      	str	r3, [r4, #0]
 8015e04:	bd70      	pop	{r4, r5, r6, pc}
 8015e06:	46c0      	nop			; (mov r8, r8)
 8015e08:	20005f6c 	.word	0x20005f6c

08015e0c <fiprintf>:
 8015e0c:	b40e      	push	{r1, r2, r3}
 8015e0e:	b503      	push	{r0, r1, lr}
 8015e10:	0001      	movs	r1, r0
 8015e12:	ab03      	add	r3, sp, #12
 8015e14:	4804      	ldr	r0, [pc, #16]	; (8015e28 <fiprintf+0x1c>)
 8015e16:	cb04      	ldmia	r3!, {r2}
 8015e18:	6800      	ldr	r0, [r0, #0]
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	f7ff fe1a 	bl	8015a54 <_vfiprintf_r>
 8015e20:	b002      	add	sp, #8
 8015e22:	bc08      	pop	{r3}
 8015e24:	b003      	add	sp, #12
 8015e26:	4718      	bx	r3
 8015e28:	200002ec 	.word	0x200002ec

08015e2c <_fstat_r>:
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	b570      	push	{r4, r5, r6, lr}
 8015e30:	4d06      	ldr	r5, [pc, #24]	; (8015e4c <_fstat_r+0x20>)
 8015e32:	0004      	movs	r4, r0
 8015e34:	0008      	movs	r0, r1
 8015e36:	0011      	movs	r1, r2
 8015e38:	602b      	str	r3, [r5, #0]
 8015e3a:	f7ee f808 	bl	8003e4e <_fstat>
 8015e3e:	1c43      	adds	r3, r0, #1
 8015e40:	d103      	bne.n	8015e4a <_fstat_r+0x1e>
 8015e42:	682b      	ldr	r3, [r5, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d000      	beq.n	8015e4a <_fstat_r+0x1e>
 8015e48:	6023      	str	r3, [r4, #0]
 8015e4a:	bd70      	pop	{r4, r5, r6, pc}
 8015e4c:	20005f6c 	.word	0x20005f6c

08015e50 <_isatty_r>:
 8015e50:	2300      	movs	r3, #0
 8015e52:	b570      	push	{r4, r5, r6, lr}
 8015e54:	4d06      	ldr	r5, [pc, #24]	; (8015e70 <_isatty_r+0x20>)
 8015e56:	0004      	movs	r4, r0
 8015e58:	0008      	movs	r0, r1
 8015e5a:	602b      	str	r3, [r5, #0]
 8015e5c:	f7ee f805 	bl	8003e6a <_isatty>
 8015e60:	1c43      	adds	r3, r0, #1
 8015e62:	d103      	bne.n	8015e6c <_isatty_r+0x1c>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d000      	beq.n	8015e6c <_isatty_r+0x1c>
 8015e6a:	6023      	str	r3, [r4, #0]
 8015e6c:	bd70      	pop	{r4, r5, r6, pc}
 8015e6e:	46c0      	nop			; (mov r8, r8)
 8015e70:	20005f6c 	.word	0x20005f6c

08015e74 <_lseek_r>:
 8015e74:	b570      	push	{r4, r5, r6, lr}
 8015e76:	0004      	movs	r4, r0
 8015e78:	0008      	movs	r0, r1
 8015e7a:	0011      	movs	r1, r2
 8015e7c:	001a      	movs	r2, r3
 8015e7e:	2300      	movs	r3, #0
 8015e80:	4d05      	ldr	r5, [pc, #20]	; (8015e98 <_lseek_r+0x24>)
 8015e82:	602b      	str	r3, [r5, #0]
 8015e84:	f7ed fffa 	bl	8003e7c <_lseek>
 8015e88:	1c43      	adds	r3, r0, #1
 8015e8a:	d103      	bne.n	8015e94 <_lseek_r+0x20>
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d000      	beq.n	8015e94 <_lseek_r+0x20>
 8015e92:	6023      	str	r3, [r4, #0]
 8015e94:	bd70      	pop	{r4, r5, r6, pc}
 8015e96:	46c0      	nop			; (mov r8, r8)
 8015e98:	20005f6c 	.word	0x20005f6c

08015e9c <__ascii_mbtowc>:
 8015e9c:	b082      	sub	sp, #8
 8015e9e:	2900      	cmp	r1, #0
 8015ea0:	d100      	bne.n	8015ea4 <__ascii_mbtowc+0x8>
 8015ea2:	a901      	add	r1, sp, #4
 8015ea4:	1e10      	subs	r0, r2, #0
 8015ea6:	d006      	beq.n	8015eb6 <__ascii_mbtowc+0x1a>
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d006      	beq.n	8015eba <__ascii_mbtowc+0x1e>
 8015eac:	7813      	ldrb	r3, [r2, #0]
 8015eae:	600b      	str	r3, [r1, #0]
 8015eb0:	7810      	ldrb	r0, [r2, #0]
 8015eb2:	1e43      	subs	r3, r0, #1
 8015eb4:	4198      	sbcs	r0, r3
 8015eb6:	b002      	add	sp, #8
 8015eb8:	4770      	bx	lr
 8015eba:	2002      	movs	r0, #2
 8015ebc:	4240      	negs	r0, r0
 8015ebe:	e7fa      	b.n	8015eb6 <__ascii_mbtowc+0x1a>

08015ec0 <memmove>:
 8015ec0:	b510      	push	{r4, lr}
 8015ec2:	4288      	cmp	r0, r1
 8015ec4:	d902      	bls.n	8015ecc <memmove+0xc>
 8015ec6:	188b      	adds	r3, r1, r2
 8015ec8:	4298      	cmp	r0, r3
 8015eca:	d303      	bcc.n	8015ed4 <memmove+0x14>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	e007      	b.n	8015ee0 <memmove+0x20>
 8015ed0:	5c8b      	ldrb	r3, [r1, r2]
 8015ed2:	5483      	strb	r3, [r0, r2]
 8015ed4:	3a01      	subs	r2, #1
 8015ed6:	d2fb      	bcs.n	8015ed0 <memmove+0x10>
 8015ed8:	bd10      	pop	{r4, pc}
 8015eda:	5ccc      	ldrb	r4, [r1, r3]
 8015edc:	54c4      	strb	r4, [r0, r3]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	d1fa      	bne.n	8015eda <memmove+0x1a>
 8015ee4:	e7f8      	b.n	8015ed8 <memmove+0x18>
	...

08015ee8 <__malloc_lock>:
 8015ee8:	b510      	push	{r4, lr}
 8015eea:	4802      	ldr	r0, [pc, #8]	; (8015ef4 <__malloc_lock+0xc>)
 8015eec:	f7fe fef9 	bl	8014ce2 <__retarget_lock_acquire_recursive>
 8015ef0:	bd10      	pop	{r4, pc}
 8015ef2:	46c0      	nop			; (mov r8, r8)
 8015ef4:	20005f60 	.word	0x20005f60

08015ef8 <__malloc_unlock>:
 8015ef8:	b510      	push	{r4, lr}
 8015efa:	4802      	ldr	r0, [pc, #8]	; (8015f04 <__malloc_unlock+0xc>)
 8015efc:	f7fe fef2 	bl	8014ce4 <__retarget_lock_release_recursive>
 8015f00:	bd10      	pop	{r4, pc}
 8015f02:	46c0      	nop			; (mov r8, r8)
 8015f04:	20005f60 	.word	0x20005f60

08015f08 <_realloc_r>:
 8015f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f0a:	0007      	movs	r7, r0
 8015f0c:	000e      	movs	r6, r1
 8015f0e:	0014      	movs	r4, r2
 8015f10:	2900      	cmp	r1, #0
 8015f12:	d105      	bne.n	8015f20 <_realloc_r+0x18>
 8015f14:	0011      	movs	r1, r2
 8015f16:	f7ff fb9d 	bl	8015654 <_malloc_r>
 8015f1a:	0005      	movs	r5, r0
 8015f1c:	0028      	movs	r0, r5
 8015f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015f20:	2a00      	cmp	r2, #0
 8015f22:	d103      	bne.n	8015f2c <_realloc_r+0x24>
 8015f24:	f7ff fb2a 	bl	801557c <_free_r>
 8015f28:	0025      	movs	r5, r4
 8015f2a:	e7f7      	b.n	8015f1c <_realloc_r+0x14>
 8015f2c:	f000 f844 	bl	8015fb8 <_malloc_usable_size_r>
 8015f30:	9001      	str	r0, [sp, #4]
 8015f32:	4284      	cmp	r4, r0
 8015f34:	d803      	bhi.n	8015f3e <_realloc_r+0x36>
 8015f36:	0035      	movs	r5, r6
 8015f38:	0843      	lsrs	r3, r0, #1
 8015f3a:	42a3      	cmp	r3, r4
 8015f3c:	d3ee      	bcc.n	8015f1c <_realloc_r+0x14>
 8015f3e:	0021      	movs	r1, r4
 8015f40:	0038      	movs	r0, r7
 8015f42:	f7ff fb87 	bl	8015654 <_malloc_r>
 8015f46:	1e05      	subs	r5, r0, #0
 8015f48:	d0e8      	beq.n	8015f1c <_realloc_r+0x14>
 8015f4a:	9b01      	ldr	r3, [sp, #4]
 8015f4c:	0022      	movs	r2, r4
 8015f4e:	429c      	cmp	r4, r3
 8015f50:	d900      	bls.n	8015f54 <_realloc_r+0x4c>
 8015f52:	001a      	movs	r2, r3
 8015f54:	0031      	movs	r1, r6
 8015f56:	0028      	movs	r0, r5
 8015f58:	f7fc ff70 	bl	8012e3c <memcpy>
 8015f5c:	0031      	movs	r1, r6
 8015f5e:	0038      	movs	r0, r7
 8015f60:	f7ff fb0c 	bl	801557c <_free_r>
 8015f64:	e7da      	b.n	8015f1c <_realloc_r+0x14>
	...

08015f68 <_read_r>:
 8015f68:	b570      	push	{r4, r5, r6, lr}
 8015f6a:	0004      	movs	r4, r0
 8015f6c:	0008      	movs	r0, r1
 8015f6e:	0011      	movs	r1, r2
 8015f70:	001a      	movs	r2, r3
 8015f72:	2300      	movs	r3, #0
 8015f74:	4d05      	ldr	r5, [pc, #20]	; (8015f8c <_read_r+0x24>)
 8015f76:	602b      	str	r3, [r5, #0]
 8015f78:	f7ed ff26 	bl	8003dc8 <_read>
 8015f7c:	1c43      	adds	r3, r0, #1
 8015f7e:	d103      	bne.n	8015f88 <_read_r+0x20>
 8015f80:	682b      	ldr	r3, [r5, #0]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d000      	beq.n	8015f88 <_read_r+0x20>
 8015f86:	6023      	str	r3, [r4, #0]
 8015f88:	bd70      	pop	{r4, r5, r6, pc}
 8015f8a:	46c0      	nop			; (mov r8, r8)
 8015f8c:	20005f6c 	.word	0x20005f6c

08015f90 <__ascii_wctomb>:
 8015f90:	0003      	movs	r3, r0
 8015f92:	1e08      	subs	r0, r1, #0
 8015f94:	d005      	beq.n	8015fa2 <__ascii_wctomb+0x12>
 8015f96:	2aff      	cmp	r2, #255	; 0xff
 8015f98:	d904      	bls.n	8015fa4 <__ascii_wctomb+0x14>
 8015f9a:	228a      	movs	r2, #138	; 0x8a
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	601a      	str	r2, [r3, #0]
 8015fa0:	4240      	negs	r0, r0
 8015fa2:	4770      	bx	lr
 8015fa4:	2001      	movs	r0, #1
 8015fa6:	700a      	strb	r2, [r1, #0]
 8015fa8:	e7fb      	b.n	8015fa2 <__ascii_wctomb+0x12>

08015faa <abort>:
 8015faa:	2006      	movs	r0, #6
 8015fac:	b510      	push	{r4, lr}
 8015fae:	f000 f835 	bl	801601c <raise>
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	f7ed fefc 	bl	8003db0 <_exit>

08015fb8 <_malloc_usable_size_r>:
 8015fb8:	1f0b      	subs	r3, r1, #4
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	1f18      	subs	r0, r3, #4
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	da01      	bge.n	8015fc6 <_malloc_usable_size_r+0xe>
 8015fc2:	580b      	ldr	r3, [r1, r0]
 8015fc4:	18c0      	adds	r0, r0, r3
 8015fc6:	4770      	bx	lr

08015fc8 <_raise_r>:
 8015fc8:	b570      	push	{r4, r5, r6, lr}
 8015fca:	0004      	movs	r4, r0
 8015fcc:	000d      	movs	r5, r1
 8015fce:	291f      	cmp	r1, #31
 8015fd0:	d904      	bls.n	8015fdc <_raise_r+0x14>
 8015fd2:	2316      	movs	r3, #22
 8015fd4:	6003      	str	r3, [r0, #0]
 8015fd6:	2001      	movs	r0, #1
 8015fd8:	4240      	negs	r0, r0
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d004      	beq.n	8015fec <_raise_r+0x24>
 8015fe2:	008a      	lsls	r2, r1, #2
 8015fe4:	189b      	adds	r3, r3, r2
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	2a00      	cmp	r2, #0
 8015fea:	d108      	bne.n	8015ffe <_raise_r+0x36>
 8015fec:	0020      	movs	r0, r4
 8015fee:	f000 f831 	bl	8016054 <_getpid_r>
 8015ff2:	002a      	movs	r2, r5
 8015ff4:	0001      	movs	r1, r0
 8015ff6:	0020      	movs	r0, r4
 8015ff8:	f000 f81a 	bl	8016030 <_kill_r>
 8015ffc:	e7ed      	b.n	8015fda <_raise_r+0x12>
 8015ffe:	2000      	movs	r0, #0
 8016000:	2a01      	cmp	r2, #1
 8016002:	d0ea      	beq.n	8015fda <_raise_r+0x12>
 8016004:	1c51      	adds	r1, r2, #1
 8016006:	d103      	bne.n	8016010 <_raise_r+0x48>
 8016008:	2316      	movs	r3, #22
 801600a:	3001      	adds	r0, #1
 801600c:	6023      	str	r3, [r4, #0]
 801600e:	e7e4      	b.n	8015fda <_raise_r+0x12>
 8016010:	2400      	movs	r4, #0
 8016012:	0028      	movs	r0, r5
 8016014:	601c      	str	r4, [r3, #0]
 8016016:	4790      	blx	r2
 8016018:	0020      	movs	r0, r4
 801601a:	e7de      	b.n	8015fda <_raise_r+0x12>

0801601c <raise>:
 801601c:	b510      	push	{r4, lr}
 801601e:	4b03      	ldr	r3, [pc, #12]	; (801602c <raise+0x10>)
 8016020:	0001      	movs	r1, r0
 8016022:	6818      	ldr	r0, [r3, #0]
 8016024:	f7ff ffd0 	bl	8015fc8 <_raise_r>
 8016028:	bd10      	pop	{r4, pc}
 801602a:	46c0      	nop			; (mov r8, r8)
 801602c:	200002ec 	.word	0x200002ec

08016030 <_kill_r>:
 8016030:	2300      	movs	r3, #0
 8016032:	b570      	push	{r4, r5, r6, lr}
 8016034:	4d06      	ldr	r5, [pc, #24]	; (8016050 <_kill_r+0x20>)
 8016036:	0004      	movs	r4, r0
 8016038:	0008      	movs	r0, r1
 801603a:	0011      	movs	r1, r2
 801603c:	602b      	str	r3, [r5, #0]
 801603e:	f7ed fea7 	bl	8003d90 <_kill>
 8016042:	1c43      	adds	r3, r0, #1
 8016044:	d103      	bne.n	801604e <_kill_r+0x1e>
 8016046:	682b      	ldr	r3, [r5, #0]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d000      	beq.n	801604e <_kill_r+0x1e>
 801604c:	6023      	str	r3, [r4, #0]
 801604e:	bd70      	pop	{r4, r5, r6, pc}
 8016050:	20005f6c 	.word	0x20005f6c

08016054 <_getpid_r>:
 8016054:	b510      	push	{r4, lr}
 8016056:	f7ed fe95 	bl	8003d84 <_getpid>
 801605a:	bd10      	pop	{r4, pc}

0801605c <_init>:
 801605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801605e:	46c0      	nop			; (mov r8, r8)
 8016060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016062:	bc08      	pop	{r3}
 8016064:	469e      	mov	lr, r3
 8016066:	4770      	bx	lr

08016068 <_fini>:
 8016068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801606a:	46c0      	nop			; (mov r8, r8)
 801606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801606e:	bc08      	pop	{r3}
 8016070:	469e      	mov	lr, r3
 8016072:	4770      	bx	lr
