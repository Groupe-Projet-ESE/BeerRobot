
ESE_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001451c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  080145e0  080145e0  000245e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154d8  080154d8  000304bc  2**0
                  CONTENTS
  4 .ARM          00000000  080154d8  080154d8  000304bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080154d8  080154d8  000304bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154d8  080154d8  000254d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154dc  080154dc  000254dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  080154e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e74  200004bc  0801599c  000304bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008330  0801599c  00038330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029725  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005831  00000000  00000000  00059c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0005f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e18  00000000  00000000  000614a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f004  00000000  00000000  000632b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d67  00000000  00000000  000822bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac5cb  00000000  00000000  000ac023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001585ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008850  00000000  00000000  00158640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004bc 	.word	0x200004bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080145c4 	.word	0x080145c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c0 	.word	0x200004c0
 8000104:	080145c4 	.word	0x080145c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff3b 	bl	80012b8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe8b 	bl	8001168 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff2d 	bl	80012b8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff23 	bl	80012b8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 feb3 	bl	80011ec <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fea9 	bl	80011ec <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_lmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46ce      	mov	lr, r9
 80004ac:	4647      	mov	r7, r8
 80004ae:	b580      	push	{r7, lr}
 80004b0:	0007      	movs	r7, r0
 80004b2:	4699      	mov	r9, r3
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	469c      	mov	ip, r3
 80004b8:	0413      	lsls	r3, r2, #16
 80004ba:	0c1b      	lsrs	r3, r3, #16
 80004bc:	001d      	movs	r5, r3
 80004be:	000e      	movs	r6, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	0400      	lsls	r0, r0, #16
 80004c4:	0c14      	lsrs	r4, r2, #16
 80004c6:	0c00      	lsrs	r0, r0, #16
 80004c8:	4345      	muls	r5, r0
 80004ca:	434b      	muls	r3, r1
 80004cc:	4360      	muls	r0, r4
 80004ce:	4361      	muls	r1, r4
 80004d0:	18c0      	adds	r0, r0, r3
 80004d2:	0c2c      	lsrs	r4, r5, #16
 80004d4:	1820      	adds	r0, r4, r0
 80004d6:	468c      	mov	ip, r1
 80004d8:	4283      	cmp	r3, r0
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x3c>
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	025b      	lsls	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	44c4      	add	ip, r8
 80004e4:	4649      	mov	r1, r9
 80004e6:	4379      	muls	r1, r7
 80004e8:	4372      	muls	r2, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	4463      	add	r3, ip
 80004ee:	042d      	lsls	r5, r5, #16
 80004f0:	0c2d      	lsrs	r5, r5, #16
 80004f2:	18c9      	adds	r1, r1, r3
 80004f4:	0400      	lsls	r0, r0, #16
 80004f6:	1940      	adds	r0, r0, r5
 80004f8:	1889      	adds	r1, r1, r2
 80004fa:	bcc0      	pop	{r6, r7}
 80004fc:	46b9      	mov	r9, r7
 80004fe:	46b0      	mov	r8, r6
 8000500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_dadd>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	464f      	mov	r7, r9
 8000508:	4646      	mov	r6, r8
 800050a:	46d6      	mov	lr, sl
 800050c:	000d      	movs	r5, r1
 800050e:	0004      	movs	r4, r0
 8000510:	b5c0      	push	{r6, r7, lr}
 8000512:	001f      	movs	r7, r3
 8000514:	0011      	movs	r1, r2
 8000516:	0328      	lsls	r0, r5, #12
 8000518:	0f62      	lsrs	r2, r4, #29
 800051a:	0a40      	lsrs	r0, r0, #9
 800051c:	4310      	orrs	r0, r2
 800051e:	007a      	lsls	r2, r7, #1
 8000520:	0d52      	lsrs	r2, r2, #21
 8000522:	00e3      	lsls	r3, r4, #3
 8000524:	033c      	lsls	r4, r7, #12
 8000526:	4691      	mov	r9, r2
 8000528:	0a64      	lsrs	r4, r4, #9
 800052a:	0ffa      	lsrs	r2, r7, #31
 800052c:	0f4f      	lsrs	r7, r1, #29
 800052e:	006e      	lsls	r6, r5, #1
 8000530:	4327      	orrs	r7, r4
 8000532:	4692      	mov	sl, r2
 8000534:	46b8      	mov	r8, r7
 8000536:	0d76      	lsrs	r6, r6, #21
 8000538:	0fed      	lsrs	r5, r5, #31
 800053a:	00c9      	lsls	r1, r1, #3
 800053c:	4295      	cmp	r5, r2
 800053e:	d100      	bne.n	8000542 <__aeabi_dadd+0x3e>
 8000540:	e099      	b.n	8000676 <__aeabi_dadd+0x172>
 8000542:	464c      	mov	r4, r9
 8000544:	1b34      	subs	r4, r6, r4
 8000546:	46a4      	mov	ip, r4
 8000548:	2c00      	cmp	r4, #0
 800054a:	dc00      	bgt.n	800054e <__aeabi_dadd+0x4a>
 800054c:	e07c      	b.n	8000648 <__aeabi_dadd+0x144>
 800054e:	464a      	mov	r2, r9
 8000550:	2a00      	cmp	r2, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x52>
 8000554:	e0b8      	b.n	80006c8 <__aeabi_dadd+0x1c4>
 8000556:	4ac5      	ldr	r2, [pc, #788]	; (800086c <__aeabi_dadd+0x368>)
 8000558:	4296      	cmp	r6, r2
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x5a>
 800055c:	e11c      	b.n	8000798 <__aeabi_dadd+0x294>
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	003c      	movs	r4, r7
 8000562:	0412      	lsls	r2, r2, #16
 8000564:	4314      	orrs	r4, r2
 8000566:	46a0      	mov	r8, r4
 8000568:	4662      	mov	r2, ip
 800056a:	2a38      	cmp	r2, #56	; 0x38
 800056c:	dd00      	ble.n	8000570 <__aeabi_dadd+0x6c>
 800056e:	e161      	b.n	8000834 <__aeabi_dadd+0x330>
 8000570:	2a1f      	cmp	r2, #31
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0x72>
 8000574:	e1cc      	b.n	8000910 <__aeabi_dadd+0x40c>
 8000576:	4664      	mov	r4, ip
 8000578:	2220      	movs	r2, #32
 800057a:	1b12      	subs	r2, r2, r4
 800057c:	4644      	mov	r4, r8
 800057e:	4094      	lsls	r4, r2
 8000580:	000f      	movs	r7, r1
 8000582:	46a1      	mov	r9, r4
 8000584:	4664      	mov	r4, ip
 8000586:	4091      	lsls	r1, r2
 8000588:	40e7      	lsrs	r7, r4
 800058a:	464c      	mov	r4, r9
 800058c:	1e4a      	subs	r2, r1, #1
 800058e:	4191      	sbcs	r1, r2
 8000590:	433c      	orrs	r4, r7
 8000592:	4642      	mov	r2, r8
 8000594:	4321      	orrs	r1, r4
 8000596:	4664      	mov	r4, ip
 8000598:	40e2      	lsrs	r2, r4
 800059a:	1a80      	subs	r0, r0, r2
 800059c:	1a5c      	subs	r4, r3, r1
 800059e:	42a3      	cmp	r3, r4
 80005a0:	419b      	sbcs	r3, r3
 80005a2:	425f      	negs	r7, r3
 80005a4:	1bc7      	subs	r7, r0, r7
 80005a6:	023b      	lsls	r3, r7, #8
 80005a8:	d400      	bmi.n	80005ac <__aeabi_dadd+0xa8>
 80005aa:	e0d0      	b.n	800074e <__aeabi_dadd+0x24a>
 80005ac:	027f      	lsls	r7, r7, #9
 80005ae:	0a7f      	lsrs	r7, r7, #9
 80005b0:	2f00      	cmp	r7, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_dadd+0xb2>
 80005b4:	e0ff      	b.n	80007b6 <__aeabi_dadd+0x2b2>
 80005b6:	0038      	movs	r0, r7
 80005b8:	f001 fe5a 	bl	8002270 <__clzsi2>
 80005bc:	0001      	movs	r1, r0
 80005be:	3908      	subs	r1, #8
 80005c0:	2320      	movs	r3, #32
 80005c2:	0022      	movs	r2, r4
 80005c4:	1a5b      	subs	r3, r3, r1
 80005c6:	408f      	lsls	r7, r1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	408c      	lsls	r4, r1
 80005cc:	4317      	orrs	r7, r2
 80005ce:	42b1      	cmp	r1, r6
 80005d0:	da00      	bge.n	80005d4 <__aeabi_dadd+0xd0>
 80005d2:	e0ff      	b.n	80007d4 <__aeabi_dadd+0x2d0>
 80005d4:	1b89      	subs	r1, r1, r6
 80005d6:	1c4b      	adds	r3, r1, #1
 80005d8:	2b1f      	cmp	r3, #31
 80005da:	dd00      	ble.n	80005de <__aeabi_dadd+0xda>
 80005dc:	e0a8      	b.n	8000730 <__aeabi_dadd+0x22c>
 80005de:	2220      	movs	r2, #32
 80005e0:	0039      	movs	r1, r7
 80005e2:	1ad2      	subs	r2, r2, r3
 80005e4:	0020      	movs	r0, r4
 80005e6:	4094      	lsls	r4, r2
 80005e8:	4091      	lsls	r1, r2
 80005ea:	40d8      	lsrs	r0, r3
 80005ec:	1e62      	subs	r2, r4, #1
 80005ee:	4194      	sbcs	r4, r2
 80005f0:	40df      	lsrs	r7, r3
 80005f2:	2600      	movs	r6, #0
 80005f4:	4301      	orrs	r1, r0
 80005f6:	430c      	orrs	r4, r1
 80005f8:	0763      	lsls	r3, r4, #29
 80005fa:	d009      	beq.n	8000610 <__aeabi_dadd+0x10c>
 80005fc:	230f      	movs	r3, #15
 80005fe:	4023      	ands	r3, r4
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <__aeabi_dadd+0x10c>
 8000604:	1d23      	adds	r3, r4, #4
 8000606:	42a3      	cmp	r3, r4
 8000608:	41a4      	sbcs	r4, r4
 800060a:	4264      	negs	r4, r4
 800060c:	193f      	adds	r7, r7, r4
 800060e:	001c      	movs	r4, r3
 8000610:	023b      	lsls	r3, r7, #8
 8000612:	d400      	bmi.n	8000616 <__aeabi_dadd+0x112>
 8000614:	e09e      	b.n	8000754 <__aeabi_dadd+0x250>
 8000616:	4b95      	ldr	r3, [pc, #596]	; (800086c <__aeabi_dadd+0x368>)
 8000618:	3601      	adds	r6, #1
 800061a:	429e      	cmp	r6, r3
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x11c>
 800061e:	e0b7      	b.n	8000790 <__aeabi_dadd+0x28c>
 8000620:	4a93      	ldr	r2, [pc, #588]	; (8000870 <__aeabi_dadd+0x36c>)
 8000622:	08e4      	lsrs	r4, r4, #3
 8000624:	4017      	ands	r7, r2
 8000626:	077b      	lsls	r3, r7, #29
 8000628:	0571      	lsls	r1, r6, #21
 800062a:	027f      	lsls	r7, r7, #9
 800062c:	4323      	orrs	r3, r4
 800062e:	0b3f      	lsrs	r7, r7, #12
 8000630:	0d4a      	lsrs	r2, r1, #21
 8000632:	0512      	lsls	r2, r2, #20
 8000634:	433a      	orrs	r2, r7
 8000636:	07ed      	lsls	r5, r5, #31
 8000638:	432a      	orrs	r2, r5
 800063a:	0018      	movs	r0, r3
 800063c:	0011      	movs	r1, r2
 800063e:	bce0      	pop	{r5, r6, r7}
 8000640:	46ba      	mov	sl, r7
 8000642:	46b1      	mov	r9, r6
 8000644:	46a8      	mov	r8, r5
 8000646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000648:	2c00      	cmp	r4, #0
 800064a:	d04b      	beq.n	80006e4 <__aeabi_dadd+0x1e0>
 800064c:	464c      	mov	r4, r9
 800064e:	1ba4      	subs	r4, r4, r6
 8000650:	46a4      	mov	ip, r4
 8000652:	2e00      	cmp	r6, #0
 8000654:	d000      	beq.n	8000658 <__aeabi_dadd+0x154>
 8000656:	e123      	b.n	80008a0 <__aeabi_dadd+0x39c>
 8000658:	0004      	movs	r4, r0
 800065a:	431c      	orrs	r4, r3
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x15c>
 800065e:	e1af      	b.n	80009c0 <__aeabi_dadd+0x4bc>
 8000660:	4662      	mov	r2, ip
 8000662:	1e54      	subs	r4, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x166>
 8000668:	e215      	b.n	8000a96 <__aeabi_dadd+0x592>
 800066a:	4d80      	ldr	r5, [pc, #512]	; (800086c <__aeabi_dadd+0x368>)
 800066c:	45ac      	cmp	ip, r5
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x16e>
 8000670:	e1c8      	b.n	8000a04 <__aeabi_dadd+0x500>
 8000672:	46a4      	mov	ip, r4
 8000674:	e11b      	b.n	80008ae <__aeabi_dadd+0x3aa>
 8000676:	464a      	mov	r2, r9
 8000678:	1ab2      	subs	r2, r6, r2
 800067a:	4694      	mov	ip, r2
 800067c:	2a00      	cmp	r2, #0
 800067e:	dc00      	bgt.n	8000682 <__aeabi_dadd+0x17e>
 8000680:	e0ac      	b.n	80007dc <__aeabi_dadd+0x2d8>
 8000682:	464a      	mov	r2, r9
 8000684:	2a00      	cmp	r2, #0
 8000686:	d043      	beq.n	8000710 <__aeabi_dadd+0x20c>
 8000688:	4a78      	ldr	r2, [pc, #480]	; (800086c <__aeabi_dadd+0x368>)
 800068a:	4296      	cmp	r6, r2
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x18c>
 800068e:	e1af      	b.n	80009f0 <__aeabi_dadd+0x4ec>
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	003c      	movs	r4, r7
 8000694:	0412      	lsls	r2, r2, #16
 8000696:	4314      	orrs	r4, r2
 8000698:	46a0      	mov	r8, r4
 800069a:	4662      	mov	r2, ip
 800069c:	2a38      	cmp	r2, #56	; 0x38
 800069e:	dc67      	bgt.n	8000770 <__aeabi_dadd+0x26c>
 80006a0:	2a1f      	cmp	r2, #31
 80006a2:	dc00      	bgt.n	80006a6 <__aeabi_dadd+0x1a2>
 80006a4:	e15f      	b.n	8000966 <__aeabi_dadd+0x462>
 80006a6:	4647      	mov	r7, r8
 80006a8:	3a20      	subs	r2, #32
 80006aa:	40d7      	lsrs	r7, r2
 80006ac:	4662      	mov	r2, ip
 80006ae:	2a20      	cmp	r2, #32
 80006b0:	d005      	beq.n	80006be <__aeabi_dadd+0x1ba>
 80006b2:	4664      	mov	r4, ip
 80006b4:	2240      	movs	r2, #64	; 0x40
 80006b6:	1b12      	subs	r2, r2, r4
 80006b8:	4644      	mov	r4, r8
 80006ba:	4094      	lsls	r4, r2
 80006bc:	4321      	orrs	r1, r4
 80006be:	1e4a      	subs	r2, r1, #1
 80006c0:	4191      	sbcs	r1, r2
 80006c2:	000c      	movs	r4, r1
 80006c4:	433c      	orrs	r4, r7
 80006c6:	e057      	b.n	8000778 <__aeabi_dadd+0x274>
 80006c8:	003a      	movs	r2, r7
 80006ca:	430a      	orrs	r2, r1
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x1cc>
 80006ce:	e105      	b.n	80008dc <__aeabi_dadd+0x3d8>
 80006d0:	0022      	movs	r2, r4
 80006d2:	3a01      	subs	r2, #1
 80006d4:	2c01      	cmp	r4, #1
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x1d6>
 80006d8:	e182      	b.n	80009e0 <__aeabi_dadd+0x4dc>
 80006da:	4c64      	ldr	r4, [pc, #400]	; (800086c <__aeabi_dadd+0x368>)
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d05b      	beq.n	8000798 <__aeabi_dadd+0x294>
 80006e0:	4694      	mov	ip, r2
 80006e2:	e741      	b.n	8000568 <__aeabi_dadd+0x64>
 80006e4:	4c63      	ldr	r4, [pc, #396]	; (8000874 <__aeabi_dadd+0x370>)
 80006e6:	1c77      	adds	r7, r6, #1
 80006e8:	4227      	tst	r7, r4
 80006ea:	d000      	beq.n	80006ee <__aeabi_dadd+0x1ea>
 80006ec:	e0c4      	b.n	8000878 <__aeabi_dadd+0x374>
 80006ee:	0004      	movs	r4, r0
 80006f0:	431c      	orrs	r4, r3
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x1f4>
 80006f6:	e169      	b.n	80009cc <__aeabi_dadd+0x4c8>
 80006f8:	2c00      	cmp	r4, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x1fa>
 80006fc:	e1bf      	b.n	8000a7e <__aeabi_dadd+0x57a>
 80006fe:	4644      	mov	r4, r8
 8000700:	430c      	orrs	r4, r1
 8000702:	d000      	beq.n	8000706 <__aeabi_dadd+0x202>
 8000704:	e1d0      	b.n	8000aa8 <__aeabi_dadd+0x5a4>
 8000706:	0742      	lsls	r2, r0, #29
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	4313      	orrs	r3, r2
 800070c:	08c0      	lsrs	r0, r0, #3
 800070e:	e029      	b.n	8000764 <__aeabi_dadd+0x260>
 8000710:	003a      	movs	r2, r7
 8000712:	430a      	orrs	r2, r1
 8000714:	d100      	bne.n	8000718 <__aeabi_dadd+0x214>
 8000716:	e170      	b.n	80009fa <__aeabi_dadd+0x4f6>
 8000718:	4662      	mov	r2, ip
 800071a:	4664      	mov	r4, ip
 800071c:	3a01      	subs	r2, #1
 800071e:	2c01      	cmp	r4, #1
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x220>
 8000722:	e0e0      	b.n	80008e6 <__aeabi_dadd+0x3e2>
 8000724:	4c51      	ldr	r4, [pc, #324]	; (800086c <__aeabi_dadd+0x368>)
 8000726:	45a4      	cmp	ip, r4
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x228>
 800072a:	e161      	b.n	80009f0 <__aeabi_dadd+0x4ec>
 800072c:	4694      	mov	ip, r2
 800072e:	e7b4      	b.n	800069a <__aeabi_dadd+0x196>
 8000730:	003a      	movs	r2, r7
 8000732:	391f      	subs	r1, #31
 8000734:	40ca      	lsrs	r2, r1
 8000736:	0011      	movs	r1, r2
 8000738:	2b20      	cmp	r3, #32
 800073a:	d003      	beq.n	8000744 <__aeabi_dadd+0x240>
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	409f      	lsls	r7, r3
 8000742:	433c      	orrs	r4, r7
 8000744:	1e63      	subs	r3, r4, #1
 8000746:	419c      	sbcs	r4, r3
 8000748:	2700      	movs	r7, #0
 800074a:	2600      	movs	r6, #0
 800074c:	430c      	orrs	r4, r1
 800074e:	0763      	lsls	r3, r4, #29
 8000750:	d000      	beq.n	8000754 <__aeabi_dadd+0x250>
 8000752:	e753      	b.n	80005fc <__aeabi_dadd+0xf8>
 8000754:	46b4      	mov	ip, r6
 8000756:	08e4      	lsrs	r4, r4, #3
 8000758:	077b      	lsls	r3, r7, #29
 800075a:	4323      	orrs	r3, r4
 800075c:	08f8      	lsrs	r0, r7, #3
 800075e:	4a43      	ldr	r2, [pc, #268]	; (800086c <__aeabi_dadd+0x368>)
 8000760:	4594      	cmp	ip, r2
 8000762:	d01d      	beq.n	80007a0 <__aeabi_dadd+0x29c>
 8000764:	4662      	mov	r2, ip
 8000766:	0307      	lsls	r7, r0, #12
 8000768:	0552      	lsls	r2, r2, #21
 800076a:	0b3f      	lsrs	r7, r7, #12
 800076c:	0d52      	lsrs	r2, r2, #21
 800076e:	e760      	b.n	8000632 <__aeabi_dadd+0x12e>
 8000770:	4644      	mov	r4, r8
 8000772:	430c      	orrs	r4, r1
 8000774:	1e62      	subs	r2, r4, #1
 8000776:	4194      	sbcs	r4, r2
 8000778:	18e4      	adds	r4, r4, r3
 800077a:	429c      	cmp	r4, r3
 800077c:	419b      	sbcs	r3, r3
 800077e:	425f      	negs	r7, r3
 8000780:	183f      	adds	r7, r7, r0
 8000782:	023b      	lsls	r3, r7, #8
 8000784:	d5e3      	bpl.n	800074e <__aeabi_dadd+0x24a>
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <__aeabi_dadd+0x368>)
 8000788:	3601      	adds	r6, #1
 800078a:	429e      	cmp	r6, r3
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x28c>
 800078e:	e0b5      	b.n	80008fc <__aeabi_dadd+0x3f8>
 8000790:	0032      	movs	r2, r6
 8000792:	2700      	movs	r7, #0
 8000794:	2300      	movs	r3, #0
 8000796:	e74c      	b.n	8000632 <__aeabi_dadd+0x12e>
 8000798:	0742      	lsls	r2, r0, #29
 800079a:	08db      	lsrs	r3, r3, #3
 800079c:	4313      	orrs	r3, r2
 800079e:	08c0      	lsrs	r0, r0, #3
 80007a0:	001a      	movs	r2, r3
 80007a2:	4302      	orrs	r2, r0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x2a4>
 80007a6:	e1e1      	b.n	8000b6c <__aeabi_dadd+0x668>
 80007a8:	2780      	movs	r7, #128	; 0x80
 80007aa:	033f      	lsls	r7, r7, #12
 80007ac:	4307      	orrs	r7, r0
 80007ae:	033f      	lsls	r7, r7, #12
 80007b0:	4a2e      	ldr	r2, [pc, #184]	; (800086c <__aeabi_dadd+0x368>)
 80007b2:	0b3f      	lsrs	r7, r7, #12
 80007b4:	e73d      	b.n	8000632 <__aeabi_dadd+0x12e>
 80007b6:	0020      	movs	r0, r4
 80007b8:	f001 fd5a 	bl	8002270 <__clzsi2>
 80007bc:	0001      	movs	r1, r0
 80007be:	3118      	adds	r1, #24
 80007c0:	291f      	cmp	r1, #31
 80007c2:	dc00      	bgt.n	80007c6 <__aeabi_dadd+0x2c2>
 80007c4:	e6fc      	b.n	80005c0 <__aeabi_dadd+0xbc>
 80007c6:	3808      	subs	r0, #8
 80007c8:	4084      	lsls	r4, r0
 80007ca:	0027      	movs	r7, r4
 80007cc:	2400      	movs	r4, #0
 80007ce:	42b1      	cmp	r1, r6
 80007d0:	db00      	blt.n	80007d4 <__aeabi_dadd+0x2d0>
 80007d2:	e6ff      	b.n	80005d4 <__aeabi_dadd+0xd0>
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <__aeabi_dadd+0x36c>)
 80007d6:	1a76      	subs	r6, r6, r1
 80007d8:	4017      	ands	r7, r2
 80007da:	e70d      	b.n	80005f8 <__aeabi_dadd+0xf4>
 80007dc:	2a00      	cmp	r2, #0
 80007de:	d02f      	beq.n	8000840 <__aeabi_dadd+0x33c>
 80007e0:	464a      	mov	r2, r9
 80007e2:	1b92      	subs	r2, r2, r6
 80007e4:	4694      	mov	ip, r2
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x2e8>
 80007ea:	e0ad      	b.n	8000948 <__aeabi_dadd+0x444>
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <__aeabi_dadd+0x368>)
 80007ee:	4591      	cmp	r9, r2
 80007f0:	d100      	bne.n	80007f4 <__aeabi_dadd+0x2f0>
 80007f2:	e10f      	b.n	8000a14 <__aeabi_dadd+0x510>
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	0412      	lsls	r2, r2, #16
 80007f8:	4310      	orrs	r0, r2
 80007fa:	4662      	mov	r2, ip
 80007fc:	2a38      	cmp	r2, #56	; 0x38
 80007fe:	dd00      	ble.n	8000802 <__aeabi_dadd+0x2fe>
 8000800:	e10f      	b.n	8000a22 <__aeabi_dadd+0x51e>
 8000802:	2a1f      	cmp	r2, #31
 8000804:	dd00      	ble.n	8000808 <__aeabi_dadd+0x304>
 8000806:	e180      	b.n	8000b0a <__aeabi_dadd+0x606>
 8000808:	4664      	mov	r4, ip
 800080a:	2220      	movs	r2, #32
 800080c:	001e      	movs	r6, r3
 800080e:	1b12      	subs	r2, r2, r4
 8000810:	4667      	mov	r7, ip
 8000812:	0004      	movs	r4, r0
 8000814:	4093      	lsls	r3, r2
 8000816:	4094      	lsls	r4, r2
 8000818:	40fe      	lsrs	r6, r7
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	4193      	sbcs	r3, r2
 800081e:	40f8      	lsrs	r0, r7
 8000820:	4334      	orrs	r4, r6
 8000822:	431c      	orrs	r4, r3
 8000824:	4480      	add	r8, r0
 8000826:	1864      	adds	r4, r4, r1
 8000828:	428c      	cmp	r4, r1
 800082a:	41bf      	sbcs	r7, r7
 800082c:	427f      	negs	r7, r7
 800082e:	464e      	mov	r6, r9
 8000830:	4447      	add	r7, r8
 8000832:	e7a6      	b.n	8000782 <__aeabi_dadd+0x27e>
 8000834:	4642      	mov	r2, r8
 8000836:	430a      	orrs	r2, r1
 8000838:	0011      	movs	r1, r2
 800083a:	1e4a      	subs	r2, r1, #1
 800083c:	4191      	sbcs	r1, r2
 800083e:	e6ad      	b.n	800059c <__aeabi_dadd+0x98>
 8000840:	4c0c      	ldr	r4, [pc, #48]	; (8000874 <__aeabi_dadd+0x370>)
 8000842:	1c72      	adds	r2, r6, #1
 8000844:	4222      	tst	r2, r4
 8000846:	d000      	beq.n	800084a <__aeabi_dadd+0x346>
 8000848:	e0a1      	b.n	800098e <__aeabi_dadd+0x48a>
 800084a:	0002      	movs	r2, r0
 800084c:	431a      	orrs	r2, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x350>
 8000852:	e0fa      	b.n	8000a4a <__aeabi_dadd+0x546>
 8000854:	2a00      	cmp	r2, #0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x356>
 8000858:	e145      	b.n	8000ae6 <__aeabi_dadd+0x5e2>
 800085a:	003a      	movs	r2, r7
 800085c:	430a      	orrs	r2, r1
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x35e>
 8000860:	e146      	b.n	8000af0 <__aeabi_dadd+0x5ec>
 8000862:	0742      	lsls	r2, r0, #29
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	4313      	orrs	r3, r2
 8000868:	08c0      	lsrs	r0, r0, #3
 800086a:	e77b      	b.n	8000764 <__aeabi_dadd+0x260>
 800086c:	000007ff 	.word	0x000007ff
 8000870:	ff7fffff 	.word	0xff7fffff
 8000874:	000007fe 	.word	0x000007fe
 8000878:	4647      	mov	r7, r8
 800087a:	1a5c      	subs	r4, r3, r1
 800087c:	1bc2      	subs	r2, r0, r7
 800087e:	42a3      	cmp	r3, r4
 8000880:	41bf      	sbcs	r7, r7
 8000882:	427f      	negs	r7, r7
 8000884:	46b9      	mov	r9, r7
 8000886:	0017      	movs	r7, r2
 8000888:	464a      	mov	r2, r9
 800088a:	1abf      	subs	r7, r7, r2
 800088c:	023a      	lsls	r2, r7, #8
 800088e:	d500      	bpl.n	8000892 <__aeabi_dadd+0x38e>
 8000890:	e08d      	b.n	80009ae <__aeabi_dadd+0x4aa>
 8000892:	0023      	movs	r3, r4
 8000894:	433b      	orrs	r3, r7
 8000896:	d000      	beq.n	800089a <__aeabi_dadd+0x396>
 8000898:	e68a      	b.n	80005b0 <__aeabi_dadd+0xac>
 800089a:	2000      	movs	r0, #0
 800089c:	2500      	movs	r5, #0
 800089e:	e761      	b.n	8000764 <__aeabi_dadd+0x260>
 80008a0:	4cb4      	ldr	r4, [pc, #720]	; (8000b74 <__aeabi_dadd+0x670>)
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x3a4>
 80008a6:	e0ad      	b.n	8000a04 <__aeabi_dadd+0x500>
 80008a8:	2480      	movs	r4, #128	; 0x80
 80008aa:	0424      	lsls	r4, r4, #16
 80008ac:	4320      	orrs	r0, r4
 80008ae:	4664      	mov	r4, ip
 80008b0:	2c38      	cmp	r4, #56	; 0x38
 80008b2:	dc3d      	bgt.n	8000930 <__aeabi_dadd+0x42c>
 80008b4:	4662      	mov	r2, ip
 80008b6:	2c1f      	cmp	r4, #31
 80008b8:	dd00      	ble.n	80008bc <__aeabi_dadd+0x3b8>
 80008ba:	e0b7      	b.n	8000a2c <__aeabi_dadd+0x528>
 80008bc:	2520      	movs	r5, #32
 80008be:	001e      	movs	r6, r3
 80008c0:	1b2d      	subs	r5, r5, r4
 80008c2:	0004      	movs	r4, r0
 80008c4:	40ab      	lsls	r3, r5
 80008c6:	40ac      	lsls	r4, r5
 80008c8:	40d6      	lsrs	r6, r2
 80008ca:	40d0      	lsrs	r0, r2
 80008cc:	4642      	mov	r2, r8
 80008ce:	1e5d      	subs	r5, r3, #1
 80008d0:	41ab      	sbcs	r3, r5
 80008d2:	4334      	orrs	r4, r6
 80008d4:	1a12      	subs	r2, r2, r0
 80008d6:	4690      	mov	r8, r2
 80008d8:	4323      	orrs	r3, r4
 80008da:	e02c      	b.n	8000936 <__aeabi_dadd+0x432>
 80008dc:	0742      	lsls	r2, r0, #29
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	08c0      	lsrs	r0, r0, #3
 80008e4:	e73b      	b.n	800075e <__aeabi_dadd+0x25a>
 80008e6:	185c      	adds	r4, r3, r1
 80008e8:	429c      	cmp	r4, r3
 80008ea:	419b      	sbcs	r3, r3
 80008ec:	4440      	add	r0, r8
 80008ee:	425b      	negs	r3, r3
 80008f0:	18c7      	adds	r7, r0, r3
 80008f2:	2601      	movs	r6, #1
 80008f4:	023b      	lsls	r3, r7, #8
 80008f6:	d400      	bmi.n	80008fa <__aeabi_dadd+0x3f6>
 80008f8:	e729      	b.n	800074e <__aeabi_dadd+0x24a>
 80008fa:	2602      	movs	r6, #2
 80008fc:	4a9e      	ldr	r2, [pc, #632]	; (8000b78 <__aeabi_dadd+0x674>)
 80008fe:	0863      	lsrs	r3, r4, #1
 8000900:	4017      	ands	r7, r2
 8000902:	2201      	movs	r2, #1
 8000904:	4014      	ands	r4, r2
 8000906:	431c      	orrs	r4, r3
 8000908:	07fb      	lsls	r3, r7, #31
 800090a:	431c      	orrs	r4, r3
 800090c:	087f      	lsrs	r7, r7, #1
 800090e:	e673      	b.n	80005f8 <__aeabi_dadd+0xf4>
 8000910:	4644      	mov	r4, r8
 8000912:	3a20      	subs	r2, #32
 8000914:	40d4      	lsrs	r4, r2
 8000916:	4662      	mov	r2, ip
 8000918:	2a20      	cmp	r2, #32
 800091a:	d005      	beq.n	8000928 <__aeabi_dadd+0x424>
 800091c:	4667      	mov	r7, ip
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	1bd2      	subs	r2, r2, r7
 8000922:	4647      	mov	r7, r8
 8000924:	4097      	lsls	r7, r2
 8000926:	4339      	orrs	r1, r7
 8000928:	1e4a      	subs	r2, r1, #1
 800092a:	4191      	sbcs	r1, r2
 800092c:	4321      	orrs	r1, r4
 800092e:	e635      	b.n	800059c <__aeabi_dadd+0x98>
 8000930:	4303      	orrs	r3, r0
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4183      	sbcs	r3, r0
 8000936:	1acc      	subs	r4, r1, r3
 8000938:	42a1      	cmp	r1, r4
 800093a:	41bf      	sbcs	r7, r7
 800093c:	4643      	mov	r3, r8
 800093e:	427f      	negs	r7, r7
 8000940:	4655      	mov	r5, sl
 8000942:	464e      	mov	r6, r9
 8000944:	1bdf      	subs	r7, r3, r7
 8000946:	e62e      	b.n	80005a6 <__aeabi_dadd+0xa2>
 8000948:	0002      	movs	r2, r0
 800094a:	431a      	orrs	r2, r3
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x44c>
 800094e:	e0bd      	b.n	8000acc <__aeabi_dadd+0x5c8>
 8000950:	4662      	mov	r2, ip
 8000952:	4664      	mov	r4, ip
 8000954:	3a01      	subs	r2, #1
 8000956:	2c01      	cmp	r4, #1
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x458>
 800095a:	e0e5      	b.n	8000b28 <__aeabi_dadd+0x624>
 800095c:	4c85      	ldr	r4, [pc, #532]	; (8000b74 <__aeabi_dadd+0x670>)
 800095e:	45a4      	cmp	ip, r4
 8000960:	d058      	beq.n	8000a14 <__aeabi_dadd+0x510>
 8000962:	4694      	mov	ip, r2
 8000964:	e749      	b.n	80007fa <__aeabi_dadd+0x2f6>
 8000966:	4664      	mov	r4, ip
 8000968:	2220      	movs	r2, #32
 800096a:	1b12      	subs	r2, r2, r4
 800096c:	4644      	mov	r4, r8
 800096e:	4094      	lsls	r4, r2
 8000970:	000f      	movs	r7, r1
 8000972:	46a1      	mov	r9, r4
 8000974:	4664      	mov	r4, ip
 8000976:	4091      	lsls	r1, r2
 8000978:	40e7      	lsrs	r7, r4
 800097a:	464c      	mov	r4, r9
 800097c:	1e4a      	subs	r2, r1, #1
 800097e:	4191      	sbcs	r1, r2
 8000980:	433c      	orrs	r4, r7
 8000982:	4642      	mov	r2, r8
 8000984:	430c      	orrs	r4, r1
 8000986:	4661      	mov	r1, ip
 8000988:	40ca      	lsrs	r2, r1
 800098a:	1880      	adds	r0, r0, r2
 800098c:	e6f4      	b.n	8000778 <__aeabi_dadd+0x274>
 800098e:	4c79      	ldr	r4, [pc, #484]	; (8000b74 <__aeabi_dadd+0x670>)
 8000990:	42a2      	cmp	r2, r4
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x492>
 8000994:	e6fd      	b.n	8000792 <__aeabi_dadd+0x28e>
 8000996:	1859      	adds	r1, r3, r1
 8000998:	4299      	cmp	r1, r3
 800099a:	419b      	sbcs	r3, r3
 800099c:	4440      	add	r0, r8
 800099e:	425f      	negs	r7, r3
 80009a0:	19c7      	adds	r7, r0, r7
 80009a2:	07fc      	lsls	r4, r7, #31
 80009a4:	0849      	lsrs	r1, r1, #1
 80009a6:	0016      	movs	r6, r2
 80009a8:	430c      	orrs	r4, r1
 80009aa:	087f      	lsrs	r7, r7, #1
 80009ac:	e6cf      	b.n	800074e <__aeabi_dadd+0x24a>
 80009ae:	1acc      	subs	r4, r1, r3
 80009b0:	42a1      	cmp	r1, r4
 80009b2:	41bf      	sbcs	r7, r7
 80009b4:	4643      	mov	r3, r8
 80009b6:	427f      	negs	r7, r7
 80009b8:	1a18      	subs	r0, r3, r0
 80009ba:	4655      	mov	r5, sl
 80009bc:	1bc7      	subs	r7, r0, r7
 80009be:	e5f7      	b.n	80005b0 <__aeabi_dadd+0xac>
 80009c0:	08c9      	lsrs	r1, r1, #3
 80009c2:	077b      	lsls	r3, r7, #29
 80009c4:	4655      	mov	r5, sl
 80009c6:	430b      	orrs	r3, r1
 80009c8:	08f8      	lsrs	r0, r7, #3
 80009ca:	e6c8      	b.n	800075e <__aeabi_dadd+0x25a>
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_dadd+0x4ce>
 80009d0:	e081      	b.n	8000ad6 <__aeabi_dadd+0x5d2>
 80009d2:	4643      	mov	r3, r8
 80009d4:	430b      	orrs	r3, r1
 80009d6:	d115      	bne.n	8000a04 <__aeabi_dadd+0x500>
 80009d8:	2080      	movs	r0, #128	; 0x80
 80009da:	2500      	movs	r5, #0
 80009dc:	0300      	lsls	r0, r0, #12
 80009de:	e6e3      	b.n	80007a8 <__aeabi_dadd+0x2a4>
 80009e0:	1a5c      	subs	r4, r3, r1
 80009e2:	42a3      	cmp	r3, r4
 80009e4:	419b      	sbcs	r3, r3
 80009e6:	1bc7      	subs	r7, r0, r7
 80009e8:	425b      	negs	r3, r3
 80009ea:	2601      	movs	r6, #1
 80009ec:	1aff      	subs	r7, r7, r3
 80009ee:	e5da      	b.n	80005a6 <__aeabi_dadd+0xa2>
 80009f0:	0742      	lsls	r2, r0, #29
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	08c0      	lsrs	r0, r0, #3
 80009f8:	e6d2      	b.n	80007a0 <__aeabi_dadd+0x29c>
 80009fa:	0742      	lsls	r2, r0, #29
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	e6ac      	b.n	800075e <__aeabi_dadd+0x25a>
 8000a04:	4643      	mov	r3, r8
 8000a06:	4642      	mov	r2, r8
 8000a08:	08c9      	lsrs	r1, r1, #3
 8000a0a:	075b      	lsls	r3, r3, #29
 8000a0c:	4655      	mov	r5, sl
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	08d0      	lsrs	r0, r2, #3
 8000a12:	e6c5      	b.n	80007a0 <__aeabi_dadd+0x29c>
 8000a14:	4643      	mov	r3, r8
 8000a16:	4642      	mov	r2, r8
 8000a18:	075b      	lsls	r3, r3, #29
 8000a1a:	08c9      	lsrs	r1, r1, #3
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	08d0      	lsrs	r0, r2, #3
 8000a20:	e6be      	b.n	80007a0 <__aeabi_dadd+0x29c>
 8000a22:	4303      	orrs	r3, r0
 8000a24:	001c      	movs	r4, r3
 8000a26:	1e63      	subs	r3, r4, #1
 8000a28:	419c      	sbcs	r4, r3
 8000a2a:	e6fc      	b.n	8000826 <__aeabi_dadd+0x322>
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	3c20      	subs	r4, #32
 8000a30:	40e2      	lsrs	r2, r4
 8000a32:	0014      	movs	r4, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	2a20      	cmp	r2, #32
 8000a38:	d003      	beq.n	8000a42 <__aeabi_dadd+0x53e>
 8000a3a:	2540      	movs	r5, #64	; 0x40
 8000a3c:	1aad      	subs	r5, r5, r2
 8000a3e:	40a8      	lsls	r0, r5
 8000a40:	4303      	orrs	r3, r0
 8000a42:	1e58      	subs	r0, r3, #1
 8000a44:	4183      	sbcs	r3, r0
 8000a46:	4323      	orrs	r3, r4
 8000a48:	e775      	b.n	8000936 <__aeabi_dadd+0x432>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d0e2      	beq.n	8000a14 <__aeabi_dadd+0x510>
 8000a4e:	003a      	movs	r2, r7
 8000a50:	430a      	orrs	r2, r1
 8000a52:	d0cd      	beq.n	80009f0 <__aeabi_dadd+0x4ec>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	08c0      	lsrs	r0, r0, #3
 8000a5e:	0312      	lsls	r2, r2, #12
 8000a60:	4210      	tst	r0, r2
 8000a62:	d006      	beq.n	8000a72 <__aeabi_dadd+0x56e>
 8000a64:	08fc      	lsrs	r4, r7, #3
 8000a66:	4214      	tst	r4, r2
 8000a68:	d103      	bne.n	8000a72 <__aeabi_dadd+0x56e>
 8000a6a:	0020      	movs	r0, r4
 8000a6c:	08cb      	lsrs	r3, r1, #3
 8000a6e:	077a      	lsls	r2, r7, #29
 8000a70:	4313      	orrs	r3, r2
 8000a72:	0f5a      	lsrs	r2, r3, #29
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	0752      	lsls	r2, r2, #29
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	e690      	b.n	80007a0 <__aeabi_dadd+0x29c>
 8000a7e:	4643      	mov	r3, r8
 8000a80:	430b      	orrs	r3, r1
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x582>
 8000a84:	e709      	b.n	800089a <__aeabi_dadd+0x396>
 8000a86:	4643      	mov	r3, r8
 8000a88:	4642      	mov	r2, r8
 8000a8a:	08c9      	lsrs	r1, r1, #3
 8000a8c:	075b      	lsls	r3, r3, #29
 8000a8e:	4655      	mov	r5, sl
 8000a90:	430b      	orrs	r3, r1
 8000a92:	08d0      	lsrs	r0, r2, #3
 8000a94:	e666      	b.n	8000764 <__aeabi_dadd+0x260>
 8000a96:	1acc      	subs	r4, r1, r3
 8000a98:	42a1      	cmp	r1, r4
 8000a9a:	4189      	sbcs	r1, r1
 8000a9c:	1a3f      	subs	r7, r7, r0
 8000a9e:	4249      	negs	r1, r1
 8000aa0:	4655      	mov	r5, sl
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	1a7f      	subs	r7, r7, r1
 8000aa6:	e57e      	b.n	80005a6 <__aeabi_dadd+0xa2>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	1a5c      	subs	r4, r3, r1
 8000aac:	1a87      	subs	r7, r0, r2
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	4192      	sbcs	r2, r2
 8000ab2:	4252      	negs	r2, r2
 8000ab4:	1abf      	subs	r7, r7, r2
 8000ab6:	023a      	lsls	r2, r7, #8
 8000ab8:	d53d      	bpl.n	8000b36 <__aeabi_dadd+0x632>
 8000aba:	1acc      	subs	r4, r1, r3
 8000abc:	42a1      	cmp	r1, r4
 8000abe:	4189      	sbcs	r1, r1
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	4249      	negs	r1, r1
 8000ac4:	1a1f      	subs	r7, r3, r0
 8000ac6:	4655      	mov	r5, sl
 8000ac8:	1a7f      	subs	r7, r7, r1
 8000aca:	e595      	b.n	80005f8 <__aeabi_dadd+0xf4>
 8000acc:	077b      	lsls	r3, r7, #29
 8000ace:	08c9      	lsrs	r1, r1, #3
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	08f8      	lsrs	r0, r7, #3
 8000ad4:	e643      	b.n	800075e <__aeabi_dadd+0x25a>
 8000ad6:	4644      	mov	r4, r8
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	430c      	orrs	r4, r1
 8000adc:	d130      	bne.n	8000b40 <__aeabi_dadd+0x63c>
 8000ade:	0742      	lsls	r2, r0, #29
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	08c0      	lsrs	r0, r0, #3
 8000ae4:	e65c      	b.n	80007a0 <__aeabi_dadd+0x29c>
 8000ae6:	077b      	lsls	r3, r7, #29
 8000ae8:	08c9      	lsrs	r1, r1, #3
 8000aea:	430b      	orrs	r3, r1
 8000aec:	08f8      	lsrs	r0, r7, #3
 8000aee:	e639      	b.n	8000764 <__aeabi_dadd+0x260>
 8000af0:	185c      	adds	r4, r3, r1
 8000af2:	429c      	cmp	r4, r3
 8000af4:	419b      	sbcs	r3, r3
 8000af6:	4440      	add	r0, r8
 8000af8:	425b      	negs	r3, r3
 8000afa:	18c7      	adds	r7, r0, r3
 8000afc:	023b      	lsls	r3, r7, #8
 8000afe:	d400      	bmi.n	8000b02 <__aeabi_dadd+0x5fe>
 8000b00:	e625      	b.n	800074e <__aeabi_dadd+0x24a>
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <__aeabi_dadd+0x674>)
 8000b04:	2601      	movs	r6, #1
 8000b06:	401f      	ands	r7, r3
 8000b08:	e621      	b.n	800074e <__aeabi_dadd+0x24a>
 8000b0a:	0004      	movs	r4, r0
 8000b0c:	3a20      	subs	r2, #32
 8000b0e:	40d4      	lsrs	r4, r2
 8000b10:	4662      	mov	r2, ip
 8000b12:	2a20      	cmp	r2, #32
 8000b14:	d004      	beq.n	8000b20 <__aeabi_dadd+0x61c>
 8000b16:	2240      	movs	r2, #64	; 0x40
 8000b18:	4666      	mov	r6, ip
 8000b1a:	1b92      	subs	r2, r2, r6
 8000b1c:	4090      	lsls	r0, r2
 8000b1e:	4303      	orrs	r3, r0
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	4193      	sbcs	r3, r2
 8000b24:	431c      	orrs	r4, r3
 8000b26:	e67e      	b.n	8000826 <__aeabi_dadd+0x322>
 8000b28:	185c      	adds	r4, r3, r1
 8000b2a:	428c      	cmp	r4, r1
 8000b2c:	4189      	sbcs	r1, r1
 8000b2e:	4440      	add	r0, r8
 8000b30:	4249      	negs	r1, r1
 8000b32:	1847      	adds	r7, r0, r1
 8000b34:	e6dd      	b.n	80008f2 <__aeabi_dadd+0x3ee>
 8000b36:	0023      	movs	r3, r4
 8000b38:	433b      	orrs	r3, r7
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x63a>
 8000b3c:	e6ad      	b.n	800089a <__aeabi_dadd+0x396>
 8000b3e:	e606      	b.n	800074e <__aeabi_dadd+0x24a>
 8000b40:	0744      	lsls	r4, r0, #29
 8000b42:	4323      	orrs	r3, r4
 8000b44:	2480      	movs	r4, #128	; 0x80
 8000b46:	08c0      	lsrs	r0, r0, #3
 8000b48:	0324      	lsls	r4, r4, #12
 8000b4a:	4220      	tst	r0, r4
 8000b4c:	d008      	beq.n	8000b60 <__aeabi_dadd+0x65c>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	08d6      	lsrs	r6, r2, #3
 8000b52:	4226      	tst	r6, r4
 8000b54:	d104      	bne.n	8000b60 <__aeabi_dadd+0x65c>
 8000b56:	4655      	mov	r5, sl
 8000b58:	0030      	movs	r0, r6
 8000b5a:	08cb      	lsrs	r3, r1, #3
 8000b5c:	0751      	lsls	r1, r2, #29
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	0f5a      	lsrs	r2, r3, #29
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	0752      	lsls	r2, r2, #29
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	e619      	b.n	80007a0 <__aeabi_dadd+0x29c>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x670>)
 8000b70:	001f      	movs	r7, r3
 8000b72:	e55e      	b.n	8000632 <__aeabi_dadd+0x12e>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_ddiv+0x26>
 8000ba0:	e156      	b.n	8000e50 <__aeabi_ddiv+0x2d4>
 8000ba2:	4bd4      	ldr	r3, [pc, #848]	; (8000ef4 <__aeabi_ddiv+0x378>)
 8000ba4:	4298      	cmp	r0, r3
 8000ba6:	d100      	bne.n	8000baa <__aeabi_ddiv+0x2e>
 8000ba8:	e172      	b.n	8000e90 <__aeabi_ddiv+0x314>
 8000baa:	0f6b      	lsrs	r3, r5, #29
 8000bac:	00e4      	lsls	r4, r4, #3
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	4323      	orrs	r3, r4
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	4bcf      	ldr	r3, [pc, #828]	; (8000ef8 <__aeabi_ddiv+0x37c>)
 8000bba:	00ed      	lsls	r5, r5, #3
 8000bbc:	469b      	mov	fp, r3
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	4483      	add	fp, r0
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	033c      	lsls	r4, r7, #12
 8000bc8:	007b      	lsls	r3, r7, #1
 8000bca:	4650      	mov	r0, sl
 8000bcc:	0b24      	lsrs	r4, r4, #12
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	0fff      	lsrs	r7, r7, #31
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x5c>
 8000bd6:	e11f      	b.n	8000e18 <__aeabi_ddiv+0x29c>
 8000bd8:	4ac6      	ldr	r2, [pc, #792]	; (8000ef4 <__aeabi_ddiv+0x378>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_ddiv+0x64>
 8000bde:	e162      	b.n	8000ea6 <__aeabi_ddiv+0x32a>
 8000be0:	49c5      	ldr	r1, [pc, #788]	; (8000ef8 <__aeabi_ddiv+0x37c>)
 8000be2:	0f42      	lsrs	r2, r0, #29
 8000be4:	468c      	mov	ip, r1
 8000be6:	00e4      	lsls	r4, r4, #3
 8000be8:	4659      	mov	r1, fp
 8000bea:	4314      	orrs	r4, r2
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	4463      	add	r3, ip
 8000bf0:	0412      	lsls	r2, r2, #16
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	4314      	orrs	r4, r2
 8000bf6:	469b      	mov	fp, r3
 8000bf8:	00c2      	lsls	r2, r0, #3
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	0033      	movs	r3, r6
 8000bfe:	407b      	eors	r3, r7
 8000c00:	469a      	mov	sl, r3
 8000c02:	464b      	mov	r3, r9
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d827      	bhi.n	8000c58 <__aeabi_ddiv+0xdc>
 8000c08:	49bc      	ldr	r1, [pc, #752]	; (8000efc <__aeabi_ddiv+0x380>)
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	58cb      	ldr	r3, [r1, r3]
 8000c0e:	469f      	mov	pc, r3
 8000c10:	46b2      	mov	sl, r6
 8000c12:	9b00      	ldr	r3, [sp, #0]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d016      	beq.n	8000c46 <__aeabi_ddiv+0xca>
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0xa2>
 8000c1c:	e28e      	b.n	800113c <__aeabi_ddiv+0x5c0>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d000      	beq.n	8000c24 <__aeabi_ddiv+0xa8>
 8000c22:	e0d9      	b.n	8000dd8 <__aeabi_ddiv+0x25c>
 8000c24:	2300      	movs	r3, #0
 8000c26:	2400      	movs	r4, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	4652      	mov	r2, sl
 8000c2c:	051b      	lsls	r3, r3, #20
 8000c2e:	4323      	orrs	r3, r4
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	4313      	orrs	r3, r2
 8000c34:	0028      	movs	r0, r5
 8000c36:	0019      	movs	r1, r3
 8000c38:	b005      	add	sp, #20
 8000c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3c:	46bb      	mov	fp, r7
 8000c3e:	46b2      	mov	sl, r6
 8000c40:	46a9      	mov	r9, r5
 8000c42:	46a0      	mov	r8, r4
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	2400      	movs	r4, #0
 8000c48:	2500      	movs	r5, #0
 8000c4a:	4baa      	ldr	r3, [pc, #680]	; (8000ef4 <__aeabi_ddiv+0x378>)
 8000c4c:	e7ed      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000c4e:	46ba      	mov	sl, r7
 8000c50:	46a0      	mov	r8, r4
 8000c52:	0015      	movs	r5, r2
 8000c54:	9000      	str	r0, [sp, #0]
 8000c56:	e7dc      	b.n	8000c12 <__aeabi_ddiv+0x96>
 8000c58:	4544      	cmp	r4, r8
 8000c5a:	d200      	bcs.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e1c7      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xe6>
 8000c60:	e1c2      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000c62:	2301      	movs	r3, #1
 8000c64:	425b      	negs	r3, r3
 8000c66:	469c      	mov	ip, r3
 8000c68:	002e      	movs	r6, r5
 8000c6a:	4640      	mov	r0, r8
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	44e3      	add	fp, ip
 8000c70:	0223      	lsls	r3, r4, #8
 8000c72:	0e14      	lsrs	r4, r2, #24
 8000c74:	431c      	orrs	r4, r3
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	4699      	mov	r9, r3
 8000c7a:	0423      	lsls	r3, r4, #16
 8000c7c:	0c1f      	lsrs	r7, r3, #16
 8000c7e:	0212      	lsls	r2, r2, #8
 8000c80:	4649      	mov	r1, r9
 8000c82:	9200      	str	r2, [sp, #0]
 8000c84:	9701      	str	r7, [sp, #4]
 8000c86:	f7ff fae1 	bl	800024c <__aeabi_uidivmod>
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	437a      	muls	r2, r7
 8000c8e:	040b      	lsls	r3, r1, #16
 8000c90:	0c31      	lsrs	r1, r6, #16
 8000c92:	4680      	mov	r8, r0
 8000c94:	4319      	orrs	r1, r3
 8000c96:	428a      	cmp	r2, r1
 8000c98:	d907      	bls.n	8000caa <__aeabi_ddiv+0x12e>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	425b      	negs	r3, r3
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	1909      	adds	r1, r1, r4
 8000ca2:	44e0      	add	r8, ip
 8000ca4:	428c      	cmp	r4, r1
 8000ca6:	d800      	bhi.n	8000caa <__aeabi_ddiv+0x12e>
 8000ca8:	e207      	b.n	80010ba <__aeabi_ddiv+0x53e>
 8000caa:	1a88      	subs	r0, r1, r2
 8000cac:	4649      	mov	r1, r9
 8000cae:	f7ff facd 	bl	800024c <__aeabi_uidivmod>
 8000cb2:	0409      	lsls	r1, r1, #16
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	0431      	lsls	r1, r6, #16
 8000cb8:	4666      	mov	r6, ip
 8000cba:	9a01      	ldr	r2, [sp, #4]
 8000cbc:	0c09      	lsrs	r1, r1, #16
 8000cbe:	4342      	muls	r2, r0
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	4331      	orrs	r1, r6
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	d904      	bls.n	8000cd2 <__aeabi_ddiv+0x156>
 8000cc8:	1909      	adds	r1, r1, r4
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	428c      	cmp	r4, r1
 8000cce:	d800      	bhi.n	8000cd2 <__aeabi_ddiv+0x156>
 8000cd0:	e1ed      	b.n	80010ae <__aeabi_ddiv+0x532>
 8000cd2:	1a88      	subs	r0, r1, r2
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	0412      	lsls	r2, r2, #16
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	4690      	mov	r8, r2
 8000cdc:	4641      	mov	r1, r8
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	040e      	lsls	r6, r1, #16
 8000ce2:	0c1b      	lsrs	r3, r3, #16
 8000ce4:	001f      	movs	r7, r3
 8000ce6:	9302      	str	r3, [sp, #8]
 8000ce8:	9b00      	ldr	r3, [sp, #0]
 8000cea:	0c36      	lsrs	r6, r6, #16
 8000cec:	041b      	lsls	r3, r3, #16
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	4373      	muls	r3, r6
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	437e      	muls	r6, r7
 8000cf8:	9103      	str	r1, [sp, #12]
 8000cfa:	4351      	muls	r1, r2
 8000cfc:	437a      	muls	r2, r7
 8000cfe:	0c1f      	lsrs	r7, r3, #16
 8000d00:	46bc      	mov	ip, r7
 8000d02:	1876      	adds	r6, r6, r1
 8000d04:	4466      	add	r6, ip
 8000d06:	42b1      	cmp	r1, r6
 8000d08:	d903      	bls.n	8000d12 <__aeabi_ddiv+0x196>
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	468c      	mov	ip, r1
 8000d10:	4462      	add	r2, ip
 8000d12:	0c31      	lsrs	r1, r6, #16
 8000d14:	188a      	adds	r2, r1, r2
 8000d16:	0431      	lsls	r1, r6, #16
 8000d18:	041e      	lsls	r6, r3, #16
 8000d1a:	0c36      	lsrs	r6, r6, #16
 8000d1c:	198e      	adds	r6, r1, r6
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	d302      	bcc.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d22:	d112      	bne.n	8000d4a <__aeabi_ddiv+0x1ce>
 8000d24:	42b5      	cmp	r5, r6
 8000d26:	d210      	bcs.n	8000d4a <__aeabi_ddiv+0x1ce>
 8000d28:	4643      	mov	r3, r8
 8000d2a:	1e59      	subs	r1, r3, #1
 8000d2c:	9b00      	ldr	r3, [sp, #0]
 8000d2e:	469c      	mov	ip, r3
 8000d30:	4465      	add	r5, ip
 8000d32:	001f      	movs	r7, r3
 8000d34:	429d      	cmp	r5, r3
 8000d36:	419b      	sbcs	r3, r3
 8000d38:	425b      	negs	r3, r3
 8000d3a:	191b      	adds	r3, r3, r4
 8000d3c:	18c0      	adds	r0, r0, r3
 8000d3e:	4284      	cmp	r4, r0
 8000d40:	d200      	bcs.n	8000d44 <__aeabi_ddiv+0x1c8>
 8000d42:	e1a0      	b.n	8001086 <__aeabi_ddiv+0x50a>
 8000d44:	d100      	bne.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000d46:	e19b      	b.n	8001080 <__aeabi_ddiv+0x504>
 8000d48:	4688      	mov	r8, r1
 8000d4a:	1bae      	subs	r6, r5, r6
 8000d4c:	42b5      	cmp	r5, r6
 8000d4e:	41ad      	sbcs	r5, r5
 8000d50:	1a80      	subs	r0, r0, r2
 8000d52:	426d      	negs	r5, r5
 8000d54:	1b40      	subs	r0, r0, r5
 8000d56:	4284      	cmp	r4, r0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x1e0>
 8000d5a:	e1d5      	b.n	8001108 <__aeabi_ddiv+0x58c>
 8000d5c:	4649      	mov	r1, r9
 8000d5e:	f7ff fa75 	bl	800024c <__aeabi_uidivmod>
 8000d62:	9a01      	ldr	r2, [sp, #4]
 8000d64:	040b      	lsls	r3, r1, #16
 8000d66:	4342      	muls	r2, r0
 8000d68:	0c31      	lsrs	r1, r6, #16
 8000d6a:	0005      	movs	r5, r0
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	428a      	cmp	r2, r1
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x1f8>
 8000d72:	e16c      	b.n	800104e <__aeabi_ddiv+0x4d2>
 8000d74:	1a88      	subs	r0, r1, r2
 8000d76:	4649      	mov	r1, r9
 8000d78:	f7ff fa68 	bl	800024c <__aeabi_uidivmod>
 8000d7c:	9a01      	ldr	r2, [sp, #4]
 8000d7e:	0436      	lsls	r6, r6, #16
 8000d80:	4342      	muls	r2, r0
 8000d82:	0409      	lsls	r1, r1, #16
 8000d84:	0c36      	lsrs	r6, r6, #16
 8000d86:	0003      	movs	r3, r0
 8000d88:	430e      	orrs	r6, r1
 8000d8a:	42b2      	cmp	r2, r6
 8000d8c:	d900      	bls.n	8000d90 <__aeabi_ddiv+0x214>
 8000d8e:	e153      	b.n	8001038 <__aeabi_ddiv+0x4bc>
 8000d90:	9803      	ldr	r0, [sp, #12]
 8000d92:	1ab6      	subs	r6, r6, r2
 8000d94:	0002      	movs	r2, r0
 8000d96:	042d      	lsls	r5, r5, #16
 8000d98:	431d      	orrs	r5, r3
 8000d9a:	9f02      	ldr	r7, [sp, #8]
 8000d9c:	042b      	lsls	r3, r5, #16
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	435a      	muls	r2, r3
 8000da2:	437b      	muls	r3, r7
 8000da4:	469c      	mov	ip, r3
 8000da6:	0c29      	lsrs	r1, r5, #16
 8000da8:	4348      	muls	r0, r1
 8000daa:	0c13      	lsrs	r3, r2, #16
 8000dac:	4484      	add	ip, r0
 8000dae:	4463      	add	r3, ip
 8000db0:	4379      	muls	r1, r7
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d903      	bls.n	8000dbe <__aeabi_ddiv+0x242>
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0240      	lsls	r0, r0, #9
 8000dba:	4684      	mov	ip, r0
 8000dbc:	4461      	add	r1, ip
 8000dbe:	0c18      	lsrs	r0, r3, #16
 8000dc0:	0412      	lsls	r2, r2, #16
 8000dc2:	041b      	lsls	r3, r3, #16
 8000dc4:	0c12      	lsrs	r2, r2, #16
 8000dc6:	1841      	adds	r1, r0, r1
 8000dc8:	189b      	adds	r3, r3, r2
 8000dca:	428e      	cmp	r6, r1
 8000dcc:	d200      	bcs.n	8000dd0 <__aeabi_ddiv+0x254>
 8000dce:	e0ff      	b.n	8000fd0 <__aeabi_ddiv+0x454>
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x258>
 8000dd2:	e0fa      	b.n	8000fca <__aeabi_ddiv+0x44e>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	431d      	orrs	r5, r3
 8000dd8:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <__aeabi_ddiv+0x384>)
 8000dda:	445a      	add	r2, fp
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_ddiv+0x266>
 8000de0:	e0aa      	b.n	8000f38 <__aeabi_ddiv+0x3bc>
 8000de2:	076b      	lsls	r3, r5, #29
 8000de4:	d000      	beq.n	8000de8 <__aeabi_ddiv+0x26c>
 8000de6:	e13d      	b.n	8001064 <__aeabi_ddiv+0x4e8>
 8000de8:	08ed      	lsrs	r5, r5, #3
 8000dea:	4643      	mov	r3, r8
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	d506      	bpl.n	8000dfe <__aeabi_ddiv+0x282>
 8000df0:	4642      	mov	r2, r8
 8000df2:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <__aeabi_ddiv+0x388>)
 8000df4:	401a      	ands	r2, r3
 8000df6:	4690      	mov	r8, r2
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	00d2      	lsls	r2, r2, #3
 8000dfc:	445a      	add	r2, fp
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <__aeabi_ddiv+0x38c>)
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dd00      	ble.n	8000e06 <__aeabi_ddiv+0x28a>
 8000e04:	e71f      	b.n	8000c46 <__aeabi_ddiv+0xca>
 8000e06:	4643      	mov	r3, r8
 8000e08:	075b      	lsls	r3, r3, #29
 8000e0a:	431d      	orrs	r5, r3
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	0552      	lsls	r2, r2, #21
 8000e10:	025c      	lsls	r4, r3, #9
 8000e12:	0b24      	lsrs	r4, r4, #12
 8000e14:	0d53      	lsrs	r3, r2, #21
 8000e16:	e708      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000e18:	4652      	mov	r2, sl
 8000e1a:	4322      	orrs	r2, r4
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x2a4>
 8000e1e:	e07b      	b.n	8000f18 <__aeabi_ddiv+0x39c>
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x2aa>
 8000e24:	e0fa      	b.n	800101c <__aeabi_ddiv+0x4a0>
 8000e26:	0020      	movs	r0, r4
 8000e28:	f001 fa22 	bl	8002270 <__clzsi2>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	3a0b      	subs	r2, #11
 8000e30:	231d      	movs	r3, #29
 8000e32:	0001      	movs	r1, r0
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	4652      	mov	r2, sl
 8000e38:	3908      	subs	r1, #8
 8000e3a:	40da      	lsrs	r2, r3
 8000e3c:	408c      	lsls	r4, r1
 8000e3e:	4314      	orrs	r4, r2
 8000e40:	4652      	mov	r2, sl
 8000e42:	408a      	lsls	r2, r1
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <__aeabi_ddiv+0x390>)
 8000e46:	4458      	add	r0, fp
 8000e48:	469b      	mov	fp, r3
 8000e4a:	4483      	add	fp, r0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e6d5      	b.n	8000bfc <__aeabi_ddiv+0x80>
 8000e50:	464b      	mov	r3, r9
 8000e52:	4323      	orrs	r3, r4
 8000e54:	4698      	mov	r8, r3
 8000e56:	d044      	beq.n	8000ee2 <__aeabi_ddiv+0x366>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_ddiv+0x2e2>
 8000e5c:	e0ce      	b.n	8000ffc <__aeabi_ddiv+0x480>
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fa06 	bl	8002270 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	0002      	movs	r2, r0
 8000e68:	390b      	subs	r1, #11
 8000e6a:	231d      	movs	r3, #29
 8000e6c:	1a5b      	subs	r3, r3, r1
 8000e6e:	4649      	mov	r1, r9
 8000e70:	0010      	movs	r0, r2
 8000e72:	40d9      	lsrs	r1, r3
 8000e74:	3808      	subs	r0, #8
 8000e76:	4084      	lsls	r4, r0
 8000e78:	000b      	movs	r3, r1
 8000e7a:	464d      	mov	r5, r9
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	4698      	mov	r8, r3
 8000e80:	4085      	lsls	r5, r0
 8000e82:	4823      	ldr	r0, [pc, #140]	; (8000f10 <__aeabi_ddiv+0x394>)
 8000e84:	1a83      	subs	r3, r0, r2
 8000e86:	469b      	mov	fp, r3
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4699      	mov	r9, r3
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	e69a      	b.n	8000bc6 <__aeabi_ddiv+0x4a>
 8000e90:	464b      	mov	r3, r9
 8000e92:	4323      	orrs	r3, r4
 8000e94:	4698      	mov	r8, r3
 8000e96:	d11d      	bne.n	8000ed4 <__aeabi_ddiv+0x358>
 8000e98:	2308      	movs	r3, #8
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	3b06      	subs	r3, #6
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	4683      	mov	fp, r0
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	e68f      	b.n	8000bc6 <__aeabi_ddiv+0x4a>
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	4322      	orrs	r2, r4
 8000eaa:	d109      	bne.n	8000ec0 <__aeabi_ddiv+0x344>
 8000eac:	2302      	movs	r3, #2
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <__aeabi_ddiv+0x398>)
 8000eb4:	4689      	mov	r9, r1
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	2400      	movs	r4, #0
 8000eba:	2002      	movs	r0, #2
 8000ebc:	44e3      	add	fp, ip
 8000ebe:	e69d      	b.n	8000bfc <__aeabi_ddiv+0x80>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <__aeabi_ddiv+0x398>)
 8000ec8:	4691      	mov	r9, r2
 8000eca:	469c      	mov	ip, r3
 8000ecc:	4652      	mov	r2, sl
 8000ece:	2003      	movs	r0, #3
 8000ed0:	44e3      	add	fp, ip
 8000ed2:	e693      	b.n	8000bfc <__aeabi_ddiv+0x80>
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	4699      	mov	r9, r3
 8000ed8:	3b09      	subs	r3, #9
 8000eda:	46a0      	mov	r8, r4
 8000edc:	4683      	mov	fp, r0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	e671      	b.n	8000bc6 <__aeabi_ddiv+0x4a>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	469b      	mov	fp, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	2500      	movs	r5, #0
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	e669      	b.n	8000bc6 <__aeabi_ddiv+0x4a>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	000007ff 	.word	0x000007ff
 8000ef8:	fffffc01 	.word	0xfffffc01
 8000efc:	08014e98 	.word	0x08014e98
 8000f00:	000003ff 	.word	0x000003ff
 8000f04:	feffffff 	.word	0xfeffffff
 8000f08:	000007fe 	.word	0x000007fe
 8000f0c:	000003f3 	.word	0x000003f3
 8000f10:	fffffc0d 	.word	0xfffffc0d
 8000f14:	fffff801 	.word	0xfffff801
 8000f18:	4649      	mov	r1, r9
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4319      	orrs	r1, r3
 8000f1e:	4689      	mov	r9, r1
 8000f20:	2400      	movs	r4, #0
 8000f22:	2001      	movs	r0, #1
 8000f24:	e66a      	b.n	8000bfc <__aeabi_ddiv+0x80>
 8000f26:	2300      	movs	r3, #0
 8000f28:	2480      	movs	r4, #128	; 0x80
 8000f2a:	469a      	mov	sl, r3
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	4b8a      	ldr	r3, [pc, #552]	; (8001158 <__aeabi_ddiv+0x5dc>)
 8000f30:	0324      	lsls	r4, r4, #12
 8000f32:	e67a      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f34:	2501      	movs	r5, #1
 8000f36:	426d      	negs	r5, r5
 8000f38:	2301      	movs	r3, #1
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	2b38      	cmp	r3, #56	; 0x38
 8000f3e:	dd00      	ble.n	8000f42 <__aeabi_ddiv+0x3c6>
 8000f40:	e670      	b.n	8000c24 <__aeabi_ddiv+0xa8>
 8000f42:	2b1f      	cmp	r3, #31
 8000f44:	dc00      	bgt.n	8000f48 <__aeabi_ddiv+0x3cc>
 8000f46:	e0bf      	b.n	80010c8 <__aeabi_ddiv+0x54c>
 8000f48:	211f      	movs	r1, #31
 8000f4a:	4249      	negs	r1, r1
 8000f4c:	1a8a      	subs	r2, r1, r2
 8000f4e:	4641      	mov	r1, r8
 8000f50:	40d1      	lsrs	r1, r2
 8000f52:	000a      	movs	r2, r1
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d004      	beq.n	8000f62 <__aeabi_ddiv+0x3e6>
 8000f58:	4641      	mov	r1, r8
 8000f5a:	4b80      	ldr	r3, [pc, #512]	; (800115c <__aeabi_ddiv+0x5e0>)
 8000f5c:	445b      	add	r3, fp
 8000f5e:	4099      	lsls	r1, r3
 8000f60:	430d      	orrs	r5, r1
 8000f62:	1e6b      	subs	r3, r5, #1
 8000f64:	419d      	sbcs	r5, r3
 8000f66:	2307      	movs	r3, #7
 8000f68:	432a      	orrs	r2, r5
 8000f6a:	001d      	movs	r5, r3
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	4015      	ands	r5, r2
 8000f70:	4213      	tst	r3, r2
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x3fa>
 8000f74:	e0d4      	b.n	8001120 <__aeabi_ddiv+0x5a4>
 8000f76:	210f      	movs	r1, #15
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4011      	ands	r1, r2
 8000f7c:	2904      	cmp	r1, #4
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x406>
 8000f80:	e0cb      	b.n	800111a <__aeabi_ddiv+0x59e>
 8000f82:	1d11      	adds	r1, r2, #4
 8000f84:	4291      	cmp	r1, r2
 8000f86:	4192      	sbcs	r2, r2
 8000f88:	4252      	negs	r2, r2
 8000f8a:	189b      	adds	r3, r3, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	0219      	lsls	r1, r3, #8
 8000f90:	d400      	bmi.n	8000f94 <__aeabi_ddiv+0x418>
 8000f92:	e0c2      	b.n	800111a <__aeabi_ddiv+0x59e>
 8000f94:	2301      	movs	r3, #1
 8000f96:	2400      	movs	r4, #0
 8000f98:	2500      	movs	r5, #0
 8000f9a:	e646      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	4641      	mov	r1, r8
 8000fa0:	031b      	lsls	r3, r3, #12
 8000fa2:	4219      	tst	r1, r3
 8000fa4:	d008      	beq.n	8000fb8 <__aeabi_ddiv+0x43c>
 8000fa6:	421c      	tst	r4, r3
 8000fa8:	d106      	bne.n	8000fb8 <__aeabi_ddiv+0x43c>
 8000faa:	431c      	orrs	r4, r3
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	46ba      	mov	sl, r7
 8000fb0:	0015      	movs	r5, r2
 8000fb2:	4b69      	ldr	r3, [pc, #420]	; (8001158 <__aeabi_ddiv+0x5dc>)
 8000fb4:	0b24      	lsrs	r4, r4, #12
 8000fb6:	e638      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000fb8:	2480      	movs	r4, #128	; 0x80
 8000fba:	4643      	mov	r3, r8
 8000fbc:	0324      	lsls	r4, r4, #12
 8000fbe:	431c      	orrs	r4, r3
 8000fc0:	0324      	lsls	r4, r4, #12
 8000fc2:	46b2      	mov	sl, r6
 8000fc4:	4b64      	ldr	r3, [pc, #400]	; (8001158 <__aeabi_ddiv+0x5dc>)
 8000fc6:	0b24      	lsrs	r4, r4, #12
 8000fc8:	e62f      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x454>
 8000fce:	e703      	b.n	8000dd8 <__aeabi_ddiv+0x25c>
 8000fd0:	19a6      	adds	r6, r4, r6
 8000fd2:	1e68      	subs	r0, r5, #1
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d200      	bcs.n	8000fda <__aeabi_ddiv+0x45e>
 8000fd8:	e08d      	b.n	80010f6 <__aeabi_ddiv+0x57a>
 8000fda:	428e      	cmp	r6, r1
 8000fdc:	d200      	bcs.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e0a3      	b.n	8001128 <__aeabi_ddiv+0x5ac>
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x468>
 8000fe2:	e0b3      	b.n	800114c <__aeabi_ddiv+0x5d0>
 8000fe4:	0005      	movs	r5, r0
 8000fe6:	e6f5      	b.n	8000dd4 <__aeabi_ddiv+0x258>
 8000fe8:	42aa      	cmp	r2, r5
 8000fea:	d900      	bls.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e639      	b.n	8000c62 <__aeabi_ddiv+0xe6>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	07de      	lsls	r6, r3, #31
 8000ff2:	0858      	lsrs	r0, r3, #1
 8000ff4:	086b      	lsrs	r3, r5, #1
 8000ff6:	431e      	orrs	r6, r3
 8000ff8:	07ed      	lsls	r5, r5, #31
 8000ffa:	e639      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 8000ffc:	4648      	mov	r0, r9
 8000ffe:	f001 f937 	bl	8002270 <__clzsi2>
 8001002:	0001      	movs	r1, r0
 8001004:	0002      	movs	r2, r0
 8001006:	3115      	adds	r1, #21
 8001008:	3220      	adds	r2, #32
 800100a:	291c      	cmp	r1, #28
 800100c:	dc00      	bgt.n	8001010 <__aeabi_ddiv+0x494>
 800100e:	e72c      	b.n	8000e6a <__aeabi_ddiv+0x2ee>
 8001010:	464b      	mov	r3, r9
 8001012:	3808      	subs	r0, #8
 8001014:	4083      	lsls	r3, r0
 8001016:	2500      	movs	r5, #0
 8001018:	4698      	mov	r8, r3
 800101a:	e732      	b.n	8000e82 <__aeabi_ddiv+0x306>
 800101c:	f001 f928 	bl	8002270 <__clzsi2>
 8001020:	0003      	movs	r3, r0
 8001022:	001a      	movs	r2, r3
 8001024:	3215      	adds	r2, #21
 8001026:	3020      	adds	r0, #32
 8001028:	2a1c      	cmp	r2, #28
 800102a:	dc00      	bgt.n	800102e <__aeabi_ddiv+0x4b2>
 800102c:	e700      	b.n	8000e30 <__aeabi_ddiv+0x2b4>
 800102e:	4654      	mov	r4, sl
 8001030:	3b08      	subs	r3, #8
 8001032:	2200      	movs	r2, #0
 8001034:	409c      	lsls	r4, r3
 8001036:	e705      	b.n	8000e44 <__aeabi_ddiv+0x2c8>
 8001038:	1936      	adds	r6, r6, r4
 800103a:	3b01      	subs	r3, #1
 800103c:	42b4      	cmp	r4, r6
 800103e:	d900      	bls.n	8001042 <__aeabi_ddiv+0x4c6>
 8001040:	e6a6      	b.n	8000d90 <__aeabi_ddiv+0x214>
 8001042:	42b2      	cmp	r2, r6
 8001044:	d800      	bhi.n	8001048 <__aeabi_ddiv+0x4cc>
 8001046:	e6a3      	b.n	8000d90 <__aeabi_ddiv+0x214>
 8001048:	1e83      	subs	r3, r0, #2
 800104a:	1936      	adds	r6, r6, r4
 800104c:	e6a0      	b.n	8000d90 <__aeabi_ddiv+0x214>
 800104e:	1909      	adds	r1, r1, r4
 8001050:	3d01      	subs	r5, #1
 8001052:	428c      	cmp	r4, r1
 8001054:	d900      	bls.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e68d      	b.n	8000d74 <__aeabi_ddiv+0x1f8>
 8001058:	428a      	cmp	r2, r1
 800105a:	d800      	bhi.n	800105e <__aeabi_ddiv+0x4e2>
 800105c:	e68a      	b.n	8000d74 <__aeabi_ddiv+0x1f8>
 800105e:	1e85      	subs	r5, r0, #2
 8001060:	1909      	adds	r1, r1, r4
 8001062:	e687      	b.n	8000d74 <__aeabi_ddiv+0x1f8>
 8001064:	230f      	movs	r3, #15
 8001066:	402b      	ands	r3, r5
 8001068:	2b04      	cmp	r3, #4
 800106a:	d100      	bne.n	800106e <__aeabi_ddiv+0x4f2>
 800106c:	e6bc      	b.n	8000de8 <__aeabi_ddiv+0x26c>
 800106e:	2305      	movs	r3, #5
 8001070:	425b      	negs	r3, r3
 8001072:	42ab      	cmp	r3, r5
 8001074:	419b      	sbcs	r3, r3
 8001076:	3504      	adds	r5, #4
 8001078:	425b      	negs	r3, r3
 800107a:	08ed      	lsrs	r5, r5, #3
 800107c:	4498      	add	r8, r3
 800107e:	e6b4      	b.n	8000dea <__aeabi_ddiv+0x26e>
 8001080:	42af      	cmp	r7, r5
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x50a>
 8001084:	e660      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8001086:	4282      	cmp	r2, r0
 8001088:	d804      	bhi.n	8001094 <__aeabi_ddiv+0x518>
 800108a:	d000      	beq.n	800108e <__aeabi_ddiv+0x512>
 800108c:	e65c      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 800108e:	42ae      	cmp	r6, r5
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x518>
 8001092:	e659      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8001094:	2302      	movs	r3, #2
 8001096:	425b      	negs	r3, r3
 8001098:	469c      	mov	ip, r3
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	44e0      	add	r8, ip
 800109e:	469c      	mov	ip, r3
 80010a0:	4465      	add	r5, ip
 80010a2:	429d      	cmp	r5, r3
 80010a4:	419b      	sbcs	r3, r3
 80010a6:	425b      	negs	r3, r3
 80010a8:	191b      	adds	r3, r3, r4
 80010aa:	18c0      	adds	r0, r0, r3
 80010ac:	e64d      	b.n	8000d4a <__aeabi_ddiv+0x1ce>
 80010ae:	428a      	cmp	r2, r1
 80010b0:	d800      	bhi.n	80010b4 <__aeabi_ddiv+0x538>
 80010b2:	e60e      	b.n	8000cd2 <__aeabi_ddiv+0x156>
 80010b4:	1e83      	subs	r3, r0, #2
 80010b6:	1909      	adds	r1, r1, r4
 80010b8:	e60b      	b.n	8000cd2 <__aeabi_ddiv+0x156>
 80010ba:	428a      	cmp	r2, r1
 80010bc:	d800      	bhi.n	80010c0 <__aeabi_ddiv+0x544>
 80010be:	e5f4      	b.n	8000caa <__aeabi_ddiv+0x12e>
 80010c0:	1e83      	subs	r3, r0, #2
 80010c2:	4698      	mov	r8, r3
 80010c4:	1909      	adds	r1, r1, r4
 80010c6:	e5f0      	b.n	8000caa <__aeabi_ddiv+0x12e>
 80010c8:	4925      	ldr	r1, [pc, #148]	; (8001160 <__aeabi_ddiv+0x5e4>)
 80010ca:	0028      	movs	r0, r5
 80010cc:	4459      	add	r1, fp
 80010ce:	408d      	lsls	r5, r1
 80010d0:	4642      	mov	r2, r8
 80010d2:	408a      	lsls	r2, r1
 80010d4:	1e69      	subs	r1, r5, #1
 80010d6:	418d      	sbcs	r5, r1
 80010d8:	4641      	mov	r1, r8
 80010da:	40d8      	lsrs	r0, r3
 80010dc:	40d9      	lsrs	r1, r3
 80010de:	4302      	orrs	r2, r0
 80010e0:	432a      	orrs	r2, r5
 80010e2:	000b      	movs	r3, r1
 80010e4:	0751      	lsls	r1, r2, #29
 80010e6:	d100      	bne.n	80010ea <__aeabi_ddiv+0x56e>
 80010e8:	e751      	b.n	8000f8e <__aeabi_ddiv+0x412>
 80010ea:	210f      	movs	r1, #15
 80010ec:	4011      	ands	r1, r2
 80010ee:	2904      	cmp	r1, #4
 80010f0:	d000      	beq.n	80010f4 <__aeabi_ddiv+0x578>
 80010f2:	e746      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f4:	e74b      	b.n	8000f8e <__aeabi_ddiv+0x412>
 80010f6:	0005      	movs	r5, r0
 80010f8:	428e      	cmp	r6, r1
 80010fa:	d000      	beq.n	80010fe <__aeabi_ddiv+0x582>
 80010fc:	e66a      	b.n	8000dd4 <__aeabi_ddiv+0x258>
 80010fe:	9a00      	ldr	r2, [sp, #0]
 8001100:	4293      	cmp	r3, r2
 8001102:	d000      	beq.n	8001106 <__aeabi_ddiv+0x58a>
 8001104:	e666      	b.n	8000dd4 <__aeabi_ddiv+0x258>
 8001106:	e667      	b.n	8000dd8 <__aeabi_ddiv+0x25c>
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <__aeabi_ddiv+0x5e8>)
 800110a:	445a      	add	r2, fp
 800110c:	2a00      	cmp	r2, #0
 800110e:	dc00      	bgt.n	8001112 <__aeabi_ddiv+0x596>
 8001110:	e710      	b.n	8000f34 <__aeabi_ddiv+0x3b8>
 8001112:	2301      	movs	r3, #1
 8001114:	2500      	movs	r5, #0
 8001116:	4498      	add	r8, r3
 8001118:	e667      	b.n	8000dea <__aeabi_ddiv+0x26e>
 800111a:	075d      	lsls	r5, r3, #29
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	0b1c      	lsrs	r4, r3, #12
 8001120:	08d2      	lsrs	r2, r2, #3
 8001122:	2300      	movs	r3, #0
 8001124:	4315      	orrs	r5, r2
 8001126:	e580      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8001128:	9800      	ldr	r0, [sp, #0]
 800112a:	3d02      	subs	r5, #2
 800112c:	0042      	lsls	r2, r0, #1
 800112e:	4282      	cmp	r2, r0
 8001130:	41bf      	sbcs	r7, r7
 8001132:	427f      	negs	r7, r7
 8001134:	193c      	adds	r4, r7, r4
 8001136:	1936      	adds	r6, r6, r4
 8001138:	9200      	str	r2, [sp, #0]
 800113a:	e7dd      	b.n	80010f8 <__aeabi_ddiv+0x57c>
 800113c:	2480      	movs	r4, #128	; 0x80
 800113e:	4643      	mov	r3, r8
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	431c      	orrs	r4, r3
 8001144:	0324      	lsls	r4, r4, #12
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__aeabi_ddiv+0x5dc>)
 8001148:	0b24      	lsrs	r4, r4, #12
 800114a:	e56e      	b.n	8000c2a <__aeabi_ddiv+0xae>
 800114c:	9a00      	ldr	r2, [sp, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3ea      	bcc.n	8001128 <__aeabi_ddiv+0x5ac>
 8001152:	0005      	movs	r5, r0
 8001154:	e7d3      	b.n	80010fe <__aeabi_ddiv+0x582>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	000007ff 	.word	0x000007ff
 800115c:	0000043e 	.word	0x0000043e
 8001160:	0000041e 	.word	0x0000041e
 8001164:	000003ff 	.word	0x000003ff

08001168 <__eqdf2>:
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	464e      	mov	r6, r9
 800116c:	4645      	mov	r5, r8
 800116e:	46de      	mov	lr, fp
 8001170:	4657      	mov	r7, sl
 8001172:	4690      	mov	r8, r2
 8001174:	b5e0      	push	{r5, r6, r7, lr}
 8001176:	0017      	movs	r7, r2
 8001178:	031a      	lsls	r2, r3, #12
 800117a:	0b12      	lsrs	r2, r2, #12
 800117c:	0005      	movs	r5, r0
 800117e:	4684      	mov	ip, r0
 8001180:	4819      	ldr	r0, [pc, #100]	; (80011e8 <__eqdf2+0x80>)
 8001182:	030e      	lsls	r6, r1, #12
 8001184:	004c      	lsls	r4, r1, #1
 8001186:	4691      	mov	r9, r2
 8001188:	005a      	lsls	r2, r3, #1
 800118a:	0fdb      	lsrs	r3, r3, #31
 800118c:	469b      	mov	fp, r3
 800118e:	0b36      	lsrs	r6, r6, #12
 8001190:	0d64      	lsrs	r4, r4, #21
 8001192:	0fc9      	lsrs	r1, r1, #31
 8001194:	0d52      	lsrs	r2, r2, #21
 8001196:	4284      	cmp	r4, r0
 8001198:	d019      	beq.n	80011ce <__eqdf2+0x66>
 800119a:	4282      	cmp	r2, r0
 800119c:	d010      	beq.n	80011c0 <__eqdf2+0x58>
 800119e:	2001      	movs	r0, #1
 80011a0:	4294      	cmp	r4, r2
 80011a2:	d10e      	bne.n	80011c2 <__eqdf2+0x5a>
 80011a4:	454e      	cmp	r6, r9
 80011a6:	d10c      	bne.n	80011c2 <__eqdf2+0x5a>
 80011a8:	2001      	movs	r0, #1
 80011aa:	45c4      	cmp	ip, r8
 80011ac:	d109      	bne.n	80011c2 <__eqdf2+0x5a>
 80011ae:	4559      	cmp	r1, fp
 80011b0:	d017      	beq.n	80011e2 <__eqdf2+0x7a>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d105      	bne.n	80011c2 <__eqdf2+0x5a>
 80011b6:	0030      	movs	r0, r6
 80011b8:	4328      	orrs	r0, r5
 80011ba:	1e43      	subs	r3, r0, #1
 80011bc:	4198      	sbcs	r0, r3
 80011be:	e000      	b.n	80011c2 <__eqdf2+0x5a>
 80011c0:	2001      	movs	r0, #1
 80011c2:	bcf0      	pop	{r4, r5, r6, r7}
 80011c4:	46bb      	mov	fp, r7
 80011c6:	46b2      	mov	sl, r6
 80011c8:	46a9      	mov	r9, r5
 80011ca:	46a0      	mov	r8, r4
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ce:	0033      	movs	r3, r6
 80011d0:	2001      	movs	r0, #1
 80011d2:	432b      	orrs	r3, r5
 80011d4:	d1f5      	bne.n	80011c2 <__eqdf2+0x5a>
 80011d6:	42a2      	cmp	r2, r4
 80011d8:	d1f3      	bne.n	80011c2 <__eqdf2+0x5a>
 80011da:	464b      	mov	r3, r9
 80011dc:	433b      	orrs	r3, r7
 80011de:	d1f0      	bne.n	80011c2 <__eqdf2+0x5a>
 80011e0:	e7e2      	b.n	80011a8 <__eqdf2+0x40>
 80011e2:	2000      	movs	r0, #0
 80011e4:	e7ed      	b.n	80011c2 <__eqdf2+0x5a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__gedf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	4647      	mov	r7, r8
 80011f0:	46ce      	mov	lr, r9
 80011f2:	0004      	movs	r4, r0
 80011f4:	0018      	movs	r0, r3
 80011f6:	0016      	movs	r6, r2
 80011f8:	031b      	lsls	r3, r3, #12
 80011fa:	0b1b      	lsrs	r3, r3, #12
 80011fc:	4d2d      	ldr	r5, [pc, #180]	; (80012b4 <__gedf2+0xc8>)
 80011fe:	004a      	lsls	r2, r1, #1
 8001200:	4699      	mov	r9, r3
 8001202:	b580      	push	{r7, lr}
 8001204:	0043      	lsls	r3, r0, #1
 8001206:	030f      	lsls	r7, r1, #12
 8001208:	46a4      	mov	ip, r4
 800120a:	46b0      	mov	r8, r6
 800120c:	0b3f      	lsrs	r7, r7, #12
 800120e:	0d52      	lsrs	r2, r2, #21
 8001210:	0fc9      	lsrs	r1, r1, #31
 8001212:	0d5b      	lsrs	r3, r3, #21
 8001214:	0fc0      	lsrs	r0, r0, #31
 8001216:	42aa      	cmp	r2, r5
 8001218:	d021      	beq.n	800125e <__gedf2+0x72>
 800121a:	42ab      	cmp	r3, r5
 800121c:	d013      	beq.n	8001246 <__gedf2+0x5a>
 800121e:	2a00      	cmp	r2, #0
 8001220:	d122      	bne.n	8001268 <__gedf2+0x7c>
 8001222:	433c      	orrs	r4, r7
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <__gedf2+0x42>
 8001228:	464d      	mov	r5, r9
 800122a:	432e      	orrs	r6, r5
 800122c:	d022      	beq.n	8001274 <__gedf2+0x88>
 800122e:	2c00      	cmp	r4, #0
 8001230:	d010      	beq.n	8001254 <__gedf2+0x68>
 8001232:	4281      	cmp	r1, r0
 8001234:	d022      	beq.n	800127c <__gedf2+0x90>
 8001236:	2002      	movs	r0, #2
 8001238:	3901      	subs	r1, #1
 800123a:	4008      	ands	r0, r1
 800123c:	3801      	subs	r0, #1
 800123e:	bcc0      	pop	{r6, r7}
 8001240:	46b9      	mov	r9, r7
 8001242:	46b0      	mov	r8, r6
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001246:	464d      	mov	r5, r9
 8001248:	432e      	orrs	r6, r5
 800124a:	d129      	bne.n	80012a0 <__gedf2+0xb4>
 800124c:	2a00      	cmp	r2, #0
 800124e:	d1f0      	bne.n	8001232 <__gedf2+0x46>
 8001250:	433c      	orrs	r4, r7
 8001252:	d1ee      	bne.n	8001232 <__gedf2+0x46>
 8001254:	2800      	cmp	r0, #0
 8001256:	d1f2      	bne.n	800123e <__gedf2+0x52>
 8001258:	2001      	movs	r0, #1
 800125a:	4240      	negs	r0, r0
 800125c:	e7ef      	b.n	800123e <__gedf2+0x52>
 800125e:	003d      	movs	r5, r7
 8001260:	4325      	orrs	r5, r4
 8001262:	d11d      	bne.n	80012a0 <__gedf2+0xb4>
 8001264:	4293      	cmp	r3, r2
 8001266:	d0ee      	beq.n	8001246 <__gedf2+0x5a>
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e2      	bne.n	8001232 <__gedf2+0x46>
 800126c:	464c      	mov	r4, r9
 800126e:	4326      	orrs	r6, r4
 8001270:	d1df      	bne.n	8001232 <__gedf2+0x46>
 8001272:	e7e0      	b.n	8001236 <__gedf2+0x4a>
 8001274:	2000      	movs	r0, #0
 8001276:	2c00      	cmp	r4, #0
 8001278:	d0e1      	beq.n	800123e <__gedf2+0x52>
 800127a:	e7dc      	b.n	8001236 <__gedf2+0x4a>
 800127c:	429a      	cmp	r2, r3
 800127e:	dc0a      	bgt.n	8001296 <__gedf2+0xaa>
 8001280:	dbe8      	blt.n	8001254 <__gedf2+0x68>
 8001282:	454f      	cmp	r7, r9
 8001284:	d8d7      	bhi.n	8001236 <__gedf2+0x4a>
 8001286:	d00e      	beq.n	80012a6 <__gedf2+0xba>
 8001288:	2000      	movs	r0, #0
 800128a:	454f      	cmp	r7, r9
 800128c:	d2d7      	bcs.n	800123e <__gedf2+0x52>
 800128e:	2900      	cmp	r1, #0
 8001290:	d0e2      	beq.n	8001258 <__gedf2+0x6c>
 8001292:	0008      	movs	r0, r1
 8001294:	e7d3      	b.n	800123e <__gedf2+0x52>
 8001296:	4243      	negs	r3, r0
 8001298:	4158      	adcs	r0, r3
 800129a:	0040      	lsls	r0, r0, #1
 800129c:	3801      	subs	r0, #1
 800129e:	e7ce      	b.n	800123e <__gedf2+0x52>
 80012a0:	2002      	movs	r0, #2
 80012a2:	4240      	negs	r0, r0
 80012a4:	e7cb      	b.n	800123e <__gedf2+0x52>
 80012a6:	45c4      	cmp	ip, r8
 80012a8:	d8c5      	bhi.n	8001236 <__gedf2+0x4a>
 80012aa:	2000      	movs	r0, #0
 80012ac:	45c4      	cmp	ip, r8
 80012ae:	d2c6      	bcs.n	800123e <__gedf2+0x52>
 80012b0:	e7ed      	b.n	800128e <__gedf2+0xa2>
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	000007ff 	.word	0x000007ff

080012b8 <__ledf2>:
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	4647      	mov	r7, r8
 80012bc:	46ce      	mov	lr, r9
 80012be:	0004      	movs	r4, r0
 80012c0:	0018      	movs	r0, r3
 80012c2:	0016      	movs	r6, r2
 80012c4:	031b      	lsls	r3, r3, #12
 80012c6:	0b1b      	lsrs	r3, r3, #12
 80012c8:	4d2c      	ldr	r5, [pc, #176]	; (800137c <__ledf2+0xc4>)
 80012ca:	004a      	lsls	r2, r1, #1
 80012cc:	4699      	mov	r9, r3
 80012ce:	b580      	push	{r7, lr}
 80012d0:	0043      	lsls	r3, r0, #1
 80012d2:	030f      	lsls	r7, r1, #12
 80012d4:	46a4      	mov	ip, r4
 80012d6:	46b0      	mov	r8, r6
 80012d8:	0b3f      	lsrs	r7, r7, #12
 80012da:	0d52      	lsrs	r2, r2, #21
 80012dc:	0fc9      	lsrs	r1, r1, #31
 80012de:	0d5b      	lsrs	r3, r3, #21
 80012e0:	0fc0      	lsrs	r0, r0, #31
 80012e2:	42aa      	cmp	r2, r5
 80012e4:	d00d      	beq.n	8001302 <__ledf2+0x4a>
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d010      	beq.n	800130c <__ledf2+0x54>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d127      	bne.n	800133e <__ledf2+0x86>
 80012ee:	433c      	orrs	r4, r7
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x60>
 80012f4:	464d      	mov	r5, r9
 80012f6:	432e      	orrs	r6, r5
 80012f8:	d10e      	bne.n	8001318 <__ledf2+0x60>
 80012fa:	2000      	movs	r0, #0
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d015      	beq.n	800132c <__ledf2+0x74>
 8001300:	e00e      	b.n	8001320 <__ledf2+0x68>
 8001302:	003d      	movs	r5, r7
 8001304:	4325      	orrs	r5, r4
 8001306:	d110      	bne.n	800132a <__ledf2+0x72>
 8001308:	4293      	cmp	r3, r2
 800130a:	d118      	bne.n	800133e <__ledf2+0x86>
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d10b      	bne.n	800132a <__ledf2+0x72>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d102      	bne.n	800131c <__ledf2+0x64>
 8001316:	433c      	orrs	r4, r7
 8001318:	2c00      	cmp	r4, #0
 800131a:	d00b      	beq.n	8001334 <__ledf2+0x7c>
 800131c:	4281      	cmp	r1, r0
 800131e:	d014      	beq.n	800134a <__ledf2+0x92>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x74>
 800132a:	2002      	movs	r0, #2
 800132c:	bcc0      	pop	{r6, r7}
 800132e:	46b9      	mov	r9, r7
 8001330:	46b0      	mov	r8, r6
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	2800      	cmp	r0, #0
 8001336:	d1f9      	bne.n	800132c <__ledf2+0x74>
 8001338:	2001      	movs	r0, #1
 800133a:	4240      	negs	r0, r0
 800133c:	e7f6      	b.n	800132c <__ledf2+0x74>
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ec      	bne.n	800131c <__ledf2+0x64>
 8001342:	464c      	mov	r4, r9
 8001344:	4326      	orrs	r6, r4
 8001346:	d1e9      	bne.n	800131c <__ledf2+0x64>
 8001348:	e7ea      	b.n	8001320 <__ledf2+0x68>
 800134a:	429a      	cmp	r2, r3
 800134c:	dd04      	ble.n	8001358 <__ledf2+0xa0>
 800134e:	4243      	negs	r3, r0
 8001350:	4158      	adcs	r0, r3
 8001352:	0040      	lsls	r0, r0, #1
 8001354:	3801      	subs	r0, #1
 8001356:	e7e9      	b.n	800132c <__ledf2+0x74>
 8001358:	429a      	cmp	r2, r3
 800135a:	dbeb      	blt.n	8001334 <__ledf2+0x7c>
 800135c:	454f      	cmp	r7, r9
 800135e:	d8df      	bhi.n	8001320 <__ledf2+0x68>
 8001360:	d006      	beq.n	8001370 <__ledf2+0xb8>
 8001362:	2000      	movs	r0, #0
 8001364:	454f      	cmp	r7, r9
 8001366:	d2e1      	bcs.n	800132c <__ledf2+0x74>
 8001368:	2900      	cmp	r1, #0
 800136a:	d0e5      	beq.n	8001338 <__ledf2+0x80>
 800136c:	0008      	movs	r0, r1
 800136e:	e7dd      	b.n	800132c <__ledf2+0x74>
 8001370:	45c4      	cmp	ip, r8
 8001372:	d8d5      	bhi.n	8001320 <__ledf2+0x68>
 8001374:	2000      	movs	r0, #0
 8001376:	45c4      	cmp	ip, r8
 8001378:	d2d8      	bcs.n	800132c <__ledf2+0x74>
 800137a:	e7f5      	b.n	8001368 <__ledf2+0xb0>
 800137c:	000007ff 	.word	0x000007ff

08001380 <__aeabi_dmul>:
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	4657      	mov	r7, sl
 8001384:	464e      	mov	r6, r9
 8001386:	4645      	mov	r5, r8
 8001388:	46de      	mov	lr, fp
 800138a:	b5e0      	push	{r5, r6, r7, lr}
 800138c:	4698      	mov	r8, r3
 800138e:	030c      	lsls	r4, r1, #12
 8001390:	004b      	lsls	r3, r1, #1
 8001392:	0006      	movs	r6, r0
 8001394:	4692      	mov	sl, r2
 8001396:	b087      	sub	sp, #28
 8001398:	0b24      	lsrs	r4, r4, #12
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fcf      	lsrs	r7, r1, #31
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0x24>
 80013a2:	e15c      	b.n	800165e <__aeabi_dmul+0x2de>
 80013a4:	4ad9      	ldr	r2, [pc, #868]	; (800170c <__aeabi_dmul+0x38c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d100      	bne.n	80013ac <__aeabi_dmul+0x2c>
 80013aa:	e175      	b.n	8001698 <__aeabi_dmul+0x318>
 80013ac:	0f42      	lsrs	r2, r0, #29
 80013ae:	00e4      	lsls	r4, r4, #3
 80013b0:	4314      	orrs	r4, r2
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0412      	lsls	r2, r2, #16
 80013b6:	4314      	orrs	r4, r2
 80013b8:	4ad5      	ldr	r2, [pc, #852]	; (8001710 <__aeabi_dmul+0x390>)
 80013ba:	00c5      	lsls	r5, r0, #3
 80013bc:	4694      	mov	ip, r2
 80013be:	4463      	add	r3, ip
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	4699      	mov	r9, r3
 80013c6:	469b      	mov	fp, r3
 80013c8:	4643      	mov	r3, r8
 80013ca:	4642      	mov	r2, r8
 80013cc:	031e      	lsls	r6, r3, #12
 80013ce:	0fd2      	lsrs	r2, r2, #31
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4650      	mov	r0, sl
 80013d4:	4690      	mov	r8, r2
 80013d6:	0b36      	lsrs	r6, r6, #12
 80013d8:	0d5b      	lsrs	r3, r3, #21
 80013da:	d100      	bne.n	80013de <__aeabi_dmul+0x5e>
 80013dc:	e120      	b.n	8001620 <__aeabi_dmul+0x2a0>
 80013de:	4acb      	ldr	r2, [pc, #812]	; (800170c <__aeabi_dmul+0x38c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dmul+0x66>
 80013e4:	e162      	b.n	80016ac <__aeabi_dmul+0x32c>
 80013e6:	49ca      	ldr	r1, [pc, #808]	; (8001710 <__aeabi_dmul+0x390>)
 80013e8:	0f42      	lsrs	r2, r0, #29
 80013ea:	468c      	mov	ip, r1
 80013ec:	9900      	ldr	r1, [sp, #0]
 80013ee:	4463      	add	r3, ip
 80013f0:	00f6      	lsls	r6, r6, #3
 80013f2:	468c      	mov	ip, r1
 80013f4:	4316      	orrs	r6, r2
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	449c      	add	ip, r3
 80013fa:	0412      	lsls	r2, r2, #16
 80013fc:	4663      	mov	r3, ip
 80013fe:	4316      	orrs	r6, r2
 8001400:	00c2      	lsls	r2, r0, #3
 8001402:	2000      	movs	r0, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	9900      	ldr	r1, [sp, #0]
 8001408:	4643      	mov	r3, r8
 800140a:	3101      	adds	r1, #1
 800140c:	468c      	mov	ip, r1
 800140e:	4649      	mov	r1, r9
 8001410:	407b      	eors	r3, r7
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	290f      	cmp	r1, #15
 8001416:	d826      	bhi.n	8001466 <__aeabi_dmul+0xe6>
 8001418:	4bbe      	ldr	r3, [pc, #760]	; (8001714 <__aeabi_dmul+0x394>)
 800141a:	0089      	lsls	r1, r1, #2
 800141c:	5859      	ldr	r1, [r3, r1]
 800141e:	468f      	mov	pc, r1
 8001420:	4643      	mov	r3, r8
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	0034      	movs	r4, r6
 8001426:	0015      	movs	r5, r2
 8001428:	4683      	mov	fp, r0
 800142a:	465b      	mov	r3, fp
 800142c:	2b02      	cmp	r3, #2
 800142e:	d016      	beq.n	800145e <__aeabi_dmul+0xde>
 8001430:	2b03      	cmp	r3, #3
 8001432:	d100      	bne.n	8001436 <__aeabi_dmul+0xb6>
 8001434:	e203      	b.n	800183e <__aeabi_dmul+0x4be>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d000      	beq.n	800143c <__aeabi_dmul+0xbc>
 800143a:	e0cd      	b.n	80015d8 <__aeabi_dmul+0x258>
 800143c:	2200      	movs	r2, #0
 800143e:	2400      	movs	r4, #0
 8001440:	2500      	movs	r5, #0
 8001442:	9b01      	ldr	r3, [sp, #4]
 8001444:	0512      	lsls	r2, r2, #20
 8001446:	4322      	orrs	r2, r4
 8001448:	07db      	lsls	r3, r3, #31
 800144a:	431a      	orrs	r2, r3
 800144c:	0028      	movs	r0, r5
 800144e:	0011      	movs	r1, r2
 8001450:	b007      	add	sp, #28
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2400      	movs	r4, #0
 8001460:	2500      	movs	r5, #0
 8001462:	4aaa      	ldr	r2, [pc, #680]	; (800170c <__aeabi_dmul+0x38c>)
 8001464:	e7ed      	b.n	8001442 <__aeabi_dmul+0xc2>
 8001466:	0c28      	lsrs	r0, r5, #16
 8001468:	042d      	lsls	r5, r5, #16
 800146a:	0c2d      	lsrs	r5, r5, #16
 800146c:	002b      	movs	r3, r5
 800146e:	0c11      	lsrs	r1, r2, #16
 8001470:	0412      	lsls	r2, r2, #16
 8001472:	0c12      	lsrs	r2, r2, #16
 8001474:	4353      	muls	r3, r2
 8001476:	4698      	mov	r8, r3
 8001478:	0013      	movs	r3, r2
 800147a:	002f      	movs	r7, r5
 800147c:	4343      	muls	r3, r0
 800147e:	4699      	mov	r9, r3
 8001480:	434f      	muls	r7, r1
 8001482:	444f      	add	r7, r9
 8001484:	46bb      	mov	fp, r7
 8001486:	4647      	mov	r7, r8
 8001488:	000b      	movs	r3, r1
 800148a:	0c3f      	lsrs	r7, r7, #16
 800148c:	46ba      	mov	sl, r7
 800148e:	4343      	muls	r3, r0
 8001490:	44da      	add	sl, fp
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	45d1      	cmp	r9, sl
 8001496:	d904      	bls.n	80014a2 <__aeabi_dmul+0x122>
 8001498:	2780      	movs	r7, #128	; 0x80
 800149a:	027f      	lsls	r7, r7, #9
 800149c:	46b9      	mov	r9, r7
 800149e:	444b      	add	r3, r9
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	4653      	mov	r3, sl
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	469b      	mov	fp, r3
 80014a8:	4653      	mov	r3, sl
 80014aa:	041f      	lsls	r7, r3, #16
 80014ac:	4643      	mov	r3, r8
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	4698      	mov	r8, r3
 80014b4:	003b      	movs	r3, r7
 80014b6:	4443      	add	r3, r8
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	0c33      	lsrs	r3, r6, #16
 80014bc:	0436      	lsls	r6, r6, #16
 80014be:	0c36      	lsrs	r6, r6, #16
 80014c0:	4698      	mov	r8, r3
 80014c2:	0033      	movs	r3, r6
 80014c4:	4343      	muls	r3, r0
 80014c6:	4699      	mov	r9, r3
 80014c8:	4643      	mov	r3, r8
 80014ca:	4343      	muls	r3, r0
 80014cc:	002f      	movs	r7, r5
 80014ce:	469a      	mov	sl, r3
 80014d0:	4643      	mov	r3, r8
 80014d2:	4377      	muls	r7, r6
 80014d4:	435d      	muls	r5, r3
 80014d6:	0c38      	lsrs	r0, r7, #16
 80014d8:	444d      	add	r5, r9
 80014da:	1945      	adds	r5, r0, r5
 80014dc:	45a9      	cmp	r9, r5
 80014de:	d903      	bls.n	80014e8 <__aeabi_dmul+0x168>
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	4699      	mov	r9, r3
 80014e6:	44ca      	add	sl, r9
 80014e8:	043f      	lsls	r7, r7, #16
 80014ea:	0c28      	lsrs	r0, r5, #16
 80014ec:	0c3f      	lsrs	r7, r7, #16
 80014ee:	042d      	lsls	r5, r5, #16
 80014f0:	19ed      	adds	r5, r5, r7
 80014f2:	0c27      	lsrs	r7, r4, #16
 80014f4:	0424      	lsls	r4, r4, #16
 80014f6:	0c24      	lsrs	r4, r4, #16
 80014f8:	0003      	movs	r3, r0
 80014fa:	0020      	movs	r0, r4
 80014fc:	4350      	muls	r0, r2
 80014fe:	437a      	muls	r2, r7
 8001500:	4691      	mov	r9, r2
 8001502:	003a      	movs	r2, r7
 8001504:	4453      	add	r3, sl
 8001506:	9305      	str	r3, [sp, #20]
 8001508:	0c03      	lsrs	r3, r0, #16
 800150a:	469a      	mov	sl, r3
 800150c:	434a      	muls	r2, r1
 800150e:	4361      	muls	r1, r4
 8001510:	4449      	add	r1, r9
 8001512:	4451      	add	r1, sl
 8001514:	44ab      	add	fp, r5
 8001516:	4589      	cmp	r9, r1
 8001518:	d903      	bls.n	8001522 <__aeabi_dmul+0x1a2>
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	025b      	lsls	r3, r3, #9
 800151e:	4699      	mov	r9, r3
 8001520:	444a      	add	r2, r9
 8001522:	0400      	lsls	r0, r0, #16
 8001524:	0c0b      	lsrs	r3, r1, #16
 8001526:	0c00      	lsrs	r0, r0, #16
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	1809      	adds	r1, r1, r0
 800152c:	0020      	movs	r0, r4
 800152e:	4699      	mov	r9, r3
 8001530:	4643      	mov	r3, r8
 8001532:	4370      	muls	r0, r6
 8001534:	435c      	muls	r4, r3
 8001536:	437e      	muls	r6, r7
 8001538:	435f      	muls	r7, r3
 800153a:	0c03      	lsrs	r3, r0, #16
 800153c:	4698      	mov	r8, r3
 800153e:	19a4      	adds	r4, r4, r6
 8001540:	4444      	add	r4, r8
 8001542:	444a      	add	r2, r9
 8001544:	9703      	str	r7, [sp, #12]
 8001546:	42a6      	cmp	r6, r4
 8001548:	d904      	bls.n	8001554 <__aeabi_dmul+0x1d4>
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	4698      	mov	r8, r3
 8001550:	4447      	add	r7, r8
 8001552:	9703      	str	r7, [sp, #12]
 8001554:	0423      	lsls	r3, r4, #16
 8001556:	9e02      	ldr	r6, [sp, #8]
 8001558:	469a      	mov	sl, r3
 800155a:	9b05      	ldr	r3, [sp, #20]
 800155c:	445e      	add	r6, fp
 800155e:	4698      	mov	r8, r3
 8001560:	42ae      	cmp	r6, r5
 8001562:	41ad      	sbcs	r5, r5
 8001564:	1876      	adds	r6, r6, r1
 8001566:	428e      	cmp	r6, r1
 8001568:	4189      	sbcs	r1, r1
 800156a:	0400      	lsls	r0, r0, #16
 800156c:	0c00      	lsrs	r0, r0, #16
 800156e:	4450      	add	r0, sl
 8001570:	4440      	add	r0, r8
 8001572:	426d      	negs	r5, r5
 8001574:	1947      	adds	r7, r0, r5
 8001576:	46b8      	mov	r8, r7
 8001578:	4693      	mov	fp, r2
 800157a:	4249      	negs	r1, r1
 800157c:	4689      	mov	r9, r1
 800157e:	44c3      	add	fp, r8
 8001580:	44d9      	add	r9, fp
 8001582:	4298      	cmp	r0, r3
 8001584:	4180      	sbcs	r0, r0
 8001586:	45a8      	cmp	r8, r5
 8001588:	41ad      	sbcs	r5, r5
 800158a:	4593      	cmp	fp, r2
 800158c:	4192      	sbcs	r2, r2
 800158e:	4589      	cmp	r9, r1
 8001590:	4189      	sbcs	r1, r1
 8001592:	426d      	negs	r5, r5
 8001594:	4240      	negs	r0, r0
 8001596:	4328      	orrs	r0, r5
 8001598:	0c24      	lsrs	r4, r4, #16
 800159a:	4252      	negs	r2, r2
 800159c:	4249      	negs	r1, r1
 800159e:	430a      	orrs	r2, r1
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	1900      	adds	r0, r0, r4
 80015a4:	1880      	adds	r0, r0, r2
 80015a6:	18c7      	adds	r7, r0, r3
 80015a8:	464b      	mov	r3, r9
 80015aa:	0ddc      	lsrs	r4, r3, #23
 80015ac:	9b04      	ldr	r3, [sp, #16]
 80015ae:	0275      	lsls	r5, r6, #9
 80015b0:	431d      	orrs	r5, r3
 80015b2:	1e6a      	subs	r2, r5, #1
 80015b4:	4195      	sbcs	r5, r2
 80015b6:	464b      	mov	r3, r9
 80015b8:	0df6      	lsrs	r6, r6, #23
 80015ba:	027f      	lsls	r7, r7, #9
 80015bc:	4335      	orrs	r5, r6
 80015be:	025a      	lsls	r2, r3, #9
 80015c0:	433c      	orrs	r4, r7
 80015c2:	4315      	orrs	r5, r2
 80015c4:	01fb      	lsls	r3, r7, #7
 80015c6:	d400      	bmi.n	80015ca <__aeabi_dmul+0x24a>
 80015c8:	e11c      	b.n	8001804 <__aeabi_dmul+0x484>
 80015ca:	2101      	movs	r1, #1
 80015cc:	086a      	lsrs	r2, r5, #1
 80015ce:	400d      	ands	r5, r1
 80015d0:	4315      	orrs	r5, r2
 80015d2:	07e2      	lsls	r2, r4, #31
 80015d4:	4315      	orrs	r5, r2
 80015d6:	0864      	lsrs	r4, r4, #1
 80015d8:	494f      	ldr	r1, [pc, #316]	; (8001718 <__aeabi_dmul+0x398>)
 80015da:	4461      	add	r1, ip
 80015dc:	2900      	cmp	r1, #0
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_dmul+0x262>
 80015e0:	e0b0      	b.n	8001744 <__aeabi_dmul+0x3c4>
 80015e2:	076b      	lsls	r3, r5, #29
 80015e4:	d009      	beq.n	80015fa <__aeabi_dmul+0x27a>
 80015e6:	220f      	movs	r2, #15
 80015e8:	402a      	ands	r2, r5
 80015ea:	2a04      	cmp	r2, #4
 80015ec:	d005      	beq.n	80015fa <__aeabi_dmul+0x27a>
 80015ee:	1d2a      	adds	r2, r5, #4
 80015f0:	42aa      	cmp	r2, r5
 80015f2:	41ad      	sbcs	r5, r5
 80015f4:	426d      	negs	r5, r5
 80015f6:	1964      	adds	r4, r4, r5
 80015f8:	0015      	movs	r5, r2
 80015fa:	01e3      	lsls	r3, r4, #7
 80015fc:	d504      	bpl.n	8001608 <__aeabi_dmul+0x288>
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	4a46      	ldr	r2, [pc, #280]	; (800171c <__aeabi_dmul+0x39c>)
 8001602:	00c9      	lsls	r1, r1, #3
 8001604:	4014      	ands	r4, r2
 8001606:	4461      	add	r1, ip
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <__aeabi_dmul+0x3a0>)
 800160a:	4291      	cmp	r1, r2
 800160c:	dd00      	ble.n	8001610 <__aeabi_dmul+0x290>
 800160e:	e726      	b.n	800145e <__aeabi_dmul+0xde>
 8001610:	0762      	lsls	r2, r4, #29
 8001612:	08ed      	lsrs	r5, r5, #3
 8001614:	0264      	lsls	r4, r4, #9
 8001616:	0549      	lsls	r1, r1, #21
 8001618:	4315      	orrs	r5, r2
 800161a:	0b24      	lsrs	r4, r4, #12
 800161c:	0d4a      	lsrs	r2, r1, #21
 800161e:	e710      	b.n	8001442 <__aeabi_dmul+0xc2>
 8001620:	4652      	mov	r2, sl
 8001622:	4332      	orrs	r2, r6
 8001624:	d100      	bne.n	8001628 <__aeabi_dmul+0x2a8>
 8001626:	e07f      	b.n	8001728 <__aeabi_dmul+0x3a8>
 8001628:	2e00      	cmp	r6, #0
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0x2ae>
 800162c:	e0dc      	b.n	80017e8 <__aeabi_dmul+0x468>
 800162e:	0030      	movs	r0, r6
 8001630:	f000 fe1e 	bl	8002270 <__clzsi2>
 8001634:	0002      	movs	r2, r0
 8001636:	3a0b      	subs	r2, #11
 8001638:	231d      	movs	r3, #29
 800163a:	0001      	movs	r1, r0
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	4652      	mov	r2, sl
 8001640:	3908      	subs	r1, #8
 8001642:	40da      	lsrs	r2, r3
 8001644:	408e      	lsls	r6, r1
 8001646:	4316      	orrs	r6, r2
 8001648:	4652      	mov	r2, sl
 800164a:	408a      	lsls	r2, r1
 800164c:	9b00      	ldr	r3, [sp, #0]
 800164e:	4935      	ldr	r1, [pc, #212]	; (8001724 <__aeabi_dmul+0x3a4>)
 8001650:	1a18      	subs	r0, r3, r0
 8001652:	0003      	movs	r3, r0
 8001654:	468c      	mov	ip, r1
 8001656:	4463      	add	r3, ip
 8001658:	2000      	movs	r0, #0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	e6d3      	b.n	8001406 <__aeabi_dmul+0x86>
 800165e:	0025      	movs	r5, r4
 8001660:	4305      	orrs	r5, r0
 8001662:	d04a      	beq.n	80016fa <__aeabi_dmul+0x37a>
 8001664:	2c00      	cmp	r4, #0
 8001666:	d100      	bne.n	800166a <__aeabi_dmul+0x2ea>
 8001668:	e0b0      	b.n	80017cc <__aeabi_dmul+0x44c>
 800166a:	0020      	movs	r0, r4
 800166c:	f000 fe00 	bl	8002270 <__clzsi2>
 8001670:	0001      	movs	r1, r0
 8001672:	0002      	movs	r2, r0
 8001674:	390b      	subs	r1, #11
 8001676:	231d      	movs	r3, #29
 8001678:	0010      	movs	r0, r2
 800167a:	1a5b      	subs	r3, r3, r1
 800167c:	0031      	movs	r1, r6
 800167e:	0035      	movs	r5, r6
 8001680:	3808      	subs	r0, #8
 8001682:	4084      	lsls	r4, r0
 8001684:	40d9      	lsrs	r1, r3
 8001686:	4085      	lsls	r5, r0
 8001688:	430c      	orrs	r4, r1
 800168a:	4826      	ldr	r0, [pc, #152]	; (8001724 <__aeabi_dmul+0x3a4>)
 800168c:	1a83      	subs	r3, r0, r2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	4699      	mov	r9, r3
 8001694:	469b      	mov	fp, r3
 8001696:	e697      	b.n	80013c8 <__aeabi_dmul+0x48>
 8001698:	0005      	movs	r5, r0
 800169a:	4325      	orrs	r5, r4
 800169c:	d126      	bne.n	80016ec <__aeabi_dmul+0x36c>
 800169e:	2208      	movs	r2, #8
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2302      	movs	r3, #2
 80016a4:	2400      	movs	r4, #0
 80016a6:	4691      	mov	r9, r2
 80016a8:	469b      	mov	fp, r3
 80016aa:	e68d      	b.n	80013c8 <__aeabi_dmul+0x48>
 80016ac:	4652      	mov	r2, sl
 80016ae:	9b00      	ldr	r3, [sp, #0]
 80016b0:	4332      	orrs	r2, r6
 80016b2:	d110      	bne.n	80016d6 <__aeabi_dmul+0x356>
 80016b4:	4915      	ldr	r1, [pc, #84]	; (800170c <__aeabi_dmul+0x38c>)
 80016b6:	2600      	movs	r6, #0
 80016b8:	468c      	mov	ip, r1
 80016ba:	4463      	add	r3, ip
 80016bc:	4649      	mov	r1, r9
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2302      	movs	r3, #2
 80016c2:	4319      	orrs	r1, r3
 80016c4:	4689      	mov	r9, r1
 80016c6:	2002      	movs	r0, #2
 80016c8:	e69d      	b.n	8001406 <__aeabi_dmul+0x86>
 80016ca:	465b      	mov	r3, fp
 80016cc:	9701      	str	r7, [sp, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dmul+0x354>
 80016d2:	e6ad      	b.n	8001430 <__aeabi_dmul+0xb0>
 80016d4:	e6c3      	b.n	800145e <__aeabi_dmul+0xde>
 80016d6:	4a0d      	ldr	r2, [pc, #52]	; (800170c <__aeabi_dmul+0x38c>)
 80016d8:	2003      	movs	r0, #3
 80016da:	4694      	mov	ip, r2
 80016dc:	4463      	add	r3, ip
 80016de:	464a      	mov	r2, r9
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2303      	movs	r3, #3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	4691      	mov	r9, r2
 80016e8:	4652      	mov	r2, sl
 80016ea:	e68c      	b.n	8001406 <__aeabi_dmul+0x86>
 80016ec:	220c      	movs	r2, #12
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2303      	movs	r3, #3
 80016f2:	0005      	movs	r5, r0
 80016f4:	4691      	mov	r9, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	e666      	b.n	80013c8 <__aeabi_dmul+0x48>
 80016fa:	2304      	movs	r3, #4
 80016fc:	4699      	mov	r9, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	2400      	movs	r4, #0
 8001706:	469b      	mov	fp, r3
 8001708:	e65e      	b.n	80013c8 <__aeabi_dmul+0x48>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	000007ff 	.word	0x000007ff
 8001710:	fffffc01 	.word	0xfffffc01
 8001714:	08014ed8 	.word	0x08014ed8
 8001718:	000003ff 	.word	0x000003ff
 800171c:	feffffff 	.word	0xfeffffff
 8001720:	000007fe 	.word	0x000007fe
 8001724:	fffffc0d 	.word	0xfffffc0d
 8001728:	4649      	mov	r1, r9
 800172a:	2301      	movs	r3, #1
 800172c:	4319      	orrs	r1, r3
 800172e:	4689      	mov	r9, r1
 8001730:	2600      	movs	r6, #0
 8001732:	2001      	movs	r0, #1
 8001734:	e667      	b.n	8001406 <__aeabi_dmul+0x86>
 8001736:	2300      	movs	r3, #0
 8001738:	2480      	movs	r4, #128	; 0x80
 800173a:	2500      	movs	r5, #0
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <__aeabi_dmul+0x4cc>)
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	0324      	lsls	r4, r4, #12
 8001742:	e67e      	b.n	8001442 <__aeabi_dmul+0xc2>
 8001744:	2001      	movs	r0, #1
 8001746:	1a40      	subs	r0, r0, r1
 8001748:	2838      	cmp	r0, #56	; 0x38
 800174a:	dd00      	ble.n	800174e <__aeabi_dmul+0x3ce>
 800174c:	e676      	b.n	800143c <__aeabi_dmul+0xbc>
 800174e:	281f      	cmp	r0, #31
 8001750:	dd5b      	ble.n	800180a <__aeabi_dmul+0x48a>
 8001752:	221f      	movs	r2, #31
 8001754:	0023      	movs	r3, r4
 8001756:	4252      	negs	r2, r2
 8001758:	1a51      	subs	r1, r2, r1
 800175a:	40cb      	lsrs	r3, r1
 800175c:	0019      	movs	r1, r3
 800175e:	2820      	cmp	r0, #32
 8001760:	d003      	beq.n	800176a <__aeabi_dmul+0x3ea>
 8001762:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <__aeabi_dmul+0x4d0>)
 8001764:	4462      	add	r2, ip
 8001766:	4094      	lsls	r4, r2
 8001768:	4325      	orrs	r5, r4
 800176a:	1e6a      	subs	r2, r5, #1
 800176c:	4195      	sbcs	r5, r2
 800176e:	002a      	movs	r2, r5
 8001770:	430a      	orrs	r2, r1
 8001772:	2107      	movs	r1, #7
 8001774:	000d      	movs	r5, r1
 8001776:	2400      	movs	r4, #0
 8001778:	4015      	ands	r5, r2
 800177a:	4211      	tst	r1, r2
 800177c:	d05b      	beq.n	8001836 <__aeabi_dmul+0x4b6>
 800177e:	210f      	movs	r1, #15
 8001780:	2400      	movs	r4, #0
 8001782:	4011      	ands	r1, r2
 8001784:	2904      	cmp	r1, #4
 8001786:	d053      	beq.n	8001830 <__aeabi_dmul+0x4b0>
 8001788:	1d11      	adds	r1, r2, #4
 800178a:	4291      	cmp	r1, r2
 800178c:	4192      	sbcs	r2, r2
 800178e:	4252      	negs	r2, r2
 8001790:	18a4      	adds	r4, r4, r2
 8001792:	000a      	movs	r2, r1
 8001794:	0223      	lsls	r3, r4, #8
 8001796:	d54b      	bpl.n	8001830 <__aeabi_dmul+0x4b0>
 8001798:	2201      	movs	r2, #1
 800179a:	2400      	movs	r4, #0
 800179c:	2500      	movs	r5, #0
 800179e:	e650      	b.n	8001442 <__aeabi_dmul+0xc2>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	031b      	lsls	r3, r3, #12
 80017a4:	421c      	tst	r4, r3
 80017a6:	d009      	beq.n	80017bc <__aeabi_dmul+0x43c>
 80017a8:	421e      	tst	r6, r3
 80017aa:	d107      	bne.n	80017bc <__aeabi_dmul+0x43c>
 80017ac:	4333      	orrs	r3, r6
 80017ae:	031c      	lsls	r4, r3, #12
 80017b0:	4643      	mov	r3, r8
 80017b2:	0015      	movs	r5, r2
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <__aeabi_dmul+0x4cc>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	e642      	b.n	8001442 <__aeabi_dmul+0xc2>
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	0312      	lsls	r2, r2, #12
 80017c0:	4314      	orrs	r4, r2
 80017c2:	0324      	lsls	r4, r4, #12
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <__aeabi_dmul+0x4cc>)
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	9701      	str	r7, [sp, #4]
 80017ca:	e63a      	b.n	8001442 <__aeabi_dmul+0xc2>
 80017cc:	f000 fd50 	bl	8002270 <__clzsi2>
 80017d0:	0001      	movs	r1, r0
 80017d2:	0002      	movs	r2, r0
 80017d4:	3115      	adds	r1, #21
 80017d6:	3220      	adds	r2, #32
 80017d8:	291c      	cmp	r1, #28
 80017da:	dc00      	bgt.n	80017de <__aeabi_dmul+0x45e>
 80017dc:	e74b      	b.n	8001676 <__aeabi_dmul+0x2f6>
 80017de:	0034      	movs	r4, r6
 80017e0:	3808      	subs	r0, #8
 80017e2:	2500      	movs	r5, #0
 80017e4:	4084      	lsls	r4, r0
 80017e6:	e750      	b.n	800168a <__aeabi_dmul+0x30a>
 80017e8:	f000 fd42 	bl	8002270 <__clzsi2>
 80017ec:	0003      	movs	r3, r0
 80017ee:	001a      	movs	r2, r3
 80017f0:	3215      	adds	r2, #21
 80017f2:	3020      	adds	r0, #32
 80017f4:	2a1c      	cmp	r2, #28
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_dmul+0x47a>
 80017f8:	e71e      	b.n	8001638 <__aeabi_dmul+0x2b8>
 80017fa:	4656      	mov	r6, sl
 80017fc:	3b08      	subs	r3, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	409e      	lsls	r6, r3
 8001802:	e723      	b.n	800164c <__aeabi_dmul+0x2cc>
 8001804:	9b00      	ldr	r3, [sp, #0]
 8001806:	469c      	mov	ip, r3
 8001808:	e6e6      	b.n	80015d8 <__aeabi_dmul+0x258>
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <__aeabi_dmul+0x4d4>)
 800180c:	0022      	movs	r2, r4
 800180e:	4461      	add	r1, ip
 8001810:	002e      	movs	r6, r5
 8001812:	408d      	lsls	r5, r1
 8001814:	408a      	lsls	r2, r1
 8001816:	40c6      	lsrs	r6, r0
 8001818:	1e69      	subs	r1, r5, #1
 800181a:	418d      	sbcs	r5, r1
 800181c:	4332      	orrs	r2, r6
 800181e:	432a      	orrs	r2, r5
 8001820:	40c4      	lsrs	r4, r0
 8001822:	0753      	lsls	r3, r2, #29
 8001824:	d0b6      	beq.n	8001794 <__aeabi_dmul+0x414>
 8001826:	210f      	movs	r1, #15
 8001828:	4011      	ands	r1, r2
 800182a:	2904      	cmp	r1, #4
 800182c:	d1ac      	bne.n	8001788 <__aeabi_dmul+0x408>
 800182e:	e7b1      	b.n	8001794 <__aeabi_dmul+0x414>
 8001830:	0765      	lsls	r5, r4, #29
 8001832:	0264      	lsls	r4, r4, #9
 8001834:	0b24      	lsrs	r4, r4, #12
 8001836:	08d2      	lsrs	r2, r2, #3
 8001838:	4315      	orrs	r5, r2
 800183a:	2200      	movs	r2, #0
 800183c:	e601      	b.n	8001442 <__aeabi_dmul+0xc2>
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0312      	lsls	r2, r2, #12
 8001842:	4314      	orrs	r4, r2
 8001844:	0324      	lsls	r4, r4, #12
 8001846:	4a01      	ldr	r2, [pc, #4]	; (800184c <__aeabi_dmul+0x4cc>)
 8001848:	0b24      	lsrs	r4, r4, #12
 800184a:	e5fa      	b.n	8001442 <__aeabi_dmul+0xc2>
 800184c:	000007ff 	.word	0x000007ff
 8001850:	0000043e 	.word	0x0000043e
 8001854:	0000041e 	.word	0x0000041e

08001858 <__aeabi_dsub>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	4657      	mov	r7, sl
 800185c:	464e      	mov	r6, r9
 800185e:	4645      	mov	r5, r8
 8001860:	46de      	mov	lr, fp
 8001862:	b5e0      	push	{r5, r6, r7, lr}
 8001864:	001e      	movs	r6, r3
 8001866:	0017      	movs	r7, r2
 8001868:	004a      	lsls	r2, r1, #1
 800186a:	030b      	lsls	r3, r1, #12
 800186c:	0d52      	lsrs	r2, r2, #21
 800186e:	0a5b      	lsrs	r3, r3, #9
 8001870:	4690      	mov	r8, r2
 8001872:	0f42      	lsrs	r2, r0, #29
 8001874:	431a      	orrs	r2, r3
 8001876:	0fcd      	lsrs	r5, r1, #31
 8001878:	4ccd      	ldr	r4, [pc, #820]	; (8001bb0 <__aeabi_dsub+0x358>)
 800187a:	0331      	lsls	r1, r6, #12
 800187c:	00c3      	lsls	r3, r0, #3
 800187e:	4694      	mov	ip, r2
 8001880:	0070      	lsls	r0, r6, #1
 8001882:	0f7a      	lsrs	r2, r7, #29
 8001884:	0a49      	lsrs	r1, r1, #9
 8001886:	00ff      	lsls	r7, r7, #3
 8001888:	469a      	mov	sl, r3
 800188a:	46b9      	mov	r9, r7
 800188c:	0d40      	lsrs	r0, r0, #21
 800188e:	0ff6      	lsrs	r6, r6, #31
 8001890:	4311      	orrs	r1, r2
 8001892:	42a0      	cmp	r0, r4
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x40>
 8001896:	e0b1      	b.n	80019fc <__aeabi_dsub+0x1a4>
 8001898:	2201      	movs	r2, #1
 800189a:	4056      	eors	r6, r2
 800189c:	46b3      	mov	fp, r6
 800189e:	42b5      	cmp	r5, r6
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dsub+0x4c>
 80018a2:	e088      	b.n	80019b6 <__aeabi_dsub+0x15e>
 80018a4:	4642      	mov	r2, r8
 80018a6:	1a12      	subs	r2, r2, r0
 80018a8:	2a00      	cmp	r2, #0
 80018aa:	dc00      	bgt.n	80018ae <__aeabi_dsub+0x56>
 80018ac:	e0ae      	b.n	8001a0c <__aeabi_dsub+0x1b4>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dsub+0x5c>
 80018b2:	e0c1      	b.n	8001a38 <__aeabi_dsub+0x1e0>
 80018b4:	48be      	ldr	r0, [pc, #760]	; (8001bb0 <__aeabi_dsub+0x358>)
 80018b6:	4580      	cmp	r8, r0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x64>
 80018ba:	e151      	b.n	8001b60 <__aeabi_dsub+0x308>
 80018bc:	2080      	movs	r0, #128	; 0x80
 80018be:	0400      	lsls	r0, r0, #16
 80018c0:	4301      	orrs	r1, r0
 80018c2:	2a38      	cmp	r2, #56	; 0x38
 80018c4:	dd00      	ble.n	80018c8 <__aeabi_dsub+0x70>
 80018c6:	e17b      	b.n	8001bc0 <__aeabi_dsub+0x368>
 80018c8:	2a1f      	cmp	r2, #31
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dsub+0x76>
 80018cc:	e1ee      	b.n	8001cac <__aeabi_dsub+0x454>
 80018ce:	2020      	movs	r0, #32
 80018d0:	003e      	movs	r6, r7
 80018d2:	1a80      	subs	r0, r0, r2
 80018d4:	000c      	movs	r4, r1
 80018d6:	40d6      	lsrs	r6, r2
 80018d8:	40d1      	lsrs	r1, r2
 80018da:	4087      	lsls	r7, r0
 80018dc:	4662      	mov	r2, ip
 80018de:	4084      	lsls	r4, r0
 80018e0:	1a52      	subs	r2, r2, r1
 80018e2:	1e78      	subs	r0, r7, #1
 80018e4:	4187      	sbcs	r7, r0
 80018e6:	4694      	mov	ip, r2
 80018e8:	4334      	orrs	r4, r6
 80018ea:	4327      	orrs	r7, r4
 80018ec:	1bdc      	subs	r4, r3, r7
 80018ee:	42a3      	cmp	r3, r4
 80018f0:	419b      	sbcs	r3, r3
 80018f2:	4662      	mov	r2, ip
 80018f4:	425b      	negs	r3, r3
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	4699      	mov	r9, r3
 80018fa:	464b      	mov	r3, r9
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dsub+0xaa>
 8001900:	e118      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001902:	464b      	mov	r3, r9
 8001904:	0258      	lsls	r0, r3, #9
 8001906:	0a43      	lsrs	r3, r0, #9
 8001908:	4699      	mov	r9, r3
 800190a:	464b      	mov	r3, r9
 800190c:	2b00      	cmp	r3, #0
 800190e:	d100      	bne.n	8001912 <__aeabi_dsub+0xba>
 8001910:	e137      	b.n	8001b82 <__aeabi_dsub+0x32a>
 8001912:	4648      	mov	r0, r9
 8001914:	f000 fcac 	bl	8002270 <__clzsi2>
 8001918:	0001      	movs	r1, r0
 800191a:	3908      	subs	r1, #8
 800191c:	2320      	movs	r3, #32
 800191e:	0022      	movs	r2, r4
 8001920:	4648      	mov	r0, r9
 8001922:	1a5b      	subs	r3, r3, r1
 8001924:	40da      	lsrs	r2, r3
 8001926:	4088      	lsls	r0, r1
 8001928:	408c      	lsls	r4, r1
 800192a:	4643      	mov	r3, r8
 800192c:	4310      	orrs	r0, r2
 800192e:	4588      	cmp	r8, r1
 8001930:	dd00      	ble.n	8001934 <__aeabi_dsub+0xdc>
 8001932:	e136      	b.n	8001ba2 <__aeabi_dsub+0x34a>
 8001934:	1ac9      	subs	r1, r1, r3
 8001936:	1c4b      	adds	r3, r1, #1
 8001938:	2b1f      	cmp	r3, #31
 800193a:	dd00      	ble.n	800193e <__aeabi_dsub+0xe6>
 800193c:	e0ea      	b.n	8001b14 <__aeabi_dsub+0x2bc>
 800193e:	2220      	movs	r2, #32
 8001940:	0026      	movs	r6, r4
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	0001      	movs	r1, r0
 8001946:	4094      	lsls	r4, r2
 8001948:	40de      	lsrs	r6, r3
 800194a:	40d8      	lsrs	r0, r3
 800194c:	2300      	movs	r3, #0
 800194e:	4091      	lsls	r1, r2
 8001950:	1e62      	subs	r2, r4, #1
 8001952:	4194      	sbcs	r4, r2
 8001954:	4681      	mov	r9, r0
 8001956:	4698      	mov	r8, r3
 8001958:	4331      	orrs	r1, r6
 800195a:	430c      	orrs	r4, r1
 800195c:	0763      	lsls	r3, r4, #29
 800195e:	d009      	beq.n	8001974 <__aeabi_dsub+0x11c>
 8001960:	230f      	movs	r3, #15
 8001962:	4023      	ands	r3, r4
 8001964:	2b04      	cmp	r3, #4
 8001966:	d005      	beq.n	8001974 <__aeabi_dsub+0x11c>
 8001968:	1d23      	adds	r3, r4, #4
 800196a:	42a3      	cmp	r3, r4
 800196c:	41a4      	sbcs	r4, r4
 800196e:	4264      	negs	r4, r4
 8001970:	44a1      	add	r9, r4
 8001972:	001c      	movs	r4, r3
 8001974:	464b      	mov	r3, r9
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	d400      	bmi.n	800197c <__aeabi_dsub+0x124>
 800197a:	e0de      	b.n	8001b3a <__aeabi_dsub+0x2e2>
 800197c:	4641      	mov	r1, r8
 800197e:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001980:	3101      	adds	r1, #1
 8001982:	4299      	cmp	r1, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x130>
 8001986:	e0e7      	b.n	8001b58 <__aeabi_dsub+0x300>
 8001988:	464b      	mov	r3, r9
 800198a:	488a      	ldr	r0, [pc, #552]	; (8001bb4 <__aeabi_dsub+0x35c>)
 800198c:	08e4      	lsrs	r4, r4, #3
 800198e:	4003      	ands	r3, r0
 8001990:	0018      	movs	r0, r3
 8001992:	0549      	lsls	r1, r1, #21
 8001994:	075b      	lsls	r3, r3, #29
 8001996:	0240      	lsls	r0, r0, #9
 8001998:	4323      	orrs	r3, r4
 800199a:	0d4a      	lsrs	r2, r1, #21
 800199c:	0b04      	lsrs	r4, r0, #12
 800199e:	0512      	lsls	r2, r2, #20
 80019a0:	07ed      	lsls	r5, r5, #31
 80019a2:	4322      	orrs	r2, r4
 80019a4:	432a      	orrs	r2, r5
 80019a6:	0018      	movs	r0, r3
 80019a8:	0011      	movs	r1, r2
 80019aa:	bcf0      	pop	{r4, r5, r6, r7}
 80019ac:	46bb      	mov	fp, r7
 80019ae:	46b2      	mov	sl, r6
 80019b0:	46a9      	mov	r9, r5
 80019b2:	46a0      	mov	r8, r4
 80019b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b6:	4642      	mov	r2, r8
 80019b8:	1a12      	subs	r2, r2, r0
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	dd52      	ble.n	8001a64 <__aeabi_dsub+0x20c>
 80019be:	2800      	cmp	r0, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x16c>
 80019c2:	e09c      	b.n	8001afe <__aeabi_dsub+0x2a6>
 80019c4:	45a0      	cmp	r8, r4
 80019c6:	d100      	bne.n	80019ca <__aeabi_dsub+0x172>
 80019c8:	e0ca      	b.n	8001b60 <__aeabi_dsub+0x308>
 80019ca:	2080      	movs	r0, #128	; 0x80
 80019cc:	0400      	lsls	r0, r0, #16
 80019ce:	4301      	orrs	r1, r0
 80019d0:	2a38      	cmp	r2, #56	; 0x38
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dsub+0x17e>
 80019d4:	e149      	b.n	8001c6a <__aeabi_dsub+0x412>
 80019d6:	2a1f      	cmp	r2, #31
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dsub+0x184>
 80019da:	e197      	b.n	8001d0c <__aeabi_dsub+0x4b4>
 80019dc:	0010      	movs	r0, r2
 80019de:	000e      	movs	r6, r1
 80019e0:	3820      	subs	r0, #32
 80019e2:	40c6      	lsrs	r6, r0
 80019e4:	2a20      	cmp	r2, #32
 80019e6:	d004      	beq.n	80019f2 <__aeabi_dsub+0x19a>
 80019e8:	2040      	movs	r0, #64	; 0x40
 80019ea:	1a82      	subs	r2, r0, r2
 80019ec:	4091      	lsls	r1, r2
 80019ee:	430f      	orrs	r7, r1
 80019f0:	46b9      	mov	r9, r7
 80019f2:	464c      	mov	r4, r9
 80019f4:	1e62      	subs	r2, r4, #1
 80019f6:	4194      	sbcs	r4, r2
 80019f8:	4334      	orrs	r4, r6
 80019fa:	e13a      	b.n	8001c72 <__aeabi_dsub+0x41a>
 80019fc:	000a      	movs	r2, r1
 80019fe:	433a      	orrs	r2, r7
 8001a00:	d028      	beq.n	8001a54 <__aeabi_dsub+0x1fc>
 8001a02:	46b3      	mov	fp, r6
 8001a04:	42b5      	cmp	r5, r6
 8001a06:	d02b      	beq.n	8001a60 <__aeabi_dsub+0x208>
 8001a08:	4a6b      	ldr	r2, [pc, #428]	; (8001bb8 <__aeabi_dsub+0x360>)
 8001a0a:	4442      	add	r2, r8
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	d05d      	beq.n	8001acc <__aeabi_dsub+0x274>
 8001a10:	4642      	mov	r2, r8
 8001a12:	4644      	mov	r4, r8
 8001a14:	1a82      	subs	r2, r0, r2
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d000      	beq.n	8001a1c <__aeabi_dsub+0x1c4>
 8001a1a:	e0f5      	b.n	8001c08 <__aeabi_dsub+0x3b0>
 8001a1c:	4665      	mov	r5, ip
 8001a1e:	431d      	orrs	r5, r3
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0x1cc>
 8001a22:	e19c      	b.n	8001d5e <__aeabi_dsub+0x506>
 8001a24:	1e55      	subs	r5, r2, #1
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x1d4>
 8001a2a:	e1fb      	b.n	8001e24 <__aeabi_dsub+0x5cc>
 8001a2c:	4c60      	ldr	r4, [pc, #384]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001a2e:	42a2      	cmp	r2, r4
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1dc>
 8001a32:	e1bd      	b.n	8001db0 <__aeabi_dsub+0x558>
 8001a34:	002a      	movs	r2, r5
 8001a36:	e0f0      	b.n	8001c1a <__aeabi_dsub+0x3c2>
 8001a38:	0008      	movs	r0, r1
 8001a3a:	4338      	orrs	r0, r7
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x1e8>
 8001a3e:	e0c3      	b.n	8001bc8 <__aeabi_dsub+0x370>
 8001a40:	1e50      	subs	r0, r2, #1
 8001a42:	2a01      	cmp	r2, #1
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x1f0>
 8001a46:	e1a8      	b.n	8001d9a <__aeabi_dsub+0x542>
 8001a48:	4c59      	ldr	r4, [pc, #356]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001a4a:	42a2      	cmp	r2, r4
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f8>
 8001a4e:	e087      	b.n	8001b60 <__aeabi_dsub+0x308>
 8001a50:	0002      	movs	r2, r0
 8001a52:	e736      	b.n	80018c2 <__aeabi_dsub+0x6a>
 8001a54:	2201      	movs	r2, #1
 8001a56:	4056      	eors	r6, r2
 8001a58:	46b3      	mov	fp, r6
 8001a5a:	42b5      	cmp	r5, r6
 8001a5c:	d000      	beq.n	8001a60 <__aeabi_dsub+0x208>
 8001a5e:	e721      	b.n	80018a4 <__aeabi_dsub+0x4c>
 8001a60:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <__aeabi_dsub+0x360>)
 8001a62:	4442      	add	r2, r8
 8001a64:	2a00      	cmp	r2, #0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x212>
 8001a68:	e0b5      	b.n	8001bd6 <__aeabi_dsub+0x37e>
 8001a6a:	4642      	mov	r2, r8
 8001a6c:	4644      	mov	r4, r8
 8001a6e:	1a82      	subs	r2, r0, r2
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dsub+0x21e>
 8001a74:	e138      	b.n	8001ce8 <__aeabi_dsub+0x490>
 8001a76:	4e4e      	ldr	r6, [pc, #312]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001a78:	42b0      	cmp	r0, r6
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_dsub+0x226>
 8001a7c:	e1de      	b.n	8001e3c <__aeabi_dsub+0x5e4>
 8001a7e:	2680      	movs	r6, #128	; 0x80
 8001a80:	4664      	mov	r4, ip
 8001a82:	0436      	lsls	r6, r6, #16
 8001a84:	4334      	orrs	r4, r6
 8001a86:	46a4      	mov	ip, r4
 8001a88:	2a38      	cmp	r2, #56	; 0x38
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dsub+0x236>
 8001a8c:	e196      	b.n	8001dbc <__aeabi_dsub+0x564>
 8001a8e:	2a1f      	cmp	r2, #31
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dsub+0x23c>
 8001a92:	e224      	b.n	8001ede <__aeabi_dsub+0x686>
 8001a94:	2620      	movs	r6, #32
 8001a96:	1ab4      	subs	r4, r6, r2
 8001a98:	46a2      	mov	sl, r4
 8001a9a:	4664      	mov	r4, ip
 8001a9c:	4656      	mov	r6, sl
 8001a9e:	40b4      	lsls	r4, r6
 8001aa0:	46a1      	mov	r9, r4
 8001aa2:	001c      	movs	r4, r3
 8001aa4:	464e      	mov	r6, r9
 8001aa6:	40d4      	lsrs	r4, r2
 8001aa8:	4326      	orrs	r6, r4
 8001aaa:	0034      	movs	r4, r6
 8001aac:	4656      	mov	r6, sl
 8001aae:	40b3      	lsls	r3, r6
 8001ab0:	1e5e      	subs	r6, r3, #1
 8001ab2:	41b3      	sbcs	r3, r6
 8001ab4:	431c      	orrs	r4, r3
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	40d3      	lsrs	r3, r2
 8001aba:	18c9      	adds	r1, r1, r3
 8001abc:	19e4      	adds	r4, r4, r7
 8001abe:	42bc      	cmp	r4, r7
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	427f      	negs	r7, r7
 8001ac4:	46b9      	mov	r9, r7
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4489      	add	r9, r1
 8001aca:	e0d8      	b.n	8001c7e <__aeabi_dsub+0x426>
 8001acc:	4640      	mov	r0, r8
 8001ace:	4c3b      	ldr	r4, [pc, #236]	; (8001bbc <__aeabi_dsub+0x364>)
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	4220      	tst	r0, r4
 8001ad4:	d000      	beq.n	8001ad8 <__aeabi_dsub+0x280>
 8001ad6:	e0b4      	b.n	8001c42 <__aeabi_dsub+0x3ea>
 8001ad8:	4640      	mov	r0, r8
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dsub+0x288>
 8001ade:	e144      	b.n	8001d6a <__aeabi_dsub+0x512>
 8001ae0:	4660      	mov	r0, ip
 8001ae2:	4318      	orrs	r0, r3
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_dsub+0x290>
 8001ae6:	e190      	b.n	8001e0a <__aeabi_dsub+0x5b2>
 8001ae8:	0008      	movs	r0, r1
 8001aea:	4338      	orrs	r0, r7
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x298>
 8001aee:	e1aa      	b.n	8001e46 <__aeabi_dsub+0x5ee>
 8001af0:	4661      	mov	r1, ip
 8001af2:	08db      	lsrs	r3, r3, #3
 8001af4:	0749      	lsls	r1, r1, #29
 8001af6:	430b      	orrs	r3, r1
 8001af8:	4661      	mov	r1, ip
 8001afa:	08cc      	lsrs	r4, r1, #3
 8001afc:	e027      	b.n	8001b4e <__aeabi_dsub+0x2f6>
 8001afe:	0008      	movs	r0, r1
 8001b00:	4338      	orrs	r0, r7
 8001b02:	d061      	beq.n	8001bc8 <__aeabi_dsub+0x370>
 8001b04:	1e50      	subs	r0, r2, #1
 8001b06:	2a01      	cmp	r2, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x2b4>
 8001b0a:	e139      	b.n	8001d80 <__aeabi_dsub+0x528>
 8001b0c:	42a2      	cmp	r2, r4
 8001b0e:	d027      	beq.n	8001b60 <__aeabi_dsub+0x308>
 8001b10:	0002      	movs	r2, r0
 8001b12:	e75d      	b.n	80019d0 <__aeabi_dsub+0x178>
 8001b14:	0002      	movs	r2, r0
 8001b16:	391f      	subs	r1, #31
 8001b18:	40ca      	lsrs	r2, r1
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d003      	beq.n	8001b28 <__aeabi_dsub+0x2d0>
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4098      	lsls	r0, r3
 8001b26:	4304      	orrs	r4, r0
 8001b28:	1e63      	subs	r3, r4, #1
 8001b2a:	419c      	sbcs	r4, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4699      	mov	r9, r3
 8001b30:	4698      	mov	r8, r3
 8001b32:	430c      	orrs	r4, r1
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d000      	beq.n	8001b3a <__aeabi_dsub+0x2e2>
 8001b38:	e712      	b.n	8001960 <__aeabi_dsub+0x108>
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	464a      	mov	r2, r9
 8001b3e:	08e4      	lsrs	r4, r4, #3
 8001b40:	075b      	lsls	r3, r3, #29
 8001b42:	4323      	orrs	r3, r4
 8001b44:	08d4      	lsrs	r4, r2, #3
 8001b46:	4642      	mov	r2, r8
 8001b48:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001b4a:	428a      	cmp	r2, r1
 8001b4c:	d00e      	beq.n	8001b6c <__aeabi_dsub+0x314>
 8001b4e:	0324      	lsls	r4, r4, #12
 8001b50:	0552      	lsls	r2, r2, #21
 8001b52:	0b24      	lsrs	r4, r4, #12
 8001b54:	0d52      	lsrs	r2, r2, #21
 8001b56:	e722      	b.n	800199e <__aeabi_dsub+0x146>
 8001b58:	000a      	movs	r2, r1
 8001b5a:	2400      	movs	r4, #0
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e71e      	b.n	800199e <__aeabi_dsub+0x146>
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	4662      	mov	r2, ip
 8001b64:	0752      	lsls	r2, r2, #29
 8001b66:	4313      	orrs	r3, r2
 8001b68:	4662      	mov	r2, ip
 8001b6a:	08d4      	lsrs	r4, r2, #3
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	4322      	orrs	r2, r4
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x31c>
 8001b72:	e1fc      	b.n	8001f6e <__aeabi_dsub+0x716>
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	0312      	lsls	r2, r2, #12
 8001b78:	4314      	orrs	r4, r2
 8001b7a:	0324      	lsls	r4, r4, #12
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <__aeabi_dsub+0x358>)
 8001b7e:	0b24      	lsrs	r4, r4, #12
 8001b80:	e70d      	b.n	800199e <__aeabi_dsub+0x146>
 8001b82:	0020      	movs	r0, r4
 8001b84:	f000 fb74 	bl	8002270 <__clzsi2>
 8001b88:	0001      	movs	r1, r0
 8001b8a:	3118      	adds	r1, #24
 8001b8c:	291f      	cmp	r1, #31
 8001b8e:	dc00      	bgt.n	8001b92 <__aeabi_dsub+0x33a>
 8001b90:	e6c4      	b.n	800191c <__aeabi_dsub+0xc4>
 8001b92:	3808      	subs	r0, #8
 8001b94:	4084      	lsls	r4, r0
 8001b96:	4643      	mov	r3, r8
 8001b98:	0020      	movs	r0, r4
 8001b9a:	2400      	movs	r4, #0
 8001b9c:	4588      	cmp	r8, r1
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x34a>
 8001ba0:	e6c8      	b.n	8001934 <__aeabi_dsub+0xdc>
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__aeabi_dsub+0x35c>)
 8001ba4:	1a5b      	subs	r3, r3, r1
 8001ba6:	4010      	ands	r0, r2
 8001ba8:	4698      	mov	r8, r3
 8001baa:	4681      	mov	r9, r0
 8001bac:	e6d6      	b.n	800195c <__aeabi_dsub+0x104>
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	000007ff 	.word	0x000007ff
 8001bb4:	ff7fffff 	.word	0xff7fffff
 8001bb8:	fffff801 	.word	0xfffff801
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	430f      	orrs	r7, r1
 8001bc2:	1e7a      	subs	r2, r7, #1
 8001bc4:	4197      	sbcs	r7, r2
 8001bc6:	e691      	b.n	80018ec <__aeabi_dsub+0x94>
 8001bc8:	4661      	mov	r1, ip
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	0749      	lsls	r1, r1, #29
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	4661      	mov	r1, ip
 8001bd2:	08cc      	lsrs	r4, r1, #3
 8001bd4:	e7b8      	b.n	8001b48 <__aeabi_dsub+0x2f0>
 8001bd6:	4640      	mov	r0, r8
 8001bd8:	4cd3      	ldr	r4, [pc, #844]	; (8001f28 <__aeabi_dsub+0x6d0>)
 8001bda:	3001      	adds	r0, #1
 8001bdc:	4220      	tst	r0, r4
 8001bde:	d000      	beq.n	8001be2 <__aeabi_dsub+0x38a>
 8001be0:	e0a2      	b.n	8001d28 <__aeabi_dsub+0x4d0>
 8001be2:	4640      	mov	r0, r8
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d000      	beq.n	8001bea <__aeabi_dsub+0x392>
 8001be8:	e101      	b.n	8001dee <__aeabi_dsub+0x596>
 8001bea:	4660      	mov	r0, ip
 8001bec:	4318      	orrs	r0, r3
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x39a>
 8001bf0:	e15e      	b.n	8001eb0 <__aeabi_dsub+0x658>
 8001bf2:	0008      	movs	r0, r1
 8001bf4:	4338      	orrs	r0, r7
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x3a2>
 8001bf8:	e15f      	b.n	8001eba <__aeabi_dsub+0x662>
 8001bfa:	4661      	mov	r1, ip
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	0749      	lsls	r1, r1, #29
 8001c00:	430b      	orrs	r3, r1
 8001c02:	4661      	mov	r1, ip
 8001c04:	08cc      	lsrs	r4, r1, #3
 8001c06:	e7a2      	b.n	8001b4e <__aeabi_dsub+0x2f6>
 8001c08:	4dc8      	ldr	r5, [pc, #800]	; (8001f2c <__aeabi_dsub+0x6d4>)
 8001c0a:	42a8      	cmp	r0, r5
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0x3b8>
 8001c0e:	e0cf      	b.n	8001db0 <__aeabi_dsub+0x558>
 8001c10:	2580      	movs	r5, #128	; 0x80
 8001c12:	4664      	mov	r4, ip
 8001c14:	042d      	lsls	r5, r5, #16
 8001c16:	432c      	orrs	r4, r5
 8001c18:	46a4      	mov	ip, r4
 8001c1a:	2a38      	cmp	r2, #56	; 0x38
 8001c1c:	dc56      	bgt.n	8001ccc <__aeabi_dsub+0x474>
 8001c1e:	2a1f      	cmp	r2, #31
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dsub+0x3cc>
 8001c22:	e0d1      	b.n	8001dc8 <__aeabi_dsub+0x570>
 8001c24:	2520      	movs	r5, #32
 8001c26:	001e      	movs	r6, r3
 8001c28:	1aad      	subs	r5, r5, r2
 8001c2a:	4664      	mov	r4, ip
 8001c2c:	40ab      	lsls	r3, r5
 8001c2e:	40ac      	lsls	r4, r5
 8001c30:	40d6      	lsrs	r6, r2
 8001c32:	1e5d      	subs	r5, r3, #1
 8001c34:	41ab      	sbcs	r3, r5
 8001c36:	4334      	orrs	r4, r6
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	4664      	mov	r4, ip
 8001c3c:	40d4      	lsrs	r4, r2
 8001c3e:	1b09      	subs	r1, r1, r4
 8001c40:	e049      	b.n	8001cd6 <__aeabi_dsub+0x47e>
 8001c42:	4660      	mov	r0, ip
 8001c44:	1bdc      	subs	r4, r3, r7
 8001c46:	1a46      	subs	r6, r0, r1
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	4180      	sbcs	r0, r0
 8001c4c:	4240      	negs	r0, r0
 8001c4e:	4681      	mov	r9, r0
 8001c50:	0030      	movs	r0, r6
 8001c52:	464e      	mov	r6, r9
 8001c54:	1b80      	subs	r0, r0, r6
 8001c56:	4681      	mov	r9, r0
 8001c58:	0200      	lsls	r0, r0, #8
 8001c5a:	d476      	bmi.n	8001d4a <__aeabi_dsub+0x4f2>
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	4323      	orrs	r3, r4
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dsub+0x40c>
 8001c62:	e652      	b.n	800190a <__aeabi_dsub+0xb2>
 8001c64:	2400      	movs	r4, #0
 8001c66:	2500      	movs	r5, #0
 8001c68:	e771      	b.n	8001b4e <__aeabi_dsub+0x2f6>
 8001c6a:	4339      	orrs	r1, r7
 8001c6c:	000c      	movs	r4, r1
 8001c6e:	1e62      	subs	r2, r4, #1
 8001c70:	4194      	sbcs	r4, r2
 8001c72:	18e4      	adds	r4, r4, r3
 8001c74:	429c      	cmp	r4, r3
 8001c76:	419b      	sbcs	r3, r3
 8001c78:	425b      	negs	r3, r3
 8001c7a:	4463      	add	r3, ip
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	464b      	mov	r3, r9
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	d400      	bmi.n	8001c86 <__aeabi_dsub+0x42e>
 8001c84:	e756      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001c86:	2301      	movs	r3, #1
 8001c88:	469c      	mov	ip, r3
 8001c8a:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <__aeabi_dsub+0x6d4>)
 8001c8c:	44e0      	add	r8, ip
 8001c8e:	4598      	cmp	r8, r3
 8001c90:	d038      	beq.n	8001d04 <__aeabi_dsub+0x4ac>
 8001c92:	464b      	mov	r3, r9
 8001c94:	48a6      	ldr	r0, [pc, #664]	; (8001f30 <__aeabi_dsub+0x6d8>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	4003      	ands	r3, r0
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	0863      	lsrs	r3, r4, #1
 8001c9e:	4014      	ands	r4, r2
 8001ca0:	431c      	orrs	r4, r3
 8001ca2:	07c3      	lsls	r3, r0, #31
 8001ca4:	431c      	orrs	r4, r3
 8001ca6:	0843      	lsrs	r3, r0, #1
 8001ca8:	4699      	mov	r9, r3
 8001caa:	e657      	b.n	800195c <__aeabi_dsub+0x104>
 8001cac:	0010      	movs	r0, r2
 8001cae:	000e      	movs	r6, r1
 8001cb0:	3820      	subs	r0, #32
 8001cb2:	40c6      	lsrs	r6, r0
 8001cb4:	2a20      	cmp	r2, #32
 8001cb6:	d004      	beq.n	8001cc2 <__aeabi_dsub+0x46a>
 8001cb8:	2040      	movs	r0, #64	; 0x40
 8001cba:	1a82      	subs	r2, r0, r2
 8001cbc:	4091      	lsls	r1, r2
 8001cbe:	430f      	orrs	r7, r1
 8001cc0:	46b9      	mov	r9, r7
 8001cc2:	464f      	mov	r7, r9
 8001cc4:	1e7a      	subs	r2, r7, #1
 8001cc6:	4197      	sbcs	r7, r2
 8001cc8:	4337      	orrs	r7, r6
 8001cca:	e60f      	b.n	80018ec <__aeabi_dsub+0x94>
 8001ccc:	4662      	mov	r2, ip
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	4193      	sbcs	r3, r2
 8001cd6:	1afc      	subs	r4, r7, r3
 8001cd8:	42a7      	cmp	r7, r4
 8001cda:	41bf      	sbcs	r7, r7
 8001cdc:	427f      	negs	r7, r7
 8001cde:	1bcb      	subs	r3, r1, r7
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	465d      	mov	r5, fp
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	e608      	b.n	80018fa <__aeabi_dsub+0xa2>
 8001ce8:	4666      	mov	r6, ip
 8001cea:	431e      	orrs	r6, r3
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x498>
 8001cee:	e0be      	b.n	8001e6e <__aeabi_dsub+0x616>
 8001cf0:	1e56      	subs	r6, r2, #1
 8001cf2:	2a01      	cmp	r2, #1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x4a0>
 8001cf6:	e109      	b.n	8001f0c <__aeabi_dsub+0x6b4>
 8001cf8:	4c8c      	ldr	r4, [pc, #560]	; (8001f2c <__aeabi_dsub+0x6d4>)
 8001cfa:	42a2      	cmp	r2, r4
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0x4a8>
 8001cfe:	e119      	b.n	8001f34 <__aeabi_dsub+0x6dc>
 8001d00:	0032      	movs	r2, r6
 8001d02:	e6c1      	b.n	8001a88 <__aeabi_dsub+0x230>
 8001d04:	4642      	mov	r2, r8
 8001d06:	2400      	movs	r4, #0
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e648      	b.n	800199e <__aeabi_dsub+0x146>
 8001d0c:	2020      	movs	r0, #32
 8001d0e:	000c      	movs	r4, r1
 8001d10:	1a80      	subs	r0, r0, r2
 8001d12:	003e      	movs	r6, r7
 8001d14:	4087      	lsls	r7, r0
 8001d16:	4084      	lsls	r4, r0
 8001d18:	40d6      	lsrs	r6, r2
 8001d1a:	1e78      	subs	r0, r7, #1
 8001d1c:	4187      	sbcs	r7, r0
 8001d1e:	40d1      	lsrs	r1, r2
 8001d20:	4334      	orrs	r4, r6
 8001d22:	433c      	orrs	r4, r7
 8001d24:	448c      	add	ip, r1
 8001d26:	e7a4      	b.n	8001c72 <__aeabi_dsub+0x41a>
 8001d28:	4a80      	ldr	r2, [pc, #512]	; (8001f2c <__aeabi_dsub+0x6d4>)
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x4d8>
 8001d2e:	e0e9      	b.n	8001f04 <__aeabi_dsub+0x6ac>
 8001d30:	19df      	adds	r7, r3, r7
 8001d32:	429f      	cmp	r7, r3
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	4461      	add	r1, ip
 8001d38:	425b      	negs	r3, r3
 8001d3a:	18c9      	adds	r1, r1, r3
 8001d3c:	07cc      	lsls	r4, r1, #31
 8001d3e:	087f      	lsrs	r7, r7, #1
 8001d40:	084b      	lsrs	r3, r1, #1
 8001d42:	4699      	mov	r9, r3
 8001d44:	4680      	mov	r8, r0
 8001d46:	433c      	orrs	r4, r7
 8001d48:	e6f4      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001d4a:	1afc      	subs	r4, r7, r3
 8001d4c:	42a7      	cmp	r7, r4
 8001d4e:	41bf      	sbcs	r7, r7
 8001d50:	4663      	mov	r3, ip
 8001d52:	427f      	negs	r7, r7
 8001d54:	1ac9      	subs	r1, r1, r3
 8001d56:	1bcb      	subs	r3, r1, r7
 8001d58:	4699      	mov	r9, r3
 8001d5a:	465d      	mov	r5, fp
 8001d5c:	e5d5      	b.n	800190a <__aeabi_dsub+0xb2>
 8001d5e:	08ff      	lsrs	r7, r7, #3
 8001d60:	074b      	lsls	r3, r1, #29
 8001d62:	465d      	mov	r5, fp
 8001d64:	433b      	orrs	r3, r7
 8001d66:	08cc      	lsrs	r4, r1, #3
 8001d68:	e6ee      	b.n	8001b48 <__aeabi_dsub+0x2f0>
 8001d6a:	4662      	mov	r2, ip
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x51a>
 8001d70:	e082      	b.n	8001e78 <__aeabi_dsub+0x620>
 8001d72:	000b      	movs	r3, r1
 8001d74:	433b      	orrs	r3, r7
 8001d76:	d11b      	bne.n	8001db0 <__aeabi_dsub+0x558>
 8001d78:	2480      	movs	r4, #128	; 0x80
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	0324      	lsls	r4, r4, #12
 8001d7e:	e6f9      	b.n	8001b74 <__aeabi_dsub+0x31c>
 8001d80:	19dc      	adds	r4, r3, r7
 8001d82:	429c      	cmp	r4, r3
 8001d84:	419b      	sbcs	r3, r3
 8001d86:	4461      	add	r1, ip
 8001d88:	4689      	mov	r9, r1
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	4499      	add	r9, r3
 8001d8e:	464b      	mov	r3, r9
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	d444      	bmi.n	8001e1e <__aeabi_dsub+0x5c6>
 8001d94:	2301      	movs	r3, #1
 8001d96:	4698      	mov	r8, r3
 8001d98:	e6cc      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001d9a:	1bdc      	subs	r4, r3, r7
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	42a3      	cmp	r3, r4
 8001da0:	419b      	sbcs	r3, r3
 8001da2:	1a51      	subs	r1, r2, r1
 8001da4:	425b      	negs	r3, r3
 8001da6:	1acb      	subs	r3, r1, r3
 8001da8:	4699      	mov	r9, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	4698      	mov	r8, r3
 8001dae:	e5a4      	b.n	80018fa <__aeabi_dsub+0xa2>
 8001db0:	08ff      	lsrs	r7, r7, #3
 8001db2:	074b      	lsls	r3, r1, #29
 8001db4:	465d      	mov	r5, fp
 8001db6:	433b      	orrs	r3, r7
 8001db8:	08cc      	lsrs	r4, r1, #3
 8001dba:	e6d7      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	0014      	movs	r4, r2
 8001dc2:	1e63      	subs	r3, r4, #1
 8001dc4:	419c      	sbcs	r4, r3
 8001dc6:	e679      	b.n	8001abc <__aeabi_dsub+0x264>
 8001dc8:	0015      	movs	r5, r2
 8001dca:	4664      	mov	r4, ip
 8001dcc:	3d20      	subs	r5, #32
 8001dce:	40ec      	lsrs	r4, r5
 8001dd0:	46a0      	mov	r8, r4
 8001dd2:	2a20      	cmp	r2, #32
 8001dd4:	d005      	beq.n	8001de2 <__aeabi_dsub+0x58a>
 8001dd6:	2540      	movs	r5, #64	; 0x40
 8001dd8:	4664      	mov	r4, ip
 8001dda:	1aaa      	subs	r2, r5, r2
 8001ddc:	4094      	lsls	r4, r2
 8001dde:	4323      	orrs	r3, r4
 8001de0:	469a      	mov	sl, r3
 8001de2:	4654      	mov	r4, sl
 8001de4:	1e63      	subs	r3, r4, #1
 8001de6:	419c      	sbcs	r4, r3
 8001de8:	4643      	mov	r3, r8
 8001dea:	4323      	orrs	r3, r4
 8001dec:	e773      	b.n	8001cd6 <__aeabi_dsub+0x47e>
 8001dee:	4662      	mov	r2, ip
 8001df0:	431a      	orrs	r2, r3
 8001df2:	d023      	beq.n	8001e3c <__aeabi_dsub+0x5e4>
 8001df4:	000a      	movs	r2, r1
 8001df6:	433a      	orrs	r2, r7
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x5a4>
 8001dfa:	e0a0      	b.n	8001f3e <__aeabi_dsub+0x6e6>
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	0752      	lsls	r2, r2, #29
 8001e02:	4313      	orrs	r3, r2
 8001e04:	4662      	mov	r2, ip
 8001e06:	08d4      	lsrs	r4, r2, #3
 8001e08:	e6b0      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001e0a:	000b      	movs	r3, r1
 8001e0c:	433b      	orrs	r3, r7
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x5ba>
 8001e10:	e728      	b.n	8001c64 <__aeabi_dsub+0x40c>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	465d      	mov	r5, fp
 8001e18:	433b      	orrs	r3, r7
 8001e1a:	08cc      	lsrs	r4, r1, #3
 8001e1c:	e697      	b.n	8001b4e <__aeabi_dsub+0x2f6>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	4698      	mov	r8, r3
 8001e22:	e736      	b.n	8001c92 <__aeabi_dsub+0x43a>
 8001e24:	1afc      	subs	r4, r7, r3
 8001e26:	42a7      	cmp	r7, r4
 8001e28:	41bf      	sbcs	r7, r7
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	427f      	negs	r7, r7
 8001e2e:	1ac9      	subs	r1, r1, r3
 8001e30:	1bcb      	subs	r3, r1, r7
 8001e32:	4699      	mov	r9, r3
 8001e34:	2301      	movs	r3, #1
 8001e36:	465d      	mov	r5, fp
 8001e38:	4698      	mov	r8, r3
 8001e3a:	e55e      	b.n	80018fa <__aeabi_dsub+0xa2>
 8001e3c:	074b      	lsls	r3, r1, #29
 8001e3e:	08ff      	lsrs	r7, r7, #3
 8001e40:	433b      	orrs	r3, r7
 8001e42:	08cc      	lsrs	r4, r1, #3
 8001e44:	e692      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001e46:	1bdc      	subs	r4, r3, r7
 8001e48:	4660      	mov	r0, ip
 8001e4a:	42a3      	cmp	r3, r4
 8001e4c:	41b6      	sbcs	r6, r6
 8001e4e:	1a40      	subs	r0, r0, r1
 8001e50:	4276      	negs	r6, r6
 8001e52:	1b80      	subs	r0, r0, r6
 8001e54:	4681      	mov	r9, r0
 8001e56:	0200      	lsls	r0, r0, #8
 8001e58:	d560      	bpl.n	8001f1c <__aeabi_dsub+0x6c4>
 8001e5a:	1afc      	subs	r4, r7, r3
 8001e5c:	42a7      	cmp	r7, r4
 8001e5e:	41bf      	sbcs	r7, r7
 8001e60:	4663      	mov	r3, ip
 8001e62:	427f      	negs	r7, r7
 8001e64:	1ac9      	subs	r1, r1, r3
 8001e66:	1bcb      	subs	r3, r1, r7
 8001e68:	4699      	mov	r9, r3
 8001e6a:	465d      	mov	r5, fp
 8001e6c:	e576      	b.n	800195c <__aeabi_dsub+0x104>
 8001e6e:	08ff      	lsrs	r7, r7, #3
 8001e70:	074b      	lsls	r3, r1, #29
 8001e72:	433b      	orrs	r3, r7
 8001e74:	08cc      	lsrs	r4, r1, #3
 8001e76:	e667      	b.n	8001b48 <__aeabi_dsub+0x2f0>
 8001e78:	000a      	movs	r2, r1
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	433a      	orrs	r2, r7
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x62a>
 8001e80:	e66f      	b.n	8001b62 <__aeabi_dsub+0x30a>
 8001e82:	4662      	mov	r2, ip
 8001e84:	0752      	lsls	r2, r2, #29
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4662      	mov	r2, ip
 8001e8a:	08d4      	lsrs	r4, r2, #3
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	0312      	lsls	r2, r2, #12
 8001e90:	4214      	tst	r4, r2
 8001e92:	d007      	beq.n	8001ea4 <__aeabi_dsub+0x64c>
 8001e94:	08c8      	lsrs	r0, r1, #3
 8001e96:	4210      	tst	r0, r2
 8001e98:	d104      	bne.n	8001ea4 <__aeabi_dsub+0x64c>
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	0004      	movs	r4, r0
 8001e9e:	08fb      	lsrs	r3, r7, #3
 8001ea0:	0749      	lsls	r1, r1, #29
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	0f5a      	lsrs	r2, r3, #29
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	0752      	lsls	r2, r2, #29
 8001eac:	4313      	orrs	r3, r2
 8001eae:	e65d      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001eb0:	074b      	lsls	r3, r1, #29
 8001eb2:	08ff      	lsrs	r7, r7, #3
 8001eb4:	433b      	orrs	r3, r7
 8001eb6:	08cc      	lsrs	r4, r1, #3
 8001eb8:	e649      	b.n	8001b4e <__aeabi_dsub+0x2f6>
 8001eba:	19dc      	adds	r4, r3, r7
 8001ebc:	429c      	cmp	r4, r3
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	4461      	add	r1, ip
 8001ec2:	4689      	mov	r9, r1
 8001ec4:	425b      	negs	r3, r3
 8001ec6:	4499      	add	r9, r3
 8001ec8:	464b      	mov	r3, r9
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	d400      	bmi.n	8001ed0 <__aeabi_dsub+0x678>
 8001ece:	e631      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001ed0:	464a      	mov	r2, r9
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <__aeabi_dsub+0x6d8>)
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	4691      	mov	r9, r2
 8001eda:	4698      	mov	r8, r3
 8001edc:	e62a      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001ede:	0016      	movs	r6, r2
 8001ee0:	4664      	mov	r4, ip
 8001ee2:	3e20      	subs	r6, #32
 8001ee4:	40f4      	lsrs	r4, r6
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	2a20      	cmp	r2, #32
 8001eea:	d005      	beq.n	8001ef8 <__aeabi_dsub+0x6a0>
 8001eec:	2640      	movs	r6, #64	; 0x40
 8001eee:	4664      	mov	r4, ip
 8001ef0:	1ab2      	subs	r2, r6, r2
 8001ef2:	4094      	lsls	r4, r2
 8001ef4:	4323      	orrs	r3, r4
 8001ef6:	469a      	mov	sl, r3
 8001ef8:	4654      	mov	r4, sl
 8001efa:	1e63      	subs	r3, r4, #1
 8001efc:	419c      	sbcs	r4, r3
 8001efe:	4643      	mov	r3, r8
 8001f00:	431c      	orrs	r4, r3
 8001f02:	e5db      	b.n	8001abc <__aeabi_dsub+0x264>
 8001f04:	0002      	movs	r2, r0
 8001f06:	2400      	movs	r4, #0
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e548      	b.n	800199e <__aeabi_dsub+0x146>
 8001f0c:	19dc      	adds	r4, r3, r7
 8001f0e:	42bc      	cmp	r4, r7
 8001f10:	41bf      	sbcs	r7, r7
 8001f12:	4461      	add	r1, ip
 8001f14:	4689      	mov	r9, r1
 8001f16:	427f      	negs	r7, r7
 8001f18:	44b9      	add	r9, r7
 8001f1a:	e738      	b.n	8001d8e <__aeabi_dsub+0x536>
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x6cc>
 8001f22:	e69f      	b.n	8001c64 <__aeabi_dsub+0x40c>
 8001f24:	e606      	b.n	8001b34 <__aeabi_dsub+0x2dc>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	000007fe 	.word	0x000007fe
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	08ff      	lsrs	r7, r7, #3
 8001f36:	074b      	lsls	r3, r1, #29
 8001f38:	433b      	orrs	r3, r7
 8001f3a:	08cc      	lsrs	r4, r1, #3
 8001f3c:	e616      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001f3e:	4662      	mov	r2, ip
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	0752      	lsls	r2, r2, #29
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4662      	mov	r2, ip
 8001f48:	08d4      	lsrs	r4, r2, #3
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0312      	lsls	r2, r2, #12
 8001f4e:	4214      	tst	r4, r2
 8001f50:	d007      	beq.n	8001f62 <__aeabi_dsub+0x70a>
 8001f52:	08c8      	lsrs	r0, r1, #3
 8001f54:	4210      	tst	r0, r2
 8001f56:	d104      	bne.n	8001f62 <__aeabi_dsub+0x70a>
 8001f58:	465d      	mov	r5, fp
 8001f5a:	0004      	movs	r4, r0
 8001f5c:	08fb      	lsrs	r3, r7, #3
 8001f5e:	0749      	lsls	r1, r1, #29
 8001f60:	430b      	orrs	r3, r1
 8001f62:	0f5a      	lsrs	r2, r3, #29
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	0752      	lsls	r2, r2, #29
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	e5fe      	b.n	8001b6c <__aeabi_dsub+0x314>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4a01      	ldr	r2, [pc, #4]	; (8001f78 <__aeabi_dsub+0x720>)
 8001f72:	001c      	movs	r4, r3
 8001f74:	e513      	b.n	800199e <__aeabi_dsub+0x146>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	000007ff 	.word	0x000007ff

08001f7c <__aeabi_dcmpun>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	0005      	movs	r5, r0
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <__aeabi_dcmpun+0x38>)
 8001f82:	031c      	lsls	r4, r3, #12
 8001f84:	0016      	movs	r6, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	030a      	lsls	r2, r1, #12
 8001f8a:	0049      	lsls	r1, r1, #1
 8001f8c:	0b12      	lsrs	r2, r2, #12
 8001f8e:	0d49      	lsrs	r1, r1, #21
 8001f90:	0b24      	lsrs	r4, r4, #12
 8001f92:	0d5b      	lsrs	r3, r3, #21
 8001f94:	4281      	cmp	r1, r0
 8001f96:	d008      	beq.n	8001faa <__aeabi_dcmpun+0x2e>
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <__aeabi_dcmpun+0x38>)
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d103      	bne.n	8001fa8 <__aeabi_dcmpun+0x2c>
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	4330      	orrs	r0, r6
 8001fa4:	1e43      	subs	r3, r0, #1
 8001fa6:	4198      	sbcs	r0, r3
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	2001      	movs	r0, #1
 8001fac:	432a      	orrs	r2, r5
 8001fae:	d1fb      	bne.n	8001fa8 <__aeabi_dcmpun+0x2c>
 8001fb0:	e7f2      	b.n	8001f98 <__aeabi_dcmpun+0x1c>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	000007ff 	.word	0x000007ff

08001fb8 <__aeabi_d2iz>:
 8001fb8:	000a      	movs	r2, r1
 8001fba:	b530      	push	{r4, r5, lr}
 8001fbc:	4c13      	ldr	r4, [pc, #76]	; (800200c <__aeabi_d2iz+0x54>)
 8001fbe:	0053      	lsls	r3, r2, #1
 8001fc0:	0309      	lsls	r1, r1, #12
 8001fc2:	0005      	movs	r5, r0
 8001fc4:	0b09      	lsrs	r1, r1, #12
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	0d5b      	lsrs	r3, r3, #21
 8001fca:	0fd2      	lsrs	r2, r2, #31
 8001fcc:	42a3      	cmp	r3, r4
 8001fce:	dd04      	ble.n	8001fda <__aeabi_d2iz+0x22>
 8001fd0:	480f      	ldr	r0, [pc, #60]	; (8002010 <__aeabi_d2iz+0x58>)
 8001fd2:	4283      	cmp	r3, r0
 8001fd4:	dd02      	ble.n	8001fdc <__aeabi_d2iz+0x24>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <__aeabi_d2iz+0x5c>)
 8001fd8:	18d0      	adds	r0, r2, r3
 8001fda:	bd30      	pop	{r4, r5, pc}
 8001fdc:	2080      	movs	r0, #128	; 0x80
 8001fde:	0340      	lsls	r0, r0, #13
 8001fe0:	4301      	orrs	r1, r0
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <__aeabi_d2iz+0x60>)
 8001fe4:	1ac0      	subs	r0, r0, r3
 8001fe6:	281f      	cmp	r0, #31
 8001fe8:	dd08      	ble.n	8001ffc <__aeabi_d2iz+0x44>
 8001fea:	480c      	ldr	r0, [pc, #48]	; (800201c <__aeabi_d2iz+0x64>)
 8001fec:	1ac3      	subs	r3, r0, r3
 8001fee:	40d9      	lsrs	r1, r3
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	4258      	negs	r0, r3
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d1f0      	bne.n	8001fda <__aeabi_d2iz+0x22>
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	e7ee      	b.n	8001fda <__aeabi_d2iz+0x22>
 8001ffc:	4c08      	ldr	r4, [pc, #32]	; (8002020 <__aeabi_d2iz+0x68>)
 8001ffe:	40c5      	lsrs	r5, r0
 8002000:	46a4      	mov	ip, r4
 8002002:	4463      	add	r3, ip
 8002004:	4099      	lsls	r1, r3
 8002006:	000b      	movs	r3, r1
 8002008:	432b      	orrs	r3, r5
 800200a:	e7f2      	b.n	8001ff2 <__aeabi_d2iz+0x3a>
 800200c:	000003fe 	.word	0x000003fe
 8002010:	0000041d 	.word	0x0000041d
 8002014:	7fffffff 	.word	0x7fffffff
 8002018:	00000433 	.word	0x00000433
 800201c:	00000413 	.word	0x00000413
 8002020:	fffffbed 	.word	0xfffffbed

08002024 <__aeabi_i2d>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	2800      	cmp	r0, #0
 8002028:	d016      	beq.n	8002058 <__aeabi_i2d+0x34>
 800202a:	17c3      	asrs	r3, r0, #31
 800202c:	18c5      	adds	r5, r0, r3
 800202e:	405d      	eors	r5, r3
 8002030:	0fc4      	lsrs	r4, r0, #31
 8002032:	0028      	movs	r0, r5
 8002034:	f000 f91c 	bl	8002270 <__clzsi2>
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <__aeabi_i2d+0x5c>)
 800203a:	1a12      	subs	r2, r2, r0
 800203c:	280a      	cmp	r0, #10
 800203e:	dc16      	bgt.n	800206e <__aeabi_i2d+0x4a>
 8002040:	0003      	movs	r3, r0
 8002042:	002e      	movs	r6, r5
 8002044:	3315      	adds	r3, #21
 8002046:	409e      	lsls	r6, r3
 8002048:	230b      	movs	r3, #11
 800204a:	1a18      	subs	r0, r3, r0
 800204c:	40c5      	lsrs	r5, r0
 800204e:	0552      	lsls	r2, r2, #21
 8002050:	032d      	lsls	r5, r5, #12
 8002052:	0b2d      	lsrs	r5, r5, #12
 8002054:	0d53      	lsrs	r3, r2, #21
 8002056:	e003      	b.n	8002060 <__aeabi_i2d+0x3c>
 8002058:	2400      	movs	r4, #0
 800205a:	2300      	movs	r3, #0
 800205c:	2500      	movs	r5, #0
 800205e:	2600      	movs	r6, #0
 8002060:	051b      	lsls	r3, r3, #20
 8002062:	432b      	orrs	r3, r5
 8002064:	07e4      	lsls	r4, r4, #31
 8002066:	4323      	orrs	r3, r4
 8002068:	0030      	movs	r0, r6
 800206a:	0019      	movs	r1, r3
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	380b      	subs	r0, #11
 8002070:	4085      	lsls	r5, r0
 8002072:	0552      	lsls	r2, r2, #21
 8002074:	032d      	lsls	r5, r5, #12
 8002076:	2600      	movs	r6, #0
 8002078:	0b2d      	lsrs	r5, r5, #12
 800207a:	0d53      	lsrs	r3, r2, #21
 800207c:	e7f0      	b.n	8002060 <__aeabi_i2d+0x3c>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	0000041e 	.word	0x0000041e

08002084 <__aeabi_ui2d>:
 8002084:	b510      	push	{r4, lr}
 8002086:	1e04      	subs	r4, r0, #0
 8002088:	d010      	beq.n	80020ac <__aeabi_ui2d+0x28>
 800208a:	f000 f8f1 	bl	8002270 <__clzsi2>
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <__aeabi_ui2d+0x48>)
 8002090:	1a1b      	subs	r3, r3, r0
 8002092:	280a      	cmp	r0, #10
 8002094:	dc11      	bgt.n	80020ba <__aeabi_ui2d+0x36>
 8002096:	220b      	movs	r2, #11
 8002098:	0021      	movs	r1, r4
 800209a:	1a12      	subs	r2, r2, r0
 800209c:	40d1      	lsrs	r1, r2
 800209e:	3015      	adds	r0, #21
 80020a0:	030a      	lsls	r2, r1, #12
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	4084      	lsls	r4, r0
 80020a6:	0b12      	lsrs	r2, r2, #12
 80020a8:	0d5b      	lsrs	r3, r3, #21
 80020aa:	e001      	b.n	80020b0 <__aeabi_ui2d+0x2c>
 80020ac:	2300      	movs	r3, #0
 80020ae:	2200      	movs	r2, #0
 80020b0:	051b      	lsls	r3, r3, #20
 80020b2:	4313      	orrs	r3, r2
 80020b4:	0020      	movs	r0, r4
 80020b6:	0019      	movs	r1, r3
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	0022      	movs	r2, r4
 80020bc:	380b      	subs	r0, #11
 80020be:	4082      	lsls	r2, r0
 80020c0:	055b      	lsls	r3, r3, #21
 80020c2:	0312      	lsls	r2, r2, #12
 80020c4:	2400      	movs	r4, #0
 80020c6:	0b12      	lsrs	r2, r2, #12
 80020c8:	0d5b      	lsrs	r3, r3, #21
 80020ca:	e7f1      	b.n	80020b0 <__aeabi_ui2d+0x2c>
 80020cc:	0000041e 	.word	0x0000041e

080020d0 <__aeabi_f2d>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	0043      	lsls	r3, r0, #1
 80020d4:	0246      	lsls	r6, r0, #9
 80020d6:	0fc4      	lsrs	r4, r0, #31
 80020d8:	20fe      	movs	r0, #254	; 0xfe
 80020da:	0e1b      	lsrs	r3, r3, #24
 80020dc:	1c59      	adds	r1, r3, #1
 80020de:	0a75      	lsrs	r5, r6, #9
 80020e0:	4208      	tst	r0, r1
 80020e2:	d00c      	beq.n	80020fe <__aeabi_f2d+0x2e>
 80020e4:	22e0      	movs	r2, #224	; 0xe0
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4694      	mov	ip, r2
 80020ea:	076d      	lsls	r5, r5, #29
 80020ec:	0b36      	lsrs	r6, r6, #12
 80020ee:	4463      	add	r3, ip
 80020f0:	051b      	lsls	r3, r3, #20
 80020f2:	4333      	orrs	r3, r6
 80020f4:	07e4      	lsls	r4, r4, #31
 80020f6:	4323      	orrs	r3, r4
 80020f8:	0028      	movs	r0, r5
 80020fa:	0019      	movs	r1, r3
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <__aeabi_f2d+0x5c>
 8002102:	2d00      	cmp	r5, #0
 8002104:	d01b      	beq.n	800213e <__aeabi_f2d+0x6e>
 8002106:	0028      	movs	r0, r5
 8002108:	f000 f8b2 	bl	8002270 <__clzsi2>
 800210c:	280a      	cmp	r0, #10
 800210e:	dc1c      	bgt.n	800214a <__aeabi_f2d+0x7a>
 8002110:	230b      	movs	r3, #11
 8002112:	002e      	movs	r6, r5
 8002114:	1a1b      	subs	r3, r3, r0
 8002116:	40de      	lsrs	r6, r3
 8002118:	0003      	movs	r3, r0
 800211a:	3315      	adds	r3, #21
 800211c:	409d      	lsls	r5, r3
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <__aeabi_f2d+0x88>)
 8002120:	0336      	lsls	r6, r6, #12
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	0552      	lsls	r2, r2, #21
 8002126:	0b36      	lsrs	r6, r6, #12
 8002128:	0d53      	lsrs	r3, r2, #21
 800212a:	e7e1      	b.n	80020f0 <__aeabi_f2d+0x20>
 800212c:	2d00      	cmp	r5, #0
 800212e:	d009      	beq.n	8002144 <__aeabi_f2d+0x74>
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	0b36      	lsrs	r6, r6, #12
 8002134:	0312      	lsls	r2, r2, #12
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <__aeabi_f2d+0x8c>)
 8002138:	076d      	lsls	r5, r5, #29
 800213a:	4316      	orrs	r6, r2
 800213c:	e7d8      	b.n	80020f0 <__aeabi_f2d+0x20>
 800213e:	2300      	movs	r3, #0
 8002140:	2600      	movs	r6, #0
 8002142:	e7d5      	b.n	80020f0 <__aeabi_f2d+0x20>
 8002144:	2600      	movs	r6, #0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <__aeabi_f2d+0x8c>)
 8002148:	e7d2      	b.n	80020f0 <__aeabi_f2d+0x20>
 800214a:	0003      	movs	r3, r0
 800214c:	3b0b      	subs	r3, #11
 800214e:	409d      	lsls	r5, r3
 8002150:	002e      	movs	r6, r5
 8002152:	2500      	movs	r5, #0
 8002154:	e7e3      	b.n	800211e <__aeabi_f2d+0x4e>
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	00000389 	.word	0x00000389
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_d2f>:
 8002160:	0002      	movs	r2, r0
 8002162:	004b      	lsls	r3, r1, #1
 8002164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	030c      	lsls	r4, r1, #12
 800216a:	4e3d      	ldr	r6, [pc, #244]	; (8002260 <__aeabi_d2f+0x100>)
 800216c:	0a64      	lsrs	r4, r4, #9
 800216e:	0f40      	lsrs	r0, r0, #29
 8002170:	1c5f      	adds	r7, r3, #1
 8002172:	0fc9      	lsrs	r1, r1, #31
 8002174:	4304      	orrs	r4, r0
 8002176:	00d5      	lsls	r5, r2, #3
 8002178:	4237      	tst	r7, r6
 800217a:	d00a      	beq.n	8002192 <__aeabi_d2f+0x32>
 800217c:	4839      	ldr	r0, [pc, #228]	; (8002264 <__aeabi_d2f+0x104>)
 800217e:	181e      	adds	r6, r3, r0
 8002180:	2efe      	cmp	r6, #254	; 0xfe
 8002182:	dd16      	ble.n	80021b2 <__aeabi_d2f+0x52>
 8002184:	20ff      	movs	r0, #255	; 0xff
 8002186:	2400      	movs	r4, #0
 8002188:	05c0      	lsls	r0, r0, #23
 800218a:	4320      	orrs	r0, r4
 800218c:	07c9      	lsls	r1, r1, #31
 800218e:	4308      	orrs	r0, r1
 8002190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <__aeabi_d2f+0x44>
 8002196:	432c      	orrs	r4, r5
 8002198:	d026      	beq.n	80021e8 <__aeabi_d2f+0x88>
 800219a:	2205      	movs	r2, #5
 800219c:	0192      	lsls	r2, r2, #6
 800219e:	0a54      	lsrs	r4, r2, #9
 80021a0:	b2d8      	uxtb	r0, r3
 80021a2:	e7f1      	b.n	8002188 <__aeabi_d2f+0x28>
 80021a4:	4325      	orrs	r5, r4
 80021a6:	d0ed      	beq.n	8002184 <__aeabi_d2f+0x24>
 80021a8:	2080      	movs	r0, #128	; 0x80
 80021aa:	03c0      	lsls	r0, r0, #15
 80021ac:	4304      	orrs	r4, r0
 80021ae:	20ff      	movs	r0, #255	; 0xff
 80021b0:	e7ea      	b.n	8002188 <__aeabi_d2f+0x28>
 80021b2:	2e00      	cmp	r6, #0
 80021b4:	dd1b      	ble.n	80021ee <__aeabi_d2f+0x8e>
 80021b6:	0192      	lsls	r2, r2, #6
 80021b8:	1e53      	subs	r3, r2, #1
 80021ba:	419a      	sbcs	r2, r3
 80021bc:	00e4      	lsls	r4, r4, #3
 80021be:	0f6d      	lsrs	r5, r5, #29
 80021c0:	4322      	orrs	r2, r4
 80021c2:	432a      	orrs	r2, r5
 80021c4:	0753      	lsls	r3, r2, #29
 80021c6:	d048      	beq.n	800225a <__aeabi_d2f+0xfa>
 80021c8:	230f      	movs	r3, #15
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d000      	beq.n	80021d2 <__aeabi_d2f+0x72>
 80021d0:	3204      	adds	r2, #4
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	04db      	lsls	r3, r3, #19
 80021d6:	4013      	ands	r3, r2
 80021d8:	d03f      	beq.n	800225a <__aeabi_d2f+0xfa>
 80021da:	1c70      	adds	r0, r6, #1
 80021dc:	2efe      	cmp	r6, #254	; 0xfe
 80021de:	d0d1      	beq.n	8002184 <__aeabi_d2f+0x24>
 80021e0:	0192      	lsls	r2, r2, #6
 80021e2:	0a54      	lsrs	r4, r2, #9
 80021e4:	b2c0      	uxtb	r0, r0
 80021e6:	e7cf      	b.n	8002188 <__aeabi_d2f+0x28>
 80021e8:	2000      	movs	r0, #0
 80021ea:	2400      	movs	r4, #0
 80021ec:	e7cc      	b.n	8002188 <__aeabi_d2f+0x28>
 80021ee:	0032      	movs	r2, r6
 80021f0:	3217      	adds	r2, #23
 80021f2:	db22      	blt.n	800223a <__aeabi_d2f+0xda>
 80021f4:	2080      	movs	r0, #128	; 0x80
 80021f6:	0400      	lsls	r0, r0, #16
 80021f8:	4320      	orrs	r0, r4
 80021fa:	241e      	movs	r4, #30
 80021fc:	1ba4      	subs	r4, r4, r6
 80021fe:	2c1f      	cmp	r4, #31
 8002200:	dd1d      	ble.n	800223e <__aeabi_d2f+0xde>
 8002202:	2202      	movs	r2, #2
 8002204:	4252      	negs	r2, r2
 8002206:	1b96      	subs	r6, r2, r6
 8002208:	0002      	movs	r2, r0
 800220a:	40f2      	lsrs	r2, r6
 800220c:	0016      	movs	r6, r2
 800220e:	2c20      	cmp	r4, #32
 8002210:	d004      	beq.n	800221c <__aeabi_d2f+0xbc>
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <__aeabi_d2f+0x108>)
 8002214:	4694      	mov	ip, r2
 8002216:	4463      	add	r3, ip
 8002218:	4098      	lsls	r0, r3
 800221a:	4305      	orrs	r5, r0
 800221c:	002a      	movs	r2, r5
 800221e:	1e53      	subs	r3, r2, #1
 8002220:	419a      	sbcs	r2, r3
 8002222:	4332      	orrs	r2, r6
 8002224:	2600      	movs	r6, #0
 8002226:	0753      	lsls	r3, r2, #29
 8002228:	d1ce      	bne.n	80021c8 <__aeabi_d2f+0x68>
 800222a:	2480      	movs	r4, #128	; 0x80
 800222c:	0013      	movs	r3, r2
 800222e:	04e4      	lsls	r4, r4, #19
 8002230:	2001      	movs	r0, #1
 8002232:	4023      	ands	r3, r4
 8002234:	4222      	tst	r2, r4
 8002236:	d1d3      	bne.n	80021e0 <__aeabi_d2f+0x80>
 8002238:	e7b0      	b.n	800219c <__aeabi_d2f+0x3c>
 800223a:	2300      	movs	r3, #0
 800223c:	e7ad      	b.n	800219a <__aeabi_d2f+0x3a>
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <__aeabi_d2f+0x10c>)
 8002240:	4694      	mov	ip, r2
 8002242:	002a      	movs	r2, r5
 8002244:	40e2      	lsrs	r2, r4
 8002246:	0014      	movs	r4, r2
 8002248:	002a      	movs	r2, r5
 800224a:	4463      	add	r3, ip
 800224c:	409a      	lsls	r2, r3
 800224e:	4098      	lsls	r0, r3
 8002250:	1e55      	subs	r5, r2, #1
 8002252:	41aa      	sbcs	r2, r5
 8002254:	4302      	orrs	r2, r0
 8002256:	4322      	orrs	r2, r4
 8002258:	e7e4      	b.n	8002224 <__aeabi_d2f+0xc4>
 800225a:	0033      	movs	r3, r6
 800225c:	e79e      	b.n	800219c <__aeabi_d2f+0x3c>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	000007fe 	.word	0x000007fe
 8002264:	fffffc80 	.word	0xfffffc80
 8002268:	fffffca2 	.word	0xfffffca2
 800226c:	fffffc82 	.word	0xfffffc82

08002270 <__clzsi2>:
 8002270:	211c      	movs	r1, #28
 8002272:	2301      	movs	r3, #1
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	4298      	cmp	r0, r3
 8002278:	d301      	bcc.n	800227e <__clzsi2+0xe>
 800227a:	0c00      	lsrs	r0, r0, #16
 800227c:	3910      	subs	r1, #16
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	4298      	cmp	r0, r3
 8002282:	d301      	bcc.n	8002288 <__clzsi2+0x18>
 8002284:	0a00      	lsrs	r0, r0, #8
 8002286:	3908      	subs	r1, #8
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	4298      	cmp	r0, r3
 800228c:	d301      	bcc.n	8002292 <__clzsi2+0x22>
 800228e:	0900      	lsrs	r0, r0, #4
 8002290:	3904      	subs	r1, #4
 8002292:	a202      	add	r2, pc, #8	; (adr r2, 800229c <__clzsi2+0x2c>)
 8002294:	5c10      	ldrb	r0, [r2, r0]
 8002296:	1840      	adds	r0, r0, r1
 8002298:	4770      	bx	lr
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	02020304 	.word	0x02020304
 80022a0:	01010101 	.word	0x01010101
	...

080022ac <taskEncoder>:
	asservissement_droit.duty=asservissement_droit.Kp*error1+asservissement_droit.Ki*asservissement_droit.integration;
	avance_droit(asservissement_droit.duty/1000);

}

void taskEncoder(void *pEncoder){
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur créée\r\n");
 80022b4:	4bc0      	ldr	r3, [pc, #768]	; (80025b8 <taskEncoder+0x30c>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f00f fe0e 	bl	8011ed8 <puts>
	vTaskSuspend(0);
 80022bc:	2000      	movs	r0, #0
 80022be:	f00d ff8d 	bl	80101dc <vTaskSuspend>

	encoder_left.Ts= 5;
 80022c2:	4bbe      	ldr	r3, [pc, #760]	; (80025bc <taskEncoder+0x310>)
 80022c4:	22d0      	movs	r2, #208	; 0xd0
 80022c6:	2105      	movs	r1, #5
 80022c8:	5499      	strb	r1, [r3, r2]
	encoder_right.Ts = 5;
 80022ca:	4bbd      	ldr	r3, [pc, #756]	; (80025c0 <taskEncoder+0x314>)
 80022cc:	22d0      	movs	r2, #208	; 0xd0
 80022ce:	2105      	movs	r1, #5
 80022d0:	5499      	strb	r1, [r3, r2]

	encoder_left.position=0;
 80022d2:	4bba      	ldr	r3, [pc, #744]	; (80025bc <taskEncoder+0x310>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	805a      	strh	r2, [r3, #2]
	encoder_right.position=0;
 80022d8:	4bb9      	ldr	r3, [pc, #740]	; (80025c0 <taskEncoder+0x314>)
 80022da:	2200      	movs	r2, #0
 80022dc:	805a      	strh	r2, [r3, #2]


	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80022de:	4bb9      	ldr	r3, [pc, #740]	; (80025c4 <taskEncoder+0x318>)
 80022e0:	213c      	movs	r1, #60	; 0x3c
 80022e2:	0018      	movs	r0, r3
 80022e4:	f005 fa12 	bl	800770c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80022e8:	4bb7      	ldr	r3, [pc, #732]	; (80025c8 <taskEncoder+0x31c>)
 80022ea:	213c      	movs	r1, #60	; 0x3c
 80022ec:	0018      	movs	r0, r3
 80022ee:	f005 fa0d 	bl	800770c <HAL_TIM_Encoder_Start>
	int index = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
	for(;;){
		encoder_left.speed=0;
 80022f6:	4bb1      	ldr	r3, [pc, #708]	; (80025bc <taskEncoder+0x310>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
		encoder_right.speed=0;
 80022fc:	4bb0      	ldr	r3, [pc, #704]	; (80025c0 <taskEncoder+0x314>)
 80022fe:	2200      	movs	r2, #0
 8002300:	605a      	str	r2, [r3, #4]
		encoder_left.countTIM = __HAL_TIM_GET_COUNTER(&htim1);
 8002302:	4bb0      	ldr	r3, [pc, #704]	; (80025c4 <taskEncoder+0x318>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	b21a      	sxth	r2, r3
 800230a:	4bac      	ldr	r3, [pc, #688]	; (80025bc <taskEncoder+0x310>)
 800230c:	801a      	strh	r2, [r3, #0]
		encoder_right.countTIM =__HAL_TIM_GET_COUNTER(&htim3);
 800230e:	4bae      	ldr	r3, [pc, #696]	; (80025c8 <taskEncoder+0x31c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	b21a      	sxth	r2, r3
 8002316:	4baa      	ldr	r3, [pc, #680]	; (80025c0 <taskEncoder+0x314>)
 8002318:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 800231a:	4baa      	ldr	r3, [pc, #680]	; (80025c4 <taskEncoder+0x318>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002322:	4ba9      	ldr	r3, [pc, #676]	; (80025c8 <taskEncoder+0x31c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
		if (encoder_left.countTIM<((TIM1->ARR)/2)){//recule
 800232a:	4ba4      	ldr	r3, [pc, #656]	; (80025bc <taskEncoder+0x310>)
 800232c:	2200      	movs	r2, #0
 800232e:	5e9b      	ldrsh	r3, [r3, r2]
 8002330:	001a      	movs	r2, r3
 8002332:	4ba6      	ldr	r3, [pc, #664]	; (80025cc <taskEncoder+0x320>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d300      	bcc.n	800233e <taskEncoder+0x92>
 800233c:	e096      	b.n	800246c <taskEncoder+0x1c0>
			encoder_left.tab_pos[index]=-1*encoder_left.countTIM;
 800233e:	4b9f      	ldr	r3, [pc, #636]	; (80025bc <taskEncoder+0x310>)
 8002340:	2200      	movs	r2, #0
 8002342:	5e9b      	ldrsh	r3, [r3, r2]
 8002344:	b29b      	uxth	r3, r3
 8002346:	425b      	negs	r3, r3
 8002348:	b29b      	uxth	r3, r3
 800234a:	b219      	sxth	r1, r3
 800234c:	4b9b      	ldr	r3, [pc, #620]	; (80025bc <taskEncoder+0x310>)
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	3204      	adds	r2, #4
 8002352:	0052      	lsls	r2, r2, #1
 8002354:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM-(TIM1->ARR);
 8002356:	4b9a      	ldr	r3, [pc, #616]	; (80025c0 <taskEncoder+0x314>)
 8002358:	2200      	movs	r2, #0
 800235a:	5e9b      	ldrsh	r3, [r3, r2]
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b9b      	ldr	r3, [pc, #620]	; (80025cc <taskEncoder+0x320>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	b29b      	uxth	r3, r3
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	b219      	sxth	r1, r3
 800236a:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <taskEncoder+0x314>)
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	3204      	adds	r2, #4
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=-1*(encoder_left.countTIM/REVOLUTION)*2*PI*R/1000;
 8002374:	4b91      	ldr	r3, [pc, #580]	; (80025bc <taskEncoder+0x310>)
 8002376:	2202      	movs	r2, #2
 8002378:	5e9b      	ldrsh	r3, [r3, r2]
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fe52 	bl	8002024 <__aeabi_i2d>
 8002380:	0004      	movs	r4, r0
 8002382:	000d      	movs	r5, r1
 8002384:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <taskEncoder+0x310>)
 8002386:	2200      	movs	r2, #0
 8002388:	5e9b      	ldrsh	r3, [r3, r2]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	0018      	movs	r0, r3
 800238e:	f7fd ff61 	bl	8000254 <__divsi3>
 8002392:	0003      	movs	r3, r0
 8002394:	b21b      	sxth	r3, r3
 8002396:	001a      	movs	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fe3f 	bl	8002024 <__aeabi_i2d>
 80023a6:	4a8a      	ldr	r2, [pc, #552]	; (80025d0 <taskEncoder+0x324>)
 80023a8:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <taskEncoder+0x328>)
 80023aa:	f7fe ffe9 	bl	8001380 <__aeabi_dmul>
 80023ae:	0002      	movs	r2, r0
 80023b0:	000b      	movs	r3, r1
 80023b2:	0010      	movs	r0, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	2200      	movs	r2, #0
 80023b8:	4b87      	ldr	r3, [pc, #540]	; (80025d8 <taskEncoder+0x32c>)
 80023ba:	f7fe ffe1 	bl	8001380 <__aeabi_dmul>
 80023be:	0002      	movs	r2, r0
 80023c0:	000b      	movs	r3, r1
 80023c2:	0010      	movs	r0, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <taskEncoder+0x330>)
 80023ca:	f7fe fbd7 	bl	8000b7c <__aeabi_ddiv>
 80023ce:	0002      	movs	r2, r0
 80023d0:	000b      	movs	r3, r1
 80023d2:	0020      	movs	r0, r4
 80023d4:	0029      	movs	r1, r5
 80023d6:	f7fe f895 	bl	8000504 <__aeabi_dadd>
 80023da:	0002      	movs	r2, r0
 80023dc:	000b      	movs	r3, r1
 80023de:	0010      	movs	r0, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	f7ff fde9 	bl	8001fb8 <__aeabi_d2iz>
 80023e6:	0003      	movs	r3, r0
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	4b74      	ldr	r3, [pc, #464]	; (80025bc <taskEncoder+0x310>)
 80023ec:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM-(TIM1->ARR))/REVOLUTION*2*PI*R/1000;
 80023ee:	4b74      	ldr	r3, [pc, #464]	; (80025c0 <taskEncoder+0x314>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	5e9b      	ldrsh	r3, [r3, r2]
 80023f4:	001a      	movs	r2, r3
 80023f6:	4b75      	ldr	r3, [pc, #468]	; (80025cc <taskEncoder+0x320>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fd fe9e 	bl	8000140 <__udivsi3>
 8002404:	0003      	movs	r3, r0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	0018      	movs	r0, r3
 800240a:	f7ff fe3b 	bl	8002084 <__aeabi_ui2d>
 800240e:	4a70      	ldr	r2, [pc, #448]	; (80025d0 <taskEncoder+0x324>)
 8002410:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <taskEncoder+0x328>)
 8002412:	f7fe ffb5 	bl	8001380 <__aeabi_dmul>
 8002416:	0002      	movs	r2, r0
 8002418:	000b      	movs	r3, r1
 800241a:	0010      	movs	r0, r2
 800241c:	0019      	movs	r1, r3
 800241e:	2200      	movs	r2, #0
 8002420:	4b6d      	ldr	r3, [pc, #436]	; (80025d8 <taskEncoder+0x32c>)
 8002422:	f7fe ffad 	bl	8001380 <__aeabi_dmul>
 8002426:	0002      	movs	r2, r0
 8002428:	000b      	movs	r3, r1
 800242a:	0010      	movs	r0, r2
 800242c:	0019      	movs	r1, r3
 800242e:	2200      	movs	r2, #0
 8002430:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <taskEncoder+0x330>)
 8002432:	f7fe fba3 	bl	8000b7c <__aeabi_ddiv>
 8002436:	0002      	movs	r2, r0
 8002438:	000b      	movs	r3, r1
 800243a:	0014      	movs	r4, r2
 800243c:	001d      	movs	r5, r3
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <taskEncoder+0x314>)
 8002440:	2202      	movs	r2, #2
 8002442:	5e9b      	ldrsh	r3, [r3, r2]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff fded 	bl	8002024 <__aeabi_i2d>
 800244a:	0002      	movs	r2, r0
 800244c:	000b      	movs	r3, r1
 800244e:	0020      	movs	r0, r4
 8002450:	0029      	movs	r1, r5
 8002452:	f7fe f857 	bl	8000504 <__aeabi_dadd>
 8002456:	0002      	movs	r2, r0
 8002458:	000b      	movs	r3, r1
 800245a:	0010      	movs	r0, r2
 800245c:	0019      	movs	r1, r3
 800245e:	f7ff fdab 	bl	8001fb8 <__aeabi_d2iz>
 8002462:	0003      	movs	r3, r0
 8002464:	b21a      	sxth	r2, r3
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <taskEncoder+0x314>)
 8002468:	805a      	strh	r2, [r3, #2]
 800246a:	e08c      	b.n	8002586 <taskEncoder+0x2da>
		}
		else{//avance
			encoder_left.tab_pos[index]=(TIM1->ARR)-encoder_left.countTIM;
 800246c:	4b57      	ldr	r3, [pc, #348]	; (80025cc <taskEncoder+0x320>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <taskEncoder+0x310>)
 8002474:	2100      	movs	r1, #0
 8002476:	5e5b      	ldrsh	r3, [r3, r1]
 8002478:	b29b      	uxth	r3, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	b219      	sxth	r1, r3
 8002480:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <taskEncoder+0x310>)
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	3204      	adds	r2, #4
 8002486:	0052      	lsls	r2, r2, #1
 8002488:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM;
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <taskEncoder+0x314>)
 800248c:	2100      	movs	r1, #0
 800248e:	5e59      	ldrsh	r1, [r3, r1]
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <taskEncoder+0x314>)
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	3204      	adds	r2, #4
 8002496:	0052      	lsls	r2, r2, #1
 8002498:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=((TIM1->ARR)-encoder_left.countTIM)/REVOLUTION*2*PI*R/1000;
 800249a:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <taskEncoder+0x320>)
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <taskEncoder+0x310>)
 80024a0:	2100      	movs	r1, #0
 80024a2:	5e52      	ldrsh	r2, [r2, r1]
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fd fe49 	bl	8000140 <__udivsi3>
 80024ae:	0003      	movs	r3, r0
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff fde6 	bl	8002084 <__aeabi_ui2d>
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <taskEncoder+0x324>)
 80024ba:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <taskEncoder+0x328>)
 80024bc:	f7fe ff60 	bl	8001380 <__aeabi_dmul>
 80024c0:	0002      	movs	r2, r0
 80024c2:	000b      	movs	r3, r1
 80024c4:	0010      	movs	r0, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <taskEncoder+0x32c>)
 80024cc:	f7fe ff58 	bl	8001380 <__aeabi_dmul>
 80024d0:	0002      	movs	r2, r0
 80024d2:	000b      	movs	r3, r1
 80024d4:	0010      	movs	r0, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <taskEncoder+0x330>)
 80024dc:	f7fe fb4e 	bl	8000b7c <__aeabi_ddiv>
 80024e0:	0002      	movs	r2, r0
 80024e2:	000b      	movs	r3, r1
 80024e4:	0014      	movs	r4, r2
 80024e6:	001d      	movs	r5, r3
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <taskEncoder+0x310>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	5e9b      	ldrsh	r3, [r3, r2]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff fd98 	bl	8002024 <__aeabi_i2d>
 80024f4:	0002      	movs	r2, r0
 80024f6:	000b      	movs	r3, r1
 80024f8:	0020      	movs	r0, r4
 80024fa:	0029      	movs	r1, r5
 80024fc:	f7fe f802 	bl	8000504 <__aeabi_dadd>
 8002500:	0002      	movs	r2, r0
 8002502:	000b      	movs	r3, r1
 8002504:	0010      	movs	r0, r2
 8002506:	0019      	movs	r1, r3
 8002508:	f7ff fd56 	bl	8001fb8 <__aeabi_d2iz>
 800250c:	0003      	movs	r3, r0
 800250e:	b21a      	sxth	r2, r3
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <taskEncoder+0x310>)
 8002512:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM/REVOLUTION)*2*PI*R/1000;
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <taskEncoder+0x314>)
 8002516:	2202      	movs	r2, #2
 8002518:	5e9b      	ldrsh	r3, [r3, r2]
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff fd82 	bl	8002024 <__aeabi_i2d>
 8002520:	0004      	movs	r4, r0
 8002522:	000d      	movs	r5, r1
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <taskEncoder+0x314>)
 8002526:	2200      	movs	r2, #0
 8002528:	5e9b      	ldrsh	r3, [r3, r2]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	0018      	movs	r0, r3
 800252e:	f7fd fe91 	bl	8000254 <__divsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	b21b      	sxth	r3, r3
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff fd73 	bl	8002024 <__aeabi_i2d>
 800253e:	4a24      	ldr	r2, [pc, #144]	; (80025d0 <taskEncoder+0x324>)
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <taskEncoder+0x328>)
 8002542:	f7fe ff1d 	bl	8001380 <__aeabi_dmul>
 8002546:	0002      	movs	r2, r0
 8002548:	000b      	movs	r3, r1
 800254a:	0010      	movs	r0, r2
 800254c:	0019      	movs	r1, r3
 800254e:	2200      	movs	r2, #0
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <taskEncoder+0x32c>)
 8002552:	f7fe ff15 	bl	8001380 <__aeabi_dmul>
 8002556:	0002      	movs	r2, r0
 8002558:	000b      	movs	r3, r1
 800255a:	0010      	movs	r0, r2
 800255c:	0019      	movs	r1, r3
 800255e:	2200      	movs	r2, #0
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <taskEncoder+0x330>)
 8002562:	f7fe fb0b 	bl	8000b7c <__aeabi_ddiv>
 8002566:	0002      	movs	r2, r0
 8002568:	000b      	movs	r3, r1
 800256a:	0020      	movs	r0, r4
 800256c:	0029      	movs	r1, r5
 800256e:	f7fd ffc9 	bl	8000504 <__aeabi_dadd>
 8002572:	0002      	movs	r2, r0
 8002574:	000b      	movs	r3, r1
 8002576:	0010      	movs	r0, r2
 8002578:	0019      	movs	r1, r3
 800257a:	f7ff fd1d 	bl	8001fb8 <__aeabi_d2iz>
 800257e:	0003      	movs	r3, r0
 8002580:	b21a      	sxth	r2, r3
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <taskEncoder+0x314>)
 8002584:	805a      	strh	r2, [r3, #2]

		}
		index++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
		if(index==TAB_SIZE){
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d10b      	bne.n	80025aa <taskEncoder+0x2fe>
			xTaskNotifyGive(h_encoder_print);
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <taskEncoder+0x334>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	2202      	movs	r2, #2
 800259a:	2100      	movs	r1, #0
 800259c:	f00e f9d8 	bl	8010950 <xTaskGenericNotify>
			vTaskSuspend(0);
 80025a0:	2000      	movs	r0, #0
 80025a2:	f00d fe1b 	bl	80101dc <vTaskSuspend>
			index=0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
		}
		vTaskDelay(encoder_left.Ts);
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <taskEncoder+0x310>)
 80025ac:	22d0      	movs	r2, #208	; 0xd0
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f00d fded 	bl	8010190 <vTaskDelay>
		encoder_left.speed=0;
 80025b6:	e69e      	b.n	80022f6 <taskEncoder+0x4a>
 80025b8:	08014620 	.word	0x08014620
 80025bc:	200004e0 	.word	0x200004e0
 80025c0:	200005b4 	.word	0x200005b4
 80025c4:	200007bc 	.word	0x200007bc
 80025c8:	20000808 	.word	0x20000808
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	f01b866e 	.word	0xf01b866e
 80025d4:	400921f9 	.word	0x400921f9
 80025d8:	40350000 	.word	0x40350000
 80025dc:	408f4000 	.word	0x408f4000
 80025e0:	200004dc 	.word	0x200004dc

080025e4 <taskEncoderPrint>:
	}
}

void taskEncoderPrint(void *pPrint){
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur print créée\r\n");
 80025ec:	4b69      	ldr	r3, [pc, #420]	; (8002794 <taskEncoderPrint+0x1b0>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f00f fc72 	bl	8011ed8 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80025f4:	2301      	movs	r3, #1
 80025f6:	425b      	negs	r3, r3
 80025f8:	0019      	movs	r1, r3
 80025fa:	2001      	movs	r0, #1
 80025fc:	f00e f966 	bl	80108cc <ulTaskNotifyTake>
		for(int i=0;i<TAB_SIZE;i++){
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e012      	b.n	800262c <taskEncoderPrint+0x48>
			printf("l:%d  r:%d\r\n",encoder_left.tab_pos[i],encoder_right.tab_pos[i]);
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <taskEncoderPrint+0x1b4>)
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	3204      	adds	r2, #4
 800260c:	0052      	lsls	r2, r2, #1
 800260e:	5ed3      	ldrsh	r3, [r2, r3]
 8002610:	0019      	movs	r1, r3
 8002612:	4b62      	ldr	r3, [pc, #392]	; (800279c <taskEncoderPrint+0x1b8>)
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	3204      	adds	r2, #4
 8002618:	0052      	lsls	r2, r2, #1
 800261a:	5ed3      	ldrsh	r3, [r2, r3]
 800261c:	001a      	movs	r2, r3
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <taskEncoderPrint+0x1bc>)
 8002620:	0018      	movs	r0, r3
 8002622:	f00f fbcd 	bl	8011dc0 <iprintf>
		for(int i=0;i<TAB_SIZE;i++){
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b63      	cmp	r3, #99	; 0x63
 8002630:	dde9      	ble.n	8002606 <taskEncoderPrint+0x22>
		}
		printf("pos l:%d  pos r:%d\r\n",encoder_left.position,encoder_right.position);
 8002632:	4b59      	ldr	r3, [pc, #356]	; (8002798 <taskEncoderPrint+0x1b4>)
 8002634:	2202      	movs	r2, #2
 8002636:	5e9b      	ldrsh	r3, [r3, r2]
 8002638:	0019      	movs	r1, r3
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <taskEncoderPrint+0x1b8>)
 800263c:	2202      	movs	r2, #2
 800263e:	5e9b      	ldrsh	r3, [r3, r2]
 8002640:	001a      	movs	r2, r3
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <taskEncoderPrint+0x1c0>)
 8002644:	0018      	movs	r0, r3
 8002646:	f00f fbbb 	bl	8011dc0 <iprintf>
		printf("%f  %d",encoder_left.speed,encoder_left.tab_pos[TAB_SIZE-1]);
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <taskEncoderPrint+0x1b4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	1c18      	adds	r0, r3, #0
 8002650:	f7ff fd3e 	bl	80020d0 <__aeabi_f2d>
 8002654:	0002      	movs	r2, r0
 8002656:	000b      	movs	r3, r1
 8002658:	494f      	ldr	r1, [pc, #316]	; (8002798 <taskEncoderPrint+0x1b4>)
 800265a:	20ce      	movs	r0, #206	; 0xce
 800265c:	5e09      	ldrsh	r1, [r1, r0]
 800265e:	0008      	movs	r0, r1
 8002660:	4951      	ldr	r1, [pc, #324]	; (80027a8 <taskEncoderPrint+0x1c4>)
 8002662:	9000      	str	r0, [sp, #0]
 8002664:	0008      	movs	r0, r1
 8002666:	f00f fbab 	bl	8011dc0 <iprintf>
		encoder_left.speed=((encoder_left.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_left.Ts*1000); //speed en m/S
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <taskEncoderPrint+0x1b4>)
 800266c:	22ce      	movs	r2, #206	; 0xce
 800266e:	5e9b      	ldrsh	r3, [r3, r2]
 8002670:	001a      	movs	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	189b      	adds	r3, r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	0018      	movs	r0, r3
 8002682:	f7fd fde7 	bl	8000254 <__divsi3>
 8002686:	0003      	movs	r3, r0
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fcca 	bl	8002024 <__aeabi_i2d>
 8002690:	4a46      	ldr	r2, [pc, #280]	; (80027ac <taskEncoderPrint+0x1c8>)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <taskEncoderPrint+0x1cc>)
 8002694:	f7fe fe74 	bl	8001380 <__aeabi_dmul>
 8002698:	0002      	movs	r2, r0
 800269a:	000b      	movs	r3, r1
 800269c:	0010      	movs	r0, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <taskEncoderPrint+0x1d0>)
 80026a4:	f7fe fe6c 	bl	8001380 <__aeabi_dmul>
 80026a8:	0002      	movs	r2, r0
 80026aa:	000b      	movs	r3, r1
 80026ac:	0014      	movs	r4, r2
 80026ae:	001d      	movs	r5, r3
 80026b0:	4b39      	ldr	r3, [pc, #228]	; (8002798 <taskEncoderPrint+0x1b4>)
 80026b2:	22d0      	movs	r2, #208	; 0xd0
 80026b4:	5c9b      	ldrb	r3, [r3, r2]
 80026b6:	001a      	movs	r2, r3
 80026b8:	0013      	movs	r3, r2
 80026ba:	015b      	lsls	r3, r3, #5
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff fcad 	bl	8002024 <__aeabi_i2d>
 80026ca:	0002      	movs	r2, r0
 80026cc:	000b      	movs	r3, r1
 80026ce:	0020      	movs	r0, r4
 80026d0:	0029      	movs	r1, r5
 80026d2:	f7fe fa53 	bl	8000b7c <__aeabi_ddiv>
 80026d6:	0002      	movs	r2, r0
 80026d8:	000b      	movs	r3, r1
 80026da:	0010      	movs	r0, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	f7ff fd3f 	bl	8002160 <__aeabi_d2f>
 80026e2:	1c02      	adds	r2, r0, #0
 80026e4:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <taskEncoderPrint+0x1b4>)
 80026e6:	605a      	str	r2, [r3, #4]
		encoder_right.speed=((encoder_right.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_right.Ts*1000);
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <taskEncoderPrint+0x1b8>)
 80026ea:	22ce      	movs	r2, #206	; 0xce
 80026ec:	5e9b      	ldrsh	r3, [r3, r2]
 80026ee:	001a      	movs	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	015b      	lsls	r3, r3, #5
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fd fda8 	bl	8000254 <__divsi3>
 8002704:	0003      	movs	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff fc8b 	bl	8002024 <__aeabi_i2d>
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <taskEncoderPrint+0x1c8>)
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <taskEncoderPrint+0x1cc>)
 8002712:	f7fe fe35 	bl	8001380 <__aeabi_dmul>
 8002716:	0002      	movs	r2, r0
 8002718:	000b      	movs	r3, r1
 800271a:	0010      	movs	r0, r2
 800271c:	0019      	movs	r1, r3
 800271e:	2200      	movs	r2, #0
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <taskEncoderPrint+0x1d0>)
 8002722:	f7fe fe2d 	bl	8001380 <__aeabi_dmul>
 8002726:	0002      	movs	r2, r0
 8002728:	000b      	movs	r3, r1
 800272a:	0014      	movs	r4, r2
 800272c:	001d      	movs	r5, r3
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <taskEncoderPrint+0x1b8>)
 8002730:	22d0      	movs	r2, #208	; 0xd0
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	001a      	movs	r2, r3
 8002736:	0013      	movs	r3, r2
 8002738:	015b      	lsls	r3, r3, #5
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	189b      	adds	r3, r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff fc6e 	bl	8002024 <__aeabi_i2d>
 8002748:	0002      	movs	r2, r0
 800274a:	000b      	movs	r3, r1
 800274c:	0020      	movs	r0, r4
 800274e:	0029      	movs	r1, r5
 8002750:	f7fe fa14 	bl	8000b7c <__aeabi_ddiv>
 8002754:	0002      	movs	r2, r0
 8002756:	000b      	movs	r3, r1
 8002758:	0010      	movs	r0, r2
 800275a:	0019      	movs	r1, r3
 800275c:	f7ff fd00 	bl	8002160 <__aeabi_d2f>
 8002760:	1c02      	adds	r2, r0, #0
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <taskEncoderPrint+0x1b8>)
 8002764:	605a      	str	r2, [r3, #4]
		printf("speed l:%f  speed r:%f\r\n",encoder_left.speed,encoder_right.speed);
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <taskEncoderPrint+0x1b4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	1c18      	adds	r0, r3, #0
 800276c:	f7ff fcb0 	bl	80020d0 <__aeabi_f2d>
 8002770:	0004      	movs	r4, r0
 8002772:	000d      	movs	r5, r1
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <taskEncoderPrint+0x1b8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	1c18      	adds	r0, r3, #0
 800277a:	f7ff fca9 	bl	80020d0 <__aeabi_f2d>
 800277e:	0002      	movs	r2, r0
 8002780:	000b      	movs	r3, r1
 8002782:	490d      	ldr	r1, [pc, #52]	; (80027b8 <taskEncoderPrint+0x1d4>)
 8002784:	9200      	str	r2, [sp, #0]
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	0022      	movs	r2, r4
 800278a:	002b      	movs	r3, r5
 800278c:	0008      	movs	r0, r1
 800278e:	f00f fb17 	bl	8011dc0 <iprintf>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002792:	e72f      	b.n	80025f4 <taskEncoderPrint+0x10>
 8002794:	0801463c 	.word	0x0801463c
 8002798:	200004e0 	.word	0x200004e0
 800279c:	200005b4 	.word	0x200005b4
 80027a0:	0801465c 	.word	0x0801465c
 80027a4:	0801466c 	.word	0x0801466c
 80027a8:	08014684 	.word	0x08014684
 80027ac:	f01b866e 	.word	0xf01b866e
 80027b0:	400921f9 	.word	0x400921f9
 80027b4:	40350000 	.word	0x40350000
 80027b8:	0801468c 	.word	0x0801468c

080027bc <avance>:
	}
	return 0;
}
 */

int avance(int vitesse){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <avance+0x4c>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f005 ff03 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <avance+0x50>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f004 fe06 	bl	80073e4 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <avance+0x4c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <avance+0x50>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80027e8:	4b07      	ldr	r3, [pc, #28]	; (8002808 <avance+0x4c>)
 80027ea:	2100      	movs	r1, #0
 80027ec:	0018      	movs	r0, r3
 80027ee:	f004 fd15 	bl	800721c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <avance+0x50>)
 80027f4:	2100      	movs	r1, #0
 80027f6:	0018      	movs	r0, r3
 80027f8:	f005 fe4e 	bl	8008498 <HAL_TIMEx_PWMN_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	200008a0 	.word	0x200008a0
 800280c:	200008ec 	.word	0x200008ec

08002810 <recule>:

int recule(int vitesse){
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <recule+0x4c>)
 800281a:	2100      	movs	r1, #0
 800281c:	0018      	movs	r0, r3
 800281e:	f004 fde1 	bl	80073e4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <recule+0x50>)
 8002824:	2100      	movs	r1, #0
 8002826:	0018      	movs	r0, r3
 8002828:	f005 fed4 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <recule+0x4c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <recule+0x50>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <recule+0x4c>)
 800283e:	2100      	movs	r1, #0
 8002840:	0018      	movs	r0, r3
 8002842:	f005 fe29 	bl	8008498 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <recule+0x50>)
 8002848:	2100      	movs	r1, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f004 fce6 	bl	800721c <HAL_TIM_PWM_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	200008a0 	.word	0x200008a0
 8002860:	200008ec 	.word	0x200008ec

08002864 <stop>:

int stop(void){
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <stop+0x34>)
 800286a:	2100      	movs	r1, #0
 800286c:	0018      	movs	r0, r3
 800286e:	f004 fdb9 	bl	80073e4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <stop+0x38>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f005 feac 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <stop+0x34>)
 800287e:	2100      	movs	r1, #0
 8002880:	0018      	movs	r0, r3
 8002882:	f005 fea7 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <stop+0x38>)
 8002888:	2100      	movs	r1, #0
 800288a:	0018      	movs	r0, r3
 800288c:	f004 fdaa 	bl	80073e4 <HAL_TIM_PWM_Stop>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200008a0 	.word	0x200008a0
 800289c:	200008ec 	.word	0x200008ec

080028a0 <gauche>:

int gauche(int vitesse){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	//Le moteur droit avance
	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <gauche+0x4c>)
 80028aa:	2100      	movs	r1, #0
 80028ac:	0018      	movs	r0, r3
 80028ae:	f005 fe91 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <gauche+0x4c>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	0018      	movs	r0, r3
 80028b8:	f004 fcb0 	bl	800721c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <gauche+0x4c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <gauche+0x50>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche recule (voir si on doit plutôt l'arrêter)
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <gauche+0x50>)
 80028ce:	2100      	movs	r1, #0
 80028d0:	0018      	movs	r0, r3
 80028d2:	f005 fe7f 	bl	80085d4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <gauche+0x50>)
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f004 fc9e 	bl	800721c <HAL_TIM_PWM_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	200008a0 	.word	0x200008a0
 80028f0:	200008ec 	.word	0x200008ec

080028f4 <droite>:

int droite(int vitesse){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

	//Le moteur droit recule (voir si on doit plutôt l'arrêter)
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <droite+0x4c>)
 80028fe:	2100      	movs	r1, #0
 8002900:	0018      	movs	r0, r3
 8002902:	f004 fd6f 	bl	80073e4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <droite+0x4c>)
 8002908:	2100      	movs	r1, #0
 800290a:	0018      	movs	r0, r3
 800290c:	f005 fdc4 	bl	8008498 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <droite+0x4c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <droite+0x50>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche avance
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <droite+0x50>)
 8002922:	2100      	movs	r1, #0
 8002924:	0018      	movs	r0, r3
 8002926:	f004 fd5d 	bl	80073e4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <droite+0x50>)
 800292c:	2100      	movs	r1, #0
 800292e:	0018      	movs	r0, r3
 8002930:	f005 fdb2 	bl	8008498 <HAL_TIMEx_PWMN_Start>

	//Appel taskMotor
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	200008a0 	.word	0x200008a0
 8002944:	200008ec 	.word	0x200008ec

08002948 <taskBordure>:

	//vTaskSuspend(h_motor);
	return 0;
}

void taskBordure(void *pMotor){
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	printf("Tâche bordure créée\r\n");
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <taskBordure+0xac>)
 8002952:	0018      	movs	r0, r3
 8002954:	f00f fac0 	bl	8011ed8 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002958:	2301      	movs	r3, #1
 800295a:	425b      	negs	r3, r3
 800295c:	0019      	movs	r1, r3
 800295e:	2001      	movs	r0, #1
 8002960:	f00d ffb4 	bl	80108cc <ulTaskNotifyTake>
		//vTaskSuspend(h_tof);
		vTaskSuspend(h_recherche);
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <taskBordure+0xb0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f00d fc37 	bl	80101dc <vTaskSuspend>
		vTaskSuspend(h_trouve);
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <taskBordure+0xb4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0018      	movs	r0, r3
 8002974:	f00d fc32 	bl	80101dc <vTaskSuspend>
		//vTaskSuspend(h_attrape);
		printf("Je suis sur une bordure");
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <taskBordure+0xb8>)
 800297a:	0018      	movs	r0, r3
 800297c:	f00f fa20 	bl	8011dc0 <iprintf>
		//((h_motor_t *)pMotor)->cmd = 'r';
		//((h_motor_t *)pMotor)->speed = 300;
		//xTaskNotifyGive(h_motor);
		vTaskDelay(3);
 8002980:	2003      	movs	r0, #3
 8002982:	f00d fc05 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='r';
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <taskBordure+0xbc>)
 8002988:	2272      	movs	r2, #114	; 0x72
 800298a:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <taskBordure+0xc0>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	2300      	movs	r3, #0
 8002992:	2202      	movs	r2, #2
 8002994:	2100      	movs	r1, #0
 8002996:	f00d ffdb 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(400);
 800299a:	23c8      	movs	r3, #200	; 0xc8
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	0018      	movs	r0, r3
 80029a0:	f00d fbf6 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='d';
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <taskBordure+0xbc>)
 80029a6:	2264      	movs	r2, #100	; 0x64
 80029a8:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <taskBordure+0xc0>)
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	2202      	movs	r2, #2
 80029b2:	2100      	movs	r1, #0
 80029b4:	f00d ffcc 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(300);
 80029b8:	2396      	movs	r3, #150	; 0x96
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	0018      	movs	r0, r3
 80029be:	f00d fbe7 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='a';
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <taskBordure+0xbc>)
 80029c4:	2261      	movs	r2, #97	; 0x61
 80029c6:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <taskBordure+0xc0>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2202      	movs	r2, #2
 80029d0:	2100      	movs	r1, #0
 80029d2:	f00d ffbd 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 80029d6:	20c8      	movs	r0, #200	; 0xc8
 80029d8:	f00d fbda 	bl	8010190 <vTaskDelay>
		//vTaskResume(h_tof);
		vTaskResume(h_recherche);
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <taskBordure+0xb0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f00d fc87 	bl	80102f4 <vTaskResume>
		vTaskResume(h_trouve);
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <taskBordure+0xb4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f00d fc82 	bl	80102f4 <vTaskResume>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80029f0:	e7b2      	b.n	8002958 <taskBordure+0x10>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	0801480c 	.word	0x0801480c
 80029f8:	20000694 	.word	0x20000694
 80029fc:	2000069c 	.word	0x2000069c
 8002a00:	08014824 	.word	0x08014824
 8002a04:	2000068c 	.word	0x2000068c
 8002a08:	20000688 	.word	0x20000688

08002a0c <taskRecherche>:

}


//La tache recherche fonctionne mal
void taskRecherche(void *pMotor){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	printf("Tâche recherche créée\r\n");
 8002a14:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <taskRecherche+0x110>)
 8002a16:	0018      	movs	r0, r3
 8002a18:	f00f fa5e 	bl	8011ed8 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	425b      	negs	r3, r3
 8002a20:	0019      	movs	r1, r3
 8002a22:	2001      	movs	r0, #1
 8002a24:	f00d ff52 	bl	80108cc <ulTaskNotifyTake>
		vTaskSuspend(h_trouve);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <taskRecherche+0x114>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f00d fbd5 	bl	80101dc <vTaskSuspend>
		vTaskDelay(3);
 8002a32:	2003      	movs	r0, #3
 8002a34:	f00d fbac 	bl	8010190 <vTaskDelay>
		int angle_droit = round(rand()/6000000);
 8002a38:	f00f fa58 	bl	8011eec <rand>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	4939      	ldr	r1, [pc, #228]	; (8002b24 <taskRecherche+0x118>)
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fd fc07 	bl	8000254 <__divsi3>
 8002a46:	0003      	movs	r3, r0
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7ff faeb 	bl	8002024 <__aeabi_i2d>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	000b      	movs	r3, r1
 8002a52:	0010      	movs	r0, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	f7ff faaf 	bl	8001fb8 <__aeabi_d2iz>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	60fb      	str	r3, [r7, #12]
		int angle_gauche = round(rand()/6000000);
 8002a5e:	f00f fa45 	bl	8011eec <rand>
 8002a62:	0003      	movs	r3, r0
 8002a64:	492f      	ldr	r1, [pc, #188]	; (8002b24 <taskRecherche+0x118>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fbf4 	bl	8000254 <__divsi3>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff fad8 	bl	8002024 <__aeabi_i2d>
 8002a74:	0002      	movs	r2, r0
 8002a76:	000b      	movs	r3, r1
 8002a78:	0010      	movs	r0, r2
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	f7ff fa9c 	bl	8001fb8 <__aeabi_d2iz>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60bb      	str	r3, [r7, #8]
		h_cmd_motor.cmd='a';
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <taskRecherche+0x11c>)
 8002a86:	2261      	movs	r2, #97	; 0x61
 8002a88:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <taskRecherche+0x120>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2202      	movs	r2, #2
 8002a92:	2100      	movs	r1, #0
 8002a94:	f00d ff5c 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(400);
 8002a98:	23c8      	movs	r3, #200	; 0xc8
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f00d fb77 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='d';
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <taskRecherche+0x11c>)
 8002aa4:	2264      	movs	r2, #100	; 0x64
 8002aa6:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <taskRecherche+0x120>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	2300      	movs	r3, #0
 8002aae:	2202      	movs	r2, #2
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f00d ff4d 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(angle_droit);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f00d fb69 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='a';
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <taskRecherche+0x11c>)
 8002ac0:	2261      	movs	r2, #97	; 0x61
 8002ac2:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <taskRecherche+0x120>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2202      	movs	r2, #2
 8002acc:	2100      	movs	r1, #0
 8002ace:	f00d ff3f 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002ad2:	20c8      	movs	r0, #200	; 0xc8
 8002ad4:	f00d fb5c 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='g';
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <taskRecherche+0x11c>)
 8002ada:	2267      	movs	r2, #103	; 0x67
 8002adc:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <taskRecherche+0x120>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f00d ff32 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(angle_gauche);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f00d fb4e 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='s';
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <taskRecherche+0x11c>)
 8002af6:	2273      	movs	r2, #115	; 0x73
 8002af8:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <taskRecherche+0x120>)
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	2202      	movs	r2, #2
 8002b02:	2100      	movs	r1, #0
 8002b04:	f00d ff24 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b08:	20c8      	movs	r0, #200	; 0xc8
 8002b0a:	f00d fb41 	bl	8010190 <vTaskDelay>
		vTaskResume(h_trouve);
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <taskRecherche+0x114>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f00d fbee 	bl	80102f4 <vTaskResume>
	for(;;){
 8002b18:	e780      	b.n	8002a1c <taskRecherche+0x10>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0801483c 	.word	0x0801483c
 8002b20:	2000069c 	.word	0x2000069c
 8002b24:	005b8d80 	.word	0x005b8d80
 8002b28:	2000068c 	.word	0x2000068c
 8002b2c:	20000688 	.word	0x20000688

08002b30 <taskTrouve>:
	}
}


void taskTrouve(void *pMotor){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	printf("Tâche trouve créée\r\n");
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <taskTrouve+0x80>)
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f00f f9cc 	bl	8011ed8 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002b40:	2301      	movs	r3, #1
 8002b42:	425b      	negs	r3, r3
 8002b44:	0019      	movs	r1, r3
 8002b46:	2001      	movs	r0, #1
 8002b48:	f00d fec0 	bl	80108cc <ulTaskNotifyTake>
		vTaskSuspend(h_recherche);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <taskTrouve+0x84>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f00d fb43 	bl	80101dc <vTaskSuspend>
		h_cmd_servomotor.cmd='o';
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <taskTrouve+0x88>)
 8002b58:	226f      	movs	r2, #111	; 0x6f
 8002b5a:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_servomotor);
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <taskTrouve+0x8c>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2202      	movs	r2, #2
 8002b64:	2100      	movs	r1, #0
 8002b66:	f00d fef3 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b6a:	20c8      	movs	r0, #200	; 0xc8
 8002b6c:	f00d fb10 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='s';
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <taskTrouve+0x90>)
 8002b72:	2273      	movs	r2, #115	; 0x73
 8002b74:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <taskTrouve+0x94>)
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f00d fee6 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b84:	20c8      	movs	r0, #200	; 0xc8
 8002b86:	f00d fb03 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='a';
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <taskTrouve+0x90>)
 8002b8c:	2261      	movs	r2, #97	; 0x61
 8002b8e:	701a      	strb	r2, [r3, #0]
		//h_cmd_motor.speed=300;
		xTaskNotifyGive(h_motor);
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <taskTrouve+0x94>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	2202      	movs	r2, #2
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f00d fed9 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b9e:	20c8      	movs	r0, #200	; 0xc8
 8002ba0:	f00d faf6 	bl	8010190 <vTaskDelay>
		vTaskResume(h_recherche);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <taskTrouve+0x84>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f00d fba3 	bl	80102f4 <vTaskResume>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002bae:	e7c7      	b.n	8002b40 <taskTrouve+0x10>
 8002bb0:	08014858 	.word	0x08014858
 8002bb4:	20000694 	.word	0x20000694
 8002bb8:	200006a4 	.word	0x200006a4
 8002bbc:	200006a0 	.word	0x200006a0
 8002bc0:	2000068c 	.word	0x2000068c
 8002bc4:	20000688 	.word	0x20000688

08002bc8 <taskAttrape>:
	}
}

void taskAttrape(void *pMotor){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	printf("Tâche attrape créée\r\n");
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <taskAttrape+0x64>)
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f00f f980 	bl	8011ed8 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002bd8:	2301      	movs	r3, #1
 8002bda:	425b      	negs	r3, r3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	2001      	movs	r0, #1
 8002be0:	f00d fe74 	bl	80108cc <ulTaskNotifyTake>
		vTaskSuspend(h_recherche);
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <taskAttrape+0x68>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f00d faf7 	bl	80101dc <vTaskSuspend>
		h_cmd_servomotor.cmd='c';
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <taskAttrape+0x6c>)
 8002bf0:	2263      	movs	r2, #99	; 0x63
 8002bf2:	701a      	strb	r2, [r3, #0]
		h_cmd_servomotor.speed=200;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <taskAttrape+0x6c>)
 8002bf6:	22c8      	movs	r2, #200	; 0xc8
 8002bf8:	805a      	strh	r2, [r3, #2]
		xTaskNotifyGive(h_servomotor);
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <taskAttrape+0x70>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2202      	movs	r2, #2
 8002c02:	2100      	movs	r1, #0
 8002c04:	f00d fea4 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002c08:	20c8      	movs	r0, #200	; 0xc8
 8002c0a:	f00d fac1 	bl	8010190 <vTaskDelay>
		h_cmd_motor.cmd='s';
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <taskAttrape+0x74>)
 8002c10:	2273      	movs	r2, #115	; 0x73
 8002c12:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <taskAttrape+0x78>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f00d fe97 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8002c22:	20c8      	movs	r0, #200	; 0xc8
 8002c24:	f00d fab4 	bl	8010190 <vTaskDelay>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002c28:	e7d6      	b.n	8002bd8 <taskAttrape+0x10>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	08014870 	.word	0x08014870
 8002c30:	20000694 	.word	0x20000694
 8002c34:	200006a4 	.word	0x200006a4
 8002c38:	200006a0 	.word	0x200006a0
 8002c3c:	2000068c 	.word	0x2000068c
 8002c40:	20000688 	.word	0x20000688

08002c44 <taskMotor>:





void taskMotor(void *pMotor){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	printf("Tâche moteur créée\r\n");
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <taskMotor+0x7c>)
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f00f f942 	bl	8011ed8 <puts>
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	printf("Notif taken");
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <taskMotor+0x80>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f00f f8b2 	bl	8011dc0 <iprintf>
	//vTaskSuspend(0);
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	425b      	negs	r3, r3
 8002c60:	0019      	movs	r1, r3
 8002c62:	2001      	movs	r0, #1
 8002c64:	f00d fe32 	bl	80108cc <ulTaskNotifyTake>
		if(((h_motor_t *)pMotor)->cmd=='a'){
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b61      	cmp	r3, #97	; 0x61
 8002c6e:	d104      	bne.n	8002c7a <taskMotor+0x36>
			avance(((h_motor_t *)pMotor)->speed);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	885b      	ldrh	r3, [r3, #2]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff fda1 	bl	80027bc <avance>
			//update_droite(((h_motor_t *)pMotor)->speed);
			//update_gauche(((h_motor_t *)pMotor)->speed);
		}
		if(((h_motor_t *)pMotor)->cmd=='r'){
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b72      	cmp	r3, #114	; 0x72
 8002c80:	d104      	bne.n	8002c8c <taskMotor+0x48>
			recule(((h_motor_t *)pMotor)->speed);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	885b      	ldrh	r3, [r3, #2]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff fdc2 	bl	8002810 <recule>
		}
		if(((h_motor_t *)pMotor)->cmd=='s'){
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b73      	cmp	r3, #115	; 0x73
 8002c92:	d101      	bne.n	8002c98 <taskMotor+0x54>
			stop();
 8002c94:	f7ff fde6 	bl	8002864 <stop>
		}
		if(((h_motor_t *)pMotor)->cmd=='g'){
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b67      	cmp	r3, #103	; 0x67
 8002c9e:	d104      	bne.n	8002caa <taskMotor+0x66>
			gauche(((h_motor_t *)pMotor)->speed);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	885b      	ldrh	r3, [r3, #2]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fdfb 	bl	80028a0 <gauche>
		}
		if(((h_motor_t *)pMotor)->cmd=='d'){
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d1d4      	bne.n	8002c5c <taskMotor+0x18>
			droite(((h_motor_t *)pMotor)->speed);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	885b      	ldrh	r3, [r3, #2]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f7ff fe1c 	bl	80028f4 <droite>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002cbc:	e7ce      	b.n	8002c5c <taskMotor+0x18>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	08014888 	.word	0x08014888
 8002cc4:	080148a0 	.word	0x080148a0

08002cc8 <taskServoMotor>:
	}

	return 0;
}

void taskServoMotor(void *pServoMotor){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	printf("Tâche servomoteur créée\r\n");
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <taskServoMotor+0x3c>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f00f f900 	bl	8011ed8 <puts>
	//speed(200);
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002cd8:	2301      	movs	r3, #1
 8002cda:	425b      	negs	r3, r3
 8002cdc:	0019      	movs	r1, r3
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f00d fdf4 	bl	80108cc <ulTaskNotifyTake>
		speed(200);
 8002ce4:	20c8      	movs	r0, #200	; 0xc8
 8002ce6:	f000 f96b 	bl	8002fc0 <speed>
		if(((h_servomotor_t *)pServoMotor)->cmd=='o'){
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b6f      	cmp	r3, #111	; 0x6f
 8002cf0:	d101      	bne.n	8002cf6 <taskServoMotor+0x2e>
			//speed(((h_servomotor_t *)pServoMotor)->speed);
			//vTaskDelay(10);
			open();
 8002cf2:	f000 f8f1 	bl	8002ed8 <open>
		}
		if(((h_servomotor_t *)pServoMotor)->cmd=='c'){
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b63      	cmp	r3, #99	; 0x63
 8002cfc:	d1ec      	bne.n	8002cd8 <taskServoMotor+0x10>
			//speed(((h_servomotor_t *)pServoMotor)->speed);
			//vTaskDelay(10);
			//vTaskSuspend(h_recherche);
			//vTaskSuspend(h_tof);
			close();
 8002cfe:	f000 f877 	bl	8002df0 <close>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002d02:	e7e9      	b.n	8002cd8 <taskServoMotor+0x10>
 8002d04:	0801491c 	.word	0x0801491c

08002d08 <update_crc>:
unsigned char incomingByte = 0x00;   // for incoming serial data

extern TaskHandle_t h_servomotor;

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	4c33      	ldr	r4, [pc, #204]	; (8002dd8 <update_crc+0xd0>)
 8002d0c:	44a5      	add	sp, r4
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	0011      	movs	r1, r2
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <update_crc+0xd4>)
 8002d16:	2484      	movs	r4, #132	; 0x84
 8002d18:	00a4      	lsls	r4, r4, #2
 8002d1a:	191b      	adds	r3, r3, r4
 8002d1c:	19db      	adds	r3, r3, r7
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <update_crc+0xd8>)
 8002d24:	0020      	movs	r0, r4
 8002d26:	181b      	adds	r3, r3, r0
 8002d28:	19db      	adds	r3, r3, r7
 8002d2a:	1c0a      	adds	r2, r1, #0
 8002d2c:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <update_crc+0xdc>)
 8002d30:	181b      	adds	r3, r3, r0
 8002d32:	19da      	adds	r2, r3, r7
 8002d34:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <update_crc+0xe0>)
 8002d36:	0010      	movs	r0, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	001a      	movs	r2, r3
 8002d40:	f00e fbbe 	bl	80114c0 <memcpy>
			0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};
	for(j = 0; j < data_blk_size; j++)
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <update_crc+0xe4>)
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e02f      	b.n	8002dae <update_crc+0xa6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <update_crc+0xd4>)
 8002d50:	2084      	movs	r0, #132	; 0x84
 8002d52:	0080      	lsls	r0, r0, #2
 8002d54:	181b      	adds	r3, r3, r0
 8002d56:	19db      	adds	r3, r3, r7
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	4c23      	ldr	r4, [pc, #140]	; (8002dec <update_crc+0xe4>)
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	18cb      	adds	r3, r1, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4053      	eors	r3, r2
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	2583      	movs	r5, #131	; 0x83
 8002d72:	00ad      	lsls	r5, r5, #2
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	21ff      	movs	r1, #255	; 0xff
 8002d78:	400a      	ands	r2, r1
 8002d7a:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <update_crc+0xd4>)
 8002d7e:	181b      	adds	r3, r3, r0
 8002d80:	19db      	adds	r3, r3, r7
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	197b      	adds	r3, r7, r5
 8002d8a:	8819      	ldrh	r1, [r3, #0]
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <update_crc+0xdc>)
 8002d8e:	181b      	adds	r3, r3, r0
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	0049      	lsls	r1, r1, #1
 8002d94:	5acb      	ldrh	r3, [r1, r3]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4053      	eors	r3, r2
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <update_crc+0xd4>)
 8002d9e:	181b      	adds	r3, r3, r0
 8002da0:	19db      	adds	r3, r3, r7
 8002da2:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	3201      	adds	r2, #1
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <update_crc+0xe4>)
 8002db0:	18fa      	adds	r2, r7, r3
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <update_crc+0xd8>)
 8002db4:	2184      	movs	r1, #132	; 0x84
 8002db6:	0089      	lsls	r1, r1, #2
 8002db8:	185b      	adds	r3, r3, r1
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3c4      	bcc.n	8002d4e <update_crc+0x46>
	}
	return crc_accum;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <update_crc+0xd4>)
 8002dc6:	185b      	adds	r3, r3, r1
 8002dc8:	19db      	adds	r3, r3, r7
 8002dca:	881b      	ldrh	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	2384      	movs	r3, #132	; 0x84
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	449d      	add	sp, r3
 8002dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd8:	fffffdf0 	.word	0xfffffdf0
 8002ddc:	fffffdf6 	.word	0xfffffdf6
 8002de0:	fffffdf4 	.word	0xfffffdf4
 8002de4:	fffffdfc 	.word	0xfffffdfc
 8002de8:	08014938 	.word	0x08014938
 8002dec:	0000020e 	.word	0x0000020e

08002df0 <close>:
		HAL_Delay(1000);
	}

}

void close(){
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002df6:	201f      	movs	r0, #31
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002dfe:	241e      	movs	r4, #30
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
	//WRITE MOTOR TO POSITION 0x02C (300/1023),
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002e06:	2518      	movs	r5, #24
 8002e08:	197b      	adds	r3, r7, r5
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x5E, 0x01};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002e0e:	2114      	movs	r1, #20
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <close+0xe0>)
 8002e14:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	705a      	strb	r2, [r3, #1]
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	22fd      	movs	r2, #253	; 0xfd
 8002e26:	709a      	strb	r2, [r3, #2]
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	70da      	strb	r2, [r3, #3]
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	22fe      	movs	r2, #254	; 0xfe
 8002e32:	711a      	strb	r2, [r3, #4]
 8002e34:	197b      	adds	r3, r7, r5
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	715a      	strb	r2, [r3, #5]
 8002e3c:	197b      	adds	r3, r7, r5
 8002e3e:	785a      	ldrb	r2, [r3, #1]
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	719a      	strb	r2, [r3, #6]
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2203      	movs	r2, #3
 8002e48:	71da      	strb	r2, [r3, #7]
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	721a      	strb	r2, [r3, #8]
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	785a      	ldrb	r2, [r3, #1]
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	725a      	strb	r2, [r3, #9]
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	789a      	ldrb	r2, [r3, #2]
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	729a      	strb	r2, [r3, #10]
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	78da      	ldrb	r2, [r3, #3]
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	72da      	strb	r2, [r3, #11]
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	0005      	movs	r5, r0
 8002e6e:	183a      	adds	r2, r7, r0
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	731a      	strb	r2, [r3, #12]
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	0026      	movs	r6, r4
 8002e78:	193a      	adds	r2, r7, r4
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 8002e7e:	211c      	movs	r1, #28
 8002e80:	187c      	adds	r4, r7, r1
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	220c      	movs	r2, #12
 8002e86:	0019      	movs	r1, r3
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff ff3d 	bl	8002d08 <update_crc>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002e92:	0028      	movs	r0, r5
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	211c      	movs	r1, #28
 8002e98:	187a      	adds	r2, r7, r1
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	19bb      	adds	r3, r7, r6
 8002ea8:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	183a      	adds	r2, r7, r0
 8002eae:	7812      	ldrb	r2, [r2, #0]
 8002eb0:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	19ba      	adds	r2, r7, r6
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8002eba:	23fa      	movs	r3, #250	; 0xfa
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	1d39      	adds	r1, r7, #4
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <close+0xe4>)
 8002ec2:	220e      	movs	r2, #14
 8002ec4:	f005 fdc8 	bl	8008a58 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b009      	add	sp, #36	; 0x24
 8002ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed0:	015e001e 	.word	0x015e001e
 8002ed4:	200009cc 	.word	0x200009cc

08002ed8 <open>:
void open(){
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002ede:	201f      	movs	r0, #31
 8002ee0:	183b      	adds	r3, r7, r0
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002ee6:	241e      	movs	r4, #30
 8002ee8:	193b      	adds	r3, r7, r4
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002eee:	2518      	movs	r5, #24
 8002ef0:	197b      	adds	r3, r7, r5
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x64, 0x00};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002ef6:	2114      	movs	r1, #20
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <open+0xe0>)
 8002efc:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	1d3b      	adds	r3, r7, #4
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	705a      	strb	r2, [r3, #1]
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	22fd      	movs	r2, #253	; 0xfd
 8002f0e:	709a      	strb	r2, [r3, #2]
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	2200      	movs	r2, #0
 8002f14:	70da      	strb	r2, [r3, #3]
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	22fe      	movs	r2, #254	; 0xfe
 8002f1a:	711a      	strb	r2, [r3, #4]
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	715a      	strb	r2, [r3, #5]
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	785a      	ldrb	r2, [r3, #1]
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	719a      	strb	r2, [r3, #6]
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2203      	movs	r2, #3
 8002f30:	71da      	strb	r2, [r3, #7]
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	721a      	strb	r2, [r3, #8]
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	785a      	ldrb	r2, [r3, #1]
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	725a      	strb	r2, [r3, #9]
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	789a      	ldrb	r2, [r3, #2]
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	729a      	strb	r2, [r3, #10]
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	78da      	ldrb	r2, [r3, #3]
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	72da      	strb	r2, [r3, #11]
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	0005      	movs	r5, r0
 8002f56:	183a      	adds	r2, r7, r0
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	731a      	strb	r2, [r3, #12]
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	0026      	movs	r6, r4
 8002f60:	193a      	adds	r2, r7, r4
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 8002f66:	211c      	movs	r1, #28
 8002f68:	187c      	adds	r4, r7, r1
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	0019      	movs	r1, r3
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7ff fec9 	bl	8002d08 <update_crc>
 8002f76:	0003      	movs	r3, r0
 8002f78:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002f7a:	0028      	movs	r0, r5
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	211c      	movs	r1, #28
 8002f80:	187a      	adds	r2, r7, r1
 8002f82:	8812      	ldrh	r2, [r2, #0]
 8002f84:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	19bb      	adds	r3, r7, r6
 8002f90:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	183a      	adds	r2, r7, r0
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	19ba      	adds	r2, r7, r6
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8002fa2:	23fa      	movs	r3, #250	; 0xfa
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	1d39      	adds	r1, r7, #4
 8002fa8:	4804      	ldr	r0, [pc, #16]	; (8002fbc <open+0xe4>)
 8002faa:	220e      	movs	r2, #14
 8002fac:	f005 fd54 	bl	8008a58 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b009      	add	sp, #36	; 0x24
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb8:	0064001e 	.word	0x0064001e
 8002fbc:	200009cc 	.word	0x200009cc

08002fc0 <speed>:

void speed(int speed){
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002fc8:	2027      	movs	r0, #39	; 0x27
 8002fca:	183b      	adds	r3, r7, r0
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002fd0:	2426      	movs	r4, #38	; 0x26
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002fd8:	2620      	movs	r6, #32
 8002fda:	19bb      	adds	r3, r7, r6
 8002fdc:	2207      	movs	r2, #7
 8002fde:	801a      	strh	r2, [r3, #0]
	unsigned char param_mot[4]={0x20, 0x00, speed&0xFF,speed>>8};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002fe0:	211c      	movs	r1, #28
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	709a      	strb	r2, [r3, #2]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	121b      	asrs	r3, r3, #8
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	70da      	strb	r2, [r3, #3]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8003000:	250c      	movs	r5, #12
 8003002:	197b      	adds	r3, r7, r5
 8003004:	22ff      	movs	r2, #255	; 0xff
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	197b      	adds	r3, r7, r5
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	705a      	strb	r2, [r3, #1]
 800300e:	197b      	adds	r3, r7, r5
 8003010:	22fd      	movs	r2, #253	; 0xfd
 8003012:	709a      	strb	r2, [r3, #2]
 8003014:	197b      	adds	r3, r7, r5
 8003016:	2200      	movs	r2, #0
 8003018:	70da      	strb	r2, [r3, #3]
 800301a:	197b      	adds	r3, r7, r5
 800301c:	22fe      	movs	r2, #254	; 0xfe
 800301e:	711a      	strb	r2, [r3, #4]
 8003020:	19bb      	adds	r3, r7, r6
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	197b      	adds	r3, r7, r5
 8003026:	715a      	strb	r2, [r3, #5]
 8003028:	19bb      	adds	r3, r7, r6
 800302a:	785a      	ldrb	r2, [r3, #1]
 800302c:	197b      	adds	r3, r7, r5
 800302e:	719a      	strb	r2, [r3, #6]
 8003030:	197b      	adds	r3, r7, r5
 8003032:	2203      	movs	r2, #3
 8003034:	71da      	strb	r2, [r3, #7]
 8003036:	187b      	adds	r3, r7, r1
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	197b      	adds	r3, r7, r5
 800303c:	721a      	strb	r2, [r3, #8]
 800303e:	187b      	adds	r3, r7, r1
 8003040:	785a      	ldrb	r2, [r3, #1]
 8003042:	197b      	adds	r3, r7, r5
 8003044:	725a      	strb	r2, [r3, #9]
 8003046:	187b      	adds	r3, r7, r1
 8003048:	789a      	ldrb	r2, [r3, #2]
 800304a:	197b      	adds	r3, r7, r5
 800304c:	729a      	strb	r2, [r3, #10]
 800304e:	187b      	adds	r3, r7, r1
 8003050:	78da      	ldrb	r2, [r3, #3]
 8003052:	197b      	adds	r3, r7, r5
 8003054:	72da      	strb	r2, [r3, #11]
 8003056:	197b      	adds	r3, r7, r5
 8003058:	0006      	movs	r6, r0
 800305a:	183a      	adds	r2, r7, r0
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	731a      	strb	r2, [r3, #12]
 8003060:	197b      	adds	r3, r7, r5
 8003062:	193a      	adds	r2, r7, r4
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	735a      	strb	r2, [r3, #13]
	crc = update_crc(0, TxPacket2, 12);
 8003068:	2124      	movs	r1, #36	; 0x24
 800306a:	187c      	adds	r4, r7, r1
 800306c:	197b      	adds	r3, r7, r5
 800306e:	220c      	movs	r2, #12
 8003070:	0019      	movs	r1, r3
 8003072:	2000      	movs	r0, #0
 8003074:	f7ff fe48 	bl	8002d08 <update_crc>
 8003078:	0003      	movs	r3, r0
 800307a:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 800307c:	0030      	movs	r0, r6
 800307e:	183b      	adds	r3, r7, r0
 8003080:	2124      	movs	r1, #36	; 0x24
 8003082:	187a      	adds	r2, r7, r1
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b29a      	uxth	r2, r3
 8003090:	2426      	movs	r4, #38	; 0x26
 8003092:	193b      	adds	r3, r7, r4
 8003094:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8003096:	197b      	adds	r3, r7, r5
 8003098:	183a      	adds	r2, r7, r0
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 800309e:	197b      	adds	r3, r7, r5
 80030a0:	193a      	adds	r2, r7, r4
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 80030a6:	23fa      	movs	r3, #250	; 0xfa
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	1979      	adds	r1, r7, r5
 80030ac:	4803      	ldr	r0, [pc, #12]	; (80030bc <speed+0xfc>)
 80030ae:	220e      	movs	r2, #14
 80030b0:	f005 fcd2 	bl	8008a58 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b00b      	add	sp, #44	; 0x2c
 80030ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030bc:	200009cc 	.word	0x200009cc

080030c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	0018      	movs	r0, r3
 80030ca:	230c      	movs	r3, #12
 80030cc:	001a      	movs	r2, r3
 80030ce:	2100      	movs	r1, #0
 80030d0:	f00e f9ff 	bl	80114d2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <MX_ADC1_Init+0xcc>)
 80030d6:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <MX_ADC1_Init+0xd0>)
 80030d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <MX_ADC1_Init+0xcc>)
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	05d2      	lsls	r2, r2, #23
 80030e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <MX_ADC1_Init+0xcc>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <MX_ADC1_Init+0xcc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <MX_ADC1_Init+0xcc>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <MX_ADC1_Init+0xcc>)
 80030f6:	2204      	movs	r2, #4
 80030f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030fa:	4b24      	ldr	r3, [pc, #144]	; (800318c <MX_ADC1_Init+0xcc>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003100:	4b22      	ldr	r3, [pc, #136]	; (800318c <MX_ADC1_Init+0xcc>)
 8003102:	2200      	movs	r2, #0
 8003104:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <MX_ADC1_Init+0xcc>)
 8003108:	2200      	movs	r2, #0
 800310a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <MX_ADC1_Init+0xcc>)
 800310e:	2201      	movs	r2, #1
 8003110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <MX_ADC1_Init+0xcc>)
 8003114:	2220      	movs	r2, #32
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <MX_ADC1_Init+0xcc>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <MX_ADC1_Init+0xcc>)
 8003122:	2200      	movs	r2, #0
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <MX_ADC1_Init+0xcc>)
 8003128:	222c      	movs	r2, #44	; 0x2c
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <MX_ADC1_Init+0xcc>)
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <MX_ADC1_Init+0xcc>)
 8003136:	2200      	movs	r2, #0
 8003138:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <MX_ADC1_Init+0xcc>)
 800313c:	2200      	movs	r2, #0
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <MX_ADC1_Init+0xcc>)
 8003142:	223c      	movs	r2, #60	; 0x3c
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_ADC1_Init+0xcc>)
 800314a:	2200      	movs	r2, #0
 800314c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_ADC1_Init+0xcc>)
 8003150:	0018      	movs	r0, r3
 8003152:	f001 fcc5 	bl	8004ae0 <HAL_ADC_Init>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800315a:	f000 fcc9 	bl	8003af0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <MX_ADC1_Init+0xd4>)
 8003162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003164:	1d3b      	adds	r3, r7, #4
 8003166:	2200      	movs	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003170:	1d3a      	adds	r2, r7, #4
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_ADC1_Init+0xcc>)
 8003174:	0011      	movs	r1, r2
 8003176:	0018      	movs	r0, r3
 8003178:	f001 fe5a 	bl	8004e30 <HAL_ADC_ConfigChannel>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003180:	f000 fcb6 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200006a8 	.word	0x200006a8
 8003190:	40012400 	.word	0x40012400
 8003194:	20000100 	.word	0x20000100

08003198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b091      	sub	sp, #68	; 0x44
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	232c      	movs	r3, #44	; 0x2c
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	0018      	movs	r0, r3
 80031a6:	2314      	movs	r3, #20
 80031a8:	001a      	movs	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f00e f991 	bl	80114d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b0:	2410      	movs	r4, #16
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	0018      	movs	r0, r3
 80031b6:	231c      	movs	r3, #28
 80031b8:	001a      	movs	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	f00e f989 	bl	80114d2 <memset>
  if(adcHandle->Instance==ADC1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_ADC_MspInit+0xac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d138      	bne.n	800323c <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	01d2      	lsls	r2, r2, #7
 80031d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	0018      	movs	r0, r3
 80031dc:	f003 fe32 	bl	8006e44 <HAL_RCCEx_PeriphCLKConfig>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031e4:	f000 fc84 	bl	8003af0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 80031ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0349      	lsls	r1, r1, #13
 80031f2:	430a      	orrs	r2, r1
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	035b      	lsls	r3, r3, #13
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 800320a:	2102      	movs	r1, #2
 800320c:	430a      	orrs	r2, r1
 800320e:	635a      	str	r2, [r3, #52]	; 0x34
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_ADC_MspInit+0xb0>)
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2203      	movs	r2, #3
 8003228:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8003230:	187b      	adds	r3, r7, r1
 8003232:	4a06      	ldr	r2, [pc, #24]	; (800324c <HAL_ADC_MspInit+0xb4>)
 8003234:	0019      	movs	r1, r3
 8003236:	0010      	movs	r0, r2
 8003238:	f002 f97c 	bl	8005534 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b011      	add	sp, #68	; 0x44
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	40012400 	.word	0x40012400
 8003248:	40021000 	.word	0x40021000
 800324c:	50000400 	.word	0x50000400

08003250 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003256:	1d3b      	adds	r3, r7, #4
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <MX_FREERTOS_Init+0x2c>)
 800325a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800325c:	c313      	stmia	r3!, {r0, r1, r4}
 800325e:	ca03      	ldmia	r2!, {r0, r1}
 8003260:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	2100      	movs	r1, #0
 8003266:	0018      	movs	r0, r3
 8003268:	f00c fd7f 	bl	800fd6a <osThreadCreate>
 800326c:	0002      	movs	r2, r0
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <MX_FREERTOS_Init+0x30>)
 8003270:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b007      	add	sp, #28
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	08014b54 	.word	0x08014b54
 8003280:	2000070c 	.word	0x2000070c

08003284 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800328c:	2001      	movs	r0, #1
 800328e:	f00c fd94 	bl	800fdba <osDelay>
 8003292:	e7fb      	b.n	800328c <StartDefaultTask+0x8>

08003294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329a:	2414      	movs	r4, #20
 800329c:	193b      	adds	r3, r7, r4
 800329e:	0018      	movs	r0, r3
 80032a0:	2314      	movs	r3, #20
 80032a2:	001a      	movs	r2, r3
 80032a4:	2100      	movs	r1, #0
 80032a6:	f00e f914 	bl	80114d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032aa:	4b66      	ldr	r3, [pc, #408]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032b0:	2104      	movs	r1, #4
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2204      	movs	r2, #4
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032c2:	4b60      	ldr	r3, [pc, #384]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032c8:	2120      	movs	r1, #32
 80032ca:	430a      	orrs	r2, r1
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	2220      	movs	r2, #32
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b5a      	ldr	r3, [pc, #360]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032de:	4b59      	ldr	r3, [pc, #356]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032e0:	2101      	movs	r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b54      	ldr	r3, [pc, #336]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f6:	4b53      	ldr	r3, [pc, #332]	; (8003444 <MX_GPIO_Init+0x1b0>)
 80032f8:	2102      	movs	r1, #2
 80032fa:	430a      	orrs	r2, r1
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <MX_GPIO_Init+0x1b0>)
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	2202      	movs	r2, #2
 8003304:	4013      	ands	r3, r2
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800330a:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <MX_GPIO_Init+0x1b0>)
 800330c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <MX_GPIO_Init+0x1b0>)
 8003310:	2108      	movs	r1, #8
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <MX_GPIO_Init+0x1b0>)
 8003318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331a:	2208      	movs	r2, #8
 800331c:	4013      	ands	r3, r2
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin|OE_Pin, GPIO_PIN_RESET);
 8003322:	4949      	ldr	r1, [pc, #292]	; (8003448 <MX_GPIO_Init+0x1b4>)
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <MX_GPIO_Init+0x1b8>)
 8003326:	2200      	movs	r2, #0
 8003328:	0018      	movs	r0, r3
 800332a:	f002 fa67 	bl	80057fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin|S2_Pin|S3_Pin
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	2200      	movs	r2, #0
 8003334:	214f      	movs	r1, #79	; 0x4f
 8003336:	0018      	movs	r0, r3
 8003338:	f002 fa60 	bl	80057fc <HAL_GPIO_WritePin>
                          |LED_CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO1_C1_Pin|GPIO1_C2_Pin, GPIO_PIN_RESET);
 800333c:	4944      	ldr	r1, [pc, #272]	; (8003450 <MX_GPIO_Init+0x1bc>)
 800333e:	4b45      	ldr	r3, [pc, #276]	; (8003454 <MX_GPIO_Init+0x1c0>)
 8003340:	2200      	movs	r2, #0
 8003342:	0018      	movs	r0, r3
 8003344:	f002 fa5a 	bl	80057fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|OE_Pin;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	4a3f      	ldr	r2, [pc, #252]	; (8003448 <MX_GPIO_Init+0x1b4>)
 800334c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2201      	movs	r2, #1
 8003352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2200      	movs	r2, #0
 800335e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003360:	193b      	adds	r3, r7, r4
 8003362:	4a3a      	ldr	r2, [pc, #232]	; (800344c <MX_GPIO_Init+0x1b8>)
 8003364:	0019      	movs	r1, r3
 8003366:	0010      	movs	r0, r2
 8003368:	f002 f8e4 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CB1_OUT_Pin|CB2_OUT_Pin;
 800336c:	0021      	movs	r1, r4
 800336e:	187b      	adds	r3, r7, r1
 8003370:	2206      	movs	r2, #6
 8003372:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003374:	187b      	adds	r3, r7, r1
 8003376:	2288      	movs	r2, #136	; 0x88
 8003378:	0352      	lsls	r2, r2, #13
 800337a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	000c      	movs	r4, r1
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003384:	193b      	adds	r3, r7, r4
 8003386:	4a31      	ldr	r2, [pc, #196]	; (800344c <MX_GPIO_Init+0x1b8>)
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f002 f8d2 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8003390:	193b      	adds	r3, r7, r4
 8003392:	224f      	movs	r2, #79	; 0x4f
 8003394:	601a      	str	r2, [r3, #0]
                          |LED_CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	2201      	movs	r2, #1
 800339a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	193b      	adds	r3, r7, r4
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	2200      	movs	r2, #0
 80033a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	193a      	adds	r2, r7, r4
 80033aa:	23a0      	movs	r3, #160	; 0xa0
 80033ac:	05db      	lsls	r3, r3, #23
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f002 f8bf 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C1_Pin;
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	2202      	movs	r2, #2
 80033ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	2200      	movs	r2, #0
 80033c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	2202      	movs	r2, #2
 80033c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C1_GPIO_Port, &GPIO_InitStruct);
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <MX_GPIO_Init+0x1c0>)
 80033cc:	0019      	movs	r1, r3
 80033ce:	0010      	movs	r0, r2
 80033d0:	f002 f8b0 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO1_C1_Pin|GPIO1_C2_Pin;
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <MX_GPIO_Init+0x1bc>)
 80033d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	2201      	movs	r2, #1
 80033de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	193b      	adds	r3, r7, r4
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	2200      	movs	r2, #0
 80033ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <MX_GPIO_Init+0x1c0>)
 80033f0:	0019      	movs	r1, r3
 80033f2:	0010      	movs	r0, r2
 80033f4:	f002 f89e 	bl	8005534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C2_Pin;
 80033f8:	0021      	movs	r1, r4
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0152      	lsls	r2, r2, #5
 8003400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	2200      	movs	r2, #0
 8003406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C2_GPIO_Port, &GPIO_InitStruct);
 800340e:	187b      	adds	r3, r7, r1
 8003410:	4a10      	ldr	r2, [pc, #64]	; (8003454 <MX_GPIO_Init+0x1c0>)
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f002 f88d 	bl	8005534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2103      	movs	r1, #3
 800341e:	2005      	movs	r0, #5
 8003420:	f001 ff8a 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003424:	2005      	movs	r0, #5
 8003426:	f001 ff9c 	bl	8005362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2103      	movs	r1, #3
 800342e:	2006      	movs	r0, #6
 8003430:	f001 ff82 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003434:	2006      	movs	r0, #6
 8003436:	f001 ff94 	bl	8005362 <HAL_NVIC_EnableIRQ>

}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b00b      	add	sp, #44	; 0x2c
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40021000 	.word	0x40021000
 8003448:	00001808 	.word	0x00001808
 800344c:	50000800 	.word	0x50000800
 8003450:	00002004 	.word	0x00002004
 8003454:	50000400 	.word	0x50000400

08003458 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <MX_I2C1_Init+0x74>)
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <MX_I2C1_Init+0x78>)
 8003460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <MX_I2C1_Init+0x74>)
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <MX_I2C1_Init+0x7c>)
 8003466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <MX_I2C1_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <MX_I2C1_Init+0x74>)
 8003470:	2201      	movs	r2, #1
 8003472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003474:	4b15      	ldr	r3, [pc, #84]	; (80034cc <MX_I2C1_Init+0x74>)
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <MX_I2C1_Init+0x74>)
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_I2C1_Init+0x74>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_I2C1_Init+0x74>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <MX_I2C1_Init+0x74>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_I2C1_Init+0x74>)
 8003494:	0018      	movs	r0, r3
 8003496:	f002 fa03 	bl	80058a0 <HAL_I2C_Init>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d001      	beq.n	80034a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800349e:	f000 fb27 	bl	8003af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <MX_I2C1_Init+0x74>)
 80034a4:	2100      	movs	r1, #0
 80034a6:	0018      	movs	r0, r3
 80034a8:	f002 ff30 	bl	800630c <HAL_I2CEx_ConfigAnalogFilter>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034b0:	f000 fb1e 	bl	8003af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <MX_I2C1_Init+0x74>)
 80034b6:	2100      	movs	r1, #0
 80034b8:	0018      	movs	r0, r3
 80034ba:	f002 ff73 	bl	80063a4 <HAL_I2CEx_ConfigDigitalFilter>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80034c2:	f000 fb15 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000710 	.word	0x20000710
 80034d0:	40005400 	.word	0x40005400
 80034d4:	10707dbc 	.word	0x10707dbc

080034d8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <MX_I2C2_Init+0x74>)
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <MX_I2C2_Init+0x78>)
 80034e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <MX_I2C2_Init+0x74>)
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <MX_I2C2_Init+0x7c>)
 80034e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <MX_I2C2_Init+0x74>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <MX_I2C2_Init+0x74>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_I2C2_Init+0x74>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <MX_I2C2_Init+0x74>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <MX_I2C2_Init+0x74>)
 8003502:	2200      	movs	r2, #0
 8003504:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <MX_I2C2_Init+0x74>)
 8003508:	2200      	movs	r2, #0
 800350a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <MX_I2C2_Init+0x74>)
 800350e:	2200      	movs	r2, #0
 8003510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <MX_I2C2_Init+0x74>)
 8003514:	0018      	movs	r0, r3
 8003516:	f002 f9c3 	bl	80058a0 <HAL_I2C_Init>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d001      	beq.n	8003522 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800351e:	f000 fae7 	bl	8003af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <MX_I2C2_Init+0x74>)
 8003524:	2100      	movs	r1, #0
 8003526:	0018      	movs	r0, r3
 8003528:	f002 fef0 	bl	800630c <HAL_I2CEx_ConfigAnalogFilter>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d001      	beq.n	8003534 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003530:	f000 fade 	bl	8003af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <MX_I2C2_Init+0x74>)
 8003536:	2100      	movs	r1, #0
 8003538:	0018      	movs	r0, r3
 800353a:	f002 ff33 	bl	80063a4 <HAL_I2CEx_ConfigDigitalFilter>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003542:	f000 fad5 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000764 	.word	0x20000764
 8003550:	40005800 	.word	0x40005800
 8003554:	10707dbc 	.word	0x10707dbc

08003558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b093      	sub	sp, #76	; 0x4c
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	2334      	movs	r3, #52	; 0x34
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	0018      	movs	r0, r3
 8003566:	2314      	movs	r3, #20
 8003568:	001a      	movs	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f00d ffb1 	bl	80114d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003570:	2418      	movs	r4, #24
 8003572:	193b      	adds	r3, r7, r4
 8003574:	0018      	movs	r0, r3
 8003576:	231c      	movs	r3, #28
 8003578:	001a      	movs	r2, r3
 800357a:	2100      	movs	r1, #0
 800357c:	f00d ffa9 	bl	80114d2 <memset>
  if(i2cHandle->Instance==I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a3e      	ldr	r2, [pc, #248]	; (8003680 <HAL_I2C_MspInit+0x128>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d140      	bne.n	800360c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800358a:	193b      	adds	r3, r7, r4
 800358c:	2220      	movs	r2, #32
 800358e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003590:	193b      	adds	r3, r7, r4
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003596:	193b      	adds	r3, r7, r4
 8003598:	0018      	movs	r0, r3
 800359a:	f003 fc53 	bl	8006e44 <HAL_RCCEx_PeriphCLKConfig>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035a2:	f000 faa5 	bl	8003af0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	4b37      	ldr	r3, [pc, #220]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34
 80035b2:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	2201      	movs	r2, #1
 80035b8:	4013      	ands	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_1_Pin|SDA_1_Pin;
 80035be:	2134      	movs	r1, #52	; 0x34
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	22c0      	movs	r2, #192	; 0xc0
 80035c4:	00d2      	lsls	r2, r2, #3
 80035c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2212      	movs	r2, #18
 80035cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	187b      	adds	r3, r7, r1
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	2206      	movs	r2, #6
 80035de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	187a      	adds	r2, r7, r1
 80035e2:	23a0      	movs	r3, #160	; 0xa0
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f001 ffa3 	bl	8005534 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ee:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	0389      	lsls	r1, r1, #14
 80035f8:	430a      	orrs	r2, r1
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 80035fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	039b      	lsls	r3, r3, #14
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800360a:	e035      	b.n	8003678 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_I2C_MspInit+0x130>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d130      	bne.n	8003678 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b1b      	ldr	r3, [pc, #108]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 8003618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 800361c:	2102      	movs	r1, #2
 800361e:	430a      	orrs	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	2202      	movs	r2, #2
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_2_Pin|SDA_2_Pin;
 800362e:	2134      	movs	r1, #52	; 0x34
 8003630:	187b      	adds	r3, r7, r1
 8003632:	22c0      	movs	r2, #192	; 0xc0
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2212      	movs	r2, #18
 800363c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2206      	movs	r2, #6
 800364e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	187b      	adds	r3, r7, r1
 8003652:	4a0e      	ldr	r2, [pc, #56]	; (800368c <HAL_I2C_MspInit+0x134>)
 8003654:	0019      	movs	r1, r3
 8003656:	0010      	movs	r0, r2
 8003658:	f001 ff6c 	bl	8005534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 800365e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	03c9      	lsls	r1, r1, #15
 8003666:	430a      	orrs	r2, r1
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_I2C_MspInit+0x12c>)
 800366c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	03db      	lsls	r3, r3, #15
 8003672:	4013      	ands	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b013      	add	sp, #76	; 0x4c
 800367e:	bd90      	pop	{r4, r7, pc}
 8003680:	40005400 	.word	0x40005400
 8003684:	40021000 	.word	0x40021000
 8003688:	40005800 	.word	0x40005800
 800368c:	50000400 	.word	0x50000400

08003690 <__io_putchar>:
void clignote();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003698:	2301      	movs	r3, #1
 800369a:	425b      	negs	r3, r3
 800369c:	1d39      	adds	r1, r7, #4
 800369e:	4804      	ldr	r0, [pc, #16]	; (80036b0 <__io_putchar+0x20>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	f005 f9d9 	bl	8008a58 <HAL_UART_Transmit>
	return ch;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000938 	.word	0x20000938

080036b4 <task_demo>:
	}
}
#endif

void task_demo(void * unused)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	for(;;){
		demo_run(&demo_funct1); //boucle infinie
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <task_demo+0x14>)
 80036be:	0018      	movs	r0, r3
 80036c0:	f00d fe96 	bl	80113f0 <demo_run>
 80036c4:	e7fa      	b.n	80036bc <task_demo+0x8>
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	200007b8 	.word	0x200007b8

080036cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036d2:	f001 f85d 	bl	8004790 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80036d6:	f000 f99d 	bl	8003a14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036da:	f7ff fddb 	bl	8003294 <MX_GPIO_Init>
	MX_I2C2_Init();
 80036de:	f7ff fefb 	bl	80034d8 <MX_I2C2_Init>
	MX_TIM1_Init();
 80036e2:	f000 fb29 	bl	8003d38 <MX_TIM1_Init>
	MX_TIM3_Init();
 80036e6:	f000 fb91 	bl	8003e0c <MX_TIM3_Init>
	MX_TIM14_Init();
 80036ea:	f000 fbf3 	bl	8003ed4 <MX_TIM14_Init>
	MX_USART1_UART_Init();
 80036ee:	f000 fed7 	bl	80044a0 <MX_USART1_UART_Init>
	MX_TIM16_Init();
 80036f2:	f000 fc3b 	bl	8003f6c <MX_TIM16_Init>
	MX_I2C1_Init();
 80036f6:	f7ff feaf 	bl	8003458 <MX_I2C1_Init>
	MX_TIM17_Init();
 80036fa:	f000 fcc1 	bl	8004080 <MX_TIM17_Init>
	MX_USART2_UART_Init();
 80036fe:	f000 ff1d 	bl	800453c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8003702:	f7ff fcdd 	bl	80030c0 <MX_ADC1_Init>
	else{
		printf("C'est bon\r\n");
	}*/

	BaseType_t ret;
	ret = xTaskCreate(task_demo, "Demo", DEMO_STACK_SIZE,NULL, DEMO_PRIORITY,&h_task_demo);
 8003706:	23fa      	movs	r3, #250	; 0xfa
 8003708:	005a      	lsls	r2, r3, #1
 800370a:	498c      	ldr	r1, [pc, #560]	; (800393c <main+0x270>)
 800370c:	488c      	ldr	r0, [pc, #560]	; (8003940 <main+0x274>)
 800370e:	4b8d      	ldr	r3, [pc, #564]	; (8003944 <main+0x278>)
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	f00c fc0c 	bl	800ff34 <xTaskCreate>
 800371c:	0003      	movs	r3, r0
 800371e:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	d105      	bne.n	8003732 <main+0x66>
		printf("Error creating task demo\r\n");
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <main+0x27c>)
 8003728:	0018      	movs	r0, r3
 800372a:	f00e fbd5 	bl	8011ed8 <puts>
		Error_Handler();
 800372e:	f000 f9df 	bl	8003af0 <Error_Handler>
	}
	printf("coucou task motor\r\n");
 8003732:	4b86      	ldr	r3, [pc, #536]	; (800394c <main+0x280>)
 8003734:	0018      	movs	r0, r3
 8003736:	f00e fbcf 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskMotor,"Motor",MOTOR_STACK_SIZE,(void*)&h_cmd_motor, MOTOR_PRIORITY, &h_motor);
 800373a:	4c85      	ldr	r4, [pc, #532]	; (8003950 <main+0x284>)
 800373c:	23fa      	movs	r3, #250	; 0xfa
 800373e:	005a      	lsls	r2, r3, #1
 8003740:	4984      	ldr	r1, [pc, #528]	; (8003954 <main+0x288>)
 8003742:	4885      	ldr	r0, [pc, #532]	; (8003958 <main+0x28c>)
 8003744:	4b85      	ldr	r3, [pc, #532]	; (800395c <main+0x290>)
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	230a      	movs	r3, #10
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	0023      	movs	r3, r4
 800374e:	f00c fbf1 	bl	800ff34 <xTaskCreate>
 8003752:	0003      	movs	r3, r0
 8003754:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3301      	adds	r3, #1
 800375a:	d105      	bne.n	8003768 <main+0x9c>
		printf("Error Task Motor\r\n");
 800375c:	4b80      	ldr	r3, [pc, #512]	; (8003960 <main+0x294>)
 800375e:	0018      	movs	r0, r3
 8003760:	f00e fbba 	bl	8011ed8 <puts>
		Error_Handler();
 8003764:	f000 f9c4 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task motor\r\n");
 8003768:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <main+0x298>)
 800376a:	0018      	movs	r0, r3
 800376c:	f00e fbb4 	bl	8011ed8 <puts>
	printf("coucou task encoder\r\n");
 8003770:	4b7d      	ldr	r3, [pc, #500]	; (8003968 <main+0x29c>)
 8003772:	0018      	movs	r0, r3
 8003774:	f00e fbb0 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskEncoder,"Encoder",ENCODER_STACK_SIZE,NULL, ENCODER_PRIORITY, &h_encoder);
 8003778:	23fa      	movs	r3, #250	; 0xfa
 800377a:	005a      	lsls	r2, r3, #1
 800377c:	497b      	ldr	r1, [pc, #492]	; (800396c <main+0x2a0>)
 800377e:	487c      	ldr	r0, [pc, #496]	; (8003970 <main+0x2a4>)
 8003780:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <main+0x2a8>)
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2304      	movs	r3, #4
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	f00c fbd3 	bl	800ff34 <xTaskCreate>
 800378e:	0003      	movs	r3, r0
 8003790:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3301      	adds	r3, #1
 8003796:	d105      	bne.n	80037a4 <main+0xd8>
		printf("Error Task Encoder\r\n");
 8003798:	4b77      	ldr	r3, [pc, #476]	; (8003978 <main+0x2ac>)
 800379a:	0018      	movs	r0, r3
 800379c:	f00e fb9c 	bl	8011ed8 <puts>
		Error_Handler();
 80037a0:	f000 f9a6 	bl	8003af0 <Error_Handler>
	}
	printf("coucou task encoder\r\n");
 80037a4:	4b70      	ldr	r3, [pc, #448]	; (8003968 <main+0x29c>)
 80037a6:	0018      	movs	r0, r3
 80037a8:	f00e fb96 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskEncoderPrint,"Encoder Print",ENCODER_PRINT_STACK_SIZE,NULL, ENCODER_PRINT_PRIORITY, &h_encoder_print);
 80037ac:	23fa      	movs	r3, #250	; 0xfa
 80037ae:	005a      	lsls	r2, r3, #1
 80037b0:	4972      	ldr	r1, [pc, #456]	; (800397c <main+0x2b0>)
 80037b2:	4873      	ldr	r0, [pc, #460]	; (8003980 <main+0x2b4>)
 80037b4:	4b73      	ldr	r3, [pc, #460]	; (8003984 <main+0x2b8>)
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	2303      	movs	r3, #3
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2300      	movs	r3, #0
 80037be:	f00c fbb9 	bl	800ff34 <xTaskCreate>
 80037c2:	0003      	movs	r3, r0
 80037c4:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3301      	adds	r3, #1
 80037ca:	d105      	bne.n	80037d8 <main+0x10c>
		printf("Error Task Encoder Print\r\n");
 80037cc:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <main+0x2bc>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f00e fb82 	bl	8011ed8 <puts>
		Error_Handler();
 80037d4:	f000 f98c 	bl	8003af0 <Error_Handler>
	}
	printf("coucou task TOF\r\n");
 80037d8:	4b6c      	ldr	r3, [pc, #432]	; (800398c <main+0x2c0>)
 80037da:	0018      	movs	r0, r3
 80037dc:	f00e fb7c 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskTOF,"TOF",TOF_STACK_SIZE,NULL,TOF_PRIORITY,&h_tof);
 80037e0:	23fa      	movs	r3, #250	; 0xfa
 80037e2:	005a      	lsls	r2, r3, #1
 80037e4:	496a      	ldr	r1, [pc, #424]	; (8003990 <main+0x2c4>)
 80037e6:	486b      	ldr	r0, [pc, #428]	; (8003994 <main+0x2c8>)
 80037e8:	4b6b      	ldr	r3, [pc, #428]	; (8003998 <main+0x2cc>)
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2308      	movs	r3, #8
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	f00c fb9f 	bl	800ff34 <xTaskCreate>
 80037f6:	0003      	movs	r3, r0
 80037f8:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3301      	adds	r3, #1
 80037fe:	d105      	bne.n	800380c <main+0x140>
		printf("Error Task TOF\r\n");
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <main+0x2d0>)
 8003802:	0018      	movs	r0, r3
 8003804:	f00e fb68 	bl	8011ed8 <puts>
		Error_Handler();
 8003808:	f000 f972 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task TOF\r\n");
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <main+0x2d4>)
 800380e:	0018      	movs	r0, r3
 8003810:	f00e fb62 	bl	8011ed8 <puts>
	printf("coucou task servo\r\n");
 8003814:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <main+0x2d8>)
 8003816:	0018      	movs	r0, r3
 8003818:	f00e fb5e 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskServoMotor,"Servomoteur",SERVO_STACK_SIZE,(void*)&h_cmd_servomotor,SERVO_PRIORITY,&h_servomotor);
 800381c:	4c62      	ldr	r4, [pc, #392]	; (80039a8 <main+0x2dc>)
 800381e:	23fa      	movs	r3, #250	; 0xfa
 8003820:	005a      	lsls	r2, r3, #1
 8003822:	4962      	ldr	r1, [pc, #392]	; (80039ac <main+0x2e0>)
 8003824:	4862      	ldr	r0, [pc, #392]	; (80039b0 <main+0x2e4>)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <main+0x2e8>)
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	2307      	movs	r3, #7
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	0023      	movs	r3, r4
 8003830:	f00c fb80 	bl	800ff34 <xTaskCreate>
 8003834:	0003      	movs	r3, r0
 8003836:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3301      	adds	r3, #1
 800383c:	d105      	bne.n	800384a <main+0x17e>
		printf("Error Task Servomotor\r\n");
 800383e:	4b5e      	ldr	r3, [pc, #376]	; (80039b8 <main+0x2ec>)
 8003840:	0018      	movs	r0, r3
 8003842:	f00e fb49 	bl	8011ed8 <puts>
		Error_Handler();
 8003846:	f000 f953 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task servo\r\n");
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <main+0x2f0>)
 800384c:	0018      	movs	r0, r3
 800384e:	f00e fb43 	bl	8011ed8 <puts>
	printf("coucou task bordure\r\n");
 8003852:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <main+0x2f4>)
 8003854:	0018      	movs	r0, r3
 8003856:	f00e fb3f 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskBordure,"Bordure",BORDURE_STACK_SIZE,(void*)&h_cmd_motor,BORDURE_PRIORITY,&h_bordure);
 800385a:	4c3d      	ldr	r4, [pc, #244]	; (8003950 <main+0x284>)
 800385c:	23fa      	movs	r3, #250	; 0xfa
 800385e:	005a      	lsls	r2, r3, #1
 8003860:	4958      	ldr	r1, [pc, #352]	; (80039c4 <main+0x2f8>)
 8003862:	4859      	ldr	r0, [pc, #356]	; (80039c8 <main+0x2fc>)
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <main+0x300>)
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	2309      	movs	r3, #9
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	0023      	movs	r3, r4
 800386e:	f00c fb61 	bl	800ff34 <xTaskCreate>
 8003872:	0003      	movs	r3, r0
 8003874:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3301      	adds	r3, #1
 800387a:	d105      	bne.n	8003888 <main+0x1bc>
		printf("Error Task Bordure\r\n");
 800387c:	4b54      	ldr	r3, [pc, #336]	; (80039d0 <main+0x304>)
 800387e:	0018      	movs	r0, r3
 8003880:	f00e fb2a 	bl	8011ed8 <puts>
		Error_Handler();
 8003884:	f000 f934 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task bordure\r\n");
 8003888:	4b52      	ldr	r3, [pc, #328]	; (80039d4 <main+0x308>)
 800388a:	0018      	movs	r0, r3
 800388c:	f00e fb24 	bl	8011ed8 <puts>
	ret = xTaskCreate(taskRecherche,"Recherche",RECHERCHE_STACK_SIZE,(void*)&h_cmd_motor,RECHERCHE_PRIORITY,&h_recherche);
 8003890:	4c2f      	ldr	r4, [pc, #188]	; (8003950 <main+0x284>)
 8003892:	23fa      	movs	r3, #250	; 0xfa
 8003894:	005a      	lsls	r2, r3, #1
 8003896:	4950      	ldr	r1, [pc, #320]	; (80039d8 <main+0x30c>)
 8003898:	4850      	ldr	r0, [pc, #320]	; (80039dc <main+0x310>)
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <main+0x314>)
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2306      	movs	r3, #6
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	0023      	movs	r3, r4
 80038a4:	f00c fb46 	bl	800ff34 <xTaskCreate>
 80038a8:	0003      	movs	r3, r0
 80038aa:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3301      	adds	r3, #1
 80038b0:	d105      	bne.n	80038be <main+0x1f2>
		printf("Error Task Recherche\r\n");
 80038b2:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <main+0x318>)
 80038b4:	0018      	movs	r0, r3
 80038b6:	f00e fb0f 	bl	8011ed8 <puts>
		Error_Handler();
 80038ba:	f000 f919 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task Recherche\r\n");
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <main+0x31c>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f00e fb09 	bl	8011ed8 <puts>

	ret = xTaskCreate(taskTrouve,"Trouve",TROUVE_STACK_SIZE,(void*)&h_cmd_motor,TROUVE_PRIORITY,&h_trouve);
 80038c6:	4c22      	ldr	r4, [pc, #136]	; (8003950 <main+0x284>)
 80038c8:	23fa      	movs	r3, #250	; 0xfa
 80038ca:	005a      	lsls	r2, r3, #1
 80038cc:	4947      	ldr	r1, [pc, #284]	; (80039ec <main+0x320>)
 80038ce:	4848      	ldr	r0, [pc, #288]	; (80039f0 <main+0x324>)
 80038d0:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <main+0x328>)
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2306      	movs	r3, #6
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	0023      	movs	r3, r4
 80038da:	f00c fb2b 	bl	800ff34 <xTaskCreate>
 80038de:	0003      	movs	r3, r0
 80038e0:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3301      	adds	r3, #1
 80038e6:	d105      	bne.n	80038f4 <main+0x228>
		printf("Error Task Trouve\r\n");
 80038e8:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <main+0x32c>)
 80038ea:	0018      	movs	r0, r3
 80038ec:	f00e faf4 	bl	8011ed8 <puts>
		Error_Handler();
 80038f0:	f000 f8fe 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task Trouve\r\n");
 80038f4:	4b41      	ldr	r3, [pc, #260]	; (80039fc <main+0x330>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f00e faee 	bl	8011ed8 <puts>

	ret = xTaskCreate(taskAttrape,"Attrape",ATTRAPE_STACK_SIZE,(void*)&h_cmd_motor,ATTRAPE_PRIORITY,&h_attrape);
 80038fc:	4c14      	ldr	r4, [pc, #80]	; (8003950 <main+0x284>)
 80038fe:	23fa      	movs	r3, #250	; 0xfa
 8003900:	005a      	lsls	r2, r3, #1
 8003902:	493f      	ldr	r1, [pc, #252]	; (8003a00 <main+0x334>)
 8003904:	483f      	ldr	r0, [pc, #252]	; (8003a04 <main+0x338>)
 8003906:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <main+0x33c>)
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2306      	movs	r3, #6
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	0023      	movs	r3, r4
 8003910:	f00c fb10 	bl	800ff34 <xTaskCreate>
 8003914:	0003      	movs	r3, r0
 8003916:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	d105      	bne.n	800392a <main+0x25e>
		printf("Error Task Attrape\r\n");
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <main+0x340>)
 8003920:	0018      	movs	r0, r3
 8003922:	f00e fad9 	bl	8011ed8 <puts>
		Error_Handler();
 8003926:	f000 f8e3 	bl	8003af0 <Error_Handler>
	}
	printf("bye bye task Attrape\r\n");
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <main+0x344>)
 800392c:	0018      	movs	r0, r3
 800392e:	f00e fad3 	bl	8011ed8 <puts>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003932:	f7ff fc8d 	bl	8003250 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003936:	f00c fa10 	bl	800fd5a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800393a:	e7fe      	b.n	800393a <main+0x26e>
 800393c:	08014bd8 	.word	0x08014bd8
 8003940:	080036b5 	.word	0x080036b5
 8003944:	2000831c 	.word	0x2000831c
 8003948:	08014be0 	.word	0x08014be0
 800394c:	08014bfc 	.word	0x08014bfc
 8003950:	2000068c 	.word	0x2000068c
 8003954:	08014c10 	.word	0x08014c10
 8003958:	08002c45 	.word	0x08002c45
 800395c:	20000688 	.word	0x20000688
 8003960:	08014c18 	.word	0x08014c18
 8003964:	08014c2c 	.word	0x08014c2c
 8003968:	08014c40 	.word	0x08014c40
 800396c:	08014c58 	.word	0x08014c58
 8003970:	080022ad 	.word	0x080022ad
 8003974:	200004d8 	.word	0x200004d8
 8003978:	08014c60 	.word	0x08014c60
 800397c:	08014c74 	.word	0x08014c74
 8003980:	080025e5 	.word	0x080025e5
 8003984:	200004dc 	.word	0x200004dc
 8003988:	08014c84 	.word	0x08014c84
 800398c:	08014ca0 	.word	0x08014ca0
 8003990:	08014cb4 	.word	0x08014cb4
 8003994:	080113a9 	.word	0x080113a9
 8003998:	20008318 	.word	0x20008318
 800399c:	08014cb8 	.word	0x08014cb8
 80039a0:	08014cc8 	.word	0x08014cc8
 80039a4:	08014cdc 	.word	0x08014cdc
 80039a8:	200006a4 	.word	0x200006a4
 80039ac:	08014cf0 	.word	0x08014cf0
 80039b0:	08002cc9 	.word	0x08002cc9
 80039b4:	200006a0 	.word	0x200006a0
 80039b8:	08014cfc 	.word	0x08014cfc
 80039bc:	08014d14 	.word	0x08014d14
 80039c0:	08014d28 	.word	0x08014d28
 80039c4:	08014d40 	.word	0x08014d40
 80039c8:	08002949 	.word	0x08002949
 80039cc:	20000690 	.word	0x20000690
 80039d0:	08014d48 	.word	0x08014d48
 80039d4:	08014d5c 	.word	0x08014d5c
 80039d8:	08014d74 	.word	0x08014d74
 80039dc:	08002a0d 	.word	0x08002a0d
 80039e0:	20000694 	.word	0x20000694
 80039e4:	08014d80 	.word	0x08014d80
 80039e8:	08014d98 	.word	0x08014d98
 80039ec:	08014db0 	.word	0x08014db0
 80039f0:	08002b31 	.word	0x08002b31
 80039f4:	2000069c 	.word	0x2000069c
 80039f8:	08014db8 	.word	0x08014db8
 80039fc:	08014dcc 	.word	0x08014dcc
 8003a00:	08014de4 	.word	0x08014de4
 8003a04:	08002bc9 	.word	0x08002bc9
 8003a08:	20000698 	.word	0x20000698
 8003a0c:	08014dec 	.word	0x08014dec
 8003a10:	08014e00 	.word	0x08014e00

08003a14 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b093      	sub	sp, #76	; 0x4c
 8003a18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a1a:	2414      	movs	r4, #20
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	0018      	movs	r0, r3
 8003a20:	2334      	movs	r3, #52	; 0x34
 8003a22:	001a      	movs	r2, r3
 8003a24:	2100      	movs	r1, #0
 8003a26:	f00d fd54 	bl	80114d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	2310      	movs	r3, #16
 8003a30:	001a      	movs	r2, r3
 8003a32:	2100      	movs	r1, #0
 8003a34:	f00d fd4d 	bl	80114d2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f002 fcfd 	bl	800643c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	0052      	lsls	r2, r2, #1
 8003a4e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003a50:	0021      	movs	r1, r4
 8003a52:	187b      	adds	r3, r7, r1
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	2202      	movs	r2, #2
 8003a62:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2202      	movs	r2, #2
 8003a68:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2208      	movs	r2, #8
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	0292      	lsls	r2, r2, #10
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	0592      	lsls	r2, r2, #22
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f002 fd23 	bl	80064d4 <HAL_RCC_OscConfig>
 8003a8e:	1e03      	subs	r3, r0, #0
 8003a90:	d001      	beq.n	8003a96 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8003a92:	f000 f82d 	bl	8003af0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2207      	movs	r2, #7
 8003a9a:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f003 f81e 	bl	8006af4 <HAL_RCC_ClockConfig>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d001      	beq.n	8003ac0 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8003abc:	f000 f818 	bl	8003af0 <Error_Handler>
	}
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b013      	add	sp, #76	; 0x4c
 8003ac6:	bd90      	pop	{r4, r7, pc}

08003ac8 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	0002      	movs	r2, r0
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, "Stop\r\n", 8, HAL_MAX_DELAY);
	xTaskNotifyGive(h_bordure);
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2202      	movs	r2, #2
 8003adc:	2100      	movs	r1, #0
 8003ade:	f00c ff37 	bl	8010950 <xTaskGenericNotify>
	//vTaskResume(h_motor);
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	20000690 	.word	0x20000690

08003af0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003af4:	b672      	cpsid	i
}
 8003af6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003af8:	e7fe      	b.n	8003af8 <Error_Handler+0x8>
	...

08003afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_MspInit+0x50>)
 8003b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_MspInit+0x50>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <HAL_MspInit+0x50>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2201      	movs	r2, #1
 8003b14:	4013      	ands	r3, r2
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_MspInit+0x50>)
 8003b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_MspInit+0x50>)
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	0549      	lsls	r1, r1, #21
 8003b24:	430a      	orrs	r2, r1
 8003b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_MspInit+0x50>)
 8003b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	055b      	lsls	r3, r3, #21
 8003b30:	4013      	ands	r3, r2
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003b36:	2302      	movs	r3, #2
 8003b38:	425b      	negs	r3, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2103      	movs	r1, #3
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f001 fbfa 	bl	8005338 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003b54:	e7fe      	b.n	8003b54 <NMI_Handler+0x4>

08003b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <HardFault_Handler+0x4>

08003b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b60:	f000 fe80 	bl	8004864 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003b64:	f00c fe96 	bl	8010894 <xTaskGetSchedulerState>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003b6e:	f00d f8cb 	bl	8010d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB1_OUT_Pin);
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f001 fe5b 	bl	8005838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB2_OUT_Pin);
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	f001 fe53 	bl	8005838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <USART1_IRQHandler+0x14>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f004 fff6 	bl	8008b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	20000938 	.word	0x20000938

08003bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	return 1;
 8003bb4:	2301      	movs	r3, #1
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_kill>:

int _kill(int pid, int sig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bc6:	f00d fc51 	bl	801146c <__errno>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	2216      	movs	r2, #22
 8003bce:	601a      	str	r2, [r3, #0]
	return -1;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	425b      	negs	r3, r3
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_exit>:

void _exit (int status)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003be4:	2301      	movs	r3, #1
 8003be6:	425a      	negs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0011      	movs	r1, r2
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff ffe5 	bl	8003bbc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bf2:	e7fe      	b.n	8003bf2 <_exit+0x16>

08003bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e00a      	b.n	8003c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c06:	e000      	b.n	8003c0a <_read+0x16>
 8003c08:	bf00      	nop
 8003c0a:	0001      	movs	r1, r0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	60ba      	str	r2, [r7, #8]
 8003c12:	b2ca      	uxtb	r2, r1
 8003c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	dbf0      	blt.n	8003c06 <_read+0x12>
	}

return len;
 8003c24:	687b      	ldr	r3, [r7, #4]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b006      	add	sp, #24
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e009      	b.n	8003c54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	60ba      	str	r2, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7ff fd21 	bl	8003690 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	dbf1      	blt.n	8003c40 <_write+0x12>
	}
	return len;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b006      	add	sp, #24
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_close>:

int _close(int file)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	425b      	negs	r3, r3
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b002      	add	sp, #8
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	0192      	lsls	r2, r2, #6
 8003c8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b002      	add	sp, #8
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_isatty>:

int _isatty(int file)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c9e:	2301      	movs	r3, #1
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
	return 0;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b004      	add	sp, #16
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <_sbrk+0x5c>)
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <_sbrk+0x60>)
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <_sbrk+0x64>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <_sbrk+0x64>)
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <_sbrk+0x68>)
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <_sbrk+0x64>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d207      	bcs.n	8003d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf0:	f00d fbbc 	bl	801146c <__errno>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	e009      	b.n	8003d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <_sbrk+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <_sbrk+0x64>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	18d2      	adds	r2, r2, r3
 8003d0e:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <_sbrk+0x64>)
 8003d10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20009000 	.word	0x20009000
 8003d20:	00000400 	.word	0x00000400
 8003d24:	200007b8 	.word	0x200007b8
 8003d28:	20008330 	.word	0x20008330

08003d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b08d      	sub	sp, #52	; 0x34
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d3e:	240c      	movs	r4, #12
 8003d40:	193b      	adds	r3, r7, r4
 8003d42:	0018      	movs	r0, r3
 8003d44:	2324      	movs	r3, #36	; 0x24
 8003d46:	001a      	movs	r2, r3
 8003d48:	2100      	movs	r1, #0
 8003d4a:	f00d fbc2 	bl	80114d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d4e:	003b      	movs	r3, r7
 8003d50:	0018      	movs	r0, r3
 8003d52:	230c      	movs	r3, #12
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f00d fbbb 	bl	80114d2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <MX_TIM1_Init+0xcc>)
 8003d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d62:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <MX_TIM1_Init+0xd0>)
 8003d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d80:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003d86:	0021      	movs	r1, r4
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	2201      	movs	r2, #1
 8003d98:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2201      	movs	r2, #1
 8003db0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003dbe:	187a      	adds	r2, r7, r1
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f003 fbf9 	bl	80075bc <HAL_TIM_Encoder_Init>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003dce:	f7ff fe8f 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003de4:	003a      	movs	r2, r7
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_TIM1_Init+0xc8>)
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f004 fc4e 	bl	800868c <HAL_TIMEx_MasterConfigSynchronization>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003df4:	f7ff fe7c 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b00d      	add	sp, #52	; 0x34
 8003dfe:	bd90      	pop	{r4, r7, pc}
 8003e00:	200007bc 	.word	0x200007bc
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	0000ffff 	.word	0x0000ffff

08003e0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b08d      	sub	sp, #52	; 0x34
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e12:	240c      	movs	r4, #12
 8003e14:	193b      	adds	r3, r7, r4
 8003e16:	0018      	movs	r0, r3
 8003e18:	2324      	movs	r3, #36	; 0x24
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	f00d fb58 	bl	80114d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e22:	003b      	movs	r3, r7
 8003e24:	0018      	movs	r0, r3
 8003e26:	230c      	movs	r3, #12
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f00d fb51 	bl	80114d2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e32:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <MX_TIM3_Init+0xc0>)
 8003e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e36:	4b24      	ldr	r3, [pc, #144]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3c:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e42:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e44:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <MX_TIM3_Init+0xc4>)
 8003e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e54:	0021      	movs	r1, r4
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2200      	movs	r2, #0
 8003e60:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2201      	movs	r2, #1
 8003e66:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2200      	movs	r2, #0
 8003e72:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	2200      	movs	r2, #0
 8003e84:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2200      	movs	r2, #0
 8003e8a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e8c:	187a      	adds	r2, r7, r1
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003e90:	0011      	movs	r1, r2
 8003e92:	0018      	movs	r0, r3
 8003e94:	f003 fb92 	bl	80075bc <HAL_TIM_Encoder_Init>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003e9c:	f7ff fe28 	bl	8003af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea0:	003b      	movs	r3, r7
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea6:	003b      	movs	r3, r7
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eac:	003a      	movs	r2, r7
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <MX_TIM3_Init+0xbc>)
 8003eb0:	0011      	movs	r1, r2
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f004 fbea 	bl	800868c <HAL_TIMEx_MasterConfigSynchronization>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003ebc:	f7ff fe18 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b00d      	add	sp, #52	; 0x34
 8003ec6:	bd90      	pop	{r4, r7, pc}
 8003ec8:	20000808 	.word	0x20000808
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	0000ffff 	.word	0x0000ffff

08003ed4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003eda:	003b      	movs	r3, r7
 8003edc:	0018      	movs	r0, r3
 8003ede:	2310      	movs	r3, #16
 8003ee0:	001a      	movs	r2, r3
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	f00d faf5 	bl	80114d2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <MX_TIM14_Init+0x90>)
 8003eec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003efa:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003efc:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <MX_TIM14_Init+0x94>)
 8003efe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f06:	4b16      	ldr	r3, [pc, #88]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003f0c:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f003 f8cc 	bl	80070ac <HAL_TIM_Base_Init>
 8003f14:	1e03      	subs	r3, r0, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003f18:	f7ff fdea 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f003 faec 	bl	80074fc <HAL_TIM_IC_Init>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d001      	beq.n	8003f2c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003f28:	f7ff fde2 	bl	8003af0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f2c:	003b      	movs	r3, r7
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f32:	003b      	movs	r3, r7
 8003f34:	2201      	movs	r2, #1
 8003f36:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f38:	003b      	movs	r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	2200      	movs	r2, #0
 8003f42:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f44:	0039      	movs	r1, r7
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <MX_TIM14_Init+0x8c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f003 fc82 	bl	8007854 <HAL_TIM_IC_ConfigChannel>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003f54:	f7ff fdcc 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000854 	.word	0x20000854
 8003f64:	40002000 	.word	0x40002000
 8003f68:	0000ffff 	.word	0x0000ffff

08003f6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b094      	sub	sp, #80	; 0x50
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f72:	2334      	movs	r3, #52	; 0x34
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	0018      	movs	r0, r3
 8003f78:	231c      	movs	r3, #28
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f00d faa8 	bl	80114d2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f82:	003b      	movs	r3, r7
 8003f84:	0018      	movs	r0, r3
 8003f86:	2334      	movs	r3, #52	; 0x34
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f00d faa1 	bl	80114d2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003f90:	4b38      	ldr	r3, [pc, #224]	; (8004074 <MX_TIM16_Init+0x108>)
 8003f92:	4a39      	ldr	r2, [pc, #228]	; (8004078 <MX_TIM16_Init+0x10c>)
 8003f94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8003f96:	4b37      	ldr	r3, [pc, #220]	; (8004074 <MX_TIM16_Init+0x108>)
 8003f98:	223f      	movs	r2, #63	; 0x3f
 8003f9a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <MX_TIM16_Init+0x108>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1023;
 8003fa2:	4b34      	ldr	r3, [pc, #208]	; (8004074 <MX_TIM16_Init+0x108>)
 8003fa4:	4a35      	ldr	r2, [pc, #212]	; (800407c <MX_TIM16_Init+0x110>)
 8003fa6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <MX_TIM16_Init+0x108>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fae:	4b31      	ldr	r3, [pc, #196]	; (8004074 <MX_TIM16_Init+0x108>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb4:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <MX_TIM16_Init+0x108>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <MX_TIM16_Init+0x108>)
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f003 f875 	bl	80070ac <HAL_TIM_Base_Init>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003fc6:	f7ff fd93 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003fca:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <MX_TIM16_Init+0x108>)
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f003 f8c5 	bl	800715c <HAL_TIM_PWM_Init>
 8003fd2:	1e03      	subs	r3, r0, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003fd6:	f7ff fd8b 	bl	8003af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fda:	2134      	movs	r1, #52	; 0x34
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2260      	movs	r2, #96	; 0x60
 8003fe0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	22fa      	movs	r2, #250	; 0xfa
 8003fe6:	0052      	lsls	r2, r2, #1
 8003fe8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2200      	movs	r2, #0
 8004000:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004008:	1879      	adds	r1, r7, r1
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <MX_TIM16_Init+0x108>)
 800400c:	2200      	movs	r2, #0
 800400e:	0018      	movs	r0, r3
 8004010:	f003 fcc4 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8004018:	f7ff fd6a 	bl	8003af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800401c:	003b      	movs	r3, r7
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004022:	003b      	movs	r3, r7
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004028:	003b      	movs	r3, r7
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 800402e:	003b      	movs	r3, r7
 8004030:	22cb      	movs	r2, #203	; 0xcb
 8004032:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004034:	003b      	movs	r3, r7
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800403a:	003b      	movs	r3, r7
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	0192      	lsls	r2, r2, #6
 8004040:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004042:	003b      	movs	r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004048:	003b      	movs	r3, r7
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800404e:	003a      	movs	r2, r7
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <MX_TIM16_Init+0x108>)
 8004052:	0011      	movs	r1, r2
 8004054:	0018      	movs	r0, r3
 8004056:	f004 fb81 	bl	800875c <HAL_TIMEx_ConfigBreakDeadTime>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 800405e:	f7ff fd47 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <MX_TIM16_Init+0x108>)
 8004064:	0018      	movs	r0, r3
 8004066:	f000 f9b1 	bl	80043cc <HAL_TIM_MspPostInit>

}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b014      	add	sp, #80	; 0x50
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	200008a0 	.word	0x200008a0
 8004078:	40014400 	.word	0x40014400
 800407c:	000003ff 	.word	0x000003ff

08004080 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b094      	sub	sp, #80	; 0x50
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004086:	2334      	movs	r3, #52	; 0x34
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	0018      	movs	r0, r3
 800408c:	231c      	movs	r3, #28
 800408e:	001a      	movs	r2, r3
 8004090:	2100      	movs	r1, #0
 8004092:	f00d fa1e 	bl	80114d2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004096:	003b      	movs	r3, r7
 8004098:	0018      	movs	r0, r3
 800409a:	2334      	movs	r3, #52	; 0x34
 800409c:	001a      	movs	r2, r3
 800409e:	2100      	movs	r1, #0
 80040a0:	f00d fa17 	bl	80114d2 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <MX_TIM17_Init+0x108>)
 80040a6:	4a39      	ldr	r2, [pc, #228]	; (800418c <MX_TIM17_Init+0x10c>)
 80040a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 80040aa:	4b37      	ldr	r3, [pc, #220]	; (8004188 <MX_TIM17_Init+0x108>)
 80040ac:	223f      	movs	r2, #63	; 0x3f
 80040ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <MX_TIM17_Init+0x108>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1023;
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <MX_TIM17_Init+0x108>)
 80040b8:	4a35      	ldr	r2, [pc, #212]	; (8004190 <MX_TIM17_Init+0x110>)
 80040ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <MX_TIM17_Init+0x108>)
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80040c2:	4b31      	ldr	r3, [pc, #196]	; (8004188 <MX_TIM17_Init+0x108>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c8:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <MX_TIM17_Init+0x108>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80040ce:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <MX_TIM17_Init+0x108>)
 80040d0:	0018      	movs	r0, r3
 80040d2:	f002 ffeb 	bl	80070ac <HAL_TIM_Base_Init>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80040da:	f7ff fd09 	bl	8003af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80040de:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <MX_TIM17_Init+0x108>)
 80040e0:	0018      	movs	r0, r3
 80040e2:	f003 f83b 	bl	800715c <HAL_TIM_PWM_Init>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80040ea:	f7ff fd01 	bl	8003af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ee:	2134      	movs	r1, #52	; 0x34
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2260      	movs	r2, #96	; 0x60
 80040f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	22fa      	movs	r2, #250	; 0xfa
 80040fa:	0052      	lsls	r2, r2, #1
 80040fc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004116:	187b      	adds	r3, r7, r1
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411c:	1879      	adds	r1, r7, r1
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <MX_TIM17_Init+0x108>)
 8004120:	2200      	movs	r2, #0
 8004122:	0018      	movs	r0, r3
 8004124:	f003 fc3a 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 800412c:	f7ff fce0 	bl	8003af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004130:	003b      	movs	r3, r7
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004136:	003b      	movs	r3, r7
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800413c:	003b      	movs	r3, r7
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 8004142:	003b      	movs	r3, r7
 8004144:	22cb      	movs	r2, #203	; 0xcb
 8004146:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004148:	003b      	movs	r3, r7
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800414e:	003b      	movs	r3, r7
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0192      	lsls	r2, r2, #6
 8004154:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004156:	003b      	movs	r3, r7
 8004158:	2200      	movs	r2, #0
 800415a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800415c:	003b      	movs	r3, r7
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004162:	003a      	movs	r2, r7
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <MX_TIM17_Init+0x108>)
 8004166:	0011      	movs	r1, r2
 8004168:	0018      	movs	r0, r3
 800416a:	f004 faf7 	bl	800875c <HAL_TIMEx_ConfigBreakDeadTime>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <MX_TIM17_Init+0xf6>
  {
    Error_Handler();
 8004172:	f7ff fcbd 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <MX_TIM17_Init+0x108>)
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f927 	bl	80043cc <HAL_TIM_MspPostInit>

}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b014      	add	sp, #80	; 0x50
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	200008ec 	.word	0x200008ec
 800418c:	40014800 	.word	0x40014800
 8004190:	000003ff 	.word	0x000003ff

08004194 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b08d      	sub	sp, #52	; 0x34
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800419c:	241c      	movs	r4, #28
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	0018      	movs	r0, r3
 80041a2:	2314      	movs	r3, #20
 80041a4:	001a      	movs	r2, r3
 80041a6:	2100      	movs	r1, #0
 80041a8:	f00d f993 	bl	80114d2 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a46      	ldr	r2, [pc, #280]	; (80042cc <HAL_TIM_Encoder_MspInit+0x138>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d152      	bne.n	800425c <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041b6:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ba:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0109      	lsls	r1, r1, #4
 80041c0:	430a      	orrs	r2, r1
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d6:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041d8:	2104      	movs	r1, #4
 80041da:	430a      	orrs	r2, r1
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34
 80041de:	4b3c      	ldr	r3, [pc, #240]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	2204      	movs	r2, #4
 80041e4:	4013      	ands	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	4b38      	ldr	r3, [pc, #224]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041f0:	2102      	movs	r1, #2
 80041f2:	430a      	orrs	r2, r1
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	2202      	movs	r2, #2
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_Encoder1_CH1_Pin;
 8004202:	193b      	adds	r3, r7, r4
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	0052      	lsls	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420a:	193b      	adds	r3, r7, r4
 800420c:	2202      	movs	r2, #2
 800420e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	193b      	adds	r3, r7, r4
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	193b      	adds	r3, r7, r4
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800421c:	193b      	adds	r3, r7, r4
 800421e:	2202      	movs	r2, #2
 8004220:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH1_GPIO_Port, &GPIO_InitStruct);
 8004222:	193b      	adds	r3, r7, r4
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <HAL_TIM_Encoder_MspInit+0x140>)
 8004226:	0019      	movs	r1, r3
 8004228:	0010      	movs	r0, r2
 800422a:	f001 f983 	bl	8005534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_Encoder1_CH2_Pin;
 800422e:	0021      	movs	r1, r4
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2208      	movs	r2, #8
 8004234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2202      	movs	r2, #2
 800423a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2200      	movs	r2, #0
 8004246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2201      	movs	r2, #1
 800424c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH2_GPIO_Port, &GPIO_InitStruct);
 800424e:	187b      	adds	r3, r7, r1
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_TIM_Encoder_MspInit+0x144>)
 8004252:	0019      	movs	r1, r3
 8004254:	0010      	movs	r0, r2
 8004256:	f001 f96d 	bl	8005534 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800425a:	e032      	b.n	80042c2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(tim_encoderHandle->Instance==TIM3)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <HAL_TIM_Encoder_MspInit+0x148>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d12d      	bne.n	80042c2 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800426c:	2102      	movs	r1, #2
 800426e:	430a      	orrs	r2, r1
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c
 8004272:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004284:	2102      	movs	r1, #2
 8004286:	430a      	orrs	r2, r1
 8004288:	635a      	str	r2, [r3, #52]	; 0x34
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	2202      	movs	r2, #2
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_Encoder2_CH1_Pin|TIM_Encoder2_CH2_Pin;
 8004296:	211c      	movs	r1, #28
 8004298:	187b      	adds	r3, r7, r1
 800429a:	2230      	movs	r2, #48	; 0x30
 800429c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	2202      	movs	r2, #2
 80042a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	2200      	movs	r2, #0
 80042a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	2200      	movs	r2, #0
 80042ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	2201      	movs	r2, #1
 80042b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b6:	187b      	adds	r3, r7, r1
 80042b8:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_TIM_Encoder_MspInit+0x144>)
 80042ba:	0019      	movs	r1, r3
 80042bc:	0010      	movs	r0, r2
 80042be:	f001 f939 	bl	8005534 <HAL_GPIO_Init>
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b00d      	add	sp, #52	; 0x34
 80042c8:	bd90      	pop	{r4, r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	50000800 	.word	0x50000800
 80042d8:	50000400 	.word	0x50000400
 80042dc:	40000400 	.word	0x40000400

080042e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b08d      	sub	sp, #52	; 0x34
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e8:	241c      	movs	r4, #28
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	0018      	movs	r0, r3
 80042ee:	2314      	movs	r3, #20
 80042f0:	001a      	movs	r2, r3
 80042f2:	2100      	movs	r1, #0
 80042f4:	f00d f8ed 	bl	80114d2 <memset>
  if(tim_baseHandle->Instance==TIM14)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <HAL_TIM_Base_MspInit+0xdc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d131      	bne.n	8004366 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004306:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	0209      	lsls	r1, r1, #8
 800430c:	430a      	orrs	r2, r1
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004322:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	635a      	str	r2, [r3, #52]	; 0x34
 800432a:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697b      	ldr	r3, [r7, #20]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM_CC_Pin;
 8004336:	0021      	movs	r1, r4
 8004338:	187b      	adds	r3, r7, r1
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2202      	movs	r2, #2
 8004342:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434a:	187b      	adds	r3, r7, r1
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2204      	movs	r2, #4
 8004354:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_CC_GPIO_Port, &GPIO_InitStruct);
 8004356:	187a      	adds	r2, r7, r1
 8004358:	23a0      	movs	r3, #160	; 0xa0
 800435a:	05db      	lsls	r3, r3, #23
 800435c:	0011      	movs	r1, r2
 800435e:	0018      	movs	r0, r3
 8004360:	f001 f8e8 	bl	8005534 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004364:	e026      	b.n	80043b4 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM16)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_TIM_Base_MspInit+0xe4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10e      	bne.n	800438e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	0289      	lsls	r1, r1, #10
 800437a:	430a      	orrs	r2, r1
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 8004380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	029b      	lsls	r3, r3, #10
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
}
 800438c:	e012      	b.n	80043b4 <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM17)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <HAL_TIM_Base_MspInit+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10d      	bne.n	80043b4 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 800439e:	2180      	movs	r1, #128	; 0x80
 80043a0:	02c9      	lsls	r1, r1, #11
 80043a2:	430a      	orrs	r2, r1
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_TIM_Base_MspInit+0xe0>)
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	02db      	lsls	r3, r3, #11
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b00d      	add	sp, #52	; 0x34
 80043ba:	bd90      	pop	{r4, r7, pc}
 80043bc:	40002000 	.word	0x40002000
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800

080043cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b08b      	sub	sp, #44	; 0x2c
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	2414      	movs	r4, #20
 80043d6:	193b      	adds	r3, r7, r4
 80043d8:	0018      	movs	r0, r3
 80043da:	2314      	movs	r3, #20
 80043dc:	001a      	movs	r2, r3
 80043de:	2100      	movs	r1, #0
 80043e0:	f00d f877 	bl	80114d2 <memset>
  if(timHandle->Instance==TIM16)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a29      	ldr	r2, [pc, #164]	; (8004490 <HAL_TIM_MspPostInit+0xc4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d123      	bne.n	8004436 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ee:	4b29      	ldr	r3, [pc, #164]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 80043f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f2:	4b28      	ldr	r3, [pc, #160]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 80043f4:	2102      	movs	r1, #2
 80043f6:	430a      	orrs	r2, r1
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = TIM_Driver2_CH1N_Pin|TIM_Driver2_CH1_Pin;
 8004406:	193b      	adds	r3, r7, r4
 8004408:	22a0      	movs	r2, #160	; 0xa0
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440e:	0021      	movs	r1, r4
 8004410:	187b      	adds	r3, r7, r1
 8004412:	2202      	movs	r2, #2
 8004414:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	187b      	adds	r3, r7, r1
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8004422:	187b      	adds	r3, r7, r1
 8004424:	2202      	movs	r2, #2
 8004426:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004428:	187b      	adds	r3, r7, r1
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_TIM_MspPostInit+0xcc>)
 800442c:	0019      	movs	r1, r3
 800442e:	0010      	movs	r0, r2
 8004430:	f001 f880 	bl	8005534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004434:	e027      	b.n	8004486 <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM17)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_TIM_MspPostInit+0xd0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d122      	bne.n	8004486 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 8004442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 8004446:	2102      	movs	r1, #2
 8004448:	430a      	orrs	r2, r1
 800444a:	635a      	str	r2, [r3, #52]	; 0x34
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <HAL_TIM_MspPostInit+0xc8>)
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	2202      	movs	r2, #2
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_Driver1_CH1N_Pin|TIM_Driver1_CH1_Pin;
 8004458:	2114      	movs	r1, #20
 800445a:	187b      	adds	r3, r7, r1
 800445c:	22a0      	movs	r2, #160	; 0xa0
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	187b      	adds	r3, r7, r1
 8004464:	2202      	movs	r2, #2
 8004466:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	187b      	adds	r3, r7, r1
 8004470:	2200      	movs	r2, #0
 8004472:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2202      	movs	r2, #2
 8004478:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447a:	187b      	adds	r3, r7, r1
 800447c:	4a06      	ldr	r2, [pc, #24]	; (8004498 <HAL_TIM_MspPostInit+0xcc>)
 800447e:	0019      	movs	r1, r3
 8004480:	0010      	movs	r0, r2
 8004482:	f001 f857 	bl	8005534 <HAL_GPIO_Init>
}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b00b      	add	sp, #44	; 0x2c
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40014400 	.word	0x40014400
 8004494:	40021000 	.word	0x40021000
 8004498:	50000400 	.word	0x50000400
 800449c:	40014800 	.word	0x40014800

080044a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044a6:	4a24      	ldr	r2, [pc, #144]	; (8004538 <MX_USART1_UART_Init+0x98>)
 80044a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044ac:	22e1      	movs	r2, #225	; 0xe1
 80044ae:	0252      	lsls	r2, r2, #9
 80044b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044c6:	220c      	movs	r2, #12
 80044c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044d8:	2200      	movs	r2, #0
 80044da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044dc:	4b15      	ldr	r3, [pc, #84]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044de:	2200      	movs	r2, #0
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044ea:	0018      	movs	r0, r3
 80044ec:	f004 fa00 	bl	80088f0 <HAL_UART_Init>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d001      	beq.n	80044f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80044f4:	f7ff fafc 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <MX_USART1_UART_Init+0x94>)
 80044fa:	2100      	movs	r1, #0
 80044fc:	0018      	movs	r0, r3
 80044fe:	f005 faf3 	bl	8009ae8 <HAL_UARTEx_SetTxFifoThreshold>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d001      	beq.n	800450a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004506:	f7ff faf3 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <MX_USART1_UART_Init+0x94>)
 800450c:	2100      	movs	r1, #0
 800450e:	0018      	movs	r0, r3
 8004510:	f005 fb2a 	bl	8009b68 <HAL_UARTEx_SetRxFifoThreshold>
 8004514:	1e03      	subs	r3, r0, #0
 8004516:	d001      	beq.n	800451c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004518:	f7ff faea 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <MX_USART1_UART_Init+0x94>)
 800451e:	0018      	movs	r0, r3
 8004520:	f005 faa8 	bl	8009a74 <HAL_UARTEx_DisableFifoMode>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004528:	f7ff fae2 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	20000938 	.word	0x20000938
 8004538:	40013800 	.word	0x40013800

0800453c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004540:	4b22      	ldr	r3, [pc, #136]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004542:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <MX_USART2_UART_Init+0x94>)
 8004544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <MX_USART2_UART_Init+0x98>)
 800454a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <MX_USART2_UART_Init+0x90>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004552:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004554:	2200      	movs	r2, #0
 8004556:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <MX_USART2_UART_Init+0x90>)
 800455a:	2200      	movs	r2, #0
 800455c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800455e:	4b1b      	ldr	r3, [pc, #108]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004560:	220c      	movs	r2, #12
 8004562:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004566:	2200      	movs	r2, #0
 8004568:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <MX_USART2_UART_Init+0x90>)
 800456c:	2200      	movs	r2, #0
 800456e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004572:	2200      	movs	r2, #0
 8004574:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004578:	2200      	movs	r2, #0
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <MX_USART2_UART_Init+0x90>)
 800457e:	2200      	movs	r2, #0
 8004580:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004584:	0018      	movs	r0, r3
 8004586:	f004 fa09 	bl	800899c <HAL_HalfDuplex_Init>
 800458a:	1e03      	subs	r3, r0, #0
 800458c:	d001      	beq.n	8004592 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800458e:	f7ff faaf 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <MX_USART2_UART_Init+0x90>)
 8004594:	2100      	movs	r1, #0
 8004596:	0018      	movs	r0, r3
 8004598:	f005 faa6 	bl	8009ae8 <HAL_UARTEx_SetTxFifoThreshold>
 800459c:	1e03      	subs	r3, r0, #0
 800459e:	d001      	beq.n	80045a4 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80045a0:	f7ff faa6 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <MX_USART2_UART_Init+0x90>)
 80045a6:	2100      	movs	r1, #0
 80045a8:	0018      	movs	r0, r3
 80045aa:	f005 fadd 	bl	8009b68 <HAL_UARTEx_SetRxFifoThreshold>
 80045ae:	1e03      	subs	r3, r0, #0
 80045b0:	d001      	beq.n	80045b6 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80045b2:	f7ff fa9d 	bl	8003af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <MX_USART2_UART_Init+0x90>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f005 fa5b 	bl	8009a74 <HAL_UARTEx_DisableFifoMode>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d001      	beq.n	80045c6 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80045c2:	f7ff fa95 	bl	8003af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200009cc 	.word	0x200009cc
 80045d0:	40004400 	.word	0x40004400
 80045d4:	000f4240 	.word	0x000f4240

080045d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b093      	sub	sp, #76	; 0x4c
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	2334      	movs	r3, #52	; 0x34
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	0018      	movs	r0, r3
 80045e6:	2314      	movs	r3, #20
 80045e8:	001a      	movs	r2, r3
 80045ea:	2100      	movs	r1, #0
 80045ec:	f00c ff71 	bl	80114d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045f0:	2418      	movs	r4, #24
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	0018      	movs	r0, r3
 80045f6:	231c      	movs	r3, #28
 80045f8:	001a      	movs	r2, r3
 80045fa:	2100      	movs	r1, #0
 80045fc:	f00c ff69 	bl	80114d2 <memset>
  if(uartHandle->Instance==USART1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a48      	ldr	r2, [pc, #288]	; (8004728 <HAL_UART_MspInit+0x150>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d146      	bne.n	8004698 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800460a:	193b      	adds	r3, r7, r4
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004610:	193b      	adds	r3, r7, r4
 8004612:	2200      	movs	r2, #0
 8004614:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004616:	193b      	adds	r3, r7, r4
 8004618:	0018      	movs	r0, r3
 800461a:	f002 fc13 	bl	8006e44 <HAL_RCCEx_PeriphCLKConfig>
 800461e:	1e03      	subs	r3, r0, #0
 8004620:	d001      	beq.n	8004626 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004622:	f7ff fa65 	bl	8003af0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_UART_MspInit+0x154>)
 8004628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462a:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_UART_MspInit+0x154>)
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	01c9      	lsls	r1, r1, #7
 8004630:	430a      	orrs	r2, r1
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_UART_MspInit+0x154>)
 8004636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	4013      	ands	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004642:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_UART_MspInit+0x154>)
 8004644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_UART_MspInit+0x154>)
 8004648:	2104      	movs	r1, #4
 800464a:	430a      	orrs	r2, r1
 800464c:	635a      	str	r2, [r3, #52]	; 0x34
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_UART_MspInit+0x154>)
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2204      	movs	r2, #4
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_STLink_TX_Pin|UART_STLink_RX_Pin;
 800465a:	2134      	movs	r1, #52	; 0x34
 800465c:	187b      	adds	r3, r7, r1
 800465e:	2230      	movs	r2, #48	; 0x30
 8004660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	187b      	adds	r3, r7, r1
 8004664:	2202      	movs	r2, #2
 8004666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004668:	187b      	adds	r3, r7, r1
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	187b      	adds	r3, r7, r1
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2201      	movs	r2, #1
 8004678:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800467a:	187b      	adds	r3, r7, r1
 800467c:	4a2c      	ldr	r2, [pc, #176]	; (8004730 <HAL_UART_MspInit+0x158>)
 800467e:	0019      	movs	r1, r3
 8004680:	0010      	movs	r0, r2
 8004682:	f000 ff57 	bl	8005534 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2103      	movs	r1, #3
 800468a:	201b      	movs	r0, #27
 800468c:	f000 fe54 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004690:	201b      	movs	r0, #27
 8004692:	f000 fe66 	bl	8005362 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004696:	e043      	b.n	8004720 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a25      	ldr	r2, [pc, #148]	; (8004734 <HAL_UART_MspInit+0x15c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d13e      	bne.n	8004720 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80046a2:	2118      	movs	r1, #24
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2202      	movs	r2, #2
 80046a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	0018      	movs	r0, r3
 80046b4:	f002 fbc6 	bl	8006e44 <HAL_RCCEx_PeriphCLKConfig>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80046bc:	f7ff fa18 	bl	8003af0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <HAL_UART_MspInit+0x154>)
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_UART_MspInit+0x154>)
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	0289      	lsls	r1, r1, #10
 80046ca:	430a      	orrs	r2, r1
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_UART_MspInit+0x154>)
 80046d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	029b      	lsls	r3, r3, #10
 80046d6:	4013      	ands	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_UART_MspInit+0x154>)
 80046de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_UART_MspInit+0x154>)
 80046e2:	2108      	movs	r1, #8
 80046e4:	430a      	orrs	r2, r1
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34
 80046e8:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_UART_MspInit+0x154>)
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2208      	movs	r2, #8
 80046ee:	4013      	ands	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_XL320_Pin;
 80046f4:	2134      	movs	r1, #52	; 0x34
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	2220      	movs	r2, #32
 80046fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	2212      	movs	r2, #18
 8004700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004702:	187b      	adds	r3, r7, r1
 8004704:	2201      	movs	r2, #1
 8004706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	187b      	adds	r3, r7, r1
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 800470e:	187b      	adds	r3, r7, r1
 8004710:	2200      	movs	r2, #0
 8004712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_XL320_GPIO_Port, &GPIO_InitStruct);
 8004714:	187b      	adds	r3, r7, r1
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <HAL_UART_MspInit+0x160>)
 8004718:	0019      	movs	r1, r3
 800471a:	0010      	movs	r0, r2
 800471c:	f000 ff0a 	bl	8005534 <HAL_GPIO_Init>
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b013      	add	sp, #76	; 0x4c
 8004726:	bd90      	pop	{r4, r7, pc}
 8004728:	40013800 	.word	0x40013800
 800472c:	40021000 	.word	0x40021000
 8004730:	50000800 	.word	0x50000800
 8004734:	40004400 	.word	0x40004400
 8004738:	50000c00 	.word	0x50000c00

0800473c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800473c:	480d      	ldr	r0, [pc, #52]	; (8004774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800473e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004740:	f7ff faf4 	bl	8003d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004744:	480c      	ldr	r0, [pc, #48]	; (8004778 <LoopForever+0x6>)
  ldr r1, =_edata
 8004746:	490d      	ldr	r1, [pc, #52]	; (800477c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <LoopForever+0xe>)
  movs r3, #0
 800474a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800474c:	e002      	b.n	8004754 <LoopCopyDataInit>

0800474e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800474e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004752:	3304      	adds	r3, #4

08004754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004758:	d3f9      	bcc.n	800474e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800475c:	4c0a      	ldr	r4, [pc, #40]	; (8004788 <LoopForever+0x16>)
  movs r3, #0
 800475e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004760:	e001      	b.n	8004766 <LoopFillZerobss>

08004762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004764:	3204      	adds	r2, #4

08004766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004768:	d3fb      	bcc.n	8004762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800476a:	f00c fe85 	bl	8011478 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800476e:	f7fe ffad 	bl	80036cc <main>

08004772 <LoopForever>:

LoopForever:
  b LoopForever
 8004772:	e7fe      	b.n	8004772 <LoopForever>
  ldr   r0, =_estack
 8004774:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800477c:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8004780:	080154e0 	.word	0x080154e0
  ldr r2, =_sbss
 8004784:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8004788:	20008330 	.word	0x20008330

0800478c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800478c:	e7fe      	b.n	800478c <ADC1_IRQHandler>
	...

08004790 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_Init+0x3c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_Init+0x3c>)
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	0049      	lsls	r1, r1, #1
 80047a6:	430a      	orrs	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047aa:	2003      	movs	r0, #3
 80047ac:	f000 f810 	bl	80047d0 <HAL_InitTick>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d003      	beq.n	80047bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80047b4:	1dfb      	adds	r3, r7, #7
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e001      	b.n	80047c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80047bc:	f7ff f99e 	bl	8003afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	781b      	ldrb	r3, [r3, #0]
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b002      	add	sp, #8
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40022000 	.word	0x40022000

080047d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047d8:	230f      	movs	r3, #15
 80047da:	18fb      	adds	r3, r7, r3
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_InitTick+0x88>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02b      	beq.n	8004840 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_InitTick+0x8c>)
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_InitTick+0x88>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	0019      	movs	r1, r3
 80047f2:	23fa      	movs	r3, #250	; 0xfa
 80047f4:	0098      	lsls	r0, r3, #2
 80047f6:	f7fb fca3 	bl	8000140 <__udivsi3>
 80047fa:	0003      	movs	r3, r0
 80047fc:	0019      	movs	r1, r3
 80047fe:	0020      	movs	r0, r4
 8004800:	f7fb fc9e 	bl	8000140 <__udivsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	0018      	movs	r0, r3
 8004808:	f000 fdbb 	bl	8005382 <HAL_SYSTICK_Config>
 800480c:	1e03      	subs	r3, r0, #0
 800480e:	d112      	bne.n	8004836 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d80a      	bhi.n	800482c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	2301      	movs	r3, #1
 800481a:	425b      	negs	r3, r3
 800481c:	2200      	movs	r2, #0
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fd8a 	bl	8005338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_InitTick+0x90>)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e00d      	b.n	8004848 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800482c:	230f      	movs	r3, #15
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e008      	b.n	8004848 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004836:	230f      	movs	r3, #15
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004840:	230f      	movs	r3, #15
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004848:	230f      	movs	r3, #15
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b005      	add	sp, #20
 8004854:	bd90      	pop	{r4, r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	20000008 	.word	0x20000008
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_IncTick+0x1c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	001a      	movs	r2, r3
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_IncTick+0x20>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	18d2      	adds	r2, r2, r3
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_IncTick+0x20>)
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000008 	.word	0x20000008
 8004884:	20000a60 	.word	0x20000a60

08004888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  return uwTick;
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <HAL_GetTick+0x10>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	0018      	movs	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000a60 	.word	0x20000a60

0800489c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7ff fff0 	bl	8004888 <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	d005      	beq.n	80048c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_Delay+0x44>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	001a      	movs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	f7ff ffe0 	bl	8004888 <HAL_GetTick>
 80048c8:	0002      	movs	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d8f7      	bhi.n	80048c4 <HAL_Delay+0x28>
  {
  }
}
 80048d4:	46c0      	nop			; (mov r8, r8)
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b004      	add	sp, #16
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20000008 	.word	0x20000008

080048e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a05      	ldr	r2, [pc, #20]	; (8004908 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80048f4:	401a      	ands	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b002      	add	sp, #8
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	fe3fffff 	.word	0xfe3fffff

0800490c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	23e0      	movs	r3, #224	; 0xe0
 800491a:	045b      	lsls	r3, r3, #17
 800491c:	4013      	ands	r3, r2
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}

08004926 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	2104      	movs	r1, #4
 800493a:	400a      	ands	r2, r1
 800493c:	2107      	movs	r1, #7
 800493e:	4091      	lsls	r1, r2
 8004940:	000a      	movs	r2, r1
 8004942:	43d2      	mvns	r2, r2
 8004944:	401a      	ands	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2104      	movs	r1, #4
 800494a:	400b      	ands	r3, r1
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4099      	lsls	r1, r3
 8004950:	000b      	movs	r3, r1
 8004952:	431a      	orrs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b004      	add	sp, #16
 800495e:	bd80      	pop	{r7, pc}

08004960 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	2104      	movs	r1, #4
 8004972:	400a      	ands	r2, r1
 8004974:	2107      	movs	r1, #7
 8004976:	4091      	lsls	r1, r2
 8004978:	000a      	movs	r2, r1
 800497a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2104      	movs	r1, #4
 8004980:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004982:	40da      	lsrs	r2, r3
 8004984:	0013      	movs	r3, r2
}
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b002      	add	sp, #8
 800498c:	bd80      	pop	{r7, pc}

0800498e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	211f      	movs	r1, #31
 80049a2:	400a      	ands	r2, r1
 80049a4:	210f      	movs	r1, #15
 80049a6:	4091      	lsls	r1, r2
 80049a8:	000a      	movs	r2, r1
 80049aa:	43d2      	mvns	r2, r2
 80049ac:	401a      	ands	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0e9b      	lsrs	r3, r3, #26
 80049b2:	210f      	movs	r1, #15
 80049b4:	4019      	ands	r1, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	201f      	movs	r0, #31
 80049ba:	4003      	ands	r3, r0
 80049bc:	4099      	lsls	r1, r3
 80049be:	000b      	movs	r3, r1
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b004      	add	sp, #16
 80049cc:	bd80      	pop	{r7, pc}

080049ce <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	035b      	lsls	r3, r3, #13
 80049e0:	0b5b      	lsrs	r3, r3, #13
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b002      	add	sp, #8
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	0352      	lsls	r2, r2, #13
 8004a02:	0b52      	lsrs	r2, r2, #13
 8004a04:	43d2      	mvns	r2, r2
 8004a06:	401a      	ands	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0212      	lsls	r2, r2, #8
 8004a28:	43d2      	mvns	r2, r2
 8004a2a:	401a      	ands	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	400b      	ands	r3, r1
 8004a34:	4904      	ldr	r1, [pc, #16]	; (8004a48 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004a36:	400b      	ands	r3, r1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	07ffff00 	.word	0x07ffff00

08004a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <LL_ADC_EnableInternalRegulator+0x24>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2280      	movs	r2, #128	; 0x80
 8004a5e:	0552      	lsls	r2, r2, #21
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	6fffffe8 	.word	0x6fffffe8

08004a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	055b      	lsls	r3, r3, #21
 8004a84:	401a      	ands	r2, r3
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	055b      	lsls	r3, r3, #21
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d101      	bne.n	8004a92 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e000      	b.n	8004a94 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_IsEnabled+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_IsEnabled+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}

08004abe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2204      	movs	r2, #4
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d101      	bne.n	8004ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b002      	add	sp, #8
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae8:	231f      	movs	r3, #31
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e17f      	b.n	8004e06 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fe fb41 	bl	8003198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2254      	movs	r2, #84	; 0x54
 8004b20:	2100      	movs	r1, #0
 8004b22:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7ff ffa3 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d115      	bne.n	8004b5e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7ff ff88 	bl	8004a4c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b3c:	4bb4      	ldr	r3, [pc, #720]	; (8004e10 <HAL_ADC_Init+0x330>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	49b4      	ldr	r1, [pc, #720]	; (8004e14 <HAL_ADC_Init+0x334>)
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fb fafc 	bl	8000140 <__udivsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b50:	e002      	b.n	8004b58 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f9      	bne.n	8004b52 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7ff ff86 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	2210      	movs	r2, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b84:	231f      	movs	r3, #31
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7ff ff94 	bl	8004abe <LL_ADC_REG_IsConversionOngoing>
 8004b96:	0003      	movs	r3, r0
 8004b98:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d000      	beq.n	8004ba6 <HAL_ADC_Init+0xc6>
 8004ba4:	e122      	b.n	8004dec <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d000      	beq.n	8004bae <HAL_ADC_Init+0xce>
 8004bac:	e11e      	b.n	8004dec <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	4a99      	ldr	r2, [pc, #612]	; (8004e18 <HAL_ADC_Init+0x338>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f7ff ff6a 	bl	8004a9c <LL_ADC_IsEnabled>
 8004bc8:	1e03      	subs	r3, r0, #0
 8004bca:	d000      	beq.n	8004bce <HAL_ADC_Init+0xee>
 8004bcc:	e0ad      	b.n	8004d2a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	7e1b      	ldrb	r3, [r3, #24]
 8004bd6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004bd8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7e5b      	ldrb	r3, [r3, #25]
 8004bde:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004be0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	7e9b      	ldrb	r3, [r3, #26]
 8004be6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004be8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_ADC_Init+0x118>
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	015b      	lsls	r3, r3, #5
 8004bf6:	e000      	b.n	8004bfa <HAL_ADC_Init+0x11a>
 8004bf8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004bfa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004c00:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da04      	bge.n	8004c14 <HAL_ADC_Init+0x134>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	e001      	b.n	8004c18 <HAL_ADC_Init+0x138>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004c18:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	212c      	movs	r1, #44	; 0x2c
 8004c1e:	5c5b      	ldrb	r3, [r3, r1]
 8004c20:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004c22:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d115      	bne.n	8004c60 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7e9b      	ldrb	r3, [r3, #26]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	0252      	lsls	r2, r2, #9
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	e00b      	b.n	8004c60 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2201      	movs	r2, #1
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	23e0      	movs	r3, #224	; 0xe0
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004c76:	4313      	orrs	r3, r2
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a65      	ldr	r2, [pc, #404]	; (8004e1c <HAL_ADC_Init+0x33c>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	0f9b      	lsrs	r3, r3, #30
 8004c9a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	223c      	movs	r2, #60	; 0x3c
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d111      	bne.n	8004cd6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	0f9b      	lsrs	r3, r3, #30
 8004cb8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004cbe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004cc4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004cca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a50      	ldr	r2, [pc, #320]	; (8004e20 <HAL_ADC_Init+0x340>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	23c0      	movs	r3, #192	; 0xc0
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d018      	beq.n	8004d2a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	05db      	lsls	r3, r3, #23
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d012      	beq.n	8004d2a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d00c      	beq.n	8004d2a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004d10:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <HAL_ADC_Init+0x344>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a44      	ldr	r2, [pc, #272]	; (8004e28 <HAL_ADC_Init+0x348>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	23f0      	movs	r3, #240	; 0xf0
 8004d20:	039b      	lsls	r3, r3, #14
 8004d22:	401a      	ands	r2, r3
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_ADC_Init+0x344>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	001a      	movs	r2, r3
 8004d34:	2100      	movs	r1, #0
 8004d36:	f7ff fdf6 	bl	8004926 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	493a      	ldr	r1, [pc, #232]	; (8004e2c <HAL_ADC_Init+0x34c>)
 8004d44:	001a      	movs	r2, r3
 8004d46:	f7ff fdee 	bl	8004926 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	4249      	negs	r1, r1
 8004d60:	430a      	orrs	r2, r1
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
 8004d64:	e018      	b.n	8004d98 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	039b      	lsls	r3, r3, #14
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d112      	bne.n	8004d98 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	221c      	movs	r2, #28
 8004d82:	4013      	ands	r3, r2
 8004d84:	2210      	movs	r2, #16
 8004d86:	4252      	negs	r2, r2
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f7ff fdde 	bl	8004960 <LL_ADC_GetSamplingTimeCommonChannels>
 8004da4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10b      	bne.n	8004dc6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	2203      	movs	r2, #3
 8004dba:	4393      	bics	r3, r2
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004dc4:	e01c      	b.n	8004e00 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	2212      	movs	r2, #18
 8004dcc:	4393      	bics	r3, r2
 8004dce:	2210      	movs	r2, #16
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	2201      	movs	r2, #1
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004de2:	231f      	movs	r3, #31
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004dea:	e009      	b.n	8004e00 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	2210      	movs	r2, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004e00:	231f      	movs	r3, #31
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	781b      	ldrb	r3, [r3, #0]
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b008      	add	sp, #32
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	20000000 	.word	0x20000000
 8004e14:	00030d40 	.word	0x00030d40
 8004e18:	fffffefd 	.word	0xfffffefd
 8004e1c:	fffe0201 	.word	0xfffe0201
 8004e20:	1ffffc02 	.word	0x1ffffc02
 8004e24:	40012708 	.word	0x40012708
 8004e28:	ffc3ffff 	.word	0xffc3ffff
 8004e2c:	07ffff04 	.word	0x07ffff04

08004e30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e3a:	2317      	movs	r3, #23
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2254      	movs	r2, #84	; 0x54
 8004e4a:	5c9b      	ldrb	r3, [r3, r2]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x24>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e1c0      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x3a6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2254      	movs	r2, #84	; 0x54
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7ff fe2c 	bl	8004abe <LL_ADC_REG_IsConversionOngoing>
 8004e66:	1e03      	subs	r3, r0, #0
 8004e68:	d000      	beq.n	8004e6c <HAL_ADC_ConfigChannel+0x3c>
 8004e6a:	e1a3      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d100      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x46>
 8004e74:	e143      	b.n	80050fe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d004      	beq.n	8004e8c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004e86:	4ac1      	ldr	r2, [pc, #772]	; (800518c <HAL_ADC_ConfigChannel+0x35c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d108      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0019      	movs	r1, r3
 8004e96:	0010      	movs	r0, r2
 8004e98:	f7ff fd99 	bl	80049ce <LL_ADC_REG_SetSequencerChAdd>
 8004e9c:	e0c9      	b.n	8005032 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	211f      	movs	r1, #31
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	210f      	movs	r1, #15
 8004eac:	4099      	lsls	r1, r3
 8004eae:	000b      	movs	r3, r1
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	035b      	lsls	r3, r3, #13
 8004ebc:	0b5b      	lsrs	r3, r3, #13
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x9c>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	221f      	movs	r2, #31
 8004ec8:	4013      	ands	r3, r2
 8004eca:	e098      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d000      	beq.n	8004ed8 <HAL_ADC_ConfigChannel+0xa8>
 8004ed6:	e091      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x1cc>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2202      	movs	r2, #2
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d000      	beq.n	8004ee4 <HAL_ADC_ConfigChannel+0xb4>
 8004ee2:	e089      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x1c8>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	d000      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0xc0>
 8004eee:	e081      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x1c4>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d000      	beq.n	8004efc <HAL_ADC_ConfigChannel+0xcc>
 8004efa:	e079      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x1c0>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2210      	movs	r2, #16
 8004f02:	4013      	ands	r3, r2
 8004f04:	d000      	beq.n	8004f08 <HAL_ADC_ConfigChannel+0xd8>
 8004f06:	e071      	b.n	8004fec <HAL_ADC_ConfigChannel+0x1bc>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d000      	beq.n	8004f14 <HAL_ADC_ConfigChannel+0xe4>
 8004f12:	e069      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x1b8>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2240      	movs	r2, #64	; 0x40
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d000      	beq.n	8004f20 <HAL_ADC_ConfigChannel+0xf0>
 8004f1e:	e061      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x1b4>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2280      	movs	r2, #128	; 0x80
 8004f26:	4013      	ands	r3, r2
 8004f28:	d000      	beq.n	8004f2c <HAL_ADC_ConfigChannel+0xfc>
 8004f2a:	e059      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x1b0>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4013      	ands	r3, r2
 8004f36:	d151      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x1ac>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4013      	ands	r3, r2
 8004f42:	d149      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x1a8>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d141      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x1a4>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d139      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x1a0>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	4013      	ands	r3, r2
 8004f66:	d131      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x19c>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	019b      	lsls	r3, r3, #6
 8004f70:	4013      	ands	r3, r2
 8004f72:	d129      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x198>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	01db      	lsls	r3, r3, #7
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d121      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x194>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d119      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x190>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	025b      	lsls	r3, r3, #9
 8004f94:	4013      	ands	r3, r2
 8004f96:	d111      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x18c>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d109      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x188>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	02db      	lsls	r3, r3, #11
 8004fac:	4013      	ands	r3, r2
 8004fae:	d001      	beq.n	8004fb4 <HAL_ADC_ConfigChannel+0x184>
 8004fb0:	2312      	movs	r3, #18
 8004fb2:	e024      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e022      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fb8:	2311      	movs	r3, #17
 8004fba:	e020      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	e01e      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	e01c      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fc4:	230e      	movs	r3, #14
 8004fc6:	e01a      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fc8:	230d      	movs	r3, #13
 8004fca:	e018      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	e016      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fd0:	230b      	movs	r3, #11
 8004fd2:	e014      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	e012      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fd8:	2309      	movs	r3, #9
 8004fda:	e010      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	e00e      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	e00c      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	e00a      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fe8:	2305      	movs	r3, #5
 8004fea:	e008      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004fec:	2304      	movs	r3, #4
 8004fee:	e006      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e004      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e002      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1ce>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	6852      	ldr	r2, [r2, #4]
 8005002:	201f      	movs	r0, #31
 8005004:	4002      	ands	r2, r0
 8005006:	4093      	lsls	r3, r2
 8005008:	000a      	movs	r2, r1
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d808      	bhi.n	8005032 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	001a      	movs	r2, r3
 800502e:	f7ff fcae 	bl	800498e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	001a      	movs	r2, r3
 8005040:	f7ff fce8 	bl	8004a14 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db00      	blt.n	800504e <HAL_ADC_ConfigChannel+0x21e>
 800504c:	e0bc      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800504e:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 8005050:	0018      	movs	r0, r3
 8005052:	f7ff fc5b 	bl	800490c <LL_ADC_GetCommonPathInternalCh>
 8005056:	0003      	movs	r3, r0
 8005058:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4d      	ldr	r2, [pc, #308]	; (8005194 <HAL_ADC_ConfigChannel+0x364>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d122      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800506c:	d11d      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	0412      	lsls	r2, r2, #16
 8005074:	4313      	orrs	r3, r2
 8005076:	4a46      	ldr	r2, [pc, #280]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 8005078:	0019      	movs	r1, r3
 800507a:	0010      	movs	r0, r2
 800507c:	f7ff fc32 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005080:	4b45      	ldr	r3, [pc, #276]	; (8005198 <HAL_ADC_ConfigChannel+0x368>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4945      	ldr	r1, [pc, #276]	; (800519c <HAL_ADC_ConfigChannel+0x36c>)
 8005086:	0018      	movs	r0, r3
 8005088:	f7fb f85a 	bl	8000140 <__udivsi3>
 800508c:	0003      	movs	r3, r0
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	0013      	movs	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	189b      	adds	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800509a:	e002      	b.n	80050a2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f9      	bne.n	800509c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050a8:	e08e      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3c      	ldr	r2, [pc, #240]	; (80051a0 <HAL_ADC_ConfigChannel+0x370>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10e      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	045b      	lsls	r3, r3, #17
 80050ba:	4013      	ands	r3, r2
 80050bc:	d109      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	0452      	lsls	r2, r2, #17
 80050c4:	4313      	orrs	r3, r2
 80050c6:	4a32      	ldr	r2, [pc, #200]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 80050c8:	0019      	movs	r1, r3
 80050ca:	0010      	movs	r0, r2
 80050cc:	f7ff fc0a 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
 80050d0:	e07a      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_ADC_ConfigChannel+0x374>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d000      	beq.n	80050de <HAL_ADC_ConfigChannel+0x2ae>
 80050dc:	e074      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	03db      	lsls	r3, r3, #15
 80050e4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80050e6:	d000      	beq.n	80050ea <HAL_ADC_ConfigChannel+0x2ba>
 80050e8:	e06e      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	03d2      	lsls	r2, r2, #15
 80050f0:	4313      	orrs	r3, r2
 80050f2:	4a27      	ldr	r2, [pc, #156]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 80050f4:	0019      	movs	r1, r3
 80050f6:	0010      	movs	r0, r2
 80050f8:	f7ff fbf4 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
 80050fc:	e064      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	429a      	cmp	r2, r3
 8005108:	d004      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_ADC_ConfigChannel+0x35c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d107      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	0019      	movs	r1, r3
 800511e:	0010      	movs	r0, r2
 8005120:	f7ff fc66 	bl	80049f0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da4d      	bge.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 800512e:	0018      	movs	r0, r3
 8005130:	f7ff fbec 	bl	800490c <LL_ADC_GetCommonPathInternalCh>
 8005134:	0003      	movs	r3, r0
 8005136:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_ADC_ConfigChannel+0x364>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d108      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_ADC_ConfigChannel+0x378>)
 8005146:	4013      	ands	r3, r2
 8005148:	4a11      	ldr	r2, [pc, #68]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 800514a:	0019      	movs	r1, r3
 800514c:	0010      	movs	r0, r2
 800514e:	f7ff fbc9 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
 8005152:	e039      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_ADC_ConfigChannel+0x370>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <HAL_ADC_ConfigChannel+0x37c>)
 8005162:	4013      	ands	r3, r2
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 8005166:	0019      	movs	r1, r3
 8005168:	0010      	movs	r0, r2
 800516a:	f7ff fbbb 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
 800516e:	e02b      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <HAL_ADC_ConfigChannel+0x374>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d126      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <HAL_ADC_ConfigChannel+0x380>)
 800517e:	4013      	ands	r3, r2
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <HAL_ADC_ConfigChannel+0x360>)
 8005182:	0019      	movs	r1, r3
 8005184:	0010      	movs	r0, r2
 8005186:	f7ff fbad 	bl	80048e4 <LL_ADC_SetCommonPathInternalCh>
 800518a:	e01d      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x398>
 800518c:	80000004 	.word	0x80000004
 8005190:	40012708 	.word	0x40012708
 8005194:	b0001000 	.word	0xb0001000
 8005198:	20000000 	.word	0x20000000
 800519c:	00030d40 	.word	0x00030d40
 80051a0:	b8004000 	.word	0xb8004000
 80051a4:	b4002000 	.word	0xb4002000
 80051a8:	ff7fffff 	.word	0xff7fffff
 80051ac:	feffffff 	.word	0xfeffffff
 80051b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	2220      	movs	r2, #32
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80051c0:	2317      	movs	r3, #23
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2254      	movs	r2, #84	; 0x54
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80051d0:	2317      	movs	r3, #23
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b006      	add	sp, #24
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)

080051e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	0002      	movs	r2, r0
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b7f      	cmp	r3, #127	; 0x7f
 80051f2:	d809      	bhi.n	8005208 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	001a      	movs	r2, r3
 80051fa:	231f      	movs	r3, #31
 80051fc:	401a      	ands	r2, r3
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <__NVIC_EnableIRQ+0x30>)
 8005200:	2101      	movs	r1, #1
 8005202:	4091      	lsls	r1, r2
 8005204:	000a      	movs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}
 8005210:	e000e100 	.word	0xe000e100

08005214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	0002      	movs	r2, r0
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	1dfb      	adds	r3, r7, #7
 8005220:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005222:	1dfb      	adds	r3, r7, #7
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b7f      	cmp	r3, #127	; 0x7f
 8005228:	d828      	bhi.n	800527c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800522a:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <__NVIC_SetPriority+0xd4>)
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b25b      	sxtb	r3, r3
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	33c0      	adds	r3, #192	; 0xc0
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	589b      	ldr	r3, [r3, r2]
 800523a:	1dfa      	adds	r2, r7, #7
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	0011      	movs	r1, r2
 8005240:	2203      	movs	r2, #3
 8005242:	400a      	ands	r2, r1
 8005244:	00d2      	lsls	r2, r2, #3
 8005246:	21ff      	movs	r1, #255	; 0xff
 8005248:	4091      	lsls	r1, r2
 800524a:	000a      	movs	r2, r1
 800524c:	43d2      	mvns	r2, r2
 800524e:	401a      	ands	r2, r3
 8005250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	22ff      	movs	r2, #255	; 0xff
 8005258:	401a      	ands	r2, r3
 800525a:	1dfb      	adds	r3, r7, #7
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	0018      	movs	r0, r3
 8005260:	2303      	movs	r3, #3
 8005262:	4003      	ands	r3, r0
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005268:	481f      	ldr	r0, [pc, #124]	; (80052e8 <__NVIC_SetPriority+0xd4>)
 800526a:	1dfb      	adds	r3, r7, #7
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b25b      	sxtb	r3, r3
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	430a      	orrs	r2, r1
 8005274:	33c0      	adds	r3, #192	; 0xc0
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800527a:	e031      	b.n	80052e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <__NVIC_SetPriority+0xd8>)
 800527e:	1dfb      	adds	r3, r7, #7
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	0019      	movs	r1, r3
 8005284:	230f      	movs	r3, #15
 8005286:	400b      	ands	r3, r1
 8005288:	3b08      	subs	r3, #8
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	3306      	adds	r3, #6
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	3304      	adds	r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	1dfa      	adds	r2, r7, #7
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	0011      	movs	r1, r2
 800529c:	2203      	movs	r2, #3
 800529e:	400a      	ands	r2, r1
 80052a0:	00d2      	lsls	r2, r2, #3
 80052a2:	21ff      	movs	r1, #255	; 0xff
 80052a4:	4091      	lsls	r1, r2
 80052a6:	000a      	movs	r2, r1
 80052a8:	43d2      	mvns	r2, r2
 80052aa:	401a      	ands	r2, r3
 80052ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	22ff      	movs	r2, #255	; 0xff
 80052b4:	401a      	ands	r2, r3
 80052b6:	1dfb      	adds	r3, r7, #7
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	0018      	movs	r0, r3
 80052bc:	2303      	movs	r3, #3
 80052be:	4003      	ands	r3, r0
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80052c4:	4809      	ldr	r0, [pc, #36]	; (80052ec <__NVIC_SetPriority+0xd8>)
 80052c6:	1dfb      	adds	r3, r7, #7
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	001c      	movs	r4, r3
 80052cc:	230f      	movs	r3, #15
 80052ce:	4023      	ands	r3, r4
 80052d0:	3b08      	subs	r3, #8
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	430a      	orrs	r2, r1
 80052d6:	3306      	adds	r3, #6
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	18c3      	adds	r3, r0, r3
 80052dc:	3304      	adds	r3, #4
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b003      	add	sp, #12
 80052e6:	bd90      	pop	{r4, r7, pc}
 80052e8:	e000e100 	.word	0xe000e100
 80052ec:	e000ed00 	.word	0xe000ed00

080052f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	045b      	lsls	r3, r3, #17
 8005300:	429a      	cmp	r2, r3
 8005302:	d301      	bcc.n	8005308 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005304:	2301      	movs	r3, #1
 8005306:	e010      	b.n	800532a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <SysTick_Config+0x44>)
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	3a01      	subs	r2, #1
 800530e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005310:	2301      	movs	r3, #1
 8005312:	425b      	negs	r3, r3
 8005314:	2103      	movs	r1, #3
 8005316:	0018      	movs	r0, r3
 8005318:	f7ff ff7c 	bl	8005214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <SysTick_Config+0x44>)
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <SysTick_Config+0x44>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b002      	add	sp, #8
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	e000e010 	.word	0xe000e010

08005338 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	210f      	movs	r1, #15
 8005344:	187b      	adds	r3, r7, r1
 8005346:	1c02      	adds	r2, r0, #0
 8005348:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	187b      	adds	r3, r7, r1
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	0011      	movs	r1, r2
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff ff5d 	bl	8005214 <__NVIC_SetPriority>
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b004      	add	sp, #16
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	0002      	movs	r2, r0
 800536a:	1dfb      	adds	r3, r7, #7
 800536c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b25b      	sxtb	r3, r3
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff ff33 	bl	80051e0 <__NVIC_EnableIRQ>
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b002      	add	sp, #8
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	0018      	movs	r0, r3
 800538e:	f7ff ffaf 	bl	80052f0 <SysTick_Config>
 8005392:	0003      	movs	r3, r0
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e050      	b.n	8005450 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2225      	movs	r2, #37	; 0x25
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d008      	beq.n	80053cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	2100      	movs	r1, #0
 80053c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e041      	b.n	8005450 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	210e      	movs	r1, #14
 80053d8:	438a      	bics	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	491c      	ldr	r1, [pc, #112]	; (8005458 <HAL_DMA_Abort+0xbc>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	438a      	bics	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80053fc:	4b17      	ldr	r3, [pc, #92]	; (800545c <HAL_DMA_Abort+0xc0>)
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	221c      	movs	r2, #28
 8005406:	4013      	ands	r3, r2
 8005408:	2201      	movs	r2, #1
 800540a:	409a      	lsls	r2, r3
 800540c:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_DMA_Abort+0xc0>)
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800541a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542e:	490a      	ldr	r1, [pc, #40]	; (8005458 <HAL_DMA_Abort+0xbc>)
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800543c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2225      	movs	r2, #37	; 0x25
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2224      	movs	r2, #36	; 0x24
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}
 8005458:	fffffeff 	.word	0xfffffeff
 800545c:	40020000 	.word	0x40020000

08005460 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005468:	210f      	movs	r1, #15
 800546a:	187b      	adds	r3, r7, r1
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2225      	movs	r2, #37	; 0x25
 8005474:	5c9b      	ldrb	r3, [r3, r2]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d006      	beq.n	800548a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2204      	movs	r2, #4
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005482:	187b      	adds	r3, r7, r1
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e049      	b.n	800551e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	210e      	movs	r1, #14
 8005496:	438a      	bics	r2, r1
 8005498:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2101      	movs	r1, #1
 80054a6:	438a      	bics	r2, r1
 80054a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	491d      	ldr	r1, [pc, #116]	; (800552c <HAL_DMA_Abort_IT+0xcc>)
 80054b6:	400a      	ands	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <HAL_DMA_Abort_IT+0xd0>)
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	221c      	movs	r2, #28
 80054c4:	4013      	ands	r3, r2
 80054c6:	2201      	movs	r2, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_DMA_Abort_IT+0xd0>)
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80054d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ec:	490f      	ldr	r1, [pc, #60]	; (800552c <HAL_DMA_Abort_IT+0xcc>)
 80054ee:	400a      	ands	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80054fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2225      	movs	r2, #37	; 0x25
 8005500:	2101      	movs	r1, #1
 8005502:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	2100      	movs	r1, #0
 800550a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	0010      	movs	r0, r2
 800551c:	4798      	blx	r3
    }
  }
  return status;
 800551e:	230f      	movs	r3, #15
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	781b      	ldrb	r3, [r3, #0]
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b004      	add	sp, #16
 800552a:	bd80      	pop	{r7, pc}
 800552c:	fffffeff 	.word	0xfffffeff
 8005530:	40020000 	.word	0x40020000

08005534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005542:	e147      	b.n	80057d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2101      	movs	r1, #1
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4091      	lsls	r1, r2
 800554e:	000a      	movs	r2, r1
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <HAL_GPIO_Init+0x28>
 800555a:	e138      	b.n	80057ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2203      	movs	r2, #3
 8005562:	4013      	ands	r3, r2
 8005564:	2b01      	cmp	r3, #1
 8005566:	d005      	beq.n	8005574 <HAL_GPIO_Init+0x40>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2203      	movs	r2, #3
 800556e:	4013      	ands	r3, r2
 8005570:	2b02      	cmp	r3, #2
 8005572:	d130      	bne.n	80055d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	409a      	lsls	r2, r3
 8005582:	0013      	movs	r3, r2
 8005584:	43da      	mvns	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4013      	ands	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	409a      	lsls	r2, r3
 8005596:	0013      	movs	r3, r2
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055aa:	2201      	movs	r2, #1
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	43da      	mvns	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4013      	ands	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	2201      	movs	r2, #1
 80055c2:	401a      	ands	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	409a      	lsls	r2, r3
 80055c8:	0013      	movs	r3, r2
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2203      	movs	r2, #3
 80055dc:	4013      	ands	r3, r2
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d017      	beq.n	8005612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	409a      	lsls	r2, r3
 80055f0:	0013      	movs	r3, r2
 80055f2:	43da      	mvns	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	409a      	lsls	r2, r3
 8005604:	0013      	movs	r3, r2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2203      	movs	r2, #3
 8005618:	4013      	ands	r3, r2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d123      	bne.n	8005666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	08da      	lsrs	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3208      	adds	r2, #8
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	58d3      	ldr	r3, [r2, r3]
 800562a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2207      	movs	r2, #7
 8005630:	4013      	ands	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	220f      	movs	r2, #15
 8005636:	409a      	lsls	r2, r3
 8005638:	0013      	movs	r3, r2
 800563a:	43da      	mvns	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2107      	movs	r1, #7
 800564a:	400b      	ands	r3, r1
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	409a      	lsls	r2, r3
 8005650:	0013      	movs	r3, r2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	08da      	lsrs	r2, r3, #3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3208      	adds	r2, #8
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	6939      	ldr	r1, [r7, #16]
 8005664:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	2203      	movs	r2, #3
 8005672:	409a      	lsls	r2, r3
 8005674:	0013      	movs	r3, r2
 8005676:	43da      	mvns	r2, r3
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4013      	ands	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2203      	movs	r2, #3
 8005684:	401a      	ands	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	409a      	lsls	r2, r3
 800568c:	0013      	movs	r3, r2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	23c0      	movs	r3, #192	; 0xc0
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	4013      	ands	r3, r2
 80056a4:	d100      	bne.n	80056a8 <HAL_GPIO_Init+0x174>
 80056a6:	e092      	b.n	80057ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80056a8:	4a50      	ldr	r2, [pc, #320]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	3318      	adds	r3, #24
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	589b      	ldr	r3, [r3, r2]
 80056b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2203      	movs	r2, #3
 80056ba:	4013      	ands	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	220f      	movs	r2, #15
 80056c0:	409a      	lsls	r2, r3
 80056c2:	0013      	movs	r3, r2
 80056c4:	43da      	mvns	r2, r3
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	23a0      	movs	r3, #160	; 0xa0
 80056d0:	05db      	lsls	r3, r3, #23
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d013      	beq.n	80056fe <HAL_GPIO_Init+0x1ca>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a45      	ldr	r2, [pc, #276]	; (80057f0 <HAL_GPIO_Init+0x2bc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00d      	beq.n	80056fa <HAL_GPIO_Init+0x1c6>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a44      	ldr	r2, [pc, #272]	; (80057f4 <HAL_GPIO_Init+0x2c0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x1c2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a43      	ldr	r2, [pc, #268]	; (80057f8 <HAL_GPIO_Init+0x2c4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_GPIO_Init+0x1be>
 80056ee:	2303      	movs	r3, #3
 80056f0:	e006      	b.n	8005700 <HAL_GPIO_Init+0x1cc>
 80056f2:	2305      	movs	r3, #5
 80056f4:	e004      	b.n	8005700 <HAL_GPIO_Init+0x1cc>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e002      	b.n	8005700 <HAL_GPIO_Init+0x1cc>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_GPIO_Init+0x1cc>
 80056fe:	2300      	movs	r3, #0
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	2103      	movs	r1, #3
 8005704:	400a      	ands	r2, r1
 8005706:	00d2      	lsls	r2, r2, #3
 8005708:	4093      	lsls	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005710:	4936      	ldr	r1, [pc, #216]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	3318      	adds	r3, #24
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800571e:	4b33      	ldr	r3, [pc, #204]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	43da      	mvns	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	035b      	lsls	r3, r3, #13
 8005736:	4013      	ands	r3, r2
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005742:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005748:	4b28      	ldr	r3, [pc, #160]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	43da      	mvns	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	039b      	lsls	r3, r3, #14
 8005760:	4013      	ands	r3, r2
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800576c:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005772:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 8005774:	2384      	movs	r3, #132	; 0x84
 8005776:	58d3      	ldr	r3, [r2, r3]
 8005778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	43da      	mvns	r2, r3
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	4013      	ands	r3, r2
 800578e:	d003      	beq.n	8005798 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005798:	4914      	ldr	r1, [pc, #80]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 800579a:	2284      	movs	r2, #132	; 0x84
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80057a0:	4a12      	ldr	r2, [pc, #72]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	58d3      	ldr	r3, [r2, r3]
 80057a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	43da      	mvns	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	025b      	lsls	r3, r3, #9
 80057ba:	4013      	ands	r3, r2
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057c6:	4909      	ldr	r1, [pc, #36]	; (80057ec <HAL_GPIO_Init+0x2b8>)
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3301      	adds	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	40da      	lsrs	r2, r3
 80057dc:	1e13      	subs	r3, r2, #0
 80057de:	d000      	beq.n	80057e2 <HAL_GPIO_Init+0x2ae>
 80057e0:	e6b0      	b.n	8005544 <HAL_GPIO_Init+0x10>
  }
}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b006      	add	sp, #24
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021800 	.word	0x40021800
 80057f0:	50000400 	.word	0x50000400
 80057f4:	50000800 	.word	0x50000800
 80057f8:	50000c00 	.word	0x50000c00

080057fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	0008      	movs	r0, r1
 8005806:	0011      	movs	r1, r2
 8005808:	1cbb      	adds	r3, r7, #2
 800580a:	1c02      	adds	r2, r0, #0
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	1c7b      	adds	r3, r7, #1
 8005810:	1c0a      	adds	r2, r1, #0
 8005812:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005814:	1c7b      	adds	r3, r7, #1
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800581c:	1cbb      	adds	r3, r7, #2
 800581e:	881a      	ldrh	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005824:	e003      	b.n	800582e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005826:	1cbb      	adds	r3, r7, #2
 8005828:	881a      	ldrh	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	46bd      	mov	sp, r7
 8005832:	b002      	add	sp, #8
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	0002      	movs	r2, r0
 8005840:	1dbb      	adds	r3, r7, #6
 8005842:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	1dba      	adds	r2, r7, #6
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	4013      	ands	r3, r2
 800584e:	d008      	beq.n	8005862 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005852:	1dba      	adds	r2, r7, #6
 8005854:	8812      	ldrh	r2, [r2, #0]
 8005856:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005858:	1dbb      	adds	r3, r7, #6
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	0018      	movs	r0, r3
 800585e:	f7fe f933 	bl	8003ac8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	1dba      	adds	r2, r7, #6
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	4013      	ands	r3, r2
 800586c:	d008      	beq.n	8005880 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005870:	1dba      	adds	r2, r7, #6
 8005872:	8812      	ldrh	r2, [r2, #0]
 8005874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005876:	1dbb      	adds	r3, r7, #6
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f806 	bl	800588c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021800 	.word	0x40021800

0800588c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	0002      	movs	r2, r0
 8005894:	1dbb      	adds	r3, r7, #6
 8005896:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e082      	b.n	80059b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2241      	movs	r2, #65	; 0x41
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fd fe45 	bl	8003558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2241      	movs	r2, #65	; 0x41
 80058d2:	2124      	movs	r1, #36	; 0x24
 80058d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	438a      	bics	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4934      	ldr	r1, [pc, #208]	; (80059c0 <HAL_I2C_Init+0x120>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4931      	ldr	r1, [pc, #196]	; (80059c4 <HAL_I2C_Init+0x124>)
 8005900:	400a      	ands	r2, r1
 8005902:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	0209      	lsls	r1, r1, #8
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	e007      	b.n	800592e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2184      	movs	r1, #132	; 0x84
 8005928:	0209      	lsls	r1, r1, #8
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d104      	bne.n	8005940 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	0112      	lsls	r2, r2, #4
 800593e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	491f      	ldr	r1, [pc, #124]	; (80059c8 <HAL_I2C_Init+0x128>)
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	491a      	ldr	r1, [pc, #104]	; (80059c4 <HAL_I2C_Init+0x124>)
 800595c:	400a      	ands	r2, r1
 800595e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	431a      	orrs	r2, r3
 800596a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69d9      	ldr	r1, [r3, #28]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2101      	movs	r1, #1
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2241      	movs	r2, #65	; 0x41
 80059a4:	2120      	movs	r1, #32
 80059a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2242      	movs	r2, #66	; 0x42
 80059b2:	2100      	movs	r1, #0
 80059b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b002      	add	sp, #8
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	f0ffffff 	.word	0xf0ffffff
 80059c4:	ffff7fff 	.word	0xffff7fff
 80059c8:	02008000 	.word	0x02008000

080059cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b089      	sub	sp, #36	; 0x24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	0008      	movs	r0, r1
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	0019      	movs	r1, r3
 80059da:	230a      	movs	r3, #10
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	1c02      	adds	r2, r0, #0
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	2308      	movs	r3, #8
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	1c0a      	adds	r2, r1, #0
 80059e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2241      	movs	r2, #65	; 0x41
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d000      	beq.n	80059f8 <HAL_I2C_Master_Transmit+0x2c>
 80059f6:	e0e7      	b.n	8005bc8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_I2C_Master_Transmit+0x3a>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0e1      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2240      	movs	r2, #64	; 0x40
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a0e:	f7fe ff3b 	bl	8004888 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	0219      	lsls	r1, r3, #8
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2319      	movs	r3, #25
 8005a22:	2201      	movs	r2, #1
 8005a24:	f000 fa04 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005a28:	1e03      	subs	r3, r0, #0
 8005a2a:	d001      	beq.n	8005a30 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0cc      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2241      	movs	r2, #65	; 0x41
 8005a34:	2121      	movs	r1, #33	; 0x21
 8005a36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2242      	movs	r2, #66	; 0x42
 8005a3c:	2110      	movs	r1, #16
 8005a3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2208      	movs	r2, #8
 8005a50:	18ba      	adds	r2, r7, r2
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2bff      	cmp	r3, #255	; 0xff
 8005a64:	d911      	bls.n	8005a8a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	045c      	lsls	r4, r3, #17
 8005a76:	230a      	movs	r3, #10
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	8819      	ldrh	r1, [r3, #0]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	4b55      	ldr	r3, [pc, #340]	; (8005bd4 <HAL_I2C_Master_Transmit+0x208>)
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	0023      	movs	r3, r4
 8005a84:	f000 fc08 	bl	8006298 <I2C_TransferConfig>
 8005a88:	e075      	b.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	049c      	lsls	r4, r3, #18
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	8819      	ldrh	r1, [r3, #0]
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <HAL_I2C_Master_Transmit+0x208>)
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	0023      	movs	r3, r4
 8005aac:	f000 fbf4 	bl	8006298 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ab0:	e061      	b.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 f9f8 	bl	8005eae <I2C_WaitOnTXISFlagUntilTimeout>
 8005abe:	1e03      	subs	r3, r0, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e081      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d03a      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d136      	bne.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	0013      	movs	r3, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	f000 f98b 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e053      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2bff      	cmp	r3, #255	; 0xff
 8005b2a:	d911      	bls.n	8005b50 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	045c      	lsls	r4, r3, #17
 8005b3c:	230a      	movs	r3, #10
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	8819      	ldrh	r1, [r3, #0]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	2300      	movs	r3, #0
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	0023      	movs	r3, r4
 8005b4a:	f000 fba5 	bl	8006298 <I2C_TransferConfig>
 8005b4e:	e012      	b.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	049c      	lsls	r4, r3, #18
 8005b64:	230a      	movs	r3, #10
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	8819      	ldrh	r1, [r3, #0]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	0023      	movs	r3, r4
 8005b72:	f000 fb91 	bl	8006298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d198      	bne.n	8005ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 f9d0 	bl	8005f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b8c:	1e03      	subs	r3, r0, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e01a      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	490c      	ldr	r1, [pc, #48]	; (8005bd8 <HAL_I2C_Master_Transmit+0x20c>)
 8005ba8:	400a      	ands	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2241      	movs	r2, #65	; 0x41
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2242      	movs	r2, #66	; 0x42
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b007      	add	sp, #28
 8005bd0:	bd90      	pop	{r4, r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	80002000 	.word	0x80002000
 8005bd8:	fe00e800 	.word	0xfe00e800

08005bdc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	0008      	movs	r0, r1
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	0019      	movs	r1, r3
 8005bea:	230a      	movs	r3, #10
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	1c02      	adds	r2, r0, #0
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	1c0a      	adds	r2, r1, #0
 8005bf8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2241      	movs	r2, #65	; 0x41
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d000      	beq.n	8005c08 <HAL_I2C_Master_Receive+0x2c>
 8005c06:	e0e8      	b.n	8005dda <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2240      	movs	r2, #64	; 0x40
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_I2C_Master_Receive+0x3a>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e0e2      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2240      	movs	r2, #64	; 0x40
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c1e:	f7fe fe33 	bl	8004888 <HAL_GetTick>
 8005c22:	0003      	movs	r3, r0
 8005c24:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	0219      	lsls	r1, r3, #8
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	2319      	movs	r3, #25
 8005c32:	2201      	movs	r2, #1
 8005c34:	f000 f8fc 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0cd      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2241      	movs	r2, #65	; 0x41
 8005c44:	2122      	movs	r1, #34	; 0x22
 8005c46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2242      	movs	r2, #66	; 0x42
 8005c4c:	2110      	movs	r1, #16
 8005c4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2208      	movs	r2, #8
 8005c60:	18ba      	adds	r2, r7, r2
 8005c62:	8812      	ldrh	r2, [r2, #0]
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	d911      	bls.n	8005c9a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	22ff      	movs	r2, #255	; 0xff
 8005c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	045c      	lsls	r4, r3, #17
 8005c86:	230a      	movs	r3, #10
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	8819      	ldrh	r1, [r3, #0]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	4b55      	ldr	r3, [pc, #340]	; (8005de4 <HAL_I2C_Master_Receive+0x208>)
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	0023      	movs	r3, r4
 8005c94:	f000 fb00 	bl	8006298 <I2C_TransferConfig>
 8005c98:	e076      	b.n	8005d88 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	049c      	lsls	r4, r3, #18
 8005cae:	230a      	movs	r3, #10
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	8819      	ldrh	r1, [r3, #0]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	4b4b      	ldr	r3, [pc, #300]	; (8005de4 <HAL_I2C_Master_Receive+0x208>)
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	0023      	movs	r3, r4
 8005cbc:	f000 faec 	bl	8006298 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005cc0:	e062      	b.n	8005d88 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 f96b 	bl	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cce:	1e03      	subs	r3, r0, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e082      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d03a      	beq.n	8005d88 <HAL_I2C_Master_Receive+0x1ac>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d136      	bne.n	8005d88 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	0013      	movs	r3, r2
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	f000 f882 	bl	8005e30 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	1e03      	subs	r3, r0, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e053      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2bff      	cmp	r3, #255	; 0xff
 8005d3c:	d911      	bls.n	8005d62 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	045c      	lsls	r4, r3, #17
 8005d4e:	230a      	movs	r3, #10
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	8819      	ldrh	r1, [r3, #0]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	0023      	movs	r3, r4
 8005d5c:	f000 fa9c 	bl	8006298 <I2C_TransferConfig>
 8005d60:	e012      	b.n	8005d88 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	049c      	lsls	r4, r3, #18
 8005d76:	230a      	movs	r3, #10
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	8819      	ldrh	r1, [r3, #0]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	0023      	movs	r3, r4
 8005d84:	f000 fa88 	bl	8006298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d197      	bne.n	8005cc2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f000 f8c7 	bl	8005f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d9e:	1e03      	subs	r3, r0, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e01a      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2220      	movs	r2, #32
 8005dac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	490b      	ldr	r1, [pc, #44]	; (8005de8 <HAL_I2C_Master_Receive+0x20c>)
 8005dba:	400a      	ands	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2241      	movs	r2, #65	; 0x41
 8005dc2:	2120      	movs	r1, #32
 8005dc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2242      	movs	r2, #66	; 0x42
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b007      	add	sp, #28
 8005de2:	bd90      	pop	{r4, r7, pc}
 8005de4:	80002400 	.word	0x80002400
 8005de8:	fe00e800 	.word	0xfe00e800

08005dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d103      	bne.n	8005e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2201      	movs	r2, #1
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d007      	beq.n	8005e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2101      	movs	r1, #1
 8005e24:	430a      	orrs	r2, r1
 8005e26:	619a      	str	r2, [r3, #24]
  }
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e40:	e021      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	d01e      	beq.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fe fd1e 	bl	8004888 <HAL_GetTick>
 8005e4c:	0002      	movs	r2, r0
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d113      	bne.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	2220      	movs	r2, #32
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2241      	movs	r2, #65	; 0x41
 8005e6e:	2120      	movs	r1, #32
 8005e70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2242      	movs	r2, #66	; 0x42
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2240      	movs	r2, #64	; 0x40
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00f      	b.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	425a      	negs	r2, r3
 8005e96:	4153      	adcs	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d0ce      	beq.n	8005e42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}

08005eae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eba:	e02b      	b.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f000 f8e8 	bl	8006098 <I2C_IsErrorOccurred>
 8005ec8:	1e03      	subs	r3, r0, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e029      	b.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	d01e      	beq.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed6:	f7fe fcd7 	bl	8004888 <HAL_GetTick>
 8005eda:	0002      	movs	r2, r0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d302      	bcc.n	8005eec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2241      	movs	r2, #65	; 0x41
 8005efc:	2120      	movs	r1, #32
 8005efe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2242      	movs	r2, #66	; 0x42
 8005f04:	2100      	movs	r1, #0
 8005f06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e007      	b.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d1cc      	bne.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b004      	add	sp, #16
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f38:	e028      	b.n	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f8a9 	bl	8006098 <I2C_IsErrorOccurred>
 8005f46:	1e03      	subs	r3, r0, #0
 8005f48:	d001      	beq.n	8005f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e026      	b.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fe fc9b 	bl	8004888 <HAL_GetTick>
 8005f52:	0002      	movs	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	2220      	movs	r2, #32
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2241      	movs	r2, #65	; 0x41
 8005f74:	2120      	movs	r1, #32
 8005f76:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2242      	movs	r2, #66	; 0x42
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	2100      	movs	r1, #0
 8005f86:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	2220      	movs	r2, #32
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d1cf      	bne.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b004      	add	sp, #16
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb0:	e064      	b.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 f86d 	bl	8006098 <I2C_IsErrorOccurred>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e062      	b.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b20      	cmp	r3, #32
 8005fd2:	d138      	bne.n	8006046 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d105      	bne.n	8005fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e04e      	b.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d107      	bne.n	800600c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2210      	movs	r2, #16
 8006002:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2204      	movs	r2, #4
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
 800600a:	e002      	b.n	8006012 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2220      	movs	r2, #32
 8006018:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	491b      	ldr	r1, [pc, #108]	; (8006094 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006026:	400a      	ands	r2, r1
 8006028:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2241      	movs	r2, #65	; 0x41
 800602e:	2120      	movs	r1, #32
 8006030:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2242      	movs	r2, #66	; 0x42
 8006036:	2100      	movs	r1, #0
 8006038:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2240      	movs	r2, #64	; 0x40
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e022      	b.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fe fc1f 	bl	8004888 <HAL_GetTick>
 800604a:	0002      	movs	r2, r0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10f      	bne.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006060:	2220      	movs	r2, #32
 8006062:	431a      	orrs	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2241      	movs	r2, #65	; 0x41
 800606c:	2120      	movs	r1, #32
 800606e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2240      	movs	r2, #64	; 0x40
 8006074:	2100      	movs	r1, #0
 8006076:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e007      	b.n	800608c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2204      	movs	r2, #4
 8006084:	4013      	ands	r3, r2
 8006086:	2b04      	cmp	r3, #4
 8006088:	d193      	bne.n	8005fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b004      	add	sp, #16
 8006092:	bd80      	pop	{r7, pc}
 8006094:	fe00e800 	.word	0xfe00e800

08006098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2327      	movs	r3, #39	; 0x27
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2210      	movs	r2, #16
 80060c0:	4013      	ands	r3, r2
 80060c2:	d100      	bne.n	80060c6 <I2C_IsErrorOccurred+0x2e>
 80060c4:	e082      	b.n	80061cc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060ce:	e060      	b.n	8006192 <I2C_IsErrorOccurred+0xfa>
 80060d0:	2427      	movs	r4, #39	; 0x27
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	193a      	adds	r2, r7, r4
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	3301      	adds	r3, #1
 80060de:	d058      	beq.n	8006192 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fe fbd2 	bl	8004888 <HAL_GetTick>
 80060e4:	0002      	movs	r2, r0
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d306      	bcc.n	80060fe <I2C_IsErrorOccurred+0x66>
 80060f0:	193b      	adds	r3, r7, r4
 80060f2:	193a      	adds	r2, r7, r4
 80060f4:	7812      	ldrb	r2, [r2, #0]
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d149      	bne.n	8006192 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4013      	ands	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800610c:	2013      	movs	r0, #19
 800610e:	183b      	adds	r3, r7, r0
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	2142      	movs	r1, #66	; 0x42
 8006114:	5c52      	ldrb	r2, [r2, r1]
 8006116:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	401a      	ands	r2, r3
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	429a      	cmp	r2, r3
 800612a:	d126      	bne.n	800617a <I2C_IsErrorOccurred+0xe2>
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	429a      	cmp	r2, r3
 8006134:	d021      	beq.n	800617a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8006136:	183b      	adds	r3, r7, r0
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b20      	cmp	r3, #32
 800613c:	d01d      	beq.n	800617a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	01c9      	lsls	r1, r1, #7
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006150:	f7fe fb9a 	bl	8004888 <HAL_GetTick>
 8006154:	0003      	movs	r3, r0
 8006156:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006158:	e00f      	b.n	800617a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800615a:	f7fe fb95 	bl	8004888 <HAL_GetTick>
 800615e:	0002      	movs	r2, r0
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b19      	cmp	r3, #25
 8006166:	d908      	bls.n	800617a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2220      	movs	r2, #32
 800616c:	4313      	orrs	r3, r2
 800616e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006170:	2327      	movs	r3, #39	; 0x27
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]

              break;
 8006178:	e00b      	b.n	8006192 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2220      	movs	r2, #32
 8006182:	4013      	ands	r3, r2
 8006184:	2127      	movs	r1, #39	; 0x27
 8006186:	187a      	adds	r2, r7, r1
 8006188:	1879      	adds	r1, r7, r1
 800618a:	7809      	ldrb	r1, [r1, #0]
 800618c:	7011      	strb	r1, [r2, #0]
 800618e:	2b20      	cmp	r3, #32
 8006190:	d1e3      	bne.n	800615a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2220      	movs	r2, #32
 800619a:	4013      	ands	r3, r2
 800619c:	2b20      	cmp	r3, #32
 800619e:	d004      	beq.n	80061aa <I2C_IsErrorOccurred+0x112>
 80061a0:	2327      	movs	r3, #39	; 0x27
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d092      	beq.n	80060d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061aa:	2327      	movs	r3, #39	; 0x27
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2220      	movs	r2, #32
 80061ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	2204      	movs	r2, #4
 80061c0:	4313      	orrs	r3, r2
 80061c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061c4:	2327      	movs	r3, #39	; 0x27
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	2201      	movs	r2, #1
 80061ca:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	4013      	ands	r3, r2
 80061dc:	d00c      	beq.n	80061f8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	2201      	movs	r2, #1
 80061e2:	4313      	orrs	r3, r2
 80061e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	0052      	lsls	r2, r2, #1
 80061ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061f0:	2327      	movs	r3, #39	; 0x27
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4013      	ands	r3, r2
 8006200:	d00c      	beq.n	800621c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2208      	movs	r2, #8
 8006206:	4313      	orrs	r3, r2
 8006208:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	00d2      	lsls	r2, r2, #3
 8006212:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006214:	2327      	movs	r3, #39	; 0x27
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4013      	ands	r3, r2
 8006224:	d00c      	beq.n	8006240 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2202      	movs	r2, #2
 800622a:	4313      	orrs	r3, r2
 800622c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2280      	movs	r2, #128	; 0x80
 8006234:	0092      	lsls	r2, r2, #2
 8006236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006238:	2327      	movs	r3, #39	; 0x27
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006240:	2327      	movs	r3, #39	; 0x27
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01d      	beq.n	8006286 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	0018      	movs	r0, r3
 800624e:	f7ff fdcd 	bl	8005dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	490d      	ldr	r1, [pc, #52]	; (8006294 <I2C_IsErrorOccurred+0x1fc>)
 800625e:	400a      	ands	r2, r1
 8006260:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2241      	movs	r2, #65	; 0x41
 8006272:	2120      	movs	r1, #32
 8006274:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2242      	movs	r2, #66	; 0x42
 800627a:	2100      	movs	r1, #0
 800627c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2240      	movs	r2, #64	; 0x40
 8006282:	2100      	movs	r1, #0
 8006284:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006286:	2327      	movs	r3, #39	; 0x27
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
}
 800628c:	0018      	movs	r0, r3
 800628e:	46bd      	mov	sp, r7
 8006290:	b00b      	add	sp, #44	; 0x2c
 8006292:	bd90      	pop	{r4, r7, pc}
 8006294:	fe00e800 	.word	0xfe00e800

08006298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	0008      	movs	r0, r1
 80062a2:	0011      	movs	r1, r2
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	240a      	movs	r4, #10
 80062a8:	193b      	adds	r3, r7, r4
 80062aa:	1c02      	adds	r2, r0, #0
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	2009      	movs	r0, #9
 80062b0:	183b      	adds	r3, r7, r0
 80062b2:	1c0a      	adds	r2, r1, #0
 80062b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062b6:	193b      	adds	r3, r7, r4
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	059b      	lsls	r3, r3, #22
 80062bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	0419      	lsls	r1, r3, #16
 80062c4:	23ff      	movs	r3, #255	; 0xff
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	4313      	orrs	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e2:	0d51      	lsrs	r1, r2, #21
 80062e4:	2280      	movs	r2, #128	; 0x80
 80062e6:	00d2      	lsls	r2, r2, #3
 80062e8:	400a      	ands	r2, r1
 80062ea:	4907      	ldr	r1, [pc, #28]	; (8006308 <I2C_TransferConfig+0x70>)
 80062ec:	430a      	orrs	r2, r1
 80062ee:	43d2      	mvns	r2, r2
 80062f0:	401a      	ands	r2, r3
 80062f2:	0011      	movs	r1, r2
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b007      	add	sp, #28
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	03ff63ff 	.word	0x03ff63ff

0800630c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2241      	movs	r2, #65	; 0x41
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	d138      	bne.n	8006394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2240      	movs	r2, #64	; 0x40
 8006326:	5c9b      	ldrb	r3, [r3, r2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800632c:	2302      	movs	r3, #2
 800632e:	e032      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	2101      	movs	r1, #1
 8006336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2241      	movs	r2, #65	; 0x41
 800633c:	2124      	movs	r1, #36	; 0x24
 800633e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	438a      	bics	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4911      	ldr	r1, [pc, #68]	; (80063a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800635c:	400a      	ands	r2, r1
 800635e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2241      	movs	r2, #65	; 0x41
 8006384:	2120      	movs	r1, #32
 8006386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	2100      	movs	r1, #0
 800638e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	ffffefff 	.word	0xffffefff

080063a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2241      	movs	r2, #65	; 0x41
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d139      	bne.n	800642e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	5c9b      	ldrb	r3, [r3, r2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e033      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	2101      	movs	r1, #1
 80063ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2241      	movs	r2, #65	; 0x41
 80063d4:	2124      	movs	r1, #36	; 0x24
 80063d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2101      	movs	r1, #1
 80063e4:	438a      	bics	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a11      	ldr	r2, [pc, #68]	; (8006438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2241      	movs	r2, #65	; 0x41
 800641e:	2120      	movs	r1, #32
 8006420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2240      	movs	r2, #64	; 0x40
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fffff0ff 	.word	0xfffff0ff

0800643c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800644a:	4013      	ands	r3, r2
 800644c:	0019      	movs	r1, r3
 800644e:	4b17      	ldr	r3, [pc, #92]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	430a      	orrs	r2, r1
 8006454:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	429a      	cmp	r2, r3
 800645e:	d11f      	bne.n	80064a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006460:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	0013      	movs	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	189b      	adds	r3, r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4912      	ldr	r1, [pc, #72]	; (80064b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800646e:	0018      	movs	r0, r3
 8006470:	f7f9 fe66 	bl	8000140 <__udivsi3>
 8006474:	0003      	movs	r3, r0
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800647a:	e008      	b.n	800648e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e001      	b.n	800648e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e009      	b.n	80064a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	401a      	ands	r2, r3
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	429a      	cmp	r2, r3
 800649e:	d0ed      	beq.n	800647c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b004      	add	sp, #16
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	40007000 	.word	0x40007000
 80064b0:	fffff9ff 	.word	0xfffff9ff
 80064b4:	20000000 	.word	0x20000000
 80064b8:	000f4240 	.word	0x000f4240

080064bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	23e0      	movs	r3, #224	; 0xe0
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	4013      	ands	r3, r2
}
 80064ca:	0018      	movs	r0, r3
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000

080064d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e2f3      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	4013      	ands	r3, r2
 80064ee:	d100      	bne.n	80064f2 <HAL_RCC_OscConfig+0x1e>
 80064f0:	e07c      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f2:	4bc3      	ldr	r3, [pc, #780]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2238      	movs	r2, #56	; 0x38
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064fc:	4bc0      	ldr	r3, [pc, #768]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2203      	movs	r2, #3
 8006502:	4013      	ands	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b10      	cmp	r3, #16
 800650a:	d102      	bne.n	8006512 <HAL_RCC_OscConfig+0x3e>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d002      	beq.n	8006518 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10b      	bne.n	8006530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006518:	4bb9      	ldr	r3, [pc, #740]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	029b      	lsls	r3, r3, #10
 8006520:	4013      	ands	r3, r2
 8006522:	d062      	beq.n	80065ea <HAL_RCC_OscConfig+0x116>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d15e      	bne.n	80065ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e2ce      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	025b      	lsls	r3, r3, #9
 8006538:	429a      	cmp	r2, r3
 800653a:	d107      	bne.n	800654c <HAL_RCC_OscConfig+0x78>
 800653c:	4bb0      	ldr	r3, [pc, #704]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4baf      	ldr	r3, [pc, #700]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	0249      	lsls	r1, r1, #9
 8006546:	430a      	orrs	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e020      	b.n	800658e <HAL_RCC_OscConfig+0xba>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	23a0      	movs	r3, #160	; 0xa0
 8006552:	02db      	lsls	r3, r3, #11
 8006554:	429a      	cmp	r2, r3
 8006556:	d10e      	bne.n	8006576 <HAL_RCC_OscConfig+0xa2>
 8006558:	4ba9      	ldr	r3, [pc, #676]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4ba8      	ldr	r3, [pc, #672]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	02c9      	lsls	r1, r1, #11
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	4ba6      	ldr	r3, [pc, #664]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4ba5      	ldr	r3, [pc, #660]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	0249      	lsls	r1, r1, #9
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e00b      	b.n	800658e <HAL_RCC_OscConfig+0xba>
 8006576:	4ba2      	ldr	r3, [pc, #648]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4ba1      	ldr	r3, [pc, #644]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800657c:	49a1      	ldr	r1, [pc, #644]	; (8006804 <HAL_RCC_OscConfig+0x330>)
 800657e:	400a      	ands	r2, r1
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	4b9f      	ldr	r3, [pc, #636]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b9e      	ldr	r3, [pc, #632]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006588:	499f      	ldr	r1, [pc, #636]	; (8006808 <HAL_RCC_OscConfig+0x334>)
 800658a:	400a      	ands	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fe f977 	bl	8004888 <HAL_GetTick>
 800659a:	0003      	movs	r3, r0
 800659c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fe f972 	bl	8004888 <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	; 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e28d      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b2:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	4013      	ands	r3, r2
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0xcc>
 80065be:	e015      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fe f962 	bl	8004888 <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ca:	f7fe f95d 	bl	8004888 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b64      	cmp	r3, #100	; 0x64
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e278      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065dc:	4b88      	ldr	r3, [pc, #544]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2380      	movs	r3, #128	; 0x80
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	4013      	ands	r3, r2
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0xf6>
 80065e8:	e000      	b.n	80065ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2202      	movs	r2, #2
 80065f2:	4013      	ands	r3, r2
 80065f4:	d100      	bne.n	80065f8 <HAL_RCC_OscConfig+0x124>
 80065f6:	e099      	b.n	800672c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065f8:	4b81      	ldr	r3, [pc, #516]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2238      	movs	r2, #56	; 0x38
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006602:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2203      	movs	r2, #3
 8006608:	4013      	ands	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b10      	cmp	r3, #16
 8006610:	d102      	bne.n	8006618 <HAL_RCC_OscConfig+0x144>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d002      	beq.n	800661e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d135      	bne.n	800668a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800661e:	4b78      	ldr	r3, [pc, #480]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4013      	ands	r3, r2
 8006628:	d005      	beq.n	8006636 <HAL_RCC_OscConfig+0x162>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e24b      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	4b72      	ldr	r3, [pc, #456]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	4a74      	ldr	r2, [pc, #464]	; (800680c <HAL_RCC_OscConfig+0x338>)
 800663c:	4013      	ands	r3, r2
 800663e:	0019      	movs	r1, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	021a      	lsls	r2, r3, #8
 8006646:	4b6e      	ldr	r3, [pc, #440]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d112      	bne.n	8006678 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006652:	4b6b      	ldr	r3, [pc, #428]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a6e      	ldr	r2, [pc, #440]	; (8006810 <HAL_RCC_OscConfig+0x33c>)
 8006658:	4013      	ands	r3, r2
 800665a:	0019      	movs	r1, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006666:	4b66      	ldr	r3, [pc, #408]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	0adb      	lsrs	r3, r3, #11
 800666c:	2207      	movs	r2, #7
 800666e:	4013      	ands	r3, r2
 8006670:	4a68      	ldr	r2, [pc, #416]	; (8006814 <HAL_RCC_OscConfig+0x340>)
 8006672:	40da      	lsrs	r2, r3
 8006674:	4b68      	ldr	r3, [pc, #416]	; (8006818 <HAL_RCC_OscConfig+0x344>)
 8006676:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006678:	4b68      	ldr	r3, [pc, #416]	; (800681c <HAL_RCC_OscConfig+0x348>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	0018      	movs	r0, r3
 800667e:	f7fe f8a7 	bl	80047d0 <HAL_InitTick>
 8006682:	1e03      	subs	r3, r0, #0
 8006684:	d051      	beq.n	800672a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e221      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d030      	beq.n	80066f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006692:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5e      	ldr	r2, [pc, #376]	; (8006810 <HAL_RCC_OscConfig+0x33c>)
 8006698:	4013      	ands	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066a2:	430a      	orrs	r2, r1
 80066a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80066a6:	4b56      	ldr	r3, [pc, #344]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b55      	ldr	r3, [pc, #340]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	0049      	lsls	r1, r1, #1
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fe f8e8 	bl	8004888 <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066be:	f7fe f8e3 	bl	8004888 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e1fe      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4013      	ands	r3, r2
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066dc:	4b48      	ldr	r3, [pc, #288]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_RCC_OscConfig+0x338>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	4b44      	ldr	r3, [pc, #272]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	e01b      	b.n	800672c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b41      	ldr	r3, [pc, #260]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80066fa:	4949      	ldr	r1, [pc, #292]	; (8006820 <HAL_RCC_OscConfig+0x34c>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe f8c2 	bl	8004888 <HAL_GetTick>
 8006704:	0003      	movs	r3, r0
 8006706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670a:	f7fe f8bd 	bl	8004888 <HAL_GetTick>
 800670e:	0002      	movs	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e1d8      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4013      	ands	r3, r2
 8006726:	d1f0      	bne.n	800670a <HAL_RCC_OscConfig+0x236>
 8006728:	e000      	b.n	800672c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2208      	movs	r2, #8
 8006732:	4013      	ands	r3, r2
 8006734:	d047      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006736:	4b32      	ldr	r3, [pc, #200]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2238      	movs	r2, #56	; 0x38
 800673c:	4013      	ands	r3, r2
 800673e:	2b18      	cmp	r3, #24
 8006740:	d10a      	bne.n	8006758 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006742:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	2202      	movs	r2, #2
 8006748:	4013      	ands	r3, r2
 800674a:	d03c      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d138      	bne.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e1ba      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d019      	beq.n	8006794 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006760:	4b27      	ldr	r3, [pc, #156]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006764:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006766:	2101      	movs	r1, #1
 8006768:	430a      	orrs	r2, r1
 800676a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fe f88c 	bl	8004888 <HAL_GetTick>
 8006770:	0003      	movs	r3, r0
 8006772:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fe f887 	bl	8004888 <HAL_GetTick>
 800677a:	0002      	movs	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e1a2      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800678a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678c:	2202      	movs	r2, #2
 800678e:	4013      	ands	r3, r2
 8006790:	d0f1      	beq.n	8006776 <HAL_RCC_OscConfig+0x2a2>
 8006792:	e018      	b.n	80067c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 8006796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fe f872 	bl	8004888 <HAL_GetTick>
 80067a4:	0003      	movs	r3, r0
 80067a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fe f86d 	bl	8004888 <HAL_GetTick>
 80067ae:	0002      	movs	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e188      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c0:	2202      	movs	r2, #2
 80067c2:	4013      	ands	r3, r2
 80067c4:	d1f1      	bne.n	80067aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2204      	movs	r2, #4
 80067cc:	4013      	ands	r3, r2
 80067ce:	d100      	bne.n	80067d2 <HAL_RCC_OscConfig+0x2fe>
 80067d0:	e0c6      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d2:	231f      	movs	r3, #31
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80067da:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2238      	movs	r2, #56	; 0x38
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d11e      	bne.n	8006824 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <HAL_RCC_OscConfig+0x32c>)
 80067e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ea:	2202      	movs	r2, #2
 80067ec:	4013      	ands	r3, r2
 80067ee:	d100      	bne.n	80067f2 <HAL_RCC_OscConfig+0x31e>
 80067f0:	e0b6      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d000      	beq.n	80067fc <HAL_RCC_OscConfig+0x328>
 80067fa:	e0b1      	b.n	8006960 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e166      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
 8006800:	40021000 	.word	0x40021000
 8006804:	fffeffff 	.word	0xfffeffff
 8006808:	fffbffff 	.word	0xfffbffff
 800680c:	ffff80ff 	.word	0xffff80ff
 8006810:	ffffc7ff 	.word	0xffffc7ff
 8006814:	00f42400 	.word	0x00f42400
 8006818:	20000000 	.word	0x20000000
 800681c:	20000004 	.word	0x20000004
 8006820:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006824:	4bac      	ldr	r3, [pc, #688]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	055b      	lsls	r3, r3, #21
 800682c:	4013      	ands	r3, r2
 800682e:	d101      	bne.n	8006834 <HAL_RCC_OscConfig+0x360>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x362>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800683a:	4ba7      	ldr	r3, [pc, #668]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 800683c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683e:	4ba6      	ldr	r3, [pc, #664]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006840:	2180      	movs	r1, #128	; 0x80
 8006842:	0549      	lsls	r1, r1, #21
 8006844:	430a      	orrs	r2, r1
 8006846:	63da      	str	r2, [r3, #60]	; 0x3c
 8006848:	4ba3      	ldr	r3, [pc, #652]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 800684a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	055b      	lsls	r3, r3, #21
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006856:	231f      	movs	r3, #31
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685e:	4b9f      	ldr	r3, [pc, #636]	; (8006adc <HAL_RCC_OscConfig+0x608>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4013      	ands	r3, r2
 8006868:	d11a      	bne.n	80068a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800686a:	4b9c      	ldr	r3, [pc, #624]	; (8006adc <HAL_RCC_OscConfig+0x608>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b9b      	ldr	r3, [pc, #620]	; (8006adc <HAL_RCC_OscConfig+0x608>)
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	0049      	lsls	r1, r1, #1
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006878:	f7fe f806 	bl	8004888 <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7fe f801 	bl	8004888 <HAL_GetTick>
 8006886:	0002      	movs	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e11c      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006894:	4b91      	ldr	r3, [pc, #580]	; (8006adc <HAL_RCC_OscConfig+0x608>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4013      	ands	r3, r2
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <HAL_RCC_OscConfig+0x3e2>
 80068a8:	4b8b      	ldr	r3, [pc, #556]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ac:	4b8a      	ldr	r3, [pc, #552]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068ae:	2101      	movs	r1, #1
 80068b0:	430a      	orrs	r2, r1
 80068b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068b4:	e01c      	b.n	80068f0 <HAL_RCC_OscConfig+0x41c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCC_OscConfig+0x404>
 80068be:	4b86      	ldr	r3, [pc, #536]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068c2:	4b85      	ldr	r3, [pc, #532]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068c4:	2104      	movs	r1, #4
 80068c6:	430a      	orrs	r2, r1
 80068c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80068ca:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068ce:	4b82      	ldr	r3, [pc, #520]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068d0:	2101      	movs	r1, #1
 80068d2:	430a      	orrs	r2, r1
 80068d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80068d6:	e00b      	b.n	80068f0 <HAL_RCC_OscConfig+0x41c>
 80068d8:	4b7f      	ldr	r3, [pc, #508]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068dc:	4b7e      	ldr	r3, [pc, #504]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068de:	2101      	movs	r1, #1
 80068e0:	438a      	bics	r2, r1
 80068e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80068e4:	4b7c      	ldr	r3, [pc, #496]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068e8:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80068ea:	2104      	movs	r1, #4
 80068ec:	438a      	bics	r2, r1
 80068ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fd ffc6 	bl	8004888 <HAL_GetTick>
 80068fc:	0003      	movs	r3, r0
 80068fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006900:	e009      	b.n	8006916 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fd ffc1 	bl	8004888 <HAL_GetTick>
 8006906:	0002      	movs	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	4a74      	ldr	r2, [pc, #464]	; (8006ae0 <HAL_RCC_OscConfig+0x60c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e0db      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006916:	4b70      	ldr	r3, [pc, #448]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	2202      	movs	r2, #2
 800691c:	4013      	ands	r3, r2
 800691e:	d0f0      	beq.n	8006902 <HAL_RCC_OscConfig+0x42e>
 8006920:	e013      	b.n	800694a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006922:	f7fd ffb1 	bl	8004888 <HAL_GetTick>
 8006926:	0003      	movs	r3, r0
 8006928:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800692a:	e009      	b.n	8006940 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692c:	f7fd ffac 	bl	8004888 <HAL_GetTick>
 8006930:	0002      	movs	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	4a6a      	ldr	r2, [pc, #424]	; (8006ae0 <HAL_RCC_OscConfig+0x60c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e0c6      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006940:	4b65      	ldr	r3, [pc, #404]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	2202      	movs	r2, #2
 8006946:	4013      	ands	r3, r2
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800694a:	231f      	movs	r3, #31
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d105      	bne.n	8006960 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006954:	4b60      	ldr	r3, [pc, #384]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006958:	4b5f      	ldr	r3, [pc, #380]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 800695a:	4962      	ldr	r1, [pc, #392]	; (8006ae4 <HAL_RCC_OscConfig+0x610>)
 800695c:	400a      	ands	r2, r1
 800695e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d100      	bne.n	800696a <HAL_RCC_OscConfig+0x496>
 8006968:	e0b0      	b.n	8006acc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800696a:	4b5b      	ldr	r3, [pc, #364]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2238      	movs	r2, #56	; 0x38
 8006970:	4013      	ands	r3, r2
 8006972:	2b10      	cmp	r3, #16
 8006974:	d100      	bne.n	8006978 <HAL_RCC_OscConfig+0x4a4>
 8006976:	e078      	b.n	8006a6a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d153      	bne.n	8006a28 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006980:	4b55      	ldr	r3, [pc, #340]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b54      	ldr	r3, [pc, #336]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006986:	4958      	ldr	r1, [pc, #352]	; (8006ae8 <HAL_RCC_OscConfig+0x614>)
 8006988:	400a      	ands	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fd ff7c 	bl	8004888 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006996:	f7fd ff77 	bl	8004888 <HAL_GetTick>
 800699a:	0002      	movs	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e092      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a8:	4b4b      	ldr	r3, [pc, #300]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	049b      	lsls	r3, r3, #18
 80069b0:	4013      	ands	r3, r2
 80069b2:	d1f0      	bne.n	8006996 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069b4:	4b48      	ldr	r3, [pc, #288]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a4c      	ldr	r2, [pc, #304]	; (8006aec <HAL_RCC_OscConfig+0x618>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	0019      	movs	r1, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1a      	ldr	r2, [r3, #32]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	431a      	orrs	r2, r3
 80069dc:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069de:	430a      	orrs	r2, r1
 80069e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e2:	4b3d      	ldr	r3, [pc, #244]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	0449      	lsls	r1, r1, #17
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80069f0:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	4b38      	ldr	r3, [pc, #224]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 80069f6:	2180      	movs	r1, #128	; 0x80
 80069f8:	0549      	lsls	r1, r1, #21
 80069fa:	430a      	orrs	r2, r1
 80069fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fe:	f7fd ff43 	bl	8004888 <HAL_GetTick>
 8006a02:	0003      	movs	r3, r0
 8006a04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a08:	f7fd ff3e 	bl	8004888 <HAL_GetTick>
 8006a0c:	0002      	movs	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e059      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	2380      	movs	r3, #128	; 0x80
 8006a20:	049b      	lsls	r3, r3, #18
 8006a22:	4013      	ands	r3, r2
 8006a24:	d0f0      	beq.n	8006a08 <HAL_RCC_OscConfig+0x534>
 8006a26:	e051      	b.n	8006acc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a2e:	492e      	ldr	r1, [pc, #184]	; (8006ae8 <HAL_RCC_OscConfig+0x614>)
 8006a30:	400a      	ands	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a34:	f7fd ff28 	bl	8004888 <HAL_GetTick>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3e:	f7fd ff23 	bl	8004888 <HAL_GetTick>
 8006a42:	0002      	movs	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e03e      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a50:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	049b      	lsls	r3, r3, #18
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d1f0      	bne.n	8006a3e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a62:	4923      	ldr	r1, [pc, #140]	; (8006af0 <HAL_RCC_OscConfig+0x61c>)
 8006a64:	400a      	ands	r2, r1
 8006a66:	60da      	str	r2, [r3, #12]
 8006a68:	e030      	b.n	8006acc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e02b      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006a76:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <HAL_RCC_OscConfig+0x604>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	401a      	ands	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d11e      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2270      	movs	r2, #112	; 0x70
 8006a8e:	401a      	ands	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d117      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	23fe      	movs	r3, #254	; 0xfe
 8006a9c:	01db      	lsls	r3, r3, #7
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	23f8      	movs	r3, #248	; 0xf8
 8006aae:	039b      	lsls	r3, r3, #14
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	0f5b      	lsrs	r3, r3, #29
 8006abe:	075a      	lsls	r2, r3, #29
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b008      	add	sp, #32
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40007000 	.word	0x40007000
 8006ae0:	00001388 	.word	0x00001388
 8006ae4:	efffffff 	.word	0xefffffff
 8006ae8:	feffffff 	.word	0xfeffffff
 8006aec:	1fc1808c 	.word	0x1fc1808c
 8006af0:	effefffc 	.word	0xeffefffc

08006af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0e9      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b08:	4b76      	ldr	r3, [pc, #472]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	4013      	ands	r3, r2
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d91e      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b16:	4b73      	ldr	r3, [pc, #460]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	4393      	bics	r3, r2
 8006b1e:	0019      	movs	r1, r3
 8006b20:	4b70      	ldr	r3, [pc, #448]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b28:	f7fd feae 	bl	8004888 <HAL_GetTick>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b30:	e009      	b.n	8006b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b32:	f7fd fea9 	bl	8004888 <HAL_GetTick>
 8006b36:	0002      	movs	r2, r0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e0ca      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006b46:	4b67      	ldr	r3, [pc, #412]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2207      	movs	r2, #7
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d1ee      	bne.n	8006b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d015      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	d006      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006b68:	4b60      	ldr	r3, [pc, #384]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	4b5f      	ldr	r3, [pc, #380]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006b6e:	21e0      	movs	r1, #224	; 0xe0
 8006b70:	01c9      	lsls	r1, r1, #7
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4a5d      	ldr	r2, [pc, #372]	; (8006cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	0019      	movs	r1, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4013      	ands	r3, r2
 8006b92:	d057      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9c:	4b53      	ldr	r3, [pc, #332]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	029b      	lsls	r3, r3, #10
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d12b      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e097      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb4:	4b4d      	ldr	r3, [pc, #308]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	049b      	lsls	r3, r3, #18
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d11f      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e08b      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bcc:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d113      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e07f      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006be4:	4b41      	ldr	r3, [pc, #260]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be8:	2202      	movs	r2, #2
 8006bea:	4013      	ands	r3, r2
 8006bec:	d108      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e074      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf2:	4b3e      	ldr	r3, [pc, #248]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d101      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e06d      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c00:	4b3a      	ldr	r3, [pc, #232]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2207      	movs	r2, #7
 8006c06:	4393      	bics	r3, r2
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	4b37      	ldr	r3, [pc, #220]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006c10:	430a      	orrs	r2, r1
 8006c12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c14:	f7fd fe38 	bl	8004888 <HAL_GetTick>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1c:	e009      	b.n	8006c32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1e:	f7fd fe33 	bl	8004888 <HAL_GetTick>
 8006c22:	0002      	movs	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	4a2f      	ldr	r2, [pc, #188]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e054      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c32:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2238      	movs	r2, #56	; 0x38
 8006c38:	401a      	ands	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d1ec      	bne.n	8006c1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c44:	4b27      	ldr	r3, [pc, #156]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2207      	movs	r2, #7
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d21e      	bcs.n	8006c90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2207      	movs	r2, #7
 8006c58:	4393      	bics	r3, r2
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c64:	f7fd fe10 	bl	8004888 <HAL_GetTick>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c6c:	e009      	b.n	8006c82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c6e:	f7fd fe0b 	bl	8004888 <HAL_GetTick>
 8006c72:	0002      	movs	r2, r0
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e02c      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2207      	movs	r2, #7
 8006c88:	4013      	ands	r3, r2
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d1ee      	bne.n	8006c6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2204      	movs	r2, #4
 8006c96:	4013      	ands	r3, r2
 8006c98:	d009      	beq.n	8006cae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006c9a:	4b14      	ldr	r3, [pc, #80]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <HAL_RCC_ClockConfig+0x200>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	0019      	movs	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006caa:	430a      	orrs	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006cae:	f000 f829 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006cb2:	0001      	movs	r1, r0
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <HAL_RCC_ClockConfig+0x1f8>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	220f      	movs	r2, #15
 8006cbc:	401a      	ands	r2, r3
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <HAL_RCC_ClockConfig+0x204>)
 8006cc0:	0092      	lsls	r2, r2, #2
 8006cc2:	58d3      	ldr	r3, [r2, r3]
 8006cc4:	221f      	movs	r2, #31
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	000a      	movs	r2, r1
 8006cca:	40da      	lsrs	r2, r3
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <HAL_RCC_ClockConfig+0x208>)
 8006cce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_ClockConfig+0x20c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7fd fd7b 	bl	80047d0 <HAL_InitTick>
 8006cda:	0003      	movs	r3, r0
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b004      	add	sp, #16
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40022000 	.word	0x40022000
 8006ce8:	00001388 	.word	0x00001388
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	fffff0ff 	.word	0xfffff0ff
 8006cf4:	ffff8fff 	.word	0xffff8fff
 8006cf8:	08014f18 	.word	0x08014f18
 8006cfc:	20000000 	.word	0x20000000
 8006d00:	20000004 	.word	0x20000004

08006d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d0a:	4b3c      	ldr	r3, [pc, #240]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2238      	movs	r2, #56	; 0x38
 8006d10:	4013      	ands	r3, r2
 8006d12:	d10f      	bne.n	8006d34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006d14:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0adb      	lsrs	r3, r3, #11
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2201      	movs	r2, #1
 8006d20:	409a      	lsls	r2, r3
 8006d22:	0013      	movs	r3, r2
 8006d24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	4835      	ldr	r0, [pc, #212]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d2a:	f7f9 fa09 	bl	8000140 <__udivsi3>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e05d      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d34:	4b31      	ldr	r3, [pc, #196]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2238      	movs	r2, #56	; 0x38
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d40:	4b2f      	ldr	r3, [pc, #188]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	e054      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d46:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2238      	movs	r2, #56	; 0x38
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d138      	bne.n	8006dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006d52:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2203      	movs	r2, #3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d5c:	4b27      	ldr	r3, [pc, #156]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	2207      	movs	r2, #7
 8006d64:	4013      	ands	r3, r2
 8006d66:	3301      	adds	r3, #1
 8006d68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d10d      	bne.n	8006d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	4823      	ldr	r0, [pc, #140]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d74:	f7f9 f9e4 	bl	8000140 <__udivsi3>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	0019      	movs	r1, r3
 8006d7c:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	227f      	movs	r2, #127	; 0x7f
 8006d84:	4013      	ands	r3, r2
 8006d86:	434b      	muls	r3, r1
 8006d88:	617b      	str	r3, [r7, #20]
        break;
 8006d8a:	e00d      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	481c      	ldr	r0, [pc, #112]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d90:	f7f9 f9d6 	bl	8000140 <__udivsi3>
 8006d94:	0003      	movs	r3, r0
 8006d96:	0019      	movs	r1, r3
 8006d98:	4b18      	ldr	r3, [pc, #96]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	227f      	movs	r2, #127	; 0x7f
 8006da0:	4013      	ands	r3, r2
 8006da2:	434b      	muls	r3, r1
 8006da4:	617b      	str	r3, [r7, #20]
        break;
 8006da6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	0f5b      	lsrs	r3, r3, #29
 8006dae:	2207      	movs	r2, #7
 8006db0:	4013      	ands	r3, r2
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	6978      	ldr	r0, [r7, #20]
 8006dba:	f7f9 f9c1 	bl	8000140 <__udivsi3>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e015      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2238      	movs	r2, #56	; 0x38
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d103      	bne.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	e00b      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2238      	movs	r2, #56	; 0x38
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b18      	cmp	r3, #24
 8006de2:	d103      	bne.n	8006dec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006de4:	23fa      	movs	r3, #250	; 0xfa
 8006de6:	01db      	lsls	r3, r3, #7
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	e001      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006df0:	693b      	ldr	r3, [r7, #16]
}
 8006df2:	0018      	movs	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b006      	add	sp, #24
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	20000000 	.word	0x20000000

08006e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e18:	b5b0      	push	{r4, r5, r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006e1c:	f7ff fff2 	bl	8006e04 <HAL_RCC_GetHCLKFreq>
 8006e20:	0004      	movs	r4, r0
 8006e22:	f7ff fb4b 	bl	80064bc <LL_RCC_GetAPB1Prescaler>
 8006e26:	0003      	movs	r3, r0
 8006e28:	0b1a      	lsrs	r2, r3, #12
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e2c:	0092      	lsls	r2, r2, #2
 8006e2e:	58d3      	ldr	r3, [r2, r3]
 8006e30:	221f      	movs	r2, #31
 8006e32:	4013      	ands	r3, r2
 8006e34:	40dc      	lsrs	r4, r3
 8006e36:	0023      	movs	r3, r4
}
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	08014f58 	.word	0x08014f58

08006e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006e4c:	2313      	movs	r3, #19
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e54:	2312      	movs	r3, #18
 8006e56:	18fb      	adds	r3, r7, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	4013      	ands	r3, r2
 8006e66:	d100      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006e68:	e0a3      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e6a:	2011      	movs	r0, #17
 8006e6c:	183b      	adds	r3, r7, r0
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e72:	4b86      	ldr	r3, [pc, #536]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	055b      	lsls	r3, r3, #21
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d110      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e7e:	4b83      	ldr	r3, [pc, #524]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e82:	4b82      	ldr	r3, [pc, #520]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e84:	2180      	movs	r1, #128	; 0x80
 8006e86:	0549      	lsls	r1, r1, #21
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e8c:	4b7f      	ldr	r3, [pc, #508]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	055b      	lsls	r3, r3, #21
 8006e94:	4013      	ands	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ea0:	4b7b      	ldr	r3, [pc, #492]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4b7a      	ldr	r3, [pc, #488]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	0049      	lsls	r1, r1, #1
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eae:	f7fd fceb 	bl	8004888 <HAL_GetTick>
 8006eb2:	0003      	movs	r3, r0
 8006eb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eb6:	e00b      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb8:	f7fd fce6 	bl	8004888 <HAL_GetTick>
 8006ebc:	0002      	movs	r2, r0
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d904      	bls.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006ec6:	2313      	movs	r3, #19
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2203      	movs	r2, #3
 8006ecc:	701a      	strb	r2, [r3, #0]
        break;
 8006ece:	e005      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ed0:	4b6f      	ldr	r3, [pc, #444]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d0ed      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006edc:	2313      	movs	r3, #19
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d154      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ee6:	4b69      	ldr	r3, [pc, #420]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006eea:	23c0      	movs	r3, #192	; 0xc0
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4013      	ands	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d019      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d014      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f02:	4b62      	ldr	r3, [pc, #392]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f06:	4a63      	ldr	r2, [pc, #396]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f0c:	4b5f      	ldr	r3, [pc, #380]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f10:	4b5e      	ldr	r3, [pc, #376]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	0249      	lsls	r1, r1, #9
 8006f16:	430a      	orrs	r2, r1
 8006f18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f1a:	4b5c      	ldr	r3, [pc, #368]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f1e:	4b5b      	ldr	r3, [pc, #364]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f20:	495d      	ldr	r1, [pc, #372]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006f22:	400a      	ands	r2, r1
 8006f24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f26:	4b59      	ldr	r3, [pc, #356]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4013      	ands	r3, r2
 8006f32:	d016      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fd fca8 	bl	8004888 <HAL_GetTick>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f3c:	e00c      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3e:	f7fd fca3 	bl	8004888 <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	4a54      	ldr	r2, [pc, #336]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d904      	bls.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006f4e:	2313      	movs	r3, #19
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	2203      	movs	r2, #3
 8006f54:	701a      	strb	r2, [r3, #0]
            break;
 8006f56:	e004      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f58:	4b4c      	ldr	r3, [pc, #304]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	4013      	ands	r3, r2
 8006f60:	d0ed      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006f62:	2313      	movs	r3, #19
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f6c:	4b47      	ldr	r3, [pc, #284]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f70:	4a48      	ldr	r2, [pc, #288]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	0019      	movs	r1, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	4b44      	ldr	r3, [pc, #272]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f80:	e00c      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f82:	2312      	movs	r3, #18
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	2213      	movs	r2, #19
 8006f88:	18ba      	adds	r2, r7, r2
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e005      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	2312      	movs	r3, #18
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	2213      	movs	r2, #19
 8006f96:	18ba      	adds	r2, r7, r2
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f9c:	2311      	movs	r3, #17
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d105      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fa6:	4b39      	ldr	r3, [pc, #228]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006faa:	4b38      	ldr	r3, [pc, #224]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fac:	493c      	ldr	r1, [pc, #240]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006fae:	400a      	ands	r2, r1
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fbc:	4b33      	ldr	r3, [pc, #204]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	4393      	bics	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	4b30      	ldr	r3, [pc, #192]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fda:	4b2c      	ldr	r3, [pc, #176]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	220c      	movs	r2, #12
 8006fe0:	4393      	bics	r3, r2
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	4b28      	ldr	r3, [pc, #160]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fea:	430a      	orrs	r2, r1
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d009      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff8:	4b24      	ldr	r3, [pc, #144]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffc:	4a29      	ldr	r2, [pc, #164]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	0019      	movs	r1, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	4b21      	ldr	r3, [pc, #132]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007008:	430a      	orrs	r2, r1
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	01db      	lsls	r3, r3, #7
 8007014:	4013      	ands	r3, r2
 8007016:	d015      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007018:	4b1c      	ldr	r3, [pc, #112]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800701a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	0899      	lsrs	r1, r3, #2
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	695a      	ldr	r2, [r3, #20]
 8007024:	4b19      	ldr	r3, [pc, #100]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007026:	430a      	orrs	r2, r1
 8007028:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	05db      	lsls	r3, r3, #23
 8007032:	429a      	cmp	r2, r3
 8007034:	d106      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800703c:	2180      	movs	r1, #128	; 0x80
 800703e:	0249      	lsls	r1, r1, #9
 8007040:	430a      	orrs	r2, r1
 8007042:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	4013      	ands	r3, r2
 800704e:	d016      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007050:	4b0e      	ldr	r3, [pc, #56]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007056:	4013      	ands	r3, r2
 8007058:	0019      	movs	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007060:	430a      	orrs	r2, r1
 8007062:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	429a      	cmp	r2, r3
 800706e:	d106      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	0249      	lsls	r1, r1, #9
 800707a:	430a      	orrs	r2, r1
 800707c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800707e:	2312      	movs	r3, #18
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	781b      	ldrb	r3, [r3, #0]
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	b006      	add	sp, #24
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40021000 	.word	0x40021000
 8007090:	40007000 	.word	0x40007000
 8007094:	fffffcff 	.word	0xfffffcff
 8007098:	fffeffff 	.word	0xfffeffff
 800709c:	00001388 	.word	0x00001388
 80070a0:	efffffff 	.word	0xefffffff
 80070a4:	ffffcfff 	.word	0xffffcfff
 80070a8:	ffff3fff 	.word	0xffff3fff

080070ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e04a      	b.n	8007154 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	223d      	movs	r2, #61	; 0x3d
 80070c2:	5c9b      	ldrb	r3, [r3, r2]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	223c      	movs	r2, #60	; 0x3c
 80070ce:	2100      	movs	r1, #0
 80070d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7fd f903 	bl	80042e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	223d      	movs	r2, #61	; 0x3d
 80070de:	2102      	movs	r1, #2
 80070e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	0019      	movs	r1, r3
 80070ec:	0010      	movs	r0, r2
 80070ee:	f000 fd55 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2248      	movs	r2, #72	; 0x48
 80070f6:	2101      	movs	r1, #1
 80070f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	223e      	movs	r2, #62	; 0x3e
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	223f      	movs	r2, #63	; 0x3f
 8007106:	2101      	movs	r1, #1
 8007108:	5499      	strb	r1, [r3, r2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2240      	movs	r2, #64	; 0x40
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2241      	movs	r2, #65	; 0x41
 8007116:	2101      	movs	r1, #1
 8007118:	5499      	strb	r1, [r3, r2]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2242      	movs	r2, #66	; 0x42
 800711e:	2101      	movs	r1, #1
 8007120:	5499      	strb	r1, [r3, r2]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2243      	movs	r2, #67	; 0x43
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2244      	movs	r2, #68	; 0x44
 800712e:	2101      	movs	r1, #1
 8007130:	5499      	strb	r1, [r3, r2]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2245      	movs	r2, #69	; 0x45
 8007136:	2101      	movs	r1, #1
 8007138:	5499      	strb	r1, [r3, r2]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2246      	movs	r2, #70	; 0x46
 800713e:	2101      	movs	r1, #1
 8007140:	5499      	strb	r1, [r3, r2]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2247      	movs	r2, #71	; 0x47
 8007146:	2101      	movs	r1, #1
 8007148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	223d      	movs	r2, #61	; 0x3d
 800714e:	2101      	movs	r1, #1
 8007150:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	b002      	add	sp, #8
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e04a      	b.n	8007204 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	223d      	movs	r2, #61	; 0x3d
 8007172:	5c9b      	ldrb	r3, [r3, r2]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d107      	bne.n	800718a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	223c      	movs	r2, #60	; 0x3c
 800717e:	2100      	movs	r1, #0
 8007180:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	0018      	movs	r0, r3
 8007186:	f000 f841 	bl	800720c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	223d      	movs	r2, #61	; 0x3d
 800718e:	2102      	movs	r1, #2
 8007190:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	0019      	movs	r1, r3
 800719c:	0010      	movs	r0, r2
 800719e:	f000 fcfd 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2248      	movs	r2, #72	; 0x48
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	223e      	movs	r2, #62	; 0x3e
 80071ae:	2101      	movs	r1, #1
 80071b0:	5499      	strb	r1, [r3, r2]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	223f      	movs	r2, #63	; 0x3f
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	2101      	movs	r1, #1
 80071c0:	5499      	strb	r1, [r3, r2]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2241      	movs	r2, #65	; 0x41
 80071c6:	2101      	movs	r1, #1
 80071c8:	5499      	strb	r1, [r3, r2]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2242      	movs	r2, #66	; 0x42
 80071ce:	2101      	movs	r1, #1
 80071d0:	5499      	strb	r1, [r3, r2]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2243      	movs	r2, #67	; 0x43
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2244      	movs	r2, #68	; 0x44
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2245      	movs	r2, #69	; 0x45
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2246      	movs	r2, #70	; 0x46
 80071ee:	2101      	movs	r1, #1
 80071f0:	5499      	strb	r1, [r3, r2]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2247      	movs	r2, #71	; 0x47
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	223d      	movs	r2, #61	; 0x3d
 80071fe:	2101      	movs	r1, #1
 8007200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	0018      	movs	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007214:	46c0      	nop			; (mov r8, r8)
 8007216:	46bd      	mov	sp, r7
 8007218:	b002      	add	sp, #8
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <HAL_TIM_PWM_Start+0x22>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	223e      	movs	r2, #62	; 0x3e
 8007230:	5c9b      	ldrb	r3, [r3, r2]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	4193      	sbcs	r3, r2
 800723a:	b2db      	uxtb	r3, r3
 800723c:	e037      	b.n	80072ae <HAL_TIM_PWM_Start+0x92>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b04      	cmp	r3, #4
 8007242:	d108      	bne.n	8007256 <HAL_TIM_PWM_Start+0x3a>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	223f      	movs	r2, #63	; 0x3f
 8007248:	5c9b      	ldrb	r3, [r3, r2]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	4193      	sbcs	r3, r2
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e02b      	b.n	80072ae <HAL_TIM_PWM_Start+0x92>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d108      	bne.n	800726e <HAL_TIM_PWM_Start+0x52>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	5c9b      	ldrb	r3, [r3, r2]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	1e5a      	subs	r2, r3, #1
 8007268:	4193      	sbcs	r3, r2
 800726a:	b2db      	uxtb	r3, r3
 800726c:	e01f      	b.n	80072ae <HAL_TIM_PWM_Start+0x92>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d108      	bne.n	8007286 <HAL_TIM_PWM_Start+0x6a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2241      	movs	r2, #65	; 0x41
 8007278:	5c9b      	ldrb	r3, [r3, r2]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	1e5a      	subs	r2, r3, #1
 8007280:	4193      	sbcs	r3, r2
 8007282:	b2db      	uxtb	r3, r3
 8007284:	e013      	b.n	80072ae <HAL_TIM_PWM_Start+0x92>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b10      	cmp	r3, #16
 800728a:	d108      	bne.n	800729e <HAL_TIM_PWM_Start+0x82>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2242      	movs	r2, #66	; 0x42
 8007290:	5c9b      	ldrb	r3, [r3, r2]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	1e5a      	subs	r2, r3, #1
 8007298:	4193      	sbcs	r3, r2
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e007      	b.n	80072ae <HAL_TIM_PWM_Start+0x92>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2243      	movs	r2, #67	; 0x43
 80072a2:	5c9b      	ldrb	r3, [r3, r2]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	4193      	sbcs	r3, r2
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e085      	b.n	80073c2 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0xaa>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	223e      	movs	r2, #62	; 0x3e
 80072c0:	2102      	movs	r1, #2
 80072c2:	5499      	strb	r1, [r3, r2]
 80072c4:	e023      	b.n	800730e <HAL_TIM_PWM_Start+0xf2>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0xba>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	223f      	movs	r2, #63	; 0x3f
 80072d0:	2102      	movs	r1, #2
 80072d2:	5499      	strb	r1, [r3, r2]
 80072d4:	e01b      	b.n	800730e <HAL_TIM_PWM_Start+0xf2>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_PWM_Start+0xca>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	2102      	movs	r1, #2
 80072e2:	5499      	strb	r1, [r3, r2]
 80072e4:	e013      	b.n	800730e <HAL_TIM_PWM_Start+0xf2>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	d104      	bne.n	80072f6 <HAL_TIM_PWM_Start+0xda>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2241      	movs	r2, #65	; 0x41
 80072f0:	2102      	movs	r1, #2
 80072f2:	5499      	strb	r1, [r3, r2]
 80072f4:	e00b      	b.n	800730e <HAL_TIM_PWM_Start+0xf2>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d104      	bne.n	8007306 <HAL_TIM_PWM_Start+0xea>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2242      	movs	r2, #66	; 0x42
 8007300:	2102      	movs	r1, #2
 8007302:	5499      	strb	r1, [r3, r2]
 8007304:	e003      	b.n	800730e <HAL_TIM_PWM_Start+0xf2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2243      	movs	r2, #67	; 0x43
 800730a:	2102      	movs	r1, #2
 800730c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	2201      	movs	r2, #1
 8007316:	0018      	movs	r0, r3
 8007318:	f001 f89a 	bl	8008450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2a      	ldr	r2, [pc, #168]	; (80073cc <HAL_TIM_PWM_Start+0x1b0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00e      	beq.n	8007344 <HAL_TIM_PWM_Start+0x128>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a29      	ldr	r2, [pc, #164]	; (80073d0 <HAL_TIM_PWM_Start+0x1b4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d009      	beq.n	8007344 <HAL_TIM_PWM_Start+0x128>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a27      	ldr	r2, [pc, #156]	; (80073d4 <HAL_TIM_PWM_Start+0x1b8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_TIM_PWM_Start+0x128>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a26      	ldr	r2, [pc, #152]	; (80073d8 <HAL_TIM_PWM_Start+0x1bc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d101      	bne.n	8007348 <HAL_TIM_PWM_Start+0x12c>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <HAL_TIM_PWM_Start+0x12e>
 8007348:	2300      	movs	r3, #0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	0209      	lsls	r1, r1, #8
 800735c:	430a      	orrs	r2, r1
 800735e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a19      	ldr	r2, [pc, #100]	; (80073cc <HAL_TIM_PWM_Start+0x1b0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_TIM_PWM_Start+0x162>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_TIM_PWM_Start+0x1c0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_TIM_PWM_Start+0x162>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <HAL_TIM_PWM_Start+0x1b4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d116      	bne.n	80073ac <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <HAL_TIM_PWM_Start+0x1c4>)
 8007386:	4013      	ands	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b06      	cmp	r3, #6
 800738e:	d016      	beq.n	80073be <HAL_TIM_PWM_Start+0x1a2>
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	025b      	lsls	r3, r3, #9
 8007396:	429a      	cmp	r2, r3
 8007398:	d011      	beq.n	80073be <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2101      	movs	r1, #1
 80073a6:	430a      	orrs	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073aa:	e008      	b.n	80073be <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2101      	movs	r1, #1
 80073b8:	430a      	orrs	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	e000      	b.n	80073c0 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073be:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800
 80073dc:	40000400 	.word	0x40000400
 80073e0:	00010007 	.word	0x00010007

080073e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	2200      	movs	r2, #0
 80073f6:	0018      	movs	r0, r3
 80073f8:	f001 f82a 	bl	8008450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a37      	ldr	r2, [pc, #220]	; (80074e0 <HAL_TIM_PWM_Stop+0xfc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00e      	beq.n	8007424 <HAL_TIM_PWM_Stop+0x40>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a36      	ldr	r2, [pc, #216]	; (80074e4 <HAL_TIM_PWM_Stop+0x100>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d009      	beq.n	8007424 <HAL_TIM_PWM_Stop+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a34      	ldr	r2, [pc, #208]	; (80074e8 <HAL_TIM_PWM_Stop+0x104>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d004      	beq.n	8007424 <HAL_TIM_PWM_Stop+0x40>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a33      	ldr	r2, [pc, #204]	; (80074ec <HAL_TIM_PWM_Stop+0x108>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d101      	bne.n	8007428 <HAL_TIM_PWM_Stop+0x44>
 8007424:	2301      	movs	r3, #1
 8007426:	e000      	b.n	800742a <HAL_TIM_PWM_Stop+0x46>
 8007428:	2300      	movs	r3, #0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d013      	beq.n	8007456 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	4a2e      	ldr	r2, [pc, #184]	; (80074f0 <HAL_TIM_PWM_Stop+0x10c>)
 8007436:	4013      	ands	r3, r2
 8007438:	d10d      	bne.n	8007456 <HAL_TIM_PWM_Stop+0x72>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <HAL_TIM_PWM_Stop+0x110>)
 8007442:	4013      	ands	r3, r2
 8007444:	d107      	bne.n	8007456 <HAL_TIM_PWM_Stop+0x72>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4929      	ldr	r1, [pc, #164]	; (80074f8 <HAL_TIM_PWM_Stop+0x114>)
 8007452:	400a      	ands	r2, r1
 8007454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <HAL_TIM_PWM_Stop+0x10c>)
 800745e:	4013      	ands	r3, r2
 8007460:	d10d      	bne.n	800747e <HAL_TIM_PWM_Stop+0x9a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	4a22      	ldr	r2, [pc, #136]	; (80074f4 <HAL_TIM_PWM_Stop+0x110>)
 800746a:	4013      	ands	r3, r2
 800746c:	d107      	bne.n	800747e <HAL_TIM_PWM_Stop+0x9a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2101      	movs	r1, #1
 800747a:	438a      	bics	r2, r1
 800747c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_TIM_PWM_Stop+0xaa>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	223e      	movs	r2, #62	; 0x3e
 8007488:	2101      	movs	r1, #1
 800748a:	5499      	strb	r1, [r3, r2]
 800748c:	e023      	b.n	80074d6 <HAL_TIM_PWM_Stop+0xf2>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b04      	cmp	r3, #4
 8007492:	d104      	bne.n	800749e <HAL_TIM_PWM_Stop+0xba>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	223f      	movs	r2, #63	; 0x3f
 8007498:	2101      	movs	r1, #1
 800749a:	5499      	strb	r1, [r3, r2]
 800749c:	e01b      	b.n	80074d6 <HAL_TIM_PWM_Stop+0xf2>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d104      	bne.n	80074ae <HAL_TIM_PWM_Stop+0xca>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2240      	movs	r2, #64	; 0x40
 80074a8:	2101      	movs	r1, #1
 80074aa:	5499      	strb	r1, [r3, r2]
 80074ac:	e013      	b.n	80074d6 <HAL_TIM_PWM_Stop+0xf2>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b0c      	cmp	r3, #12
 80074b2:	d104      	bne.n	80074be <HAL_TIM_PWM_Stop+0xda>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2241      	movs	r2, #65	; 0x41
 80074b8:	2101      	movs	r1, #1
 80074ba:	5499      	strb	r1, [r3, r2]
 80074bc:	e00b      	b.n	80074d6 <HAL_TIM_PWM_Stop+0xf2>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d104      	bne.n	80074ce <HAL_TIM_PWM_Stop+0xea>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2242      	movs	r2, #66	; 0x42
 80074c8:	2101      	movs	r1, #1
 80074ca:	5499      	strb	r1, [r3, r2]
 80074cc:	e003      	b.n	80074d6 <HAL_TIM_PWM_Stop+0xf2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2243      	movs	r2, #67	; 0x43
 80074d2:	2101      	movs	r1, #1
 80074d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	0018      	movs	r0, r3
 80074da:	46bd      	mov	sp, r7
 80074dc:	b002      	add	sp, #8
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40014400 	.word	0x40014400
 80074ec:	40014800 	.word	0x40014800
 80074f0:	00001111 	.word	0x00001111
 80074f4:	00000444 	.word	0x00000444
 80074f8:	ffff7fff 	.word	0xffff7fff

080074fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e04a      	b.n	80075a4 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	223d      	movs	r2, #61	; 0x3d
 8007512:	5c9b      	ldrb	r3, [r3, r2]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	223c      	movs	r2, #60	; 0x3c
 800751e:	2100      	movs	r1, #0
 8007520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	0018      	movs	r0, r3
 8007526:	f000 f841 	bl	80075ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	223d      	movs	r2, #61	; 0x3d
 800752e:	2102      	movs	r1, #2
 8007530:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3304      	adds	r3, #4
 800753a:	0019      	movs	r1, r3
 800753c:	0010      	movs	r0, r2
 800753e:	f000 fb2d 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2248      	movs	r2, #72	; 0x48
 8007546:	2101      	movs	r1, #1
 8007548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	223e      	movs	r2, #62	; 0x3e
 800754e:	2101      	movs	r1, #1
 8007550:	5499      	strb	r1, [r3, r2]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	223f      	movs	r2, #63	; 0x3f
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	2101      	movs	r1, #1
 8007560:	5499      	strb	r1, [r3, r2]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2241      	movs	r2, #65	; 0x41
 8007566:	2101      	movs	r1, #1
 8007568:	5499      	strb	r1, [r3, r2]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2242      	movs	r2, #66	; 0x42
 800756e:	2101      	movs	r1, #1
 8007570:	5499      	strb	r1, [r3, r2]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2243      	movs	r2, #67	; 0x43
 8007576:	2101      	movs	r1, #1
 8007578:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2244      	movs	r2, #68	; 0x44
 800757e:	2101      	movs	r1, #1
 8007580:	5499      	strb	r1, [r3, r2]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2245      	movs	r2, #69	; 0x45
 8007586:	2101      	movs	r1, #1
 8007588:	5499      	strb	r1, [r3, r2]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2246      	movs	r2, #70	; 0x46
 800758e:	2101      	movs	r1, #1
 8007590:	5499      	strb	r1, [r3, r2]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2247      	movs	r2, #71	; 0x47
 8007596:	2101      	movs	r1, #1
 8007598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	223d      	movs	r2, #61	; 0x3d
 800759e:	2101      	movs	r1, #1
 80075a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	0018      	movs	r0, r3
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b002      	add	sp, #8
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b002      	add	sp, #8
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e090      	b.n	80076f2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	223d      	movs	r2, #61	; 0x3d
 80075d4:	5c9b      	ldrb	r3, [r3, r2]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d107      	bne.n	80075ec <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	223c      	movs	r2, #60	; 0x3c
 80075e0:	2100      	movs	r1, #0
 80075e2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	0018      	movs	r0, r3
 80075e8:	f7fc fdd4 	bl	8004194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	223d      	movs	r2, #61	; 0x3d
 80075f0:	2102      	movs	r1, #2
 80075f2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	493f      	ldr	r1, [pc, #252]	; (80076fc <HAL_TIM_Encoder_Init+0x140>)
 8007600:	400a      	ands	r2, r1
 8007602:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	0019      	movs	r1, r3
 800760e:	0010      	movs	r0, r2
 8007610:	f000 fac4 	bl	8007b9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4a31      	ldr	r2, [pc, #196]	; (8007700 <HAL_TIM_Encoder_Init+0x144>)
 800763a:	4013      	ands	r3, r2
 800763c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	4313      	orrs	r3, r2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	4a2c      	ldr	r2, [pc, #176]	; (8007704 <HAL_TIM_Encoder_Init+0x148>)
 8007654:	4013      	ands	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4a2b      	ldr	r2, [pc, #172]	; (8007708 <HAL_TIM_Encoder_Init+0x14c>)
 800765c:	4013      	ands	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	4313      	orrs	r3, r2
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	011a      	lsls	r2, r3, #4
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	031b      	lsls	r3, r3, #12
 800767e:	4313      	orrs	r3, r2
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2222      	movs	r2, #34	; 0x22
 800768a:	4393      	bics	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2288      	movs	r2, #136	; 0x88
 8007692:	4393      	bics	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	4313      	orrs	r3, r2
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2248      	movs	r2, #72	; 0x48
 80076c4:	2101      	movs	r1, #1
 80076c6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	223e      	movs	r2, #62	; 0x3e
 80076cc:	2101      	movs	r1, #1
 80076ce:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	223f      	movs	r2, #63	; 0x3f
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2244      	movs	r2, #68	; 0x44
 80076dc:	2101      	movs	r1, #1
 80076de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2245      	movs	r2, #69	; 0x45
 80076e4:	2101      	movs	r1, #1
 80076e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	223d      	movs	r2, #61	; 0x3d
 80076ec:	2101      	movs	r1, #1
 80076ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	0018      	movs	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	b006      	add	sp, #24
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	fffebff8 	.word	0xfffebff8
 8007700:	fffffcfc 	.word	0xfffffcfc
 8007704:	fffff3f3 	.word	0xfffff3f3
 8007708:	ffff0f0f 	.word	0xffff0f0f

0800770c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800770c:	b590      	push	{r4, r7, lr}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007716:	200f      	movs	r0, #15
 8007718:	183b      	adds	r3, r7, r0
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	213e      	movs	r1, #62	; 0x3e
 800771e:	5c52      	ldrb	r2, [r2, r1]
 8007720:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007722:	230e      	movs	r3, #14
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	213f      	movs	r1, #63	; 0x3f
 800772a:	5c52      	ldrb	r2, [r2, r1]
 800772c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800772e:	240d      	movs	r4, #13
 8007730:	193b      	adds	r3, r7, r4
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	2144      	movs	r1, #68	; 0x44
 8007736:	5c52      	ldrb	r2, [r2, r1]
 8007738:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800773a:	230c      	movs	r3, #12
 800773c:	18fb      	adds	r3, r7, r3
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	2145      	movs	r1, #69	; 0x45
 8007742:	5c52      	ldrb	r2, [r2, r1]
 8007744:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d112      	bne.n	8007772 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800774c:	183b      	adds	r3, r7, r0
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d103      	bne.n	800775c <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007754:	193b      	adds	r3, r7, r4
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e075      	b.n	800784c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	223e      	movs	r2, #62	; 0x3e
 8007764:	2102      	movs	r1, #2
 8007766:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2244      	movs	r2, #68	; 0x44
 800776c:	2102      	movs	r1, #2
 800776e:	5499      	strb	r1, [r3, r2]
 8007770:	e03d      	b.n	80077ee <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d114      	bne.n	80077a2 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007778:	230e      	movs	r3, #14
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d104      	bne.n	800778c <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007782:	230c      	movs	r3, #12
 8007784:	18fb      	adds	r3, r7, r3
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d001      	beq.n	8007790 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e05d      	b.n	800784c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	223f      	movs	r2, #63	; 0x3f
 8007794:	2102      	movs	r1, #2
 8007796:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2245      	movs	r2, #69	; 0x45
 800779c:	2102      	movs	r1, #2
 800779e:	5499      	strb	r1, [r3, r2]
 80077a0:	e025      	b.n	80077ee <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a2:	230f      	movs	r3, #15
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10e      	bne.n	80077ca <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ac:	230e      	movs	r3, #14
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d109      	bne.n	80077ca <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077b6:	230d      	movs	r3, #13
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d104      	bne.n	80077ca <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077c0:	230c      	movs	r3, #12
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d001      	beq.n	80077ce <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e03e      	b.n	800784c <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	223e      	movs	r2, #62	; 0x3e
 80077d2:	2102      	movs	r1, #2
 80077d4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	223f      	movs	r2, #63	; 0x3f
 80077da:	2102      	movs	r1, #2
 80077dc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2244      	movs	r2, #68	; 0x44
 80077e2:	2102      	movs	r1, #2
 80077e4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2245      	movs	r2, #69	; 0x45
 80077ea:	2102      	movs	r1, #2
 80077ec:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_TIM_Encoder_Start+0xf0>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d008      	beq.n	800780c <HAL_TIM_Encoder_Start+0x100>
 80077fa:	e00f      	b.n	800781c <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2201      	movs	r2, #1
 8007802:	2100      	movs	r1, #0
 8007804:	0018      	movs	r0, r3
 8007806:	f000 fe23 	bl	8008450 <TIM_CCxChannelCmd>
      break;
 800780a:	e016      	b.n	800783a <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2201      	movs	r2, #1
 8007812:	2104      	movs	r1, #4
 8007814:	0018      	movs	r0, r3
 8007816:	f000 fe1b 	bl	8008450 <TIM_CCxChannelCmd>
      break;
 800781a:	e00e      	b.n	800783a <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2201      	movs	r2, #1
 8007822:	2100      	movs	r1, #0
 8007824:	0018      	movs	r0, r3
 8007826:	f000 fe13 	bl	8008450 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	2104      	movs	r1, #4
 8007832:	0018      	movs	r0, r3
 8007834:	f000 fe0c 	bl	8008450 <TIM_CCxChannelCmd>
      break;
 8007838:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2101      	movs	r1, #1
 8007846:	430a      	orrs	r2, r1
 8007848:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	0018      	movs	r0, r3
 800784e:	46bd      	mov	sp, r7
 8007850:	b005      	add	sp, #20
 8007852:	bd90      	pop	{r4, r7, pc}

08007854 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007860:	2317      	movs	r3, #23
 8007862:	18fb      	adds	r3, r7, r3
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	223c      	movs	r2, #60	; 0x3c
 800786c:	5c9b      	ldrb	r3, [r3, r2]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_TIM_IC_ConfigChannel+0x22>
 8007872:	2302      	movs	r3, #2
 8007874:	e08c      	b.n	8007990 <HAL_TIM_IC_ConfigChannel+0x13c>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	223c      	movs	r2, #60	; 0x3c
 800787a:	2101      	movs	r1, #1
 800787c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f000 fcbc 	bl	8008210 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	210c      	movs	r1, #12
 80078a4:	438a      	bics	r2, r1
 80078a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6999      	ldr	r1, [r3, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	619a      	str	r2, [r3, #24]
 80078ba:	e062      	b.n	8007982 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d11c      	bne.n	80078fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f000 fcf5 	bl	80082c0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699a      	ldr	r2, [r3, #24]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	492d      	ldr	r1, [pc, #180]	; (8007998 <HAL_TIM_IC_ConfigChannel+0x144>)
 80078e2:	400a      	ands	r2, r1
 80078e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6999      	ldr	r1, [r3, #24]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	021a      	lsls	r2, r3, #8
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	619a      	str	r2, [r3, #24]
 80078fa:	e042      	b.n	8007982 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d11b      	bne.n	800793a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6819      	ldr	r1, [r3, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f000 fd17 	bl	8008344 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	210c      	movs	r1, #12
 8007922:	438a      	bics	r2, r1
 8007924:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69d9      	ldr	r1, [r3, #28]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	61da      	str	r2, [r3, #28]
 8007938:	e023      	b.n	8007982 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d11c      	bne.n	800797a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6819      	ldr	r1, [r3, #0]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f000 fd38 	bl	80083c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	490e      	ldr	r1, [pc, #56]	; (8007998 <HAL_TIM_IC_ConfigChannel+0x144>)
 8007960:	400a      	ands	r2, r1
 8007962:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69d9      	ldr	r1, [r3, #28]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	61da      	str	r2, [r3, #28]
 8007978:	e003      	b.n	8007982 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800797a:	2317      	movs	r3, #23
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	223c      	movs	r2, #60	; 0x3c
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]

  return status;
 800798a:	2317      	movs	r3, #23
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	781b      	ldrb	r3, [r3, #0]
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b006      	add	sp, #24
 8007996:	bd80      	pop	{r7, pc}
 8007998:	fffff3ff 	.word	0xfffff3ff

0800799c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a8:	2317      	movs	r3, #23
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	223c      	movs	r2, #60	; 0x3c
 80079b4:	5c9b      	ldrb	r3, [r3, r2]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d101      	bne.n	80079be <HAL_TIM_PWM_ConfigChannel+0x22>
 80079ba:	2302      	movs	r3, #2
 80079bc:	e0e5      	b.n	8007b8a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	223c      	movs	r2, #60	; 0x3c
 80079c2:	2101      	movs	r1, #1
 80079c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b14      	cmp	r3, #20
 80079ca:	d900      	bls.n	80079ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80079cc:	e0d1      	b.n	8007b72 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	009a      	lsls	r2, r3, #2
 80079d2:	4b70      	ldr	r3, [pc, #448]	; (8007b94 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80079d4:	18d3      	adds	r3, r2, r3
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0011      	movs	r1, r2
 80079e2:	0018      	movs	r0, r3
 80079e4:	f000 f950 	bl	8007c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2108      	movs	r1, #8
 80079f4:	430a      	orrs	r2, r1
 80079f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2104      	movs	r1, #4
 8007a04:	438a      	bics	r2, r1
 8007a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6999      	ldr	r1, [r3, #24]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	619a      	str	r2, [r3, #24]
      break;
 8007a1a:	e0af      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	0011      	movs	r1, r2
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 f9b9 	bl	8007d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2180      	movs	r1, #128	; 0x80
 8007a36:	0109      	lsls	r1, r1, #4
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4954      	ldr	r1, [pc, #336]	; (8007b98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007a48:	400a      	ands	r2, r1
 8007a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6999      	ldr	r1, [r3, #24]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	021a      	lsls	r2, r3, #8
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	619a      	str	r2, [r3, #24]
      break;
 8007a60:	e08c      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	0011      	movs	r1, r2
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f000 fa1a 	bl	8007ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69da      	ldr	r2, [r3, #28]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2108      	movs	r1, #8
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69da      	ldr	r2, [r3, #28]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2104      	movs	r1, #4
 8007a8c:	438a      	bics	r2, r1
 8007a8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69d9      	ldr	r1, [r3, #28]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	61da      	str	r2, [r3, #28]
      break;
 8007aa2:	e06b      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	0011      	movs	r1, r2
 8007aac:	0018      	movs	r0, r3
 8007aae:	f000 fa81 	bl	8007fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2180      	movs	r1, #128	; 0x80
 8007abe:	0109      	lsls	r1, r1, #4
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69da      	ldr	r2, [r3, #28]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4932      	ldr	r1, [pc, #200]	; (8007b98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69d9      	ldr	r1, [r3, #28]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	61da      	str	r2, [r3, #28]
      break;
 8007ae8:	e048      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0011      	movs	r1, r2
 8007af2:	0018      	movs	r0, r3
 8007af4:	f000 fac8 	bl	8008088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2108      	movs	r1, #8
 8007b04:	430a      	orrs	r2, r1
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2104      	movs	r1, #4
 8007b14:	438a      	bics	r2, r1
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b2a:	e027      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	0011      	movs	r1, r2
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 fb07 	bl	8008148 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2180      	movs	r1, #128	; 0x80
 8007b46:	0109      	lsls	r1, r1, #4
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4910      	ldr	r1, [pc, #64]	; (8007b98 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b58:	400a      	ands	r2, r1
 8007b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b70:	e004      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007b72:	2317      	movs	r3, #23
 8007b74:	18fb      	adds	r3, r7, r3
 8007b76:	2201      	movs	r2, #1
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	223c      	movs	r2, #60	; 0x3c
 8007b80:	2100      	movs	r1, #0
 8007b82:	5499      	strb	r1, [r3, r2]

  return status;
 8007b84:	2317      	movs	r3, #23
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	781b      	ldrb	r3, [r3, #0]
}
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b006      	add	sp, #24
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	08014f78 	.word	0x08014f78
 8007b98:	fffffbff 	.word	0xfffffbff

08007b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2f      	ldr	r2, [pc, #188]	; (8007c6c <TIM_Base_SetConfig+0xd0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0x20>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a2e      	ldr	r2, [pc, #184]	; (8007c70 <TIM_Base_SetConfig+0xd4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2270      	movs	r2, #112	; 0x70
 8007bc0:	4393      	bics	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <TIM_Base_SetConfig+0xd0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <TIM_Base_SetConfig+0x62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <TIM_Base_SetConfig+0xd4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00f      	beq.n	8007bfe <TIM_Base_SetConfig+0x62>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <TIM_Base_SetConfig+0xd8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00b      	beq.n	8007bfe <TIM_Base_SetConfig+0x62>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a23      	ldr	r2, [pc, #140]	; (8007c78 <TIM_Base_SetConfig+0xdc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d007      	beq.n	8007bfe <TIM_Base_SetConfig+0x62>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a22      	ldr	r2, [pc, #136]	; (8007c7c <TIM_Base_SetConfig+0xe0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d003      	beq.n	8007bfe <TIM_Base_SetConfig+0x62>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a21      	ldr	r2, [pc, #132]	; (8007c80 <TIM_Base_SetConfig+0xe4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d108      	bne.n	8007c10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <TIM_Base_SetConfig+0xe8>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2280      	movs	r2, #128	; 0x80
 8007c14:	4393      	bics	r3, r2
 8007c16:	001a      	movs	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <TIM_Base_SetConfig+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00b      	beq.n	8007c56 <TIM_Base_SetConfig+0xba>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a0d      	ldr	r2, [pc, #52]	; (8007c78 <TIM_Base_SetConfig+0xdc>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_Base_SetConfig+0xba>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a0c      	ldr	r2, [pc, #48]	; (8007c7c <TIM_Base_SetConfig+0xe0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_Base_SetConfig+0xba>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <TIM_Base_SetConfig+0xe4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d103      	bne.n	8007c5e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	615a      	str	r2, [r3, #20]
}
 8007c64:	46c0      	nop			; (mov r8, r8)
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40000400 	.word	0x40000400
 8007c74:	40002000 	.word	0x40002000
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800
 8007c84:	fffffcff 	.word	0xfffffcff

08007c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	2201      	movs	r2, #1
 8007c98:	4393      	bics	r3, r2
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a32      	ldr	r2, [pc, #200]	; (8007d80 <TIM_OC1_SetConfig+0xf8>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	4393      	bics	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	4393      	bics	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <TIM_OC1_SetConfig+0xfc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <TIM_OC1_SetConfig+0x76>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a27      	ldr	r2, [pc, #156]	; (8007d88 <TIM_OC1_SetConfig+0x100>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d007      	beq.n	8007cfe <TIM_OC1_SetConfig+0x76>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a26      	ldr	r2, [pc, #152]	; (8007d8c <TIM_OC1_SetConfig+0x104>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC1_SetConfig+0x76>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a25      	ldr	r2, [pc, #148]	; (8007d90 <TIM_OC1_SetConfig+0x108>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d10c      	bne.n	8007d18 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2208      	movs	r2, #8
 8007d02:	4393      	bics	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2204      	movs	r2, #4
 8007d14:	4393      	bics	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <TIM_OC1_SetConfig+0xfc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <TIM_OC1_SetConfig+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <TIM_OC1_SetConfig+0x100>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_OC1_SetConfig+0xb0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a18      	ldr	r2, [pc, #96]	; (8007d8c <TIM_OC1_SetConfig+0x104>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_OC1_SetConfig+0xb0>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a17      	ldr	r2, [pc, #92]	; (8007d90 <TIM_OC1_SetConfig+0x108>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d111      	bne.n	8007d5c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4a16      	ldr	r2, [pc, #88]	; (8007d94 <TIM_OC1_SetConfig+0x10c>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <TIM_OC1_SetConfig+0x110>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b006      	add	sp, #24
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	fffeff8f 	.word	0xfffeff8f
 8007d84:	40012c00 	.word	0x40012c00
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	40014800 	.word	0x40014800
 8007d94:	fffffeff 	.word	0xfffffeff
 8007d98:	fffffdff 	.word	0xfffffdff

08007d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	2210      	movs	r2, #16
 8007dac:	4393      	bics	r3, r2
 8007dae:	001a      	movs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a2e      	ldr	r2, [pc, #184]	; (8007e84 <TIM_OC2_SetConfig+0xe8>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4a2d      	ldr	r2, [pc, #180]	; (8007e88 <TIM_OC2_SetConfig+0xec>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2220      	movs	r2, #32
 8007de6:	4393      	bics	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a24      	ldr	r2, [pc, #144]	; (8007e8c <TIM_OC2_SetConfig+0xf0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d10d      	bne.n	8007e1a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	4393      	bics	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	4393      	bics	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1b      	ldr	r2, [pc, #108]	; (8007e8c <TIM_OC2_SetConfig+0xf0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <TIM_OC2_SetConfig+0x9e>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <TIM_OC2_SetConfig+0xf4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <TIM_OC2_SetConfig+0x9e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <TIM_OC2_SetConfig+0xf8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_OC2_SetConfig+0x9e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <TIM_OC2_SetConfig+0xfc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d113      	bne.n	8007e62 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <TIM_OC2_SetConfig+0x100>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <TIM_OC2_SetConfig+0x104>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	621a      	str	r2, [r3, #32]
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b006      	add	sp, #24
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	feff8fff 	.word	0xfeff8fff
 8007e88:	fffffcff 	.word	0xfffffcff
 8007e8c:	40012c00 	.word	0x40012c00
 8007e90:	40014000 	.word	0x40014000
 8007e94:	40014400 	.word	0x40014400
 8007e98:	40014800 	.word	0x40014800
 8007e9c:	fffffbff 	.word	0xfffffbff
 8007ea0:	fffff7ff 	.word	0xfffff7ff

08007ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	4a35      	ldr	r2, [pc, #212]	; (8007f88 <TIM_OC3_SetConfig+0xe4>)
 8007eb4:	401a      	ands	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <TIM_OC3_SetConfig+0xe8>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4393      	bics	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	4a29      	ldr	r2, [pc, #164]	; (8007f90 <TIM_OC3_SetConfig+0xec>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a25      	ldr	r2, [pc, #148]	; (8007f94 <TIM_OC3_SetConfig+0xf0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10d      	bne.n	8007f1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	4a24      	ldr	r2, [pc, #144]	; (8007f98 <TIM_OC3_SetConfig+0xf4>)
 8007f06:	4013      	ands	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <TIM_OC3_SetConfig+0xf8>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1c      	ldr	r2, [pc, #112]	; (8007f94 <TIM_OC3_SetConfig+0xf0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00b      	beq.n	8007f3e <TIM_OC3_SetConfig+0x9a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1d      	ldr	r2, [pc, #116]	; (8007fa0 <TIM_OC3_SetConfig+0xfc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <TIM_OC3_SetConfig+0x9a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <TIM_OC3_SetConfig+0x100>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_OC3_SetConfig+0x9a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1b      	ldr	r2, [pc, #108]	; (8007fa8 <TIM_OC3_SetConfig+0x104>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d113      	bne.n	8007f66 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4a1a      	ldr	r2, [pc, #104]	; (8007fac <TIM_OC3_SetConfig+0x108>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4a19      	ldr	r2, [pc, #100]	; (8007fb0 <TIM_OC3_SetConfig+0x10c>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	621a      	str	r2, [r3, #32]
}
 8007f80:	46c0      	nop			; (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b006      	add	sp, #24
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	fffffeff 	.word	0xfffffeff
 8007f8c:	fffeff8f 	.word	0xfffeff8f
 8007f90:	fffffdff 	.word	0xfffffdff
 8007f94:	40012c00 	.word	0x40012c00
 8007f98:	fffff7ff 	.word	0xfffff7ff
 8007f9c:	fffffbff 	.word	0xfffffbff
 8007fa0:	40014000 	.word	0x40014000
 8007fa4:	40014400 	.word	0x40014400
 8007fa8:	40014800 	.word	0x40014800
 8007fac:	ffffefff 	.word	0xffffefff
 8007fb0:	ffffdfff 	.word	0xffffdfff

08007fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	4a28      	ldr	r2, [pc, #160]	; (8008064 <TIM_OC4_SetConfig+0xb0>)
 8007fc4:	401a      	ands	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a22      	ldr	r2, [pc, #136]	; (8008068 <TIM_OC4_SetConfig+0xb4>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <TIM_OC4_SetConfig+0xb8>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <TIM_OC4_SetConfig+0xbc>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a19      	ldr	r2, [pc, #100]	; (8008074 <TIM_OC4_SetConfig+0xc0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00b      	beq.n	800802c <TIM_OC4_SetConfig+0x78>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <TIM_OC4_SetConfig+0xc4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d007      	beq.n	800802c <TIM_OC4_SetConfig+0x78>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a17      	ldr	r2, [pc, #92]	; (800807c <TIM_OC4_SetConfig+0xc8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC4_SetConfig+0x78>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a16      	ldr	r2, [pc, #88]	; (8008080 <TIM_OC4_SetConfig+0xcc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d109      	bne.n	8008040 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4a15      	ldr	r2, [pc, #84]	; (8008084 <TIM_OC4_SetConfig+0xd0>)
 8008030:	4013      	ands	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	019b      	lsls	r3, r3, #6
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	621a      	str	r2, [r3, #32]
}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	46bd      	mov	sp, r7
 800805e:	b006      	add	sp, #24
 8008060:	bd80      	pop	{r7, pc}
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	ffffefff 	.word	0xffffefff
 8008068:	feff8fff 	.word	0xfeff8fff
 800806c:	fffffcff 	.word	0xfffffcff
 8008070:	ffffdfff 	.word	0xffffdfff
 8008074:	40012c00 	.word	0x40012c00
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800
 8008084:	ffffbfff 	.word	0xffffbfff

08008088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	4a25      	ldr	r2, [pc, #148]	; (800812c <TIM_OC5_SetConfig+0xa4>)
 8008098:	401a      	ands	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <TIM_OC5_SetConfig+0xa8>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <TIM_OC5_SetConfig+0xac>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a17      	ldr	r2, [pc, #92]	; (8008138 <TIM_OC5_SetConfig+0xb0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00b      	beq.n	80080f6 <TIM_OC5_SetConfig+0x6e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a16      	ldr	r2, [pc, #88]	; (800813c <TIM_OC5_SetConfig+0xb4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d007      	beq.n	80080f6 <TIM_OC5_SetConfig+0x6e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a15      	ldr	r2, [pc, #84]	; (8008140 <TIM_OC5_SetConfig+0xb8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC5_SetConfig+0x6e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a14      	ldr	r2, [pc, #80]	; (8008144 <TIM_OC5_SetConfig+0xbc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d109      	bne.n	800810a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4a0c      	ldr	r2, [pc, #48]	; (800812c <TIM_OC5_SetConfig+0xa4>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b006      	add	sp, #24
 800812a:	bd80      	pop	{r7, pc}
 800812c:	fffeffff 	.word	0xfffeffff
 8008130:	fffeff8f 	.word	0xfffeff8f
 8008134:	fffdffff 	.word	0xfffdffff
 8008138:	40012c00 	.word	0x40012c00
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800

08008148 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <TIM_OC6_SetConfig+0xa8>)
 8008158:	401a      	ands	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <TIM_OC6_SetConfig+0xac>)
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	4a1c      	ldr	r2, [pc, #112]	; (80081f8 <TIM_OC6_SetConfig+0xb0>)
 8008188:	4013      	ands	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	051b      	lsls	r3, r3, #20
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a18      	ldr	r2, [pc, #96]	; (80081fc <TIM_OC6_SetConfig+0xb4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC6_SetConfig+0x70>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a17      	ldr	r2, [pc, #92]	; (8008200 <TIM_OC6_SetConfig+0xb8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC6_SetConfig+0x70>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a16      	ldr	r2, [pc, #88]	; (8008204 <TIM_OC6_SetConfig+0xbc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC6_SetConfig+0x70>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <TIM_OC6_SetConfig+0xc0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d109      	bne.n	80081cc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	4a14      	ldr	r2, [pc, #80]	; (800820c <TIM_OC6_SetConfig+0xc4>)
 80081bc:	4013      	ands	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	029b      	lsls	r3, r3, #10
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	621a      	str	r2, [r3, #32]
}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b006      	add	sp, #24
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	ffefffff 	.word	0xffefffff
 80081f4:	feff8fff 	.word	0xfeff8fff
 80081f8:	ffdfffff 	.word	0xffdfffff
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800
 800820c:	fffbffff 	.word	0xfffbffff

08008210 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	2201      	movs	r2, #1
 8008224:	4393      	bics	r3, r2
 8008226:	001a      	movs	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <TIM_TI1_SetConfig+0xa4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_TI1_SetConfig+0x40>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a1d      	ldr	r2, [pc, #116]	; (80082b8 <TIM_TI1_SetConfig+0xa8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_TI1_SetConfig+0x40>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <TIM_TI1_SetConfig+0xac>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d101      	bne.n	8008254 <TIM_TI1_SetConfig+0x44>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <TIM_TI1_SetConfig+0x46>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2203      	movs	r2, #3
 800825e:	4393      	bics	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e003      	b.n	8008274 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2201      	movs	r2, #1
 8008270:	4313      	orrs	r3, r2
 8008272:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	22f0      	movs	r2, #240	; 0xf0
 8008278:	4393      	bics	r3, r2
 800827a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	4013      	ands	r3, r2
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	220a      	movs	r2, #10
 800828e:	4393      	bics	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	220a      	movs	r2, #10
 8008296:	4013      	ands	r3, r2
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	621a      	str	r2, [r3, #32]
}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b006      	add	sp, #24
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	40012c00 	.word	0x40012c00
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40014000 	.word	0x40014000

080082c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	2210      	movs	r2, #16
 80082d4:	4393      	bics	r3, r2
 80082d6:	001a      	movs	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	4a14      	ldr	r2, [pc, #80]	; (800833c <TIM_TI2_SetConfig+0x7c>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	4a10      	ldr	r2, [pc, #64]	; (8008340 <TIM_TI2_SetConfig+0x80>)
 80082fe:	4013      	ands	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	031b      	lsls	r3, r3, #12
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	22a0      	movs	r2, #160	; 0xa0
 8008314:	4393      	bics	r3, r2
 8008316:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	22a0      	movs	r2, #160	; 0xa0
 800831e:	4013      	ands	r3, r2
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	621a      	str	r2, [r3, #32]
}
 8008332:	46c0      	nop			; (mov r8, r8)
 8008334:	46bd      	mov	sp, r7
 8008336:	b006      	add	sp, #24
 8008338:	bd80      	pop	{r7, pc}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	fffffcff 	.word	0xfffffcff
 8008340:	ffff0fff 	.word	0xffff0fff

08008344 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	4a19      	ldr	r2, [pc, #100]	; (80083bc <TIM_TI3_SetConfig+0x78>)
 8008358:	401a      	ands	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	2203      	movs	r2, #3
 800836e:	4393      	bics	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	22f0      	movs	r2, #240	; 0xf0
 800837e:	4393      	bics	r3, r2
 8008380:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	4013      	ands	r3, r2
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <TIM_TI3_SetConfig+0x7c>)
 8008394:	4013      	ands	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	021a      	lsls	r2, r3, #8
 800839c:	23a0      	movs	r3, #160	; 0xa0
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4013      	ands	r3, r2
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	621a      	str	r2, [r3, #32]
}
 80083b4:	46c0      	nop			; (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b006      	add	sp, #24
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	fffffeff 	.word	0xfffffeff
 80083c0:	fffff5ff 	.word	0xfffff5ff

080083c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <TIM_TI4_SetConfig+0x7c>)
 80083d8:	401a      	ands	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	4a15      	ldr	r2, [pc, #84]	; (8008444 <TIM_TI4_SetConfig+0x80>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	021b      	lsls	r3, r3, #8
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	4a12      	ldr	r2, [pc, #72]	; (8008448 <TIM_TI4_SetConfig+0x84>)
 8008400:	4013      	ands	r3, r2
 8008402:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	031b      	lsls	r3, r3, #12
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4a0d      	ldr	r2, [pc, #52]	; (800844c <TIM_TI4_SetConfig+0x88>)
 8008416:	4013      	ands	r3, r2
 8008418:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	031a      	lsls	r2, r3, #12
 800841e:	23a0      	movs	r3, #160	; 0xa0
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	4013      	ands	r3, r2
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	621a      	str	r2, [r3, #32]
}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	46bd      	mov	sp, r7
 800843a:	b006      	add	sp, #24
 800843c:	bd80      	pop	{r7, pc}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	ffffefff 	.word	0xffffefff
 8008444:	fffffcff 	.word	0xfffffcff
 8008448:	ffff0fff 	.word	0xffff0fff
 800844c:	ffff5fff 	.word	0xffff5fff

08008450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	221f      	movs	r2, #31
 8008460:	4013      	ands	r3, r2
 8008462:	2201      	movs	r2, #1
 8008464:	409a      	lsls	r2, r3
 8008466:	0013      	movs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	43d2      	mvns	r2, r2
 8008472:	401a      	ands	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1a      	ldr	r2, [r3, #32]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	211f      	movs	r1, #31
 8008480:	400b      	ands	r3, r1
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4099      	lsls	r1, r3
 8008486:	000b      	movs	r3, r1
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	621a      	str	r2, [r3, #32]
}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	46bd      	mov	sp, r7
 8008492:	b006      	add	sp, #24
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <HAL_TIMEx_PWMN_Start+0x22>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2244      	movs	r2, #68	; 0x44
 80084ac:	5c9b      	ldrb	r3, [r3, r2]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	4193      	sbcs	r3, r2
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	e01f      	b.n	80084fa <HAL_TIMEx_PWMN_Start+0x62>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d108      	bne.n	80084d2 <HAL_TIMEx_PWMN_Start+0x3a>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2245      	movs	r2, #69	; 0x45
 80084c4:	5c9b      	ldrb	r3, [r3, r2]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	1e5a      	subs	r2, r3, #1
 80084cc:	4193      	sbcs	r3, r2
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	e013      	b.n	80084fa <HAL_TIMEx_PWMN_Start+0x62>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d108      	bne.n	80084ea <HAL_TIMEx_PWMN_Start+0x52>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2246      	movs	r2, #70	; 0x46
 80084dc:	5c9b      	ldrb	r3, [r3, r2]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	3b01      	subs	r3, #1
 80084e2:	1e5a      	subs	r2, r3, #1
 80084e4:	4193      	sbcs	r3, r2
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	e007      	b.n	80084fa <HAL_TIMEx_PWMN_Start+0x62>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2247      	movs	r2, #71	; 0x47
 80084ee:	5c9b      	ldrb	r3, [r3, r2]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	1e5a      	subs	r2, r3, #1
 80084f6:	4193      	sbcs	r3, r2
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e05c      	b.n	80085bc <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <HAL_TIMEx_PWMN_Start+0x7a>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2244      	movs	r2, #68	; 0x44
 800850c:	2102      	movs	r1, #2
 800850e:	5499      	strb	r1, [r3, r2]
 8008510:	e013      	b.n	800853a <HAL_TIMEx_PWMN_Start+0xa2>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b04      	cmp	r3, #4
 8008516:	d104      	bne.n	8008522 <HAL_TIMEx_PWMN_Start+0x8a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2245      	movs	r2, #69	; 0x45
 800851c:	2102      	movs	r1, #2
 800851e:	5499      	strb	r1, [r3, r2]
 8008520:	e00b      	b.n	800853a <HAL_TIMEx_PWMN_Start+0xa2>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b08      	cmp	r3, #8
 8008526:	d104      	bne.n	8008532 <HAL_TIMEx_PWMN_Start+0x9a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2246      	movs	r2, #70	; 0x46
 800852c:	2102      	movs	r1, #2
 800852e:	5499      	strb	r1, [r3, r2]
 8008530:	e003      	b.n	800853a <HAL_TIMEx_PWMN_Start+0xa2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2247      	movs	r2, #71	; 0x47
 8008536:	2102      	movs	r1, #2
 8008538:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	2204      	movs	r2, #4
 8008542:	0018      	movs	r0, r3
 8008544:	f000 f9b0 	bl	80088a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	0209      	lsls	r1, r1, #8
 8008556:	430a      	orrs	r2, r1
 8008558:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a19      	ldr	r2, [pc, #100]	; (80085c4 <HAL_TIMEx_PWMN_Start+0x12c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_TIMEx_PWMN_Start+0xe0>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a17      	ldr	r2, [pc, #92]	; (80085c8 <HAL_TIMEx_PWMN_Start+0x130>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d004      	beq.n	8008578 <HAL_TIMEx_PWMN_Start+0xe0>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a16      	ldr	r2, [pc, #88]	; (80085cc <HAL_TIMEx_PWMN_Start+0x134>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d116      	bne.n	80085a6 <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <HAL_TIMEx_PWMN_Start+0x138>)
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b06      	cmp	r3, #6
 8008588:	d016      	beq.n	80085b8 <HAL_TIMEx_PWMN_Start+0x120>
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	2380      	movs	r3, #128	; 0x80
 800858e:	025b      	lsls	r3, r3, #9
 8008590:	429a      	cmp	r2, r3
 8008592:	d011      	beq.n	80085b8 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2101      	movs	r1, #1
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a4:	e008      	b.n	80085b8 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2101      	movs	r1, #1
 80085b2:	430a      	orrs	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e000      	b.n	80085ba <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	0018      	movs	r0, r3
 80085be:	46bd      	mov	sp, r7
 80085c0:	b004      	add	sp, #16
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	40012c00 	.word	0x40012c00
 80085c8:	40000400 	.word	0x40000400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	00010007 	.word	0x00010007

080085d4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	2200      	movs	r2, #0
 80085e6:	0018      	movs	r0, r3
 80085e8:	f000 f95e 	bl	80088a8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	4a23      	ldr	r2, [pc, #140]	; (8008680 <HAL_TIMEx_PWMN_Stop+0xac>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	d10d      	bne.n	8008614 <HAL_TIMEx_PWMN_Stop+0x40>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	4a21      	ldr	r2, [pc, #132]	; (8008684 <HAL_TIMEx_PWMN_Stop+0xb0>)
 8008600:	4013      	ands	r3, r2
 8008602:	d107      	bne.n	8008614 <HAL_TIMEx_PWMN_Stop+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	491e      	ldr	r1, [pc, #120]	; (8008688 <HAL_TIMEx_PWMN_Stop+0xb4>)
 8008610:	400a      	ands	r2, r1
 8008612:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	4a19      	ldr	r2, [pc, #100]	; (8008680 <HAL_TIMEx_PWMN_Stop+0xac>)
 800861c:	4013      	ands	r3, r2
 800861e:	d10d      	bne.n	800863c <HAL_TIMEx_PWMN_Stop+0x68>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	4a17      	ldr	r2, [pc, #92]	; (8008684 <HAL_TIMEx_PWMN_Stop+0xb0>)
 8008628:	4013      	ands	r3, r2
 800862a:	d107      	bne.n	800863c <HAL_TIMEx_PWMN_Stop+0x68>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2101      	movs	r1, #1
 8008638:	438a      	bics	r2, r1
 800863a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_TIMEx_PWMN_Stop+0x78>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2244      	movs	r2, #68	; 0x44
 8008646:	2101      	movs	r1, #1
 8008648:	5499      	strb	r1, [r3, r2]
 800864a:	e013      	b.n	8008674 <HAL_TIMEx_PWMN_Stop+0xa0>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d104      	bne.n	800865c <HAL_TIMEx_PWMN_Stop+0x88>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2245      	movs	r2, #69	; 0x45
 8008656:	2101      	movs	r1, #1
 8008658:	5499      	strb	r1, [r3, r2]
 800865a:	e00b      	b.n	8008674 <HAL_TIMEx_PWMN_Stop+0xa0>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b08      	cmp	r3, #8
 8008660:	d104      	bne.n	800866c <HAL_TIMEx_PWMN_Stop+0x98>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2246      	movs	r2, #70	; 0x46
 8008666:	2101      	movs	r1, #1
 8008668:	5499      	strb	r1, [r3, r2]
 800866a:	e003      	b.n	8008674 <HAL_TIMEx_PWMN_Stop+0xa0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2247      	movs	r2, #71	; 0x47
 8008670:	2101      	movs	r1, #1
 8008672:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	0018      	movs	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	b002      	add	sp, #8
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	00001111 	.word	0x00001111
 8008684:	00000444 	.word	0x00000444
 8008688:	ffff7fff 	.word	0xffff7fff

0800868c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	223c      	movs	r2, #60	; 0x3c
 800869a:	5c9b      	ldrb	r3, [r3, r2]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d101      	bne.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086a0:	2302      	movs	r3, #2
 80086a2:	e04f      	b.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	223c      	movs	r2, #60	; 0x3c
 80086a8:	2101      	movs	r1, #1
 80086aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	223d      	movs	r2, #61	; 0x3d
 80086b0:	2102      	movs	r1, #2
 80086b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a20      	ldr	r2, [pc, #128]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d108      	bne.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d2:	4013      	ands	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4313      	orrs	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2270      	movs	r2, #112	; 0x70
 80086e4:	4393      	bics	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a13      	ldr	r2, [pc, #76]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d009      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a12      	ldr	r2, [pc, #72]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d004      	beq.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a11      	ldr	r2, [pc, #68]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d10c      	bne.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2280      	movs	r2, #128	; 0x80
 800871c:	4393      	bics	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4313      	orrs	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	223d      	movs	r2, #61	; 0x3d
 8008736:	2101      	movs	r1, #1
 8008738:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	223c      	movs	r2, #60	; 0x3c
 800873e:	2100      	movs	r1, #0
 8008740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	0018      	movs	r0, r3
 8008746:	46bd      	mov	sp, r7
 8008748:	b004      	add	sp, #16
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40012c00 	.word	0x40012c00
 8008750:	ff0fffff 	.word	0xff0fffff
 8008754:	40000400 	.word	0x40000400
 8008758:	40014000 	.word	0x40014000

0800875c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	223c      	movs	r2, #60	; 0x3c
 800876e:	5c9b      	ldrb	r3, [r3, r2]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008774:	2302      	movs	r3, #2
 8008776:	e079      	b.n	800886c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	223c      	movs	r2, #60	; 0x3c
 800877c:	2101      	movs	r1, #1
 800877e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	22ff      	movs	r2, #255	; 0xff
 8008784:	4393      	bics	r3, r2
 8008786:	001a      	movs	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4313      	orrs	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a38      	ldr	r2, [pc, #224]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008794:	401a      	ands	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4a35      	ldr	r2, [pc, #212]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80087a2:	401a      	ands	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a33      	ldr	r2, [pc, #204]	; (800887c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80087b0:	401a      	ands	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a30      	ldr	r2, [pc, #192]	; (8008880 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087be:	401a      	ands	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a2e      	ldr	r2, [pc, #184]	; (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80087cc:	401a      	ands	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a2b      	ldr	r2, [pc, #172]	; (8008888 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80087da:	401a      	ands	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a29      	ldr	r2, [pc, #164]	; (800888c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80087e8:	401a      	ands	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	041b      	lsls	r3, r3, #16
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a25      	ldr	r2, [pc, #148]	; (8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d106      	bne.n	800880c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4a24      	ldr	r2, [pc, #144]	; (8008894 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008802:	401a      	ands	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d121      	bne.n	800885a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4a1f      	ldr	r2, [pc, #124]	; (8008898 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800881a:	401a      	ands	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	051b      	lsls	r3, r3, #20
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	4a1c      	ldr	r2, [pc, #112]	; (800889c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800882a:	401a      	ands	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008838:	401a      	ands	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a12      	ldr	r2, [pc, #72]	; (8008890 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d106      	bne.n	800885a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008850:	401a      	ands	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	223c      	movs	r2, #60	; 0x3c
 8008866:	2100      	movs	r1, #0
 8008868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b004      	add	sp, #16
 8008872:	bd80      	pop	{r7, pc}
 8008874:	fffffcff 	.word	0xfffffcff
 8008878:	fffffbff 	.word	0xfffffbff
 800887c:	fffff7ff 	.word	0xfffff7ff
 8008880:	ffffefff 	.word	0xffffefff
 8008884:	ffffdfff 	.word	0xffffdfff
 8008888:	ffffbfff 	.word	0xffffbfff
 800888c:	fff0ffff 	.word	0xfff0ffff
 8008890:	40012c00 	.word	0x40012c00
 8008894:	efffffff 	.word	0xefffffff
 8008898:	ff0fffff 	.word	0xff0fffff
 800889c:	feffffff 	.word	0xfeffffff
 80088a0:	fdffffff 	.word	0xfdffffff
 80088a4:	dfffffff 	.word	0xdfffffff

080088a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	221f      	movs	r2, #31
 80088b8:	4013      	ands	r3, r2
 80088ba:	2204      	movs	r2, #4
 80088bc:	409a      	lsls	r2, r3
 80088be:	0013      	movs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	43d2      	mvns	r2, r2
 80088ca:	401a      	ands	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1a      	ldr	r2, [r3, #32]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	211f      	movs	r1, #31
 80088d8:	400b      	ands	r3, r1
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	4099      	lsls	r1, r3
 80088de:	000b      	movs	r3, r1
 80088e0:	431a      	orrs	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	46bd      	mov	sp, r7
 80088ea:	b006      	add	sp, #24
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e046      	b.n	8008990 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2288      	movs	r2, #136	; 0x88
 8008906:	589b      	ldr	r3, [r3, r2]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d107      	bne.n	800891c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2284      	movs	r2, #132	; 0x84
 8008910:	2100      	movs	r1, #0
 8008912:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	0018      	movs	r0, r3
 8008918:	f7fb fe5e 	bl	80045d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2288      	movs	r2, #136	; 0x88
 8008920:	2124      	movs	r1, #36	; 0x24
 8008922:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2101      	movs	r1, #1
 8008930:	438a      	bics	r2, r1
 8008932:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	0018      	movs	r0, r3
 8008938:	f000 fc6c 	bl	8009214 <UART_SetConfig>
 800893c:	0003      	movs	r3, r0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e024      	b.n	8008990 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	0018      	movs	r0, r3
 8008952:	f000 fe03 	bl	800955c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	490d      	ldr	r1, [pc, #52]	; (8008998 <HAL_UART_Init+0xa8>)
 8008962:	400a      	ands	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	212a      	movs	r1, #42	; 0x2a
 8008972:	438a      	bics	r2, r1
 8008974:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2101      	movs	r1, #1
 8008982:	430a      	orrs	r2, r1
 8008984:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	0018      	movs	r0, r3
 800898a:	f000 fe9b 	bl	80096c4 <UART_CheckIdleState>
 800898e:	0003      	movs	r3, r0
}
 8008990:	0018      	movs	r0, r3
 8008992:	46bd      	mov	sp, r7
 8008994:	b002      	add	sp, #8
 8008996:	bd80      	pop	{r7, pc}
 8008998:	ffffb7ff 	.word	0xffffb7ff

0800899c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e04e      	b.n	8008a4c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2288      	movs	r2, #136	; 0x88
 80089b2:	589b      	ldr	r3, [r3, r2]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d107      	bne.n	80089c8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2284      	movs	r2, #132	; 0x84
 80089bc:	2100      	movs	r1, #0
 80089be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	0018      	movs	r0, r3
 80089c4:	f7fb fe08 	bl	80045d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2288      	movs	r2, #136	; 0x88
 80089cc:	2124      	movs	r1, #36	; 0x24
 80089ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2101      	movs	r1, #1
 80089dc:	438a      	bics	r2, r1
 80089de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 fc16 	bl	8009214 <UART_SetConfig>
 80089e8:	0003      	movs	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e02c      	b.n	8008a4c <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	0018      	movs	r0, r3
 80089fe:	f000 fdad 	bl	800955c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4911      	ldr	r1, [pc, #68]	; (8008a54 <HAL_HalfDuplex_Init+0xb8>)
 8008a0e:	400a      	ands	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2122      	movs	r1, #34	; 0x22
 8008a1e:	438a      	bics	r2, r1
 8008a20:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2108      	movs	r1, #8
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	0018      	movs	r0, r3
 8008a46:	f000 fe3d 	bl	80096c4 <UART_CheckIdleState>
 8008a4a:	0003      	movs	r3, r0
}
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b002      	add	sp, #8
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	ffffb7ff 	.word	0xffffb7ff

08008a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	1dbb      	adds	r3, r7, #6
 8008a66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2288      	movs	r2, #136	; 0x88
 8008a6c:	589b      	ldr	r3, [r3, r2]
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d000      	beq.n	8008a74 <HAL_UART_Transmit+0x1c>
 8008a72:	e088      	b.n	8008b86 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_UART_Transmit+0x2a>
 8008a7a:	1dbb      	adds	r3, r7, #6
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e080      	b.n	8008b88 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	2380      	movs	r3, #128	; 0x80
 8008a8c:	015b      	lsls	r3, r3, #5
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d109      	bne.n	8008aa6 <HAL_UART_Transmit+0x4e>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	d001      	beq.n	8008aa6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e070      	b.n	8008b88 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2290      	movs	r2, #144	; 0x90
 8008aaa:	2100      	movs	r1, #0
 8008aac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2288      	movs	r2, #136	; 0x88
 8008ab2:	2121      	movs	r1, #33	; 0x21
 8008ab4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ab6:	f7fb fee7 	bl	8004888 <HAL_GetTick>
 8008aba:	0003      	movs	r3, r0
 8008abc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1dba      	adds	r2, r7, #6
 8008ac2:	2154      	movs	r1, #84	; 0x54
 8008ac4:	8812      	ldrh	r2, [r2, #0]
 8008ac6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	1dba      	adds	r2, r7, #6
 8008acc:	2156      	movs	r1, #86	; 0x56
 8008ace:	8812      	ldrh	r2, [r2, #0]
 8008ad0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	015b      	lsls	r3, r3, #5
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d108      	bne.n	8008af0 <HAL_UART_Transmit+0x98>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	e003      	b.n	8008af8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008af8:	e02c      	b.n	8008b54 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	0013      	movs	r3, r2
 8008b04:	2200      	movs	r2, #0
 8008b06:	2180      	movs	r1, #128	; 0x80
 8008b08:	f000 fe2a 	bl	8009760 <UART_WaitOnFlagUntilTimeout>
 8008b0c:	1e03      	subs	r3, r0, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e039      	b.n	8008b88 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	001a      	movs	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	05d2      	lsls	r2, r2, #23
 8008b26:	0dd2      	lsrs	r2, r2, #23
 8008b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e007      	b.n	8008b42 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2256      	movs	r2, #86	; 0x56
 8008b46:	5a9b      	ldrh	r3, [r3, r2]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b299      	uxth	r1, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2256      	movs	r2, #86	; 0x56
 8008b52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2256      	movs	r2, #86	; 0x56
 8008b58:	5a9b      	ldrh	r3, [r3, r2]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1cc      	bne.n	8008afa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	0013      	movs	r3, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2140      	movs	r1, #64	; 0x40
 8008b6e:	f000 fdf7 	bl	8009760 <UART_WaitOnFlagUntilTimeout>
 8008b72:	1e03      	subs	r3, r0, #0
 8008b74:	d001      	beq.n	8008b7a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e006      	b.n	8008b88 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2288      	movs	r2, #136	; 0x88
 8008b7e:	2120      	movs	r1, #32
 8008b80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e000      	b.n	8008b88 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8008b86:	2302      	movs	r3, #2
  }
}
 8008b88:	0018      	movs	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b008      	add	sp, #32
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b90:	b5b0      	push	{r4, r5, r7, lr}
 8008b92:	b0aa      	sub	sp, #168	; 0xa8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	22a4      	movs	r2, #164	; 0xa4
 8008ba0:	18b9      	adds	r1, r7, r2
 8008ba2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	20a0      	movs	r0, #160	; 0xa0
 8008bac:	1839      	adds	r1, r7, r0
 8008bae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	249c      	movs	r4, #156	; 0x9c
 8008bb8:	1939      	adds	r1, r7, r4
 8008bba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bbc:	0011      	movs	r1, r2
 8008bbe:	18bb      	adds	r3, r7, r2
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4aa2      	ldr	r2, [pc, #648]	; (8008e4c <HAL_UART_IRQHandler+0x2bc>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2298      	movs	r2, #152	; 0x98
 8008bc8:	18bd      	adds	r5, r7, r2
 8008bca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008bcc:	18bb      	adds	r3, r7, r2
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11a      	bne.n	8008c0a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd4:	187b      	adds	r3, r7, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	4013      	ands	r3, r2
 8008bdc:	d015      	beq.n	8008c0a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bde:	183b      	adds	r3, r7, r0
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2220      	movs	r2, #32
 8008be4:	4013      	ands	r3, r2
 8008be6:	d105      	bne.n	8008bf4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008be8:	193b      	adds	r3, r7, r4
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	2380      	movs	r3, #128	; 0x80
 8008bee:	055b      	lsls	r3, r3, #21
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	d00a      	beq.n	8008c0a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d100      	bne.n	8008bfe <HAL_UART_IRQHandler+0x6e>
 8008bfc:	e2dc      	b.n	80091b8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	0010      	movs	r0, r2
 8008c06:	4798      	blx	r3
      }
      return;
 8008c08:	e2d6      	b.n	80091b8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c0a:	2398      	movs	r3, #152	; 0x98
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d100      	bne.n	8008c16 <HAL_UART_IRQHandler+0x86>
 8008c14:	e122      	b.n	8008e5c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c16:	239c      	movs	r3, #156	; 0x9c
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a8c      	ldr	r2, [pc, #560]	; (8008e50 <HAL_UART_IRQHandler+0x2c0>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	d106      	bne.n	8008c30 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c22:	23a0      	movs	r3, #160	; 0xa0
 8008c24:	18fb      	adds	r3, r7, r3
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a8a      	ldr	r2, [pc, #552]	; (8008e54 <HAL_UART_IRQHandler+0x2c4>)
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	d100      	bne.n	8008c30 <HAL_UART_IRQHandler+0xa0>
 8008c2e:	e115      	b.n	8008e5c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c30:	23a4      	movs	r3, #164	; 0xa4
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2201      	movs	r2, #1
 8008c38:	4013      	ands	r3, r2
 8008c3a:	d012      	beq.n	8008c62 <HAL_UART_IRQHandler+0xd2>
 8008c3c:	23a0      	movs	r3, #160	; 0xa0
 8008c3e:	18fb      	adds	r3, r7, r3
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	2380      	movs	r3, #128	; 0x80
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4013      	ands	r3, r2
 8008c48:	d00b      	beq.n	8008c62 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2290      	movs	r2, #144	; 0x90
 8008c56:	589b      	ldr	r3, [r3, r2]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2190      	movs	r1, #144	; 0x90
 8008c60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c62:	23a4      	movs	r3, #164	; 0xa4
 8008c64:	18fb      	adds	r3, r7, r3
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	d011      	beq.n	8008c92 <HAL_UART_IRQHandler+0x102>
 8008c6e:	239c      	movs	r3, #156	; 0x9c
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	4013      	ands	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2290      	movs	r2, #144	; 0x90
 8008c86:	589b      	ldr	r3, [r3, r2]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2190      	movs	r1, #144	; 0x90
 8008c90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c92:	23a4      	movs	r3, #164	; 0xa4
 8008c94:	18fb      	adds	r3, r7, r3
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d011      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x132>
 8008c9e:	239c      	movs	r3, #156	; 0x9c
 8008ca0:	18fb      	adds	r3, r7, r3
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2290      	movs	r2, #144	; 0x90
 8008cb6:	589b      	ldr	r3, [r3, r2]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2190      	movs	r1, #144	; 0x90
 8008cc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cc2:	23a4      	movs	r3, #164	; 0xa4
 8008cc4:	18fb      	adds	r3, r7, r3
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	4013      	ands	r3, r2
 8008ccc:	d017      	beq.n	8008cfe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cce:	23a0      	movs	r3, #160	; 0xa0
 8008cd0:	18fb      	adds	r3, r7, r3
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d105      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cda:	239c      	movs	r3, #156	; 0x9c
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a5b      	ldr	r2, [pc, #364]	; (8008e50 <HAL_UART_IRQHandler+0x2c0>)
 8008ce2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ce4:	d00b      	beq.n	8008cfe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2208      	movs	r2, #8
 8008cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2290      	movs	r2, #144	; 0x90
 8008cf2:	589b      	ldr	r3, [r3, r2]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2190      	movs	r1, #144	; 0x90
 8008cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cfe:	23a4      	movs	r3, #164	; 0xa4
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	2380      	movs	r3, #128	; 0x80
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	4013      	ands	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <HAL_UART_IRQHandler+0x1a4>
 8008d0c:	23a0      	movs	r3, #160	; 0xa0
 8008d0e:	18fb      	adds	r3, r7, r3
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	04db      	lsls	r3, r3, #19
 8008d16:	4013      	ands	r3, r2
 8008d18:	d00c      	beq.n	8008d34 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2280      	movs	r2, #128	; 0x80
 8008d20:	0112      	lsls	r2, r2, #4
 8008d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2290      	movs	r2, #144	; 0x90
 8008d28:	589b      	ldr	r3, [r3, r2]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2190      	movs	r1, #144	; 0x90
 8008d32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2290      	movs	r2, #144	; 0x90
 8008d38:	589b      	ldr	r3, [r3, r2]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d100      	bne.n	8008d40 <HAL_UART_IRQHandler+0x1b0>
 8008d3e:	e23d      	b.n	80091bc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d40:	23a4      	movs	r3, #164	; 0xa4
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2220      	movs	r2, #32
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d015      	beq.n	8008d78 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d4c:	23a0      	movs	r3, #160	; 0xa0
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2220      	movs	r2, #32
 8008d54:	4013      	ands	r3, r2
 8008d56:	d106      	bne.n	8008d66 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d58:	239c      	movs	r3, #156	; 0x9c
 8008d5a:	18fb      	adds	r3, r7, r3
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	2380      	movs	r3, #128	; 0x80
 8008d60:	055b      	lsls	r3, r3, #21
 8008d62:	4013      	ands	r3, r2
 8008d64:	d008      	beq.n	8008d78 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	0010      	movs	r0, r2
 8008d76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2290      	movs	r2, #144	; 0x90
 8008d7c:	589b      	ldr	r3, [r3, r2]
 8008d7e:	2194      	movs	r1, #148	; 0x94
 8008d80:	187a      	adds	r2, r7, r1
 8008d82:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2240      	movs	r2, #64	; 0x40
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d004      	beq.n	8008d9c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d92:	187b      	adds	r3, r7, r1
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2228      	movs	r2, #40	; 0x28
 8008d98:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d9a:	d04c      	beq.n	8008e36 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f000 fda6 	bl	80098f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2240      	movs	r2, #64	; 0x40
 8008dac:	4013      	ands	r3, r2
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d13c      	bne.n	8008e2c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db2:	f3ef 8310 	mrs	r3, PRIMASK
 8008db6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dba:	2090      	movs	r0, #144	; 0x90
 8008dbc:	183a      	adds	r2, r7, r0
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc6:	f383 8810 	msr	PRIMASK, r3
}
 8008dca:	46c0      	nop			; (mov r8, r8)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2140      	movs	r1, #64	; 0x40
 8008dd8:	438a      	bics	r2, r1
 8008dda:	609a      	str	r2, [r3, #8]
 8008ddc:	183b      	adds	r3, r7, r0
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008de4:	f383 8810 	msr	PRIMASK, r3
}
 8008de8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2280      	movs	r2, #128	; 0x80
 8008dee:	589b      	ldr	r3, [r3, r2]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d016      	beq.n	8008e22 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2280      	movs	r2, #128	; 0x80
 8008df8:	589b      	ldr	r3, [r3, r2]
 8008dfa:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <HAL_UART_IRQHandler+0x2c8>)
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2280      	movs	r2, #128	; 0x80
 8008e02:	589b      	ldr	r3, [r3, r2]
 8008e04:	0018      	movs	r0, r3
 8008e06:	f7fc fb2b 	bl	8005460 <HAL_DMA_Abort_IT>
 8008e0a:	1e03      	subs	r3, r0, #0
 8008e0c:	d01c      	beq.n	8008e48 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	589b      	ldr	r3, [r3, r2]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	2180      	movs	r1, #128	; 0x80
 8008e1a:	5852      	ldr	r2, [r2, r1]
 8008e1c:	0010      	movs	r0, r2
 8008e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e20:	e012      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	0018      	movs	r0, r3
 8008e26:	f000 f9e1 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2a:	e00d      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	0018      	movs	r0, r3
 8008e30:	f000 f9dc 	bl	80091ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	e008      	b.n	8008e48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f000 f9d7 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2290      	movs	r2, #144	; 0x90
 8008e42:	2100      	movs	r1, #0
 8008e44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008e46:	e1b9      	b.n	80091bc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e48:	46c0      	nop			; (mov r8, r8)
    return;
 8008e4a:	e1b7      	b.n	80091bc <HAL_UART_IRQHandler+0x62c>
 8008e4c:	0000080f 	.word	0x0000080f
 8008e50:	10000001 	.word	0x10000001
 8008e54:	04000120 	.word	0x04000120
 8008e58:	080099bd 	.word	0x080099bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d000      	beq.n	8008e66 <HAL_UART_IRQHandler+0x2d6>
 8008e64:	e13e      	b.n	80090e4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e66:	23a4      	movs	r3, #164	; 0xa4
 8008e68:	18fb      	adds	r3, r7, r3
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2210      	movs	r2, #16
 8008e6e:	4013      	ands	r3, r2
 8008e70:	d100      	bne.n	8008e74 <HAL_UART_IRQHandler+0x2e4>
 8008e72:	e137      	b.n	80090e4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e74:	23a0      	movs	r3, #160	; 0xa0
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2210      	movs	r2, #16
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	d100      	bne.n	8008e82 <HAL_UART_IRQHandler+0x2f2>
 8008e80:	e130      	b.n	80090e4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2210      	movs	r2, #16
 8008e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2240      	movs	r2, #64	; 0x40
 8008e92:	4013      	ands	r3, r2
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	d000      	beq.n	8008e9a <HAL_UART_IRQHandler+0x30a>
 8008e98:	e0a4      	b.n	8008fe4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2280      	movs	r2, #128	; 0x80
 8008e9e:	589b      	ldr	r3, [r3, r2]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	217e      	movs	r1, #126	; 0x7e
 8008ea6:	187b      	adds	r3, r7, r1
 8008ea8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008eaa:	187b      	adds	r3, r7, r1
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d100      	bne.n	8008eb4 <HAL_UART_IRQHandler+0x324>
 8008eb2:	e185      	b.n	80091c0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	225c      	movs	r2, #92	; 0x5c
 8008eb8:	5a9b      	ldrh	r3, [r3, r2]
 8008eba:	187a      	adds	r2, r7, r1
 8008ebc:	8812      	ldrh	r2, [r2, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d300      	bcc.n	8008ec4 <HAL_UART_IRQHandler+0x334>
 8008ec2:	e17d      	b.n	80091c0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	187a      	adds	r2, r7, r1
 8008ec8:	215e      	movs	r1, #94	; 0x5e
 8008eca:	8812      	ldrh	r2, [r2, #0]
 8008ecc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2280      	movs	r2, #128	; 0x80
 8008ed2:	589b      	ldr	r3, [r3, r2]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	4013      	ands	r3, r2
 8008edc:	d170      	bne.n	8008fc0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ede:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ee8:	2301      	movs	r3, #1
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	f383 8810 	msr	PRIMASK, r3
}
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	49b4      	ldr	r1, [pc, #720]	; (80091d0 <HAL_UART_IRQHandler+0x640>)
 8008f00:	400a      	ands	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	f383 8810 	msr	PRIMASK, r3
}
 8008f0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f10:	f3ef 8310 	mrs	r3, PRIMASK
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f18:	677b      	str	r3, [r7, #116]	; 0x74
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f20:	f383 8810 	msr	PRIMASK, r3
}
 8008f24:	46c0      	nop			; (mov r8, r8)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2101      	movs	r1, #1
 8008f32:	438a      	bics	r2, r1
 8008f34:	609a      	str	r2, [r3, #8]
 8008f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3c:	f383 8810 	msr	PRIMASK, r3
}
 8008f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f42:	f3ef 8310 	mrs	r3, PRIMASK
 8008f46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f52:	f383 8810 	msr	PRIMASK, r3
}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2140      	movs	r1, #64	; 0x40
 8008f64:	438a      	bics	r2, r1
 8008f66:	609a      	str	r2, [r3, #8]
 8008f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6e:	f383 8810 	msr	PRIMASK, r3
}
 8008f72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	228c      	movs	r2, #140	; 0x8c
 8008f78:	2120      	movs	r1, #32
 8008f7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f82:	f3ef 8310 	mrs	r3, PRIMASK
 8008f86:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f92:	f383 8810 	msr	PRIMASK, r3
}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	438a      	bics	r2, r1
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008faa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fae:	f383 8810 	msr	PRIMASK, r3
}
 8008fb2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2280      	movs	r2, #128	; 0x80
 8008fb8:	589b      	ldr	r3, [r3, r2]
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7fc f9ee 	bl	800539c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	225c      	movs	r2, #92	; 0x5c
 8008fca:	5a9a      	ldrh	r2, [r3, r2]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	215e      	movs	r1, #94	; 0x5e
 8008fd0:	5a5b      	ldrh	r3, [r3, r1]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	0011      	movs	r1, r2
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f000 f90d 	bl	80091fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fe2:	e0ed      	b.n	80091c0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	225c      	movs	r2, #92	; 0x5c
 8008fe8:	5a99      	ldrh	r1, [r3, r2]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	225e      	movs	r2, #94	; 0x5e
 8008fee:	5a9b      	ldrh	r3, [r3, r2]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	208e      	movs	r0, #142	; 0x8e
 8008ff4:	183b      	adds	r3, r7, r0
 8008ff6:	1a8a      	subs	r2, r1, r2
 8008ff8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	225e      	movs	r2, #94	; 0x5e
 8008ffe:	5a9b      	ldrh	r3, [r3, r2]
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d100      	bne.n	8009008 <HAL_UART_IRQHandler+0x478>
 8009006:	e0dd      	b.n	80091c4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8009008:	183b      	adds	r3, r7, r0
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d100      	bne.n	8009012 <HAL_UART_IRQHandler+0x482>
 8009010:	e0d8      	b.n	80091c4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009012:	f3ef 8310 	mrs	r3, PRIMASK
 8009016:	60fb      	str	r3, [r7, #12]
  return(result);
 8009018:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800901a:	2488      	movs	r4, #136	; 0x88
 800901c:	193a      	adds	r2, r7, r4
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	2301      	movs	r3, #1
 8009022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f383 8810 	msr	PRIMASK, r3
}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4967      	ldr	r1, [pc, #412]	; (80091d4 <HAL_UART_IRQHandler+0x644>)
 8009038:	400a      	ands	r2, r1
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	193b      	adds	r3, r7, r4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f383 8810 	msr	PRIMASK, r3
}
 8009048:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800904a:	f3ef 8310 	mrs	r3, PRIMASK
 800904e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009050:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009052:	2484      	movs	r4, #132	; 0x84
 8009054:	193a      	adds	r2, r7, r4
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	2301      	movs	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f383 8810 	msr	PRIMASK, r3
}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	495a      	ldr	r1, [pc, #360]	; (80091d8 <HAL_UART_IRQHandler+0x648>)
 8009070:	400a      	ands	r2, r1
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	193b      	adds	r3, r7, r4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	f383 8810 	msr	PRIMASK, r3
}
 8009080:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	228c      	movs	r2, #140	; 0x8c
 8009086:	2120      	movs	r1, #32
 8009088:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009096:	f3ef 8310 	mrs	r3, PRIMASK
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909e:	2480      	movs	r4, #128	; 0x80
 80090a0:	193a      	adds	r2, r7, r4
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	2301      	movs	r3, #1
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f383 8810 	msr	PRIMASK, r3
}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2110      	movs	r1, #16
 80090bc:	438a      	bics	r2, r1
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	193b      	adds	r3, r7, r4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	f383 8810 	msr	PRIMASK, r3
}
 80090cc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090d4:	183b      	adds	r3, r7, r0
 80090d6:	881a      	ldrh	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	0011      	movs	r1, r2
 80090dc:	0018      	movs	r0, r3
 80090de:	f000 f88d 	bl	80091fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090e2:	e06f      	b.n	80091c4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090e4:	23a4      	movs	r3, #164	; 0xa4
 80090e6:	18fb      	adds	r3, r7, r3
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	035b      	lsls	r3, r3, #13
 80090ee:	4013      	ands	r3, r2
 80090f0:	d010      	beq.n	8009114 <HAL_UART_IRQHandler+0x584>
 80090f2:	239c      	movs	r3, #156	; 0x9c
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	2380      	movs	r3, #128	; 0x80
 80090fa:	03db      	lsls	r3, r3, #15
 80090fc:	4013      	ands	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2280      	movs	r2, #128	; 0x80
 8009106:	0352      	lsls	r2, r2, #13
 8009108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	0018      	movs	r0, r3
 800910e:	f000 fc98 	bl	8009a42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009112:	e05a      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009114:	23a4      	movs	r3, #164	; 0xa4
 8009116:	18fb      	adds	r3, r7, r3
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2280      	movs	r2, #128	; 0x80
 800911c:	4013      	ands	r3, r2
 800911e:	d016      	beq.n	800914e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009120:	23a0      	movs	r3, #160	; 0xa0
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2280      	movs	r2, #128	; 0x80
 8009128:	4013      	ands	r3, r2
 800912a:	d106      	bne.n	800913a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800912c:	239c      	movs	r3, #156	; 0x9c
 800912e:	18fb      	adds	r3, r7, r3
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	2380      	movs	r3, #128	; 0x80
 8009134:	041b      	lsls	r3, r3, #16
 8009136:	4013      	ands	r3, r2
 8009138:	d009      	beq.n	800914e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800913e:	2b00      	cmp	r3, #0
 8009140:	d042      	beq.n	80091c8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	0010      	movs	r0, r2
 800914a:	4798      	blx	r3
    }
    return;
 800914c:	e03c      	b.n	80091c8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800914e:	23a4      	movs	r3, #164	; 0xa4
 8009150:	18fb      	adds	r3, r7, r3
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2240      	movs	r2, #64	; 0x40
 8009156:	4013      	ands	r3, r2
 8009158:	d00a      	beq.n	8009170 <HAL_UART_IRQHandler+0x5e0>
 800915a:	23a0      	movs	r3, #160	; 0xa0
 800915c:	18fb      	adds	r3, r7, r3
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2240      	movs	r2, #64	; 0x40
 8009162:	4013      	ands	r3, r2
 8009164:	d004      	beq.n	8009170 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f000 fc3e 	bl	80099ea <UART_EndTransmit_IT>
    return;
 800916e:	e02c      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009170:	23a4      	movs	r3, #164	; 0xa4
 8009172:	18fb      	adds	r3, r7, r3
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	2380      	movs	r3, #128	; 0x80
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	4013      	ands	r3, r2
 800917c:	d00b      	beq.n	8009196 <HAL_UART_IRQHandler+0x606>
 800917e:	23a0      	movs	r3, #160	; 0xa0
 8009180:	18fb      	adds	r3, r7, r3
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	2380      	movs	r3, #128	; 0x80
 8009186:	05db      	lsls	r3, r3, #23
 8009188:	4013      	ands	r3, r2
 800918a:	d004      	beq.n	8009196 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	0018      	movs	r0, r3
 8009190:	f000 fc67 	bl	8009a62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009194:	e019      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009196:	23a4      	movs	r3, #164	; 0xa4
 8009198:	18fb      	adds	r3, r7, r3
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	2380      	movs	r3, #128	; 0x80
 800919e:	045b      	lsls	r3, r3, #17
 80091a0:	4013      	ands	r3, r2
 80091a2:	d012      	beq.n	80091ca <HAL_UART_IRQHandler+0x63a>
 80091a4:	23a0      	movs	r3, #160	; 0xa0
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da0d      	bge.n	80091ca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	0018      	movs	r0, r3
 80091b2:	f000 fc4e 	bl	8009a52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b6:	e008      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
      return;
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	e006      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
    return;
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	e004      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
      return;
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	e002      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
      return;
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	e000      	b.n	80091ca <HAL_UART_IRQHandler+0x63a>
    return;
 80091c8:	46c0      	nop			; (mov r8, r8)
  }
}
 80091ca:	46bd      	mov	sp, r7
 80091cc:	b02a      	add	sp, #168	; 0xa8
 80091ce:	bdb0      	pop	{r4, r5, r7, pc}
 80091d0:	fffffeff 	.word	0xfffffeff
 80091d4:	fffffedf 	.word	0xfffffedf
 80091d8:	effffffe 	.word	0xeffffffe

080091dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091e4:	46c0      	nop			; (mov r8, r8)
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b002      	add	sp, #8
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091f4:	46c0      	nop			; (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b002      	add	sp, #8
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	000a      	movs	r2, r1
 8009206:	1cbb      	adds	r3, r7, #2
 8009208:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	46bd      	mov	sp, r7
 800920e:	b002      	add	sp, #8
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800921c:	231a      	movs	r3, #26
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	4313      	orrs	r3, r2
 800923a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4abc      	ldr	r2, [pc, #752]	; (8009534 <UART_SetConfig+0x320>)
 8009244:	4013      	ands	r3, r2
 8009246:	0019      	movs	r1, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69fa      	ldr	r2, [r7, #28]
 800924e:	430a      	orrs	r2, r1
 8009250:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4ab7      	ldr	r2, [pc, #732]	; (8009538 <UART_SetConfig+0x324>)
 800925a:	4013      	ands	r3, r2
 800925c:	0019      	movs	r1, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	4313      	orrs	r3, r2
 8009278:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4aae      	ldr	r2, [pc, #696]	; (800953c <UART_SetConfig+0x328>)
 8009282:	4013      	ands	r3, r2
 8009284:	0019      	movs	r1, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	430a      	orrs	r2, r1
 800928e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	220f      	movs	r2, #15
 8009298:	4393      	bics	r3, r2
 800929a:	0019      	movs	r1, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	430a      	orrs	r2, r1
 80092a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4aa4      	ldr	r2, [pc, #656]	; (8009540 <UART_SetConfig+0x32c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d127      	bne.n	8009302 <UART_SetConfig+0xee>
 80092b2:	4ba4      	ldr	r3, [pc, #656]	; (8009544 <UART_SetConfig+0x330>)
 80092b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b6:	2203      	movs	r2, #3
 80092b8:	4013      	ands	r3, r2
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d017      	beq.n	80092ee <UART_SetConfig+0xda>
 80092be:	d81b      	bhi.n	80092f8 <UART_SetConfig+0xe4>
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d00a      	beq.n	80092da <UART_SetConfig+0xc6>
 80092c4:	d818      	bhi.n	80092f8 <UART_SetConfig+0xe4>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <UART_SetConfig+0xbc>
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d00a      	beq.n	80092e4 <UART_SetConfig+0xd0>
 80092ce:	e013      	b.n	80092f8 <UART_SetConfig+0xe4>
 80092d0:	231b      	movs	r3, #27
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e058      	b.n	800938c <UART_SetConfig+0x178>
 80092da:	231b      	movs	r3, #27
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	2202      	movs	r2, #2
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e053      	b.n	800938c <UART_SetConfig+0x178>
 80092e4:	231b      	movs	r3, #27
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	2204      	movs	r2, #4
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e04e      	b.n	800938c <UART_SetConfig+0x178>
 80092ee:	231b      	movs	r3, #27
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	2208      	movs	r2, #8
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e049      	b.n	800938c <UART_SetConfig+0x178>
 80092f8:	231b      	movs	r3, #27
 80092fa:	18fb      	adds	r3, r7, r3
 80092fc:	2210      	movs	r2, #16
 80092fe:	701a      	strb	r2, [r3, #0]
 8009300:	e044      	b.n	800938c <UART_SetConfig+0x178>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a90      	ldr	r2, [pc, #576]	; (8009548 <UART_SetConfig+0x334>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d127      	bne.n	800935c <UART_SetConfig+0x148>
 800930c:	4b8d      	ldr	r3, [pc, #564]	; (8009544 <UART_SetConfig+0x330>)
 800930e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009310:	220c      	movs	r2, #12
 8009312:	4013      	ands	r3, r2
 8009314:	2b0c      	cmp	r3, #12
 8009316:	d017      	beq.n	8009348 <UART_SetConfig+0x134>
 8009318:	d81b      	bhi.n	8009352 <UART_SetConfig+0x13e>
 800931a:	2b08      	cmp	r3, #8
 800931c:	d00a      	beq.n	8009334 <UART_SetConfig+0x120>
 800931e:	d818      	bhi.n	8009352 <UART_SetConfig+0x13e>
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <UART_SetConfig+0x116>
 8009324:	2b04      	cmp	r3, #4
 8009326:	d00a      	beq.n	800933e <UART_SetConfig+0x12a>
 8009328:	e013      	b.n	8009352 <UART_SetConfig+0x13e>
 800932a:	231b      	movs	r3, #27
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e02b      	b.n	800938c <UART_SetConfig+0x178>
 8009334:	231b      	movs	r3, #27
 8009336:	18fb      	adds	r3, r7, r3
 8009338:	2202      	movs	r2, #2
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	e026      	b.n	800938c <UART_SetConfig+0x178>
 800933e:	231b      	movs	r3, #27
 8009340:	18fb      	adds	r3, r7, r3
 8009342:	2204      	movs	r2, #4
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	e021      	b.n	800938c <UART_SetConfig+0x178>
 8009348:	231b      	movs	r3, #27
 800934a:	18fb      	adds	r3, r7, r3
 800934c:	2208      	movs	r2, #8
 800934e:	701a      	strb	r2, [r3, #0]
 8009350:	e01c      	b.n	800938c <UART_SetConfig+0x178>
 8009352:	231b      	movs	r3, #27
 8009354:	18fb      	adds	r3, r7, r3
 8009356:	2210      	movs	r2, #16
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e017      	b.n	800938c <UART_SetConfig+0x178>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a7a      	ldr	r2, [pc, #488]	; (800954c <UART_SetConfig+0x338>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d104      	bne.n	8009370 <UART_SetConfig+0x15c>
 8009366:	231b      	movs	r3, #27
 8009368:	18fb      	adds	r3, r7, r3
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e00d      	b.n	800938c <UART_SetConfig+0x178>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a76      	ldr	r2, [pc, #472]	; (8009550 <UART_SetConfig+0x33c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d104      	bne.n	8009384 <UART_SetConfig+0x170>
 800937a:	231b      	movs	r3, #27
 800937c:	18fb      	adds	r3, r7, r3
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e003      	b.n	800938c <UART_SetConfig+0x178>
 8009384:	231b      	movs	r3, #27
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	2210      	movs	r2, #16
 800938a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	429a      	cmp	r2, r3
 8009396:	d000      	beq.n	800939a <UART_SetConfig+0x186>
 8009398:	e065      	b.n	8009466 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800939a:	231b      	movs	r3, #27
 800939c:	18fb      	adds	r3, r7, r3
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d015      	beq.n	80093d0 <UART_SetConfig+0x1bc>
 80093a4:	dc18      	bgt.n	80093d8 <UART_SetConfig+0x1c4>
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d00d      	beq.n	80093c6 <UART_SetConfig+0x1b2>
 80093aa:	dc15      	bgt.n	80093d8 <UART_SetConfig+0x1c4>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <UART_SetConfig+0x1a2>
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d005      	beq.n	80093c0 <UART_SetConfig+0x1ac>
 80093b4:	e010      	b.n	80093d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b6:	f7fd fd2f 	bl	8006e18 <HAL_RCC_GetPCLK1Freq>
 80093ba:	0003      	movs	r3, r0
 80093bc:	617b      	str	r3, [r7, #20]
        break;
 80093be:	e012      	b.n	80093e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093c0:	4b64      	ldr	r3, [pc, #400]	; (8009554 <UART_SetConfig+0x340>)
 80093c2:	617b      	str	r3, [r7, #20]
        break;
 80093c4:	e00f      	b.n	80093e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093c6:	f7fd fc9d 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 80093ca:	0003      	movs	r3, r0
 80093cc:	617b      	str	r3, [r7, #20]
        break;
 80093ce:	e00a      	b.n	80093e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d0:	2380      	movs	r3, #128	; 0x80
 80093d2:	021b      	lsls	r3, r3, #8
 80093d4:	617b      	str	r3, [r7, #20]
        break;
 80093d6:	e006      	b.n	80093e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093dc:	231a      	movs	r3, #26
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
        break;
 80093e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d100      	bne.n	80093ee <UART_SetConfig+0x1da>
 80093ec:	e08d      	b.n	800950a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f2:	4b59      	ldr	r3, [pc, #356]	; (8009558 <UART_SetConfig+0x344>)
 80093f4:	0052      	lsls	r2, r2, #1
 80093f6:	5ad3      	ldrh	r3, [r2, r3]
 80093f8:	0019      	movs	r1, r3
 80093fa:	6978      	ldr	r0, [r7, #20]
 80093fc:	f7f6 fea0 	bl	8000140 <__udivsi3>
 8009400:	0003      	movs	r3, r0
 8009402:	005a      	lsls	r2, r3, #1
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	18d2      	adds	r2, r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	0019      	movs	r1, r3
 8009412:	0010      	movs	r0, r2
 8009414:	f7f6 fe94 	bl	8000140 <__udivsi3>
 8009418:	0003      	movs	r3, r0
 800941a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	2b0f      	cmp	r3, #15
 8009420:	d91c      	bls.n	800945c <UART_SetConfig+0x248>
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	025b      	lsls	r3, r3, #9
 8009428:	429a      	cmp	r2, r3
 800942a:	d217      	bcs.n	800945c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	b29a      	uxth	r2, r3
 8009430:	200e      	movs	r0, #14
 8009432:	183b      	adds	r3, r7, r0
 8009434:	210f      	movs	r1, #15
 8009436:	438a      	bics	r2, r1
 8009438:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	085b      	lsrs	r3, r3, #1
 800943e:	b29b      	uxth	r3, r3
 8009440:	2207      	movs	r2, #7
 8009442:	4013      	ands	r3, r2
 8009444:	b299      	uxth	r1, r3
 8009446:	183b      	adds	r3, r7, r0
 8009448:	183a      	adds	r2, r7, r0
 800944a:	8812      	ldrh	r2, [r2, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	183a      	adds	r2, r7, r0
 8009456:	8812      	ldrh	r2, [r2, #0]
 8009458:	60da      	str	r2, [r3, #12]
 800945a:	e056      	b.n	800950a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800945c:	231a      	movs	r3, #26
 800945e:	18fb      	adds	r3, r7, r3
 8009460:	2201      	movs	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	e051      	b.n	800950a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009466:	231b      	movs	r3, #27
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b08      	cmp	r3, #8
 800946e:	d015      	beq.n	800949c <UART_SetConfig+0x288>
 8009470:	dc18      	bgt.n	80094a4 <UART_SetConfig+0x290>
 8009472:	2b04      	cmp	r3, #4
 8009474:	d00d      	beq.n	8009492 <UART_SetConfig+0x27e>
 8009476:	dc15      	bgt.n	80094a4 <UART_SetConfig+0x290>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <UART_SetConfig+0x26e>
 800947c:	2b02      	cmp	r3, #2
 800947e:	d005      	beq.n	800948c <UART_SetConfig+0x278>
 8009480:	e010      	b.n	80094a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009482:	f7fd fcc9 	bl	8006e18 <HAL_RCC_GetPCLK1Freq>
 8009486:	0003      	movs	r3, r0
 8009488:	617b      	str	r3, [r7, #20]
        break;
 800948a:	e012      	b.n	80094b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800948c:	4b31      	ldr	r3, [pc, #196]	; (8009554 <UART_SetConfig+0x340>)
 800948e:	617b      	str	r3, [r7, #20]
        break;
 8009490:	e00f      	b.n	80094b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009492:	f7fd fc37 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8009496:	0003      	movs	r3, r0
 8009498:	617b      	str	r3, [r7, #20]
        break;
 800949a:	e00a      	b.n	80094b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800949c:	2380      	movs	r3, #128	; 0x80
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	617b      	str	r3, [r7, #20]
        break;
 80094a2:	e006      	b.n	80094b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094a8:	231a      	movs	r3, #26
 80094aa:	18fb      	adds	r3, r7, r3
 80094ac:	2201      	movs	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
        break;
 80094b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d028      	beq.n	800950a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094bc:	4b26      	ldr	r3, [pc, #152]	; (8009558 <UART_SetConfig+0x344>)
 80094be:	0052      	lsls	r2, r2, #1
 80094c0:	5ad3      	ldrh	r3, [r2, r3]
 80094c2:	0019      	movs	r1, r3
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f7f6 fe3b 	bl	8000140 <__udivsi3>
 80094ca:	0003      	movs	r3, r0
 80094cc:	001a      	movs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	085b      	lsrs	r3, r3, #1
 80094d4:	18d2      	adds	r2, r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	0019      	movs	r1, r3
 80094dc:	0010      	movs	r0, r2
 80094de:	f7f6 fe2f 	bl	8000140 <__udivsi3>
 80094e2:	0003      	movs	r3, r0
 80094e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d90a      	bls.n	8009502 <UART_SetConfig+0x2ee>
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	2380      	movs	r3, #128	; 0x80
 80094f0:	025b      	lsls	r3, r3, #9
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d205      	bcs.n	8009502 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	e003      	b.n	800950a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009502:	231a      	movs	r3, #26
 8009504:	18fb      	adds	r3, r7, r3
 8009506:	2201      	movs	r2, #1
 8009508:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	226a      	movs	r2, #106	; 0x6a
 800950e:	2101      	movs	r1, #1
 8009510:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2268      	movs	r2, #104	; 0x68
 8009516:	2101      	movs	r1, #1
 8009518:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009526:	231a      	movs	r3, #26
 8009528:	18fb      	adds	r3, r7, r3
 800952a:	781b      	ldrb	r3, [r3, #0]
}
 800952c:	0018      	movs	r0, r3
 800952e:	46bd      	mov	sp, r7
 8009530:	b008      	add	sp, #32
 8009532:	bd80      	pop	{r7, pc}
 8009534:	cfff69f3 	.word	0xcfff69f3
 8009538:	ffffcfff 	.word	0xffffcfff
 800953c:	11fff4ff 	.word	0x11fff4ff
 8009540:	40013800 	.word	0x40013800
 8009544:	40021000 	.word	0x40021000
 8009548:	40004400 	.word	0x40004400
 800954c:	40004800 	.word	0x40004800
 8009550:	40004c00 	.word	0x40004c00
 8009554:	00f42400 	.word	0x00f42400
 8009558:	08014fcc 	.word	0x08014fcc

0800955c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	2201      	movs	r2, #1
 800956a:	4013      	ands	r3, r2
 800956c:	d00b      	beq.n	8009586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4a4a      	ldr	r2, [pc, #296]	; (80096a0 <UART_AdvFeatureConfig+0x144>)
 8009576:	4013      	ands	r3, r2
 8009578:	0019      	movs	r1, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	2202      	movs	r2, #2
 800958c:	4013      	ands	r3, r2
 800958e:	d00b      	beq.n	80095a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	4a43      	ldr	r2, [pc, #268]	; (80096a4 <UART_AdvFeatureConfig+0x148>)
 8009598:	4013      	ands	r3, r2
 800959a:	0019      	movs	r1, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	2204      	movs	r2, #4
 80095ae:	4013      	ands	r3, r2
 80095b0:	d00b      	beq.n	80095ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	4a3b      	ldr	r2, [pc, #236]	; (80096a8 <UART_AdvFeatureConfig+0x14c>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	0019      	movs	r1, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ce:	2208      	movs	r2, #8
 80095d0:	4013      	ands	r3, r2
 80095d2:	d00b      	beq.n	80095ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4a34      	ldr	r2, [pc, #208]	; (80096ac <UART_AdvFeatureConfig+0x150>)
 80095dc:	4013      	ands	r3, r2
 80095de:	0019      	movs	r1, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f0:	2210      	movs	r2, #16
 80095f2:	4013      	ands	r3, r2
 80095f4:	d00b      	beq.n	800960e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	4a2c      	ldr	r2, [pc, #176]	; (80096b0 <UART_AdvFeatureConfig+0x154>)
 80095fe:	4013      	ands	r3, r2
 8009600:	0019      	movs	r1, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	2220      	movs	r2, #32
 8009614:	4013      	ands	r3, r2
 8009616:	d00b      	beq.n	8009630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	4a25      	ldr	r2, [pc, #148]	; (80096b4 <UART_AdvFeatureConfig+0x158>)
 8009620:	4013      	ands	r3, r2
 8009622:	0019      	movs	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	2240      	movs	r2, #64	; 0x40
 8009636:	4013      	ands	r3, r2
 8009638:	d01d      	beq.n	8009676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a1d      	ldr	r2, [pc, #116]	; (80096b8 <UART_AdvFeatureConfig+0x15c>)
 8009642:	4013      	ands	r3, r2
 8009644:	0019      	movs	r1, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009656:	2380      	movs	r3, #128	; 0x80
 8009658:	035b      	lsls	r3, r3, #13
 800965a:	429a      	cmp	r2, r3
 800965c:	d10b      	bne.n	8009676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4a15      	ldr	r2, [pc, #84]	; (80096bc <UART_AdvFeatureConfig+0x160>)
 8009666:	4013      	ands	r3, r2
 8009668:	0019      	movs	r1, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967a:	2280      	movs	r2, #128	; 0x80
 800967c:	4013      	ands	r3, r2
 800967e:	d00b      	beq.n	8009698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4a0e      	ldr	r2, [pc, #56]	; (80096c0 <UART_AdvFeatureConfig+0x164>)
 8009688:	4013      	ands	r3, r2
 800968a:	0019      	movs	r1, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	605a      	str	r2, [r3, #4]
  }
}
 8009698:	46c0      	nop			; (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	b002      	add	sp, #8
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	fffdffff 	.word	0xfffdffff
 80096a4:	fffeffff 	.word	0xfffeffff
 80096a8:	fffbffff 	.word	0xfffbffff
 80096ac:	ffff7fff 	.word	0xffff7fff
 80096b0:	ffffefff 	.word	0xffffefff
 80096b4:	ffffdfff 	.word	0xffffdfff
 80096b8:	ffefffff 	.word	0xffefffff
 80096bc:	ff9fffff 	.word	0xff9fffff
 80096c0:	fff7ffff 	.word	0xfff7ffff

080096c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2290      	movs	r2, #144	; 0x90
 80096d0:	2100      	movs	r1, #0
 80096d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d4:	f7fb f8d8 	bl	8004888 <HAL_GetTick>
 80096d8:	0003      	movs	r3, r0
 80096da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2208      	movs	r2, #8
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d10c      	bne.n	8009704 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2280      	movs	r2, #128	; 0x80
 80096ee:	0391      	lsls	r1, r2, #14
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4a1a      	ldr	r2, [pc, #104]	; (800975c <UART_CheckIdleState+0x98>)
 80096f4:	9200      	str	r2, [sp, #0]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f832 	bl	8009760 <UART_WaitOnFlagUntilTimeout>
 80096fc:	1e03      	subs	r3, r0, #0
 80096fe:	d001      	beq.n	8009704 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e026      	b.n	8009752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2204      	movs	r2, #4
 800970c:	4013      	ands	r3, r2
 800970e:	2b04      	cmp	r3, #4
 8009710:	d10c      	bne.n	800972c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2280      	movs	r2, #128	; 0x80
 8009716:	03d1      	lsls	r1, r2, #15
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	4a10      	ldr	r2, [pc, #64]	; (800975c <UART_CheckIdleState+0x98>)
 800971c:	9200      	str	r2, [sp, #0]
 800971e:	2200      	movs	r2, #0
 8009720:	f000 f81e 	bl	8009760 <UART_WaitOnFlagUntilTimeout>
 8009724:	1e03      	subs	r3, r0, #0
 8009726:	d001      	beq.n	800972c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e012      	b.n	8009752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2288      	movs	r2, #136	; 0x88
 8009730:	2120      	movs	r1, #32
 8009732:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	228c      	movs	r2, #140	; 0x8c
 8009738:	2120      	movs	r1, #32
 800973a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2284      	movs	r2, #132	; 0x84
 800974c:	2100      	movs	r1, #0
 800974e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	0018      	movs	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	b004      	add	sp, #16
 8009758:	bd80      	pop	{r7, pc}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	01ffffff 	.word	0x01ffffff

08009760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b094      	sub	sp, #80	; 0x50
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009770:	e0a7      	b.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009774:	3301      	adds	r3, #1
 8009776:	d100      	bne.n	800977a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009778:	e0a3      	b.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800977a:	f7fb f885 	bl	8004888 <HAL_GetTick>
 800977e:	0002      	movs	r2, r0
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009786:	429a      	cmp	r2, r3
 8009788:	d302      	bcc.n	8009790 <UART_WaitOnFlagUntilTimeout+0x30>
 800978a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800978c:	2b00      	cmp	r3, #0
 800978e:	d13f      	bne.n	8009810 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009790:	f3ef 8310 	mrs	r3, PRIMASK
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009798:	647b      	str	r3, [r7, #68]	; 0x44
 800979a:	2301      	movs	r3, #1
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	f383 8810 	msr	PRIMASK, r3
}
 80097a4:	46c0      	nop			; (mov r8, r8)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	494e      	ldr	r1, [pc, #312]	; (80098ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 80097b2:	400a      	ands	r2, r1
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	f383 8810 	msr	PRIMASK, r3
}
 80097c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c2:	f3ef 8310 	mrs	r3, PRIMASK
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80097c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ca:	643b      	str	r3, [r7, #64]	; 0x40
 80097cc:	2301      	movs	r3, #1
 80097ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	f383 8810 	msr	PRIMASK, r3
}
 80097d6:	46c0      	nop			; (mov r8, r8)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2101      	movs	r1, #1
 80097e4:	438a      	bics	r2, r1
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ee:	f383 8810 	msr	PRIMASK, r3
}
 80097f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2288      	movs	r2, #136	; 0x88
 80097f8:	2120      	movs	r1, #32
 80097fa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	228c      	movs	r2, #140	; 0x8c
 8009800:	2120      	movs	r1, #32
 8009802:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2284      	movs	r2, #132	; 0x84
 8009808:	2100      	movs	r1, #0
 800980a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e069      	b.n	80098e4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2204      	movs	r2, #4
 8009818:	4013      	ands	r3, r2
 800981a:	d052      	beq.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	2380      	movs	r3, #128	; 0x80
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	401a      	ands	r2, r3
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	429a      	cmp	r2, r3
 800982e:	d148      	bne.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0112      	lsls	r2, r2, #4
 8009838:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800983a:	f3ef 8310 	mrs	r3, PRIMASK
 800983e:	613b      	str	r3, [r7, #16]
  return(result);
 8009840:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f383 8810 	msr	PRIMASK, r3
}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4924      	ldr	r1, [pc, #144]	; (80098ec <UART_WaitOnFlagUntilTimeout+0x18c>)
 800985c:	400a      	ands	r2, r1
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009862:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f383 8810 	msr	PRIMASK, r3
}
 800986a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800986c:	f3ef 8310 	mrs	r3, PRIMASK
 8009870:	61fb      	str	r3, [r7, #28]
  return(result);
 8009872:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009874:	64bb      	str	r3, [r7, #72]	; 0x48
 8009876:	2301      	movs	r3, #1
 8009878:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f383 8810 	msr	PRIMASK, r3
}
 8009880:	46c0      	nop			; (mov r8, r8)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2101      	movs	r1, #1
 800988e:	438a      	bics	r2, r1
 8009890:	609a      	str	r2, [r3, #8]
 8009892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	f383 8810 	msr	PRIMASK, r3
}
 800989c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2288      	movs	r2, #136	; 0x88
 80098a2:	2120      	movs	r1, #32
 80098a4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	228c      	movs	r2, #140	; 0x8c
 80098aa:	2120      	movs	r1, #32
 80098ac:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2290      	movs	r2, #144	; 0x90
 80098b2:	2120      	movs	r1, #32
 80098b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2284      	movs	r2, #132	; 0x84
 80098ba:	2100      	movs	r1, #0
 80098bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e010      	b.n	80098e4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	4013      	ands	r3, r2
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	425a      	negs	r2, r3
 80098d2:	4153      	adcs	r3, r2
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	001a      	movs	r2, r3
 80098d8:	1dfb      	adds	r3, r7, #7
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d100      	bne.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x182>
 80098e0:	e747      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	0018      	movs	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b014      	add	sp, #80	; 0x50
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	fffffe5f 	.word	0xfffffe5f

080098f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08e      	sub	sp, #56	; 0x38
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f8:	f3ef 8310 	mrs	r3, PRIMASK
 80098fc:	617b      	str	r3, [r7, #20]
  return(result);
 80098fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
 8009902:	2301      	movs	r3, #1
 8009904:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f383 8810 	msr	PRIMASK, r3
}
 800990c:	46c0      	nop			; (mov r8, r8)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4926      	ldr	r1, [pc, #152]	; (80099b4 <UART_EndRxTransfer+0xc4>)
 800991a:	400a      	ands	r2, r1
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f383 8810 	msr	PRIMASK, r3
}
 8009928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800992a:	f3ef 8310 	mrs	r3, PRIMASK
 800992e:	623b      	str	r3, [r7, #32]
  return(result);
 8009930:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
 8009934:	2301      	movs	r3, #1
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	f383 8810 	msr	PRIMASK, r3
}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	491b      	ldr	r1, [pc, #108]	; (80099b8 <UART_EndRxTransfer+0xc8>)
 800994c:	400a      	ands	r2, r1
 800994e:	609a      	str	r2, [r3, #8]
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	f383 8810 	msr	PRIMASK, r3
}
 800995a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d118      	bne.n	8009996 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009964:	f3ef 8310 	mrs	r3, PRIMASK
 8009968:	60bb      	str	r3, [r7, #8]
  return(result);
 800996a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800996e:	2301      	movs	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f383 8810 	msr	PRIMASK, r3
}
 8009978:	46c0      	nop			; (mov r8, r8)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2110      	movs	r1, #16
 8009986:	438a      	bics	r2, r1
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f383 8810 	msr	PRIMASK, r3
}
 8009994:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	228c      	movs	r2, #140	; 0x8c
 800999a:	2120      	movs	r1, #32
 800999c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b00e      	add	sp, #56	; 0x38
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	fffffedf 	.word	0xfffffedf
 80099b8:	effffffe 	.word	0xeffffffe

080099bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	225e      	movs	r2, #94	; 0x5e
 80099ce:	2100      	movs	r1, #0
 80099d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2256      	movs	r2, #86	; 0x56
 80099d6:	2100      	movs	r1, #0
 80099d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	0018      	movs	r0, r3
 80099de:	f7ff fc05 	bl	80091ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099e2:	46c0      	nop			; (mov r8, r8)
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b004      	add	sp, #16
 80099e8:	bd80      	pop	{r7, pc}

080099ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b086      	sub	sp, #24
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f2:	f3ef 8310 	mrs	r3, PRIMASK
 80099f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80099f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	2301      	movs	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f383 8810 	msr	PRIMASK, r3
}
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2140      	movs	r1, #64	; 0x40
 8009a14:	438a      	bics	r2, r1
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f383 8810 	msr	PRIMASK, r3
}
 8009a22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2288      	movs	r2, #136	; 0x88
 8009a28:	2120      	movs	r1, #32
 8009a2a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fbd1 	bl	80091dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	b006      	add	sp, #24
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a4a:	46c0      	nop			; (mov r8, r8)
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b002      	add	sp, #8
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009a5a:	46c0      	nop			; (mov r8, r8)
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	b002      	add	sp, #8
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	b002      	add	sp, #8
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2284      	movs	r2, #132	; 0x84
 8009a80:	5c9b      	ldrb	r3, [r3, r2]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d101      	bne.n	8009a8a <HAL_UARTEx_DisableFifoMode+0x16>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e027      	b.n	8009ada <HAL_UARTEx_DisableFifoMode+0x66>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2284      	movs	r2, #132	; 0x84
 8009a8e:	2101      	movs	r1, #1
 8009a90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2288      	movs	r2, #136	; 0x88
 8009a96:	2124      	movs	r1, #36	; 0x24
 8009a98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2101      	movs	r1, #1
 8009aae:	438a      	bics	r2, r1
 8009ab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4a0b      	ldr	r2, [pc, #44]	; (8009ae4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2288      	movs	r2, #136	; 0x88
 8009acc:	2120      	movs	r1, #32
 8009ace:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2284      	movs	r2, #132	; 0x84
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	0018      	movs	r0, r3
 8009adc:	46bd      	mov	sp, r7
 8009ade:	b004      	add	sp, #16
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	dfffffff 	.word	0xdfffffff

08009ae8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2284      	movs	r2, #132	; 0x84
 8009af6:	5c9b      	ldrb	r3, [r3, r2]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e02e      	b.n	8009b5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2284      	movs	r2, #132	; 0x84
 8009b04:	2101      	movs	r1, #1
 8009b06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2288      	movs	r2, #136	; 0x88
 8009b0c:	2124      	movs	r1, #36	; 0x24
 8009b0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2101      	movs	r1, #1
 8009b24:	438a      	bics	r2, r1
 8009b26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	08d9      	lsrs	r1, r3, #3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f000 f854 	bl	8009bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2288      	movs	r2, #136	; 0x88
 8009b50:	2120      	movs	r1, #32
 8009b52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2284      	movs	r2, #132	; 0x84
 8009b58:	2100      	movs	r1, #0
 8009b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	0018      	movs	r0, r3
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b004      	add	sp, #16
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2284      	movs	r2, #132	; 0x84
 8009b76:	5c9b      	ldrb	r3, [r3, r2]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e02f      	b.n	8009be0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2284      	movs	r2, #132	; 0x84
 8009b84:	2101      	movs	r1, #1
 8009b86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2288      	movs	r2, #136	; 0x88
 8009b8c:	2124      	movs	r1, #36	; 0x24
 8009b8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	438a      	bics	r2, r1
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	4a0e      	ldr	r2, [pc, #56]	; (8009be8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	0019      	movs	r1, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	0018      	movs	r0, r3
 8009bc2:	f000 f813 	bl	8009bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2288      	movs	r2, #136	; 0x88
 8009bd2:	2120      	movs	r1, #32
 8009bd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2284      	movs	r2, #132	; 0x84
 8009bda:	2100      	movs	r1, #0
 8009bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	0018      	movs	r0, r3
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b004      	add	sp, #16
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	f1ffffff 	.word	0xf1ffffff

08009bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d108      	bne.n	8009c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	226a      	movs	r2, #106	; 0x6a
 8009c00:	2101      	movs	r1, #1
 8009c02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2268      	movs	r2, #104	; 0x68
 8009c08:	2101      	movs	r1, #1
 8009c0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c0c:	e043      	b.n	8009c96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c0e:	260f      	movs	r6, #15
 8009c10:	19bb      	adds	r3, r7, r6
 8009c12:	2208      	movs	r2, #8
 8009c14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c16:	200e      	movs	r0, #14
 8009c18:	183b      	adds	r3, r7, r0
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	0e5b      	lsrs	r3, r3, #25
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	240d      	movs	r4, #13
 8009c2a:	193b      	adds	r3, r7, r4
 8009c2c:	2107      	movs	r1, #7
 8009c2e:	400a      	ands	r2, r1
 8009c30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	0f5b      	lsrs	r3, r3, #29
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	250c      	movs	r5, #12
 8009c3e:	197b      	adds	r3, r7, r5
 8009c40:	2107      	movs	r1, #7
 8009c42:	400a      	ands	r2, r1
 8009c44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c46:	183b      	adds	r3, r7, r0
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	197a      	adds	r2, r7, r5
 8009c4c:	7812      	ldrb	r2, [r2, #0]
 8009c4e:	4914      	ldr	r1, [pc, #80]	; (8009ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c50:	5c8a      	ldrb	r2, [r1, r2]
 8009c52:	435a      	muls	r2, r3
 8009c54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c56:	197b      	adds	r3, r7, r5
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	4a12      	ldr	r2, [pc, #72]	; (8009ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c5e:	0019      	movs	r1, r3
 8009c60:	f7f6 faf8 	bl	8000254 <__divsi3>
 8009c64:	0003      	movs	r3, r0
 8009c66:	b299      	uxth	r1, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	226a      	movs	r2, #106	; 0x6a
 8009c6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c6e:	19bb      	adds	r3, r7, r6
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	193a      	adds	r2, r7, r4
 8009c74:	7812      	ldrb	r2, [r2, #0]
 8009c76:	490a      	ldr	r1, [pc, #40]	; (8009ca0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009c78:	5c8a      	ldrb	r2, [r1, r2]
 8009c7a:	435a      	muls	r2, r3
 8009c7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c7e:	193b      	adds	r3, r7, r4
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009c84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c86:	0019      	movs	r1, r3
 8009c88:	f7f6 fae4 	bl	8000254 <__divsi3>
 8009c8c:	0003      	movs	r3, r0
 8009c8e:	b299      	uxth	r1, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2268      	movs	r2, #104	; 0x68
 8009c94:	5299      	strh	r1, [r3, r2]
}
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	b005      	add	sp, #20
 8009c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	08014fe4 	.word	0x08014fe4
 8009ca4:	08014fec 	.word	0x08014fec

08009ca8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009ca8:	b5b0      	push	{r4, r5, r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cb2:	250f      	movs	r5, #15
 8009cb4:	197b      	adds	r3, r7, r5
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009cba:	197c      	adds	r4, r7, r5
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f001 ffec 	bl	800bca0 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	7023      	strb	r3, [r4, #0]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009ccc:	197b      	adds	r3, r7, r5
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b25b      	sxtb	r3, r3
}
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b004      	add	sp, #16
 8009cd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009cdc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cde:	b097      	sub	sp, #92	; 0x5c
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ce4:	2157      	movs	r1, #87	; 0x57
 8009ce6:	187b      	adds	r3, r7, r1
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009cec:	000a      	movs	r2, r1
 8009cee:	18bb      	adds	r3, r7, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b25b      	sxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <VL53L0X_DataInit+0x2e>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009cf8:	18bc      	adds	r4, r7, r2
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2188      	movs	r1, #136	; 0x88
 8009d00:	0018      	movs	r0, r3
 8009d02:	f005 fe93 	bl	800fa2c <VL53L0X_WrByte>
 8009d06:	0003      	movs	r3, r0
 8009d08:	7023      	strb	r3, [r4, #0]

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	22f0      	movs	r2, #240	; 0xf0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	5499      	strb	r1, [r3, r2]
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	23a9      	movs	r3, #169	; 0xa9
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	21fa      	movs	r1, #250	; 0xfa
 8009d1a:	0089      	lsls	r1, r1, #2
 8009d1c:	52d1      	strh	r1, [r2, r3]

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	23aa      	movs	r3, #170	; 0xaa
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	21c8      	movs	r1, #200	; 0xc8
 8009d26:	0049      	lsls	r1, r1, #1
 8009d28:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	23ac      	movs	r3, #172	; 0xac
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	49b5      	ldr	r1, [pc, #724]	; (800a008 <VL53L0X_DataInit+0x32c>)
 8009d32:	50d1      	str	r1, [r2, r3]
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	22d4      	movs	r2, #212	; 0xd4
 8009d38:	49b4      	ldr	r1, [pc, #720]	; (800a00c <VL53L0X_DataInit+0x330>)
 8009d3a:	5099      	str	r1, [r3, r2]

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009d42:	2657      	movs	r6, #87	; 0x57
 8009d44:	19bc      	adds	r4, r7, r6
 8009d46:	2510      	movs	r5, #16
 8009d48:	197a      	adds	r2, r7, r5
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	0011      	movs	r1, r2
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 fb3b 	bl	800a3ca <VL53L0X_GetDeviceParameters>
 8009d54:	0003      	movs	r3, r0
 8009d56:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8009d58:	19bb      	adds	r3, r7, r6
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b25b      	sxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10d      	bne.n	8009d7e <VL53L0X_DataInit+0xa2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009d62:	197b      	adds	r3, r7, r5
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009d68:	197b      	adds	r3, r7, r5
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	705a      	strb	r2, [r3, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	197a      	adds	r2, r7, r5
 8009d72:	3310      	adds	r3, #16
 8009d74:	0011      	movs	r1, r2
 8009d76:	2240      	movs	r2, #64	; 0x40
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f007 fba1 	bl	80114c0 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	239a      	movs	r3, #154	; 0x9a
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	2164      	movs	r1, #100	; 0x64
 8009d86:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	239b      	movs	r3, #155	; 0x9b
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	21e1      	movs	r1, #225	; 0xe1
 8009d90:	0089      	lsls	r1, r1, #2
 8009d92:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	239c      	movs	r3, #156	; 0x9c
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	21fa      	movs	r1, #250	; 0xfa
 8009d9c:	0049      	lsls	r1, r1, #1
 8009d9e:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	239e      	movs	r3, #158	; 0x9e
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	21a0      	movs	r1, #160	; 0xa0
 8009da8:	0109      	lsls	r1, r1, #4
 8009daa:	52d1      	strh	r1, [r2, r3]

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	23a8      	movs	r3, #168	; 0xa8
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	2101      	movs	r1, #1
 8009db4:	54d1      	strb	r1, [r2, r3]

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	2180      	movs	r1, #128	; 0x80
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f005 fe35 	bl	800fa2c <VL53L0X_WrByte>
 8009dc2:	0003      	movs	r3, r0
 8009dc4:	0019      	movs	r1, r3
 8009dc6:	2457      	movs	r4, #87	; 0x57
 8009dc8:	193b      	adds	r3, r7, r4
 8009dca:	193a      	adds	r2, r7, r4
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	21ff      	movs	r1, #255	; 0xff
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f005 fe27 	bl	800fa2c <VL53L0X_WrByte>
 8009dde:	0003      	movs	r3, r0
 8009de0:	0019      	movs	r1, r3
 8009de2:	193b      	adds	r3, r7, r4
 8009de4:	193a      	adds	r2, r7, r4
 8009de6:	7812      	ldrb	r2, [r2, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	2100      	movs	r1, #0
 8009df2:	0018      	movs	r0, r3
 8009df4:	f005 fe1a 	bl	800fa2c <VL53L0X_WrByte>
 8009df8:	0003      	movs	r3, r0
 8009dfa:	0019      	movs	r1, r3
 8009dfc:	193b      	adds	r3, r7, r4
 8009dfe:	193a      	adds	r2, r7, r4
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009e06:	250f      	movs	r5, #15
 8009e08:	197a      	adds	r2, r7, r5
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2191      	movs	r1, #145	; 0x91
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f005 febb 	bl	800fb8a <VL53L0X_RdByte>
 8009e14:	0003      	movs	r3, r0
 8009e16:	0019      	movs	r1, r3
 8009e18:	193b      	adds	r3, r7, r4
 8009e1a:	193a      	adds	r2, r7, r4
 8009e1c:	7812      	ldrb	r2, [r2, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	701a      	strb	r2, [r3, #0]
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009e22:	197b      	adds	r3, r7, r5
 8009e24:	7819      	ldrb	r1, [r3, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	239d      	movs	r3, #157	; 0x9d
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	54d1      	strb	r1, [r2, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	2100      	movs	r1, #0
 8009e34:	0018      	movs	r0, r3
 8009e36:	f005 fdf9 	bl	800fa2c <VL53L0X_WrByte>
 8009e3a:	0003      	movs	r3, r0
 8009e3c:	0019      	movs	r1, r3
 8009e3e:	193b      	adds	r3, r7, r4
 8009e40:	193a      	adds	r2, r7, r4
 8009e42:	7812      	ldrb	r2, [r2, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	21ff      	movs	r1, #255	; 0xff
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f005 fdec 	bl	800fa2c <VL53L0X_WrByte>
 8009e54:	0003      	movs	r3, r0
 8009e56:	0019      	movs	r1, r3
 8009e58:	193b      	adds	r3, r7, r4
 8009e5a:	193a      	adds	r2, r7, r4
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	2180      	movs	r1, #128	; 0x80
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f005 fddf 	bl	800fa2c <VL53L0X_WrByte>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	0019      	movs	r1, r3
 8009e72:	193b      	adds	r3, r7, r4
 8009e74:	193a      	adds	r2, r7, r4
 8009e76:	7812      	ldrb	r2, [r2, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	701a      	strb	r2, [r3, #0]

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e80:	e016      	b.n	8009eb0 <VL53L0X_DataInit+0x1d4>
		if (Status == VL53L0X_ERROR_NONE)
 8009e82:	2457      	movs	r4, #87	; 0x57
 8009e84:	193b      	adds	r3, r7, r4
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	b25b      	sxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d114      	bne.n	8009eb8 <VL53L0X_DataInit+0x1dc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e90:	b299      	uxth	r1, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	0018      	movs	r0, r3
 8009e98:	f000 fe7e 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
 8009e9c:	0003      	movs	r3, r0
 8009e9e:	0019      	movs	r1, r3
 8009ea0:	193b      	adds	r3, r7, r4
 8009ea2:	193a      	adds	r2, r7, r4
 8009ea4:	7812      	ldrb	r2, [r2, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eac:	3301      	adds	r3, #1
 8009eae:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	dde5      	ble.n	8009e82 <VL53L0X_DataInit+0x1a6>
 8009eb6:	e000      	b.n	8009eba <VL53L0X_DataInit+0x1de>
		else
			break;
 8009eb8:	46c0      	nop			; (mov r8, r8)

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009eba:	2257      	movs	r2, #87	; 0x57
 8009ebc:	18bb      	adds	r3, r7, r2
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d108      	bne.n	8009ed8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009ec6:	18bc      	adds	r4, r7, r2
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2102      	movs	r1, #2
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f000 fe62 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
 8009ed4:	0003      	movs	r3, r0
 8009ed6:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009ed8:	2257      	movs	r2, #87	; 0x57
 8009eda:	18bb      	adds	r3, r7, r2
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b25b      	sxtb	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d108      	bne.n	8009ef6 <VL53L0X_DataInit+0x21a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009ee4:	18bc      	adds	r4, r7, r2
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2103      	movs	r1, #3
 8009eec:	0018      	movs	r0, r3
 8009eee:	f000 fe53 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
 8009ef2:	0003      	movs	r3, r0
 8009ef4:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009ef6:	2257      	movs	r2, #87	; 0x57
 8009ef8:	18bb      	adds	r3, r7, r2
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b25b      	sxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d108      	bne.n	8009f14 <VL53L0X_DataInit+0x238>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009f02:	18bc      	adds	r4, r7, r2
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	2104      	movs	r1, #4
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	f000 fe44 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
 8009f10:	0003      	movs	r3, r0
 8009f12:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009f14:	2257      	movs	r2, #87	; 0x57
 8009f16:	18bb      	adds	r3, r7, r2
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d108      	bne.n	8009f32 <VL53L0X_DataInit+0x256>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009f20:	18bc      	adds	r4, r7, r2
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	2105      	movs	r1, #5
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f000 fe35 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009f32:	2257      	movs	r2, #87	; 0x57
 8009f34:	18bb      	adds	r3, r7, r2
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <VL53L0X_DataInit+0x276>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009f3e:	18bc      	adds	r4, r7, r2
 8009f40:	2390      	movs	r3, #144	; 0x90
 8009f42:	035a      	lsls	r2, r3, #13
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2100      	movs	r1, #0
 8009f48:	0018      	movs	r0, r3
 8009f4a:	f000 ff11 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009f52:	2257      	movs	r2, #87	; 0x57
 8009f54:	18bb      	adds	r3, r7, r2
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009f5e:	18bc      	adds	r4, r7, r2
 8009f60:	2380      	movs	r3, #128	; 0x80
 8009f62:	01da      	lsls	r2, r3, #7
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2101      	movs	r1, #1
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f000 ff01 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f72:	2257      	movs	r2, #87	; 0x57
 8009f74:	18bb      	adds	r3, r7, r2
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <VL53L0X_DataInit+0x2b6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009f7e:	18bc      	adds	r4, r7, r2
 8009f80:	238c      	movs	r3, #140	; 0x8c
 8009f82:	039a      	lsls	r2, r3, #14
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2102      	movs	r1, #2
 8009f88:	0018      	movs	r0, r3
 8009f8a:	f000 fef1 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
 8009f8e:	0003      	movs	r3, r0
 8009f90:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f92:	2257      	movs	r2, #87	; 0x57
 8009f94:	18bb      	adds	r3, r7, r2
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b25b      	sxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d108      	bne.n	8009fb0 <VL53L0X_DataInit+0x2d4>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009f9e:	18bc      	adds	r4, r7, r2
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	2103      	movs	r1, #3
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f000 fee2 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
 8009fac:	0003      	movs	r3, r0
 8009fae:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fb0:	2057      	movs	r0, #87	; 0x57
 8009fb2:	183b      	adds	r3, r7, r0
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b25b      	sxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d112      	bne.n	8009fe2 <VL53L0X_DataInit+0x306>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	2398      	movs	r3, #152	; 0x98
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	21ff      	movs	r1, #255	; 0xff
 8009fc4:	54d1      	strb	r1, [r2, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009fc6:	183c      	adds	r4, r7, r0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	22ff      	movs	r2, #255	; 0xff
 8009fcc:	2101      	movs	r1, #1
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f005 fd2c 	bl	800fa2c <VL53L0X_WrByte>
 8009fd4:	0003      	movs	r3, r0
 8009fd6:	7023      	strb	r3, [r4, #0]
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	2399      	movs	r3, #153	; 0x99
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	2101      	movs	r1, #1
 8009fe0:	54d1      	strb	r1, [r2, r3]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009fe2:	2357      	movs	r3, #87	; 0x57
 8009fe4:	18fb      	adds	r3, r7, r3
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	b25b      	sxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <VL53L0X_DataInit+0x31c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	2316      	movs	r3, #22
 8009ff2:	33ff      	adds	r3, #255	; 0xff
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 8009ff8:	2357      	movs	r3, #87	; 0x57
 8009ffa:	18fb      	adds	r3, r7, r3
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	b25b      	sxtb	r3, r3
}
 800a000:	0018      	movs	r0, r3
 800a002:	46bd      	mov	sp, r7
 800a004:	b017      	add	sp, #92	; 0x5c
 800a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a008:	00016b85 	.word	0x00016b85
 800a00c:	000970a4 	.word	0x000970a4

0800a010 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b09f      	sub	sp, #124	; 0x7c
 800a014:	af02      	add	r7, sp, #8
 800a016:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a018:	246f      	movs	r4, #111	; 0x6f
 800a01a:	193b      	adds	r3, r7, r4
 800a01c:	2200      	movs	r2, #0
 800a01e:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800a020:	231c      	movs	r3, #28
 800a022:	18fb      	adds	r3, r7, r3
 800a024:	0018      	movs	r0, r3
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	001a      	movs	r2, r3
 800a02a:	2100      	movs	r1, #0
 800a02c:	f007 fa51 	bl	80114d2 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a030:	231a      	movs	r3, #26
 800a032:	18fb      	adds	r3, r7, r3
 800a034:	2200      	movs	r2, #0
 800a036:	801a      	strh	r2, [r3, #0]
	uint8_t tempbyte = 0;
 800a038:	2319      	movs	r3, #25
 800a03a:	18fb      	adds	r3, r7, r3
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
	uint8_t UseInternalTuningSettings = 0;
 800a040:	2367      	movs	r3, #103	; 0x67
 800a042:	18fb      	adds	r3, r7, r3
 800a044:	2200      	movs	r2, #0
 800a046:	701a      	strb	r2, [r3, #0]
	uint32_t count = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a04c:	2318      	movs	r3, #24
 800a04e:	18fb      	adds	r3, r7, r3
 800a050:	2200      	movs	r2, #0
 800a052:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a058:	255f      	movs	r5, #95	; 0x5f
 800a05a:	197b      	adds	r3, r7, r5
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a060:	193c      	adds	r4, r7, r4
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2101      	movs	r1, #1
 800a066:	0018      	movs	r0, r3
 800a068:	f002 ff14 	bl	800ce94 <VL53L0X_get_info_from_device>
 800a06c:	0003      	movs	r3, r0
 800a06e:	7023      	strb	r3, [r4, #0]

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	2314      	movs	r3, #20
 800a074:	33ff      	adds	r3, #255	; 0xff
 800a076:	5cd3      	ldrb	r3, [r2, r3]
 800a078:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a07a:	197b      	adds	r3, r7, r5
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	228a      	movs	r2, #138	; 0x8a
 800a080:	0052      	lsls	r2, r2, #1
 800a082:	5c8a      	ldrb	r2, [r1, r2]
 800a084:	701a      	strb	r2, [r3, #0]
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a086:	197b      	adds	r3, r7, r5
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d80e      	bhi.n	800a0ac <VL53L0X_StaticInit+0x9c>
 800a08e:	197b      	adds	r3, r7, r5
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d102      	bne.n	800a09c <VL53L0X_StaticInit+0x8c>
		((ApertureSpads == 1) && (count > 32)) ||
 800a096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a098:	2b20      	cmp	r3, #32
 800a09a:	d807      	bhi.n	800a0ac <VL53L0X_StaticInit+0x9c>
 800a09c:	235f      	movs	r3, #95	; 0x5f
 800a09e:	18fb      	adds	r3, r7, r3
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10f      	bne.n	800a0c6 <VL53L0X_StaticInit+0xb6>
		((ApertureSpads == 0) && (count > 12)))
 800a0a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a8:	2b0c      	cmp	r3, #12
 800a0aa:	d90c      	bls.n	800a0c6 <VL53L0X_StaticInit+0xb6>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a0ac:	236f      	movs	r3, #111	; 0x6f
 800a0ae:	18fc      	adds	r4, r7, r3
 800a0b0:	2318      	movs	r3, #24
 800a0b2:	18fa      	adds	r2, r7, r3
 800a0b4:	2314      	movs	r3, #20
 800a0b6:	18f9      	adds	r1, r7, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f002 f83f 	bl	800c13e <VL53L0X_perform_ref_spad_management>
 800a0c0:	0003      	movs	r3, r0
 800a0c2:	7023      	strb	r3, [r4, #0]
 800a0c4:	e00b      	b.n	800a0de <VL53L0X_StaticInit+0xce>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a0c6:	236f      	movs	r3, #111	; 0x6f
 800a0c8:	18fc      	adds	r4, r7, r3
 800a0ca:	235f      	movs	r3, #95	; 0x5f
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	781a      	ldrb	r2, [r3, #0]
 800a0d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f002 faa1 	bl	800c61c <VL53L0X_set_reference_spads>
 800a0da:	0003      	movs	r3, r0
 800a0dc:	7023      	strb	r3, [r4, #0]


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a0de:	4bb2      	ldr	r3, [pc, #712]	; (800a3a8 <VL53L0X_StaticInit+0x398>)
 800a0e0:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a0e2:	236f      	movs	r3, #111	; 0x6f
 800a0e4:	18fb      	adds	r3, r7, r3
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	b25b      	sxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d112      	bne.n	800a114 <VL53L0X_StaticInit+0x104>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a0ee:	2067      	movs	r0, #103	; 0x67
 800a0f0:	183b      	adds	r3, r7, r0
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	22a8      	movs	r2, #168	; 0xa8
 800a0f6:	0052      	lsls	r2, r2, #1
 800a0f8:	5c8a      	ldrb	r2, [r1, r2]
 800a0fa:	701a      	strb	r2, [r3, #0]
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a0fc:	183b      	adds	r3, r7, r0
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <VL53L0X_StaticInit+0x100>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	23a6      	movs	r3, #166	; 0xa6
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	58d3      	ldr	r3, [r2, r3]
 800a10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10e:	e001      	b.n	800a114 <VL53L0X_StaticInit+0x104>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a110:	4ba5      	ldr	r3, [pc, #660]	; (800a3a8 <VL53L0X_StaticInit+0x398>)
 800a112:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a114:	226f      	movs	r2, #111	; 0x6f
 800a116:	18bb      	adds	r3, r7, r2
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d108      	bne.n	800a132 <VL53L0X_StaticInit+0x122>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a120:	18bc      	adds	r4, r7, r2
 800a122:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	0011      	movs	r1, r2
 800a128:	0018      	movs	r0, r3
 800a12a:	f004 fc2d 	bl	800e988 <VL53L0X_load_tuning_settings>
 800a12e:	0003      	movs	r3, r0
 800a130:	7023      	strb	r3, [r4, #0]


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a132:	226f      	movs	r2, #111	; 0x6f
 800a134:	18bb      	adds	r3, r7, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b25b      	sxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <VL53L0X_StaticInit+0x144>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a13e:	18bc      	adds	r4, r7, r2
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	2300      	movs	r3, #0
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	2304      	movs	r3, #4
 800a148:	2200      	movs	r2, #0
 800a14a:	2100      	movs	r1, #0
 800a14c:	f001 fb3e 	bl	800b7cc <VL53L0X_SetGpioConfig>
 800a150:	0003      	movs	r3, r0
 800a152:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a154:	256f      	movs	r5, #111	; 0x6f
 800a156:	197b      	adds	r3, r7, r5
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	b25b      	sxtb	r3, r3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d123      	bne.n	800a1a8 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a160:	197c      	adds	r4, r7, r5
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	21ff      	movs	r1, #255	; 0xff
 800a168:	0018      	movs	r0, r3
 800a16a:	f005 fc5f 	bl	800fa2c <VL53L0X_WrByte>
 800a16e:	0003      	movs	r3, r0
 800a170:	7023      	strb	r3, [r4, #0]
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a172:	231a      	movs	r3, #26
 800a174:	18fa      	adds	r2, r7, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2184      	movs	r1, #132	; 0x84
 800a17a:	0018      	movs	r0, r3
 800a17c:	f005 fd3a 	bl	800fbf4 <VL53L0X_RdWord>
 800a180:	0003      	movs	r3, r0
 800a182:	0019      	movs	r1, r3
 800a184:	197b      	adds	r3, r7, r5
 800a186:	197a      	adds	r2, r7, r5
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	21ff      	movs	r1, #255	; 0xff
 800a194:	0018      	movs	r0, r3
 800a196:	f005 fc49 	bl	800fa2c <VL53L0X_WrByte>
 800a19a:	0003      	movs	r3, r0
 800a19c:	0019      	movs	r1, r3
 800a19e:	197b      	adds	r3, r7, r5
 800a1a0:	197a      	adds	r2, r7, r5
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a1a8:	236f      	movs	r3, #111	; 0x6f
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	b25b      	sxtb	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d107      	bne.n	800a1c4 <VL53L0X_StaticInit+0x1b4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a1b4:	231a      	movs	r3, #26
 800a1b6:	18fb      	adds	r3, r7, r3
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	0019      	movs	r1, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	22d4      	movs	r2, #212	; 0xd4
 800a1c2:	5099      	str	r1, [r3, r2]
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a1c4:	226f      	movs	r2, #111	; 0x6f
 800a1c6:	18bb      	adds	r3, r7, r2
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	b25b      	sxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <VL53L0X_StaticInit+0x1d4>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a1d0:	18bc      	adds	r4, r7, r2
 800a1d2:	231c      	movs	r3, #28
 800a1d4:	18fa      	adds	r2, r7, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	0011      	movs	r1, r2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 f8f5 	bl	800a3ca <VL53L0X_GetDeviceParameters>
 800a1e0:	0003      	movs	r3, r0
 800a1e2:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE) {
 800a1e4:	256f      	movs	r5, #111	; 0x6f
 800a1e6:	197b      	adds	r3, r7, r5
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	b25b      	sxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d114      	bne.n	800a21a <VL53L0X_StaticInit+0x20a>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a1f0:	197c      	adds	r4, r7, r5
 800a1f2:	2619      	movs	r6, #25
 800a1f4:	19ba      	adds	r2, r7, r6
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	0011      	movs	r1, r2
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f000 f9e4 	bl	800a5c8 <VL53L0X_GetFractionEnable>
 800a200:	0003      	movs	r3, r0
 800a202:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE)
 800a204:	197b      	adds	r3, r7, r5
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	b25b      	sxtb	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <VL53L0X_StaticInit+0x20a>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a20e:	19bb      	adds	r3, r7, r6
 800a210:	7819      	ldrb	r1, [r3, #0]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	2332      	movs	r3, #50	; 0x32
 800a216:	33ff      	adds	r3, #255	; 0xff
 800a218:	54d1      	strb	r1, [r2, r3]

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a21a:	236f      	movs	r3, #111	; 0x6f
 800a21c:	18fb      	adds	r3, r7, r3
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b25b      	sxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d108      	bne.n	800a238 <VL53L0X_StaticInit+0x228>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	221c      	movs	r2, #28
 800a22a:	18ba      	adds	r2, r7, r2
 800a22c:	3310      	adds	r3, #16
 800a22e:	0011      	movs	r1, r2
 800a230:	2240      	movs	r2, #64	; 0x40
 800a232:	0018      	movs	r0, r3
 800a234:	f007 f944 	bl	80114c0 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a238:	256f      	movs	r5, #111	; 0x6f
 800a23a:	197b      	adds	r3, r7, r5
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b25b      	sxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d114      	bne.n	800a26e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_RdByte(Dev,
 800a244:	197c      	adds	r4, r7, r5
 800a246:	2619      	movs	r6, #25
 800a248:	19ba      	adds	r2, r7, r6
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2101      	movs	r1, #1
 800a24e:	0018      	movs	r0, r3
 800a250:	f005 fc9b 	bl	800fb8a <VL53L0X_RdByte>
 800a254:	0003      	movs	r3, r0
 800a256:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a258:	197b      	adds	r3, r7, r5
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	b25b      	sxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d105      	bne.n	800a26e <VL53L0X_StaticInit+0x25e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a262:	19bb      	adds	r3, r7, r6
 800a264:	7819      	ldrb	r1, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	2398      	movs	r3, #152	; 0x98
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	54d1      	strb	r1, [r2, r3]

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a26e:	226f      	movs	r2, #111	; 0x6f
 800a270:	18bb      	adds	r3, r7, r2
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	b25b      	sxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d108      	bne.n	800a28c <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a27a:	18bc      	adds	r4, r7, r2
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	0018      	movs	r0, r3
 800a284:	f000 fa38 	bl	800a6f8 <VL53L0X_SetSequenceStepEnable>
 800a288:	0003      	movs	r3, r0
 800a28a:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a28c:	226f      	movs	r2, #111	; 0x6f
 800a28e:	18bb      	adds	r3, r7, r2
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b25b      	sxtb	r3, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	d108      	bne.n	800a2aa <VL53L0X_StaticInit+0x29a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a298:	18bc      	adds	r4, r7, r2
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	2102      	movs	r1, #2
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	f000 fa29 	bl	800a6f8 <VL53L0X_SetSequenceStepEnable>
 800a2a6:	0003      	movs	r3, r0
 800a2a8:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a2aa:	236f      	movs	r3, #111	; 0x6f
 800a2ac:	18fb      	adds	r3, r7, r3
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	b25b      	sxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <VL53L0X_StaticInit+0x2b0>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	2399      	movs	r3, #153	; 0x99
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	2103      	movs	r1, #3
 800a2be:	54d1      	strb	r1, [r2, r3]



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a2c0:	226f      	movs	r2, #111	; 0x6f
 800a2c2:	18bb      	adds	r3, r7, r2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <VL53L0X_StaticInit+0x2d0>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a2cc:	18bc      	adds	r4, r7, r2
 800a2ce:	2313      	movs	r3, #19
 800a2d0:	18fa      	adds	r2, r7, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f000 f9f0 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2e0:	236f      	movs	r3, #111	; 0x6f
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	b25b      	sxtb	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d105      	bne.n	800a2f8 <VL53L0X_StaticInit+0x2e8>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a2ec:	2313      	movs	r3, #19
 800a2ee:	18fb      	adds	r3, r7, r3
 800a2f0:	7819      	ldrb	r1, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	22e8      	movs	r2, #232	; 0xe8
 800a2f6:	5499      	strb	r1, [r3, r2]
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a2f8:	226f      	movs	r2, #111	; 0x6f
 800a2fa:	18bb      	adds	r3, r7, r2
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d109      	bne.n	800a318 <VL53L0X_StaticInit+0x308>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a304:	18bc      	adds	r4, r7, r2
 800a306:	2313      	movs	r3, #19
 800a308:	18fa      	adds	r2, r7, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2101      	movs	r1, #1
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 f9d4 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800a314:	0003      	movs	r3, r0
 800a316:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a318:	236f      	movs	r3, #111	; 0x6f
 800a31a:	18fb      	adds	r3, r7, r3
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b25b      	sxtb	r3, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d105      	bne.n	800a330 <VL53L0X_StaticInit+0x320>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a324:	2313      	movs	r3, #19
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	7819      	ldrb	r1, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	22e0      	movs	r2, #224	; 0xe0
 800a32e:	5499      	strb	r1, [r3, r2]
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a330:	226f      	movs	r2, #111	; 0x6f
 800a332:	18bb      	adds	r3, r7, r2
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b25b      	sxtb	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d109      	bne.n	800a350 <VL53L0X_StaticInit+0x340>
		Status = get_sequence_step_timeout(
 800a33c:	18bc      	adds	r4, r7, r2
 800a33e:	230c      	movs	r3, #12
 800a340:	18fa      	adds	r2, r7, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2103      	movs	r1, #3
 800a346:	0018      	movs	r0, r3
 800a348:	f003 fba8 	bl	800da9c <get_sequence_step_timeout>
 800a34c:	0003      	movs	r3, r0
 800a34e:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a350:	236f      	movs	r3, #111	; 0x6f
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b25b      	sxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d103      	bne.n	800a364 <VL53L0X_StaticInit+0x354>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	21e4      	movs	r1, #228	; 0xe4
 800a362:	505a      	str	r2, [r3, r1]
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a364:	226f      	movs	r2, #111	; 0x6f
 800a366:	18bb      	adds	r3, r7, r2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <VL53L0X_StaticInit+0x374>
		Status = get_sequence_step_timeout(
 800a370:	18bc      	adds	r4, r7, r2
 800a372:	230c      	movs	r3, #12
 800a374:	18fa      	adds	r2, r7, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2104      	movs	r1, #4
 800a37a:	0018      	movs	r0, r3
 800a37c:	f003 fb8e 	bl	800da9c <get_sequence_step_timeout>
 800a380:	0003      	movs	r3, r0
 800a382:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a384:	236f      	movs	r3, #111	; 0x6f
 800a386:	18fb      	adds	r3, r7, r3
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d103      	bne.n	800a398 <VL53L0X_StaticInit+0x388>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	21dc      	movs	r1, #220	; 0xdc
 800a396:	505a      	str	r2, [r3, r1]
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a398:	236f      	movs	r3, #111	; 0x6f
 800a39a:	18fb      	adds	r3, r7, r3
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b25b      	sxtb	r3, r3
}
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b01d      	add	sp, #116	; 0x74
 800a3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a8:	2000000c 	.word	0x2000000c

0800a3ac <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a3b4:	210f      	movs	r1, #15
 800a3b6:	187b      	adds	r3, r7, r1
 800a3b8:	229d      	movs	r2, #157	; 0x9d
 800a3ba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a3bc:	187b      	adds	r3, r7, r1
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	b25b      	sxtb	r3, r3
}
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	b004      	add	sp, #16
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a3ca:	b5b0      	push	{r4, r5, r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3d4:	250f      	movs	r5, #15
 800a3d6:	197b      	adds	r3, r7, r5
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	197c      	adds	r4, r7, r5
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	0011      	movs	r1, r2
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f000 f8db 	bl	800a5a0 <VL53L0X_GetDeviceMode>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800a3ee:	0029      	movs	r1, r5
 800a3f0:	187b      	adds	r3, r7, r1
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	b25b      	sxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <VL53L0X_GetDeviceParameters+0x46>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	001a      	movs	r2, r3
 800a400:	187c      	adds	r4, r7, r1
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0011      	movs	r1, r2
 800a406:	0018      	movs	r0, r3
 800a408:	f000 fb2d 	bl	800aa66 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a40c:	0003      	movs	r3, r0
 800a40e:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a410:	230f      	movs	r3, #15
 800a412:	18fb      	adds	r3, r7, r3
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	b25b      	sxtb	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <VL53L0X_GetDeviceParameters+0x58>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a422:	210f      	movs	r1, #15
 800a424:	187b      	adds	r3, r7, r1
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	b25b      	sxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	3310      	adds	r3, #16
 800a432:	001a      	movs	r2, r3
 800a434:	187c      	adds	r4, r7, r1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	0011      	movs	r1, r2
 800a43a:	0018      	movs	r0, r3
 800a43c:	f000 fb70 	bl	800ab20 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a440:	0003      	movs	r3, r0
 800a442:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a444:	210f      	movs	r1, #15
 800a446:	187b      	adds	r3, r7, r1
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <VL53L0X_GetDeviceParameters+0x9c>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	3314      	adds	r3, #20
 800a454:	001a      	movs	r2, r3
 800a456:	187c      	adds	r4, r7, r1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	0011      	movs	r1, r2
 800a45c:	0018      	movs	r0, r3
 800a45e:	f7ff fc23 	bl	8009ca8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a462:	0003      	movs	r3, r0
 800a464:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a466:	230f      	movs	r3, #15
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d13b      	bne.n	800a4ea <VL53L0X_GetDeviceParameters+0x120>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a472:	2300      	movs	r3, #0
 800a474:	60bb      	str	r3, [r7, #8]
 800a476:	e031      	b.n	800a4dc <VL53L0X_GetDeviceParameters+0x112>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a478:	240f      	movs	r4, #15
 800a47a:	193b      	adds	r3, r7, r4
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	b25b      	sxtb	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d12f      	bne.n	800a4e4 <VL53L0X_GetDeviceParameters+0x11a>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	b299      	uxth	r1, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	3308      	adds	r3, #8
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	18d3      	adds	r3, r2, r3
 800a492:	1d1a      	adds	r2, r3, #4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0018      	movs	r0, r3
 800a498:	f000 fcde 	bl	800ae58 <VL53L0X_GetLimitCheckValue>
 800a49c:	0003      	movs	r3, r0
 800a49e:	0019      	movs	r1, r3
 800a4a0:	193b      	adds	r3, r7, r4
 800a4a2:	193a      	adds	r2, r7, r4
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	701a      	strb	r2, [r3, #0]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a4aa:	193b      	adds	r3, r7, r4
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	b25b      	sxtb	r3, r3
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d119      	bne.n	800a4e8 <VL53L0X_GetDeviceParameters+0x11e>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	b299      	uxth	r1, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	18d2      	adds	r2, r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f000 fc24 	bl	800ad10 <VL53L0X_GetLimitCheckEnable>
 800a4c8:	0003      	movs	r3, r0
 800a4ca:	0019      	movs	r1, r3
 800a4cc:	193b      	adds	r3, r7, r4
 800a4ce:	193a      	adds	r2, r7, r4
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	60bb      	str	r3, [r7, #8]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	ddca      	ble.n	800a478 <VL53L0X_GetDeviceParameters+0xae>
 800a4e2:	e002      	b.n	800a4ea <VL53L0X_GetDeviceParameters+0x120>
				break;
 800a4e4:	46c0      	nop			; (mov r8, r8)
 800a4e6:	e000      	b.n	800a4ea <VL53L0X_GetDeviceParameters+0x120>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a4e8:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4ea:	210f      	movs	r1, #15
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <VL53L0X_GetDeviceParameters+0x142>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	333c      	adds	r3, #60	; 0x3c
 800a4fa:	001a      	movs	r2, r3
 800a4fc:	187c      	adds	r4, r7, r1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	0011      	movs	r1, r2
 800a502:	0018      	movs	r0, r3
 800a504:	f000 fd58 	bl	800afb8 <VL53L0X_GetWrapAroundCheckEnable>
 800a508:	0003      	movs	r3, r0
 800a50a:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a50c:	210f      	movs	r1, #15
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	b25b      	sxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d109      	bne.n	800a52c <VL53L0X_GetDeviceParameters+0x162>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	187c      	adds	r4, r7, r1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	0011      	movs	r1, r2
 800a522:	0018      	movs	r0, r3
 800a524:	f000 f88f 	bl	800a646 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a528:	0003      	movs	r3, r0
 800a52a:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a52c:	230f      	movs	r3, #15
 800a52e:	18fb      	adds	r3, r7, r3
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b25b      	sxtb	r3, r3
}
 800a534:	0018      	movs	r0, r3
 800a536:	46bd      	mov	sp, r7
 800a538:	b004      	add	sp, #16
 800a53a:	bdb0      	pop	{r4, r5, r7, pc}

0800a53c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	000a      	movs	r2, r1
 800a546:	1cfb      	adds	r3, r7, #3
 800a548:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a54a:	230f      	movs	r3, #15
 800a54c:	18fb      	adds	r3, r7, r3
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a552:	1cfb      	adds	r3, r7, #3
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	2215      	movs	r2, #21
 800a558:	429a      	cmp	r2, r3
 800a55a:	4192      	sbcs	r2, r2
 800a55c:	4252      	negs	r2, r2
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	2a00      	cmp	r2, #0
 800a562:	d10e      	bne.n	800a582 <VL53L0X_SetDeviceMode+0x46>
 800a564:	2201      	movs	r2, #1
 800a566:	409a      	lsls	r2, r3
 800a568:	0013      	movs	r3, r2
 800a56a:	4a0c      	ldr	r2, [pc, #48]	; (800a59c <VL53L0X_SetDeviceMode+0x60>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	1e5a      	subs	r2, r3, #1
 800a570:	4193      	sbcs	r3, r2
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <VL53L0X_SetDeviceMode+0x46>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	1cfa      	adds	r2, r7, #3
 800a57c:	7812      	ldrb	r2, [r2, #0]
 800a57e:	741a      	strb	r2, [r3, #16]
		break;
 800a580:	e003      	b.n	800a58a <VL53L0X_SetDeviceMode+0x4e>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a582:	230f      	movs	r3, #15
 800a584:	18fb      	adds	r3, r7, r3
 800a586:	22f8      	movs	r2, #248	; 0xf8
 800a588:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a58a:	230f      	movs	r3, #15
 800a58c:	18fb      	adds	r3, r7, r3
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	b25b      	sxtb	r3, r3
}
 800a592:	0018      	movs	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	b004      	add	sp, #16
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	46c0      	nop			; (mov r8, r8)
 800a59c:	0030000b 	.word	0x0030000b

0800a5a0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5aa:	210f      	movs	r1, #15
 800a5ac:	187b      	adds	r3, r7, r1
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	7c1a      	ldrb	r2, [r3, #16]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a5ba:	187b      	adds	r3, r7, r1
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	b25b      	sxtb	r3, r3
}
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	b004      	add	sp, #16
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a5c8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5d2:	250f      	movs	r5, #15
 800a5d4:	197b      	adds	r3, r7, r5
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a5da:	197c      	adds	r4, r7, r5
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2109      	movs	r1, #9
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f005 fad1 	bl	800fb8a <VL53L0X_RdByte>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800a5ec:	197b      	adds	r3, r7, r5
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <VL53L0X_GetFractionEnable+0x3c>
		*pEnabled = (*pEnabled & 1);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a604:	230f      	movs	r3, #15
 800a606:	18fb      	adds	r3, r7, r3
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	b25b      	sxtb	r3, r3
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	b004      	add	sp, #16
 800a612:	bdb0      	pop	{r4, r5, r7, pc}

0800a614 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a614:	b5b0      	push	{r4, r5, r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a61e:	250f      	movs	r5, #15
 800a620:	197b      	adds	r3, r7, r5
 800a622:	2200      	movs	r2, #0
 800a624:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a626:	197c      	adds	r4, r7, r5
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	0011      	movs	r1, r2
 800a62e:	0018      	movs	r0, r3
 800a630:	f003 ffcc 	bl	800e5cc <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a634:	0003      	movs	r3, r0
 800a636:	7023      	strb	r3, [r4, #0]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a638:	197b      	adds	r3, r7, r5
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	b25b      	sxtb	r3, r3
}
 800a63e:	0018      	movs	r0, r3
 800a640:	46bd      	mov	sp, r7
 800a642:	b004      	add	sp, #16
 800a644:	bdb0      	pop	{r4, r5, r7, pc}

0800a646 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a646:	b5b0      	push	{r4, r5, r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a650:	250f      	movs	r5, #15
 800a652:	197b      	adds	r3, r7, r5
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a658:	197c      	adds	r4, r7, r5
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0011      	movs	r1, r2
 800a660:	0018      	movs	r0, r3
 800a662:	f004 f8bf 	bl	800e7e4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a666:	0003      	movs	r3, r0
 800a668:	7023      	strb	r3, [r4, #0]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a66a:	197b      	adds	r3, r7, r5
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b25b      	sxtb	r3, r3
}
 800a670:	0018      	movs	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	b004      	add	sp, #16
 800a676:	bdb0      	pop	{r4, r5, r7, pc}

0800a678 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a678:	b5b0      	push	{r4, r5, r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	0008      	movs	r0, r1
 800a682:	0011      	movs	r1, r2
 800a684:	1cfb      	adds	r3, r7, #3
 800a686:	1c02      	adds	r2, r0, #0
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	1cbb      	adds	r3, r7, #2
 800a68c:	1c0a      	adds	r2, r1, #0
 800a68e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a690:	250f      	movs	r5, #15
 800a692:	197b      	adds	r3, r7, r5
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a698:	197c      	adds	r4, r7, r5
 800a69a:	1cbb      	adds	r3, r7, #2
 800a69c:	781a      	ldrb	r2, [r3, #0]
 800a69e:	1cfb      	adds	r3, r7, #3
 800a6a0:	7819      	ldrb	r1, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f003 fc4b 	bl	800df40 <VL53L0X_set_vcsel_pulse_period>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	7023      	strb	r3, [r4, #0]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ae:	197b      	adds	r3, r7, r5
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	b25b      	sxtb	r3, r3
}
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	b004      	add	sp, #16
 800a6ba:	bdb0      	pop	{r4, r5, r7, pc}

0800a6bc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a6bc:	b5b0      	push	{r4, r5, r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	200b      	movs	r0, #11
 800a6c8:	183b      	adds	r3, r7, r0
 800a6ca:	1c0a      	adds	r2, r1, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6ce:	2517      	movs	r5, #23
 800a6d0:	197b      	adds	r3, r7, r5
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a6d6:	197c      	adds	r4, r7, r5
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	183b      	adds	r3, r7, r0
 800a6dc:	7819      	ldrb	r1, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f003 ff2a 	bl	800e53a <VL53L0X_get_vcsel_pulse_period>
 800a6e6:	0003      	movs	r3, r0
 800a6e8:	7023      	strb	r3, [r4, #0]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ea:	197b      	adds	r3, r7, r5
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b25b      	sxtb	r3, r3
}
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	b006      	add	sp, #24
 800a6f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6f8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	0008      	movs	r0, r1
 800a702:	0011      	movs	r1, r2
 800a704:	1cfb      	adds	r3, r7, #3
 800a706:	1c02      	adds	r2, r0, #0
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	1cbb      	adds	r3, r7, #2
 800a70c:	1c0a      	adds	r2, r1, #0
 800a70e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a710:	2517      	movs	r5, #23
 800a712:	197b      	adds	r3, r7, r5
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800a718:	210f      	movs	r1, #15
 800a71a:	187b      	adds	r3, r7, r1
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfigNew = 0;
 800a720:	2316      	movs	r3, #22
 800a722:	18fb      	adds	r3, r7, r3
 800a724:	2200      	movs	r2, #0
 800a726:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a728:	197c      	adds	r4, r7, r5
 800a72a:	000e      	movs	r6, r1
 800a72c:	187a      	adds	r2, r7, r1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2101      	movs	r1, #1
 800a732:	0018      	movs	r0, r3
 800a734:	f005 fa29 	bl	800fb8a <VL53L0X_RdByte>
 800a738:	0003      	movs	r3, r0
 800a73a:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a73c:	2316      	movs	r3, #22
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	19ba      	adds	r2, r7, r6
 800a742:	7812      	ldrb	r2, [r2, #0]
 800a744:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a746:	197b      	adds	r3, r7, r5
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d000      	beq.n	800a752 <VL53L0X_SetSequenceStepEnable+0x5a>
 800a750:	e070      	b.n	800a834 <VL53L0X_SetSequenceStepEnable+0x13c>
		if (SequenceStepEnabled == 1) {
 800a752:	1cbb      	adds	r3, r7, #2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d136      	bne.n	800a7c8 <VL53L0X_SetSequenceStepEnable+0xd0>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a75a:	1cfb      	adds	r3, r7, #3
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d82d      	bhi.n	800a7be <VL53L0X_SetSequenceStepEnable+0xc6>
 800a762:	009a      	lsls	r2, r3, #2
 800a764:	4b52      	ldr	r3, [pc, #328]	; (800a8b0 <VL53L0X_SetSequenceStepEnable+0x1b8>)
 800a766:	18d3      	adds	r3, r2, r3
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a76c:	2216      	movs	r2, #22
 800a76e:	18bb      	adds	r3, r7, r2
 800a770:	18ba      	adds	r2, r7, r2
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	2110      	movs	r1, #16
 800a776:	430a      	orrs	r2, r1
 800a778:	701a      	strb	r2, [r3, #0]
				break;
 800a77a:	e05c      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a77c:	2216      	movs	r2, #22
 800a77e:	18bb      	adds	r3, r7, r2
 800a780:	18ba      	adds	r2, r7, r2
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	2128      	movs	r1, #40	; 0x28
 800a786:	430a      	orrs	r2, r1
 800a788:	701a      	strb	r2, [r3, #0]
				break;
 800a78a:	e054      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a78c:	2216      	movs	r2, #22
 800a78e:	18bb      	adds	r3, r7, r2
 800a790:	18ba      	adds	r2, r7, r2
 800a792:	7812      	ldrb	r2, [r2, #0]
 800a794:	2104      	movs	r1, #4
 800a796:	430a      	orrs	r2, r1
 800a798:	701a      	strb	r2, [r3, #0]
				break;
 800a79a:	e04c      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a79c:	2216      	movs	r2, #22
 800a79e:	18bb      	adds	r3, r7, r2
 800a7a0:	18ba      	adds	r2, r7, r2
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	2140      	movs	r1, #64	; 0x40
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	701a      	strb	r2, [r3, #0]
				break;
 800a7aa:	e044      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a7ac:	2216      	movs	r2, #22
 800a7ae:	18bb      	adds	r3, r7, r2
 800a7b0:	18ba      	adds	r2, r7, r2
 800a7b2:	7812      	ldrb	r2, [r2, #0]
 800a7b4:	2180      	movs	r1, #128	; 0x80
 800a7b6:	4249      	negs	r1, r1
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	701a      	strb	r2, [r3, #0]
				break;
 800a7bc:	e03b      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7be:	2317      	movs	r3, #23
 800a7c0:	18fb      	adds	r3, r7, r3
 800a7c2:	22fc      	movs	r2, #252	; 0xfc
 800a7c4:	701a      	strb	r2, [r3, #0]
 800a7c6:	e036      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a7c8:	1cfb      	adds	r3, r7, #3
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d82c      	bhi.n	800a82a <VL53L0X_SetSequenceStepEnable+0x132>
 800a7d0:	009a      	lsls	r2, r3, #2
 800a7d2:	4b38      	ldr	r3, [pc, #224]	; (800a8b4 <VL53L0X_SetSequenceStepEnable+0x1bc>)
 800a7d4:	18d3      	adds	r3, r2, r3
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a7da:	2216      	movs	r2, #22
 800a7dc:	18bb      	adds	r3, r7, r2
 800a7de:	18ba      	adds	r2, r7, r2
 800a7e0:	7812      	ldrb	r2, [r2, #0]
 800a7e2:	2110      	movs	r1, #16
 800a7e4:	438a      	bics	r2, r1
 800a7e6:	701a      	strb	r2, [r3, #0]
				break;
 800a7e8:	e025      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a7ea:	2216      	movs	r2, #22
 800a7ec:	18bb      	adds	r3, r7, r2
 800a7ee:	18ba      	adds	r2, r7, r2
 800a7f0:	7812      	ldrb	r2, [r2, #0]
 800a7f2:	2128      	movs	r1, #40	; 0x28
 800a7f4:	438a      	bics	r2, r1
 800a7f6:	701a      	strb	r2, [r3, #0]
				break;
 800a7f8:	e01d      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a7fa:	2216      	movs	r2, #22
 800a7fc:	18bb      	adds	r3, r7, r2
 800a7fe:	18ba      	adds	r2, r7, r2
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	2104      	movs	r1, #4
 800a804:	438a      	bics	r2, r1
 800a806:	701a      	strb	r2, [r3, #0]
				break;
 800a808:	e015      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a80a:	2216      	movs	r2, #22
 800a80c:	18bb      	adds	r3, r7, r2
 800a80e:	18ba      	adds	r2, r7, r2
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	2140      	movs	r1, #64	; 0x40
 800a814:	438a      	bics	r2, r1
 800a816:	701a      	strb	r2, [r3, #0]
				break;
 800a818:	e00d      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a81a:	2216      	movs	r2, #22
 800a81c:	18bb      	adds	r3, r7, r2
 800a81e:	18ba      	adds	r2, r7, r2
 800a820:	7812      	ldrb	r2, [r2, #0]
 800a822:	217f      	movs	r1, #127	; 0x7f
 800a824:	400a      	ands	r2, r1
 800a826:	701a      	strb	r2, [r3, #0]
				break;
 800a828:	e005      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a82a:	2317      	movs	r3, #23
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	22fc      	movs	r2, #252	; 0xfc
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	e000      	b.n	800a836 <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		}
 800a834:	46c0      	nop			; (mov r8, r8)
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a836:	230f      	movs	r3, #15
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2116      	movs	r1, #22
 800a83e:	187a      	adds	r2, r7, r1
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d02b      	beq.n	800a89e <VL53L0X_SetSequenceStepEnable+0x1a6>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a846:	2217      	movs	r2, #23
 800a848:	18bb      	adds	r3, r7, r2
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d109      	bne.n	800a866 <VL53L0X_SetSequenceStepEnable+0x16e>
			Status = VL53L0X_WrByte(Dev,
 800a852:	18bc      	adds	r4, r7, r2
 800a854:	187b      	adds	r3, r7, r1
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2101      	movs	r1, #1
 800a85c:	0018      	movs	r0, r3
 800a85e:	f005 f8e5 	bl	800fa2c <VL53L0X_WrByte>
 800a862:	0003      	movs	r3, r0
 800a864:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a866:	2317      	movs	r3, #23
 800a868:	18fb      	adds	r3, r7, r3
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d106      	bne.n	800a880 <VL53L0X_SetSequenceStepEnable+0x188>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	2316      	movs	r3, #22
 800a876:	18f9      	adds	r1, r7, r3
 800a878:	2398      	movs	r3, #152	; 0x98
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	7809      	ldrb	r1, [r1, #0]
 800a87e:	54d1      	strb	r1, [r2, r3]


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a880:	2317      	movs	r3, #23
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	b25b      	sxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d108      	bne.n	800a89e <VL53L0X_SetSequenceStepEnable+0x1a6>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	0011      	movs	r1, r2
 800a898:	0018      	movs	r0, r3
 800a89a:	f7ff febb 	bl	800a614 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a89e:	2317      	movs	r3, #23
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	b25b      	sxtb	r3, r3
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b007      	add	sp, #28
 800a8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	08014ff4 	.word	0x08014ff4
 800a8b4:	08015008 	.word	0x08015008

0800a8b8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	0008      	movs	r0, r1
 800a8c2:	0011      	movs	r1, r2
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	240b      	movs	r4, #11
 800a8c8:	193b      	adds	r3, r7, r4
 800a8ca:	1c02      	adds	r2, r0, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	230a      	movs	r3, #10
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	1c0a      	adds	r2, r1, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8d6:	2317      	movs	r3, #23
 800a8d8:	18fb      	adds	r3, r7, r3
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
	*pSequenceStepEnabled = 0;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a8e4:	193b      	adds	r3, r7, r4
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d838      	bhi.n	800a95e <sequence_step_enabled+0xa6>
 800a8ec:	009a      	lsls	r2, r3, #2
 800a8ee:	4b22      	ldr	r3, [pc, #136]	; (800a978 <sequence_step_enabled+0xc0>)
 800a8f0:	18d3      	adds	r3, r2, r3
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	469f      	mov	pc, r3
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a8f6:	230a      	movs	r3, #10
 800a8f8:	18fb      	adds	r3, r7, r3
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	111b      	asrs	r3, r3, #4
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2201      	movs	r2, #1
 800a902:	4013      	ands	r3, r2
 800a904:	b2da      	uxtb	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	701a      	strb	r2, [r3, #0]
		break;
 800a90a:	e02c      	b.n	800a966 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a90c:	230a      	movs	r3, #10
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	10db      	asrs	r3, r3, #3
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2201      	movs	r2, #1
 800a918:	4013      	ands	r3, r2
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	701a      	strb	r2, [r3, #0]
		break;
 800a920:	e021      	b.n	800a966 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a922:	230a      	movs	r3, #10
 800a924:	18fb      	adds	r3, r7, r3
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	109b      	asrs	r3, r3, #2
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2201      	movs	r2, #1
 800a92e:	4013      	ands	r3, r2
 800a930:	b2da      	uxtb	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	701a      	strb	r2, [r3, #0]
		break;
 800a936:	e016      	b.n	800a966 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a938:	230a      	movs	r3, #10
 800a93a:	18fb      	adds	r3, r7, r3
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	119b      	asrs	r3, r3, #6
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2201      	movs	r2, #1
 800a944:	4013      	ands	r3, r2
 800a946:	b2da      	uxtb	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	701a      	strb	r2, [r3, #0]
		break;
 800a94c:	e00b      	b.n	800a966 <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a94e:	230a      	movs	r3, #10
 800a950:	18fb      	adds	r3, r7, r3
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	09db      	lsrs	r3, r3, #7
 800a956:	b2da      	uxtb	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	701a      	strb	r2, [r3, #0]
		break;
 800a95c:	e003      	b.n	800a966 <sequence_step_enabled+0xae>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a95e:	2317      	movs	r3, #23
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	22fc      	movs	r2, #252	; 0xfc
 800a964:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a966:	2317      	movs	r3, #23
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b25b      	sxtb	r3, r3
}
 800a96e:	0018      	movs	r0, r3
 800a970:	46bd      	mov	sp, r7
 800a972:	b007      	add	sp, #28
 800a974:	bd90      	pop	{r4, r7, pc}
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	0801501c 	.word	0x0801501c

0800a97c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a986:	250f      	movs	r5, #15
 800a988:	197b      	adds	r3, r7, r5
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800a98e:	260e      	movs	r6, #14
 800a990:	19bb      	adds	r3, r7, r6
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a996:	197c      	adds	r4, r7, r5
 800a998:	19ba      	adds	r2, r7, r6
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2101      	movs	r1, #1
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f005 f8f3 	bl	800fb8a <VL53L0X_RdByte>
 800a9a4:	0003      	movs	r3, r0
 800a9a6:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9a8:	197b      	adds	r3, r7, r5
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	b25b      	sxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <VL53L0X_GetSequenceStepEnables+0x4a>
		Status = sequence_step_enabled(Dev,
 800a9b2:	19bb      	adds	r3, r7, r6
 800a9b4:	781a      	ldrb	r2, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	197c      	adds	r4, r7, r5
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	2100      	movs	r1, #0
 800a9be:	f7ff ff7b 	bl	800a8b8 <sequence_step_enabled>
 800a9c2:	0003      	movs	r3, r0
 800a9c4:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a9c6:	210f      	movs	r1, #15
 800a9c8:	187b      	adds	r3, r7, r1
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10b      	bne.n	800a9ea <VL53L0X_GetSequenceStepEnables+0x6e>
		Status = sequence_step_enabled(Dev,
 800a9d2:	230e      	movs	r3, #14
 800a9d4:	18fb      	adds	r3, r7, r3
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	3302      	adds	r3, #2
 800a9dc:	187c      	adds	r4, r7, r1
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	f7ff ff69 	bl	800a8b8 <sequence_step_enabled>
 800a9e6:	0003      	movs	r3, r0
 800a9e8:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a9ea:	210f      	movs	r1, #15
 800a9ec:	187b      	adds	r3, r7, r1
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b25b      	sxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10b      	bne.n	800aa0e <VL53L0X_GetSequenceStepEnables+0x92>
		Status = sequence_step_enabled(Dev,
 800a9f6:	230e      	movs	r3, #14
 800a9f8:	18fb      	adds	r3, r7, r3
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	187c      	adds	r4, r7, r1
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	2102      	movs	r1, #2
 800aa06:	f7ff ff57 	bl	800a8b8 <sequence_step_enabled>
 800aa0a:	0003      	movs	r3, r0
 800aa0c:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa0e:	210f      	movs	r1, #15
 800aa10:	187b      	adds	r3, r7, r1
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b25b      	sxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <VL53L0X_GetSequenceStepEnables+0xb6>
		Status = sequence_step_enabled(Dev,
 800aa1a:	230e      	movs	r3, #14
 800aa1c:	18fb      	adds	r3, r7, r3
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3303      	adds	r3, #3
 800aa24:	187c      	adds	r4, r7, r1
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	2103      	movs	r1, #3
 800aa2a:	f7ff ff45 	bl	800a8b8 <sequence_step_enabled>
 800aa2e:	0003      	movs	r3, r0
 800aa30:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800aa32:	210f      	movs	r1, #15
 800aa34:	187b      	adds	r3, r7, r1
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b25b      	sxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <VL53L0X_GetSequenceStepEnables+0xda>
		Status = sequence_step_enabled(Dev,
 800aa3e:	230e      	movs	r3, #14
 800aa40:	18fb      	adds	r3, r7, r3
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	3304      	adds	r3, #4
 800aa48:	187c      	adds	r4, r7, r1
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	2104      	movs	r1, #4
 800aa4e:	f7ff ff33 	bl	800a8b8 <sequence_step_enabled>
 800aa52:	0003      	movs	r3, r0
 800aa54:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa56:	230f      	movs	r3, #15
 800aa58:	18fb      	adds	r3, r7, r3
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b25b      	sxtb	r3, r3
}
 800aa5e:	0018      	movs	r0, r3
 800aa60:	46bd      	mov	sp, r7
 800aa62:	b005      	add	sp, #20
 800aa64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa66 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800aa66:	b5b0      	push	{r4, r5, r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa70:	250f      	movs	r5, #15
 800aa72:	197b      	adds	r3, r7, r5
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800aa78:	197c      	adds	r4, r7, r5
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	18fa      	adds	r2, r7, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	21f8      	movs	r1, #248	; 0xf8
 800aa82:	0018      	movs	r0, r3
 800aa84:	f005 f8b6 	bl	800fbf4 <VL53L0X_RdWord>
 800aa88:	0003      	movs	r3, r0
 800aa8a:	7023      	strb	r3, [r4, #0]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800aa8c:	197b      	adds	r3, r7, r5
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d109      	bne.n	800aaaa <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x44>
		Status = VL53L0X_RdDWord(Dev,
 800aa96:	197c      	adds	r4, r7, r5
 800aa98:	2308      	movs	r3, #8
 800aa9a:	18fa      	adds	r2, r7, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2104      	movs	r1, #4
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f005 f8e9 	bl	800fc78 <VL53L0X_RdDWord>
 800aaa6:	0003      	movs	r3, r0
 800aaa8:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aaaa:	230f      	movs	r3, #15
 800aaac:	18fb      	adds	r3, r7, r3
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	b25b      	sxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d113      	bne.n	800aade <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x78>
		if (osc_calibrate_val != 0) {
 800aab6:	210c      	movs	r1, #12
 800aab8:	187b      	adds	r3, r7, r1
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00a      	beq.n	800aad6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x70>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	187b      	adds	r3, r7, r1
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	0019      	movs	r1, r3
 800aac8:	0010      	movs	r0, r2
 800aaca:	f7f5 fb39 	bl	8000140 <__udivsi3>
 800aace:	0003      	movs	r3, r0
 800aad0:	001a      	movs	r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aade:	230f      	movs	r3, #15
 800aae0:	18fb      	adds	r3, r7, r3
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b25b      	sxtb	r3, r3
}
 800aae6:	0018      	movs	r0, r3
 800aae8:	46bd      	mov	sp, r7
 800aaea:	b004      	add	sp, #16
 800aaec:	bdb0      	pop	{r4, r5, r7, pc}

0800aaee <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaf8:	210f      	movs	r1, #15
 800aafa:	187b      	adds	r3, r7, r1
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800ab00:	200e      	movs	r0, #14
 800ab02:	183b      	adds	r3, r7, r0
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	7f12      	ldrb	r2, [r2, #28]
 800ab08:	701a      	strb	r2, [r3, #0]
	*pXTalkCompensationEnable = Temp8;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	183a      	adds	r2, r7, r0
 800ab0e:	7812      	ldrb	r2, [r2, #0]
 800ab10:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ab12:	187b      	adds	r3, r7, r1
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	b25b      	sxtb	r3, r3
}
 800ab18:	0018      	movs	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	b004      	add	sp, #16
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab2a:	2517      	movs	r5, #23
 800ab2c:	197b      	adds	r3, r7, r5
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800ab32:	197c      	adds	r4, r7, r5
 800ab34:	260e      	movs	r6, #14
 800ab36:	19ba      	adds	r2, r7, r6
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2120      	movs	r1, #32
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f005 f859 	bl	800fbf4 <VL53L0X_RdWord>
 800ab42:	0003      	movs	r3, r0
 800ab44:	7023      	strb	r3, [r4, #0]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800ab46:	197b      	adds	r3, r7, r5
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	b25b      	sxtb	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d11b      	bne.n	800ab88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
		if (Value == 0) {
 800ab50:	19bb      	adds	r3, r7, r6
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d109      	bne.n	800ab6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x4c>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	771a      	strb	r2, [r3, #28]
 800ab6a:	e00d      	b.n	800ab88 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800ab6c:	230e      	movs	r3, #14
 800ab6e:	18fb      	adds	r3, r7, r3
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ab88:	2317      	movs	r3, #23
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	b25b      	sxtb	r3, r3
}
 800ab90:	0018      	movs	r0, r3
 800ab92:	46bd      	mov	sp, r7
 800ab94:	b007      	add	sp, #28
 800ab96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab98 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800ab98:	b590      	push	{r4, r7, lr}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	0008      	movs	r0, r1
 800aba2:	0011      	movs	r1, r2
 800aba4:	1cbb      	adds	r3, r7, #2
 800aba6:	1c02      	adds	r2, r0, #0
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	1c7b      	adds	r3, r7, #1
 800abac:	1c0a      	adds	r2, r1, #0
 800abae:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abb0:	2117      	movs	r1, #23
 800abb2:	187b      	adds	r3, r7, r1
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800abbc:	230f      	movs	r3, #15
 800abbe:	18fb      	adds	r3, r7, r3
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
	uint8_t LimitCheckDisable = 0;
 800abc4:	230e      	movs	r3, #14
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800abcc:	1cbb      	adds	r3, r7, #2
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	2b05      	cmp	r3, #5
 800abd2:	d903      	bls.n	800abdc <VL53L0X_SetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abd4:	187b      	adds	r3, r7, r1
 800abd6:	22fc      	movs	r2, #252	; 0xfc
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e074      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>
	} else {
		if (LimitCheckEnable == 0) {
 800abdc:	1c7b      	adds	r3, r7, #1
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <VL53L0X_SetLimitCheckEnable+0x62>
			TempFix1616 = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800abe8:	230f      	movs	r3, #15
 800abea:	18fb      	adds	r3, r7, r3
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]
			LimitCheckDisable = 1;
 800abf0:	230e      	movs	r3, #14
 800abf2:	18fb      	adds	r3, r7, r3
 800abf4:	2201      	movs	r2, #1
 800abf6:	701a      	strb	r2, [r3, #0]
 800abf8:	e010      	b.n	800ac1c <VL53L0X_SetLimitCheckEnable+0x84>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800abfa:	1cbb      	adds	r3, r7, #2
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	330c      	adds	r3, #12
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	18d3      	adds	r3, r2, r3
 800ac06:	3304      	adds	r3, #4
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800ac0c:	230e      	movs	r3, #14
 800ac0e:	18fb      	adds	r3, r7, r3
 800ac10:	2200      	movs	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800ac14:	230f      	movs	r3, #15
 800ac16:	18fb      	adds	r3, r7, r3
 800ac18:	2201      	movs	r2, #1
 800ac1a:	701a      	strb	r2, [r3, #0]
		}

		switch (LimitCheckId) {
 800ac1c:	1cbb      	adds	r3, r7, #2
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	2b05      	cmp	r3, #5
 800ac22:	d84c      	bhi.n	800acbe <VL53L0X_SetLimitCheckEnable+0x126>
 800ac24:	009a      	lsls	r2, r3, #2
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <VL53L0X_SetLimitCheckEnable+0x174>)
 800ac28:	18d3      	adds	r3, r2, r3
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	220f      	movs	r2, #15
 800ac32:	18ba      	adds	r2, r7, r2
 800ac34:	2128      	movs	r1, #40	; 0x28
 800ac36:	7812      	ldrb	r2, [r2, #0]
 800ac38:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800ac3a:	e044      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	2317      	movs	r3, #23
 800ac44:	18fc      	adds	r4, r7, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2144      	movs	r1, #68	; 0x44
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f004 ff1e 	bl	800fa8c <VL53L0X_WrWord>
 800ac50:	0003      	movs	r3, r0
 800ac52:	7023      	strb	r3, [r4, #0]

			break;
 800ac54:	e037      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	220f      	movs	r2, #15
 800ac5a:	18ba      	adds	r2, r7, r2
 800ac5c:	212a      	movs	r1, #42	; 0x2a
 800ac5e:	7812      	ldrb	r2, [r2, #0]
 800ac60:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ac62:	e030      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	220f      	movs	r2, #15
 800ac68:	18ba      	adds	r2, r7, r2
 800ac6a:	212b      	movs	r1, #43	; 0x2b
 800ac6c:	7812      	ldrb	r2, [r2, #0]
 800ac6e:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800ac70:	e029      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800ac72:	210d      	movs	r1, #13
 800ac74:	187a      	adds	r2, r7, r1
 800ac76:	230e      	movs	r3, #14
 800ac78:	18fb      	adds	r3, r7, r3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	18db      	adds	r3, r3, r3
 800ac7e:	7013      	strb	r3, [r2, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800ac80:	2317      	movs	r3, #23
 800ac82:	18fc      	adds	r4, r7, r3
 800ac84:	187b      	adds	r3, r7, r1
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	22fe      	movs	r2, #254	; 0xfe
 800ac8c:	2160      	movs	r1, #96	; 0x60
 800ac8e:	f004 ff35 	bl	800fafc <VL53L0X_UpdateByte>
 800ac92:	0003      	movs	r3, r0
 800ac94:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800ac96:	e016      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800ac98:	210d      	movs	r1, #13
 800ac9a:	187b      	adds	r3, r7, r1
 800ac9c:	220e      	movs	r2, #14
 800ac9e:	18ba      	adds	r2, r7, r2
 800aca0:	7812      	ldrb	r2, [r2, #0]
 800aca2:	0112      	lsls	r2, r2, #4
 800aca4:	701a      	strb	r2, [r3, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800aca6:	2317      	movs	r3, #23
 800aca8:	18fc      	adds	r4, r7, r3
 800acaa:	187b      	adds	r3, r7, r1
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	22ef      	movs	r2, #239	; 0xef
 800acb2:	2160      	movs	r1, #96	; 0x60
 800acb4:	f004 ff22 	bl	800fafc <VL53L0X_UpdateByte>
 800acb8:	0003      	movs	r3, r0
 800acba:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800acbc:	e003      	b.n	800acc6 <VL53L0X_SetLimitCheckEnable+0x12e>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acbe:	2317      	movs	r3, #23
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	22fc      	movs	r2, #252	; 0xfc
 800acc4:	701a      	strb	r2, [r3, #0]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800acc6:	2317      	movs	r3, #23
 800acc8:	18fb      	adds	r3, r7, r3
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	b25b      	sxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d114      	bne.n	800acfc <VL53L0X_SetLimitCheckEnable+0x164>
		if (LimitCheckEnable == 0) {
 800acd2:	1c7b      	adds	r3, r7, #1
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d108      	bne.n	800acec <VL53L0X_SetLimitCheckEnable+0x154>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800acda:	1cbb      	adds	r3, r7, #2
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	2128      	movs	r1, #40	; 0x28
 800ace2:	18d3      	adds	r3, r2, r3
 800ace4:	185b      	adds	r3, r3, r1
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	e007      	b.n	800acfc <VL53L0X_SetLimitCheckEnable+0x164>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800acec:	1cbb      	adds	r3, r7, #2
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	2128      	movs	r1, #40	; 0x28
 800acf4:	18d3      	adds	r3, r2, r3
 800acf6:	185b      	adds	r3, r3, r1
 800acf8:	2201      	movs	r2, #1
 800acfa:	701a      	strb	r2, [r3, #0]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800acfc:	2317      	movs	r3, #23
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	b25b      	sxtb	r3, r3
}
 800ad04:	0018      	movs	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	b007      	add	sp, #28
 800ad0a:	bd90      	pop	{r4, r7, pc}
 800ad0c:	08015030 	.word	0x08015030

0800ad10 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ad10:	b590      	push	{r4, r7, lr}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	200a      	movs	r0, #10
 800ad1c:	183b      	adds	r3, r7, r0
 800ad1e:	1c0a      	adds	r2, r1, #0
 800ad20:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad22:	2117      	movs	r1, #23
 800ad24:	187b      	adds	r3, r7, r1
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ad2a:	183b      	adds	r3, r7, r0
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d906      	bls.n	800ad40 <VL53L0X_GetLimitCheckEnable+0x30>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad32:	187b      	adds	r3, r7, r1
 800ad34:	22fc      	movs	r2, #252	; 0xfc
 800ad36:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	e00e      	b.n	800ad5e <VL53L0X_GetLimitCheckEnable+0x4e>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ad40:	230a      	movs	r3, #10
 800ad42:	18fb      	adds	r3, r7, r3
 800ad44:	881a      	ldrh	r2, [r3, #0]
 800ad46:	2416      	movs	r4, #22
 800ad48:	193b      	adds	r3, r7, r4
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	2028      	movs	r0, #40	; 0x28
 800ad4e:	188a      	adds	r2, r1, r2
 800ad50:	1812      	adds	r2, r2, r0
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	193a      	adds	r2, r7, r4
 800ad5a:	7812      	ldrb	r2, [r2, #0]
 800ad5c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad5e:	2317      	movs	r3, #23
 800ad60:	18fb      	adds	r3, r7, r3
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b25b      	sxtb	r3, r3
}
 800ad66:	0018      	movs	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b007      	add	sp, #28
 800ad6c:	bd90      	pop	{r4, r7, pc}
	...

0800ad70 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800ad70:	b5b0      	push	{r4, r5, r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	240a      	movs	r4, #10
 800ad7c:	193b      	adds	r3, r7, r4
 800ad7e:	1c0a      	adds	r2, r1, #0
 800ad80:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad82:	2317      	movs	r3, #23
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800ad8a:	193b      	adds	r3, r7, r4
 800ad8c:	881a      	ldrh	r2, [r3, #0]
 800ad8e:	2516      	movs	r5, #22
 800ad90:	197b      	adds	r3, r7, r5
 800ad92:	68f9      	ldr	r1, [r7, #12]
 800ad94:	2028      	movs	r0, #40	; 0x28
 800ad96:	188a      	adds	r2, r1, r2
 800ad98:	1812      	adds	r2, r2, r0
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	701a      	strb	r2, [r3, #0]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800ad9e:	197b      	adds	r3, r7, r5
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d109      	bne.n	800adba <VL53L0X_SetLimitCheckValue+0x4a>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ada6:	193b      	adds	r3, r7, r4
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	330c      	adds	r3, #12
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	18d3      	adds	r3, r2, r3
 800adb2:	3304      	adds	r3, #4
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	e043      	b.n	800ae42 <VL53L0X_SetLimitCheckValue+0xd2>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800adba:	230a      	movs	r3, #10
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	2b05      	cmp	r3, #5
 800adc2:	d82a      	bhi.n	800ae1a <VL53L0X_SetLimitCheckValue+0xaa>
 800adc4:	009a      	lsls	r2, r3, #2
 800adc6:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <VL53L0X_SetLimitCheckValue+0xe4>)
 800adc8:	18d3      	adds	r3, r2, r3
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800add4:	e025      	b.n	800ae22 <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800adda:	b29a      	uxth	r2, r3
 800addc:	2317      	movs	r3, #23
 800adde:	18fc      	adds	r4, r7, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2144      	movs	r1, #68	; 0x44
 800ade4:	0018      	movs	r0, r3
 800ade6:	f004 fe51 	bl	800fa8c <VL53L0X_WrWord>
 800adea:	0003      	movs	r3, r0
 800adec:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800adee:	e018      	b.n	800ae22 <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800adf6:	e014      	b.n	800ae22 <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800adfe:	e010      	b.n	800ae22 <VL53L0X_SetLimitCheckValue+0xb2>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	2317      	movs	r3, #23
 800ae08:	18fc      	adds	r4, r7, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2164      	movs	r1, #100	; 0x64
 800ae0e:	0018      	movs	r0, r3
 800ae10:	f004 fe3c 	bl	800fa8c <VL53L0X_WrWord>
 800ae14:	0003      	movs	r3, r0
 800ae16:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800ae18:	e003      	b.n	800ae22 <VL53L0X_SetLimitCheckValue+0xb2>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae1a:	2317      	movs	r3, #23
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	22fc      	movs	r2, #252	; 0xfc
 800ae20:	701a      	strb	r2, [r3, #0]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ae22:	2317      	movs	r3, #23
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	b25b      	sxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <VL53L0X_SetLimitCheckValue+0xd2>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae2e:	230a      	movs	r3, #10
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	330c      	adds	r3, #12
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	18d3      	adds	r3, r2, r3
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	601a      	str	r2, [r3, #0]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae42:	2317      	movs	r3, #23
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	b25b      	sxtb	r3, r3
}
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b006      	add	sp, #24
 800ae50:	bdb0      	pop	{r4, r5, r7, pc}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	08015048 	.word	0x08015048

0800ae58 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ae58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5a:	b089      	sub	sp, #36	; 0x24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	200a      	movs	r0, #10
 800ae64:	183b      	adds	r3, r7, r0
 800ae66:	1c0a      	adds	r2, r1, #0
 800ae68:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae6a:	231f      	movs	r3, #31
 800ae6c:	18fb      	adds	r3, r7, r3
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]
	uint8_t EnableZeroValue = 0;
 800ae72:	231e      	movs	r3, #30
 800ae74:	18fb      	adds	r3, r7, r3
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800ae7a:	183b      	adds	r3, r7, r0
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	2b05      	cmp	r3, #5
 800ae80:	d84e      	bhi.n	800af20 <VL53L0X_GetLimitCheckValue+0xc8>
 800ae82:	009a      	lsls	r2, r3, #2
 800ae84:	4b4b      	ldr	r3, [pc, #300]	; (800afb4 <VL53L0X_GetLimitCheckValue+0x15c>)
 800ae86:	18d3      	adds	r3, r2, r3
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae90:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800ae92:	231e      	movs	r3, #30
 800ae94:	18fb      	adds	r3, r7, r3
 800ae96:	2200      	movs	r2, #0
 800ae98:	701a      	strb	r2, [r3, #0]
		break;
 800ae9a:	e045      	b.n	800af28 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ae9c:	251f      	movs	r5, #31
 800ae9e:	197c      	adds	r4, r7, r5
 800aea0:	2616      	movs	r6, #22
 800aea2:	19ba      	adds	r2, r7, r6
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2144      	movs	r1, #68	; 0x44
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f004 fea3 	bl	800fbf4 <VL53L0X_RdWord>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800aeb2:	197b      	adds	r3, r7, r5
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d103      	bne.n	800aec4 <VL53L0X_GetLimitCheckValue+0x6c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800aebc:	19bb      	adds	r3, r7, r6
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	025b      	lsls	r3, r3, #9
 800aec2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800aec4:	231e      	movs	r3, #30
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	2201      	movs	r2, #1
 800aeca:	701a      	strb	r2, [r3, #0]
		break;
 800aecc:	e02c      	b.n	800af28 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800aed4:	231e      	movs	r3, #30
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]
		break;
 800aedc:	e024      	b.n	800af28 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800aee4:	231e      	movs	r3, #30
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
		break;
 800aeec:	e01c      	b.n	800af28 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800aeee:	251f      	movs	r5, #31
 800aef0:	197c      	adds	r4, r7, r5
 800aef2:	2616      	movs	r6, #22
 800aef4:	19ba      	adds	r2, r7, r6
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2164      	movs	r1, #100	; 0x64
 800aefa:	0018      	movs	r0, r3
 800aefc:	f004 fe7a 	bl	800fbf4 <VL53L0X_RdWord>
 800af00:	0003      	movs	r3, r0
 800af02:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800af04:	197b      	adds	r3, r7, r5
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	b25b      	sxtb	r3, r3
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d103      	bne.n	800af16 <VL53L0X_GetLimitCheckValue+0xbe>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800af0e:	19bb      	adds	r3, r7, r6
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	025b      	lsls	r3, r3, #9
 800af14:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800af16:	231e      	movs	r3, #30
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	701a      	strb	r2, [r3, #0]
		break;
 800af1e:	e003      	b.n	800af28 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af20:	231f      	movs	r3, #31
 800af22:	18fb      	adds	r3, r7, r3
 800af24:	22fc      	movs	r2, #252	; 0xfc
 800af26:	701a      	strb	r2, [r3, #0]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af28:	231f      	movs	r3, #31
 800af2a:	18fb      	adds	r3, r7, r3
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b25b      	sxtb	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d136      	bne.n	800afa2 <VL53L0X_GetLimitCheckValue+0x14a>

		if (EnableZeroValue == 1) {
 800af34:	231e      	movs	r3, #30
 800af36:	18fb      	adds	r3, r7, r3
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d12e      	bne.n	800af9c <VL53L0X_GetLimitCheckValue+0x144>

			if (TempFix1616 == 0) {
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d115      	bne.n	800af70 <VL53L0X_GetLimitCheckValue+0x118>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800af44:	210a      	movs	r1, #10
 800af46:	187b      	adds	r3, r7, r1
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	330c      	adds	r3, #12
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	18d3      	adds	r3, r2, r3
 800af52:	3304      	adds	r3, #4
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af5e:	187b      	adds	r3, r7, r1
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	2128      	movs	r1, #40	; 0x28
 800af66:	18d3      	adds	r3, r2, r3
 800af68:	185b      	adds	r3, r3, r1
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	e018      	b.n	800afa2 <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af76:	210a      	movs	r1, #10
 800af78:	187b      	adds	r3, r7, r1
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	330c      	adds	r3, #12
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	18d3      	adds	r3, r2, r3
 800af84:	3304      	adds	r3, #4
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	601a      	str	r2, [r3, #0]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800af8a:	187b      	adds	r3, r7, r1
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	2128      	movs	r1, #40	; 0x28
 800af92:	18d3      	adds	r3, r2, r3
 800af94:	185b      	adds	r3, r3, r1
 800af96:	2201      	movs	r2, #1
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e002      	b.n	800afa2 <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800afa2:	231f      	movs	r3, #31
 800afa4:	18fb      	adds	r3, r7, r3
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	b25b      	sxtb	r3, r3

}
 800afaa:	0018      	movs	r0, r3
 800afac:	46bd      	mov	sp, r7
 800afae:	b009      	add	sp, #36	; 0x24
 800afb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	08015060 	.word	0x08015060

0800afb8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800afc2:	250f      	movs	r5, #15
 800afc4:	197b      	adds	r3, r7, r5
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800afca:	197c      	adds	r4, r7, r5
 800afcc:	260e      	movs	r6, #14
 800afce:	19ba      	adds	r2, r7, r6
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2101      	movs	r1, #1
 800afd4:	0018      	movs	r0, r3
 800afd6:	f004 fdd8 	bl	800fb8a <VL53L0X_RdByte>
 800afda:	0003      	movs	r3, r0
 800afdc:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800afde:	197b      	adds	r3, r7, r5
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b25b      	sxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d111      	bne.n	800b00c <VL53L0X_GetWrapAroundCheckEnable+0x54>
		PALDevDataSet(Dev, SequenceConfig, data);
 800afe8:	19bb      	adds	r3, r7, r6
 800afea:	7819      	ldrb	r1, [r3, #0]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	2398      	movs	r3, #152	; 0x98
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	54d1      	strb	r1, [r2, r3]
		if (data & (0x01 << 7))
 800aff4:	19bb      	adds	r3, r7, r6
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b25b      	sxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	da03      	bge.n	800b006 <VL53L0X_GetWrapAroundCheckEnable+0x4e>
			*pWrapAroundCheckEnable = 0x01;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2201      	movs	r2, #1
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	e002      	b.n	800b00c <VL53L0X_GetWrapAroundCheckEnable+0x54>
		else
			*pWrapAroundCheckEnable = 0x00;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b00c:	230f      	movs	r3, #15
 800b00e:	18fb      	adds	r3, r7, r3
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	b25b      	sxtb	r3, r3
 800b014:	2b00      	cmp	r3, #0
 800b016:	d104      	bne.n	800b022 <VL53L0X_GetWrapAroundCheckEnable+0x6a>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	7819      	ldrb	r1, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	224c      	movs	r2, #76	; 0x4c
 800b020:	5499      	strb	r1, [r3, r2]
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b022:	230f      	movs	r3, #15
 800b024:	18fb      	adds	r3, r7, r3
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b25b      	sxtb	r3, r3
}
 800b02a:	0018      	movs	r0, r3
 800b02c:	46bd      	mov	sp, r7
 800b02e:	b005      	add	sp, #20
 800b030:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b032 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800b032:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b034:	b085      	sub	sp, #20
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b03a:	250f      	movs	r5, #15
 800b03c:	197b      	adds	r3, r7, r5
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b042:	197c      	adds	r4, r7, r5
 800b044:	260e      	movs	r6, #14
 800b046:	19ba      	adds	r2, r7, r6
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	0011      	movs	r1, r2
 800b04c:	0018      	movs	r0, r3
 800b04e:	f7ff faa7 	bl	800a5a0 <VL53L0X_GetDeviceMode>
 800b052:	0003      	movs	r3, r0
 800b054:	7023      	strb	r3, [r4, #0]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b056:	002a      	movs	r2, r5
 800b058:	18bb      	adds	r3, r7, r2
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	b25b      	sxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <VL53L0X_PerformSingleMeasurement+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b062:	19bb      	adds	r3, r7, r6
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d106      	bne.n	800b078 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_StartMeasurement(Dev);
 800b06a:	18bc      	adds	r4, r7, r2
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	0018      	movs	r0, r3
 800b070:	f000 f8ca 	bl	800b208 <VL53L0X_StartMeasurement>
 800b074:	0003      	movs	r3, r0
 800b076:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800b078:	220f      	movs	r2, #15
 800b07a:	18bb      	adds	r3, r7, r2
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	b25b      	sxtb	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d106      	bne.n	800b092 <VL53L0X_PerformSingleMeasurement+0x60>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b084:	18bc      	adds	r4, r7, r2
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	0018      	movs	r0, r3
 800b08a:	f001 fe0e 	bl	800ccaa <VL53L0X_measurement_poll_for_completion>
 800b08e:	0003      	movs	r3, r0
 800b090:	7023      	strb	r3, [r4, #0]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800b092:	230f      	movs	r3, #15
 800b094:	18fb      	adds	r3, r7, r3
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b25b      	sxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d109      	bne.n	800b0b2 <VL53L0X_PerformSingleMeasurement+0x80>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800b09e:	230e      	movs	r3, #14
 800b0a0:	18fb      	adds	r3, r7, r3
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <VL53L0X_PerformSingleMeasurement+0x80>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	2399      	movs	r3, #153	; 0x99
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	2103      	movs	r1, #3
 800b0b0:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800b0b2:	230f      	movs	r3, #15
 800b0b4:	18fb      	adds	r3, r7, r3
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	b25b      	sxtb	r3, r3
}
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	b005      	add	sp, #20
 800b0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0c2 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800b0c2:	b5b0      	push	{r4, r5, r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ce:	2517      	movs	r5, #23
 800b0d0:	197b      	adds	r3, r7, r5
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800b0d6:	197c      	adds	r4, r7, r5
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	f001 fd8e 	bl	800cc00 <VL53L0X_perform_ref_calibration>
 800b0e4:	0003      	movs	r3, r0
 800b0e6:	7023      	strb	r3, [r4, #0]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800b0e8:	197b      	adds	r3, r7, r5
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	b25b      	sxtb	r3, r3
}
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	b006      	add	sp, #24
 800b0f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b0f8 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800b0f8:	b590      	push	{r4, r7, lr}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	000a      	movs	r2, r1
 800b102:	1cfb      	adds	r3, r7, #3
 800b104:	701a      	strb	r2, [r3, #0]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b106:	2317      	movs	r3, #23
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	2200      	movs	r2, #0
 800b10c:	701a      	strb	r2, [r3, #0]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b10e:	2016      	movs	r0, #22
 800b110:	183b      	adds	r3, r7, r0
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	21da      	movs	r1, #218	; 0xda
 800b116:	5c52      	ldrb	r2, [r2, r1]
 800b118:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800b11a:	0002      	movs	r2, r0
 800b11c:	18bb      	adds	r3, r7, r2
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d007      	beq.n	800b134 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800b124:	18bb      	adds	r3, r7, r2
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d003      	beq.n	800b134 <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800b12c:	18bb      	adds	r3, r7, r2
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b03      	cmp	r3, #3
 800b132:	d15e      	bne.n	800b1f2 <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b134:	2317      	movs	r3, #23
 800b136:	18fc      	adds	r4, r7, r3
 800b138:	230c      	movs	r3, #12
 800b13a:	18fb      	adds	r3, r7, r3
 800b13c:	2210      	movs	r2, #16
 800b13e:	18ba      	adds	r2, r7, r2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	2101      	movs	r1, #1
 800b144:	f000 fcca 	bl	800badc <VL53L0X_GetInterruptThresholds>
 800b148:	0003      	movs	r3, r0
 800b14a:	7023      	strb	r3, [r4, #0]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	23ff      	movs	r3, #255	; 0xff
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	429a      	cmp	r2, r3
 800b154:	d804      	bhi.n	800b160 <VL53L0X_CheckAndLoadInterruptSettings+0x68>
			(ThresholdHigh > 255*65536)) &&
 800b156:	68fa      	ldr	r2, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800b158:	23ff      	movs	r3, #255	; 0xff
 800b15a:	041b      	lsls	r3, r3, #16
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d948      	bls.n	800b1f2 <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(ThresholdHigh > 255*65536)) &&
 800b160:	2217      	movs	r2, #23
 800b162:	18bb      	adds	r3, r7, r2
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	b25b      	sxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d142      	bne.n	800b1f2 <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b16c:	1cfb      	adds	r3, r7, #3
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d009      	beq.n	800b188 <VL53L0X_CheckAndLoadInterruptSettings+0x90>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b174:	18bc      	adds	r4, r7, r2
 800b176:	4a23      	ldr	r2, [pc, #140]	; (800b204 <VL53L0X_CheckAndLoadInterruptSettings+0x10c>)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	0011      	movs	r1, r2
 800b17c:	0018      	movs	r0, r3
 800b17e:	f003 fc03 	bl	800e988 <VL53L0X_load_tuning_settings>
 800b182:	0003      	movs	r3, r0
 800b184:	7023      	strb	r3, [r4, #0]
 800b186:	e034      	b.n	800b1f2 <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2204      	movs	r2, #4
 800b18c:	21ff      	movs	r1, #255	; 0xff
 800b18e:	0018      	movs	r0, r3
 800b190:	f004 fc4c 	bl	800fa2c <VL53L0X_WrByte>
 800b194:	0003      	movs	r3, r0
 800b196:	0019      	movs	r1, r3
 800b198:	2417      	movs	r4, #23
 800b19a:	193b      	adds	r3, r7, r4
 800b19c:	193a      	adds	r2, r7, r4
 800b19e:	7812      	ldrb	r2, [r2, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2170      	movs	r1, #112	; 0x70
 800b1aa:	0018      	movs	r0, r3
 800b1ac:	f004 fc3e 	bl	800fa2c <VL53L0X_WrByte>
 800b1b0:	0003      	movs	r3, r0
 800b1b2:	0019      	movs	r1, r3
 800b1b4:	193b      	adds	r3, r7, r4
 800b1b6:	193a      	adds	r2, r7, r4
 800b1b8:	7812      	ldrb	r2, [r2, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	21ff      	movs	r1, #255	; 0xff
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f004 fc31 	bl	800fa2c <VL53L0X_WrByte>
 800b1ca:	0003      	movs	r3, r0
 800b1cc:	0019      	movs	r1, r3
 800b1ce:	193b      	adds	r3, r7, r4
 800b1d0:	193a      	adds	r2, r7, r4
 800b1d2:	7812      	ldrb	r2, [r2, #0]
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2180      	movs	r1, #128	; 0x80
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f004 fc24 	bl	800fa2c <VL53L0X_WrByte>
 800b1e4:	0003      	movs	r3, r0
 800b1e6:	0019      	movs	r1, r3
 800b1e8:	193b      	adds	r3, r7, r4
 800b1ea:	193a      	adds	r2, r7, r4
 800b1ec:	7812      	ldrb	r2, [r2, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	701a      	strb	r2, [r3, #0]
		}


	}

	return Status;
 800b1f2:	2317      	movs	r3, #23
 800b1f4:	18fb      	adds	r3, r7, r3
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	b25b      	sxtb	r3, r3

}
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	b007      	add	sp, #28
 800b200:	bd90      	pop	{r4, r7, pc}
 800b202:	46c0      	nop			; (mov r8, r8)
 800b204:	20000100 	.word	0x20000100

0800b208 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b210:	2517      	movs	r5, #23
 800b212:	197b      	adds	r3, r7, r5
 800b214:	2200      	movs	r2, #0
 800b216:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b218:	230f      	movs	r3, #15
 800b21a:	18fb      	adds	r3, r7, r3
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b220:	260e      	movs	r6, #14
 800b222:	19ba      	adds	r2, r7, r6
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	0011      	movs	r1, r2
 800b228:	0018      	movs	r0, r3
 800b22a:	f7ff f9b9 	bl	800a5a0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b22e:	197c      	adds	r4, r7, r5
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	0018      	movs	r0, r3
 800b238:	f004 fbf8 	bl	800fa2c <VL53L0X_WrByte>
 800b23c:	0003      	movs	r3, r0
 800b23e:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b240:	197c      	adds	r4, r7, r5
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2201      	movs	r2, #1
 800b246:	21ff      	movs	r1, #255	; 0xff
 800b248:	0018      	movs	r0, r3
 800b24a:	f004 fbef 	bl	800fa2c <VL53L0X_WrByte>
 800b24e:	0003      	movs	r3, r0
 800b250:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b252:	197c      	adds	r4, r7, r5
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	2100      	movs	r1, #0
 800b25a:	0018      	movs	r0, r3
 800b25c:	f004 fbe6 	bl	800fa2c <VL53L0X_WrByte>
 800b260:	0003      	movs	r3, r0
 800b262:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	239d      	movs	r3, #157	; 0x9d
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	5cd2      	ldrb	r2, [r2, r3]
 800b26c:	197c      	adds	r4, r7, r5
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2191      	movs	r1, #145	; 0x91
 800b272:	0018      	movs	r0, r3
 800b274:	f004 fbda 	bl	800fa2c <VL53L0X_WrByte>
 800b278:	0003      	movs	r3, r0
 800b27a:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b27c:	197c      	adds	r4, r7, r5
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	2100      	movs	r1, #0
 800b284:	0018      	movs	r0, r3
 800b286:	f004 fbd1 	bl	800fa2c <VL53L0X_WrByte>
 800b28a:	0003      	movs	r3, r0
 800b28c:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b28e:	197c      	adds	r4, r7, r5
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	21ff      	movs	r1, #255	; 0xff
 800b296:	0018      	movs	r0, r3
 800b298:	f004 fbc8 	bl	800fa2c <VL53L0X_WrByte>
 800b29c:	0003      	movs	r3, r0
 800b29e:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b2a0:	197c      	adds	r4, r7, r5
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2180      	movs	r1, #128	; 0x80
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f004 fbbf 	bl	800fa2c <VL53L0X_WrByte>
 800b2ae:	0003      	movs	r3, r0
 800b2b0:	7023      	strb	r3, [r4, #0]

	switch (DeviceMode) {
 800b2b2:	19bb      	adds	r3, r7, r6
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d100      	bne.n	800b2bc <VL53L0X_StartMeasurement+0xb4>
 800b2ba:	e073      	b.n	800b3a4 <VL53L0X_StartMeasurement+0x19c>
 800b2bc:	dd00      	ble.n	800b2c0 <VL53L0X_StartMeasurement+0xb8>
 800b2be:	e094      	b.n	800b3ea <VL53L0X_StartMeasurement+0x1e2>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <VL53L0X_StartMeasurement+0xc2>
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d04a      	beq.n	800b35e <VL53L0X_StartMeasurement+0x156>
 800b2c8:	e08f      	b.n	800b3ea <VL53L0X_StartMeasurement+0x1e2>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b2ca:	2517      	movs	r5, #23
 800b2cc:	197c      	adds	r4, r7, r5
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	f004 fba9 	bl	800fa2c <VL53L0X_WrByte>
 800b2da:	0003      	movs	r3, r0
 800b2dc:	7023      	strb	r3, [r4, #0]

		Byte = StartStopByte;
 800b2de:	230d      	movs	r3, #13
 800b2e0:	18fb      	adds	r3, r7, r3
 800b2e2:	220f      	movs	r2, #15
 800b2e4:	18ba      	adds	r2, r7, r2
 800b2e6:	7812      	ldrb	r2, [r2, #0]
 800b2e8:	701a      	strb	r2, [r3, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800b2ea:	197b      	adds	r3, r7, r5
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	b25b      	sxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d000      	beq.n	800b2f6 <VL53L0X_StartMeasurement+0xee>
 800b2f4:	e07e      	b.n	800b3f4 <VL53L0X_StartMeasurement+0x1ec>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00a      	beq.n	800b316 <VL53L0X_StartMeasurement+0x10e>
					Status = VL53L0X_RdByte(Dev,
 800b300:	2317      	movs	r3, #23
 800b302:	18fc      	adds	r4, r7, r3
 800b304:	230d      	movs	r3, #13
 800b306:	18fa      	adds	r2, r7, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2100      	movs	r1, #0
 800b30c:	0018      	movs	r0, r3
 800b30e:	f004 fc3c 	bl	800fb8a <VL53L0X_RdByte>
 800b312:	0003      	movs	r3, r0
 800b314:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	3301      	adds	r3, #1
 800b31a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b31c:	230d      	movs	r3, #13
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	210f      	movs	r1, #15
 800b324:	187a      	adds	r2, r7, r1
 800b326:	7812      	ldrb	r2, [r2, #0]
 800b328:	4013      	ands	r3, r2
 800b32a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b32c:	187a      	adds	r2, r7, r1
 800b32e:	7812      	ldrb	r2, [r2, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d10a      	bne.n	800b34a <VL53L0X_StartMeasurement+0x142>
				&& (Status == VL53L0X_ERROR_NONE)
 800b334:	2317      	movs	r3, #23
 800b336:	18fb      	adds	r3, r7, r3
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	b25b      	sxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <VL53L0X_StartMeasurement+0x142>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	23fa      	movs	r3, #250	; 0xfa
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	429a      	cmp	r2, r3
 800b348:	d3d7      	bcc.n	800b2fa <VL53L0X_StartMeasurement+0xf2>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	23fa      	movs	r3, #250	; 0xfa
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	429a      	cmp	r2, r3
 800b352:	d34f      	bcc.n	800b3f4 <VL53L0X_StartMeasurement+0x1ec>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b354:	2317      	movs	r3, #23
 800b356:	18fb      	adds	r3, r7, r3
 800b358:	22f9      	movs	r2, #249	; 0xf9
 800b35a:	701a      	strb	r2, [r3, #0]

		}

		break;
 800b35c:	e04a      	b.n	800b3f4 <VL53L0X_StartMeasurement+0x1ec>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b35e:	2217      	movs	r2, #23
 800b360:	18bb      	adds	r3, r7, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	b25b      	sxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d107      	bne.n	800b37a <VL53L0X_StartMeasurement+0x172>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b36a:	18bc      	adds	r4, r7, r2
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2101      	movs	r1, #1
 800b370:	0018      	movs	r0, r3
 800b372:	f7ff fec1 	bl	800b0f8 <VL53L0X_CheckAndLoadInterruptSettings>
 800b376:	0003      	movs	r3, r0
 800b378:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800b37a:	2517      	movs	r5, #23
 800b37c:	197c      	adds	r4, r7, r5
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2202      	movs	r2, #2
 800b382:	2100      	movs	r1, #0
 800b384:	0018      	movs	r0, r3
 800b386:	f004 fb51 	bl	800fa2c <VL53L0X_WrByte>
 800b38a:	0003      	movs	r3, r0
 800b38c:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b38e:	197b      	adds	r3, r7, r5
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b25b      	sxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d12f      	bne.n	800b3f8 <VL53L0X_StartMeasurement+0x1f0>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	2399      	movs	r3, #153	; 0x99
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	2104      	movs	r1, #4
 800b3a0:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800b3a2:	e029      	b.n	800b3f8 <VL53L0X_StartMeasurement+0x1f0>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b3a4:	2217      	movs	r2, #23
 800b3a6:	18bb      	adds	r3, r7, r2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d107      	bne.n	800b3c0 <VL53L0X_StartMeasurement+0x1b8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b3b0:	18bc      	adds	r4, r7, r2
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	f7ff fe9e 	bl	800b0f8 <VL53L0X_CheckAndLoadInterruptSettings>
 800b3bc:	0003      	movs	r3, r0
 800b3be:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800b3c0:	2517      	movs	r5, #23
 800b3c2:	197c      	adds	r4, r7, r5
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	f004 fb2e 	bl	800fa2c <VL53L0X_WrByte>
 800b3d0:	0003      	movs	r3, r0
 800b3d2:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b3d4:	197b      	adds	r3, r7, r5
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	b25b      	sxtb	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10e      	bne.n	800b3fc <VL53L0X_StartMeasurement+0x1f4>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	2399      	movs	r3, #153	; 0x99
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	2104      	movs	r1, #4
 800b3e6:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800b3e8:	e008      	b.n	800b3fc <VL53L0X_StartMeasurement+0x1f4>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b3ea:	2317      	movs	r3, #23
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	22f8      	movs	r2, #248	; 0xf8
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	e004      	b.n	800b3fe <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b3f4:	46c0      	nop			; (mov r8, r8)
 800b3f6:	e002      	b.n	800b3fe <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b3f8:	46c0      	nop			; (mov r8, r8)
 800b3fa:	e000      	b.n	800b3fe <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b3fc:	46c0      	nop			; (mov r8, r8)
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b3fe:	2317      	movs	r3, #23
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b25b      	sxtb	r3, r3
}
 800b406:	0018      	movs	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	b007      	add	sp, #28
 800b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b40e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b40e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b410:	b085      	sub	sp, #20
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b418:	200f      	movs	r0, #15
 800b41a:	183b      	adds	r3, r7, r0
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b420:	240e      	movs	r4, #14
 800b422:	193b      	adds	r3, r7, r4
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	21da      	movs	r1, #218	; 0xda
 800b428:	5c52      	ldrb	r2, [r2, r1]
 800b42a:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b42c:	193b      	adds	r3, r7, r4
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d114      	bne.n	800b45e <VL53L0X_GetMeasurementDataReady+0x50>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b434:	183c      	adds	r4, r7, r0
 800b436:	2308      	movs	r3, #8
 800b438:	18fa      	adds	r2, r7, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	0011      	movs	r1, r2
 800b43e:	0018      	movs	r0, r3
 800b440:	f000 fbe8 	bl	800bc14 <VL53L0X_GetInterruptMaskStatus>
 800b444:	0003      	movs	r3, r0
 800b446:	7023      	strb	r3, [r4, #0]
		if (InterruptMask ==
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d103      	bne.n	800b456 <VL53L0X_GetMeasurementDataReady+0x48>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2201      	movs	r2, #1
 800b452:	701a      	strb	r2, [r3, #0]
 800b454:	e020      	b.n	800b498 <VL53L0X_GetMeasurementDataReady+0x8a>
		else
			*pMeasurementDataReady = 0;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2200      	movs	r2, #0
 800b45a:	701a      	strb	r2, [r3, #0]
 800b45c:	e01c      	b.n	800b498 <VL53L0X_GetMeasurementDataReady+0x8a>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b45e:	250f      	movs	r5, #15
 800b460:	197c      	adds	r4, r7, r5
 800b462:	260d      	movs	r6, #13
 800b464:	19ba      	adds	r2, r7, r6
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2114      	movs	r1, #20
 800b46a:	0018      	movs	r0, r3
 800b46c:	f004 fb8d 	bl	800fb8a <VL53L0X_RdByte>
 800b470:	0003      	movs	r3, r0
 800b472:	7023      	strb	r3, [r4, #0]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b474:	197b      	adds	r3, r7, r5
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10c      	bne.n	800b498 <VL53L0X_GetMeasurementDataReady+0x8a>
			if (SysRangeStatusRegister & 0x01)
 800b47e:	19bb      	adds	r3, r7, r6
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	001a      	movs	r2, r3
 800b484:	2301      	movs	r3, #1
 800b486:	4013      	ands	r3, r2
 800b488:	d003      	beq.n	800b492 <VL53L0X_GetMeasurementDataReady+0x84>
				*pMeasurementDataReady = 1;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2201      	movs	r2, #1
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e002      	b.n	800b498 <VL53L0X_GetMeasurementDataReady+0x8a>
			else
				*pMeasurementDataReady = 0;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2200      	movs	r2, #0
 800b496:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b498:	230f      	movs	r3, #15
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b25b      	sxtb	r3, r3
}
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	b005      	add	sp, #20
 800b4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4a8 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4aa:	b097      	sub	sp, #92	; 0x5c
 800b4ac:	af02      	add	r7, sp, #8
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4b2:	264f      	movs	r6, #79	; 0x4f
 800b4b4:	19bb      	adds	r3, r7, r6
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	701a      	strb	r2, [r3, #0]
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b4ba:	19bc      	adds	r4, r7, r6
 800b4bc:	2528      	movs	r5, #40	; 0x28
 800b4be:	197a      	adds	r2, r7, r5
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	2114      	movs	r1, #20
 800b4c6:	f004 fa7b 	bl	800f9c0 <VL53L0X_ReadMulti>
 800b4ca:	0003      	movs	r3, r0
 800b4cc:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b4ce:	19bb      	adds	r3, r7, r6
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b25b      	sxtb	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d000      	beq.n	800b4da <VL53L0X_GetRangingMeasurementData+0x32>
 800b4d8:	e0f0      	b.n	800b6bc <VL53L0X_GetRangingMeasurementData+0x214>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b4e6:	0028      	movs	r0, r5
 800b4e8:	183b      	adds	r3, r7, r0
 800b4ea:	7a9b      	ldrb	r3, [r3, #10]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	b299      	uxth	r1, r3
 800b4f2:	183b      	adds	r3, r7, r0
 800b4f4:	7adb      	ldrb	r3, [r3, #11]
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	244c      	movs	r4, #76	; 0x4c
 800b4fa:	193b      	adds	r3, r7, r4
 800b4fc:	188a      	adds	r2, r1, r2
 800b4fe:	801a      	strh	r2, [r3, #0]
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2200      	movs	r2, #0
 800b504:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b506:	183b      	adds	r3, r7, r0
 800b508:	799b      	ldrb	r3, [r3, #6]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	021b      	lsls	r3, r3, #8
 800b50e:	b29a      	uxth	r2, r3
 800b510:	183b      	adds	r3, r7, r0
 800b512:	79db      	ldrb	r3, [r3, #7]
 800b514:	b29b      	uxth	r3, r3
 800b516:	18d3      	adds	r3, r2, r3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	025b      	lsls	r3, r3, #9
 800b51c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b522:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b524:	183b      	adds	r3, r7, r0
 800b526:	7a1b      	ldrb	r3, [r3, #8]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	021b      	lsls	r3, r3, #8
 800b52c:	b299      	uxth	r1, r3
 800b52e:	183b      	adds	r3, r7, r0
 800b530:	7a5b      	ldrb	r3, [r3, #9]
 800b532:	b29a      	uxth	r2, r3
 800b534:	2542      	movs	r5, #66	; 0x42
 800b536:	197b      	adds	r3, r7, r5
 800b538:	188a      	adds	r2, r1, r2
 800b53a:	801a      	strh	r2, [r3, #0]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b53c:	197b      	adds	r3, r7, r5
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	025b      	lsls	r3, r3, #9
 800b542:	001a      	movs	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b548:	183b      	adds	r3, r7, r0
 800b54a:	789b      	ldrb	r3, [r3, #2]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	b299      	uxth	r1, r3
 800b552:	183b      	adds	r3, r7, r0
 800b554:	78db      	ldrb	r3, [r3, #3]
 800b556:	b29a      	uxth	r2, r3
 800b558:	2540      	movs	r5, #64	; 0x40
 800b55a:	197b      	adds	r3, r7, r5
 800b55c:	188a      	adds	r2, r1, r2
 800b55e:	801a      	strh	r2, [r3, #0]
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	197a      	adds	r2, r7, r5
 800b564:	8812      	ldrh	r2, [r2, #0]
 800b566:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b568:	233f      	movs	r3, #63	; 0x3f
 800b56a:	18fb      	adds	r3, r7, r3
 800b56c:	183a      	adds	r2, r7, r0
 800b56e:	7812      	ldrb	r2, [r2, #0]
 800b570:	701a      	strb	r2, [r3, #0]

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b572:	203c      	movs	r0, #60	; 0x3c
 800b574:	183b      	adds	r3, r7, r0
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	22a9      	movs	r2, #169	; 0xa9
 800b57a:	0052      	lsls	r2, r2, #1
 800b57c:	5a8a      	ldrh	r2, [r1, r2]
 800b57e:	801a      	strh	r2, [r3, #0]
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b580:	263b      	movs	r6, #59	; 0x3b
 800b582:	19bb      	adds	r3, r7, r6
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	2232      	movs	r2, #50	; 0x32
 800b588:	32ff      	adds	r2, #255	; 0xff
 800b58a:	5c8a      	ldrb	r2, [r1, r2]
 800b58c:	701a      	strb	r2, [r3, #0]
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b58e:	183b      	adds	r3, r7, r0
 800b590:	881a      	ldrh	r2, [r3, #0]
 800b592:	23fa      	movs	r3, #250	; 0xfa
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	429a      	cmp	r2, r3
 800b598:	d053      	beq.n	800b642 <VL53L0X_GetRangingMeasurementData+0x19a>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b59a:	183b      	adds	r3, r7, r0
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	193a      	adds	r2, r7, r4
 800b5a0:	8812      	ldrh	r2, [r2, #0]
 800b5a2:	4353      	muls	r3, r2
 800b5a4:	33f5      	adds	r3, #245	; 0xf5
 800b5a6:	33ff      	adds	r3, #255	; 0xff
 800b5a8:	22fa      	movs	r2, #250	; 0xfa
 800b5aa:	0091      	lsls	r1, r2, #2
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f7f4 fe51 	bl	8000254 <__divsi3>
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	001a      	movs	r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b5b6:	193b      	adds	r3, r7, r4
 800b5b8:	801a      	strh	r2, [r3, #0]

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1a      	ldr	r2, [r3, #32]
 800b5be:	2138      	movs	r1, #56	; 0x38
 800b5c0:	187b      	adds	r3, r7, r1
 800b5c2:	801a      	strh	r2, [r3, #0]
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b5c4:	2037      	movs	r0, #55	; 0x37
 800b5c6:	183b      	adds	r3, r7, r0
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	7f12      	ldrb	r2, [r2, #28]
 800b5cc:	701a      	strb	r2, [r3, #0]
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b5ce:	183b      	adds	r3, r7, r0
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d035      	beq.n	800b642 <VL53L0X_GetRangingMeasurementData+0x19a>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b5d6:	187b      	adds	r3, r7, r1
 800b5d8:	881b      	ldrh	r3, [r3, #0]
 800b5da:	197a      	adds	r2, r7, r5
 800b5dc:	8812      	ldrh	r2, [r2, #0]
 800b5de:	4353      	muls	r3, r2
 800b5e0:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b5e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d10d      	bne.n	800b604 <VL53L0X_GetRangingMeasurementData+0x15c>
					if (RangeFractionalEnable)
 800b5e8:	19bb      	adds	r3, r7, r6
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d004      	beq.n	800b5fa <VL53L0X_GetRangingMeasurementData+0x152>
						XtalkRangeMilliMeter = 8888;
 800b5f0:	234a      	movs	r3, #74	; 0x4a
 800b5f2:	18fb      	adds	r3, r7, r3
 800b5f4:	4a52      	ldr	r2, [pc, #328]	; (800b740 <VL53L0X_GetRangingMeasurementData+0x298>)
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e01d      	b.n	800b636 <VL53L0X_GetRangingMeasurementData+0x18e>
					else
						XtalkRangeMilliMeter = 8888
 800b5fa:	234a      	movs	r3, #74	; 0x4a
 800b5fc:	18fb      	adds	r3, r7, r3
 800b5fe:	4a51      	ldr	r2, [pc, #324]	; (800b744 <VL53L0X_GetRangingMeasurementData+0x29c>)
 800b600:	801a      	strh	r2, [r3, #0]
 800b602:	e018      	b.n	800b636 <VL53L0X_GetRangingMeasurementData+0x18e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b604:	234c      	movs	r3, #76	; 0x4c
 800b606:	18fb      	adds	r3, r7, r3
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b60c:	435a      	muls	r2, r3
 800b60e:	0010      	movs	r0, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b610:	2338      	movs	r3, #56	; 0x38
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	2240      	movs	r2, #64	; 0x40
 800b618:	18ba      	adds	r2, r7, r2
 800b61a:	8812      	ldrh	r2, [r2, #0]
 800b61c:	4353      	muls	r3, r2
						>> 8));
 800b61e:	121b      	asrs	r3, r3, #8
 800b620:	001a      	movs	r2, r3
						- ((XTalkCompensationRateMegaCps
 800b622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b624:	1a9b      	subs	r3, r3, r2
						/ (SignalRate
 800b626:	0019      	movs	r1, r3
 800b628:	f7f4 fd8a 	bl	8000140 <__udivsi3>
 800b62c:	0003      	movs	r3, r0
 800b62e:	001a      	movs	r2, r3
					XtalkRangeMilliMeter =
 800b630:	234a      	movs	r3, #74	; 0x4a
 800b632:	18fb      	adds	r3, r7, r3
 800b634:	801a      	strh	r2, [r3, #0]
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b636:	234c      	movs	r3, #76	; 0x4c
 800b638:	18fb      	adds	r3, r7, r3
 800b63a:	224a      	movs	r2, #74	; 0x4a
 800b63c:	18ba      	adds	r2, r7, r2
 800b63e:	8812      	ldrh	r2, [r2, #0]
 800b640:	801a      	strh	r2, [r3, #0]
			}

		}

		if (RangeFractionalEnable) {
 800b642:	233b      	movs	r3, #59	; 0x3b
 800b644:	18fb      	adds	r3, r7, r3
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00e      	beq.n	800b66a <VL53L0X_GetRangingMeasurementData+0x1c2>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b64c:	214c      	movs	r1, #76	; 0x4c
 800b64e:	187b      	adds	r3, r7, r1
 800b650:	881b      	ldrh	r3, [r3, #0]
 800b652:	089b      	lsrs	r3, r3, #2
 800b654:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b65a:	187b      	adds	r3, r7, r1
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	019b      	lsls	r3, r3, #6
 800b662:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	75da      	strb	r2, [r3, #23]
 800b668:	e007      	b.n	800b67a <VL53L0X_GetRangingMeasurementData+0x1d2>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	224c      	movs	r2, #76	; 0x4c
 800b66e:	18ba      	adds	r2, r7, r2
 800b670:	8812      	ldrh	r2, [r2, #0]
 800b672:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2200      	movs	r2, #0
 800b678:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b67a:	2340      	movs	r3, #64	; 0x40
 800b67c:	18fb      	adds	r3, r7, r3
 800b67e:	881c      	ldrh	r4, [r3, #0]
 800b680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b682:	233f      	movs	r3, #63	; 0x3f
 800b684:	18fb      	adds	r3, r7, r3
 800b686:	7819      	ldrb	r1, [r3, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	2536      	movs	r5, #54	; 0x36
 800b68c:	197b      	adds	r3, r7, r5
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	0023      	movs	r3, r4
 800b696:	f003 fed9 	bl	800f44c <VL53L0X_get_pal_range_status>
 800b69a:	0003      	movs	r3, r0
 800b69c:	0019      	movs	r1, r3
 800b69e:	204f      	movs	r0, #79	; 0x4f
 800b6a0:	183b      	adds	r3, r7, r0
 800b6a2:	183a      	adds	r2, r7, r0
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	701a      	strb	r2, [r3, #0]
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b6aa:	183b      	adds	r3, r7, r0
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	b25b      	sxtb	r3, r3
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d103      	bne.n	800b6bc <VL53L0X_GetRangingMeasurementData+0x214>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b6b4:	197b      	adds	r3, r7, r5
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6bc:	234f      	movs	r3, #79	; 0x4f
 800b6be:	18fb      	adds	r3, r7, r3
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b25b      	sxtb	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d132      	bne.n	800b72e <VL53L0X_GetRangingMeasurementData+0x286>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b6c8:	210c      	movs	r1, #12
 800b6ca:	187a      	adds	r2, r7, r1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3350      	adds	r3, #80	; 0x50
 800b6d0:	cb31      	ldmia	r3!, {r0, r4, r5}
 800b6d2:	c231      	stmia	r2!, {r0, r4, r5}
 800b6d4:	cb31      	ldmia	r3!, {r0, r4, r5}
 800b6d6:	c231      	stmia	r2!, {r0, r4, r5}
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6013      	str	r3, [r2, #0]

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	891a      	ldrh	r2, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b6e0:	187b      	adds	r3, r7, r1
 800b6e2:	811a      	strh	r2, [r3, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	7dda      	ldrb	r2, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b6e8:	187b      	adds	r3, r7, r1
 800b6ea:	75da      	strb	r2, [r3, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	895a      	ldrh	r2, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b6f0:	187b      	adds	r3, r7, r1
 800b6f2:	815a      	strh	r2, [r3, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685a      	ldr	r2, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	605a      	str	r2, [r3, #4]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	68da      	ldr	r2, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b700:	187b      	adds	r3, r7, r1
 800b702:	60da      	str	r2, [r3, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	691a      	ldr	r2, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b708:	187b      	adds	r3, r7, r1
 800b70a:	611a      	str	r2, [r3, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	8a9a      	ldrh	r2, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b710:	187b      	adds	r3, r7, r1
 800b712:	829a      	strh	r2, [r3, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	7e1a      	ldrb	r2, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b718:	187b      	adds	r3, r7, r1
 800b71a:	761a      	strb	r2, [r3, #24]

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	187a      	adds	r2, r7, r1
 800b720:	3350      	adds	r3, #80	; 0x50
 800b722:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b724:	c313      	stmia	r3!, {r0, r1, r4}
 800b726:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b728:	c313      	stmia	r3!, {r0, r1, r4}
 800b72a:	6812      	ldr	r2, [r2, #0]
 800b72c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b72e:	234f      	movs	r3, #79	; 0x4f
 800b730:	18fb      	adds	r3, r7, r3
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	b25b      	sxtb	r3, r3
}
 800b736:	0018      	movs	r0, r3
 800b738:	46bd      	mov	sp, r7
 800b73a:	b015      	add	sp, #84	; 0x54
 800b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b73e:	46c0      	nop			; (mov r8, r8)
 800b740:	000022b8 	.word	0x000022b8
 800b744:	ffff8ae0 	.word	0xffff8ae0

0800b748 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b748:	b5b0      	push	{r4, r5, r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b752:	250f      	movs	r5, #15
 800b754:	197b      	adds	r3, r7, r5
 800b756:	2200      	movs	r2, #0
 800b758:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b75a:	197c      	adds	r4, r7, r5
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2100      	movs	r1, #0
 800b760:	0018      	movs	r0, r3
 800b762:	f7fe feeb 	bl	800a53c <VL53L0X_SetDeviceMode>
 800b766:	0003      	movs	r3, r0
 800b768:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800b76a:	197b      	adds	r3, r7, r5
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	b25b      	sxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <VL53L0X_PerformSingleRangingMeasurement+0x3a>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b774:	197c      	adds	r4, r7, r5
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	0018      	movs	r0, r3
 800b77a:	f7ff fc5a 	bl	800b032 <VL53L0X_PerformSingleMeasurement>
 800b77e:	0003      	movs	r3, r0
 800b780:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800b782:	220f      	movs	r2, #15
 800b784:	18bb      	adds	r3, r7, r2
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	b25b      	sxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d108      	bne.n	800b7a0 <VL53L0X_PerformSingleRangingMeasurement+0x58>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b78e:	18bc      	adds	r4, r7, r2
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	0011      	movs	r1, r2
 800b796:	0018      	movs	r0, r3
 800b798:	f7ff fe86 	bl	800b4a8 <VL53L0X_GetRangingMeasurementData>
 800b79c:	0003      	movs	r3, r0
 800b79e:	7023      	strb	r3, [r4, #0]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b7a0:	220f      	movs	r2, #15
 800b7a2:	18bb      	adds	r3, r7, r2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	b25b      	sxtb	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d107      	bne.n	800b7bc <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b7ac:	18bc      	adds	r4, r7, r2
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	f000 f9d4 	bl	800bb60 <VL53L0X_ClearInterruptMask>
 800b7b8:	0003      	movs	r3, r0
 800b7ba:	7023      	strb	r3, [r4, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800b7bc:	230f      	movs	r3, #15
 800b7be:	18fb      	adds	r3, r7, r3
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b25b      	sxtb	r3, r3
}
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	b004      	add	sp, #16
 800b7ca:	bdb0      	pop	{r4, r5, r7, pc}

0800b7cc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b7cc:	b590      	push	{r4, r7, lr}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	000c      	movs	r4, r1
 800b7d6:	0010      	movs	r0, r2
 800b7d8:	0019      	movs	r1, r3
 800b7da:	1cfb      	adds	r3, r7, #3
 800b7dc:	1c22      	adds	r2, r4, #0
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	1cbb      	adds	r3, r7, #2
 800b7e2:	1c02      	adds	r2, r0, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
 800b7e6:	1c7b      	adds	r3, r7, #1
 800b7e8:	1c0a      	adds	r2, r1, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ec:	210f      	movs	r1, #15
 800b7ee:	187b      	adds	r3, r7, r1
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b7f4:	1cfb      	adds	r3, r7, #3
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <VL53L0X_SetGpioConfig+0x38>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b7fc:	187b      	adds	r3, r7, r1
 800b7fe:	22f6      	movs	r2, #246	; 0xf6
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	e160      	b.n	800bac6 <VL53L0X_SetGpioConfig+0x2fa>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b804:	1cbb      	adds	r3, r7, #2
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b14      	cmp	r3, #20
 800b80a:	d11a      	bne.n	800b842 <VL53L0X_SetGpioConfig+0x76>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b80c:	2320      	movs	r3, #32
 800b80e:	18fb      	adds	r3, r7, r3
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <VL53L0X_SetGpioConfig+0x54>
			data = 0x10;
 800b816:	230e      	movs	r3, #14
 800b818:	18fb      	adds	r3, r7, r3
 800b81a:	2210      	movs	r2, #16
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	e003      	b.n	800b828 <VL53L0X_SetGpioConfig+0x5c>
		else
			data = 1;
 800b820:	230e      	movs	r3, #14
 800b822:	18fb      	adds	r3, r7, r3
 800b824:	2201      	movs	r2, #1
 800b826:	701a      	strb	r2, [r3, #0]

		Status = VL53L0X_WrByte(Dev,
 800b828:	230f      	movs	r3, #15
 800b82a:	18fc      	adds	r4, r7, r3
 800b82c:	230e      	movs	r3, #14
 800b82e:	18fb      	adds	r3, r7, r3
 800b830:	781a      	ldrb	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2184      	movs	r1, #132	; 0x84
 800b836:	0018      	movs	r0, r3
 800b838:	f004 f8f8 	bl	800fa2c <VL53L0X_WrByte>
 800b83c:	0003      	movs	r3, r0
 800b83e:	7023      	strb	r3, [r4, #0]
 800b840:	e141      	b.n	800bac6 <VL53L0X_SetGpioConfig+0x2fa>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b842:	1cbb      	adds	r3, r7, #2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	2b15      	cmp	r3, #21
 800b848:	d000      	beq.n	800b84c <VL53L0X_SetGpioConfig+0x80>
 800b84a:	e0c4      	b.n	800b9d6 <VL53L0X_SetGpioConfig+0x20a>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	21ff      	movs	r1, #255	; 0xff
 800b852:	0018      	movs	r0, r3
 800b854:	f004 f8ea 	bl	800fa2c <VL53L0X_WrByte>
 800b858:	0003      	movs	r3, r0
 800b85a:	0019      	movs	r1, r3
 800b85c:	240f      	movs	r4, #15
 800b85e:	193b      	adds	r3, r7, r4
 800b860:	193a      	adds	r2, r7, r4
 800b862:	7812      	ldrb	r2, [r2, #0]
 800b864:	430a      	orrs	r2, r1
 800b866:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	0018      	movs	r0, r3
 800b870:	f004 f8dc 	bl	800fa2c <VL53L0X_WrByte>
 800b874:	0003      	movs	r3, r0
 800b876:	0019      	movs	r1, r3
 800b878:	193b      	adds	r3, r7, r4
 800b87a:	193a      	adds	r2, r7, r4
 800b87c:	7812      	ldrb	r2, [r2, #0]
 800b87e:	430a      	orrs	r2, r1
 800b880:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	21ff      	movs	r1, #255	; 0xff
 800b888:	0018      	movs	r0, r3
 800b88a:	f004 f8cf 	bl	800fa2c <VL53L0X_WrByte>
 800b88e:	0003      	movs	r3, r0
 800b890:	0019      	movs	r1, r3
 800b892:	193b      	adds	r3, r7, r4
 800b894:	193a      	adds	r2, r7, r4
 800b896:	7812      	ldrb	r2, [r2, #0]
 800b898:	430a      	orrs	r2, r1
 800b89a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	2180      	movs	r1, #128	; 0x80
 800b8a2:	0018      	movs	r0, r3
 800b8a4:	f004 f8c2 	bl	800fa2c <VL53L0X_WrByte>
 800b8a8:	0003      	movs	r3, r0
 800b8aa:	0019      	movs	r1, r3
 800b8ac:	193b      	adds	r3, r7, r4
 800b8ae:	193a      	adds	r2, r7, r4
 800b8b0:	7812      	ldrb	r2, [r2, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	2185      	movs	r1, #133	; 0x85
 800b8bc:	0018      	movs	r0, r3
 800b8be:	f004 f8b5 	bl	800fa2c <VL53L0X_WrByte>
 800b8c2:	0003      	movs	r3, r0
 800b8c4:	0019      	movs	r1, r3
 800b8c6:	193b      	adds	r3, r7, r4
 800b8c8:	193a      	adds	r2, r7, r4
 800b8ca:	7812      	ldrb	r2, [r2, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2204      	movs	r2, #4
 800b8d4:	21ff      	movs	r1, #255	; 0xff
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	f004 f8a8 	bl	800fa2c <VL53L0X_WrByte>
 800b8dc:	0003      	movs	r3, r0
 800b8de:	0019      	movs	r1, r3
 800b8e0:	193b      	adds	r3, r7, r4
 800b8e2:	193a      	adds	r2, r7, r4
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	21cd      	movs	r1, #205	; 0xcd
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f004 f89b 	bl	800fa2c <VL53L0X_WrByte>
 800b8f6:	0003      	movs	r3, r0
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	193b      	adds	r3, r7, r4
 800b8fc:	193a      	adds	r2, r7, r4
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2211      	movs	r2, #17
 800b908:	21cc      	movs	r1, #204	; 0xcc
 800b90a:	0018      	movs	r0, r3
 800b90c:	f004 f88e 	bl	800fa2c <VL53L0X_WrByte>
 800b910:	0003      	movs	r3, r0
 800b912:	0019      	movs	r1, r3
 800b914:	193b      	adds	r3, r7, r4
 800b916:	193a      	adds	r2, r7, r4
 800b918:	7812      	ldrb	r2, [r2, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2207      	movs	r2, #7
 800b922:	21ff      	movs	r1, #255	; 0xff
 800b924:	0018      	movs	r0, r3
 800b926:	f004 f881 	bl	800fa2c <VL53L0X_WrByte>
 800b92a:	0003      	movs	r3, r0
 800b92c:	0019      	movs	r1, r3
 800b92e:	193b      	adds	r3, r7, r4
 800b930:	193a      	adds	r2, r7, r4
 800b932:	7812      	ldrb	r2, [r2, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	21be      	movs	r1, #190	; 0xbe
 800b93e:	0018      	movs	r0, r3
 800b940:	f004 f874 	bl	800fa2c <VL53L0X_WrByte>
 800b944:	0003      	movs	r3, r0
 800b946:	0019      	movs	r1, r3
 800b948:	193b      	adds	r3, r7, r4
 800b94a:	193a      	adds	r2, r7, r4
 800b94c:	7812      	ldrb	r2, [r2, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2206      	movs	r2, #6
 800b956:	21ff      	movs	r1, #255	; 0xff
 800b958:	0018      	movs	r0, r3
 800b95a:	f004 f867 	bl	800fa2c <VL53L0X_WrByte>
 800b95e:	0003      	movs	r3, r0
 800b960:	0019      	movs	r1, r3
 800b962:	193b      	adds	r3, r7, r4
 800b964:	193a      	adds	r2, r7, r4
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2209      	movs	r2, #9
 800b970:	21cc      	movs	r1, #204	; 0xcc
 800b972:	0018      	movs	r0, r3
 800b974:	f004 f85a 	bl	800fa2c <VL53L0X_WrByte>
 800b978:	0003      	movs	r3, r0
 800b97a:	0019      	movs	r1, r3
 800b97c:	193b      	adds	r3, r7, r4
 800b97e:	193a      	adds	r2, r7, r4
 800b980:	7812      	ldrb	r2, [r2, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	21ff      	movs	r1, #255	; 0xff
 800b98c:	0018      	movs	r0, r3
 800b98e:	f004 f84d 	bl	800fa2c <VL53L0X_WrByte>
 800b992:	0003      	movs	r3, r0
 800b994:	0019      	movs	r1, r3
 800b996:	193b      	adds	r3, r7, r4
 800b998:	193a      	adds	r2, r7, r4
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	21ff      	movs	r1, #255	; 0xff
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f004 f840 	bl	800fa2c <VL53L0X_WrByte>
 800b9ac:	0003      	movs	r3, r0
 800b9ae:	0019      	movs	r1, r3
 800b9b0:	193b      	adds	r3, r7, r4
 800b9b2:	193a      	adds	r2, r7, r4
 800b9b4:	7812      	ldrb	r2, [r2, #0]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2100      	movs	r1, #0
 800b9c0:	0018      	movs	r0, r3
 800b9c2:	f004 f833 	bl	800fa2c <VL53L0X_WrByte>
 800b9c6:	0003      	movs	r3, r0
 800b9c8:	0019      	movs	r1, r3
 800b9ca:	193b      	adds	r3, r7, r4
 800b9cc:	193a      	adds	r2, r7, r4
 800b9ce:	7812      	ldrb	r2, [r2, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	e077      	b.n	800bac6 <VL53L0X_SetGpioConfig+0x2fa>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b9d6:	230f      	movs	r3, #15
 800b9d8:	18fb      	adds	r3, r7, r3
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	b25b      	sxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d126      	bne.n	800ba30 <VL53L0X_SetGpioConfig+0x264>
			switch (Functionality) {
 800b9e2:	1c7b      	adds	r3, r7, #1
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	d81d      	bhi.n	800ba26 <VL53L0X_SetGpioConfig+0x25a>
 800b9ea:	009a      	lsls	r2, r3, #2
 800b9ec:	4b3a      	ldr	r3, [pc, #232]	; (800bad8 <VL53L0X_SetGpioConfig+0x30c>)
 800b9ee:	18d3      	adds	r3, r2, r3
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	469f      	mov	pc, r3
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b9f4:	230e      	movs	r3, #14
 800b9f6:	18fb      	adds	r3, r7, r3
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	701a      	strb	r2, [r3, #0]
				break;
 800b9fc:	e019      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b9fe:	230e      	movs	r3, #14
 800ba00:	18fb      	adds	r3, r7, r3
 800ba02:	2201      	movs	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
				break;
 800ba06:	e014      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800ba08:	230e      	movs	r3, #14
 800ba0a:	18fb      	adds	r3, r7, r3
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	701a      	strb	r2, [r3, #0]
				break;
 800ba10:	e00f      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800ba12:	230e      	movs	r3, #14
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	2203      	movs	r2, #3
 800ba18:	701a      	strb	r2, [r3, #0]
				break;
 800ba1a:	e00a      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800ba1c:	230e      	movs	r3, #14
 800ba1e:	18fb      	adds	r3, r7, r3
 800ba20:	2204      	movs	r2, #4
 800ba22:	701a      	strb	r2, [r3, #0]
				break;
 800ba24:	e005      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
			default:
				Status =
 800ba26:	230f      	movs	r3, #15
 800ba28:	18fb      	adds	r3, r7, r3
 800ba2a:	22f5      	movs	r2, #245	; 0xf5
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	e000      	b.n	800ba32 <VL53L0X_SetGpioConfig+0x266>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800ba30:	46c0      	nop			; (mov r8, r8)

		if (Status == VL53L0X_ERROR_NONE)
 800ba32:	220f      	movs	r2, #15
 800ba34:	18bb      	adds	r3, r7, r2
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <VL53L0X_SetGpioConfig+0x288>
			Status = VL53L0X_WrByte(Dev,
 800ba3e:	18bc      	adds	r4, r7, r2
 800ba40:	230e      	movs	r3, #14
 800ba42:	18fb      	adds	r3, r7, r3
 800ba44:	781a      	ldrb	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	210a      	movs	r1, #10
 800ba4a:	0018      	movs	r0, r3
 800ba4c:	f003 ffee 	bl	800fa2c <VL53L0X_WrByte>
 800ba50:	0003      	movs	r3, r0
 800ba52:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800ba54:	230f      	movs	r3, #15
 800ba56:	18fb      	adds	r3, r7, r3
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	b25b      	sxtb	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d119      	bne.n	800ba94 <VL53L0X_SetGpioConfig+0x2c8>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800ba60:	2320      	movs	r3, #32
 800ba62:	18fb      	adds	r3, r7, r3
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d104      	bne.n	800ba74 <VL53L0X_SetGpioConfig+0x2a8>
				data = 0;
 800ba6a:	230e      	movs	r3, #14
 800ba6c:	18fb      	adds	r3, r7, r3
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	e003      	b.n	800ba7c <VL53L0X_SetGpioConfig+0x2b0>
			else
				data = (uint8_t)(1 << 4);
 800ba74:	230e      	movs	r3, #14
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	2210      	movs	r2, #16
 800ba7a:	701a      	strb	r2, [r3, #0]

			Status = VL53L0X_UpdateByte(Dev,
 800ba7c:	230f      	movs	r3, #15
 800ba7e:	18fc      	adds	r4, r7, r3
 800ba80:	230e      	movs	r3, #14
 800ba82:	18fb      	adds	r3, r7, r3
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	22ef      	movs	r2, #239	; 0xef
 800ba8a:	2184      	movs	r1, #132	; 0x84
 800ba8c:	f004 f836 	bl	800fafc <VL53L0X_UpdateByte>
 800ba90:	0003      	movs	r3, r0
 800ba92:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800ba94:	230f      	movs	r3, #15
 800ba96:	18fb      	adds	r3, r7, r3
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	b25b      	sxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <VL53L0X_SetGpioConfig+0x2de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	1c7a      	adds	r2, r7, #1
 800baa4:	21da      	movs	r1, #218	; 0xda
 800baa6:	7812      	ldrb	r2, [r2, #0]
 800baa8:	545a      	strb	r2, [r3, r1]
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800baaa:	220f      	movs	r2, #15
 800baac:	18bb      	adds	r3, r7, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	b25b      	sxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d107      	bne.n	800bac6 <VL53L0X_SetGpioConfig+0x2fa>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800bab6:	18bc      	adds	r4, r7, r2
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2100      	movs	r1, #0
 800babc:	0018      	movs	r0, r3
 800babe:	f000 f84f 	bl	800bb60 <VL53L0X_ClearInterruptMask>
 800bac2:	0003      	movs	r3, r0
 800bac4:	7023      	strb	r3, [r4, #0]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bac6:	230f      	movs	r3, #15
 800bac8:	18fb      	adds	r3, r7, r3
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	b25b      	sxtb	r3, r3
}
 800bace:	0018      	movs	r0, r3
 800bad0:	46bd      	mov	sp, r7
 800bad2:	b005      	add	sp, #20
 800bad4:	bd90      	pop	{r4, r7, pc}
 800bad6:	46c0      	nop			; (mov r8, r8)
 800bad8:	08015078 	.word	0x08015078

0800badc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800badc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	607a      	str	r2, [r7, #4]
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	230b      	movs	r3, #11
 800baea:	18fb      	adds	r3, r7, r3
 800baec:	1c0a      	adds	r2, r1, #0
 800baee:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baf0:	2517      	movs	r5, #23
 800baf2:	197b      	adds	r3, r7, r5
 800baf4:	2200      	movs	r2, #0
 800baf6:	701a      	strb	r2, [r3, #0]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800baf8:	197c      	adds	r4, r7, r5
 800bafa:	2614      	movs	r6, #20
 800bafc:	19ba      	adds	r2, r7, r6
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	210e      	movs	r1, #14
 800bb02:	0018      	movs	r0, r3
 800bb04:	f004 f876 	bl	800fbf4 <VL53L0X_RdWord>
 800bb08:	0003      	movs	r3, r0
 800bb0a:	7023      	strb	r3, [r4, #0]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bb0c:	0031      	movs	r1, r6
 800bb0e:	187b      	adds	r3, r7, r1
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	045b      	lsls	r3, r3, #17
 800bb14:	001a      	movs	r2, r3
 800bb16:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <VL53L0X_GetInterruptThresholds+0x80>)
 800bb18:	401a      	ands	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800bb1e:	197b      	adds	r3, r7, r5
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d111      	bne.n	800bb4c <VL53L0X_GetInterruptThresholds+0x70>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800bb28:	197c      	adds	r4, r7, r5
 800bb2a:	000d      	movs	r5, r1
 800bb2c:	187a      	adds	r2, r7, r1
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	210c      	movs	r1, #12
 800bb32:	0018      	movs	r0, r3
 800bb34:	f004 f85e 	bl	800fbf4 <VL53L0X_RdWord>
 800bb38:	0003      	movs	r3, r0
 800bb3a:	7023      	strb	r3, [r4, #0]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800bb3c:	197b      	adds	r3, r7, r5
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	045b      	lsls	r3, r3, #17
 800bb42:	001a      	movs	r2, r3
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <VL53L0X_GetInterruptThresholds+0x80>)
 800bb46:	401a      	ands	r2, r3
		*pThresholdHigh =
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb4c:	2317      	movs	r3, #23
 800bb4e:	18fb      	adds	r3, r7, r3
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b25b      	sxtb	r3, r3
}
 800bb54:	0018      	movs	r0, r3
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b007      	add	sp, #28
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5c:	1ffe0000 	.word	0x1ffe0000

0800bb60 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800bb60:	b5b0      	push	{r4, r5, r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb6a:	230f      	movs	r3, #15
 800bb6c:	18fb      	adds	r3, r7, r3
 800bb6e:	2200      	movs	r2, #0
 800bb70:	701a      	strb	r2, [r3, #0]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800bb72:	230e      	movs	r3, #14
 800bb74:	18fb      	adds	r3, r7, r3
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
	do {
		Status = VL53L0X_WrByte(Dev,
 800bb7a:	250f      	movs	r5, #15
 800bb7c:	197c      	adds	r4, r7, r5
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	210b      	movs	r1, #11
 800bb84:	0018      	movs	r0, r3
 800bb86:	f003 ff51 	bl	800fa2c <VL53L0X_WrByte>
 800bb8a:	0003      	movs	r3, r0
 800bb8c:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	210b      	movs	r1, #11
 800bb94:	0018      	movs	r0, r3
 800bb96:	f003 ff49 	bl	800fa2c <VL53L0X_WrByte>
 800bb9a:	0003      	movs	r3, r0
 800bb9c:	0019      	movs	r1, r3
 800bb9e:	002c      	movs	r4, r5
 800bba0:	193b      	adds	r3, r7, r4
 800bba2:	193a      	adds	r2, r7, r4
 800bba4:	7812      	ldrb	r2, [r2, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800bbaa:	250d      	movs	r5, #13
 800bbac:	197a      	adds	r2, r7, r5
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2113      	movs	r1, #19
 800bbb2:	0018      	movs	r0, r3
 800bbb4:	f003 ffe9 	bl	800fb8a <VL53L0X_RdByte>
 800bbb8:	0003      	movs	r3, r0
 800bbba:	0019      	movs	r1, r3
 800bbbc:	0020      	movs	r0, r4
 800bbbe:	183b      	adds	r3, r7, r0
 800bbc0:	183a      	adds	r2, r7, r0
 800bbc2:	7812      	ldrb	r2, [r2, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800bbc8:	210e      	movs	r1, #14
 800bbca:	187b      	adds	r3, r7, r1
 800bbcc:	781a      	ldrb	r2, [r3, #0]
 800bbce:	187b      	adds	r3, r7, r1
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	701a      	strb	r2, [r3, #0]
	} while (((Byte & 0x07) != 0x00)
 800bbd4:	197b      	adds	r3, r7, r5
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	001a      	movs	r2, r3
 800bbda:	2307      	movs	r3, #7
 800bbdc:	4013      	ands	r3, r2
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800bbde:	d008      	beq.n	800bbf2 <VL53L0X_ClearInterruptMask+0x92>
			&& (LoopCount < 3)
 800bbe0:	187b      	adds	r3, r7, r1
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d804      	bhi.n	800bbf2 <VL53L0X_ClearInterruptMask+0x92>
			&& (Status == VL53L0X_ERROR_NONE));
 800bbe8:	183b      	adds	r3, r7, r0
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	b25b      	sxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0c3      	beq.n	800bb7a <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800bbf2:	230e      	movs	r3, #14
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d903      	bls.n	800bc04 <VL53L0X_ClearInterruptMask+0xa4>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800bbfc:	230f      	movs	r3, #15
 800bbfe:	18fb      	adds	r3, r7, r3
 800bc00:	22f4      	movs	r2, #244	; 0xf4
 800bc02:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc04:	230f      	movs	r3, #15
 800bc06:	18fb      	adds	r3, r7, r3
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	b25b      	sxtb	r3, r3
}
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	b004      	add	sp, #16
 800bc12:	bdb0      	pop	{r4, r5, r7, pc}

0800bc14 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800bc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc1e:	250f      	movs	r5, #15
 800bc20:	197b      	adds	r3, r7, r5
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800bc26:	197c      	adds	r4, r7, r5
 800bc28:	260e      	movs	r6, #14
 800bc2a:	19ba      	adds	r2, r7, r6
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2113      	movs	r1, #19
 800bc30:	0018      	movs	r0, r3
 800bc32:	f003 ffaa 	bl	800fb8a <VL53L0X_RdByte>
 800bc36:	0003      	movs	r3, r0
 800bc38:	7023      	strb	r3, [r4, #0]
	*pInterruptMaskStatus = Byte & 0x07;
 800bc3a:	0031      	movs	r1, r6
 800bc3c:	187b      	adds	r3, r7, r1
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	001a      	movs	r2, r3
 800bc42:	2307      	movs	r3, #7
 800bc44:	401a      	ands	r2, r3
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800bc4a:	187b      	adds	r3, r7, r1
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	001a      	movs	r2, r3
 800bc50:	2318      	movs	r3, #24
 800bc52:	4013      	ands	r3, r2
 800bc54:	d002      	beq.n	800bc5c <VL53L0X_GetInterruptMaskStatus+0x48>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800bc56:	197b      	adds	r3, r7, r5
 800bc58:	22fa      	movs	r2, #250	; 0xfa
 800bc5a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bc5c:	230f      	movs	r3, #15
 800bc5e:	18fb      	adds	r3, r7, r3
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b25b      	sxtb	r3, r3
}
 800bc64:	0018      	movs	r0, r3
 800bc66:	46bd      	mov	sp, r7
 800bc68:	b005      	add	sp, #20
 800bc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc6c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800bc6c:	b5b0      	push	{r4, r5, r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc78:	2517      	movs	r5, #23
 800bc7a:	197b      	adds	r3, r7, r5
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800bc80:	197c      	adds	r4, r7, r5
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	0018      	movs	r0, r3
 800bc8a:	f000 fa58 	bl	800c13e <VL53L0X_perform_ref_spad_management>
 800bc8e:	0003      	movs	r3, r0
 800bc90:	7023      	strb	r3, [r4, #0]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800bc92:	197b      	adds	r3, r7, r5
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	b25b      	sxtb	r3, r3
}
 800bc98:	0018      	movs	r0, r3
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	b006      	add	sp, #24
 800bc9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bca0 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800bca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcaa:	210f      	movs	r1, #15
 800bcac:	187b      	adds	r3, r7, r1
 800bcae:	2200      	movs	r2, #0
 800bcb0:	701a      	strb	r2, [r3, #0]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	18fb      	adds	r3, r7, r3
 800bcb6:	4a23      	ldr	r2, [pc, #140]	; (800bd44 <VL53L0X_get_offset_calibration_data_micro_meter+0xa4>)
 800bcb8:	801a      	strh	r2, [r3, #0]
	int16_t cOffsetRange = 4096;
 800bcba:	220a      	movs	r2, #10
 800bcbc:	18bb      	adds	r3, r7, r2
 800bcbe:	2280      	movs	r2, #128	; 0x80
 800bcc0:	0152      	lsls	r2, r2, #5
 800bcc2:	801a      	strh	r2, [r3, #0]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800bcc4:	000e      	movs	r6, r1
 800bcc6:	187c      	adds	r4, r7, r1
 800bcc8:	2508      	movs	r5, #8
 800bcca:	197a      	adds	r2, r7, r5
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2128      	movs	r1, #40	; 0x28
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f003 ff8f 	bl	800fbf4 <VL53L0X_RdWord>
 800bcd6:	0003      	movs	r3, r0
 800bcd8:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800bcda:	19bb      	adds	r3, r7, r6
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b25b      	sxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d127      	bne.n	800bd34 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800bce4:	197b      	adds	r3, r7, r5
 800bce6:	881b      	ldrh	r3, [r3, #0]
 800bce8:	051b      	lsls	r3, r3, #20
 800bcea:	0d1b      	lsrs	r3, r3, #20
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	197b      	adds	r3, r7, r5
 800bcf0:	801a      	strh	r2, [r3, #0]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800bcf2:	0029      	movs	r1, r5
 800bcf4:	197b      	adds	r3, r7, r5
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	001a      	movs	r2, r3
 800bcfa:	230c      	movs	r3, #12
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	2000      	movs	r0, #0
 800bd00:	5e1b      	ldrsh	r3, [r3, r0]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	dd0d      	ble.n	800bd22 <VL53L0X_get_offset_calibration_data_micro_meter+0x82>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800bd06:	187b      	adds	r3, r7, r1
 800bd08:	881a      	ldrh	r2, [r3, #0]
 800bd0a:	230a      	movs	r3, #10
 800bd0c:	18fb      	adds	r3, r7, r3
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	001a      	movs	r2, r3
					* 250;
 800bd18:	23fa      	movs	r3, #250	; 0xfa
 800bd1a:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	e008      	b.n	800bd34 <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800bd22:	2308      	movs	r3, #8
 800bd24:	18fb      	adds	r3, r7, r3
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	b21b      	sxth	r3, r3
 800bd2a:	001a      	movs	r2, r3
 800bd2c:	23fa      	movs	r3, #250	; 0xfa
 800bd2e:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800bd34:	230f      	movs	r3, #15
 800bd36:	18fb      	adds	r3, r7, r3
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	b25b      	sxtb	r3, r3
}
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	b005      	add	sp, #20
 800bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd44:	000007ff 	.word	0x000007ff

0800bd48 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b08a      	sub	sp, #40	; 0x28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800bd56:	2308      	movs	r3, #8
 800bd58:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800bd5a:	231e      	movs	r3, #30
 800bd5c:	18fb      	adds	r3, r7, r3
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2201      	movs	r2, #1
 800bd66:	4252      	negs	r2, r2
 800bd68:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800bd6a:	69b9      	ldr	r1, [r7, #24]
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7f4 f9e7 	bl	8000140 <__udivsi3>
 800bd72:	0003      	movs	r3, r0
 800bd74:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	69b9      	ldr	r1, [r7, #24]
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f7f4 fa66 	bl	800024c <__aeabi_uidivmod>
 800bd80:	000b      	movs	r3, r1
 800bd82:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
 800bd88:	e038      	b.n	800bdfc <get_next_good_spad+0xb4>
				coarseIndex++) {
		fineIndex = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	18d2      	adds	r2, r2, r3
 800bd94:	211f      	movs	r1, #31
 800bd96:	187b      	adds	r3, r7, r1
 800bd98:	7812      	ldrb	r2, [r2, #0]
 800bd9a:	701a      	strb	r2, [r3, #0]

		if (coarseIndex == startIndex) {
 800bd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d124      	bne.n	800bdee <get_next_good_spad+0xa6>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800bda4:	187b      	adds	r3, r7, r1
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	411a      	asrs	r2, r3
 800bdac:	187b      	adds	r3, r7, r1
 800bdae:	701a      	strb	r2, [r3, #0]
			fineIndex = fineOffset;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800bdb4:	e01b      	b.n	800bdee <get_next_good_spad+0xa6>
			if ((dataByte & 0x1) == 1) {
 800bdb6:	231f      	movs	r3, #31
 800bdb8:	18fb      	adds	r3, r7, r3
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	d00c      	beq.n	800bddc <get_next_good_spad+0x94>
				success = 1;
 800bdc2:	231e      	movs	r3, #30
 800bdc4:	18fb      	adds	r3, r7, r3
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	701a      	strb	r2, [r3, #0]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	435a      	muls	r2, r3
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	18d3      	adds	r3, r2, r3
 800bdd4:	001a      	movs	r2, r3
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	601a      	str	r2, [r3, #0]
				break;
 800bdda:	e00c      	b.n	800bdf6 <get_next_good_spad+0xae>
			}
			dataByte >>= 1;
 800bddc:	221f      	movs	r2, #31
 800bdde:	18bb      	adds	r3, r7, r2
 800bde0:	18ba      	adds	r2, r7, r2
 800bde2:	7812      	ldrb	r2, [r2, #0]
 800bde4:	0852      	lsrs	r2, r2, #1
 800bde6:	701a      	strb	r2, [r3, #0]
			fineIndex++;
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	3301      	adds	r3, #1
 800bdec:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800bdee:	6a3a      	ldr	r2, [r7, #32]
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d3df      	bcc.n	800bdb6 <get_next_good_spad+0x6e>
				coarseIndex++) {
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	429a      	cmp	r2, r3
 800be02:	d204      	bcs.n	800be0e <get_next_good_spad+0xc6>
 800be04:	231e      	movs	r3, #30
 800be06:	18fb      	adds	r3, r7, r3
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0bd      	beq.n	800bd8a <get_next_good_spad+0x42>
		}
	}
}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	46bd      	mov	sp, r7
 800be12:	b00a      	add	sp, #40	; 0x28
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800be20:	210f      	movs	r1, #15
 800be22:	187b      	adds	r3, r7, r1
 800be24:	2201      	movs	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]
	quadrant = spadIndex >> 6;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	099b      	lsrs	r3, r3, #6
 800be2c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800be2e:	4b08      	ldr	r3, [pc, #32]	; (800be50 <is_aperture+0x38>)
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	0092      	lsls	r2, r2, #2
 800be34:	58d3      	ldr	r3, [r2, r3]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <is_aperture+0x28>
		isAperture = 0;
 800be3a:	187b      	adds	r3, r7, r1
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]

	return isAperture;
 800be40:	230f      	movs	r3, #15
 800be42:	18fb      	adds	r3, r7, r3
 800be44:	781b      	ldrb	r3, [r3, #0]
}
 800be46:	0018      	movs	r0, r3
 800be48:	46bd      	mov	sp, r7
 800be4a:	b004      	add	sp, #16
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	200002b8 	.word	0x200002b8

0800be54 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800be54:	b590      	push	{r4, r7, lr}
 800be56:	b089      	sub	sp, #36	; 0x24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800be60:	241f      	movs	r4, #31
 800be62:	193b      	adds	r3, r7, r4
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
	uint32_t cSpadsPerByte = 8;
 800be68:	2308      	movs	r3, #8
 800be6a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800be6c:	69b9      	ldr	r1, [r7, #24]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7f4 f966 	bl	8000140 <__udivsi3>
 800be74:	0003      	movs	r3, r0
 800be76:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69b9      	ldr	r1, [r7, #24]
 800be7c:	0018      	movs	r0, r3
 800be7e:	f7f4 f9e5 	bl	800024c <__aeabi_uidivmod>
 800be82:	000b      	movs	r3, r1
 800be84:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d303      	bcc.n	800be96 <enable_spad_bit+0x42>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800be8e:	193b      	adds	r3, r7, r4
 800be90:	22ce      	movs	r2, #206	; 0xce
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	e010      	b.n	800beb8 <enable_spad_bit+0x64>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	18d3      	adds	r3, r2, r3
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b25a      	sxtb	r2, r3
 800bea0:	2101      	movs	r1, #1
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	4099      	lsls	r1, r3
 800bea6:	000b      	movs	r3, r1
 800bea8:	b25b      	sxtb	r3, r3
 800beaa:	4313      	orrs	r3, r2
 800beac:	b259      	sxtb	r1, r3
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	18d3      	adds	r3, r2, r3
 800beb4:	b2ca      	uxtb	r2, r1
 800beb6:	701a      	strb	r2, [r3, #0]

	return status;
 800beb8:	231f      	movs	r3, #31
 800beba:	18fb      	adds	r3, r7, r3
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	b25b      	sxtb	r3, r3
}
 800bec0:	0018      	movs	r0, r3
 800bec2:	46bd      	mov	sp, r7
 800bec4:	b009      	add	sp, #36	; 0x24
 800bec6:	bd90      	pop	{r4, r7, pc}

0800bec8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bec8:	b5b0      	push	{r4, r5, r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800bed2:	250f      	movs	r5, #15
 800bed4:	197c      	adds	r4, r7, r5
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	2306      	movs	r3, #6
 800bedc:	21b0      	movs	r1, #176	; 0xb0
 800bede:	f003 fd33 	bl	800f948 <VL53L0X_WriteMulti>
 800bee2:	0003      	movs	r3, r0
 800bee4:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800bee6:	197b      	adds	r3, r7, r5
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	b25b      	sxtb	r3, r3
}
 800beec:	0018      	movs	r0, r3
 800beee:	46bd      	mov	sp, r7
 800bef0:	b004      	add	sp, #16
 800bef2:	bdb0      	pop	{r4, r5, r7, pc}

0800bef4 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800bef4:	b5b0      	push	{r4, r5, r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800befe:	250f      	movs	r5, #15
 800bf00:	197c      	adds	r4, r7, r5
 800bf02:	683a      	ldr	r2, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	2306      	movs	r3, #6
 800bf08:	21b0      	movs	r1, #176	; 0xb0
 800bf0a:	f003 fd59 	bl	800f9c0 <VL53L0X_ReadMulti>
 800bf0e:	0003      	movs	r3, r0
 800bf10:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800bf12:	197b      	adds	r3, r7, r5
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b25b      	sxtb	r3, r3
}
 800bf18:	0018      	movs	r0, r3
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	b004      	add	sp, #16
 800bf1e:	bdb0      	pop	{r4, r5, r7, pc}

0800bf20 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800bf20:	b590      	push	{r4, r7, lr}
 800bf22:	b08d      	sub	sp, #52	; 0x34
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	607a      	str	r2, [r7, #4]
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	230b      	movs	r3, #11
 800bf2e:	18fb      	adds	r3, r7, r3
 800bf30:	1c0a      	adds	r2, r1, #0
 800bf32:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bf34:	232f      	movs	r3, #47	; 0x2f
 800bf36:	18fb      	adds	r3, r7, r3
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800bf3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3e:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800bf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf42:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bf44:	2300      	movs	r3, #0
 800bf46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf48:	e02f      	b.n	800bfaa <enable_ref_spads+0x8a>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800bf4a:	231c      	movs	r3, #28
 800bf4c:	18fb      	adds	r3, r7, r3
 800bf4e:	6a3a      	ldr	r2, [r7, #32]
 800bf50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff fef8 	bl	800bd48 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	d104      	bne.n	800bf68 <enable_ref_spads+0x48>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf5e:	232f      	movs	r3, #47	; 0x2f
 800bf60:	18fb      	adds	r3, r7, r3
 800bf62:	22ce      	movs	r2, #206	; 0xce
 800bf64:	701a      	strb	r2, [r3, #0]
			break;
 800bf66:	e024      	b.n	800bfb2 <enable_ref_spads+0x92>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	001a      	movs	r2, r3
 800bf6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf6e:	18d3      	adds	r3, r2, r3
 800bf70:	0018      	movs	r0, r3
 800bf72:	f7ff ff51 	bl	800be18 <is_aperture>
 800bf76:	0003      	movs	r3, r0
 800bf78:	001a      	movs	r2, r3
 800bf7a:	230b      	movs	r3, #11
 800bf7c:	18fb      	adds	r3, r7, r3
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d004      	beq.n	800bf8e <enable_ref_spads+0x6e>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf84:	232f      	movs	r3, #47	; 0x2f
 800bf86:	18fb      	adds	r3, r7, r3
 800bf88:	22ce      	movs	r2, #206	; 0xce
 800bf8a:	701a      	strb	r2, [r3, #0]
			break;
 800bf8c:	e011      	b.n	800bfb2 <enable_ref_spads+0x92>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800bf92:	6a3a      	ldr	r2, [r7, #32]
 800bf94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f7ff ff5b 	bl	800be54 <enable_spad_bit>
		currentSpad++;
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d3cb      	bcc.n	800bf4a <enable_ref_spads+0x2a>
	}
	*lastSpad = currentSpad;
 800bfb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb4:	6a3a      	ldr	r2, [r7, #32]
 800bfb6:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bfb8:	222f      	movs	r2, #47	; 0x2f
 800bfba:	18bb      	adds	r3, r7, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d108      	bne.n	800bfd6 <enable_ref_spads+0xb6>
		status = set_ref_spad_map(Dev, spadArray);
 800bfc4:	18bc      	adds	r4, r7, r2
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0011      	movs	r1, r2
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f7ff ff7b 	bl	800bec8 <set_ref_spad_map>
 800bfd2:	0003      	movs	r3, r0
 800bfd4:	7023      	strb	r3, [r4, #0]


	if (status == VL53L0X_ERROR_NONE) {
 800bfd6:	222f      	movs	r2, #47	; 0x2f
 800bfd8:	18bb      	adds	r3, r7, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d123      	bne.n	800c02a <enable_ref_spads+0x10a>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bfe2:	18bc      	adds	r4, r7, r2
 800bfe4:	2314      	movs	r3, #20
 800bfe6:	18fa      	adds	r2, r7, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	0011      	movs	r1, r2
 800bfec:	0018      	movs	r0, r3
 800bfee:	f7ff ff81 	bl	800bef4 <get_ref_spad_map>
 800bff2:	0003      	movs	r3, r0
 800bff4:	7023      	strb	r3, [r4, #0]

		i = 0;
 800bff6:	2300      	movs	r3, #0
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bffa:	e012      	b.n	800c022 <enable_ref_spads+0x102>
			if (spadArray[i] != checkSpadArray[i]) {
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	18d3      	adds	r3, r2, r3
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	2314      	movs	r3, #20
 800c006:	18f9      	adds	r1, r7, r3
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	18cb      	adds	r3, r1, r3
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d004      	beq.n	800c01c <enable_ref_spads+0xfc>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c012:	232f      	movs	r3, #47	; 0x2f
 800c014:	18fb      	adds	r3, r7, r3
 800c016:	22ce      	movs	r2, #206	; 0xce
 800c018:	701a      	strb	r2, [r3, #0]
				break;
 800c01a:	e006      	b.n	800c02a <enable_ref_spads+0x10a>
			}
			i++;
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	3301      	adds	r3, #1
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800c022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c026:	429a      	cmp	r2, r3
 800c028:	d3e8      	bcc.n	800bffc <enable_ref_spads+0xdc>
		}
	}
	return status;
 800c02a:	232f      	movs	r3, #47	; 0x2f
 800c02c:	18fb      	adds	r3, r7, r3
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	b25b      	sxtb	r3, r3
}
 800c032:	0018      	movs	r0, r3
 800c034:	46bd      	mov	sp, r7
 800c036:	b00d      	add	sp, #52	; 0x34
 800c038:	bd90      	pop	{r4, r7, pc}

0800c03a <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800c03a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03c:	b08b      	sub	sp, #44	; 0x2c
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c044:	2027      	movs	r0, #39	; 0x27
 800c046:	183b      	adds	r3, r7, r0
 800c048:	2200      	movs	r2, #0
 800c04a:	701a      	strb	r2, [r3, #0]
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800c04c:	2126      	movs	r1, #38	; 0x26
 800c04e:	187b      	adds	r3, r7, r1
 800c050:	2200      	movs	r2, #0
 800c052:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c054:	187b      	adds	r3, r7, r1
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	2298      	movs	r2, #152	; 0x98
 800c05a:	0052      	lsls	r2, r2, #1
 800c05c:	5c8a      	ldrb	r2, [r1, r2]
 800c05e:	701a      	strb	r2, [r3, #0]

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800c060:	183b      	adds	r3, r7, r0
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	b25b      	sxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d108      	bne.n	800c07c <perform_ref_signal_measurement+0x42>
		status = VL53L0X_WrByte(Dev,
 800c06a:	183c      	adds	r4, r7, r0
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	22c0      	movs	r2, #192	; 0xc0
 800c070:	2101      	movs	r1, #1
 800c072:	0018      	movs	r0, r3
 800c074:	f003 fcda 	bl	800fa2c <VL53L0X_WrByte>
 800c078:	0003      	movs	r3, r0
 800c07a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800c07c:	2227      	movs	r2, #39	; 0x27
 800c07e:	18bb      	adds	r3, r7, r2
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	b25b      	sxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d109      	bne.n	800c09c <perform_ref_signal_measurement+0x62>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800c088:	18bc      	adds	r4, r7, r2
 800c08a:	2308      	movs	r3, #8
 800c08c:	18fa      	adds	r2, r7, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0011      	movs	r1, r2
 800c092:	0018      	movs	r0, r3
 800c094:	f7ff fb58 	bl	800b748 <VL53L0X_PerformSingleRangingMeasurement>
 800c098:	0003      	movs	r3, r0
 800c09a:	7023      	strb	r3, [r4, #0]
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800c09c:	2227      	movs	r2, #39	; 0x27
 800c09e:	18bb      	adds	r3, r7, r2
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	b25b      	sxtb	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d108      	bne.n	800c0ba <perform_ref_signal_measurement+0x80>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c0a8:	18bc      	adds	r4, r7, r2
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	21ff      	movs	r1, #255	; 0xff
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	f003 fcbb 	bl	800fa2c <VL53L0X_WrByte>
 800c0b6:	0003      	movs	r3, r0
 800c0b8:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE)
 800c0ba:	2227      	movs	r2, #39	; 0x27
 800c0bc:	18bb      	adds	r3, r7, r2
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	b25b      	sxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d108      	bne.n	800c0d8 <perform_ref_signal_measurement+0x9e>
		status = VL53L0X_RdWord(Dev,
 800c0c6:	18bc      	adds	r4, r7, r2
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	21b6      	movs	r1, #182	; 0xb6
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f003 fd90 	bl	800fbf4 <VL53L0X_RdWord>
 800c0d4:	0003      	movs	r3, r0
 800c0d6:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c0d8:	2227      	movs	r2, #39	; 0x27
 800c0da:	18bb      	adds	r3, r7, r2
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b25b      	sxtb	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d108      	bne.n	800c0f6 <perform_ref_signal_measurement+0xbc>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c0e4:	18bc      	adds	r4, r7, r2
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	21ff      	movs	r1, #255	; 0xff
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f003 fc9d 	bl	800fa2c <VL53L0X_WrByte>
 800c0f2:	0003      	movs	r3, r0
 800c0f4:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE) {
 800c0f6:	2527      	movs	r5, #39	; 0x27
 800c0f8:	197b      	adds	r3, r7, r5
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	b25b      	sxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d115      	bne.n	800c12e <perform_ref_signal_measurement+0xf4>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c102:	197c      	adds	r4, r7, r5
 800c104:	2626      	movs	r6, #38	; 0x26
 800c106:	19bb      	adds	r3, r7, r6
 800c108:	781a      	ldrb	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2101      	movs	r1, #1
 800c10e:	0018      	movs	r0, r3
 800c110:	f003 fc8c 	bl	800fa2c <VL53L0X_WrByte>
 800c114:	0003      	movs	r3, r0
 800c116:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c118:	197b      	adds	r3, r7, r5
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b25b      	sxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d105      	bne.n	800c12e <perform_ref_signal_measurement+0xf4>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	19b9      	adds	r1, r7, r6
 800c126:	2398      	movs	r3, #152	; 0x98
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	7809      	ldrb	r1, [r1, #0]
 800c12c:	54d1      	strb	r1, [r2, r3]
	}

	return status;
 800c12e:	2327      	movs	r3, #39	; 0x27
 800c130:	18fb      	adds	r3, r7, r3
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	b25b      	sxtb	r3, r3
}
 800c136:	0018      	movs	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	b00b      	add	sp, #44	; 0x2c
 800c13c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c13e <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c13e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c140:	b09d      	sub	sp, #116	; 0x74
 800c142:	af06      	add	r7, sp, #24
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c14a:	2357      	movs	r3, #87	; 0x57
 800c14c:	18fb      	adds	r3, r7, r3
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c152:	233a      	movs	r3, #58	; 0x3a
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	22b4      	movs	r2, #180	; 0xb4
 800c158:	701a      	strb	r2, [r3, #0]
	uint32_t minimumSpadCount = 3;
 800c15a:	2303      	movs	r3, #3
 800c15c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c15e:	232c      	movs	r3, #44	; 0x2c
 800c160:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c16e:	212e      	movs	r1, #46	; 0x2e
 800c170:	187b      	adds	r3, r7, r1
 800c172:	22a0      	movs	r2, #160	; 0xa0
 800c174:	0112      	lsls	r2, r2, #4
 800c176:	801a      	strh	r2, [r3, #0]
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c180:	2306      	movs	r3, #6
 800c182:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c18c:	2343      	movs	r3, #67	; 0x43
 800c18e:	18fb      	adds	r3, r7, r3
 800c190:	2200      	movs	r2, #0
 800c192:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800c194:	2311      	movs	r3, #17
 800c196:	18fb      	adds	r3, r7, r3
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800c19c:	2310      	movs	r3, #16
 800c19e:	18fb      	adds	r3, r7, r3
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount_int = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c1a8:	233b      	movs	r3, #59	; 0x3b
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	701a      	strb	r2, [r3, #0]
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c1b0:	187b      	adds	r3, r7, r1
 800c1b2:	68f9      	ldr	r1, [r7, #12]
 800c1b4:	229e      	movs	r2, #158	; 0x9e
 800c1b6:	0052      	lsls	r2, r2, #1
 800c1b8:	5a8a      	ldrh	r2, [r1, r2]
 800c1ba:	801a      	strh	r2, [r3, #0]
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1c0:	e00a      	b.n	800c1d8 <VL53L0X_perform_ref_spad_management+0x9a>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c1c2:	68f9      	ldr	r1, [r7, #12]
 800c1c4:	2392      	movs	r3, #146	; 0x92
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ca:	188a      	adds	r2, r1, r2
 800c1cc:	18d3      	adds	r3, r2, r3
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d3f0      	bcc.n	800c1c2 <VL53L0X_perform_ref_spad_management+0x84>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c1e0:	2557      	movs	r5, #87	; 0x57
 800c1e2:	197c      	adds	r4, r7, r5
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	21ff      	movs	r1, #255	; 0xff
 800c1ea:	0018      	movs	r0, r3
 800c1ec:	f003 fc1e 	bl	800fa2c <VL53L0X_WrByte>
 800c1f0:	0003      	movs	r3, r0
 800c1f2:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c1f4:	197b      	adds	r3, r7, r5
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	b25b      	sxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d108      	bne.n	800c210 <VL53L0X_perform_ref_spad_management+0xd2>
		Status = VL53L0X_WrByte(Dev,
 800c1fe:	197c      	adds	r4, r7, r5
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	214f      	movs	r1, #79	; 0x4f
 800c206:	0018      	movs	r0, r3
 800c208:	f003 fc10 	bl	800fa2c <VL53L0X_WrByte>
 800c20c:	0003      	movs	r3, r0
 800c20e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c210:	2257      	movs	r2, #87	; 0x57
 800c212:	18bb      	adds	r3, r7, r2
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b25b      	sxtb	r3, r3
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d108      	bne.n	800c22e <VL53L0X_perform_ref_spad_management+0xf0>
		Status = VL53L0X_WrByte(Dev,
 800c21c:	18bc      	adds	r4, r7, r2
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	222c      	movs	r2, #44	; 0x2c
 800c222:	214e      	movs	r1, #78	; 0x4e
 800c224:	0018      	movs	r0, r3
 800c226:	f003 fc01 	bl	800fa2c <VL53L0X_WrByte>
 800c22a:	0003      	movs	r3, r0
 800c22c:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c22e:	2257      	movs	r2, #87	; 0x57
 800c230:	18bb      	adds	r3, r7, r2
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	b25b      	sxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d108      	bne.n	800c24c <VL53L0X_perform_ref_spad_management+0x10e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c23a:	18bc      	adds	r4, r7, r2
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	21ff      	movs	r1, #255	; 0xff
 800c242:	0018      	movs	r0, r3
 800c244:	f003 fbf2 	bl	800fa2c <VL53L0X_WrByte>
 800c248:	0003      	movs	r3, r0
 800c24a:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c24c:	2257      	movs	r2, #87	; 0x57
 800c24e:	18bb      	adds	r3, r7, r2
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b25b      	sxtb	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <VL53L0X_perform_ref_spad_management+0x130>
		Status = VL53L0X_WrByte(Dev,
 800c258:	18bc      	adds	r4, r7, r2
 800c25a:	233a      	movs	r3, #58	; 0x3a
 800c25c:	18fb      	adds	r3, r7, r3
 800c25e:	781a      	ldrb	r2, [r3, #0]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	21b6      	movs	r1, #182	; 0xb6
 800c264:	0018      	movs	r0, r3
 800c266:	f003 fbe1 	bl	800fa2c <VL53L0X_WrByte>
 800c26a:	0003      	movs	r3, r0
 800c26c:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800c26e:	2257      	movs	r2, #87	; 0x57
 800c270:	18bb      	adds	r3, r7, r2
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	b25b      	sxtb	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d108      	bne.n	800c28c <VL53L0X_perform_ref_spad_management+0x14e>
		Status = VL53L0X_WrByte(Dev,
 800c27a:	18bc      	adds	r4, r7, r2
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	2180      	movs	r1, #128	; 0x80
 800c282:	0018      	movs	r0, r3
 800c284:	f003 fbd2 	bl	800fa2c <VL53L0X_WrByte>
 800c288:	0003      	movs	r3, r0
 800c28a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800c28c:	2257      	movs	r2, #87	; 0x57
 800c28e:	18bb      	adds	r3, r7, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b25b      	sxtb	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <VL53L0X_perform_ref_spad_management+0x170>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800c298:	18bc      	adds	r4, r7, r2
 800c29a:	2310      	movs	r3, #16
 800c29c:	18fa      	adds	r2, r7, r3
 800c29e:	2311      	movs	r3, #17
 800c2a0:	18f9      	adds	r1, r7, r3
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f000 fcab 	bl	800cc00 <VL53L0X_perform_ref_calibration>
 800c2aa:	0003      	movs	r3, r0
 800c2ac:	7023      	strb	r3, [r4, #0]
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800c2ae:	2257      	movs	r2, #87	; 0x57
 800c2b0:	18bb      	adds	r3, r7, r2
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	b25b      	sxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d124      	bne.n	800c304 <VL53L0X_perform_ref_spad_management+0x1c6>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800c2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800c2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	332b      	adds	r3, #43	; 0x2b
 800c2ce:	33ff      	adds	r3, #255	; 0xff
 800c2d0:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	3325      	adds	r3, #37	; 0x25
 800c2d6:	33ff      	adds	r3, #255	; 0xff
 800c2d8:	001e      	movs	r6, r3
		Status = enable_ref_spads(Dev,
 800c2da:	233a      	movs	r3, #58	; 0x3a
 800c2dc:	18fb      	adds	r3, r7, r3
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	18bc      	adds	r4, r7, r2
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	2218      	movs	r2, #24
 800c2e6:	18ba      	adds	r2, r7, r2
 800c2e8:	9204      	str	r2, [sp, #16]
 800c2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ec:	9203      	str	r2, [sp, #12]
 800c2ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2f0:	9202      	str	r2, [sp, #8]
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	0033      	movs	r3, r6
 800c2fa:	002a      	movs	r2, r5
 800c2fc:	f7ff fe10 	bl	800bf20 <enable_ref_spads>
 800c300:	0003      	movs	r3, r0
 800c302:	7023      	strb	r3, [r4, #0]
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c304:	2557      	movs	r5, #87	; 0x57
 800c306:	197b      	adds	r3, r7, r5
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	b25b      	sxtb	r3, r3
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d000      	beq.n	800c312 <VL53L0X_perform_ref_spad_management+0x1d4>
 800c310:	e087      	b.n	800c422 <VL53L0X_perform_ref_spad_management+0x2e4>
		currentSpadIndex = lastSpadIndex;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800c316:	197c      	adds	r4, r7, r5
 800c318:	2612      	movs	r6, #18
 800c31a:	19ba      	adds	r2, r7, r6
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	0011      	movs	r1, r2
 800c320:	0018      	movs	r0, r3
 800c322:	f7ff fe8a 	bl	800c03a <perform_ref_signal_measurement>
 800c326:	0003      	movs	r3, r0
 800c328:	7023      	strb	r3, [r4, #0]
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c32a:	197b      	adds	r3, r7, r5
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b25b      	sxtb	r3, r3
 800c330:	2b00      	cmp	r3, #0
 800c332:	d000      	beq.n	800c336 <VL53L0X_perform_ref_spad_management+0x1f8>
 800c334:	e071      	b.n	800c41a <VL53L0X_perform_ref_spad_management+0x2dc>
			(peakSignalRateRef > targetRefRate)) {
 800c336:	19bb      	adds	r3, r7, r6
 800c338:	881b      	ldrh	r3, [r3, #0]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c33a:	222e      	movs	r2, #46	; 0x2e
 800c33c:	18ba      	adds	r2, r7, r2
 800c33e:	8812      	ldrh	r2, [r2, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d26a      	bcs.n	800c41a <VL53L0X_perform_ref_spad_management+0x2dc>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800c344:	2300      	movs	r3, #0
 800c346:	64bb      	str	r3, [r7, #72]	; 0x48
 800c348:	e00a      	b.n	800c360 <VL53L0X_perform_ref_spad_management+0x222>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c34a:	68f9      	ldr	r1, [r7, #12]
 800c34c:	2392      	movs	r3, #146	; 0x92
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c352:	188a      	adds	r2, r1, r2
 800c354:	18d3      	adds	r3, r2, r3
 800c356:	2200      	movs	r2, #0
 800c358:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800c35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c35c:	3301      	adds	r3, #1
 800c35e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	429a      	cmp	r2, r3
 800c366:	d3f0      	bcc.n	800c34a <VL53L0X_perform_ref_spad_management+0x20c>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800c368:	e002      	b.n	800c370 <VL53L0X_perform_ref_spad_management+0x232>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800c36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c36c:	3301      	adds	r3, #1
 800c36e:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800c370:	233a      	movs	r3, #58	; 0x3a
 800c372:	18fb      	adds	r3, r7, r3
 800c374:	781a      	ldrb	r2, [r3, #0]
 800c376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c378:	18d3      	adds	r3, r2, r3
 800c37a:	0018      	movs	r0, r3
 800c37c:	f7ff fd4c 	bl	800be18 <is_aperture>
 800c380:	1e03      	subs	r3, r0, #0
 800c382:	d103      	bne.n	800c38c <VL53L0X_perform_ref_spad_management+0x24e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800c384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c388:	429a      	cmp	r2, r3
 800c38a:	d3ee      	bcc.n	800c36a <VL53L0X_perform_ref_spad_management+0x22c>
			}

			needAptSpads = 1;
 800c38c:	2301      	movs	r3, #1
 800c38e:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800c390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c392:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	332b      	adds	r3, #43	; 0x2b
 800c398:	33ff      	adds	r3, #255	; 0xff
 800c39a:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3325      	adds	r3, #37	; 0x25
 800c3a0:	33ff      	adds	r3, #255	; 0xff
 800c3a2:	001e      	movs	r6, r3
			Status = enable_ref_spads(Dev,
 800c3a4:	233a      	movs	r3, #58	; 0x3a
 800c3a6:	18fb      	adds	r3, r7, r3
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2257      	movs	r2, #87	; 0x57
 800c3ac:	18bc      	adds	r4, r7, r2
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	2218      	movs	r2, #24
 800c3b2:	18ba      	adds	r2, r7, r2
 800c3b4:	9204      	str	r2, [sp, #16]
 800c3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3b8:	9203      	str	r2, [sp, #12]
 800c3ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3bc:	9202      	str	r2, [sp, #8]
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	0033      	movs	r3, r6
 800c3c6:	002a      	movs	r2, r5
 800c3c8:	f7ff fdaa 	bl	800bf20 <enable_ref_spads>
 800c3cc:	0003      	movs	r3, r0
 800c3ce:	7023      	strb	r3, [r4, #0]
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c3d0:	2557      	movs	r5, #87	; 0x57
 800c3d2:	197b      	adds	r3, r7, r5
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	b25b      	sxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d121      	bne.n	800c420 <VL53L0X_perform_ref_spad_management+0x2e2>
				currentSpadIndex = lastSpadIndex;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800c3e0:	197c      	adds	r4, r7, r5
 800c3e2:	2612      	movs	r6, #18
 800c3e4:	19ba      	adds	r2, r7, r6
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	0011      	movs	r1, r2
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f7ff fe25 	bl	800c03a <perform_ref_signal_measurement>
 800c3f0:	0003      	movs	r3, r0
 800c3f2:	7023      	strb	r3, [r4, #0]
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800c3f4:	197b      	adds	r3, r7, r5
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d110      	bne.n	800c420 <VL53L0X_perform_ref_spad_management+0x2e2>
					(peakSignalRateRef > targetRefRate)) {
 800c3fe:	19bb      	adds	r3, r7, r6
 800c400:	881b      	ldrh	r3, [r3, #0]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800c402:	222e      	movs	r2, #46	; 0x2e
 800c404:	18ba      	adds	r2, r7, r2
 800c406:	8812      	ldrh	r2, [r2, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d209      	bcs.n	800c420 <VL53L0X_perform_ref_spad_management+0x2e2>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800c40c:	233b      	movs	r3, #59	; 0x3b
 800c40e:	18fb      	adds	r3, r7, r3
 800c410:	2201      	movs	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
					refSpadCount_int = minimumSpadCount;
 800c414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800c418:	e002      	b.n	800c420 <VL53L0X_perform_ref_spad_management+0x2e2>
				}
			}
		} else {
			needAptSpads = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c41e:	e000      	b.n	800c422 <VL53L0X_perform_ref_spad_management+0x2e4>
			if (Status == VL53L0X_ERROR_NONE) {
 800c420:	46c0      	nop			; (mov r8, r8)
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c422:	2357      	movs	r3, #87	; 0x57
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	b25b      	sxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d000      	beq.n	800c430 <VL53L0X_perform_ref_spad_management+0x2f2>
 800c42e:	e0cd      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
		(peakSignalRateRef < targetRefRate)) {
 800c430:	2412      	movs	r4, #18
 800c432:	193b      	adds	r3, r7, r4
 800c434:	881b      	ldrh	r3, [r3, #0]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800c436:	252e      	movs	r5, #46	; 0x2e
 800c438:	197a      	adds	r2, r7, r5
 800c43a:	8812      	ldrh	r2, [r2, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d800      	bhi.n	800c442 <VL53L0X_perform_ref_spad_management+0x304>
 800c440:	e0c4      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800c442:	233b      	movs	r3, #59	; 0x3b
 800c444:	18fb      	adds	r3, r7, r3
 800c446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c448:	701a      	strb	r2, [r3, #0]
		refSpadCount_int	= minimumSpadCount;
 800c44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3325      	adds	r3, #37	; 0x25
 800c452:	33ff      	adds	r3, #255	; 0xff
 800c454:	0019      	movs	r1, r3
 800c456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c458:	231c      	movs	r3, #28
 800c45a:	18fb      	adds	r3, r7, r3
 800c45c:	0018      	movs	r0, r3
 800c45e:	f005 f82f 	bl	80114c0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800c462:	193b      	adds	r3, r7, r4
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	001a      	movs	r2, r3
 800c468:	197b      	adds	r3, r7, r5
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	17da      	asrs	r2, r3, #31
 800c470:	189b      	adds	r3, r3, r2
 800c472:	4053      	eors	r3, r2
 800c474:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800c476:	2343      	movs	r3, #67	; 0x43
 800c478:	18fb      	adds	r3, r7, r3
 800c47a:	2200      	movs	r2, #0
 800c47c:	701a      	strb	r2, [r3, #0]

		while (!complete) {
 800c47e:	e09b      	b.n	800c5b8 <VL53L0X_perform_ref_spad_management+0x47a>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	332b      	adds	r3, #43	; 0x2b
 800c484:	33ff      	adds	r3, #255	; 0xff
 800c486:	0018      	movs	r0, r3
			get_next_good_spad(
 800c488:	2314      	movs	r3, #20
 800c48a:	18fb      	adds	r3, r7, r3
 800c48c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c490:	f7ff fc5a 	bl	800bd48 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	3301      	adds	r3, #1
 800c498:	d104      	bne.n	800c4a4 <VL53L0X_perform_ref_spad_management+0x366>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c49a:	2357      	movs	r3, #87	; 0x57
 800c49c:	18fb      	adds	r3, r7, r3
 800c49e:	22ce      	movs	r2, #206	; 0xce
 800c4a0:	701a      	strb	r2, [r3, #0]
				break;
 800c4a2:	e093      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800c4a4:	233a      	movs	r3, #58	; 0x3a
 800c4a6:	18fb      	adds	r3, r7, r3
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	189b      	adds	r3, r3, r2
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f7ff fcb2 	bl	800be18 <is_aperture>
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	001a      	movs	r2, r3
 800c4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d004      	beq.n	800c4c8 <VL53L0X_perform_ref_spad_management+0x38a>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c4be:	2343      	movs	r3, #67	; 0x43
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	701a      	strb	r2, [r3, #0]
				break;
 800c4c6:	e081      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
			}

			(refSpadCount_int)++;
 800c4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3325      	adds	r3, #37	; 0x25
 800c4d6:	33ff      	adds	r3, #255	; 0xff
			Status = enable_spad_bit(
 800c4d8:	2557      	movs	r5, #87	; 0x57
 800c4da:	197c      	adds	r4, r7, r5
 800c4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4e0:	0018      	movs	r0, r3
 800c4e2:	f7ff fcb7 	bl	800be54 <enable_spad_bit>
 800c4e6:	0003      	movs	r3, r0
 800c4e8:	7023      	strb	r3, [r4, #0]
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c4ea:	0029      	movs	r1, r5
 800c4ec:	187b      	adds	r3, r7, r1
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b25b      	sxtb	r3, r3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10e      	bne.n	800c514 <VL53L0X_perform_ref_spad_management+0x3d6>
				currentSpadIndex++;
 800c4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3325      	adds	r3, #37	; 0x25
 800c500:	33ff      	adds	r3, #255	; 0xff
 800c502:	001a      	movs	r2, r3
				Status = set_ref_spad_map(Dev,
 800c504:	187c      	adds	r4, r7, r1
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	0011      	movs	r1, r2
 800c50a:	0018      	movs	r0, r3
 800c50c:	f7ff fcdc 	bl	800bec8 <set_ref_spad_map>
 800c510:	0003      	movs	r3, r0
 800c512:	7023      	strb	r3, [r4, #0]
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c514:	2557      	movs	r5, #87	; 0x57
 800c516:	197b      	adds	r3, r7, r5
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	b25b      	sxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d152      	bne.n	800c5c6 <VL53L0X_perform_ref_spad_management+0x488>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c520:	197c      	adds	r4, r7, r5
 800c522:	2612      	movs	r6, #18
 800c524:	19ba      	adds	r2, r7, r6
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	0011      	movs	r1, r2
 800c52a:	0018      	movs	r0, r3
 800c52c:	f7ff fd85 	bl	800c03a <perform_ref_signal_measurement>
 800c530:	0003      	movs	r3, r0
 800c532:	7023      	strb	r3, [r4, #0]
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c534:	0029      	movs	r1, r5
 800c536:	187b      	adds	r3, r7, r1
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	b25b      	sxtb	r3, r3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d144      	bne.n	800c5ca <VL53L0X_perform_ref_spad_management+0x48c>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c540:	0030      	movs	r0, r6
 800c542:	183b      	adds	r3, r7, r0
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	001a      	movs	r2, r3
 800c548:	242e      	movs	r4, #46	; 0x2e
 800c54a:	193b      	adds	r3, r7, r4
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	17da      	asrs	r2, r3, #31
 800c552:	189b      	adds	r3, r3, r2
 800c554:	4053      	eors	r3, r2
 800c556:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c558:	183b      	adds	r3, r7, r0
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	193a      	adds	r2, r7, r4
 800c55e:	8812      	ldrh	r2, [r2, #0]
 800c560:	429a      	cmp	r2, r3
 800c562:	d21d      	bcs.n	800c5a0 <VL53L0X_perform_ref_spad_management+0x462>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c568:	429a      	cmp	r2, r3
 800c56a:	d914      	bls.n	800c596 <VL53L0X_perform_ref_spad_management+0x458>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c56c:	187c      	adds	r4, r7, r1
 800c56e:	251c      	movs	r5, #28
 800c570:	197a      	adds	r2, r7, r5
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	0011      	movs	r1, r2
 800c576:	0018      	movs	r0, r3
 800c578:	f7ff fca6 	bl	800bec8 <set_ref_spad_map>
 800c57c:	0003      	movs	r3, r0
 800c57e:	7023      	strb	r3, [r4, #0]
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3325      	adds	r3, #37	; 0x25
 800c584:	33ff      	adds	r3, #255	; 0xff
					memcpy(
 800c586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c588:	1979      	adds	r1, r7, r5
 800c58a:	0018      	movs	r0, r3
 800c58c:	f004 ff98 	bl	80114c0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c592:	3b01      	subs	r3, #1
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c596:	2343      	movs	r3, #67	; 0x43
 800c598:	18fb      	adds	r3, r7, r3
 800c59a:	2201      	movs	r2, #1
 800c59c:	701a      	strb	r2, [r3, #0]
 800c59e:	e00b      	b.n	800c5b8 <VL53L0X_perform_ref_spad_management+0x47a>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3325      	adds	r3, #37	; 0x25
 800c5a8:	33ff      	adds	r3, #255	; 0xff
 800c5aa:	0019      	movs	r1, r3
				memcpy(lastSpadArray,
 800c5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ae:	231c      	movs	r3, #28
 800c5b0:	18fb      	adds	r3, r7, r3
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	f004 ff84 	bl	80114c0 <memcpy>
		while (!complete) {
 800c5b8:	2343      	movs	r3, #67	; 0x43
 800c5ba:	18fb      	adds	r3, r7, r3
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d100      	bne.n	800c5c4 <VL53L0X_perform_ref_spad_management+0x486>
 800c5c2:	e75d      	b.n	800c480 <VL53L0X_perform_ref_spad_management+0x342>
 800c5c4:	e002      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	e000      	b.n	800c5cc <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800c5ca:	46c0      	nop			; (mov r8, r8)
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c5cc:	2357      	movs	r3, #87	; 0x57
 800c5ce:	18fb      	adds	r3, r7, r3
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	b25b      	sxtb	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d119      	bne.n	800c60c <VL53L0X_perform_ref_spad_management+0x4ce>
		*refSpadCount = refSpadCount_int;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5dc:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	223b      	movs	r2, #59	; 0x3b
 800c5e2:	18ba      	adds	r2, r7, r2
 800c5e4:	7812      	ldrb	r2, [r2, #0]
 800c5e6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	2316      	movs	r3, #22
 800c5ec:	33ff      	adds	r3, #255	; 0xff
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	b2d9      	uxtb	r1, r3
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	2314      	movs	r3, #20
 800c5fc:	33ff      	adds	r3, #255	; 0xff
 800c5fe:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7819      	ldrb	r1, [r3, #0]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	238a      	movs	r3, #138	; 0x8a
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c60c:	2357      	movs	r3, #87	; 0x57
 800c60e:	18fb      	adds	r3, r7, r3
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	b25b      	sxtb	r3, r3
}
 800c614:	0018      	movs	r0, r3
 800c616:	46bd      	mov	sp, r7
 800c618:	b017      	add	sp, #92	; 0x5c
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c61c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61e:	b093      	sub	sp, #76	; 0x4c
 800c620:	af06      	add	r7, sp, #24
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	1dfb      	adds	r3, r7, #7
 800c628:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c62a:	212f      	movs	r1, #47	; 0x2f
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
	uint32_t currentSpadIndex = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c636:	2323      	movs	r3, #35	; 0x23
 800c638:	18fb      	adds	r3, r7, r3
 800c63a:	22b4      	movs	r2, #180	; 0xb4
 800c63c:	701a      	strb	r2, [r3, #0]
	uint32_t spadArraySize = 6;
 800c63e:	2306      	movs	r3, #6
 800c640:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c642:	232c      	movs	r3, #44	; 0x2c
 800c644:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c646:	000d      	movs	r5, r1
 800c648:	187c      	adds	r4, r7, r1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	21ff      	movs	r1, #255	; 0xff
 800c650:	0018      	movs	r0, r3
 800c652:	f003 f9eb 	bl	800fa2c <VL53L0X_WrByte>
 800c656:	0003      	movs	r3, r0
 800c658:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c65a:	197b      	adds	r3, r7, r5
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	b25b      	sxtb	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d108      	bne.n	800c676 <VL53L0X_set_reference_spads+0x5a>
		Status = VL53L0X_WrByte(Dev,
 800c664:	197c      	adds	r4, r7, r5
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2200      	movs	r2, #0
 800c66a:	214f      	movs	r1, #79	; 0x4f
 800c66c:	0018      	movs	r0, r3
 800c66e:	f003 f9dd 	bl	800fa2c <VL53L0X_WrByte>
 800c672:	0003      	movs	r3, r0
 800c674:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c676:	222f      	movs	r2, #47	; 0x2f
 800c678:	18bb      	adds	r3, r7, r2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	b25b      	sxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d108      	bne.n	800c694 <VL53L0X_set_reference_spads+0x78>
		Status = VL53L0X_WrByte(Dev,
 800c682:	18bc      	adds	r4, r7, r2
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	222c      	movs	r2, #44	; 0x2c
 800c688:	214e      	movs	r1, #78	; 0x4e
 800c68a:	0018      	movs	r0, r3
 800c68c:	f003 f9ce 	bl	800fa2c <VL53L0X_WrByte>
 800c690:	0003      	movs	r3, r0
 800c692:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c694:	222f      	movs	r2, #47	; 0x2f
 800c696:	18bb      	adds	r3, r7, r2
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	b25b      	sxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d108      	bne.n	800c6b2 <VL53L0X_set_reference_spads+0x96>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c6a0:	18bc      	adds	r4, r7, r2
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	21ff      	movs	r1, #255	; 0xff
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f003 f9bf 	bl	800fa2c <VL53L0X_WrByte>
 800c6ae:	0003      	movs	r3, r0
 800c6b0:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c6b2:	222f      	movs	r2, #47	; 0x2f
 800c6b4:	18bb      	adds	r3, r7, r2
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b25b      	sxtb	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <VL53L0X_set_reference_spads+0xb8>
		Status = VL53L0X_WrByte(Dev,
 800c6be:	18bc      	adds	r4, r7, r2
 800c6c0:	2323      	movs	r3, #35	; 0x23
 800c6c2:	18fb      	adds	r3, r7, r3
 800c6c4:	781a      	ldrb	r2, [r3, #0]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	21b6      	movs	r1, #182	; 0xb6
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f003 f9ae 	bl	800fa2c <VL53L0X_WrByte>
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d8:	e00a      	b.n	800c6f0 <VL53L0X_set_reference_spads+0xd4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	2392      	movs	r3, #146	; 0x92
 800c6de:	005b      	lsls	r3, r3, #1
 800c6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6e2:	188a      	adds	r2, r1, r2
 800c6e4:	18d3      	adds	r3, r2, r3
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d3f0      	bcc.n	800c6da <VL53L0X_set_reference_spads+0xbe>

	if (isApertureSpads) {
 800c6f8:	1dfb      	adds	r3, r7, #7
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d011      	beq.n	800c724 <VL53L0X_set_reference_spads+0x108>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c700:	e002      	b.n	800c708 <VL53L0X_set_reference_spads+0xec>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	3301      	adds	r3, #1
 800c706:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c708:	2323      	movs	r3, #35	; 0x23
 800c70a:	18fb      	adds	r3, r7, r3
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	18d3      	adds	r3, r2, r3
 800c712:	0018      	movs	r0, r3
 800c714:	f7ff fb80 	bl	800be18 <is_aperture>
 800c718:	1e03      	subs	r3, r0, #0
 800c71a:	d103      	bne.n	800c724 <VL53L0X_set_reference_spads+0x108>
 800c71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	429a      	cmp	r2, r3
 800c722:	d3ee      	bcc.n	800c702 <VL53L0X_set_reference_spads+0xe6>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	332b      	adds	r3, #43	; 0x2b
 800c728:	33ff      	adds	r3, #255	; 0xff
 800c72a:	001d      	movs	r5, r3
				Dev->Data.SpadData.RefSpadEnables,
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3325      	adds	r3, #37	; 0x25
 800c730:	33ff      	adds	r3, #255	; 0xff
 800c732:	001e      	movs	r6, r3
	Status = enable_ref_spads(Dev,
 800c734:	2323      	movs	r3, #35	; 0x23
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	222f      	movs	r2, #47	; 0x2f
 800c73c:	18bc      	adds	r4, r7, r2
 800c73e:	1dfa      	adds	r2, r7, #7
 800c740:	7811      	ldrb	r1, [r2, #0]
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	2214      	movs	r2, #20
 800c746:	18ba      	adds	r2, r7, r2
 800c748:	9204      	str	r2, [sp, #16]
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	9203      	str	r2, [sp, #12]
 800c74e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c750:	9202      	str	r2, [sp, #8]
 800c752:	9301      	str	r3, [sp, #4]
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	9300      	str	r3, [sp, #0]
 800c758:	0033      	movs	r3, r6
 800c75a:	002a      	movs	r2, r5
 800c75c:	f7ff fbe0 	bl	800bf20 <enable_ref_spads>
 800c760:	0003      	movs	r3, r0
 800c762:	7023      	strb	r3, [r4, #0]
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c764:	222f      	movs	r2, #47	; 0x2f
 800c766:	18bb      	adds	r3, r7, r2
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	b25b      	sxtb	r3, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d110      	bne.n	800c792 <VL53L0X_set_reference_spads+0x176>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	2316      	movs	r3, #22
 800c774:	33ff      	adds	r3, #255	; 0xff
 800c776:	2101      	movs	r1, #1
 800c778:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	b2d9      	uxtb	r1, r3
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	2314      	movs	r3, #20
 800c782:	33ff      	adds	r3, #255	; 0xff
 800c784:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	1df9      	adds	r1, r7, #7
 800c78a:	238a      	movs	r3, #138	; 0x8a
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	7809      	ldrb	r1, [r1, #0]
 800c790:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c792:	232f      	movs	r3, #47	; 0x2f
 800c794:	18fb      	adds	r3, r7, r3
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	b25b      	sxtb	r3, r3
}
 800c79a:	0018      	movs	r0, r3
 800c79c:	46bd      	mov	sp, r7
 800c79e:	b00d      	add	sp, #52	; 0x34
 800c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7a2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c7a2:	b590      	push	{r4, r7, lr}
 800c7a4:	b085      	sub	sp, #20
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	000a      	movs	r2, r1
 800c7ac:	1cfb      	adds	r3, r7, #3
 800c7ae:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7b0:	210f      	movs	r1, #15
 800c7b2:	187b      	adds	r3, r7, r1
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c7b8:	187b      	adds	r3, r7, r1
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10c      	bne.n	800c7dc <VL53L0X_perform_single_ref_calibration+0x3a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c7c2:	1cfb      	adds	r3, r7, #3
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	187c      	adds	r4, r7, r1
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	0018      	movs	r0, r3
 800c7d4:	f003 f92a 	bl	800fa2c <VL53L0X_WrByte>
 800c7d8:	0003      	movs	r3, r0
 800c7da:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c7dc:	220f      	movs	r2, #15
 800c7de:	18bb      	adds	r3, r7, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	b25b      	sxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c7e8:	18bc      	adds	r4, r7, r2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	f000 fa5c 	bl	800ccaa <VL53L0X_measurement_poll_for_completion>
 800c7f2:	0003      	movs	r3, r0
 800c7f4:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c7f6:	220f      	movs	r2, #15
 800c7f8:	18bb      	adds	r3, r7, r2
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	b25b      	sxtb	r3, r3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d107      	bne.n	800c812 <VL53L0X_perform_single_ref_calibration+0x70>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c802:	18bc      	adds	r4, r7, r2
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2100      	movs	r1, #0
 800c808:	0018      	movs	r0, r3
 800c80a:	f7ff f9a9 	bl	800bb60 <VL53L0X_ClearInterruptMask>
 800c80e:	0003      	movs	r3, r0
 800c810:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c812:	220f      	movs	r2, #15
 800c814:	18bb      	adds	r3, r7, r2
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	b25b      	sxtb	r3, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d108      	bne.n	800c830 <VL53L0X_perform_single_ref_calibration+0x8e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c81e:	18bc      	adds	r4, r7, r2
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	2100      	movs	r1, #0
 800c826:	0018      	movs	r0, r3
 800c828:	f003 f900 	bl	800fa2c <VL53L0X_WrByte>
 800c82c:	0003      	movs	r3, r0
 800c82e:	7023      	strb	r3, [r4, #0]

	return Status;
 800c830:	230f      	movs	r3, #15
 800c832:	18fb      	adds	r3, r7, r3
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	b25b      	sxtb	r3, r3
}
 800c838:	0018      	movs	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b005      	add	sp, #20
 800c83e:	bd90      	pop	{r4, r7, pc}

0800c840 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	000c      	movs	r4, r1
 800c84a:	0010      	movs	r0, r2
 800c84c:	0019      	movs	r1, r3
 800c84e:	1cfb      	adds	r3, r7, #3
 800c850:	1c22      	adds	r2, r4, #0
 800c852:	701a      	strb	r2, [r3, #0]
 800c854:	1cbb      	adds	r3, r7, #2
 800c856:	1c02      	adds	r2, r0, #0
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	1c7b      	adds	r3, r7, #1
 800c85c:	1c0a      	adds	r2, r1, #0
 800c85e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c860:	240f      	movs	r4, #15
 800c862:	193b      	adds	r3, r7, r4
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalint = 0;
 800c868:	230e      	movs	r3, #14
 800c86a:	18fb      	adds	r3, r7, r3
 800c86c:	2200      	movs	r2, #0
 800c86e:	701a      	strb	r2, [r3, #0]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	21ff      	movs	r1, #255	; 0xff
 800c876:	0018      	movs	r0, r3
 800c878:	f003 f8d8 	bl	800fa2c <VL53L0X_WrByte>
 800c87c:	0003      	movs	r3, r0
 800c87e:	0019      	movs	r1, r3
 800c880:	193b      	adds	r3, r7, r4
 800c882:	193a      	adds	r2, r7, r4
 800c884:	7812      	ldrb	r2, [r2, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	2100      	movs	r1, #0
 800c890:	0018      	movs	r0, r3
 800c892:	f003 f8cb 	bl	800fa2c <VL53L0X_WrByte>
 800c896:	0003      	movs	r3, r0
 800c898:	0019      	movs	r1, r3
 800c89a:	193b      	adds	r3, r7, r4
 800c89c:	193a      	adds	r2, r7, r4
 800c89e:	7812      	ldrb	r2, [r2, #0]
 800c8a0:	430a      	orrs	r2, r1
 800c8a2:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	21ff      	movs	r1, #255	; 0xff
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f003 f8be 	bl	800fa2c <VL53L0X_WrByte>
 800c8b0:	0003      	movs	r3, r0
 800c8b2:	0019      	movs	r1, r3
 800c8b4:	193b      	adds	r3, r7, r4
 800c8b6:	193a      	adds	r2, r7, r4
 800c8b8:	7812      	ldrb	r2, [r2, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	701a      	strb	r2, [r3, #0]

	if (read_not_write) {
 800c8be:	1cfb      	adds	r3, r7, #3
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d026      	beq.n	800c914 <VL53L0X_ref_calibration_io+0xd4>
		if (vhv_enable)
 800c8c6:	2328      	movs	r3, #40	; 0x28
 800c8c8:	18fb      	adds	r3, r7, r3
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00c      	beq.n	800c8ea <VL53L0X_ref_calibration_io+0xaa>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c8d0:	6a3a      	ldr	r2, [r7, #32]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	21cb      	movs	r1, #203	; 0xcb
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f003 f957 	bl	800fb8a <VL53L0X_RdByte>
 800c8dc:	0003      	movs	r3, r0
 800c8de:	0019      	movs	r1, r3
 800c8e0:	193b      	adds	r3, r7, r4
 800c8e2:	193a      	adds	r2, r7, r4
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800c8ea:	232c      	movs	r3, #44	; 0x2c
 800c8ec:	18fb      	adds	r3, r7, r3
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d037      	beq.n	800c964 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c8f4:	230e      	movs	r3, #14
 800c8f6:	18fa      	adds	r2, r7, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	21ee      	movs	r1, #238	; 0xee
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f003 f944 	bl	800fb8a <VL53L0X_RdByte>
 800c902:	0003      	movs	r3, r0
 800c904:	0019      	movs	r1, r3
 800c906:	220f      	movs	r2, #15
 800c908:	18bb      	adds	r3, r7, r2
 800c90a:	18ba      	adds	r2, r7, r2
 800c90c:	7812      	ldrb	r2, [r2, #0]
 800c90e:	430a      	orrs	r2, r1
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	e027      	b.n	800c964 <VL53L0X_ref_calibration_io+0x124>
	} else {
		if (vhv_enable)
 800c914:	2328      	movs	r3, #40	; 0x28
 800c916:	18fb      	adds	r3, r7, r3
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00e      	beq.n	800c93c <VL53L0X_ref_calibration_io+0xfc>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c91e:	1cbb      	adds	r3, r7, #2
 800c920:	781a      	ldrb	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	21cb      	movs	r1, #203	; 0xcb
 800c926:	0018      	movs	r0, r3
 800c928:	f003 f880 	bl	800fa2c <VL53L0X_WrByte>
 800c92c:	0003      	movs	r3, r0
 800c92e:	0019      	movs	r1, r3
 800c930:	220f      	movs	r2, #15
 800c932:	18bb      	adds	r3, r7, r2
 800c934:	18ba      	adds	r2, r7, r2
 800c936:	7812      	ldrb	r2, [r2, #0]
 800c938:	430a      	orrs	r2, r1
 800c93a:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800c93c:	232c      	movs	r3, #44	; 0x2c
 800c93e:	18fb      	adds	r3, r7, r3
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00e      	beq.n	800c964 <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c946:	1c7b      	adds	r3, r7, #1
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	2280      	movs	r2, #128	; 0x80
 800c94e:	21ee      	movs	r1, #238	; 0xee
 800c950:	f003 f8d4 	bl	800fafc <VL53L0X_UpdateByte>
 800c954:	0003      	movs	r3, r0
 800c956:	0019      	movs	r1, r3
 800c958:	220f      	movs	r2, #15
 800c95a:	18bb      	adds	r3, r7, r2
 800c95c:	18ba      	adds	r2, r7, r2
 800c95e:	7812      	ldrb	r2, [r2, #0]
 800c960:	430a      	orrs	r2, r1
 800c962:	701a      	strb	r2, [r3, #0]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	21ff      	movs	r1, #255	; 0xff
 800c96a:	0018      	movs	r0, r3
 800c96c:	f003 f85e 	bl	800fa2c <VL53L0X_WrByte>
 800c970:	0003      	movs	r3, r0
 800c972:	0019      	movs	r1, r3
 800c974:	240f      	movs	r4, #15
 800c976:	193b      	adds	r3, r7, r4
 800c978:	193a      	adds	r2, r7, r4
 800c97a:	7812      	ldrb	r2, [r2, #0]
 800c97c:	430a      	orrs	r2, r1
 800c97e:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	2100      	movs	r1, #0
 800c986:	0018      	movs	r0, r3
 800c988:	f003 f850 	bl	800fa2c <VL53L0X_WrByte>
 800c98c:	0003      	movs	r3, r0
 800c98e:	0019      	movs	r1, r3
 800c990:	193b      	adds	r3, r7, r4
 800c992:	193a      	adds	r2, r7, r4
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	430a      	orrs	r2, r1
 800c998:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	21ff      	movs	r1, #255	; 0xff
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	f003 f843 	bl	800fa2c <VL53L0X_WrByte>
 800c9a6:	0003      	movs	r3, r0
 800c9a8:	0019      	movs	r1, r3
 800c9aa:	0020      	movs	r0, r4
 800c9ac:	183b      	adds	r3, r7, r0
 800c9ae:	183a      	adds	r2, r7, r0
 800c9b0:	7812      	ldrb	r2, [r2, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	701a      	strb	r2, [r3, #0]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c9b6:	230e      	movs	r3, #14
 800c9b8:	18fb      	adds	r3, r7, r3
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2210      	movs	r2, #16
 800c9be:	4393      	bics	r3, r2
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c4:	701a      	strb	r2, [r3, #0]

	return Status;
 800c9c6:	183b      	adds	r3, r7, r0
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b25b      	sxtb	r3, r3
}
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	b005      	add	sp, #20
 800c9d2:	bd90      	pop	{r4, r7, pc}

0800c9d4 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d6:	b08b      	sub	sp, #44	; 0x2c
 800c9d8:	af04      	add	r7, sp, #16
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	0019      	movs	r1, r3
 800c9e0:	1dfb      	adds	r3, r7, #7
 800c9e2:	701a      	strb	r2, [r3, #0]
 800c9e4:	1dbb      	adds	r3, r7, #6
 800c9e6:	1c0a      	adds	r2, r1, #0
 800c9e8:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9ea:	2317      	movs	r3, #23
 800c9ec:	18fb      	adds	r3, r7, r3
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800c9f2:	2116      	movs	r1, #22
 800c9f4:	187b      	adds	r3, r7, r1
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800c9fa:	2315      	movs	r3, #21
 800c9fc:	18fb      	adds	r3, r7, r3
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800ca02:	2314      	movs	r3, #20
 800ca04:	18fb      	adds	r3, r7, r3
 800ca06:	2200      	movs	r2, #0
 800ca08:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalInt = 0;
 800ca0a:	2313      	movs	r3, #19
 800ca0c:	18fb      	adds	r3, r7, r3
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ca12:	1dbb      	adds	r3, r7, #6
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d005      	beq.n	800ca26 <VL53L0X_perform_vhv_calibration+0x52>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ca1a:	187b      	adds	r3, r7, r1
 800ca1c:	68f9      	ldr	r1, [r7, #12]
 800ca1e:	2298      	movs	r2, #152	; 0x98
 800ca20:	0052      	lsls	r2, r2, #1
 800ca22:	5c8a      	ldrb	r2, [r1, r2]
 800ca24:	701a      	strb	r2, [r3, #0]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800ca26:	2517      	movs	r5, #23
 800ca28:	197c      	adds	r4, r7, r5
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	2101      	movs	r1, #1
 800ca30:	0018      	movs	r0, r3
 800ca32:	f002 fffb 	bl	800fa2c <VL53L0X_WrByte>
 800ca36:	0003      	movs	r3, r0
 800ca38:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800ca3a:	197b      	adds	r3, r7, r5
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	b25b      	sxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d107      	bne.n	800ca54 <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800ca44:	197c      	adds	r4, r7, r5
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2140      	movs	r1, #64	; 0x40
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f7ff fea9 	bl	800c7a2 <VL53L0X_perform_single_ref_calibration>
 800ca50:	0003      	movs	r3, r0
 800ca52:	7023      	strb	r3, [r4, #0]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800ca54:	2217      	movs	r2, #23
 800ca56:	18bb      	adds	r3, r7, r2
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	b25b      	sxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d11b      	bne.n	800ca98 <VL53L0X_perform_vhv_calibration+0xc4>
 800ca60:	1dfb      	adds	r3, r7, #7
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d117      	bne.n	800ca98 <VL53L0X_perform_vhv_calibration+0xc4>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800ca68:	18bc      	adds	r4, r7, r2
 800ca6a:	2314      	movs	r3, #20
 800ca6c:	18fb      	adds	r3, r7, r3
 800ca6e:	7819      	ldrb	r1, [r3, #0]
 800ca70:	2315      	movs	r3, #21
 800ca72:	18fb      	adds	r3, r7, r3
 800ca74:	781a      	ldrb	r2, [r3, #0]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9303      	str	r3, [sp, #12]
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	2313      	movs	r3, #19
 800ca82:	18fb      	adds	r3, r7, r3
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	000b      	movs	r3, r1
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	f7ff fed7 	bl	800c840 <VL53L0X_ref_calibration_io>
 800ca92:	0003      	movs	r3, r0
 800ca94:	7023      	strb	r3, [r4, #0]
 800ca96:	e002      	b.n	800ca9e <VL53L0X_perform_vhv_calibration+0xca>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800ca9e:	2517      	movs	r5, #23
 800caa0:	197b      	adds	r3, r7, r5
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	b25b      	sxtb	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d119      	bne.n	800cade <VL53L0X_perform_vhv_calibration+0x10a>
 800caaa:	1dbb      	adds	r3, r7, #6
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d015      	beq.n	800cade <VL53L0X_perform_vhv_calibration+0x10a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cab2:	197c      	adds	r4, r7, r5
 800cab4:	2616      	movs	r6, #22
 800cab6:	19bb      	adds	r3, r7, r6
 800cab8:	781a      	ldrb	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2101      	movs	r1, #1
 800cabe:	0018      	movs	r0, r3
 800cac0:	f002 ffb4 	bl	800fa2c <VL53L0X_WrByte>
 800cac4:	0003      	movs	r3, r0
 800cac6:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cac8:	197b      	adds	r3, r7, r5
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	b25b      	sxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d105      	bne.n	800cade <VL53L0X_perform_vhv_calibration+0x10a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	19b9      	adds	r1, r7, r6
 800cad6:	2398      	movs	r3, #152	; 0x98
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	7809      	ldrb	r1, [r1, #0]
 800cadc:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800cade:	2317      	movs	r3, #23
 800cae0:	18fb      	adds	r3, r7, r3
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b25b      	sxtb	r3, r3
}
 800cae6:	0018      	movs	r0, r3
 800cae8:	46bd      	mov	sp, r7
 800caea:	b007      	add	sp, #28
 800caec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800caee <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800caee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caf0:	b08b      	sub	sp, #44	; 0x2c
 800caf2:	af04      	add	r7, sp, #16
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	0019      	movs	r1, r3
 800cafa:	1dfb      	adds	r3, r7, #7
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	1dbb      	adds	r3, r7, #6
 800cb00:	1c0a      	adds	r2, r1, #0
 800cb02:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb04:	2317      	movs	r3, #23
 800cb06:	18fb      	adds	r3, r7, r3
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800cb0c:	2116      	movs	r1, #22
 800cb0e:	187b      	adds	r3, r7, r1
 800cb10:	2200      	movs	r2, #0
 800cb12:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800cb14:	2315      	movs	r3, #21
 800cb16:	18fb      	adds	r3, r7, r3
 800cb18:	2200      	movs	r2, #0
 800cb1a:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800cb1c:	2314      	movs	r3, #20
 800cb1e:	18fb      	adds	r3, r7, r3
 800cb20:	2200      	movs	r2, #0
 800cb22:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800cb24:	1dbb      	adds	r3, r7, #6
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <VL53L0X_perform_phase_calibration+0x4a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cb2c:	187b      	adds	r3, r7, r1
 800cb2e:	68f9      	ldr	r1, [r7, #12]
 800cb30:	2298      	movs	r2, #152	; 0x98
 800cb32:	0052      	lsls	r2, r2, #1
 800cb34:	5c8a      	ldrb	r2, [r1, r2]
 800cb36:	701a      	strb	r2, [r3, #0]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800cb38:	2517      	movs	r5, #23
 800cb3a:	197c      	adds	r4, r7, r5
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2202      	movs	r2, #2
 800cb40:	2101      	movs	r1, #1
 800cb42:	0018      	movs	r0, r3
 800cb44:	f002 ff72 	bl	800fa2c <VL53L0X_WrByte>
 800cb48:	0003      	movs	r3, r0
 800cb4a:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800cb4c:	197b      	adds	r3, r7, r5
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	b25b      	sxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d107      	bne.n	800cb66 <VL53L0X_perform_phase_calibration+0x78>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800cb56:	197c      	adds	r4, r7, r5
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f7ff fe20 	bl	800c7a2 <VL53L0X_perform_single_ref_calibration>
 800cb62:	0003      	movs	r3, r0
 800cb64:	7023      	strb	r3, [r4, #0]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800cb66:	2217      	movs	r2, #23
 800cb68:	18bb      	adds	r3, r7, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	b25b      	sxtb	r3, r3
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11b      	bne.n	800cbaa <VL53L0X_perform_phase_calibration+0xbc>
 800cb72:	1dfb      	adds	r3, r7, #7
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d117      	bne.n	800cbaa <VL53L0X_perform_phase_calibration+0xbc>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800cb7a:	18bc      	adds	r4, r7, r2
 800cb7c:	2314      	movs	r3, #20
 800cb7e:	18fb      	adds	r3, r7, r3
 800cb80:	7819      	ldrb	r1, [r3, #0]
 800cb82:	2315      	movs	r3, #21
 800cb84:	18fb      	adds	r3, r7, r3
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	9303      	str	r3, [sp, #12]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	9302      	str	r3, [sp, #8]
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	2313      	movs	r3, #19
 800cb98:	18fb      	adds	r3, r7, r3
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	000b      	movs	r3, r1
 800cb9e:	2101      	movs	r1, #1
 800cba0:	f7ff fe4e 	bl	800c840 <VL53L0X_ref_calibration_io>
 800cba4:	0003      	movs	r3, r0
 800cba6:	7023      	strb	r3, [r4, #0]
 800cba8:	e002      	b.n	800cbb0 <VL53L0X_perform_phase_calibration+0xc2>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800cbb0:	2517      	movs	r5, #23
 800cbb2:	197b      	adds	r3, r7, r5
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	b25b      	sxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d119      	bne.n	800cbf0 <VL53L0X_perform_phase_calibration+0x102>
 800cbbc:	1dbb      	adds	r3, r7, #6
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d015      	beq.n	800cbf0 <VL53L0X_perform_phase_calibration+0x102>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cbc4:	197c      	adds	r4, r7, r5
 800cbc6:	2616      	movs	r6, #22
 800cbc8:	19bb      	adds	r3, r7, r6
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2101      	movs	r1, #1
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f002 ff2b 	bl	800fa2c <VL53L0X_WrByte>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cbda:	197b      	adds	r3, r7, r5
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	b25b      	sxtb	r3, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d105      	bne.n	800cbf0 <VL53L0X_perform_phase_calibration+0x102>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	19b9      	adds	r1, r7, r6
 800cbe8:	2398      	movs	r3, #152	; 0x98
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	7809      	ldrb	r1, [r1, #0]
 800cbee:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800cbf0:	2317      	movs	r3, #23
 800cbf2:	18fb      	adds	r3, r7, r3
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	b25b      	sxtb	r3, r3
}
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	b007      	add	sp, #28
 800cbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc00 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	001a      	movs	r2, r3
 800cc0e:	1cfb      	adds	r3, r7, #3
 800cc10:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc12:	2017      	movs	r0, #23
 800cc14:	183b      	adds	r3, r7, r0
 800cc16:	2200      	movs	r2, #0
 800cc18:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800cc1a:	2116      	movs	r1, #22
 800cc1c:	187b      	adds	r3, r7, r1
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cc22:	187b      	adds	r3, r7, r1
 800cc24:	68f9      	ldr	r1, [r7, #12]
 800cc26:	2298      	movs	r2, #152	; 0x98
 800cc28:	0052      	lsls	r2, r2, #1
 800cc2a:	5c8a      	ldrb	r2, [r1, r2]
 800cc2c:	701a      	strb	r2, [r3, #0]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800cc2e:	0005      	movs	r5, r0
 800cc30:	183c      	adds	r4, r7, r0
 800cc32:	1cfb      	adds	r3, r7, #3
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f7ff feca 	bl	800c9d4 <VL53L0X_perform_vhv_calibration>
 800cc40:	0003      	movs	r3, r0
 800cc42:	7023      	strb	r3, [r4, #0]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800cc44:	197b      	adds	r3, r7, r5
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	b25b      	sxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d109      	bne.n	800cc62 <VL53L0X_perform_ref_calibration+0x62>
		Status = VL53L0X_perform_phase_calibration(
 800cc4e:	197c      	adds	r4, r7, r5
 800cc50:	1cfb      	adds	r3, r7, #3
 800cc52:	781a      	ldrb	r2, [r3, #0]
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f7ff ff48 	bl	800caee <VL53L0X_perform_phase_calibration>
 800cc5e:	0003      	movs	r3, r0
 800cc60:	7023      	strb	r3, [r4, #0]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800cc62:	2517      	movs	r5, #23
 800cc64:	197b      	adds	r3, r7, r5
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	b25b      	sxtb	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d115      	bne.n	800cc9a <VL53L0X_perform_ref_calibration+0x9a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cc6e:	197c      	adds	r4, r7, r5
 800cc70:	2616      	movs	r6, #22
 800cc72:	19bb      	adds	r3, r7, r6
 800cc74:	781a      	ldrb	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2101      	movs	r1, #1
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	f002 fed6 	bl	800fa2c <VL53L0X_WrByte>
 800cc80:	0003      	movs	r3, r0
 800cc82:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cc84:	197b      	adds	r3, r7, r5
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	b25b      	sxtb	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d105      	bne.n	800cc9a <VL53L0X_perform_ref_calibration+0x9a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	19b9      	adds	r1, r7, r6
 800cc92:	2398      	movs	r3, #152	; 0x98
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	7809      	ldrb	r1, [r1, #0]
 800cc98:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800cc9a:	2317      	movs	r3, #23
 800cc9c:	18fb      	adds	r3, r7, r3
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	b25b      	sxtb	r3, r3
}
 800cca2:	0018      	movs	r0, r3
 800cca4:	46bd      	mov	sp, r7
 800cca6:	b007      	add	sp, #28
 800cca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccaa <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800ccaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccac:	b087      	sub	sp, #28
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccb2:	2317      	movs	r3, #23
 800ccb4:	18fb      	adds	r3, r7, r3
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
	uint8_t NewDataReady = 0;
 800ccba:	230f      	movs	r3, #15
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800ccc6:	2517      	movs	r5, #23
 800ccc8:	197c      	adds	r4, r7, r5
 800ccca:	260f      	movs	r6, #15
 800cccc:	19ba      	adds	r2, r7, r6
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	0011      	movs	r1, r2
 800ccd2:	0018      	movs	r0, r3
 800ccd4:	f7fe fb9b 	bl	800b40e <VL53L0X_GetMeasurementDataReady>
 800ccd8:	0003      	movs	r3, r0
 800ccda:	7023      	strb	r3, [r4, #0]
		if (Status != 0)
 800ccdc:	0029      	movs	r1, r5
 800ccde:	187b      	adds	r3, r7, r1
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	b25b      	sxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d114      	bne.n	800cd12 <VL53L0X_measurement_poll_for_completion+0x68>
			break; /* the error is set */

		if (NewDataReady == 1)
 800cce8:	19bb      	adds	r3, r7, r6
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d012      	beq.n	800cd16 <VL53L0X_measurement_poll_for_completion+0x6c>
			break; /* done note that status == 0 */

		LoopNb++;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	23fa      	movs	r3, #250	; 0xfa
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d303      	bcc.n	800cd08 <VL53L0X_measurement_poll_for_completion+0x5e>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cd00:	187b      	adds	r3, r7, r1
 800cd02:	22f9      	movs	r2, #249	; 0xf9
 800cd04:	701a      	strb	r2, [r3, #0]
			break;
 800cd06:	e007      	b.n	800cd18 <VL53L0X_measurement_poll_for_completion+0x6e>
		}

		VL53L0X_PollingDelay(Dev);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	f002 fffa 	bl	800fd04 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800cd10:	e7d9      	b.n	800ccc6 <VL53L0X_measurement_poll_for_completion+0x1c>
			break; /* the error is set */
 800cd12:	46c0      	nop			; (mov r8, r8)
 800cd14:	e000      	b.n	800cd18 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* done note that status == 0 */
 800cd16:	46c0      	nop			; (mov r8, r8)
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800cd18:	2317      	movs	r3, #23
 800cd1a:	18fb      	adds	r3, r7, r3
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	b25b      	sxtb	r3, r3
}
 800cd20:	0018      	movs	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	b007      	add	sp, #28
 800cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd28 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	0002      	movs	r2, r0
 800cd30:	1dfb      	adds	r3, r7, #7
 800cd32:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cd34:	210f      	movs	r1, #15
 800cd36:	187b      	adds	r3, r7, r1
 800cd38:	2200      	movs	r2, #0
 800cd3a:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cd3c:	1dfb      	adds	r3, r7, #7
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	187a      	adds	r2, r7, r1
 800cd46:	18db      	adds	r3, r3, r3
 800cd48:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 800cd4a:	187b      	adds	r3, r7, r1
 800cd4c:	781b      	ldrb	r3, [r3, #0]
}
 800cd4e:	0018      	movs	r0, r3
 800cd50:	46bd      	mov	sp, r7
 800cd52:	b004      	add	sp, #16
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b084      	sub	sp, #16
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	0002      	movs	r2, r0
 800cd5e:	1dfb      	adds	r3, r7, #7
 800cd60:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800cd62:	210f      	movs	r1, #15
 800cd64:	187b      	adds	r3, r7, r1
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800cd6a:	1dfb      	adds	r3, r7, #7
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	085b      	lsrs	r3, r3, #1
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	187b      	adds	r3, r7, r1
 800cd74:	3a01      	subs	r2, #1
 800cd76:	701a      	strb	r2, [r3, #0]

	return vcsel_period_reg;
 800cd78:	187b      	adds	r3, r7, r1
 800cd7a:	781b      	ldrb	r3, [r3, #0]
}
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	b004      	add	sp, #16
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800cd90:	2380      	movs	r3, #128	; 0x80
 800cd92:	05db      	lsls	r3, r3, #23
 800cd94:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800cd96:	e002      	b.n	800cd9e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	089b      	lsrs	r3, r3, #2
 800cd9c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d8f8      	bhi.n	800cd98 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800cda6:	e017      	b.n	800cdd8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	18d3      	adds	r3, r2, r3
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d30b      	bcc.n	800cdcc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	18d3      	adds	r3, r2, r3
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	085b      	lsrs	r3, r3, #1
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	18d3      	adds	r3, r2, r3
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	e002      	b.n	800cdd2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	085b      	lsrs	r3, r3, #1
 800cdd0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	089b      	lsrs	r3, r3, #2
 800cdd6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e4      	bne.n	800cda8 <VL53L0X_isqrt+0x24>
	}

	return res;
 800cdde:	68fb      	ldr	r3, [r7, #12]
}
 800cde0:	0018      	movs	r0, r3
 800cde2:	46bd      	mov	sp, r7
 800cde4:	b004      	add	sp, #16
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdf0:	2417      	movs	r4, #23
 800cdf2:	193b      	adds	r3, r7, r4
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	701a      	strb	r2, [r3, #0]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2183      	movs	r1, #131	; 0x83
 800cdfe:	0018      	movs	r0, r3
 800ce00:	f002 fe14 	bl	800fa2c <VL53L0X_WrByte>
 800ce04:	0003      	movs	r3, r0
 800ce06:	0019      	movs	r1, r3
 800ce08:	193b      	adds	r3, r7, r4
 800ce0a:	193a      	adds	r2, r7, r4
 800ce0c:	7812      	ldrb	r2, [r2, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	701a      	strb	r2, [r3, #0]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800ce12:	193b      	adds	r3, r7, r4
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	b25b      	sxtb	r3, r3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d126      	bne.n	800ce6a <VL53L0X_device_read_strobe+0x82>
		LoopNb = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800ce20:	2617      	movs	r6, #23
 800ce22:	19bc      	adds	r4, r7, r6
 800ce24:	250f      	movs	r5, #15
 800ce26:	197a      	adds	r2, r7, r5
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2183      	movs	r1, #131	; 0x83
 800ce2c:	0018      	movs	r0, r3
 800ce2e:	f002 feac 	bl	800fb8a <VL53L0X_RdByte>
 800ce32:	0003      	movs	r3, r0
 800ce34:	7023      	strb	r3, [r4, #0]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800ce36:	197b      	adds	r3, r7, r5
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10c      	bne.n	800ce58 <VL53L0X_device_read_strobe+0x70>
 800ce3e:	19bb      	adds	r3, r7, r6
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	b25b      	sxtb	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d107      	bne.n	800ce58 <VL53L0X_device_read_strobe+0x70>
					break;

			LoopNb = LoopNb + 1;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	23fa      	movs	r3, #250	; 0xfa
 800ce52:	00db      	lsls	r3, r3, #3
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d3e3      	bcc.n	800ce20 <VL53L0X_device_read_strobe+0x38>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	23fa      	movs	r3, #250	; 0xfa
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d303      	bcc.n	800ce6a <VL53L0X_device_read_strobe+0x82>
			Status = VL53L0X_ERROR_TIME_OUT;
 800ce62:	2317      	movs	r3, #23
 800ce64:	18fb      	adds	r3, r7, r3
 800ce66:	22f9      	movs	r2, #249	; 0xf9
 800ce68:	701a      	strb	r2, [r3, #0]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	2183      	movs	r1, #131	; 0x83
 800ce70:	0018      	movs	r0, r3
 800ce72:	f002 fddb 	bl	800fa2c <VL53L0X_WrByte>
 800ce76:	0003      	movs	r3, r0
 800ce78:	0019      	movs	r1, r3
 800ce7a:	2017      	movs	r0, #23
 800ce7c:	183b      	adds	r3, r7, r0
 800ce7e:	183a      	adds	r2, r7, r0
 800ce80:	7812      	ldrb	r2, [r2, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800ce86:	183b      	adds	r3, r7, r0
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b25b      	sxtb	r3, r3

}
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	b007      	add	sp, #28
 800ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce94 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce96:	b099      	sub	sp, #100	; 0x64
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	000a      	movs	r2, r1
 800ce9e:	1cfb      	adds	r3, r7, #3
 800cea0:	701a      	strb	r2, [r3, #0]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cea2:	245f      	movs	r4, #95	; 0x5f
 800cea4:	193b      	adds	r3, r7, r4
 800cea6:	2200      	movs	r2, #0
 800cea8:	701a      	strb	r2, [r3, #0]
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800ceaa:	235e      	movs	r3, #94	; 0x5e
 800ceac:	18fb      	adds	r3, r7, r3
 800ceae:	2200      	movs	r2, #0
 800ceb0:	701a      	strb	r2, [r3, #0]
	uint8_t ReferenceSpadType = 0;
 800ceb2:	225d      	movs	r2, #93	; 0x5d
 800ceb4:	18bb      	adds	r3, r7, r2
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
	uint32_t PartUIDUpper = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800cec6:	215a      	movs	r1, #90	; 0x5a
 800cec8:	187b      	adds	r3, r7, r1
 800ceca:	2200      	movs	r2, #0
 800cecc:	801a      	strh	r2, [r3, #0]
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800cece:	23c8      	movs	r3, #200	; 0xc8
 800ced0:	015b      	lsls	r3, r3, #5
 800ced2:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800cee0:	253f      	movs	r5, #63	; 0x3f
 800cee2:	197b      	adds	r3, r7, r5
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	21f0      	movs	r1, #240	; 0xf0
 800cee8:	5c52      	ldrb	r2, [r2, r1]
 800ceea:	701a      	strb	r2, [r3, #0]
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ceec:	197b      	adds	r3, r7, r5
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b07      	cmp	r3, #7
 800cef2:	d101      	bne.n	800cef8 <VL53L0X_get_info_from_device+0x64>
 800cef4:	f000 fc51 	bl	800d79a <VL53L0X_get_info_from_device+0x906>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	2180      	movs	r1, #128	; 0x80
 800cefe:	0018      	movs	r0, r3
 800cf00:	f002 fd94 	bl	800fa2c <VL53L0X_WrByte>
 800cf04:	0003      	movs	r3, r0
 800cf06:	0019      	movs	r1, r3
 800cf08:	193b      	adds	r3, r7, r4
 800cf0a:	193a      	adds	r2, r7, r4
 800cf0c:	7812      	ldrb	r2, [r2, #0]
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	21ff      	movs	r1, #255	; 0xff
 800cf18:	0018      	movs	r0, r3
 800cf1a:	f002 fd87 	bl	800fa2c <VL53L0X_WrByte>
 800cf1e:	0003      	movs	r3, r0
 800cf20:	0019      	movs	r1, r3
 800cf22:	193b      	adds	r3, r7, r4
 800cf24:	193a      	adds	r2, r7, r4
 800cf26:	7812      	ldrb	r2, [r2, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	0018      	movs	r0, r3
 800cf34:	f002 fd7a 	bl	800fa2c <VL53L0X_WrByte>
 800cf38:	0003      	movs	r3, r0
 800cf3a:	0019      	movs	r1, r3
 800cf3c:	193b      	adds	r3, r7, r4
 800cf3e:	193a      	adds	r2, r7, r4
 800cf40:	7812      	ldrb	r2, [r2, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2206      	movs	r2, #6
 800cf4a:	21ff      	movs	r1, #255	; 0xff
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f002 fd6d 	bl	800fa2c <VL53L0X_WrByte>
 800cf52:	0003      	movs	r3, r0
 800cf54:	0019      	movs	r1, r3
 800cf56:	193b      	adds	r3, r7, r4
 800cf58:	193a      	adds	r2, r7, r4
 800cf5a:	7812      	ldrb	r2, [r2, #0]
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800cf60:	2637      	movs	r6, #55	; 0x37
 800cf62:	19ba      	adds	r2, r7, r6
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2183      	movs	r1, #131	; 0x83
 800cf68:	0018      	movs	r0, r3
 800cf6a:	f002 fe0e 	bl	800fb8a <VL53L0X_RdByte>
 800cf6e:	0003      	movs	r3, r0
 800cf70:	0019      	movs	r1, r3
 800cf72:	193b      	adds	r3, r7, r4
 800cf74:	193a      	adds	r2, r7, r4
 800cf76:	7812      	ldrb	r2, [r2, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800cf7c:	19bb      	adds	r3, r7, r6
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	2204      	movs	r2, #4
 800cf82:	4313      	orrs	r3, r2
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2183      	movs	r1, #131	; 0x83
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	f002 fd4e 	bl	800fa2c <VL53L0X_WrByte>
 800cf90:	0003      	movs	r3, r0
 800cf92:	0019      	movs	r1, r3
 800cf94:	193b      	adds	r3, r7, r4
 800cf96:	193a      	adds	r2, r7, r4
 800cf98:	7812      	ldrb	r2, [r2, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2207      	movs	r2, #7
 800cfa2:	21ff      	movs	r1, #255	; 0xff
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f002 fd41 	bl	800fa2c <VL53L0X_WrByte>
 800cfaa:	0003      	movs	r3, r0
 800cfac:	0019      	movs	r1, r3
 800cfae:	193b      	adds	r3, r7, r4
 800cfb0:	193a      	adds	r2, r7, r4
 800cfb2:	7812      	ldrb	r2, [r2, #0]
 800cfb4:	430a      	orrs	r2, r1
 800cfb6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	2181      	movs	r1, #129	; 0x81
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	f002 fd34 	bl	800fa2c <VL53L0X_WrByte>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	0019      	movs	r1, r3
 800cfc8:	193b      	adds	r3, r7, r4
 800cfca:	193a      	adds	r2, r7, r4
 800cfcc:	7812      	ldrb	r2, [r2, #0]
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_PollingDelay(Dev);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	f002 fe95 	bl	800fd04 <VL53L0X_PollingDelay>
 800cfda:	0003      	movs	r3, r0
 800cfdc:	0019      	movs	r1, r3
 800cfde:	193b      	adds	r3, r7, r4
 800cfe0:	193a      	adds	r2, r7, r4
 800cfe2:	7812      	ldrb	r2, [r2, #0]
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	2180      	movs	r1, #128	; 0x80
 800cfee:	0018      	movs	r0, r3
 800cff0:	f002 fd1c 	bl	800fa2c <VL53L0X_WrByte>
 800cff4:	0003      	movs	r3, r0
 800cff6:	0019      	movs	r1, r3
 800cff8:	193b      	adds	r3, r7, r4
 800cffa:	193a      	adds	r2, r7, r4
 800cffc:	7812      	ldrb	r2, [r2, #0]
 800cffe:	430a      	orrs	r2, r1
 800d000:	701a      	strb	r2, [r3, #0]

		if (((option & 1) == 1) &&
 800d002:	1cfb      	adds	r3, r7, #3
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2201      	movs	r2, #1
 800d008:	4013      	ands	r3, r2
 800d00a:	d100      	bne.n	800d00e <VL53L0X_get_info_from_device+0x17a>
 800d00c:	e0a3      	b.n	800d156 <VL53L0X_get_info_from_device+0x2c2>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d00e:	197b      	adds	r3, r7, r5
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2201      	movs	r2, #1
 800d014:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800d016:	d000      	beq.n	800d01a <VL53L0X_get_info_from_device+0x186>
 800d018:	e09d      	b.n	800d156 <VL53L0X_get_info_from_device+0x2c2>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	226b      	movs	r2, #107	; 0x6b
 800d01e:	2194      	movs	r1, #148	; 0x94
 800d020:	0018      	movs	r0, r3
 800d022:	f002 fd03 	bl	800fa2c <VL53L0X_WrByte>
 800d026:	0003      	movs	r3, r0
 800d028:	0019      	movs	r1, r3
 800d02a:	193b      	adds	r3, r7, r4
 800d02c:	193a      	adds	r2, r7, r4
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	430a      	orrs	r2, r1
 800d032:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	0018      	movs	r0, r3
 800d038:	f7ff fed6 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d03c:	0003      	movs	r3, r0
 800d03e:	0019      	movs	r1, r3
 800d040:	193b      	adds	r3, r7, r4
 800d042:	193a      	adds	r2, r7, r4
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	430a      	orrs	r2, r1
 800d048:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d04a:	2630      	movs	r6, #48	; 0x30
 800d04c:	19ba      	adds	r2, r7, r6
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2190      	movs	r1, #144	; 0x90
 800d052:	0018      	movs	r0, r3
 800d054:	f002 fe10 	bl	800fc78 <VL53L0X_RdDWord>
 800d058:	0003      	movs	r3, r0
 800d05a:	0019      	movs	r1, r3
 800d05c:	193b      	adds	r3, r7, r4
 800d05e:	193a      	adds	r2, r7, r4
 800d060:	7812      	ldrb	r2, [r2, #0]
 800d062:	430a      	orrs	r2, r1
 800d064:	701a      	strb	r2, [r3, #0]

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	0a1b      	lsrs	r3, r3, #8
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	235e      	movs	r3, #94	; 0x5e
 800d06e:	18fb      	adds	r3, r7, r3
 800d070:	217f      	movs	r1, #127	; 0x7f
 800d072:	400a      	ands	r2, r1
 800d074:	701a      	strb	r2, [r3, #0]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	0bdb      	lsrs	r3, r3, #15
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	235d      	movs	r3, #93	; 0x5d
 800d07e:	18fb      	adds	r3, r7, r3
 800d080:	2101      	movs	r1, #1
 800d082:	400a      	ands	r2, r1
 800d084:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2224      	movs	r2, #36	; 0x24
 800d08a:	2194      	movs	r1, #148	; 0x94
 800d08c:	0018      	movs	r0, r3
 800d08e:	f002 fccd 	bl	800fa2c <VL53L0X_WrByte>
 800d092:	0003      	movs	r3, r0
 800d094:	0019      	movs	r1, r3
 800d096:	193b      	adds	r3, r7, r4
 800d098:	193a      	adds	r2, r7, r4
 800d09a:	7812      	ldrb	r2, [r2, #0]
 800d09c:	430a      	orrs	r2, r1
 800d09e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f7ff fea0 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d0a8:	0003      	movs	r3, r0
 800d0aa:	0019      	movs	r1, r3
 800d0ac:	193b      	adds	r3, r7, r4
 800d0ae:	193a      	adds	r2, r7, r4
 800d0b0:	7812      	ldrb	r2, [r2, #0]
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d0b6:	19ba      	adds	r2, r7, r6
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2190      	movs	r1, #144	; 0x90
 800d0bc:	0018      	movs	r0, r3
 800d0be:	f002 fddb 	bl	800fc78 <VL53L0X_RdDWord>
 800d0c2:	0003      	movs	r3, r0
 800d0c4:	0019      	movs	r1, r3
 800d0c6:	193b      	adds	r3, r7, r4
 800d0c8:	193a      	adds	r2, r7, r4
 800d0ca:	7812      	ldrb	r2, [r2, #0]
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	701a      	strb	r2, [r3, #0]


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	0e1b      	lsrs	r3, r3, #24
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	2508      	movs	r5, #8
 800d0d8:	197b      	adds	r3, r7, r5
 800d0da:	701a      	strb	r2, [r3, #0]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	0c1b      	lsrs	r3, r3, #16
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	197b      	adds	r3, r7, r5
 800d0e4:	705a      	strb	r2, [r3, #1]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	0a1b      	lsrs	r3, r3, #8
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	197b      	adds	r3, r7, r5
 800d0ee:	709a      	strb	r2, [r3, #2]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	197b      	adds	r3, r7, r5
 800d0f6:	70da      	strb	r2, [r3, #3]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2225      	movs	r2, #37	; 0x25
 800d0fc:	2194      	movs	r1, #148	; 0x94
 800d0fe:	0018      	movs	r0, r3
 800d100:	f002 fc94 	bl	800fa2c <VL53L0X_WrByte>
 800d104:	0003      	movs	r3, r0
 800d106:	0019      	movs	r1, r3
 800d108:	193b      	adds	r3, r7, r4
 800d10a:	193a      	adds	r2, r7, r4
 800d10c:	7812      	ldrb	r2, [r2, #0]
 800d10e:	430a      	orrs	r2, r1
 800d110:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	0018      	movs	r0, r3
 800d116:	f7ff fe67 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d11a:	0003      	movs	r3, r0
 800d11c:	0019      	movs	r1, r3
 800d11e:	193b      	adds	r3, r7, r4
 800d120:	193a      	adds	r2, r7, r4
 800d122:	7812      	ldrb	r2, [r2, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d128:	19ba      	adds	r2, r7, r6
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2190      	movs	r1, #144	; 0x90
 800d12e:	0018      	movs	r0, r3
 800d130:	f002 fda2 	bl	800fc78 <VL53L0X_RdDWord>
 800d134:	0003      	movs	r3, r0
 800d136:	0019      	movs	r1, r3
 800d138:	193b      	adds	r3, r7, r4
 800d13a:	193a      	adds	r2, r7, r4
 800d13c:	7812      	ldrb	r2, [r2, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	701a      	strb	r2, [r3, #0]

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	0e1b      	lsrs	r3, r3, #24
 800d146:	b2da      	uxtb	r2, r3
 800d148:	197b      	adds	r3, r7, r5
 800d14a:	711a      	strb	r2, [r3, #4]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	0c1b      	lsrs	r3, r3, #16
 800d150:	b2da      	uxtb	r2, r3
 800d152:	197b      	adds	r3, r7, r5
 800d154:	715a      	strb	r2, [r3, #5]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d156:	1cfb      	adds	r3, r7, #3
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2202      	movs	r2, #2
 800d15c:	4013      	ands	r3, r2
 800d15e:	d100      	bne.n	800d162 <VL53L0X_get_info_from_device+0x2ce>
 800d160:	e1aa      	b.n	800d4b8 <VL53L0X_get_info_from_device+0x624>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d162:	233f      	movs	r3, #63	; 0x3f
 800d164:	18fb      	adds	r3, r7, r3
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2202      	movs	r2, #2
 800d16a:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800d16c:	d000      	beq.n	800d170 <VL53L0X_get_info_from_device+0x2dc>
 800d16e:	e1a3      	b.n	800d4b8 <VL53L0X_get_info_from_device+0x624>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2202      	movs	r2, #2
 800d174:	2194      	movs	r1, #148	; 0x94
 800d176:	0018      	movs	r0, r3
 800d178:	f002 fc58 	bl	800fa2c <VL53L0X_WrByte>
 800d17c:	0003      	movs	r3, r0
 800d17e:	0019      	movs	r1, r3
 800d180:	245f      	movs	r4, #95	; 0x5f
 800d182:	193b      	adds	r3, r7, r4
 800d184:	193a      	adds	r2, r7, r4
 800d186:	7812      	ldrb	r2, [r2, #0]
 800d188:	430a      	orrs	r2, r1
 800d18a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	0018      	movs	r0, r3
 800d190:	f7ff fe2a 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d194:	0003      	movs	r3, r0
 800d196:	0019      	movs	r1, r3
 800d198:	193b      	adds	r3, r7, r4
 800d19a:	193a      	adds	r2, r7, r4
 800d19c:	7812      	ldrb	r2, [r2, #0]
 800d19e:	430a      	orrs	r2, r1
 800d1a0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d1a2:	232f      	movs	r3, #47	; 0x2f
 800d1a4:	18fa      	adds	r2, r7, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2190      	movs	r1, #144	; 0x90
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	f002 fced 	bl	800fb8a <VL53L0X_RdByte>
 800d1b0:	0003      	movs	r3, r0
 800d1b2:	0019      	movs	r1, r3
 800d1b4:	193b      	adds	r3, r7, r4
 800d1b6:	193a      	adds	r2, r7, r4
 800d1b8:	7812      	ldrb	r2, [r2, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	227b      	movs	r2, #123	; 0x7b
 800d1c2:	2194      	movs	r1, #148	; 0x94
 800d1c4:	0018      	movs	r0, r3
 800d1c6:	f002 fc31 	bl	800fa2c <VL53L0X_WrByte>
 800d1ca:	0003      	movs	r3, r0
 800d1cc:	0019      	movs	r1, r3
 800d1ce:	193b      	adds	r3, r7, r4
 800d1d0:	193a      	adds	r2, r7, r4
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	0018      	movs	r0, r3
 800d1dc:	f7ff fe04 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d1e0:	0003      	movs	r3, r0
 800d1e2:	0019      	movs	r1, r3
 800d1e4:	193b      	adds	r3, r7, r4
 800d1e6:	193a      	adds	r2, r7, r4
 800d1e8:	7812      	ldrb	r2, [r2, #0]
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d1ee:	232e      	movs	r3, #46	; 0x2e
 800d1f0:	18fa      	adds	r2, r7, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2190      	movs	r1, #144	; 0x90
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f002 fcc7 	bl	800fb8a <VL53L0X_RdByte>
 800d1fc:	0003      	movs	r3, r0
 800d1fe:	0019      	movs	r1, r3
 800d200:	193b      	adds	r3, r7, r4
 800d202:	193a      	adds	r2, r7, r4
 800d204:	7812      	ldrb	r2, [r2, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2277      	movs	r2, #119	; 0x77
 800d20e:	2194      	movs	r1, #148	; 0x94
 800d210:	0018      	movs	r0, r3
 800d212:	f002 fc0b 	bl	800fa2c <VL53L0X_WrByte>
 800d216:	0003      	movs	r3, r0
 800d218:	0019      	movs	r1, r3
 800d21a:	193b      	adds	r3, r7, r4
 800d21c:	193a      	adds	r2, r7, r4
 800d21e:	7812      	ldrb	r2, [r2, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	0018      	movs	r0, r3
 800d228:	f7ff fdde 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d22c:	0003      	movs	r3, r0
 800d22e:	0019      	movs	r1, r3
 800d230:	193b      	adds	r3, r7, r4
 800d232:	193a      	adds	r2, r7, r4
 800d234:	7812      	ldrb	r2, [r2, #0]
 800d236:	430a      	orrs	r2, r1
 800d238:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d23a:	2330      	movs	r3, #48	; 0x30
 800d23c:	18fa      	adds	r2, r7, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2190      	movs	r1, #144	; 0x90
 800d242:	0018      	movs	r0, r3
 800d244:	f002 fd18 	bl	800fc78 <VL53L0X_RdDWord>
 800d248:	0003      	movs	r3, r0
 800d24a:	0019      	movs	r1, r3
 800d24c:	193b      	adds	r3, r7, r4
 800d24e:	193a      	adds	r2, r7, r4
 800d250:	7812      	ldrb	r2, [r2, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	701a      	strb	r2, [r3, #0]

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	0e5b      	lsrs	r3, r3, #25
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	227f      	movs	r2, #127	; 0x7f
 800d25e:	4013      	ands	r3, r2
 800d260:	b2da      	uxtb	r2, r3
 800d262:	2510      	movs	r5, #16
 800d264:	197b      	adds	r3, r7, r5
 800d266:	701a      	strb	r2, [r3, #0]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	0c9b      	lsrs	r3, r3, #18
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	227f      	movs	r2, #127	; 0x7f
 800d270:	4013      	ands	r3, r2
 800d272:	b2da      	uxtb	r2, r3
 800d274:	197b      	adds	r3, r7, r5
 800d276:	705a      	strb	r2, [r3, #1]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	0adb      	lsrs	r3, r3, #11
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	227f      	movs	r2, #127	; 0x7f
 800d280:	4013      	ands	r3, r2
 800d282:	b2da      	uxtb	r2, r3
 800d284:	197b      	adds	r3, r7, r5
 800d286:	709a      	strb	r2, [r3, #2]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	091b      	lsrs	r3, r3, #4
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	227f      	movs	r2, #127	; 0x7f
 800d290:	4013      	ands	r3, r2
 800d292:	b2da      	uxtb	r2, r3
 800d294:	197b      	adds	r3, r7, r5
 800d296:	70da      	strb	r2, [r3, #3]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	b2db      	uxtb	r3, r3
 800d2a0:	2278      	movs	r2, #120	; 0x78
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	2637      	movs	r6, #55	; 0x37
 800d2a8:	19bb      	adds	r3, r7, r6
 800d2aa:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2278      	movs	r2, #120	; 0x78
 800d2b0:	2194      	movs	r1, #148	; 0x94
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	f002 fbba 	bl	800fa2c <VL53L0X_WrByte>
 800d2b8:	0003      	movs	r3, r0
 800d2ba:	0019      	movs	r1, r3
 800d2bc:	193b      	adds	r3, r7, r4
 800d2be:	193a      	adds	r2, r7, r4
 800d2c0:	7812      	ldrb	r2, [r2, #0]
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7ff fd8d 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d2ce:	0003      	movs	r3, r0
 800d2d0:	0019      	movs	r1, r3
 800d2d2:	193b      	adds	r3, r7, r4
 800d2d4:	193a      	adds	r2, r7, r4
 800d2d6:	7812      	ldrb	r2, [r2, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d2dc:	2330      	movs	r3, #48	; 0x30
 800d2de:	18fa      	adds	r2, r7, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2190      	movs	r1, #144	; 0x90
 800d2e4:	0018      	movs	r0, r3
 800d2e6:	f002 fcc7 	bl	800fc78 <VL53L0X_RdDWord>
 800d2ea:	0003      	movs	r3, r0
 800d2ec:	0019      	movs	r1, r3
 800d2ee:	193b      	adds	r3, r7, r4
 800d2f0:	193a      	adds	r2, r7, r4
 800d2f2:	7812      	ldrb	r2, [r2, #0]
 800d2f4:	430a      	orrs	r2, r1
 800d2f6:	701a      	strb	r2, [r3, #0]

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	0f5b      	lsrs	r3, r3, #29
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	227f      	movs	r2, #127	; 0x7f
 800d300:	4013      	ands	r3, r2
 800d302:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d304:	0031      	movs	r1, r6
 800d306:	187b      	adds	r3, r7, r1
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	18d3      	adds	r3, r2, r3
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	197b      	adds	r3, r7, r5
 800d310:	711a      	strb	r2, [r3, #4]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	0d9b      	lsrs	r3, r3, #22
 800d316:	b2db      	uxtb	r3, r3
 800d318:	227f      	movs	r2, #127	; 0x7f
 800d31a:	4013      	ands	r3, r2
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	197b      	adds	r3, r7, r5
 800d320:	715a      	strb	r2, [r3, #5]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	0bdb      	lsrs	r3, r3, #15
 800d326:	b2db      	uxtb	r3, r3
 800d328:	227f      	movs	r2, #127	; 0x7f
 800d32a:	4013      	ands	r3, r2
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	197b      	adds	r3, r7, r5
 800d330:	719a      	strb	r2, [r3, #6]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	0a1b      	lsrs	r3, r3, #8
 800d336:	b2db      	uxtb	r3, r3
 800d338:	227f      	movs	r2, #127	; 0x7f
 800d33a:	4013      	ands	r3, r2
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	197b      	adds	r3, r7, r5
 800d340:	71da      	strb	r2, [r3, #7]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d344:	085b      	lsrs	r3, r3, #1
 800d346:	b2db      	uxtb	r3, r3
 800d348:	227f      	movs	r2, #127	; 0x7f
 800d34a:	4013      	ands	r3, r2
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	197b      	adds	r3, r7, r5
 800d350:	721a      	strb	r2, [r3, #8]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	b2db      	uxtb	r3, r3
 800d356:	019b      	lsls	r3, r3, #6
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2240      	movs	r2, #64	; 0x40
 800d35c:	4013      	ands	r3, r2
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	000e      	movs	r6, r1
 800d362:	19bb      	adds	r3, r7, r6
 800d364:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2279      	movs	r2, #121	; 0x79
 800d36a:	2194      	movs	r1, #148	; 0x94
 800d36c:	0018      	movs	r0, r3
 800d36e:	f002 fb5d 	bl	800fa2c <VL53L0X_WrByte>
 800d372:	0003      	movs	r3, r0
 800d374:	0019      	movs	r1, r3
 800d376:	193b      	adds	r3, r7, r4
 800d378:	193a      	adds	r2, r7, r4
 800d37a:	7812      	ldrb	r2, [r2, #0]
 800d37c:	430a      	orrs	r2, r1
 800d37e:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	0018      	movs	r0, r3
 800d384:	f7ff fd30 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d388:	0003      	movs	r3, r0
 800d38a:	0019      	movs	r1, r3
 800d38c:	193b      	adds	r3, r7, r4
 800d38e:	193a      	adds	r2, r7, r4
 800d390:	7812      	ldrb	r2, [r2, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d396:	2330      	movs	r3, #48	; 0x30
 800d398:	18fa      	adds	r2, r7, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2190      	movs	r1, #144	; 0x90
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f002 fc6a 	bl	800fc78 <VL53L0X_RdDWord>
 800d3a4:	0003      	movs	r3, r0
 800d3a6:	0019      	movs	r1, r3
 800d3a8:	193b      	adds	r3, r7, r4
 800d3aa:	193a      	adds	r2, r7, r4
 800d3ac:	7812      	ldrb	r2, [r2, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	701a      	strb	r2, [r3, #0]

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b4:	0e9b      	lsrs	r3, r3, #26
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	227f      	movs	r2, #127	; 0x7f
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d3be:	19bb      	adds	r3, r7, r6
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	18d3      	adds	r3, r2, r3
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	197b      	adds	r3, r7, r5
 800d3c8:	725a      	strb	r2, [r3, #9]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	0cdb      	lsrs	r3, r3, #19
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	227f      	movs	r2, #127	; 0x7f
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	197b      	adds	r3, r7, r5
 800d3d8:	729a      	strb	r2, [r3, #10]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	0b1b      	lsrs	r3, r3, #12
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	227f      	movs	r2, #127	; 0x7f
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	197b      	adds	r3, r7, r5
 800d3e8:	72da      	strb	r2, [r3, #11]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	095b      	lsrs	r3, r3, #5
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	227f      	movs	r2, #127	; 0x7f
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	197b      	adds	r3, r7, r5
 800d3f8:	731a      	strb	r2, [r3, #12]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	b2db      	uxtb	r3, r3
 800d402:	227c      	movs	r2, #124	; 0x7c
 800d404:	4013      	ands	r3, r2
 800d406:	b2da      	uxtb	r2, r3
 800d408:	19bb      	adds	r3, r7, r6
 800d40a:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	227a      	movs	r2, #122	; 0x7a
 800d410:	2194      	movs	r1, #148	; 0x94
 800d412:	0018      	movs	r0, r3
 800d414:	f002 fb0a 	bl	800fa2c <VL53L0X_WrByte>
 800d418:	0003      	movs	r3, r0
 800d41a:	0019      	movs	r1, r3
 800d41c:	193b      	adds	r3, r7, r4
 800d41e:	193a      	adds	r2, r7, r4
 800d420:	7812      	ldrb	r2, [r2, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	0018      	movs	r0, r3
 800d42a:	f7ff fcdd 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d42e:	0003      	movs	r3, r0
 800d430:	0019      	movs	r1, r3
 800d432:	193b      	adds	r3, r7, r4
 800d434:	193a      	adds	r2, r7, r4
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d43c:	2330      	movs	r3, #48	; 0x30
 800d43e:	18fa      	adds	r2, r7, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2190      	movs	r1, #144	; 0x90
 800d444:	0018      	movs	r0, r3
 800d446:	f002 fc17 	bl	800fc78 <VL53L0X_RdDWord>
 800d44a:	0003      	movs	r3, r0
 800d44c:	0019      	movs	r1, r3
 800d44e:	193b      	adds	r3, r7, r4
 800d450:	193a      	adds	r2, r7, r4
 800d452:	7812      	ldrb	r2, [r2, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	701a      	strb	r2, [r3, #0]

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	0f9b      	lsrs	r3, r3, #30
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	227f      	movs	r2, #127	; 0x7f
 800d460:	4013      	ands	r3, r2
 800d462:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d464:	19bb      	adds	r3, r7, r6
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	18d3      	adds	r3, r2, r3
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	0029      	movs	r1, r5
 800d46e:	187b      	adds	r3, r7, r1
 800d470:	735a      	strb	r2, [r3, #13]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d474:	0ddb      	lsrs	r3, r3, #23
 800d476:	b2db      	uxtb	r3, r3
 800d478:	227f      	movs	r2, #127	; 0x7f
 800d47a:	4013      	ands	r3, r2
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	187b      	adds	r3, r7, r1
 800d480:	739a      	strb	r2, [r3, #14]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	0c1b      	lsrs	r3, r3, #16
 800d486:	b2db      	uxtb	r3, r3
 800d488:	227f      	movs	r2, #127	; 0x7f
 800d48a:	4013      	ands	r3, r2
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	187b      	adds	r3, r7, r1
 800d490:	73da      	strb	r2, [r3, #15]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d494:	0a5b      	lsrs	r3, r3, #9
 800d496:	b2db      	uxtb	r3, r3
 800d498:	227f      	movs	r2, #127	; 0x7f
 800d49a:	4013      	ands	r3, r2
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	187b      	adds	r3, r7, r1
 800d4a0:	741a      	strb	r2, [r3, #16]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	089b      	lsrs	r3, r3, #2
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	227f      	movs	r2, #127	; 0x7f
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	187b      	adds	r3, r7, r1
 800d4b0:	745a      	strb	r2, [r3, #17]
			ProductId[18] = '\0';
 800d4b2:	187b      	adds	r3, r7, r1
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	749a      	strb	r2, [r3, #18]

		}

		if (((option & 4) == 4) &&
 800d4b8:	1cfb      	adds	r3, r7, #3
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	2204      	movs	r2, #4
 800d4be:	4013      	ands	r3, r2
 800d4c0:	d100      	bne.n	800d4c4 <VL53L0X_get_info_from_device+0x630>
 800d4c2:	e0fc      	b.n	800d6be <VL53L0X_get_info_from_device+0x82a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d4c4:	233f      	movs	r3, #63	; 0x3f
 800d4c6:	18fb      	adds	r3, r7, r3
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2204      	movs	r2, #4
 800d4cc:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800d4ce:	d000      	beq.n	800d4d2 <VL53L0X_get_info_from_device+0x63e>
 800d4d0:	e0f5      	b.n	800d6be <VL53L0X_get_info_from_device+0x82a>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	227b      	movs	r2, #123	; 0x7b
 800d4d6:	2194      	movs	r1, #148	; 0x94
 800d4d8:	0018      	movs	r0, r3
 800d4da:	f002 faa7 	bl	800fa2c <VL53L0X_WrByte>
 800d4de:	0003      	movs	r3, r0
 800d4e0:	0019      	movs	r1, r3
 800d4e2:	245f      	movs	r4, #95	; 0x5f
 800d4e4:	193b      	adds	r3, r7, r4
 800d4e6:	193a      	adds	r2, r7, r4
 800d4e8:	7812      	ldrb	r2, [r2, #0]
 800d4ea:	430a      	orrs	r2, r1
 800d4ec:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	f7ff fc79 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d4f6:	0003      	movs	r3, r0
 800d4f8:	0019      	movs	r1, r3
 800d4fa:	193b      	adds	r3, r7, r4
 800d4fc:	193a      	adds	r2, r7, r4
 800d4fe:	7812      	ldrb	r2, [r2, #0]
 800d500:	430a      	orrs	r2, r1
 800d502:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d504:	2328      	movs	r3, #40	; 0x28
 800d506:	18fa      	adds	r2, r7, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2190      	movs	r1, #144	; 0x90
 800d50c:	0018      	movs	r0, r3
 800d50e:	f002 fbb3 	bl	800fc78 <VL53L0X_RdDWord>
 800d512:	0003      	movs	r3, r0
 800d514:	0019      	movs	r1, r3
 800d516:	193b      	adds	r3, r7, r4
 800d518:	193a      	adds	r2, r7, r4
 800d51a:	7812      	ldrb	r2, [r2, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	227c      	movs	r2, #124	; 0x7c
 800d524:	2194      	movs	r1, #148	; 0x94
 800d526:	0018      	movs	r0, r3
 800d528:	f002 fa80 	bl	800fa2c <VL53L0X_WrByte>
 800d52c:	0003      	movs	r3, r0
 800d52e:	0019      	movs	r1, r3
 800d530:	193b      	adds	r3, r7, r4
 800d532:	193a      	adds	r2, r7, r4
 800d534:	7812      	ldrb	r2, [r2, #0]
 800d536:	430a      	orrs	r2, r1
 800d538:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	0018      	movs	r0, r3
 800d53e:	f7ff fc53 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d542:	0003      	movs	r3, r0
 800d544:	0019      	movs	r1, r3
 800d546:	193b      	adds	r3, r7, r4
 800d548:	193a      	adds	r2, r7, r4
 800d54a:	7812      	ldrb	r2, [r2, #0]
 800d54c:	430a      	orrs	r2, r1
 800d54e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800d550:	2324      	movs	r3, #36	; 0x24
 800d552:	18fa      	adds	r2, r7, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2190      	movs	r1, #144	; 0x90
 800d558:	0018      	movs	r0, r3
 800d55a:	f002 fb8d 	bl	800fc78 <VL53L0X_RdDWord>
 800d55e:	0003      	movs	r3, r0
 800d560:	0019      	movs	r1, r3
 800d562:	193b      	adds	r3, r7, r4
 800d564:	193a      	adds	r2, r7, r4
 800d566:	7812      	ldrb	r2, [r2, #0]
 800d568:	430a      	orrs	r2, r1
 800d56a:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2273      	movs	r2, #115	; 0x73
 800d570:	2194      	movs	r1, #148	; 0x94
 800d572:	0018      	movs	r0, r3
 800d574:	f002 fa5a 	bl	800fa2c <VL53L0X_WrByte>
 800d578:	0003      	movs	r3, r0
 800d57a:	0019      	movs	r1, r3
 800d57c:	193b      	adds	r3, r7, r4
 800d57e:	193a      	adds	r2, r7, r4
 800d580:	7812      	ldrb	r2, [r2, #0]
 800d582:	430a      	orrs	r2, r1
 800d584:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	0018      	movs	r0, r3
 800d58a:	f7ff fc2d 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d58e:	0003      	movs	r3, r0
 800d590:	0019      	movs	r1, r3
 800d592:	193b      	adds	r3, r7, r4
 800d594:	193a      	adds	r2, r7, r4
 800d596:	7812      	ldrb	r2, [r2, #0]
 800d598:	430a      	orrs	r2, r1
 800d59a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d59c:	2530      	movs	r5, #48	; 0x30
 800d59e:	197a      	adds	r2, r7, r5
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2190      	movs	r1, #144	; 0x90
 800d5a4:	0018      	movs	r0, r3
 800d5a6:	f002 fb67 	bl	800fc78 <VL53L0X_RdDWord>
 800d5aa:	0003      	movs	r3, r0
 800d5ac:	0019      	movs	r1, r3
 800d5ae:	193b      	adds	r3, r7, r4
 800d5b0:	193a      	adds	r2, r7, r4
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800d5bc:	041b      	lsls	r3, r3, #16
 800d5be:	0c1b      	lsrs	r3, r3, #16
 800d5c0:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2274      	movs	r2, #116	; 0x74
 800d5c6:	2194      	movs	r1, #148	; 0x94
 800d5c8:	0018      	movs	r0, r3
 800d5ca:	f002 fa2f 	bl	800fa2c <VL53L0X_WrByte>
 800d5ce:	0003      	movs	r3, r0
 800d5d0:	0019      	movs	r1, r3
 800d5d2:	193b      	adds	r3, r7, r4
 800d5d4:	193a      	adds	r2, r7, r4
 800d5d6:	7812      	ldrb	r2, [r2, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	0018      	movs	r0, r3
 800d5e0:	f7ff fc02 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d5e4:	0003      	movs	r3, r0
 800d5e6:	0019      	movs	r1, r3
 800d5e8:	193b      	adds	r3, r7, r4
 800d5ea:	193a      	adds	r2, r7, r4
 800d5ec:	7812      	ldrb	r2, [r2, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d5f2:	197a      	adds	r2, r7, r5
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2190      	movs	r1, #144	; 0x90
 800d5f8:	0018      	movs	r0, r3
 800d5fa:	f002 fb3d 	bl	800fc78 <VL53L0X_RdDWord>
 800d5fe:	0003      	movs	r3, r0
 800d600:	0019      	movs	r1, r3
 800d602:	193b      	adds	r3, r7, r4
 800d604:	193a      	adds	r2, r7, r4
 800d606:	7812      	ldrb	r2, [r2, #0]
 800d608:	430a      	orrs	r2, r1
 800d60a:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800d610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d612:	4313      	orrs	r3, r2
 800d614:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2275      	movs	r2, #117	; 0x75
 800d61a:	2194      	movs	r1, #148	; 0x94
 800d61c:	0018      	movs	r0, r3
 800d61e:	f002 fa05 	bl	800fa2c <VL53L0X_WrByte>
 800d622:	0003      	movs	r3, r0
 800d624:	0019      	movs	r1, r3
 800d626:	193b      	adds	r3, r7, r4
 800d628:	193a      	adds	r2, r7, r4
 800d62a:	7812      	ldrb	r2, [r2, #0]
 800d62c:	430a      	orrs	r2, r1
 800d62e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	0018      	movs	r0, r3
 800d634:	f7ff fbd8 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d638:	0003      	movs	r3, r0
 800d63a:	0019      	movs	r1, r3
 800d63c:	193b      	adds	r3, r7, r4
 800d63e:	193a      	adds	r2, r7, r4
 800d640:	7812      	ldrb	r2, [r2, #0]
 800d642:	430a      	orrs	r2, r1
 800d644:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d646:	197a      	adds	r2, r7, r5
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2190      	movs	r1, #144	; 0x90
 800d64c:	0018      	movs	r0, r3
 800d64e:	f002 fb13 	bl	800fc78 <VL53L0X_RdDWord>
 800d652:	0003      	movs	r3, r0
 800d654:	0019      	movs	r1, r3
 800d656:	193b      	adds	r3, r7, r4
 800d658:	193a      	adds	r2, r7, r4
 800d65a:	7812      	ldrb	r2, [r2, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800d660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d662:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800d664:	041b      	lsls	r3, r3, #16
 800d666:	0c1b      	lsrs	r3, r3, #16
 800d668:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2276      	movs	r2, #118	; 0x76
 800d66e:	2194      	movs	r1, #148	; 0x94
 800d670:	0018      	movs	r0, r3
 800d672:	f002 f9db 	bl	800fa2c <VL53L0X_WrByte>
 800d676:	0003      	movs	r3, r0
 800d678:	0019      	movs	r1, r3
 800d67a:	193b      	adds	r3, r7, r4
 800d67c:	193a      	adds	r2, r7, r4
 800d67e:	7812      	ldrb	r2, [r2, #0]
 800d680:	430a      	orrs	r2, r1
 800d682:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	0018      	movs	r0, r3
 800d688:	f7ff fbae 	bl	800cde8 <VL53L0X_device_read_strobe>
 800d68c:	0003      	movs	r3, r0
 800d68e:	0019      	movs	r1, r3
 800d690:	193b      	adds	r3, r7, r4
 800d692:	193a      	adds	r2, r7, r4
 800d694:	7812      	ldrb	r2, [r2, #0]
 800d696:	430a      	orrs	r2, r1
 800d698:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d69a:	197a      	adds	r2, r7, r5
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2190      	movs	r1, #144	; 0x90
 800d6a0:	0018      	movs	r0, r3
 800d6a2:	f002 fae9 	bl	800fc78 <VL53L0X_RdDWord>
 800d6a6:	0003      	movs	r3, r0
 800d6a8:	0019      	movs	r1, r3
 800d6aa:	193b      	adds	r3, r7, r4
 800d6ac:	193a      	adds	r2, r7, r4
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	430a      	orrs	r2, r1
 800d6b2:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800d6b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2181      	movs	r1, #129	; 0x81
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f002 f9b1 	bl	800fa2c <VL53L0X_WrByte>
 800d6ca:	0003      	movs	r3, r0
 800d6cc:	0019      	movs	r1, r3
 800d6ce:	245f      	movs	r4, #95	; 0x5f
 800d6d0:	193b      	adds	r3, r7, r4
 800d6d2:	193a      	adds	r2, r7, r4
 800d6d4:	7812      	ldrb	r2, [r2, #0]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2206      	movs	r2, #6
 800d6de:	21ff      	movs	r1, #255	; 0xff
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	f002 f9a3 	bl	800fa2c <VL53L0X_WrByte>
 800d6e6:	0003      	movs	r3, r0
 800d6e8:	0019      	movs	r1, r3
 800d6ea:	193b      	adds	r3, r7, r4
 800d6ec:	193a      	adds	r2, r7, r4
 800d6ee:	7812      	ldrb	r2, [r2, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d6f4:	2537      	movs	r5, #55	; 0x37
 800d6f6:	197a      	adds	r2, r7, r5
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2183      	movs	r1, #131	; 0x83
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	f002 fa44 	bl	800fb8a <VL53L0X_RdByte>
 800d702:	0003      	movs	r3, r0
 800d704:	0019      	movs	r1, r3
 800d706:	193b      	adds	r3, r7, r4
 800d708:	193a      	adds	r2, r7, r4
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	430a      	orrs	r2, r1
 800d70e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800d710:	197b      	adds	r3, r7, r5
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2204      	movs	r2, #4
 800d716:	4393      	bics	r3, r2
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2183      	movs	r1, #131	; 0x83
 800d71e:	0018      	movs	r0, r3
 800d720:	f002 f984 	bl	800fa2c <VL53L0X_WrByte>
 800d724:	0003      	movs	r3, r0
 800d726:	0019      	movs	r1, r3
 800d728:	193b      	adds	r3, r7, r4
 800d72a:	193a      	adds	r2, r7, r4
 800d72c:	7812      	ldrb	r2, [r2, #0]
 800d72e:	430a      	orrs	r2, r1
 800d730:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2201      	movs	r2, #1
 800d736:	21ff      	movs	r1, #255	; 0xff
 800d738:	0018      	movs	r0, r3
 800d73a:	f002 f977 	bl	800fa2c <VL53L0X_WrByte>
 800d73e:	0003      	movs	r3, r0
 800d740:	0019      	movs	r1, r3
 800d742:	193b      	adds	r3, r7, r4
 800d744:	193a      	adds	r2, r7, r4
 800d746:	7812      	ldrb	r2, [r2, #0]
 800d748:	430a      	orrs	r2, r1
 800d74a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	2100      	movs	r1, #0
 800d752:	0018      	movs	r0, r3
 800d754:	f002 f96a 	bl	800fa2c <VL53L0X_WrByte>
 800d758:	0003      	movs	r3, r0
 800d75a:	0019      	movs	r1, r3
 800d75c:	193b      	adds	r3, r7, r4
 800d75e:	193a      	adds	r2, r7, r4
 800d760:	7812      	ldrb	r2, [r2, #0]
 800d762:	430a      	orrs	r2, r1
 800d764:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	21ff      	movs	r1, #255	; 0xff
 800d76c:	0018      	movs	r0, r3
 800d76e:	f002 f95d 	bl	800fa2c <VL53L0X_WrByte>
 800d772:	0003      	movs	r3, r0
 800d774:	0019      	movs	r1, r3
 800d776:	193b      	adds	r3, r7, r4
 800d778:	193a      	adds	r2, r7, r4
 800d77a:	7812      	ldrb	r2, [r2, #0]
 800d77c:	430a      	orrs	r2, r1
 800d77e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	2180      	movs	r1, #128	; 0x80
 800d786:	0018      	movs	r0, r3
 800d788:	f002 f950 	bl	800fa2c <VL53L0X_WrByte>
 800d78c:	0003      	movs	r3, r0
 800d78e:	0019      	movs	r1, r3
 800d790:	193b      	adds	r3, r7, r4
 800d792:	193a      	adds	r2, r7, r4
 800d794:	7812      	ldrb	r2, [r2, #0]
 800d796:	430a      	orrs	r2, r1
 800d798:	701a      	strb	r2, [r3, #0]
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d79a:	235f      	movs	r3, #95	; 0x5f
 800d79c:	18fb      	adds	r3, r7, r3
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	b25b      	sxtb	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d000      	beq.n	800d7a8 <VL53L0X_get_info_from_device+0x914>
 800d7a6:	e0a1      	b.n	800d8ec <VL53L0X_get_info_from_device+0xa58>
 800d7a8:	213f      	movs	r1, #63	; 0x3f
 800d7aa:	187b      	adds	r3, r7, r1
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b07      	cmp	r3, #7
 800d7b0:	d100      	bne.n	800d7b4 <VL53L0X_get_info_from_device+0x920>
 800d7b2:	e09b      	b.n	800d8ec <VL53L0X_get_info_from_device+0xa58>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d7b4:	1cfb      	adds	r3, r7, #3
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	d028      	beq.n	800d810 <VL53L0X_get_info_from_device+0x97c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d7be:	187b      	adds	r3, r7, r1
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800d7c6:	d123      	bne.n	800d810 <VL53L0X_get_info_from_device+0x97c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	235e      	movs	r3, #94	; 0x5e
 800d7cc:	18f9      	adds	r1, r7, r3
 800d7ce:	2314      	movs	r3, #20
 800d7d0:	33ff      	adds	r3, #255	; 0xff
 800d7d2:	7809      	ldrb	r1, [r1, #0]
 800d7d4:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	235d      	movs	r3, #93	; 0x5d
 800d7da:	18f9      	adds	r1, r7, r3
 800d7dc:	238a      	movs	r3, #138	; 0x8a
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	7809      	ldrb	r1, [r1, #0]
 800d7e2:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7e8:	e00f      	b.n	800d80a <VL53L0X_get_info_from_device+0x976>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d7ea:	2308      	movs	r3, #8
 800d7ec:	18fa      	adds	r2, r7, r3
 800d7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f0:	18d3      	adds	r3, r2, r3
 800d7f2:	7818      	ldrb	r0, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d7f4:	6879      	ldr	r1, [r7, #4]
 800d7f6:	2395      	movs	r3, #149	; 0x95
 800d7f8:	005b      	lsls	r3, r3, #1
 800d7fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d7fc:	188a      	adds	r2, r1, r2
 800d7fe:	18d3      	adds	r3, r2, r3
 800d800:	1c02      	adds	r2, r0, #0
 800d802:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d806:	3301      	adds	r3, #1
 800d808:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d80c:	2b05      	cmp	r3, #5
 800d80e:	ddec      	ble.n	800d7ea <VL53L0X_get_info_from_device+0x956>
			}
		}

		if (((option & 2) == 2) &&
 800d810:	1cfb      	adds	r3, r7, #3
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2202      	movs	r2, #2
 800d816:	4013      	ands	r3, r2
 800d818:	d01b      	beq.n	800d852 <VL53L0X_get_info_from_device+0x9be>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d81a:	233f      	movs	r3, #63	; 0x3f
 800d81c:	18fb      	adds	r3, r7, r3
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2202      	movs	r2, #2
 800d822:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800d824:	d115      	bne.n	800d852 <VL53L0X_get_info_from_device+0x9be>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d826:	232f      	movs	r3, #47	; 0x2f
 800d828:	18fb      	adds	r3, r7, r3
 800d82a:	7819      	ldrb	r1, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	22f1      	movs	r2, #241	; 0xf1
 800d830:	5499      	strb	r1, [r3, r2]
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d832:	232e      	movs	r3, #46	; 0x2e
 800d834:	18fb      	adds	r3, r7, r3
 800d836:	7819      	ldrb	r1, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	22f2      	movs	r2, #242	; 0xf2
 800d83c:	5499      	strb	r1, [r3, r2]
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	33f3      	adds	r3, #243	; 0xf3
 800d842:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d844:	2310      	movs	r3, #16
 800d846:	18fa      	adds	r2, r7, r3
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	0011      	movs	r1, r2
 800d84c:	0018      	movs	r0, r3
 800d84e:	f004 fbab 	bl	8011fa8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800d852:	1cfb      	adds	r3, r7, #3
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2204      	movs	r2, #4
 800d858:	4013      	ands	r3, r2
 800d85a:	d038      	beq.n	800d8ce <VL53L0X_get_info_from_device+0xa3a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d85c:	233f      	movs	r3, #63	; 0x3f
 800d85e:	18fb      	adds	r3, r7, r3
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2204      	movs	r2, #4
 800d864:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800d866:	d132      	bne.n	800d8ce <VL53L0X_get_info_from_device+0xa3a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	238c      	movs	r3, #140	; 0x8c
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	50d1      	str	r1, [r2, r3]
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	238e      	movs	r3, #142	; 0x8e
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	50d1      	str	r1, [r2, r3]
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d87e:	025b      	lsls	r3, r3, #9
 800d880:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	2390      	movs	r3, #144	; 0x90
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d88a:	50d1      	str	r1, [r2, r3]
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d88c:	215a      	movs	r1, #90	; 0x5a
 800d88e:	187b      	adds	r3, r7, r1
 800d890:	2200      	movs	r2, #0
 800d892:	801a      	strh	r2, [r3, #0]
			if (DistMeasFixed1104_400_mm != 0) {
 800d894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d896:	2b00      	cmp	r3, #0
 800d898:	d013      	beq.n	800d8c2 <VL53L0X_get_info_from_device+0xa2e>
					OffsetFixed1104_mm =
 800d89a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d8a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8a4:	0013      	movs	r3, r2
 800d8a6:	015b      	lsls	r3, r3, #5
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	189b      	adds	r3, r3, r2
 800d8ae:	00db      	lsls	r3, r3, #3
 800d8b0:	091a      	lsrs	r2, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d8b2:	187b      	adds	r3, r7, r1
 800d8b4:	801a      	strh	r2, [r3, #0]
					OffsetMicroMeters *= -1;
 800d8b6:	187b      	adds	r3, r7, r1
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	425b      	negs	r3, r3
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	187b      	adds	r3, r7, r1
 800d8c0:	801a      	strh	r2, [r3, #0]
			}

			PALDevDataSet(Dev,
 800d8c2:	235a      	movs	r3, #90	; 0x5a
 800d8c4:	18fb      	adds	r3, r7, r3
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	5e9a      	ldrsh	r2, [r3, r2]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d8ce:	233f      	movs	r3, #63	; 0x3f
 800d8d0:	18fa      	adds	r2, r7, r3
 800d8d2:	1cfb      	adds	r3, r7, #3
 800d8d4:	7812      	ldrb	r2, [r2, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	2137      	movs	r1, #55	; 0x37
 800d8de:	187b      	adds	r3, r7, r1
 800d8e0:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d8e2:	187b      	adds	r3, r7, r1
 800d8e4:	7819      	ldrb	r1, [r3, #0]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	22f0      	movs	r2, #240	; 0xf0
 800d8ea:	5499      	strb	r1, [r3, r2]
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d8ec:	235f      	movs	r3, #95	; 0x5f
 800d8ee:	18fb      	adds	r3, r7, r3
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b25b      	sxtb	r3, r3
}
 800d8f4:	0018      	movs	r0, r3
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	b019      	add	sp, #100	; 0x64
 800d8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8fc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	000a      	movs	r2, r1
 800d906:	1cfb      	adds	r3, r7, #3
 800d908:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d90a:	4a09      	ldr	r2, [pc, #36]	; (800d930 <VL53L0X_calc_macro_period_ps+0x34>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	613a      	str	r2, [r7, #16]
 800d910:	617b      	str	r3, [r7, #20]

	macro_period_vclks = 2304;
 800d912:	2390      	movs	r3, #144	; 0x90
 800d914:	011b      	lsls	r3, r3, #4
 800d916:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d918:	1cfb      	adds	r3, r7, #3
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4353      	muls	r3, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	4353      	muls	r3, r2
 800d924:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d926:	68bb      	ldr	r3, [r7, #8]
}
 800d928:	0018      	movs	r0, r3
 800d92a:	46bd      	mov	sp, r7
 800d92c:	b006      	add	sp, #24
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	00000677 	.word	0x00000677

0800d934 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d93c:	2316      	movs	r3, #22
 800d93e:	18fb      	adds	r3, r7, r3
 800d940:	2200      	movs	r2, #0
 800d942:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d948:	230e      	movs	r3, #14
 800d94a:	18fb      	adds	r3, r7, r3
 800d94c:	2200      	movs	r2, #0
 800d94e:	801a      	strh	r2, [r3, #0]

	if (timeout_macro_clks > 0) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d01e      	beq.n	800d994 <VL53L0X_encode_timeout+0x60>
		ls_byte = timeout_macro_clks - 1;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3b01      	subs	r3, #1
 800d95a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d95c:	e008      	b.n	800d970 <VL53L0X_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	085b      	lsrs	r3, r3, #1
 800d962:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d964:	210e      	movs	r1, #14
 800d966:	187b      	adds	r3, r7, r1
 800d968:	881a      	ldrh	r2, [r3, #0]
 800d96a:	187b      	adds	r3, r7, r1
 800d96c:	3201      	adds	r2, #1
 800d96e:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	22ff      	movs	r2, #255	; 0xff
 800d974:	4393      	bics	r3, r2
 800d976:	d1f2      	bne.n	800d95e <VL53L0X_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 800d978:	230e      	movs	r3, #14
 800d97a:	18fb      	adds	r3, r7, r3
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	021b      	lsls	r3, r3, #8
 800d980:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	b29b      	uxth	r3, r3
 800d986:	22ff      	movs	r2, #255	; 0xff
 800d988:	4013      	ands	r3, r2
 800d98a:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 800d98c:	2316      	movs	r3, #22
 800d98e:	18fb      	adds	r3, r7, r3
 800d990:	188a      	adds	r2, r1, r2
 800d992:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 800d994:	2316      	movs	r3, #22
 800d996:	18fb      	adds	r3, r7, r3
 800d998:	881b      	ldrh	r3, [r3, #0]

}
 800d99a:	0018      	movs	r0, r3
 800d99c:	46bd      	mov	sp, r7
 800d99e:	b006      	add	sp, #24
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	0002      	movs	r2, r0
 800d9aa:	1dbb      	adds	r3, r7, #6
 800d9ac:	801a      	strh	r2, [r3, #0]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d9b2:	1dbb      	adds	r3, r7, #6
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	22ff      	movs	r2, #255	; 0xff
 800d9b8:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d9ba:	1dba      	adds	r2, r7, #6
 800d9bc:	8812      	ldrh	r2, [r2, #0]
 800d9be:	0a12      	lsrs	r2, r2, #8
 800d9c0:	b292      	uxth	r2, r2
 800d9c2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	b004      	add	sp, #16
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b088      	sub	sp, #32
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	1dfb      	adds	r3, r7, #7
 800d9de:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d9e4:	1dfb      	adds	r3, r7, #7
 800d9e6:	781a      	ldrb	r2, [r3, #0]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	0011      	movs	r1, r2
 800d9ec:	0018      	movs	r0, r3
 800d9ee:	f7ff ff85 	bl	800d8fc <VL53L0X_calc_macro_period_ps>
 800d9f2:	0003      	movs	r3, r0
 800d9f4:	61bb      	str	r3, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	33f5      	adds	r3, #245	; 0xf5
 800d9fa:	33ff      	adds	r3, #255	; 0xff
 800d9fc:	22fa      	movs	r2, #250	; 0xfa
 800d9fe:	0091      	lsls	r1, r2, #2
 800da00:	0018      	movs	r0, r3
 800da02:	f7f2 fb9d 	bl	8000140 <__udivsi3>
 800da06:	0003      	movs	r3, r0
 800da08:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	0013      	movs	r3, r2
 800da0e:	015b      	lsls	r3, r3, #5
 800da10:	1a9b      	subs	r3, r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	189b      	adds	r3, r3, r2
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	001a      	movs	r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	085b      	lsrs	r3, r3, #1
 800da1e:	18d3      	adds	r3, r2, r3
	timeout_period_mclks =
 800da20:	6979      	ldr	r1, [r7, #20]
 800da22:	0018      	movs	r0, r3
 800da24:	f7f2 fb8c 	bl	8000140 <__udivsi3>
 800da28:	0003      	movs	r3, r0
 800da2a:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800da2c:	69fb      	ldr	r3, [r7, #28]
}
 800da2e:	0018      	movs	r0, r3
 800da30:	46bd      	mov	sp, r7
 800da32:	b008      	add	sp, #32
 800da34:	bd80      	pop	{r7, pc}

0800da36 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b086      	sub	sp, #24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	0008      	movs	r0, r1
 800da40:	0011      	movs	r1, r2
 800da42:	1cbb      	adds	r3, r7, #2
 800da44:	1c02      	adds	r2, r0, #0
 800da46:	801a      	strh	r2, [r3, #0]
 800da48:	1c7b      	adds	r3, r7, #1
 800da4a:	1c0a      	adds	r2, r1, #0
 800da4c:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800da52:	1c7b      	adds	r3, r7, #1
 800da54:	781a      	ldrb	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	0011      	movs	r1, r2
 800da5a:	0018      	movs	r0, r3
 800da5c:	f7ff ff4e 	bl	800d8fc <VL53L0X_calc_macro_period_ps>
 800da60:	0003      	movs	r3, r0
 800da62:	613b      	str	r3, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	33f5      	adds	r3, #245	; 0xf5
 800da68:	33ff      	adds	r3, #255	; 0xff
 800da6a:	22fa      	movs	r2, #250	; 0xfa
 800da6c:	0091      	lsls	r1, r2, #2
 800da6e:	0018      	movs	r0, r3
 800da70:	f7f2 fb66 	bl	8000140 <__udivsi3>
 800da74:	0003      	movs	r3, r0
 800da76:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800da78:	1cbb      	adds	r3, r7, #2
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	4353      	muls	r3, r2
 800da80:	33f5      	adds	r3, #245	; 0xf5
 800da82:	33ff      	adds	r3, #255	; 0xff
	actual_timeout_period_us =
 800da84:	22fa      	movs	r2, #250	; 0xfa
 800da86:	0091      	lsls	r1, r2, #2
 800da88:	0018      	movs	r0, r3
 800da8a:	f7f2 fb59 	bl	8000140 <__udivsi3>
 800da8e:	0003      	movs	r3, r0
 800da90:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800da92:	697b      	ldr	r3, [r7, #20]
}
 800da94:	0018      	movs	r0, r3
 800da96:	46bd      	mov	sp, r7
 800da98:	b006      	add	sp, #24
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800da9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9e:	b08d      	sub	sp, #52	; 0x34
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	607a      	str	r2, [r7, #4]
 800daa6:	200b      	movs	r0, #11
 800daa8:	183b      	adds	r3, r7, r0
 800daaa:	1c0a      	adds	r2, r1, #0
 800daac:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daae:	232f      	movs	r3, #47	; 0x2f
 800dab0:	18fb      	adds	r3, r7, r3
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800dab6:	2320      	movs	r3, #32
 800dab8:	18fb      	adds	r3, r7, r3
 800daba:	2200      	movs	r2, #0
 800dabc:	701a      	strb	r2, [r3, #0]
	uint32_t TimeoutMicroSeconds = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800dac2:	231e      	movs	r3, #30
 800dac4:	18fb      	adds	r3, r7, r3
 800dac6:	2200      	movs	r2, #0
 800dac8:	801a      	strh	r2, [r3, #0]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800daca:	2324      	movs	r3, #36	; 0x24
 800dacc:	18fb      	adds	r3, r7, r3
 800dace:	2200      	movs	r2, #0
 800dad0:	801a      	strh	r2, [r3, #0]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800dad2:	183b      	adds	r3, r7, r0
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d007      	beq.n	800daea <get_sequence_step_timeout+0x4e>
 800dada:	183b      	adds	r3, r7, r0
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d003      	beq.n	800daea <get_sequence_step_timeout+0x4e>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800dae2:	183b      	adds	r3, r7, r0
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d130      	bne.n	800db4c <get_sequence_step_timeout+0xb0>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800daea:	252f      	movs	r5, #47	; 0x2f
 800daec:	197c      	adds	r4, r7, r5
 800daee:	2321      	movs	r3, #33	; 0x21
 800daf0:	18fa      	adds	r2, r7, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2100      	movs	r1, #0
 800daf6:	0018      	movs	r0, r3
 800daf8:	f7fc fde0 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800dafc:	0003      	movs	r3, r0
 800dafe:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800db00:	197b      	adds	r3, r7, r5
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	b25b      	sxtb	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	d109      	bne.n	800db1e <get_sequence_step_timeout+0x82>
			Status = VL53L0X_RdByte(Dev,
 800db0a:	197c      	adds	r4, r7, r5
 800db0c:	2320      	movs	r3, #32
 800db0e:	18fa      	adds	r2, r7, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2146      	movs	r1, #70	; 0x46
 800db14:	0018      	movs	r0, r3
 800db16:	f002 f838 	bl	800fb8a <VL53L0X_RdByte>
 800db1a:	0003      	movs	r3, r0
 800db1c:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800db1e:	2320      	movs	r3, #32
 800db20:	18fb      	adds	r3, r7, r3
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	b29b      	uxth	r3, r3
 800db26:	0018      	movs	r0, r3
 800db28:	f7ff ff3b 	bl	800d9a2 <VL53L0X_decode_timeout>
 800db2c:	0002      	movs	r2, r0
 800db2e:	2122      	movs	r1, #34	; 0x22
 800db30:	187b      	adds	r3, r7, r1
 800db32:	801a      	strh	r2, [r3, #0]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800db34:	2321      	movs	r3, #33	; 0x21
 800db36:	18fb      	adds	r3, r7, r3
 800db38:	781a      	ldrb	r2, [r3, #0]
 800db3a:	187b      	adds	r3, r7, r1
 800db3c:	8819      	ldrh	r1, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	0018      	movs	r0, r3
 800db42:	f7ff ff78 	bl	800da36 <VL53L0X_calc_timeout_us>
 800db46:	0003      	movs	r3, r0
 800db48:	62bb      	str	r3, [r7, #40]	; 0x28
 800db4a:	e0b6      	b.n	800dcba <get_sequence_step_timeout+0x21e>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800db4c:	230b      	movs	r3, #11
 800db4e:	18fb      	adds	r3, r7, r3
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b03      	cmp	r3, #3
 800db54:	d13e      	bne.n	800dbd4 <get_sequence_step_timeout+0x138>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800db56:	252f      	movs	r5, #47	; 0x2f
 800db58:	197c      	adds	r4, r7, r5
 800db5a:	2621      	movs	r6, #33	; 0x21
 800db5c:	19ba      	adds	r2, r7, r6
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2100      	movs	r1, #0
 800db62:	0018      	movs	r0, r3
 800db64:	f7fc fdaa 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800db68:	0003      	movs	r3, r0
 800db6a:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800db6c:	197b      	adds	r3, r7, r5
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	b25b      	sxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d000      	beq.n	800db78 <get_sequence_step_timeout+0xdc>
 800db76:	e0a0      	b.n	800dcba <get_sequence_step_timeout+0x21e>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800db78:	197c      	adds	r4, r7, r5
 800db7a:	19ba      	adds	r2, r7, r6
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2100      	movs	r1, #0
 800db80:	0018      	movs	r0, r3
 800db82:	f7fc fd9b 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800db86:	0003      	movs	r3, r0
 800db88:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800db8a:	197b      	adds	r3, r7, r5
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b25b      	sxtb	r3, r3
 800db90:	2b00      	cmp	r3, #0
 800db92:	d109      	bne.n	800dba8 <get_sequence_step_timeout+0x10c>
				Status = VL53L0X_RdWord(Dev,
 800db94:	197c      	adds	r4, r7, r5
 800db96:	231e      	movs	r3, #30
 800db98:	18fa      	adds	r2, r7, r3
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2151      	movs	r1, #81	; 0x51
 800db9e:	0018      	movs	r0, r3
 800dba0:	f002 f828 	bl	800fbf4 <VL53L0X_RdWord>
 800dba4:	0003      	movs	r3, r0
 800dba6:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dba8:	231e      	movs	r3, #30
 800dbaa:	18fb      	adds	r3, r7, r3
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	0018      	movs	r0, r3
 800dbb0:	f7ff fef7 	bl	800d9a2 <VL53L0X_decode_timeout>
 800dbb4:	0002      	movs	r2, r0
 800dbb6:	2126      	movs	r1, #38	; 0x26
 800dbb8:	187b      	adds	r3, r7, r1
 800dbba:	801a      	strh	r2, [r3, #0]
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800dbbc:	2321      	movs	r3, #33	; 0x21
 800dbbe:	18fb      	adds	r3, r7, r3
 800dbc0:	781a      	ldrb	r2, [r3, #0]
 800dbc2:	187b      	adds	r3, r7, r1
 800dbc4:	8819      	ldrh	r1, [r3, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	0018      	movs	r0, r3
 800dbca:	f7ff ff34 	bl	800da36 <VL53L0X_calc_timeout_us>
 800dbce:	0003      	movs	r3, r0
 800dbd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbd2:	e072      	b.n	800dcba <get_sequence_step_timeout+0x21e>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800dbd4:	230b      	movs	r3, #11
 800dbd6:	18fb      	adds	r3, r7, r3
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	2b04      	cmp	r3, #4
 800dbdc:	d16d      	bne.n	800dcba <get_sequence_step_timeout+0x21e>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800dbde:	2414      	movs	r4, #20
 800dbe0:	193a      	adds	r2, r7, r4
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	0011      	movs	r1, r2
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f7fc fec8 	bl	800a97c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800dbec:	2626      	movs	r6, #38	; 0x26
 800dbee:	19bb      	adds	r3, r7, r6
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	801a      	strh	r2, [r3, #0]

		if (SchedulerSequenceSteps.PreRangeOn) {
 800dbf4:	193b      	adds	r3, r7, r4
 800dbf6:	78db      	ldrb	r3, [r3, #3]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d021      	beq.n	800dc40 <get_sequence_step_timeout+0x1a4>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dbfc:	252f      	movs	r5, #47	; 0x2f
 800dbfe:	197c      	adds	r4, r7, r5
 800dc00:	2321      	movs	r3, #33	; 0x21
 800dc02:	18fa      	adds	r2, r7, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2100      	movs	r1, #0
 800dc08:	0018      	movs	r0, r3
 800dc0a:	f7fc fd57 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800dc0e:	0003      	movs	r3, r0
 800dc10:	7023      	strb	r3, [r4, #0]
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800dc12:	197b      	adds	r3, r7, r5
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	b25b      	sxtb	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d111      	bne.n	800dc40 <get_sequence_step_timeout+0x1a4>
				Status = VL53L0X_RdWord(Dev,
 800dc1c:	197c      	adds	r4, r7, r5
 800dc1e:	251e      	movs	r5, #30
 800dc20:	197a      	adds	r2, r7, r5
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2151      	movs	r1, #81	; 0x51
 800dc26:	0018      	movs	r0, r3
 800dc28:	f001 ffe4 	bl	800fbf4 <VL53L0X_RdWord>
 800dc2c:	0003      	movs	r3, r0
 800dc2e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dc30:	197b      	adds	r3, r7, r5
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	0018      	movs	r0, r3
 800dc36:	f7ff feb4 	bl	800d9a2 <VL53L0X_decode_timeout>
 800dc3a:	0002      	movs	r2, r0
 800dc3c:	19bb      	adds	r3, r7, r6
 800dc3e:	801a      	strh	r2, [r3, #0]
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800dc40:	222f      	movs	r2, #47	; 0x2f
 800dc42:	18bb      	adds	r3, r7, r2
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	b25b      	sxtb	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d109      	bne.n	800dc60 <get_sequence_step_timeout+0x1c4>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dc4c:	18bc      	adds	r4, r7, r2
 800dc4e:	2321      	movs	r3, #33	; 0x21
 800dc50:	18fa      	adds	r2, r7, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2101      	movs	r1, #1
 800dc56:	0018      	movs	r0, r3
 800dc58:	f7fc fd30 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800dc5c:	0003      	movs	r3, r0
 800dc5e:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800dc60:	222f      	movs	r2, #47	; 0x2f
 800dc62:	18bb      	adds	r3, r7, r2
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	b25b      	sxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d112      	bne.n	800dc92 <get_sequence_step_timeout+0x1f6>
			Status = VL53L0X_RdWord(Dev,
 800dc6c:	18bc      	adds	r4, r7, r2
 800dc6e:	251c      	movs	r5, #28
 800dc70:	197a      	adds	r2, r7, r5
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2171      	movs	r1, #113	; 0x71
 800dc76:	0018      	movs	r0, r3
 800dc78:	f001 ffbc 	bl	800fbf4 <VL53L0X_RdWord>
 800dc7c:	0003      	movs	r3, r0
 800dc7e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dc80:	197b      	adds	r3, r7, r5
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	0018      	movs	r0, r3
 800dc86:	f7ff fe8c 	bl	800d9a2 <VL53L0X_decode_timeout>
 800dc8a:	0002      	movs	r2, r0
 800dc8c:	2324      	movs	r3, #36	; 0x24
 800dc8e:	18fb      	adds	r3, r7, r3
 800dc90:	801a      	strh	r2, [r3, #0]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800dc92:	2024      	movs	r0, #36	; 0x24
 800dc94:	183b      	adds	r3, r7, r0
 800dc96:	1839      	adds	r1, r7, r0
 800dc98:	2226      	movs	r2, #38	; 0x26
 800dc9a:	18ba      	adds	r2, r7, r2
 800dc9c:	8809      	ldrh	r1, [r1, #0]
 800dc9e:	8812      	ldrh	r2, [r2, #0]
 800dca0:	1a8a      	subs	r2, r1, r2
 800dca2:	801a      	strh	r2, [r3, #0]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800dca4:	2321      	movs	r3, #33	; 0x21
 800dca6:	18fb      	adds	r3, r7, r3
 800dca8:	781a      	ldrb	r2, [r3, #0]
 800dcaa:	183b      	adds	r3, r7, r0
 800dcac:	8819      	ldrh	r1, [r3, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	0018      	movs	r0, r3
 800dcb2:	f7ff fec0 	bl	800da36 <VL53L0X_calc_timeout_us>
 800dcb6:	0003      	movs	r3, r0
 800dcb8:	62bb      	str	r3, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcbe:	601a      	str	r2, [r3, #0]

	return Status;
 800dcc0:	232f      	movs	r3, #47	; 0x2f
 800dcc2:	18fb      	adds	r3, r7, r3
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	b25b      	sxtb	r3, r3
}
 800dcc8:	0018      	movs	r0, r3
 800dcca:	46bd      	mov	sp, r7
 800dccc:	b00d      	add	sp, #52	; 0x34
 800dcce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcd0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcd2:	b08b      	sub	sp, #44	; 0x2c
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	607a      	str	r2, [r7, #4]
 800dcda:	200b      	movs	r0, #11
 800dcdc:	183b      	adds	r3, r7, r0
 800dcde:	1c0a      	adds	r2, r1, #0
 800dce0:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dce2:	2327      	movs	r3, #39	; 0x27
 800dce4:	18fb      	adds	r3, r7, r3
 800dce6:	2200      	movs	r2, #0
 800dce8:	701a      	strb	r2, [r3, #0]
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800dcea:	183b      	adds	r3, r7, r0
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <set_sequence_step_timeout+0x32>
 800dcf2:	183b      	adds	r3, r7, r0
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d003      	beq.n	800dd02 <set_sequence_step_timeout+0x32>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800dcfa:	183b      	adds	r3, r7, r0
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d147      	bne.n	800dd92 <set_sequence_step_timeout+0xc2>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dd02:	2527      	movs	r5, #39	; 0x27
 800dd04:	197c      	adds	r4, r7, r5
 800dd06:	261b      	movs	r6, #27
 800dd08:	19ba      	adds	r2, r7, r6
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	0018      	movs	r0, r3
 800dd10:	f7fc fcd4 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800dd14:	0003      	movs	r3, r0
 800dd16:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800dd18:	197b      	adds	r3, r7, r5
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	b25b      	sxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d124      	bne.n	800dd6c <set_sequence_step_timeout+0x9c>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800dd22:	19bb      	adds	r3, r7, r6
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	0018      	movs	r0, r3
 800dd2c:	f7ff fe51 	bl	800d9d2 <VL53L0X_calc_timeout_mclks>
 800dd30:	0002      	movs	r2, r0
 800dd32:	211c      	movs	r1, #28
 800dd34:	187b      	adds	r3, r7, r1
 800dd36:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800dd38:	187b      	adds	r3, r7, r1
 800dd3a:	881a      	ldrh	r2, [r3, #0]
 800dd3c:	2380      	movs	r3, #128	; 0x80
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d904      	bls.n	800dd4e <set_sequence_step_timeout+0x7e>
				MsrcEncodedTimeOut = 255;
 800dd44:	2326      	movs	r3, #38	; 0x26
 800dd46:	18fb      	adds	r3, r7, r3
 800dd48:	22ff      	movs	r2, #255	; 0xff
 800dd4a:	701a      	strb	r2, [r3, #0]
 800dd4c:	e007      	b.n	800dd5e <set_sequence_step_timeout+0x8e>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800dd4e:	231c      	movs	r3, #28
 800dd50:	18fb      	adds	r3, r7, r3
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	b2da      	uxtb	r2, r3
				MsrcEncodedTimeOut =
 800dd56:	2326      	movs	r3, #38	; 0x26
 800dd58:	18fb      	adds	r3, r7, r3
 800dd5a:	3a01      	subs	r2, #1
 800dd5c:	701a      	strb	r2, [r3, #0]

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd5e:	2326      	movs	r3, #38	; 0x26
 800dd60:	18fb      	adds	r3, r7, r3
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	b299      	uxth	r1, r3
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	22d8      	movs	r2, #216	; 0xd8
 800dd6a:	5299      	strh	r1, [r3, r2]
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800dd6c:	2227      	movs	r2, #39	; 0x27
 800dd6e:	18bb      	adds	r3, r7, r2
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d000      	beq.n	800dd7a <set_sequence_step_timeout+0xaa>
 800dd78:	e0da      	b.n	800df30 <set_sequence_step_timeout+0x260>
			Status = VL53L0X_WrByte(Dev,
 800dd7a:	18bc      	adds	r4, r7, r2
 800dd7c:	2326      	movs	r3, #38	; 0x26
 800dd7e:	18fb      	adds	r3, r7, r3
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2146      	movs	r1, #70	; 0x46
 800dd86:	0018      	movs	r0, r3
 800dd88:	f001 fe50 	bl	800fa2c <VL53L0X_WrByte>
 800dd8c:	0003      	movs	r3, r0
 800dd8e:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800dd90:	e0ce      	b.n	800df30 <set_sequence_step_timeout+0x260>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800dd92:	230b      	movs	r3, #11
 800dd94:	18fb      	adds	r3, r7, r3
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d146      	bne.n	800de2a <set_sequence_step_timeout+0x15a>

			if (Status == VL53L0X_ERROR_NONE) {
 800dd9c:	2227      	movs	r2, #39	; 0x27
 800dd9e:	18bb      	adds	r3, r7, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	b25b      	sxtb	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d123      	bne.n	800ddf0 <set_sequence_step_timeout+0x120>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dda8:	18bc      	adds	r4, r7, r2
 800ddaa:	251b      	movs	r5, #27
 800ddac:	197a      	adds	r2, r7, r5
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	0018      	movs	r0, r3
 800ddb4:	f7fc fc82 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800ddb8:	0003      	movs	r3, r0
 800ddba:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ddbc:	197b      	adds	r3, r7, r5
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f7ff fe04 	bl	800d9d2 <VL53L0X_calc_timeout_mclks>
 800ddca:	0002      	movs	r2, r0
				PreRangeTimeOutMClks =
 800ddcc:	2124      	movs	r1, #36	; 0x24
 800ddce:	187b      	adds	r3, r7, r1
 800ddd0:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800ddd2:	187b      	adds	r3, r7, r1
 800ddd4:	881b      	ldrh	r3, [r3, #0]
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f7ff fdac 	bl	800d934 <VL53L0X_encode_timeout>
 800dddc:	0003      	movs	r3, r0
 800ddde:	001a      	movs	r2, r3
 800dde0:	2118      	movs	r1, #24
 800dde2:	187b      	adds	r3, r7, r1
 800dde4:	801a      	strh	r2, [r3, #0]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dde6:	187b      	adds	r3, r7, r1
 800dde8:	8819      	ldrh	r1, [r3, #0]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	22d8      	movs	r2, #216	; 0xd8
 800ddee:	5299      	strh	r1, [r3, r2]
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ddf0:	2127      	movs	r1, #39	; 0x27
 800ddf2:	187b      	adds	r3, r7, r1
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <set_sequence_step_timeout+0x142>
				Status = VL53L0X_WrWord(Dev,
 800ddfc:	2318      	movs	r3, #24
 800ddfe:	18fb      	adds	r3, r7, r3
 800de00:	881a      	ldrh	r2, [r3, #0]
 800de02:	187c      	adds	r4, r7, r1
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2151      	movs	r1, #81	; 0x51
 800de08:	0018      	movs	r0, r3
 800de0a:	f001 fe3f 	bl	800fa8c <VL53L0X_WrWord>
 800de0e:	0003      	movs	r3, r0
 800de10:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800de12:	2327      	movs	r3, #39	; 0x27
 800de14:	18fb      	adds	r3, r7, r3
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	b25b      	sxtb	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d000      	beq.n	800de20 <set_sequence_step_timeout+0x150>
 800de1e:	e087      	b.n	800df30 <set_sequence_step_timeout+0x260>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	21e4      	movs	r1, #228	; 0xe4
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	505a      	str	r2, [r3, r1]
 800de28:	e082      	b.n	800df30 <set_sequence_step_timeout+0x260>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800de2a:	230b      	movs	r3, #11
 800de2c:	18fb      	adds	r3, r7, r3
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b04      	cmp	r3, #4
 800de32:	d000      	beq.n	800de36 <set_sequence_step_timeout+0x166>
 800de34:	e078      	b.n	800df28 <set_sequence_step_timeout+0x258>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800de36:	2410      	movs	r4, #16
 800de38:	193a      	adds	r2, r7, r4
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	0011      	movs	r1, r2
 800de3e:	0018      	movs	r0, r3
 800de40:	f7fc fd9c 	bl	800a97c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800de44:	2624      	movs	r6, #36	; 0x24
 800de46:	19bb      	adds	r3, r7, r6
 800de48:	2200      	movs	r2, #0
 800de4a:	801a      	strh	r2, [r3, #0]
			if (SchedulerSequenceSteps.PreRangeOn) {
 800de4c:	193b      	adds	r3, r7, r4
 800de4e:	78db      	ldrb	r3, [r3, #3]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d021      	beq.n	800de98 <set_sequence_step_timeout+0x1c8>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800de54:	2527      	movs	r5, #39	; 0x27
 800de56:	197c      	adds	r4, r7, r5
 800de58:	231b      	movs	r3, #27
 800de5a:	18fa      	adds	r2, r7, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2100      	movs	r1, #0
 800de60:	0018      	movs	r0, r3
 800de62:	f7fc fc2b 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800de66:	0003      	movs	r3, r0
 800de68:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800de6a:	197b      	adds	r3, r7, r5
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	b25b      	sxtb	r3, r3
 800de70:	2b00      	cmp	r3, #0
 800de72:	d111      	bne.n	800de98 <set_sequence_step_timeout+0x1c8>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800de74:	197c      	adds	r4, r7, r5
 800de76:	2518      	movs	r5, #24
 800de78:	197a      	adds	r2, r7, r5
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2151      	movs	r1, #81	; 0x51
 800de7e:	0018      	movs	r0, r3
 800de80:	f001 feb8 	bl	800fbf4 <VL53L0X_RdWord>
 800de84:	0003      	movs	r3, r0
 800de86:	7023      	strb	r3, [r4, #0]
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800de88:	197b      	adds	r3, r7, r5
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	0018      	movs	r0, r3
 800de8e:	f7ff fd88 	bl	800d9a2 <VL53L0X_decode_timeout>
 800de92:	0002      	movs	r2, r0
					PreRangeTimeOutMClks =
 800de94:	19bb      	adds	r3, r7, r6
 800de96:	801a      	strh	r2, [r3, #0]
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800de98:	2227      	movs	r2, #39	; 0x27
 800de9a:	18bb      	adds	r3, r7, r2
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	b25b      	sxtb	r3, r3
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d109      	bne.n	800deb8 <set_sequence_step_timeout+0x1e8>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dea4:	18bc      	adds	r4, r7, r2
 800dea6:	231b      	movs	r3, #27
 800dea8:	18fa      	adds	r2, r7, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2101      	movs	r1, #1
 800deae:	0018      	movs	r0, r3
 800deb0:	f7fc fc04 	bl	800a6bc <VL53L0X_GetVcselPulsePeriod>
 800deb4:	0003      	movs	r3, r0
 800deb6:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800deb8:	2527      	movs	r5, #39	; 0x27
 800deba:	197b      	adds	r3, r7, r5
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b25b      	sxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d135      	bne.n	800df30 <set_sequence_step_timeout+0x260>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800dec4:	231b      	movs	r3, #27
 800dec6:	18fb      	adds	r3, r7, r3
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	6879      	ldr	r1, [r7, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	0018      	movs	r0, r3
 800ded0:	f7ff fd7f 	bl	800d9d2 <VL53L0X_calc_timeout_mclks>
 800ded4:	0003      	movs	r3, r0
 800ded6:	623b      	str	r3, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ded8:	2324      	movs	r3, #36	; 0x24
 800deda:	18fb      	adds	r3, r7, r3
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	6a3a      	ldr	r2, [r7, #32]
 800dee0:	18d3      	adds	r3, r2, r3
 800dee2:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800dee4:	261e      	movs	r6, #30
 800dee6:	19bc      	adds	r4, r7, r6
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	0018      	movs	r0, r3
 800deec:	f7ff fd22 	bl	800d934 <VL53L0X_encode_timeout>
 800def0:	0003      	movs	r3, r0
 800def2:	8023      	strh	r3, [r4, #0]

				if (Status == VL53L0X_ERROR_NONE) {
 800def4:	197b      	adds	r3, r7, r5
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	b25b      	sxtb	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d109      	bne.n	800df12 <set_sequence_step_timeout+0x242>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800defe:	197c      	adds	r4, r7, r5
 800df00:	19bb      	adds	r3, r7, r6
 800df02:	881a      	ldrh	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2171      	movs	r1, #113	; 0x71
 800df08:	0018      	movs	r0, r3
 800df0a:	f001 fdbf 	bl	800fa8c <VL53L0X_WrWord>
 800df0e:	0003      	movs	r3, r0
 800df10:	7023      	strb	r3, [r4, #0]
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800df12:	2327      	movs	r3, #39	; 0x27
 800df14:	18fb      	adds	r3, r7, r3
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d108      	bne.n	800df30 <set_sequence_step_timeout+0x260>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	21dc      	movs	r1, #220	; 0xdc
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	505a      	str	r2, [r3, r1]
 800df26:	e003      	b.n	800df30 <set_sequence_step_timeout+0x260>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800df28:	2327      	movs	r3, #39	; 0x27
 800df2a:	18fb      	adds	r3, r7, r3
 800df2c:	22fc      	movs	r2, #252	; 0xfc
 800df2e:	701a      	strb	r2, [r3, #0]

	}
	return Status;
 800df30:	2327      	movs	r3, #39	; 0x27
 800df32:	18fb      	adds	r3, r7, r3
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	b25b      	sxtb	r3, r3
}
 800df38:	0018      	movs	r0, r3
 800df3a:	46bd      	mov	sp, r7
 800df3c:	b00b      	add	sp, #44	; 0x2c
 800df3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df40 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b08a      	sub	sp, #40	; 0x28
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	0008      	movs	r0, r1
 800df4a:	0011      	movs	r1, r2
 800df4c:	1cfb      	adds	r3, r7, #3
 800df4e:	1c02      	adds	r2, r0, #0
 800df50:	701a      	strb	r2, [r3, #0]
 800df52:	1cbb      	adds	r3, r7, #2
 800df54:	1c0a      	adds	r2, r1, #0
 800df56:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df58:	2127      	movs	r1, #39	; 0x27
 800df5a:	187b      	adds	r3, r7, r1
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800df60:	2326      	movs	r3, #38	; 0x26
 800df62:	18fb      	adds	r3, r7, r3
 800df64:	220c      	movs	r2, #12
 800df66:	701a      	strb	r2, [r3, #0]
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800df68:	2325      	movs	r3, #37	; 0x25
 800df6a:	18fb      	adds	r3, r7, r3
 800df6c:	2212      	movs	r2, #18
 800df6e:	701a      	strb	r2, [r3, #0]
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800df70:	2324      	movs	r3, #36	; 0x24
 800df72:	18fb      	adds	r3, r7, r3
 800df74:	2208      	movs	r2, #8
 800df76:	701a      	strb	r2, [r3, #0]
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800df78:	2323      	movs	r3, #35	; 0x23
 800df7a:	18fb      	adds	r3, r7, r3
 800df7c:	220e      	movs	r2, #14
 800df7e:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800df80:	230f      	movs	r3, #15
 800df82:	18fb      	adds	r3, r7, r3
 800df84:	2200      	movs	r2, #0
 800df86:	701a      	strb	r2, [r3, #0]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800df88:	1cbb      	adds	r3, r7, #2
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	2201      	movs	r2, #1
 800df8e:	4013      	ands	r3, r2
 800df90:	b2db      	uxtb	r3, r3
 800df92:	2b00      	cmp	r3, #0
 800df94:	d003      	beq.n	800df9e <VL53L0X_set_vcsel_pulse_period+0x5e>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800df96:	187b      	adds	r3, r7, r1
 800df98:	22fc      	movs	r2, #252	; 0xfc
 800df9a:	701a      	strb	r2, [r3, #0]
 800df9c:	e02c      	b.n	800dff8 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800df9e:	1cfb      	adds	r3, r7, #3
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d112      	bne.n	800dfcc <VL53L0X_set_vcsel_pulse_period+0x8c>
 800dfa6:	1cba      	adds	r2, r7, #2
 800dfa8:	2326      	movs	r3, #38	; 0x26
 800dfaa:	18fb      	adds	r3, r7, r3
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d306      	bcc.n	800dfc2 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800dfb4:	1cba      	adds	r2, r7, #2
 800dfb6:	2325      	movs	r3, #37	; 0x25
 800dfb8:	18fb      	adds	r3, r7, r3
 800dfba:	7812      	ldrb	r2, [r2, #0]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d904      	bls.n	800dfcc <VL53L0X_set_vcsel_pulse_period+0x8c>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dfc2:	2327      	movs	r3, #39	; 0x27
 800dfc4:	18fb      	adds	r3, r7, r3
 800dfc6:	22fc      	movs	r2, #252	; 0xfc
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	e015      	b.n	800dff8 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800dfcc:	1cfb      	adds	r3, r7, #3
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d111      	bne.n	800dff8 <VL53L0X_set_vcsel_pulse_period+0xb8>
 800dfd4:	1cba      	adds	r2, r7, #2
 800dfd6:	2324      	movs	r3, #36	; 0x24
 800dfd8:	18fb      	adds	r3, r7, r3
 800dfda:	7812      	ldrb	r2, [r2, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d306      	bcc.n	800dff0 <VL53L0X_set_vcsel_pulse_period+0xb0>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800dfe2:	1cba      	adds	r2, r7, #2
 800dfe4:	2323      	movs	r3, #35	; 0x23
 800dfe6:	18fb      	adds	r3, r7, r3
 800dfe8:	7812      	ldrb	r2, [r2, #0]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d903      	bls.n	800dff8 <VL53L0X_set_vcsel_pulse_period+0xb8>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dff0:	2327      	movs	r3, #39	; 0x27
 800dff2:	18fb      	adds	r3, r7, r3
 800dff4:	22fc      	movs	r2, #252	; 0xfc
 800dff6:	701a      	strb	r2, [r3, #0]
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800dff8:	2227      	movs	r2, #39	; 0x27
 800dffa:	18bb      	adds	r3, r7, r2
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	b25b      	sxtb	r3, r3
 800e000:	2b00      	cmp	r3, #0
 800e002:	d003      	beq.n	800e00c <VL53L0X_set_vcsel_pulse_period+0xcc>
		return Status;
 800e004:	18bb      	adds	r3, r7, r2
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	b25b      	sxtb	r3, r3
 800e00a:	e292      	b.n	800e532 <VL53L0X_set_vcsel_pulse_period+0x5f2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e00c:	1cfb      	adds	r3, r7, #3
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d160      	bne.n	800e0d6 <VL53L0X_set_vcsel_pulse_period+0x196>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e014:	1cbb      	adds	r3, r7, #2
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b0c      	cmp	r3, #12
 800e01a:	d113      	bne.n	800e044 <VL53L0X_set_vcsel_pulse_period+0x104>

			Status = VL53L0X_WrByte(Dev,
 800e01c:	2527      	movs	r5, #39	; 0x27
 800e01e:	197c      	adds	r4, r7, r5
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2218      	movs	r2, #24
 800e024:	2157      	movs	r1, #87	; 0x57
 800e026:	0018      	movs	r0, r3
 800e028:	f001 fd00 	bl	800fa2c <VL53L0X_WrByte>
 800e02c:	0003      	movs	r3, r0
 800e02e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e030:	197c      	adds	r4, r7, r5
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2208      	movs	r2, #8
 800e036:	2156      	movs	r1, #86	; 0x56
 800e038:	0018      	movs	r0, r3
 800e03a:	f001 fcf7 	bl	800fa2c <VL53L0X_WrByte>
 800e03e:	0003      	movs	r3, r0
 800e040:	7023      	strb	r3, [r4, #0]
 800e042:	e1b4      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e044:	1cbb      	adds	r3, r7, #2
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b0e      	cmp	r3, #14
 800e04a:	d113      	bne.n	800e074 <VL53L0X_set_vcsel_pulse_period+0x134>

			Status = VL53L0X_WrByte(Dev,
 800e04c:	2527      	movs	r5, #39	; 0x27
 800e04e:	197c      	adds	r4, r7, r5
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2230      	movs	r2, #48	; 0x30
 800e054:	2157      	movs	r1, #87	; 0x57
 800e056:	0018      	movs	r0, r3
 800e058:	f001 fce8 	bl	800fa2c <VL53L0X_WrByte>
 800e05c:	0003      	movs	r3, r0
 800e05e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e060:	197c      	adds	r4, r7, r5
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2208      	movs	r2, #8
 800e066:	2156      	movs	r1, #86	; 0x56
 800e068:	0018      	movs	r0, r3
 800e06a:	f001 fcdf 	bl	800fa2c <VL53L0X_WrByte>
 800e06e:	0003      	movs	r3, r0
 800e070:	7023      	strb	r3, [r4, #0]
 800e072:	e19c      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e074:	1cbb      	adds	r3, r7, #2
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	2b10      	cmp	r3, #16
 800e07a:	d113      	bne.n	800e0a4 <VL53L0X_set_vcsel_pulse_period+0x164>

			Status = VL53L0X_WrByte(Dev,
 800e07c:	2527      	movs	r5, #39	; 0x27
 800e07e:	197c      	adds	r4, r7, r5
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2240      	movs	r2, #64	; 0x40
 800e084:	2157      	movs	r1, #87	; 0x57
 800e086:	0018      	movs	r0, r3
 800e088:	f001 fcd0 	bl	800fa2c <VL53L0X_WrByte>
 800e08c:	0003      	movs	r3, r0
 800e08e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e090:	197c      	adds	r4, r7, r5
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2208      	movs	r2, #8
 800e096:	2156      	movs	r1, #86	; 0x56
 800e098:	0018      	movs	r0, r3
 800e09a:	f001 fcc7 	bl	800fa2c <VL53L0X_WrByte>
 800e09e:	0003      	movs	r3, r0
 800e0a0:	7023      	strb	r3, [r4, #0]
 800e0a2:	e184      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e0a4:	1cbb      	adds	r3, r7, #2
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	2b12      	cmp	r3, #18
 800e0aa:	d000      	beq.n	800e0ae <VL53L0X_set_vcsel_pulse_period+0x16e>
 800e0ac:	e17f      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800e0ae:	2527      	movs	r5, #39	; 0x27
 800e0b0:	197c      	adds	r4, r7, r5
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2250      	movs	r2, #80	; 0x50
 800e0b6:	2157      	movs	r1, #87	; 0x57
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	f001 fcb7 	bl	800fa2c <VL53L0X_WrByte>
 800e0be:	0003      	movs	r3, r0
 800e0c0:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e0c2:	197c      	adds	r4, r7, r5
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2208      	movs	r2, #8
 800e0c8:	2156      	movs	r1, #86	; 0x56
 800e0ca:	0018      	movs	r0, r3
 800e0cc:	f001 fcae 	bl	800fa2c <VL53L0X_WrByte>
 800e0d0:	0003      	movs	r3, r0
 800e0d2:	7023      	strb	r3, [r4, #0]
 800e0d4:	e16b      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e0d6:	1cfb      	adds	r3, r7, #3
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d000      	beq.n	800e0e0 <VL53L0X_set_vcsel_pulse_period+0x1a0>
 800e0de:	e166      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>

		if (VCSELPulsePeriodPCLK == 8) {
 800e0e0:	1cbb      	adds	r3, r7, #2
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b08      	cmp	r3, #8
 800e0e6:	d155      	bne.n	800e194 <VL53L0X_set_vcsel_pulse_period+0x254>

			Status = VL53L0X_WrByte(Dev,
 800e0e8:	2527      	movs	r5, #39	; 0x27
 800e0ea:	197c      	adds	r4, r7, r5
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2210      	movs	r2, #16
 800e0f0:	2148      	movs	r1, #72	; 0x48
 800e0f2:	0018      	movs	r0, r3
 800e0f4:	f001 fc9a 	bl	800fa2c <VL53L0X_WrByte>
 800e0f8:	0003      	movs	r3, r0
 800e0fa:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e0fc:	197c      	adds	r4, r7, r5
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2208      	movs	r2, #8
 800e102:	2147      	movs	r1, #71	; 0x47
 800e104:	0018      	movs	r0, r3
 800e106:	f001 fc91 	bl	800fa2c <VL53L0X_WrByte>
 800e10a:	0003      	movs	r3, r0
 800e10c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2202      	movs	r2, #2
 800e112:	2132      	movs	r1, #50	; 0x32
 800e114:	0018      	movs	r0, r3
 800e116:	f001 fc89 	bl	800fa2c <VL53L0X_WrByte>
 800e11a:	0003      	movs	r3, r0
 800e11c:	0019      	movs	r1, r3
 800e11e:	002c      	movs	r4, r5
 800e120:	193b      	adds	r3, r7, r4
 800e122:	193a      	adds	r2, r7, r4
 800e124:	7812      	ldrb	r2, [r2, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	220c      	movs	r2, #12
 800e12e:	2130      	movs	r1, #48	; 0x30
 800e130:	0018      	movs	r0, r3
 800e132:	f001 fc7b 	bl	800fa2c <VL53L0X_WrByte>
 800e136:	0003      	movs	r3, r0
 800e138:	0019      	movs	r1, r3
 800e13a:	193b      	adds	r3, r7, r4
 800e13c:	193a      	adds	r2, r7, r4
 800e13e:	7812      	ldrb	r2, [r2, #0]
 800e140:	430a      	orrs	r2, r1
 800e142:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	21ff      	movs	r1, #255	; 0xff
 800e14a:	0018      	movs	r0, r3
 800e14c:	f001 fc6e 	bl	800fa2c <VL53L0X_WrByte>
 800e150:	0003      	movs	r3, r0
 800e152:	0019      	movs	r1, r3
 800e154:	193b      	adds	r3, r7, r4
 800e156:	193a      	adds	r2, r7, r4
 800e158:	7812      	ldrb	r2, [r2, #0]
 800e15a:	430a      	orrs	r2, r1
 800e15c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2230      	movs	r2, #48	; 0x30
 800e162:	2130      	movs	r1, #48	; 0x30
 800e164:	0018      	movs	r0, r3
 800e166:	f001 fc61 	bl	800fa2c <VL53L0X_WrByte>
 800e16a:	0003      	movs	r3, r0
 800e16c:	0019      	movs	r1, r3
 800e16e:	193b      	adds	r3, r7, r4
 800e170:	193a      	adds	r2, r7, r4
 800e172:	7812      	ldrb	r2, [r2, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	21ff      	movs	r1, #255	; 0xff
 800e17e:	0018      	movs	r0, r3
 800e180:	f001 fc54 	bl	800fa2c <VL53L0X_WrByte>
 800e184:	0003      	movs	r3, r0
 800e186:	0019      	movs	r1, r3
 800e188:	193b      	adds	r3, r7, r4
 800e18a:	193a      	adds	r2, r7, r4
 800e18c:	7812      	ldrb	r2, [r2, #0]
 800e18e:	430a      	orrs	r2, r1
 800e190:	701a      	strb	r2, [r3, #0]
 800e192:	e10c      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e194:	1cbb      	adds	r3, r7, #2
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b0a      	cmp	r3, #10
 800e19a:	d155      	bne.n	800e248 <VL53L0X_set_vcsel_pulse_period+0x308>

			Status = VL53L0X_WrByte(Dev,
 800e19c:	2527      	movs	r5, #39	; 0x27
 800e19e:	197c      	adds	r4, r7, r5
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2228      	movs	r2, #40	; 0x28
 800e1a4:	2148      	movs	r1, #72	; 0x48
 800e1a6:	0018      	movs	r0, r3
 800e1a8:	f001 fc40 	bl	800fa2c <VL53L0X_WrByte>
 800e1ac:	0003      	movs	r3, r0
 800e1ae:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e1b0:	197c      	adds	r4, r7, r5
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2208      	movs	r2, #8
 800e1b6:	2147      	movs	r1, #71	; 0x47
 800e1b8:	0018      	movs	r0, r3
 800e1ba:	f001 fc37 	bl	800fa2c <VL53L0X_WrByte>
 800e1be:	0003      	movs	r3, r0
 800e1c0:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2203      	movs	r2, #3
 800e1c6:	2132      	movs	r1, #50	; 0x32
 800e1c8:	0018      	movs	r0, r3
 800e1ca:	f001 fc2f 	bl	800fa2c <VL53L0X_WrByte>
 800e1ce:	0003      	movs	r3, r0
 800e1d0:	0019      	movs	r1, r3
 800e1d2:	002c      	movs	r4, r5
 800e1d4:	193b      	adds	r3, r7, r4
 800e1d6:	193a      	adds	r2, r7, r4
 800e1d8:	7812      	ldrb	r2, [r2, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2209      	movs	r2, #9
 800e1e2:	2130      	movs	r1, #48	; 0x30
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	f001 fc21 	bl	800fa2c <VL53L0X_WrByte>
 800e1ea:	0003      	movs	r3, r0
 800e1ec:	0019      	movs	r1, r3
 800e1ee:	193b      	adds	r3, r7, r4
 800e1f0:	193a      	adds	r2, r7, r4
 800e1f2:	7812      	ldrb	r2, [r2, #0]
 800e1f4:	430a      	orrs	r2, r1
 800e1f6:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	21ff      	movs	r1, #255	; 0xff
 800e1fe:	0018      	movs	r0, r3
 800e200:	f001 fc14 	bl	800fa2c <VL53L0X_WrByte>
 800e204:	0003      	movs	r3, r0
 800e206:	0019      	movs	r1, r3
 800e208:	193b      	adds	r3, r7, r4
 800e20a:	193a      	adds	r2, r7, r4
 800e20c:	7812      	ldrb	r2, [r2, #0]
 800e20e:	430a      	orrs	r2, r1
 800e210:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	2130      	movs	r1, #48	; 0x30
 800e218:	0018      	movs	r0, r3
 800e21a:	f001 fc07 	bl	800fa2c <VL53L0X_WrByte>
 800e21e:	0003      	movs	r3, r0
 800e220:	0019      	movs	r1, r3
 800e222:	193b      	adds	r3, r7, r4
 800e224:	193a      	adds	r2, r7, r4
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	430a      	orrs	r2, r1
 800e22a:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	21ff      	movs	r1, #255	; 0xff
 800e232:	0018      	movs	r0, r3
 800e234:	f001 fbfa 	bl	800fa2c <VL53L0X_WrByte>
 800e238:	0003      	movs	r3, r0
 800e23a:	0019      	movs	r1, r3
 800e23c:	193b      	adds	r3, r7, r4
 800e23e:	193a      	adds	r2, r7, r4
 800e240:	7812      	ldrb	r2, [r2, #0]
 800e242:	430a      	orrs	r2, r1
 800e244:	701a      	strb	r2, [r3, #0]
 800e246:	e0b2      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800e248:	1cbb      	adds	r3, r7, #2
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b0c      	cmp	r3, #12
 800e24e:	d155      	bne.n	800e2fc <VL53L0X_set_vcsel_pulse_period+0x3bc>

			Status = VL53L0X_WrByte(Dev,
 800e250:	2527      	movs	r5, #39	; 0x27
 800e252:	197c      	adds	r4, r7, r5
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2238      	movs	r2, #56	; 0x38
 800e258:	2148      	movs	r1, #72	; 0x48
 800e25a:	0018      	movs	r0, r3
 800e25c:	f001 fbe6 	bl	800fa2c <VL53L0X_WrByte>
 800e260:	0003      	movs	r3, r0
 800e262:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800e264:	197c      	adds	r4, r7, r5
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2208      	movs	r2, #8
 800e26a:	2147      	movs	r1, #71	; 0x47
 800e26c:	0018      	movs	r0, r3
 800e26e:	f001 fbdd 	bl	800fa2c <VL53L0X_WrByte>
 800e272:	0003      	movs	r3, r0
 800e274:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2203      	movs	r2, #3
 800e27a:	2132      	movs	r1, #50	; 0x32
 800e27c:	0018      	movs	r0, r3
 800e27e:	f001 fbd5 	bl	800fa2c <VL53L0X_WrByte>
 800e282:	0003      	movs	r3, r0
 800e284:	0019      	movs	r1, r3
 800e286:	002c      	movs	r4, r5
 800e288:	193b      	adds	r3, r7, r4
 800e28a:	193a      	adds	r2, r7, r4
 800e28c:	7812      	ldrb	r2, [r2, #0]
 800e28e:	430a      	orrs	r2, r1
 800e290:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2208      	movs	r2, #8
 800e296:	2130      	movs	r1, #48	; 0x30
 800e298:	0018      	movs	r0, r3
 800e29a:	f001 fbc7 	bl	800fa2c <VL53L0X_WrByte>
 800e29e:	0003      	movs	r3, r0
 800e2a0:	0019      	movs	r1, r3
 800e2a2:	193b      	adds	r3, r7, r4
 800e2a4:	193a      	adds	r2, r7, r4
 800e2a6:	7812      	ldrb	r2, [r2, #0]
 800e2a8:	430a      	orrs	r2, r1
 800e2aa:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	21ff      	movs	r1, #255	; 0xff
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f001 fbba 	bl	800fa2c <VL53L0X_WrByte>
 800e2b8:	0003      	movs	r3, r0
 800e2ba:	0019      	movs	r1, r3
 800e2bc:	193b      	adds	r3, r7, r4
 800e2be:	193a      	adds	r2, r7, r4
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2220      	movs	r2, #32
 800e2ca:	2130      	movs	r1, #48	; 0x30
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	f001 fbad 	bl	800fa2c <VL53L0X_WrByte>
 800e2d2:	0003      	movs	r3, r0
 800e2d4:	0019      	movs	r1, r3
 800e2d6:	193b      	adds	r3, r7, r4
 800e2d8:	193a      	adds	r2, r7, r4
 800e2da:	7812      	ldrb	r2, [r2, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	21ff      	movs	r1, #255	; 0xff
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	f001 fba0 	bl	800fa2c <VL53L0X_WrByte>
 800e2ec:	0003      	movs	r3, r0
 800e2ee:	0019      	movs	r1, r3
 800e2f0:	193b      	adds	r3, r7, r4
 800e2f2:	193a      	adds	r2, r7, r4
 800e2f4:	7812      	ldrb	r2, [r2, #0]
 800e2f6:	430a      	orrs	r2, r1
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	e058      	b.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e2fc:	1cbb      	adds	r3, r7, #2
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	2b0e      	cmp	r3, #14
 800e302:	d154      	bne.n	800e3ae <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800e304:	2527      	movs	r5, #39	; 0x27
 800e306:	197c      	adds	r4, r7, r5
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2248      	movs	r2, #72	; 0x48
 800e30c:	2148      	movs	r1, #72	; 0x48
 800e30e:	0018      	movs	r0, r3
 800e310:	f001 fb8c 	bl	800fa2c <VL53L0X_WrByte>
 800e314:	0003      	movs	r3, r0
 800e316:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800e318:	197c      	adds	r4, r7, r5
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2208      	movs	r2, #8
 800e31e:	2147      	movs	r1, #71	; 0x47
 800e320:	0018      	movs	r0, r3
 800e322:	f001 fb83 	bl	800fa2c <VL53L0X_WrByte>
 800e326:	0003      	movs	r3, r0
 800e328:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2203      	movs	r2, #3
 800e32e:	2132      	movs	r1, #50	; 0x32
 800e330:	0018      	movs	r0, r3
 800e332:	f001 fb7b 	bl	800fa2c <VL53L0X_WrByte>
 800e336:	0003      	movs	r3, r0
 800e338:	0019      	movs	r1, r3
 800e33a:	002c      	movs	r4, r5
 800e33c:	193b      	adds	r3, r7, r4
 800e33e:	193a      	adds	r2, r7, r4
 800e340:	7812      	ldrb	r2, [r2, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2207      	movs	r2, #7
 800e34a:	2130      	movs	r1, #48	; 0x30
 800e34c:	0018      	movs	r0, r3
 800e34e:	f001 fb6d 	bl	800fa2c <VL53L0X_WrByte>
 800e352:	0003      	movs	r3, r0
 800e354:	0019      	movs	r1, r3
 800e356:	193b      	adds	r3, r7, r4
 800e358:	193a      	adds	r2, r7, r4
 800e35a:	7812      	ldrb	r2, [r2, #0]
 800e35c:	430a      	orrs	r2, r1
 800e35e:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	21ff      	movs	r1, #255	; 0xff
 800e366:	0018      	movs	r0, r3
 800e368:	f001 fb60 	bl	800fa2c <VL53L0X_WrByte>
 800e36c:	0003      	movs	r3, r0
 800e36e:	0019      	movs	r1, r3
 800e370:	193b      	adds	r3, r7, r4
 800e372:	193a      	adds	r2, r7, r4
 800e374:	7812      	ldrb	r2, [r2, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2220      	movs	r2, #32
 800e37e:	2130      	movs	r1, #48	; 0x30
 800e380:	0018      	movs	r0, r3
 800e382:	f001 fb53 	bl	800fa2c <VL53L0X_WrByte>
 800e386:	0003      	movs	r3, r0
 800e388:	0019      	movs	r1, r3
 800e38a:	193b      	adds	r3, r7, r4
 800e38c:	193a      	adds	r2, r7, r4
 800e38e:	7812      	ldrb	r2, [r2, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	21ff      	movs	r1, #255	; 0xff
 800e39a:	0018      	movs	r0, r3
 800e39c:	f001 fb46 	bl	800fa2c <VL53L0X_WrByte>
 800e3a0:	0003      	movs	r3, r0
 800e3a2:	0019      	movs	r1, r3
 800e3a4:	193b      	adds	r3, r7, r4
 800e3a6:	193a      	adds	r2, r7, r4
 800e3a8:	7812      	ldrb	r2, [r2, #0]
 800e3aa:	430a      	orrs	r2, r1
 800e3ac:	701a      	strb	r2, [r3, #0]
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800e3ae:	2327      	movs	r3, #39	; 0x27
 800e3b0:	18fb      	adds	r3, r7, r3
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	b25b      	sxtb	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d000      	beq.n	800e3bc <VL53L0X_set_vcsel_pulse_period+0x47c>
 800e3ba:	e093      	b.n	800e4e4 <VL53L0X_set_vcsel_pulse_period+0x5a4>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800e3bc:	2322      	movs	r3, #34	; 0x22
 800e3be:	18fc      	adds	r4, r7, r3
 800e3c0:	1cbb      	adds	r3, r7, #2
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	0018      	movs	r0, r3
 800e3c6:	f7fe fcc6 	bl	800cd56 <VL53L0X_encode_vcsel_period>
 800e3ca:	0003      	movs	r3, r0
 800e3cc:	7023      	strb	r3, [r4, #0]
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800e3ce:	1cfb      	adds	r3, r7, #3
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d002      	beq.n	800e3dc <VL53L0X_set_vcsel_pulse_period+0x49c>
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d04f      	beq.n	800e47a <VL53L0X_set_vcsel_pulse_period+0x53a>
 800e3da:	e07e      	b.n	800e4da <VL53L0X_set_vcsel_pulse_period+0x59a>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e3dc:	2527      	movs	r5, #39	; 0x27
 800e3de:	197c      	adds	r4, r7, r5
 800e3e0:	2314      	movs	r3, #20
 800e3e2:	18fa      	adds	r2, r7, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2103      	movs	r1, #3
 800e3e8:	0018      	movs	r0, r3
 800e3ea:	f7ff fb57 	bl	800da9c <get_sequence_step_timeout>
 800e3ee:	0003      	movs	r3, r0
 800e3f0:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e3f2:	197b      	adds	r3, r7, r5
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	b25b      	sxtb	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d109      	bne.n	800e410 <VL53L0X_set_vcsel_pulse_period+0x4d0>
				Status = get_sequence_step_timeout(Dev,
 800e3fc:	197c      	adds	r4, r7, r5
 800e3fe:	2310      	movs	r3, #16
 800e400:	18fa      	adds	r2, r7, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2102      	movs	r1, #2
 800e406:	0018      	movs	r0, r3
 800e408:	f7ff fb48 	bl	800da9c <get_sequence_step_timeout>
 800e40c:	0003      	movs	r3, r0
 800e40e:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e410:	2227      	movs	r2, #39	; 0x27
 800e412:	18bb      	adds	r3, r7, r2
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	b25b      	sxtb	r3, r3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10a      	bne.n	800e432 <VL53L0X_set_vcsel_pulse_period+0x4f2>
				Status = VL53L0X_WrByte(Dev,
 800e41c:	18bc      	adds	r4, r7, r2
 800e41e:	2322      	movs	r3, #34	; 0x22
 800e420:	18fb      	adds	r3, r7, r3
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2150      	movs	r1, #80	; 0x50
 800e428:	0018      	movs	r0, r3
 800e42a:	f001 faff 	bl	800fa2c <VL53L0X_WrByte>
 800e42e:	0003      	movs	r3, r0
 800e430:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e432:	2127      	movs	r1, #39	; 0x27
 800e434:	187b      	adds	r3, r7, r1
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b25b      	sxtb	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d108      	bne.n	800e450 <VL53L0X_set_vcsel_pulse_period+0x510>
				Status = set_sequence_step_timeout(Dev,
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	187c      	adds	r4, r7, r1
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2103      	movs	r1, #3
 800e446:	0018      	movs	r0, r3
 800e448:	f7ff fc42 	bl	800dcd0 <set_sequence_step_timeout>
 800e44c:	0003      	movs	r3, r0
 800e44e:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800e450:	2127      	movs	r1, #39	; 0x27
 800e452:	187b      	adds	r3, r7, r1
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	b25b      	sxtb	r3, r3
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d108      	bne.n	800e46e <VL53L0X_set_vcsel_pulse_period+0x52e>
				Status = set_sequence_step_timeout(Dev,
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	187c      	adds	r4, r7, r1
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2102      	movs	r1, #2
 800e464:	0018      	movs	r0, r3
 800e466:	f7ff fc33 	bl	800dcd0 <set_sequence_step_timeout>
 800e46a:	0003      	movs	r3, r0
 800e46c:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	1cba      	adds	r2, r7, #2
 800e472:	21e8      	movs	r1, #232	; 0xe8
 800e474:	7812      	ldrb	r2, [r2, #0]
 800e476:	545a      	strb	r2, [r3, r1]
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e478:	e035      	b.n	800e4e6 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e47a:	2527      	movs	r5, #39	; 0x27
 800e47c:	197c      	adds	r4, r7, r5
 800e47e:	2318      	movs	r3, #24
 800e480:	18fa      	adds	r2, r7, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2104      	movs	r1, #4
 800e486:	0018      	movs	r0, r3
 800e488:	f7ff fb08 	bl	800da9c <get_sequence_step_timeout>
 800e48c:	0003      	movs	r3, r0
 800e48e:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e490:	197b      	adds	r3, r7, r5
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	b25b      	sxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10a      	bne.n	800e4b0 <VL53L0X_set_vcsel_pulse_period+0x570>
				Status = VL53L0X_WrByte(Dev,
 800e49a:	197c      	adds	r4, r7, r5
 800e49c:	2322      	movs	r3, #34	; 0x22
 800e49e:	18fb      	adds	r3, r7, r3
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2170      	movs	r1, #112	; 0x70
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f001 fac0 	bl	800fa2c <VL53L0X_WrByte>
 800e4ac:	0003      	movs	r3, r0
 800e4ae:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e4b0:	2127      	movs	r1, #39	; 0x27
 800e4b2:	187b      	adds	r3, r7, r1
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	b25b      	sxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d108      	bne.n	800e4ce <VL53L0X_set_vcsel_pulse_period+0x58e>
				Status = set_sequence_step_timeout(Dev,
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	187c      	adds	r4, r7, r1
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2104      	movs	r1, #4
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7ff fc03 	bl	800dcd0 <set_sequence_step_timeout>
 800e4ca:	0003      	movs	r3, r0
 800e4cc:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	1cba      	adds	r2, r7, #2
 800e4d2:	21e0      	movs	r1, #224	; 0xe0
 800e4d4:	7812      	ldrb	r2, [r2, #0]
 800e4d6:	545a      	strb	r2, [r3, r1]
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e4d8:	e005      	b.n	800e4e6 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e4da:	2327      	movs	r3, #39	; 0x27
 800e4dc:	18fb      	adds	r3, r7, r3
 800e4de:	22fc      	movs	r2, #252	; 0xfc
 800e4e0:	701a      	strb	r2, [r3, #0]
 800e4e2:	e000      	b.n	800e4e6 <VL53L0X_set_vcsel_pulse_period+0x5a6>
		}
	}
 800e4e4:	46c0      	nop			; (mov r8, r8)

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800e4e6:	2227      	movs	r2, #39	; 0x27
 800e4e8:	18bb      	adds	r3, r7, r2
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	b25b      	sxtb	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10b      	bne.n	800e50a <VL53L0X_set_vcsel_pulse_period+0x5ca>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800e4f8:	18bc      	adds	r4, r7, r2
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	0011      	movs	r1, r2
 800e500:	0018      	movs	r0, r3
 800e502:	f7fc f887 	bl	800a614 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800e506:	0003      	movs	r3, r0
 800e508:	7023      	strb	r3, [r4, #0]
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800e50a:	2227      	movs	r2, #39	; 0x27
 800e50c:	18bb      	adds	r3, r7, r2
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	b25b      	sxtb	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d109      	bne.n	800e52a <VL53L0X_set_vcsel_pulse_period+0x5ea>
		Status = VL53L0X_perform_phase_calibration(
 800e516:	18bc      	adds	r4, r7, r2
 800e518:	230f      	movs	r3, #15
 800e51a:	18f9      	adds	r1, r7, r3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	2301      	movs	r3, #1
 800e520:	2200      	movs	r2, #0
 800e522:	f7fe fae4 	bl	800caee <VL53L0X_perform_phase_calibration>
 800e526:	0003      	movs	r3, r0
 800e528:	7023      	strb	r3, [r4, #0]
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800e52a:	2327      	movs	r3, #39	; 0x27
 800e52c:	18fb      	adds	r3, r7, r3
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	b25b      	sxtb	r3, r3
}
 800e532:	0018      	movs	r0, r3
 800e534:	46bd      	mov	sp, r7
 800e536:	b00a      	add	sp, #40	; 0x28
 800e538:	bdb0      	pop	{r4, r5, r7, pc}

0800e53a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e53a:	b590      	push	{r4, r7, lr}
 800e53c:	b087      	sub	sp, #28
 800e53e:	af00      	add	r7, sp, #0
 800e540:	60f8      	str	r0, [r7, #12]
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	200b      	movs	r0, #11
 800e546:	183b      	adds	r3, r7, r0
 800e548:	1c0a      	adds	r2, r1, #0
 800e54a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e54c:	2317      	movs	r3, #23
 800e54e:	18fb      	adds	r3, r7, r3
 800e550:	2200      	movs	r2, #0
 800e552:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e554:	183b      	adds	r3, r7, r0
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <VL53L0X_get_vcsel_pulse_period+0x28>
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d00c      	beq.n	800e57a <VL53L0X_get_vcsel_pulse_period+0x40>
 800e560:	e017      	b.n	800e592 <VL53L0X_get_vcsel_pulse_period+0x58>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e562:	2317      	movs	r3, #23
 800e564:	18fc      	adds	r4, r7, r3
 800e566:	2316      	movs	r3, #22
 800e568:	18fa      	adds	r2, r7, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2150      	movs	r1, #80	; 0x50
 800e56e:	0018      	movs	r0, r3
 800e570:	f001 fb0b 	bl	800fb8a <VL53L0X_RdByte>
 800e574:	0003      	movs	r3, r0
 800e576:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e578:	e00f      	b.n	800e59a <VL53L0X_get_vcsel_pulse_period+0x60>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e57a:	2317      	movs	r3, #23
 800e57c:	18fc      	adds	r4, r7, r3
 800e57e:	2316      	movs	r3, #22
 800e580:	18fa      	adds	r2, r7, r3
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2170      	movs	r1, #112	; 0x70
 800e586:	0018      	movs	r0, r3
 800e588:	f001 faff 	bl	800fb8a <VL53L0X_RdByte>
 800e58c:	0003      	movs	r3, r0
 800e58e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e590:	e003      	b.n	800e59a <VL53L0X_get_vcsel_pulse_period+0x60>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e592:	2317      	movs	r3, #23
 800e594:	18fb      	adds	r3, r7, r3
 800e596:	22fc      	movs	r2, #252	; 0xfc
 800e598:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e59a:	2317      	movs	r3, #23
 800e59c:	18fb      	adds	r3, r7, r3
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	b25b      	sxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d109      	bne.n	800e5ba <VL53L0X_get_vcsel_pulse_period+0x80>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e5a6:	2316      	movs	r3, #22
 800e5a8:	18fb      	adds	r3, r7, r3
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	0018      	movs	r0, r3
 800e5ae:	f7fe fbbb 	bl	800cd28 <VL53L0X_decode_vcsel_period>
 800e5b2:	0003      	movs	r3, r0
 800e5b4:	001a      	movs	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	701a      	strb	r2, [r3, #0]

	return Status;
 800e5ba:	2317      	movs	r3, #23
 800e5bc:	18fb      	adds	r3, r7, r3
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	b25b      	sxtb	r3, r3
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b007      	add	sp, #28
 800e5c8:	bd90      	pop	{r4, r7, pc}
	...

0800e5cc <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ce:	b093      	sub	sp, #76	; 0x4c
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e5d6:	2147      	movs	r1, #71	; 0x47
 800e5d8:	187b      	adds	r3, r7, r1
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e5de:	23fa      	movs	r3, #250	; 0xfa
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e5e4:	4b7a      	ldr	r3, [pc, #488]	; (800e7d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x204>)
 800e5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e5e8:	23f0      	movs	r3, #240	; 0xf0
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e5ee:	23a5      	movs	r3, #165	; 0xa5
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e5f4:	4b77      	ldr	r3, [pc, #476]	; (800e7d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x208>)
 800e5f6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e5f8:	4b77      	ldr	r3, [pc, #476]	; (800e7d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x20c>)
 800e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e5fc:	23a5      	movs	r3, #165	; 0xa5
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e602:	4b76      	ldr	r3, [pc, #472]	; (800e7dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x210>)
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e606:	2300      	movs	r3, #0
 800e608:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e60a:	4b75      	ldr	r3, [pc, #468]	; (800e7e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x214>)
 800e60c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	6a3b      	ldr	r3, [r7, #32]
 800e616:	429a      	cmp	r2, r3
 800e618:	d206      	bcs.n	800e628 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x5c>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e61a:	187b      	adds	r3, r7, r1
 800e61c:	22fc      	movs	r2, #252	; 0xfc
 800e61e:	701a      	strb	r2, [r3, #0]
		return Status;
 800e620:	187b      	adds	r3, r7, r1
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	b25b      	sxtb	r3, r3
 800e626:	e0ce      	b.n	800e7c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62c:	18d3      	adds	r3, r2, r3
	FinalRangeTimingBudgetMicroSeconds =
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e634:	2647      	movs	r6, #71	; 0x47
 800e636:	19bc      	adds	r4, r7, r6
 800e638:	2514      	movs	r5, #20
 800e63a:	197a      	adds	r2, r7, r5
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	0011      	movs	r1, r2
 800e640:	0018      	movs	r0, r3
 800e642:	f7fc f99b 	bl	800a97c <VL53L0X_GetSequenceStepEnables>
 800e646:	0003      	movs	r3, r0
 800e648:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE &&
 800e64a:	19bb      	adds	r3, r7, r6
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	b25b      	sxtb	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d000      	beq.n	800e656 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8a>
 800e654:	e06d      	b.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
		(SchedulerSequenceSteps.TccOn  ||
 800e656:	197b      	adds	r3, r7, r5
 800e658:	781b      	ldrb	r3, [r3, #0]
	if (Status == VL53L0X_ERROR_NONE &&
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d107      	bne.n	800e66e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.MsrcOn ||
 800e65e:	197b      	adds	r3, r7, r5
 800e660:	785b      	ldrb	r3, [r3, #1]
		(SchedulerSequenceSteps.TccOn  ||
 800e662:	2b00      	cmp	r3, #0
 800e664:	d103      	bne.n	800e66e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.DssOn)) {
 800e666:	197b      	adds	r3, r7, r5
 800e668:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d061      	beq.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e66e:	2547      	movs	r5, #71	; 0x47
 800e670:	197c      	adds	r4, r7, r5
 800e672:	2310      	movs	r3, #16
 800e674:	18fa      	adds	r2, r7, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2102      	movs	r1, #2
 800e67a:	0018      	movs	r0, r3
 800e67c:	f7ff fa0e 	bl	800da9c <get_sequence_step_timeout>
 800e680:	0003      	movs	r3, r0
 800e682:	7023      	strb	r3, [r4, #0]
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e684:	197b      	adds	r3, r7, r5
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d003      	beq.n	800e696 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			return Status;
 800e68e:	197b      	adds	r3, r7, r5
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	b25b      	sxtb	r3, r3
 800e694:	e097      	b.n	800e7c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e696:	2314      	movs	r3, #20
 800e698:	18fb      	adds	r3, r7, r3
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d010      	beq.n	800e6c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e6a0:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a4:	18d3      	adds	r3, r2, r3
 800e6a6:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e6a8:	69fa      	ldr	r2, [r7, #28]
 800e6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d204      	bcs.n	800e6ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0xee>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e6b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6b8:	e003      	b.n	800e6c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e6ba:	2347      	movs	r3, #71	; 0x47
 800e6bc:	18fb      	adds	r3, r7, r3
 800e6be:	22fc      	movs	r2, #252	; 0xfc
 800e6c0:	701a      	strb	r2, [r3, #0]
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e6c2:	2247      	movs	r2, #71	; 0x47
 800e6c4:	18bb      	adds	r3, r7, r2
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	b25b      	sxtb	r3, r3
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x10a>
			LOG_FUNCTION_END(Status);
			return Status;
 800e6ce:	18bb      	adds	r3, r7, r2
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b25b      	sxtb	r3, r3
 800e6d4:	e077      	b.n	800e7c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e6d6:	2314      	movs	r3, #20
 800e6d8:	18fb      	adds	r3, r7, r3
 800e6da:	789b      	ldrb	r3, [r3, #2]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d012      	beq.n	800e706 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	18d3      	adds	r3, r2, r3
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e6ea:	69fa      	ldr	r2, [r7, #28]
 800e6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d204      	bcs.n	800e6fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x130>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e6f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	643b      	str	r3, [r7, #64]	; 0x40
 800e6fa:	e01a      	b.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e6fc:	2347      	movs	r3, #71	; 0x47
 800e6fe:	18fb      	adds	r3, r7, r3
 800e700:	22fc      	movs	r2, #252	; 0xfc
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	e015      	b.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e706:	2314      	movs	r3, #20
 800e708:	18fb      	adds	r3, r7, r3
 800e70a:	785b      	ldrb	r3, [r3, #1]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d010      	beq.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e714:	18d3      	adds	r3, r2, r3
 800e716:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d204      	bcs.n	800e72a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	643b      	str	r3, [r7, #64]	; 0x40
 800e728:	e003      	b.n	800e732 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e72a:	2347      	movs	r3, #71	; 0x47
 800e72c:	18fb      	adds	r3, r7, r3
 800e72e:	22fc      	movs	r2, #252	; 0xfc
 800e730:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e732:	2247      	movs	r2, #71	; 0x47
 800e734:	18bb      	adds	r3, r7, r2
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	b25b      	sxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d003      	beq.n	800e746 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17a>
		LOG_FUNCTION_END(Status);
		return Status;
 800e73e:	18bb      	adds	r3, r7, r2
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	b25b      	sxtb	r3, r3
 800e744:	e03f      	b.n	800e7c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e746:	2314      	movs	r3, #20
 800e748:	18fb      	adds	r3, r7, r3
 800e74a:	78db      	ldrb	r3, [r3, #3]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01b      	beq.n	800e788 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e750:	2347      	movs	r3, #71	; 0x47
 800e752:	18fc      	adds	r4, r7, r3
 800e754:	230c      	movs	r3, #12
 800e756:	18fa      	adds	r2, r7, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2103      	movs	r1, #3
 800e75c:	0018      	movs	r0, r3
 800e75e:	f7ff f99d 	bl	800da9c <get_sequence_step_timeout>
 800e762:	0003      	movs	r3, r0
 800e764:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e76a:	18d3      	adds	r3, r2, r3
 800e76c:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e76e:	69fa      	ldr	r2, [r7, #28]
 800e770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e772:	429a      	cmp	r2, r3
 800e774:	d204      	bcs.n	800e780 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e776:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	643b      	str	r3, [r7, #64]	; 0x40
 800e77e:	e003      	b.n	800e788 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e780:	2347      	movs	r3, #71	; 0x47
 800e782:	18fb      	adds	r3, r7, r3
 800e784:	22fc      	movs	r2, #252	; 0xfc
 800e786:	701a      	strb	r2, [r3, #0]
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e788:	2147      	movs	r1, #71	; 0x47
 800e78a:	187b      	adds	r3, r7, r1
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	b25b      	sxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d114      	bne.n	800e7be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e794:	2314      	movs	r3, #20
 800e796:	18fb      	adds	r3, r7, r3
 800e798:	791b      	ldrb	r3, [r3, #4]
	if (Status == VL53L0X_ERROR_NONE &&
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00f      	beq.n	800e7be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>

		FinalRangeTimingBudgetMicroSeconds -=
 800e79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e7a6:	187c      	adds	r4, r7, r1
 800e7a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2104      	movs	r1, #4
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	f7ff fa8e 	bl	800dcd0 <set_sequence_step_timeout>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	7023      	strb	r3, [r4, #0]
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e7be:	2347      	movs	r3, #71	; 0x47
 800e7c0:	18fb      	adds	r3, r7, r3
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	b25b      	sxtb	r3, r3
}
 800e7c6:	0018      	movs	r0, r3
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	b013      	add	sp, #76	; 0x4c
 800e7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ce:	46c0      	nop			; (mov r8, r8)
 800e7d0:	00000776 	.word	0x00000776
 800e7d4:	0000024e 	.word	0x0000024e
 800e7d8:	000002b2 	.word	0x000002b2
 800e7dc:	00000226 	.word	0x00000226
 800e7e0:	00004e20 	.word	0x00004e20

0800e7e4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e7e4:	b5b0      	push	{r4, r5, r7, lr}
 800e7e6:	b090      	sub	sp, #64	; 0x40
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e7ee:	213f      	movs	r1, #63	; 0x3f
 800e7f0:	187b      	adds	r3, r7, r1
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	701a      	strb	r2, [r3, #0]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e7f6:	23fa      	movs	r3, #250	; 0xfa
 800e7f8:	00db      	lsls	r3, r3, #3
 800e7fa:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e7fc:	4b5e      	ldr	r3, [pc, #376]	; (800e978 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x194>)
 800e7fe:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e800:	23f0      	movs	r3, #240	; 0xf0
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e806:	23a5      	movs	r3, #165	; 0xa5
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800e80c:	4b5b      	ldr	r3, [pc, #364]	; (800e97c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x198>)
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800e810:	4b5b      	ldr	r3, [pc, #364]	; (800e980 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>)
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e814:	23a5      	movs	r3, #165	; 0xa5
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e81a:	4b5a      	ldr	r3, [pc, #360]	; (800e984 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a0>)
 800e81c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e81e:	2300      	movs	r3, #0
 800e820:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800e822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e826:	18d2      	adds	r2, r2, r3
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e82c:	000d      	movs	r5, r1
 800e82e:	187c      	adds	r4, r7, r1
 800e830:	2318      	movs	r3, #24
 800e832:	18fa      	adds	r2, r7, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	0011      	movs	r1, r2
 800e838:	0018      	movs	r0, r3
 800e83a:	f7fc f89f 	bl	800a97c <VL53L0X_GetSequenceStepEnables>
 800e83e:	0003      	movs	r3, r0
 800e840:	7023      	strb	r3, [r4, #0]

	if (Status != VL53L0X_ERROR_NONE) {
 800e842:	197b      	adds	r3, r7, r5
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	b25b      	sxtb	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
		LOG_FUNCTION_END(Status);
		return Status;
 800e84c:	197b      	adds	r3, r7, r5
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	b25b      	sxtb	r3, r3
 800e852:	e08d      	b.n	800e970 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800e854:	2218      	movs	r2, #24
 800e856:	18bb      	adds	r3, r7, r2
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d107      	bne.n	800e86e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.MsrcOn ||
 800e85e:	18bb      	adds	r3, r7, r2
 800e860:	785b      	ldrb	r3, [r3, #1]
	if (SchedulerSequenceSteps.TccOn  ||
 800e862:	2b00      	cmp	r3, #0
 800e864:	d103      	bne.n	800e86e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.DssOn) {
 800e866:	18bb      	adds	r3, r7, r2
 800e868:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d038      	beq.n	800e8e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>

		Status = get_sequence_step_timeout(Dev,
 800e86e:	253f      	movs	r5, #63	; 0x3f
 800e870:	197c      	adds	r4, r7, r5
 800e872:	2310      	movs	r3, #16
 800e874:	18fa      	adds	r2, r7, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2102      	movs	r1, #2
 800e87a:	0018      	movs	r0, r3
 800e87c:	f7ff f90e 	bl	800da9c <get_sequence_step_timeout>
 800e880:	0003      	movs	r3, r0
 800e882:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800e884:	197b      	adds	r3, r7, r5
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	b25b      	sxtb	r3, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d128      	bne.n	800e8e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
			if (SchedulerSequenceSteps.TccOn) {
 800e88e:	2318      	movs	r3, #24
 800e890:	18fb      	adds	r3, r7, r3
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d007      	beq.n	800e8a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc4>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e89c:	6939      	ldr	r1, [r7, #16]
 800e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a0:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800e8a2:	18d2      	adds	r2, r2, r3
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800e8a8:	2318      	movs	r3, #24
 800e8aa:	18fb      	adds	r3, r7, r3
 800e8ac:	789b      	ldrb	r3, [r3, #2]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d009      	beq.n	800e8c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800e8b6:	6939      	ldr	r1, [r7, #16]
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	18cb      	adds	r3, r1, r3
 800e8bc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e8be:	18d2      	adds	r2, r2, r3
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	e00c      	b.n	800e8e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800e8c6:	2318      	movs	r3, #24
 800e8c8:	18fb      	adds	r3, r7, r3
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e8d4:	6939      	ldr	r1, [r7, #16]
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800e8da:	18d2      	adds	r2, r2, r3
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e8e0:	223f      	movs	r2, #63	; 0x3f
 800e8e2:	18bb      	adds	r3, r7, r2
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	b25b      	sxtb	r3, r3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d116      	bne.n	800e91a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800e8ec:	2318      	movs	r3, #24
 800e8ee:	18fb      	adds	r3, r7, r3
 800e8f0:	78db      	ldrb	r3, [r3, #3]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d011      	beq.n	800e91a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
			Status = get_sequence_step_timeout(Dev,
 800e8f6:	18bc      	adds	r4, r7, r2
 800e8f8:	230c      	movs	r3, #12
 800e8fa:	18fa      	adds	r2, r7, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2103      	movs	r1, #3
 800e900:	0018      	movs	r0, r3
 800e902:	f7ff f8cb 	bl	800da9c <get_sequence_step_timeout>
 800e906:	0003      	movs	r3, r0
 800e908:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800e90e:	68f9      	ldr	r1, [r7, #12]
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800e914:	18d2      	adds	r2, r2, r3
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e91a:	223f      	movs	r2, #63	; 0x3f
 800e91c:	18bb      	adds	r3, r7, r2
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	b25b      	sxtb	r3, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	d116      	bne.n	800e954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800e926:	2318      	movs	r3, #24
 800e928:	18fb      	adds	r3, r7, r3
 800e92a:	791b      	ldrb	r3, [r3, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d011      	beq.n	800e954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
			Status = get_sequence_step_timeout(Dev,
 800e930:	18bc      	adds	r4, r7, r2
 800e932:	2314      	movs	r3, #20
 800e934:	18fa      	adds	r2, r7, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2104      	movs	r1, #4
 800e93a:	0018      	movs	r0, r3
 800e93c:	f7ff f8ae 	bl	800da9c <get_sequence_step_timeout>
 800e940:	0003      	movs	r3, r0
 800e942:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800e948:	6979      	ldr	r1, [r7, #20]
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800e94e:	18d2      	adds	r2, r2, r3
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e954:	233f      	movs	r3, #63	; 0x3f
 800e956:	18fb      	adds	r3, r7, r3
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d103      	bne.n	800e968 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x184>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e968:	233f      	movs	r3, #63	; 0x3f
 800e96a:	18fb      	adds	r3, r7, r3
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	b25b      	sxtb	r3, r3
}
 800e970:	0018      	movs	r0, r3
 800e972:	46bd      	mov	sp, r7
 800e974:	b010      	add	sp, #64	; 0x40
 800e976:	bdb0      	pop	{r4, r5, r7, pc}
 800e978:	00000776 	.word	0x00000776
 800e97c:	0000024e 	.word	0x0000024e
 800e980:	000002b2 	.word	0x000002b2
 800e984:	00000226 	.word	0x00000226

0800e988 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800e988:	b5b0      	push	{r4, r5, r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e992:	231f      	movs	r3, #31
 800e994:	18fb      	adds	r3, r7, r3
 800e996:	2200      	movs	r2, #0
 800e998:	701a      	strb	r2, [r3, #0]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e99e:	e105      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	683a      	ldr	r2, [r7, #0]
 800e9a4:	18d2      	adds	r2, r2, r3
 800e9a6:	2113      	movs	r1, #19
 800e9a8:	187b      	adds	r3, r7, r1
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	701a      	strb	r2, [r3, #0]
		Index++;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800e9b4:	187b      	adds	r3, r7, r1
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2bff      	cmp	r3, #255	; 0xff
 800e9ba:	d000      	beq.n	800e9be <VL53L0X_load_tuning_settings+0x36>
 800e9bc:	e0ba      	b.n	800eb34 <VL53L0X_load_tuning_settings+0x1ac>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	683a      	ldr	r2, [r7, #0]
 800e9c2:	18d2      	adds	r2, r2, r3
 800e9c4:	2111      	movs	r1, #17
 800e9c6:	187b      	adds	r3, r7, r1
 800e9c8:	7812      	ldrb	r2, [r2, #0]
 800e9ca:	701a      	strb	r2, [r3, #0]
			Index++;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800e9d2:	187b      	adds	r3, r7, r1
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	2b03      	cmp	r3, #3
 800e9d8:	d100      	bne.n	800e9dc <VL53L0X_load_tuning_settings+0x54>
 800e9da:	e07f      	b.n	800eadc <VL53L0X_load_tuning_settings+0x154>
 800e9dc:	dd00      	ble.n	800e9e0 <VL53L0X_load_tuning_settings+0x58>
 800e9de:	e0a4      	b.n	800eb2a <VL53L0X_load_tuning_settings+0x1a2>
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d054      	beq.n	800ea8e <VL53L0X_load_tuning_settings+0x106>
 800e9e4:	dd00      	ble.n	800e9e8 <VL53L0X_load_tuning_settings+0x60>
 800e9e6:	e0a0      	b.n	800eb2a <VL53L0X_load_tuning_settings+0x1a2>
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <VL53L0X_load_tuning_settings+0x6a>
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d027      	beq.n	800ea40 <VL53L0X_load_tuning_settings+0xb8>
 800e9f0:	e09b      	b.n	800eb2a <VL53L0X_load_tuning_settings+0x1a2>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	18d2      	adds	r2, r2, r3
 800e9f8:	2110      	movs	r1, #16
 800e9fa:	187b      	adds	r3, r7, r1
 800e9fc:	7812      	ldrb	r2, [r2, #0]
 800e9fe:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	3301      	adds	r3, #1
 800ea04:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	18d2      	adds	r2, r2, r3
 800ea0c:	200f      	movs	r0, #15
 800ea0e:	183b      	adds	r3, r7, r0
 800ea10:	7812      	ldrb	r2, [r2, #0]
 800ea12:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	3301      	adds	r3, #1
 800ea18:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ea1a:	187b      	adds	r3, r7, r1
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	b299      	uxth	r1, r3
 800ea24:	183b      	adds	r3, r7, r0
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	200c      	movs	r0, #12
 800ea2c:	183b      	adds	r3, r7, r0
 800ea2e:	188a      	adds	r2, r1, r2
 800ea30:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	1839      	adds	r1, r7, r0
 800ea36:	239a      	movs	r3, #154	; 0x9a
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	8809      	ldrh	r1, [r1, #0]
 800ea3c:	52d1      	strh	r1, [r2, r3]
				break;
 800ea3e:	e0b5      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	18d2      	adds	r2, r2, r3
 800ea46:	2110      	movs	r1, #16
 800ea48:	187b      	adds	r3, r7, r1
 800ea4a:	7812      	ldrb	r2, [r2, #0]
 800ea4c:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	3301      	adds	r3, #1
 800ea52:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	18d2      	adds	r2, r2, r3
 800ea5a:	200f      	movs	r0, #15
 800ea5c:	183b      	adds	r3, r7, r0
 800ea5e:	7812      	ldrb	r2, [r2, #0]
 800ea60:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	3301      	adds	r3, #1
 800ea66:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ea68:	187b      	adds	r3, r7, r1
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	021b      	lsls	r3, r3, #8
 800ea70:	b299      	uxth	r1, r3
 800ea72:	183b      	adds	r3, r7, r0
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	200c      	movs	r0, #12
 800ea7a:	183b      	adds	r3, r7, r0
 800ea7c:	188a      	adds	r2, r1, r2
 800ea7e:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	1839      	adds	r1, r7, r0
 800ea84:	239b      	movs	r3, #155	; 0x9b
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	8809      	ldrh	r1, [r1, #0]
 800ea8a:	52d1      	strh	r1, [r2, r3]
					Temp16);
				break;
 800ea8c:	e08e      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	18d2      	adds	r2, r2, r3
 800ea94:	2110      	movs	r1, #16
 800ea96:	187b      	adds	r3, r7, r1
 800ea98:	7812      	ldrb	r2, [r2, #0]
 800ea9a:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	18d2      	adds	r2, r2, r3
 800eaa8:	200f      	movs	r0, #15
 800eaaa:	183b      	adds	r3, r7, r0
 800eaac:	7812      	ldrb	r2, [r2, #0]
 800eaae:	701a      	strb	r2, [r3, #0]
				Index++;
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	3301      	adds	r3, #1
 800eab4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eab6:	187b      	adds	r3, r7, r1
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	021b      	lsls	r3, r3, #8
 800eabe:	b299      	uxth	r1, r3
 800eac0:	183b      	adds	r3, r7, r0
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	200c      	movs	r0, #12
 800eac8:	183b      	adds	r3, r7, r0
 800eaca:	188a      	adds	r2, r1, r2
 800eacc:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	1839      	adds	r1, r7, r0
 800ead2:	239c      	movs	r3, #156	; 0x9c
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	8809      	ldrh	r1, [r1, #0]
 800ead8:	52d1      	strh	r1, [r2, r3]
				break;
 800eada:	e067      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	18d2      	adds	r2, r2, r3
 800eae2:	2110      	movs	r1, #16
 800eae4:	187b      	adds	r3, r7, r1
 800eae6:	7812      	ldrb	r2, [r2, #0]
 800eae8:	701a      	strb	r2, [r3, #0]
				Index++;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	3301      	adds	r3, #1
 800eaee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	18d2      	adds	r2, r2, r3
 800eaf6:	200f      	movs	r0, #15
 800eaf8:	183b      	adds	r3, r7, r0
 800eafa:	7812      	ldrb	r2, [r2, #0]
 800eafc:	701a      	strb	r2, [r3, #0]
				Index++;
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	3301      	adds	r3, #1
 800eb02:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800eb04:	187b      	adds	r3, r7, r1
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	021b      	lsls	r3, r3, #8
 800eb0c:	b299      	uxth	r1, r3
 800eb0e:	183b      	adds	r3, r7, r0
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	200c      	movs	r0, #12
 800eb16:	183b      	adds	r3, r7, r0
 800eb18:	188a      	adds	r2, r1, r2
 800eb1a:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	1839      	adds	r1, r7, r0
 800eb20:	239e      	movs	r3, #158	; 0x9e
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	8809      	ldrh	r1, [r1, #0]
 800eb26:	52d1      	strh	r1, [r2, r3]
				break;
 800eb28:	e040      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eb2a:	231f      	movs	r3, #31
 800eb2c:	18fb      	adds	r3, r7, r3
 800eb2e:	22fc      	movs	r2, #252	; 0xfc
 800eb30:	701a      	strb	r2, [r3, #0]
 800eb32:	e03b      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
			}

		} else if (NumberOfWrites <= 4) {
 800eb34:	2313      	movs	r3, #19
 800eb36:	18fb      	adds	r3, r7, r3
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b04      	cmp	r3, #4
 800eb3c:	d832      	bhi.n	800eba4 <VL53L0X_load_tuning_settings+0x21c>
			Address = *(pTuningSettingBuffer + Index);
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	18d2      	adds	r2, r2, r3
 800eb44:	2312      	movs	r3, #18
 800eb46:	18fb      	adds	r3, r7, r3
 800eb48:	7812      	ldrb	r2, [r2, #0]
 800eb4a:	701a      	strb	r2, [r3, #0]
			Index++;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800eb52:	2300      	movs	r3, #0
 800eb54:	61bb      	str	r3, [r7, #24]
 800eb56:	e00f      	b.n	800eb78 <VL53L0X_load_tuning_settings+0x1f0>
				localBuffer[i] = *(pTuningSettingBuffer +
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	18d3      	adds	r3, r2, r3
 800eb5e:	7819      	ldrb	r1, [r3, #0]
 800eb60:	2308      	movs	r3, #8
 800eb62:	18fa      	adds	r2, r7, r3
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	18d3      	adds	r3, r2, r3
 800eb68:	1c0a      	adds	r2, r1, #0
 800eb6a:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	3301      	adds	r3, #1
 800eb76:	61bb      	str	r3, [r7, #24]
 800eb78:	2113      	movs	r1, #19
 800eb7a:	187b      	adds	r3, r7, r1
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	dbe9      	blt.n	800eb58 <VL53L0X_load_tuning_settings+0x1d0>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800eb84:	187b      	adds	r3, r7, r1
 800eb86:	781d      	ldrb	r5, [r3, #0]
 800eb88:	231f      	movs	r3, #31
 800eb8a:	18fc      	adds	r4, r7, r3
 800eb8c:	2308      	movs	r3, #8
 800eb8e:	18fa      	adds	r2, r7, r3
 800eb90:	2312      	movs	r3, #18
 800eb92:	18fb      	adds	r3, r7, r3
 800eb94:	7819      	ldrb	r1, [r3, #0]
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	002b      	movs	r3, r5
 800eb9a:	f000 fed5 	bl	800f948 <VL53L0X_WriteMulti>
 800eb9e:	0003      	movs	r3, r0
 800eba0:	7023      	strb	r3, [r4, #0]
 800eba2:	e003      	b.n	800ebac <VL53L0X_load_tuning_settings+0x224>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eba4:	231f      	movs	r3, #31
 800eba6:	18fb      	adds	r3, r7, r3
 800eba8:	22fc      	movs	r2, #252	; 0xfc
 800ebaa:	701a      	strb	r2, [r3, #0]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	18d3      	adds	r3, r2, r3
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d006      	beq.n	800ebc6 <VL53L0X_load_tuning_settings+0x23e>
 800ebb8:	231f      	movs	r3, #31
 800ebba:	18fb      	adds	r3, r7, r3
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	b25b      	sxtb	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d100      	bne.n	800ebc6 <VL53L0X_load_tuning_settings+0x23e>
 800ebc4:	e6ec      	b.n	800e9a0 <VL53L0X_load_tuning_settings+0x18>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ebc6:	231f      	movs	r3, #31
 800ebc8:	18fb      	adds	r3, r7, r3
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	b25b      	sxtb	r3, r3
}
 800ebce:	0018      	movs	r0, r3
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	b008      	add	sp, #32
 800ebd4:	bdb0      	pop	{r4, r5, r7, pc}

0800ebd6 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ebd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd8:	b089      	sub	sp, #36	; 0x24
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ebe2:	251f      	movs	r5, #31
 800ebe4:	197b      	adds	r3, r7, r5
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	701a      	strb	r2, [r3, #0]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ebf0:	197c      	adds	r4, r7, r5
 800ebf2:	2613      	movs	r6, #19
 800ebf4:	19ba      	adds	r2, r7, r6
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	0011      	movs	r1, r2
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f7fb ff77 	bl	800aaee <VL53L0X_GetXTalkCompensationEnable>
 800ec00:	0003      	movs	r3, r0
 800ec02:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800ec04:	197b      	adds	r3, r7, r5
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	b25b      	sxtb	r3, r3
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d111      	bne.n	800ec32 <VL53L0X_get_total_xtalk_rate+0x5c>

		if (xtalkCompEnable) {
 800ec0e:	19bb      	adds	r3, r7, r6
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00d      	beq.n	800ec32 <VL53L0X_get_total_xtalk_rate+0x5c>

			VL53L0X_GETPARAMETERFIELD(
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	8a9b      	ldrh	r3, [r3, #20]
 800ec20:	001a      	movs	r2, r3
			totalXtalkMegaCps =
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	4353      	muls	r3, r2
 800ec26:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	3380      	adds	r3, #128	; 0x80
 800ec2c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800ec32:	231f      	movs	r3, #31
 800ec34:	18fb      	adds	r3, r7, r3
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	b25b      	sxtb	r3, r3
}
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b009      	add	sp, #36	; 0x24
 800ec40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec42 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800ec42:	b5b0      	push	{r4, r5, r7, lr}
 800ec44:	b086      	sub	sp, #24
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec4e:	2517      	movs	r5, #23
 800ec50:	197b      	adds	r3, r7, r5
 800ec52:	2200      	movs	r2, #0
 800ec54:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800ec5e:	197c      	adds	r4, r7, r5
 800ec60:	2310      	movs	r3, #16
 800ec62:	18fa      	adds	r2, r7, r3
 800ec64:	68b9      	ldr	r1, [r7, #8]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f7ff ffb4 	bl	800ebd6 <VL53L0X_get_total_xtalk_rate>
 800ec6e:	0003      	movs	r3, r0
 800ec70:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ec72:	197b      	adds	r3, r7, r5
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	b25b      	sxtb	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d105      	bne.n	800ec88 <VL53L0X_get_total_signal_rate+0x46>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	18d2      	adds	r2, r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	601a      	str	r2, [r3, #0]

	return Status;
 800ec88:	2317      	movs	r3, #23
 800ec8a:	18fb      	adds	r3, r7, r3
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	b25b      	sxtb	r3, r3
}
 800ec90:	0018      	movs	r0, r3
 800ec92:	46bd      	mov	sp, r7
 800ec94:	b006      	add	sp, #24
 800ec96:	bdb0      	pop	{r4, r5, r7, pc}

0800ec98 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b09a      	sub	sp, #104	; 0x68
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800eca6:	2312      	movs	r3, #18
 800eca8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ecaa:	2380      	movs	r3, #128	; 0x80
 800ecac:	01db      	lsls	r3, r3, #7
 800ecae:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ecb0:	2342      	movs	r3, #66	; 0x42
 800ecb2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ecb4:	2306      	movs	r3, #6
 800ecb6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ecb8:	2307      	movs	r3, #7
 800ecba:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ecbc:	2343      	movs	r3, #67	; 0x43
 800ecbe:	18fb      	adds	r3, r7, r3
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	23aa      	movs	r3, #170	; 0xaa
 800ecc8:	005b      	lsls	r3, r3, #1
 800ecca:	5ad3      	ldrh	r3, [r2, r3]
	dmaxCalRange_mm =
 800eccc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	23ac      	movs	r3, #172	; 0xac
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	58d3      	ldr	r3, [r2, r3]
 800ecd6:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ecd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecdc:	4353      	muls	r3, r2
 800ecde:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ece0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece2:	3380      	adds	r3, #128	; 0x80
 800ece4:	0a1b      	lsrs	r3, r3, #8
 800ece6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ece8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecec:	4353      	muls	r3, r2
 800ecee:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d01c      	beq.n	800ed34 <VL53L0X_calc_dmax+0x9c>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	029b      	lsls	r3, r3, #10
 800ecfe:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ed04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed06:	18d3      	adds	r3, r2, r3
 800ed08:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ed0e:	f7f1 fa17 	bl	8000140 <__udivsi3>
 800ed12:	0003      	movs	r3, r0
 800ed14:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ed16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed18:	0013      	movs	r3, r2
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	189b      	adds	r3, r3, r2
 800ed1e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ed20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed22:	435b      	muls	r3, r3
 800ed24:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ed26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed28:	2280      	movs	r2, #128	; 0x80
 800ed2a:	0212      	lsls	r2, r2, #8
 800ed2c:	4694      	mov	ip, r2
 800ed2e:	4463      	add	r3, ip
 800ed30:	0c1b      	lsrs	r3, r3, #16
 800ed32:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ed38:	4353      	muls	r3, r2
 800ed3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	2280      	movs	r2, #128	; 0x80
 800ed40:	0212      	lsls	r2, r2, #8
 800ed42:	4694      	mov	ip, r2
 800ed44:	4463      	add	r3, ip
 800ed46:	0c1b      	lsrs	r3, r3, #16
 800ed48:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ed4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4c:	435b      	muls	r3, r3
 800ed4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ed50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed52:	2280      	movs	r2, #128	; 0x80
 800ed54:	0212      	lsls	r2, r2, #8
 800ed56:	4694      	mov	ip, r2
 800ed58:	4463      	add	r3, ip
 800ed5a:	0c1b      	lsrs	r3, r3, #16
 800ed5c:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ed5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed60:	085a      	lsrs	r2, r3, #1
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	18d3      	adds	r3, r2, r3
 800ed66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed68:	0018      	movs	r0, r3
 800ed6a:	f7f1 f9e9 	bl	8000140 <__udivsi3>
 800ed6e:	0003      	movs	r3, r0
 800ed70:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ed72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed76:	4353      	muls	r3, r2
 800ed78:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ed7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed7c:	2380      	movs	r3, #128	; 0x80
 800ed7e:	025b      	lsls	r3, r3, #9
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d302      	bcc.n	800ed8a <VL53L0X_calc_dmax+0xf2>
		minSignalNeeded_p3 = 0xfff00000;
 800ed84:	4b5d      	ldr	r3, [pc, #372]	; (800eefc <VL53L0X_calc_dmax+0x264>)
 800ed86:	663b      	str	r3, [r7, #96]	; 0x60
 800ed88:	e017      	b.n	800edba <VL53L0X_calc_dmax+0x122>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ed8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8c:	085a      	lsrs	r2, r3, #1
 800ed8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ed90:	18d3      	adds	r3, r2, r3
 800ed92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed94:	0018      	movs	r0, r3
 800ed96:	f7f1 f9d3 	bl	8000140 <__udivsi3>
 800ed9a:	0003      	movs	r3, r0
 800ed9c:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ed9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eda0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eda2:	4353      	muls	r3, r2
 800eda4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800eda6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eda8:	2280      	movs	r2, #128	; 0x80
 800edaa:	0212      	lsls	r2, r2, #8
 800edac:	4694      	mov	ip, r2
 800edae:	4463      	add	r3, ip
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800edb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edb6:	435b      	muls	r3, r3
 800edb8:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800edba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edbc:	039b      	lsls	r3, r3, #14
 800edbe:	33f5      	adds	r3, #245	; 0xf5
 800edc0:	33ff      	adds	r3, #255	; 0xff
 800edc2:	22fa      	movs	r2, #250	; 0xfa
 800edc4:	0091      	lsls	r1, r2, #2
 800edc6:	0018      	movs	r0, r3
 800edc8:	f7f1 f9ba 	bl	8000140 <__udivsi3>
 800edcc:	0003      	movs	r3, r0
 800edce:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	435b      	muls	r3, r3
 800edd4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800edd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edd8:	435b      	muls	r3, r3
 800edda:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	3308      	adds	r3, #8
 800ede0:	091b      	lsrs	r3, r3, #4
 800ede2:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ede4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800edec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edee:	0013      	movs	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	189b      	adds	r3, r3, r2
 800edf4:	011b      	lsls	r3, r3, #4
 800edf6:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	2280      	movs	r2, #128	; 0x80
 800edfc:	0192      	lsls	r2, r2, #6
 800edfe:	4694      	mov	ip, r2
 800ee00:	4463      	add	r3, ip
 800ee02:	0b9b      	lsrs	r3, r3, #14
 800ee04:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ee06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee0a:	18d3      	adds	r3, r2, r3
 800ee0c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ee0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee10:	085b      	lsrs	r3, r3, #1
 800ee12:	69ba      	ldr	r2, [r7, #24]
 800ee14:	18d3      	adds	r3, r2, r3
 800ee16:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ee18:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ee1a:	69b8      	ldr	r0, [r7, #24]
 800ee1c:	f7f1 f990 	bl	8000140 <__udivsi3>
 800ee20:	0003      	movs	r3, r0
 800ee22:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	039b      	lsls	r3, r3, #14
 800ee28:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	085b      	lsrs	r3, r3, #1
 800ee2e:	69ba      	ldr	r2, [r7, #24]
 800ee30:	18d3      	adds	r3, r2, r3
 800ee32:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ee34:	69f9      	ldr	r1, [r7, #28]
 800ee36:	69b8      	ldr	r0, [r7, #24]
 800ee38:	f7f1 f982 	bl	8000140 <__udivsi3>
 800ee3c:	0003      	movs	r3, r0
 800ee3e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ee44:	4353      	muls	r3, r2
 800ee46:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	33f5      	adds	r3, #245	; 0xf5
 800ee4c:	33ff      	adds	r3, #255	; 0xff
 800ee4e:	22fa      	movs	r2, #250	; 0xfa
 800ee50:	0091      	lsls	r1, r2, #2
 800ee52:	0018      	movs	r0, r3
 800ee54:	f7f1 f974 	bl	8000140 <__udivsi3>
 800ee58:	0003      	movs	r3, r0
 800ee5a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	011b      	lsls	r3, r3, #4
 800ee60:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	33f5      	adds	r3, #245	; 0xf5
 800ee66:	33ff      	adds	r3, #255	; 0xff
 800ee68:	22fa      	movs	r2, #250	; 0xfa
 800ee6a:	0091      	lsls	r1, r2, #2
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	f7f1 f967 	bl	8000140 <__udivsi3>
 800ee72:	0003      	movs	r3, r0
 800ee74:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ee76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee78:	3380      	adds	r3, #128	; 0x80
 800ee7a:	0a1b      	lsrs	r3, r3, #8
 800ee7c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00a      	beq.n	800ee9a <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	085a      	lsrs	r2, r3, #1
 800ee88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee8a:	18d3      	adds	r3, r2, r3
 800ee8c:	6979      	ldr	r1, [r7, #20]
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f7f1 f956 	bl	8000140 <__udivsi3>
 800ee94:	0003      	movs	r3, r0
 800ee96:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee98:	e001      	b.n	800ee9e <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ee9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eea0:	0018      	movs	r0, r3
 800eea2:	f7fd ff6f 	bl	800cd84 <VL53L0X_isqrt>
 800eea6:	0003      	movs	r3, r0
 800eea8:	613b      	str	r3, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00a      	beq.n	800eec6 <VL53L0X_calc_dmax+0x22e>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	085a      	lsrs	r2, r3, #1
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb6:	18d3      	adds	r3, r2, r3
 800eeb8:	69b9      	ldr	r1, [r7, #24]
 800eeba:	0018      	movs	r0, r3
 800eebc:	f7f1 f940 	bl	8000140 <__udivsi3>
 800eec0:	0003      	movs	r3, r0
 800eec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eec4:	e001      	b.n	800eeca <VL53L0X_calc_dmax+0x232>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800eeca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eecc:	0018      	movs	r0, r3
 800eece:	f7fd ff59 	bl	800cd84 <VL53L0X_isqrt>
 800eed2:	0003      	movs	r3, r0
 800eed4:	65fb      	str	r3, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800eed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800eedc:	693a      	ldr	r2, [r7, #16]
 800eede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d902      	bls.n	800eeea <VL53L0X_calc_dmax+0x252>
		*pdmax_mm = dmaxAmbient;
 800eee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eee8:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800eeea:	2343      	movs	r3, #67	; 0x43
 800eeec:	18fb      	adds	r3, r7, r3
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	b25b      	sxtb	r3, r3
}
 800eef2:	0018      	movs	r0, r3
 800eef4:	46bd      	mov	sp, r7
 800eef6:	b01a      	add	sp, #104	; 0x68
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	46c0      	nop			; (mov r8, r8)
 800eefc:	fff00000 	.word	0xfff00000

0800ef00 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ef00:	b5b0      	push	{r4, r5, r7, lr}
 800ef02:	b0b4      	sub	sp, #208	; 0xd0
 800ef04:	af04      	add	r7, sp, #16
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ef0e:	23c8      	movs	r3, #200	; 0xc8
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	2290      	movs	r2, #144	; 0x90
 800ef14:	18ba      	adds	r2, r7, r2
 800ef16:	6013      	str	r3, [r2, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ef18:	2396      	movs	r3, #150	; 0x96
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	228c      	movs	r2, #140	; 0x8c
 800ef1e:	18b9      	adds	r1, r7, r2
 800ef20:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ef22:	23c8      	movs	r3, #200	; 0xc8
 800ef24:	035b      	lsls	r3, r3, #13
 800ef26:	2188      	movs	r1, #136	; 0x88
 800ef28:	1879      	adds	r1, r7, r1
 800ef2a:	600b      	str	r3, [r1, #0]
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ef2c:	4bb5      	ldr	r3, [pc, #724]	; (800f204 <VL53L0X_calc_sigma_estimate+0x304>)
 800ef2e:	2184      	movs	r1, #132	; 0x84
 800ef30:	1879      	adds	r1, r7, r1
 800ef32:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ef34:	4bb4      	ldr	r3, [pc, #720]	; (800f208 <VL53L0X_calc_sigma_estimate+0x308>)
 800ef36:	2180      	movs	r1, #128	; 0x80
 800ef38:	1879      	adds	r1, r7, r1
 800ef3a:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ef3c:	23f0      	movs	r3, #240	; 0xf0
 800ef3e:	021b      	lsls	r3, r3, #8
 800ef40:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ef42:	18bb      	adds	r3, r7, r2
 800ef44:	6819      	ldr	r1, [r3, #0]
 800ef46:	23f0      	movs	r3, #240	; 0xf0
 800ef48:	0618      	lsls	r0, r3, #24
 800ef4a:	f7f1 f8f9 	bl	8000140 <__udivsi3>
 800ef4e:	0003      	movs	r3, r0
 800ef50:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ef52:	4bae      	ldr	r3, [pc, #696]	; (800f20c <VL53L0X_calc_sigma_estimate+0x30c>)
 800ef54:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ef56:	2380      	movs	r3, #128	; 0x80
 800ef58:	021b      	lsls	r3, r3, #8
 800ef5a:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800ef5c:	23c8      	movs	r3, #200	; 0xc8
 800ef5e:	039b      	lsls	r3, r3, #14
 800ef60:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800ef62:	4bab      	ldr	r3, [pc, #684]	; (800f210 <VL53L0X_calc_sigma_estimate+0x310>)
 800ef64:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ef66:	219f      	movs	r1, #159	; 0x9f
 800ef68:	187b      	adds	r3, r7, r1
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	701a      	strb	r2, [r3, #0]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	691a      	ldr	r2, [r3, #16]
 800ef78:	0013      	movs	r3, r2
 800ef7a:	015b      	lsls	r3, r3, #5
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	189b      	adds	r3, r3, r2
 800ef82:	00db      	lsls	r3, r3, #3
	ambientRate_kcps =
 800ef84:	0c1b      	lsrs	r3, r3, #16
 800ef86:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800ef8e:	000d      	movs	r5, r1
 800ef90:	187c      	adds	r4, r7, r1
 800ef92:	2310      	movs	r3, #16
 800ef94:	18fa      	adds	r2, r7, r3
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	f7ff fe51 	bl	800ec42 <VL53L0X_get_total_signal_rate>
 800efa0:	0003      	movs	r3, r0
 800efa2:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800efa4:	197c      	adds	r4, r7, r5
 800efa6:	2314      	movs	r3, #20
 800efa8:	18fa      	adds	r2, r7, r3
 800efaa:	68b9      	ldr	r1, [r7, #8]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	0018      	movs	r0, r3
 800efb0:	f7ff fe11 	bl	800ebd6 <VL53L0X_get_total_xtalk_rate>
 800efb4:	0003      	movs	r3, r0
 800efb6:	7023      	strb	r3, [r4, #0]


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	0013      	movs	r3, r2
 800efbc:	015b      	lsls	r3, r3, #5
 800efbe:	1a9b      	subs	r3, r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	189b      	adds	r3, r3, r2
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800efc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efca:	2280      	movs	r2, #128	; 0x80
 800efcc:	0212      	lsls	r2, r2, #8
 800efce:	4694      	mov	ip, r2
 800efd0:	4463      	add	r3, ip
 800efd2:	0c1b      	lsrs	r3, r3, #16
 800efd4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800efd6:	697a      	ldr	r2, [r7, #20]
 800efd8:	0013      	movs	r3, r2
 800efda:	015b      	lsls	r3, r3, #5
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	189b      	adds	r3, r3, r2
 800efe2:	00db      	lsls	r3, r3, #3
 800efe4:	21a0      	movs	r1, #160	; 0xa0
 800efe6:	187a      	adds	r2, r7, r1
 800efe8:	6013      	str	r3, [r2, #0]

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800efea:	187b      	adds	r3, r7, r1
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d902      	bls.n	800effa <VL53L0X_calc_sigma_estimate+0xfa>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800eff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eff6:	187a      	adds	r2, r7, r1
 800eff8:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800effa:	239f      	movs	r3, #159	; 0x9f
 800effc:	18fb      	adds	r3, r7, r3
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	b25b      	sxtb	r3, r3
 800f002:	2b00      	cmp	r3, #0
 800f004:	d174      	bne.n	800f0f0 <VL53L0X_calc_sigma_estimate+0x1f0>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	22dc      	movs	r2, #220	; 0xdc
 800f00a:	589b      	ldr	r3, [r3, r2]
 800f00c:	20b8      	movs	r0, #184	; 0xb8
 800f00e:	183a      	adds	r2, r7, r0
 800f010:	6013      	str	r3, [r2, #0]
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f012:	245b      	movs	r4, #91	; 0x5b
 800f014:	193b      	adds	r3, r7, r4
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	21e0      	movs	r1, #224	; 0xe0
 800f01a:	5c52      	ldrb	r2, [r2, r1]
 800f01c:	701a      	strb	r2, [r3, #0]
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f01e:	193b      	adds	r3, r7, r4
 800f020:	781a      	ldrb	r2, [r3, #0]
 800f022:	183b      	adds	r3, r7, r0
 800f024:	6819      	ldr	r1, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	0018      	movs	r0, r3
 800f02a:	f7fe fcd2 	bl	800d9d2 <VL53L0X_calc_timeout_mclks>
 800f02e:	0003      	movs	r3, r0
 800f030:	657b      	str	r3, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	22e4      	movs	r2, #228	; 0xe4
 800f036:	589b      	ldr	r3, [r3, r2]
 800f038:	20b4      	movs	r0, #180	; 0xb4
 800f03a:	183a      	adds	r2, r7, r0
 800f03c:	6013      	str	r3, [r2, #0]
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f03e:	2553      	movs	r5, #83	; 0x53
 800f040:	197b      	adds	r3, r7, r5
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	21e8      	movs	r1, #232	; 0xe8
 800f046:	5c52      	ldrb	r2, [r2, r1]
 800f048:	701a      	strb	r2, [r3, #0]
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f04a:	197b      	adds	r3, r7, r5
 800f04c:	781a      	ldrb	r2, [r3, #0]
 800f04e:	183b      	adds	r3, r7, r0
 800f050:	6819      	ldr	r1, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	0018      	movs	r0, r3
 800f056:	f7fe fcbc 	bl	800d9d2 <VL53L0X_calc_timeout_mclks>
 800f05a:	0003      	movs	r3, r0
 800f05c:	64fb      	str	r3, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f05e:	2303      	movs	r3, #3
 800f060:	2298      	movs	r2, #152	; 0x98
 800f062:	18b9      	adds	r1, r7, r2
 800f064:	600b      	str	r3, [r1, #0]
		if (finalRangeVcselPCLKS == 8)
 800f066:	193b      	adds	r3, r7, r4
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	2b08      	cmp	r3, #8
 800f06c:	d102      	bne.n	800f074 <VL53L0X_calc_sigma_estimate+0x174>
			vcselWidth = 2;
 800f06e:	2302      	movs	r3, #2
 800f070:	18ba      	adds	r2, r7, r2
 800f072:	6013      	str	r3, [r2, #0]


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f078:	18d3      	adds	r3, r2, r3
		peakVcselDuration_us = vcselWidth * 2048 *
 800f07a:	2298      	movs	r2, #152	; 0x98
 800f07c:	18ba      	adds	r2, r7, r2
 800f07e:	6812      	ldr	r2, [r2, #0]
 800f080:	4353      	muls	r3, r2
 800f082:	02db      	lsls	r3, r3, #11
 800f084:	2494      	movs	r4, #148	; 0x94
 800f086:	193a      	adds	r2, r7, r4
 800f088:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f08a:	193b      	adds	r3, r7, r4
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	33f5      	adds	r3, #245	; 0xf5
 800f090:	33ff      	adds	r3, #255	; 0xff
 800f092:	22fa      	movs	r2, #250	; 0xfa
 800f094:	0091      	lsls	r1, r2, #2
 800f096:	0018      	movs	r0, r3
 800f098:	f7f1 f852 	bl	8000140 <__udivsi3>
 800f09c:	0003      	movs	r3, r0
 800f09e:	193a      	adds	r2, r7, r4
 800f0a0:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us *= cPllPeriod_ps;
 800f0a2:	193b      	adds	r3, r7, r4
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0a8:	4353      	muls	r3, r2
 800f0aa:	193a      	adds	r2, r7, r4
 800f0ac:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f0ae:	193b      	adds	r3, r7, r4
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	33f5      	adds	r3, #245	; 0xf5
 800f0b4:	33ff      	adds	r3, #255	; 0xff
 800f0b6:	22fa      	movs	r2, #250	; 0xfa
 800f0b8:	0091      	lsls	r1, r2, #2
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	f7f1 f840 	bl	8000140 <__udivsi3>
 800f0c0:	0003      	movs	r3, r0
 800f0c2:	0021      	movs	r1, r4
 800f0c4:	187a      	adds	r2, r7, r1
 800f0c6:	6013      	str	r3, [r2, #0]

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	3380      	adds	r3, #128	; 0x80
 800f0cc:	0a1b      	lsrs	r3, r3, #8
 800f0ce:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f0d0:	693a      	ldr	r2, [r7, #16]
 800f0d2:	187b      	adds	r3, r7, r1
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4353      	muls	r3, r2
 800f0d8:	22bc      	movs	r2, #188	; 0xbc
 800f0da:	18b9      	adds	r1, r7, r2
 800f0dc:	600b      	str	r3, [r1, #0]
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f0de:	18bb      	adds	r3, r7, r2
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	3380      	adds	r3, #128	; 0x80
 800f0e4:	0a1b      	lsrs	r3, r3, #8
 800f0e6:	18ba      	adds	r2, r7, r2
 800f0e8:	6013      	str	r3, [r2, #0]

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	021b      	lsls	r3, r3, #8
 800f0ee:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f0f0:	229f      	movs	r2, #159	; 0x9f
 800f0f2:	18bb      	adds	r3, r7, r2
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	b25b      	sxtb	r3, r3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d003      	beq.n	800f104 <VL53L0X_calc_sigma_estimate+0x204>
		LOG_FUNCTION_END(Status);
		return Status;
 800f0fc:	18bb      	adds	r3, r7, r2
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b25b      	sxtb	r3, r3
 800f102:	e198      	b.n	800f436 <VL53L0X_calc_sigma_estimate+0x536>
	}

	if (peakSignalRate_kcps == 0) {
 800f104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f106:	2b00      	cmp	r3, #0
 800f108:	d10e      	bne.n	800f128 <VL53L0X_calc_sigma_estimate+0x228>
		*pSigmaEstimate = cSigmaEstMax;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2180      	movs	r1, #128	; 0x80
 800f10e:	187a      	adds	r2, r7, r1
 800f110:	6812      	ldr	r2, [r2, #0]
 800f112:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	23a0      	movs	r3, #160	; 0xa0
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	1879      	adds	r1, r7, r1
 800f11c:	6809      	ldr	r1, [r1, #0]
 800f11e:	50d1      	str	r1, [r2, r3]
		*pDmax_mm = 0;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2200      	movs	r2, #0
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	e182      	b.n	800f42e <VL53L0X_calc_sigma_estimate+0x52e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f128:	22bc      	movs	r2, #188	; 0xbc
 800f12a:	18bb      	adds	r3, r7, r2
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d102      	bne.n	800f138 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800f132:	2301      	movs	r3, #1
 800f134:	18ba      	adds	r2, r7, r2
 800f136:	6013      	str	r3, [r2, #0]

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f138:	2390      	movs	r3, #144	; 0x90
 800f13a:	18fb      	adds	r3, r7, r3
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f142:	041b      	lsls	r3, r3, #16
 800f144:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f146:	0018      	movs	r0, r3
 800f148:	f7f0 fffa 	bl	8000140 <__udivsi3>
 800f14c:	0003      	movs	r3, r0
 800f14e:	21b0      	movs	r1, #176	; 0xb0
 800f150:	187a      	adds	r2, r7, r1
 800f152:	6013      	str	r3, [r2, #0]
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f154:	187b      	adds	r3, r7, r1
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d902      	bls.n	800f164 <VL53L0X_calc_sigma_estimate+0x264>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f15e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f160:	187a      	adds	r2, r7, r1
 800f162:	6013      	str	r3, [r2, #0]
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f164:	21b0      	movs	r1, #176	; 0xb0
 800f166:	187b      	adds	r3, r7, r1
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	228c      	movs	r2, #140	; 0x8c
 800f16c:	18ba      	adds	r2, r7, r2
 800f16e:	6812      	ldr	r2, [r2, #0]
 800f170:	4353      	muls	r3, r2
 800f172:	187a      	adds	r2, r7, r1
 800f174:	6013      	str	r3, [r2, #0]

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f176:	23bc      	movs	r3, #188	; 0xbc
 800f178:	18fb      	adds	r3, r7, r3
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	0013      	movs	r3, r2
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	189b      	adds	r3, r3, r2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	0018      	movs	r0, r3
 800f186:	f7fd fdfd 	bl	800cd84 <VL53L0X_isqrt>
 800f18a:	0003      	movs	r3, r0
 800f18c:	005b      	lsls	r3, r3, #1
 800f18e:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	891b      	ldrh	r3, [r3, #8]
 800f194:	001a      	movs	r2, r3
 800f196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f198:	4353      	muls	r3, r2
 800f19a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f19c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f19e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f1a0:	23a0      	movs	r3, #160	; 0xa0
 800f1a2:	18fb      	adds	r3, r7, r3
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f1a8:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f1aa:	33f5      	adds	r3, #245	; 0xf5
 800f1ac:	33ff      	adds	r3, #255	; 0xff
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f1ae:	22fa      	movs	r2, #250	; 0xfa
 800f1b0:	0091      	lsls	r1, r2, #2
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f7f0 ffc4 	bl	8000140 <__udivsi3>
 800f1b8:	0003      	movs	r3, r0
 800f1ba:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1be:	041b      	lsls	r3, r3, #16
 800f1c0:	33f5      	adds	r3, #245	; 0xf5
 800f1c2:	33ff      	adds	r3, #255	; 0xff
 800f1c4:	22fa      	movs	r2, #250	; 0xfa
 800f1c6:	0091      	lsls	r1, r2, #2
 800f1c8:	0018      	movs	r0, r3
 800f1ca:	f7f0 ffb9 	bl	8000140 <__udivsi3>
 800f1ce:	0003      	movs	r3, r0
 800f1d0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f1d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1dc:	f7f0 ffb0 	bl	8000140 <__udivsi3>
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	17da      	asrs	r2, r3, #31
 800f1e4:	189b      	adds	r3, r3, r2
 800f1e6:	4053      	eors	r3, r2
 800f1e8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ec:	021b      	lsls	r3, r3, #8
 800f1ee:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	7e1b      	ldrb	r3, [r3, #24]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00d      	beq.n	800f214 <VL53L0X_calc_sigma_estimate+0x314>
			pwMult = 1 << 16;
 800f1f8:	2380      	movs	r3, #128	; 0x80
 800f1fa:	025b      	lsls	r3, r3, #9
 800f1fc:	22ac      	movs	r2, #172	; 0xac
 800f1fe:	18ba      	adds	r2, r7, r2
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	e039      	b.n	800f278 <VL53L0X_calc_sigma_estimate+0x378>
 800f204:	0000125c 	.word	0x0000125c
 800f208:	028f87ae 	.word	0x028f87ae
 800f20c:	0006999a 	.word	0x0006999a
 800f210:	00000677 	.word	0x00000677
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f214:	2384      	movs	r3, #132	; 0x84
 800f216:	18fb      	adds	r3, r7, r3
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f21c:	f7f0 ff90 	bl	8000140 <__udivsi3>
 800f220:	0003      	movs	r3, r0
 800f222:	21ac      	movs	r1, #172	; 0xac
 800f224:	187a      	adds	r2, r7, r1
 800f226:	6013      	str	r3, [r2, #0]
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22a:	2280      	movs	r2, #128	; 0x80
 800f22c:	0252      	lsls	r2, r2, #9
 800f22e:	1ad2      	subs	r2, r2, r3
 800f230:	187b      	adds	r3, r7, r1
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4353      	muls	r3, r2
 800f236:	187a      	adds	r2, r7, r1
 800f238:	6013      	str	r3, [r2, #0]

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f23a:	187b      	adds	r3, r7, r1
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f240:	18d3      	adds	r3, r2, r3
 800f242:	0c1b      	lsrs	r3, r3, #16
 800f244:	000a      	movs	r2, r1
 800f246:	18b9      	adds	r1, r7, r2
 800f248:	600b      	str	r3, [r1, #0]

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f24a:	18bb      	adds	r3, r7, r2
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2180      	movs	r1, #128	; 0x80
 800f250:	0249      	lsls	r1, r1, #9
 800f252:	468c      	mov	ip, r1
 800f254:	4463      	add	r3, ip
 800f256:	18b9      	adds	r1, r7, r2
 800f258:	600b      	str	r3, [r1, #0]
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f25a:	18bb      	adds	r3, r7, r2
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	085b      	lsrs	r3, r3, #1
 800f260:	18b9      	adds	r1, r7, r2
 800f262:	600b      	str	r3, [r1, #0]
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f264:	18bb      	adds	r3, r7, r2
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	435b      	muls	r3, r3
 800f26a:	18b9      	adds	r1, r7, r2
 800f26c:	600b      	str	r3, [r1, #0]

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f26e:	18bb      	adds	r3, r7, r2
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	0b9b      	lsrs	r3, r3, #14
 800f274:	18ba      	adds	r2, r7, r2
 800f276:	6013      	str	r3, [r2, #0]
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f278:	23ac      	movs	r3, #172	; 0xac
 800f27a:	18fb      	adds	r3, r7, r3
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f280:	4353      	muls	r3, r2
 800f282:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f286:	2280      	movs	r2, #128	; 0x80
 800f288:	0212      	lsls	r2, r2, #8
 800f28a:	4694      	mov	ip, r2
 800f28c:	4463      	add	r3, ip
 800f28e:	0c1b      	lsrs	r3, r3, #16
 800f290:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	435b      	muls	r3, r3
 800f296:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f298:	23b0      	movs	r3, #176	; 0xb0
 800f29a:	18fb      	adds	r3, r7, r3
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	2280      	movs	r2, #128	; 0x80
 800f2a4:	0212      	lsls	r2, r2, #8
 800f2a6:	4694      	mov	ip, r2
 800f2a8:	4463      	add	r3, ip
 800f2aa:	0c1b      	lsrs	r3, r3, #16
 800f2ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	435b      	muls	r3, r3
 800f2b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	18d3      	adds	r3, r2, r3
 800f2ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2be:	0018      	movs	r0, r3
 800f2c0:	f7fd fd60 	bl	800cd84 <VL53L0X_isqrt>
 800f2c4:	0003      	movs	r3, r0
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	041b      	lsls	r3, r3, #16
 800f2cc:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	3332      	adds	r3, #50	; 0x32
 800f2d2:	2164      	movs	r1, #100	; 0x64
 800f2d4:	0018      	movs	r0, r3
 800f2d6:	f7f0 ff33 	bl	8000140 <__udivsi3>
 800f2da:	0003      	movs	r3, r0
 800f2dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2de:	0018      	movs	r0, r3
 800f2e0:	f7f0 ff2e 	bl	8000140 <__udivsi3>
 800f2e4:	0003      	movs	r3, r0
 800f2e6:	21a8      	movs	r1, #168	; 0xa8
 800f2e8:	187a      	adds	r2, r7, r1
 800f2ea:	6013      	str	r3, [r2, #0]
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f2ec:	187b      	adds	r3, r7, r1
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a53      	ldr	r2, [pc, #332]	; (800f440 <VL53L0X_calc_sigma_estimate+0x540>)
 800f2f2:	4353      	muls	r3, r2
 800f2f4:	000a      	movs	r2, r1
 800f2f6:	18b9      	adds	r1, r7, r2
 800f2f8:	600b      	str	r3, [r1, #0]

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f2fa:	18bb      	adds	r3, r7, r2
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4951      	ldr	r1, [pc, #324]	; (800f444 <VL53L0X_calc_sigma_estimate+0x544>)
 800f300:	468c      	mov	ip, r1
 800f302:	4463      	add	r3, ip
 800f304:	18b9      	adds	r1, r7, r2
 800f306:	600b      	str	r3, [r1, #0]
		sigmaEstRtn		 /= 10000;
 800f308:	0014      	movs	r4, r2
 800f30a:	18bb      	adds	r3, r7, r2
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	494e      	ldr	r1, [pc, #312]	; (800f448 <VL53L0X_calc_sigma_estimate+0x548>)
 800f310:	0018      	movs	r0, r3
 800f312:	f7f0 ff15 	bl	8000140 <__udivsi3>
 800f316:	0003      	movs	r3, r0
 800f318:	0021      	movs	r1, r4
 800f31a:	187a      	adds	r2, r7, r1
 800f31c:	6013      	str	r3, [r2, #0]

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f31e:	187b      	adds	r3, r7, r1
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f324:	429a      	cmp	r2, r3
 800f326:	d902      	bls.n	800f32e <VL53L0X_calc_sigma_estimate+0x42e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f32a:	187a      	adds	r2, r7, r1
 800f32c:	6013      	str	r3, [r2, #0]
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f32e:	23b8      	movs	r3, #184	; 0xb8
 800f330:	18fb      	adds	r3, r7, r3
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	23b4      	movs	r3, #180	; 0xb4
 800f336:	18fb      	adds	r3, r7, r3
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	18d3      	adds	r3, r2, r3
 800f33c:	33f5      	adds	r3, #245	; 0xf5
 800f33e:	33ff      	adds	r3, #255	; 0xff
		finalRangeIntegrationTimeMilliSecs =
 800f340:	22fa      	movs	r2, #250	; 0xfa
 800f342:	0091      	lsls	r1, r2, #2
 800f344:	0018      	movs	r0, r3
 800f346:	f7f0 fefb 	bl	8000140 <__udivsi3>
 800f34a:	0003      	movs	r3, r0
 800f34c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f352:	2388      	movs	r3, #136	; 0x88
 800f354:	18fb      	adds	r3, r7, r3
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	18d3      	adds	r3, r2, r3
 800f35a:	6a39      	ldr	r1, [r7, #32]
 800f35c:	0018      	movs	r0, r3
 800f35e:	f7f0 feef 	bl	8000140 <__udivsi3>
 800f362:	0003      	movs	r3, r0
 800f364:	0018      	movs	r0, r3
 800f366:	f7fd fd0d 	bl	800cd84 <VL53L0X_isqrt>
 800f36a:	0003      	movs	r3, r0
 800f36c:	61fb      	str	r3, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	021b      	lsls	r3, r3, #8
 800f372:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	33f5      	adds	r3, #245	; 0xf5
 800f378:	33ff      	adds	r3, #255	; 0xff
 800f37a:	22fa      	movs	r2, #250	; 0xfa
 800f37c:	0091      	lsls	r1, r2, #2
 800f37e:	0018      	movs	r0, r3
 800f380:	f7f0 fede 	bl	8000140 <__udivsi3>
 800f384:	0003      	movs	r3, r0
 800f386:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f388:	23a8      	movs	r3, #168	; 0xa8
 800f38a:	18fb      	adds	r3, r7, r3
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	435b      	muls	r3, r3
 800f390:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	435b      	muls	r3, r3
 800f396:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39c:	18d3      	adds	r3, r2, r3
 800f39e:	0018      	movs	r0, r3
 800f3a0:	f7fd fcf0 	bl	800cd84 <VL53L0X_isqrt>
 800f3a4:	0003      	movs	r3, r0
 800f3a6:	61bb      	str	r3, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f3a8:	69ba      	ldr	r2, [r7, #24]
 800f3aa:	0013      	movs	r3, r2
 800f3ac:	015b      	lsls	r3, r3, #5
 800f3ae:	1a9b      	subs	r3, r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	189b      	adds	r3, r3, r2
 800f3b4:	00db      	lsls	r3, r3, #3
 800f3b6:	22a4      	movs	r2, #164	; 0xa4
 800f3b8:	18b9      	adds	r1, r7, r2
 800f3ba:	600b      	str	r3, [r1, #0]

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f3bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00b      	beq.n	800f3da <VL53L0X_calc_sigma_estimate+0x4da>
 800f3c2:	23bc      	movs	r3, #188	; 0xbc
 800f3c4:	18fb      	adds	r3, r7, r3
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d006      	beq.n	800f3da <VL53L0X_calc_sigma_estimate+0x4da>
 800f3cc:	18bb      	adds	r3, r7, r2
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	2380      	movs	r3, #128	; 0x80
 800f3d2:	18fb      	adds	r3, r7, r3
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d905      	bls.n	800f3e6 <VL53L0X_calc_sigma_estimate+0x4e6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f3da:	2380      	movs	r3, #128	; 0x80
 800f3dc:	18fb      	adds	r3, r7, r3
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	22a4      	movs	r2, #164	; 0xa4
 800f3e2:	18ba      	adds	r2, r7, r2
 800f3e4:	6013      	str	r3, [r2, #0]
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	22a4      	movs	r2, #164	; 0xa4
 800f3ea:	18ba      	adds	r2, r7, r2
 800f3ec:	6812      	ldr	r2, [r2, #0]
 800f3ee:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6819      	ldr	r1, [r3, #0]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	23a0      	movs	r3, #160	; 0xa0
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	50d1      	str	r1, [r2, r3]
		Status = VL53L0X_calc_dmax(
 800f3fc:	6939      	ldr	r1, [r7, #16]
 800f3fe:	239f      	movs	r3, #159	; 0x9f
 800f400:	18fc      	adds	r4, r7, r3
 800f402:	23ac      	movs	r3, #172	; 0xac
 800f404:	18fb      	adds	r3, r7, r3
 800f406:	681d      	ldr	r5, [r3, #0]
 800f408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	2394      	movs	r3, #148	; 0x94
 800f412:	18fb      	adds	r3, r7, r3
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	9302      	str	r3, [sp, #8]
 800f418:	23b0      	movs	r3, #176	; 0xb0
 800f41a:	18fb      	adds	r3, r7, r3
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	002b      	movs	r3, r5
 800f426:	f7ff fc37 	bl	800ec98 <VL53L0X_calc_dmax>
 800f42a:	0003      	movs	r3, r0
 800f42c:	7023      	strb	r3, [r4, #0]
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f42e:	239f      	movs	r3, #159	; 0x9f
 800f430:	18fb      	adds	r3, r7, r3
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	b25b      	sxtb	r3, r3
}
 800f436:	0018      	movs	r0, r3
 800f438:	46bd      	mov	sp, r7
 800f43a:	b030      	add	sp, #192	; 0xc0
 800f43c:	bdb0      	pop	{r4, r5, r7, pc}
 800f43e:	46c0      	nop			; (mov r8, r8)
 800f440:	00000bb5 	.word	0x00000bb5
 800f444:	00001388 	.word	0x00001388
 800f448:	00002710 	.word	0x00002710

0800f44c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f44c:	b5b0      	push	{r4, r5, r7, lr}
 800f44e:	b090      	sub	sp, #64	; 0x40
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	0008      	movs	r0, r1
 800f456:	607a      	str	r2, [r7, #4]
 800f458:	0019      	movs	r1, r3
 800f45a:	240b      	movs	r4, #11
 800f45c:	193b      	adds	r3, r7, r4
 800f45e:	1c02      	adds	r2, r0, #0
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	2308      	movs	r3, #8
 800f464:	18fb      	adds	r3, r7, r3
 800f466:	1c0a      	adds	r2, r1, #0
 800f468:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f46a:	233f      	movs	r3, #63	; 0x3f
 800f46c:	18fb      	adds	r3, r7, r3
 800f46e:	2200      	movs	r2, #0
 800f470:	701a      	strb	r2, [r3, #0]
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f472:	233d      	movs	r3, #61	; 0x3d
 800f474:	18fb      	adds	r3, r7, r3
 800f476:	2200      	movs	r2, #0
 800f478:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipflag = 0;
 800f47a:	233c      	movs	r3, #60	; 0x3c
 800f47c:	18fb      	adds	r3, r7, r3
 800f47e:	2200      	movs	r2, #0
 800f480:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdflag = 0;
 800f482:	233b      	movs	r3, #59	; 0x3b
 800f484:	18fb      	adds	r3, r7, r3
 800f486:	2200      	movs	r2, #0
 800f488:	701a      	strb	r2, [r3, #0]
	uint8_t SigmaLimitCheckEnable = 0;
 800f48a:	232b      	movs	r3, #43	; 0x2b
 800f48c:	18fb      	adds	r3, r7, r3
 800f48e:	2200      	movs	r2, #0
 800f490:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f492:	232a      	movs	r3, #42	; 0x2a
 800f494:	18fb      	adds	r3, r7, r3
 800f496:	2200      	movs	r2, #0
 800f498:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f49a:	2329      	movs	r3, #41	; 0x29
 800f49c:	18fb      	adds	r3, r7, r3
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f4a2:	2328      	movs	r3, #40	; 0x28
 800f4a4:	18fb      	adds	r3, r7, r3
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f4aa:	2132      	movs	r1, #50	; 0x32
 800f4ac:	187b      	adds	r3, r7, r1
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	701a      	strb	r2, [r3, #0]
	uint16_t tmpWord = 0;
 800f4b2:	2316      	movs	r3, #22
 800f4b4:	18fb      	adds	r3, r7, r3
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	801a      	strh	r2, [r3, #0]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f4be:	193b      	adds	r3, r7, r4
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	10db      	asrs	r3, r3, #3
 800f4c4:	b2da      	uxtb	r2, r3
 800f4c6:	0008      	movs	r0, r1
 800f4c8:	187b      	adds	r3, r7, r1
 800f4ca:	210f      	movs	r1, #15
 800f4cc:	400a      	ands	r2, r1
 800f4ce:	701a      	strb	r2, [r3, #0]

	if (DeviceRangeStatusInternal == 0 ||
 800f4d0:	0002      	movs	r2, r0
 800f4d2:	18bb      	adds	r3, r7, r2
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d017      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
 800f4da:	18bb      	adds	r3, r7, r2
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	2b05      	cmp	r3, #5
 800f4e0:	d013      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 5 ||
 800f4e2:	18bb      	adds	r3, r7, r2
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b07      	cmp	r3, #7
 800f4e8:	d00f      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 7 ||
 800f4ea:	18bb      	adds	r3, r7, r2
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b0c      	cmp	r3, #12
 800f4f0:	d00b      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 12 ||
 800f4f2:	18bb      	adds	r3, r7, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b0d      	cmp	r3, #13
 800f4f8:	d007      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 13 ||
 800f4fa:	18bb      	adds	r3, r7, r2
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b0e      	cmp	r3, #14
 800f500:	d003      	beq.n	800f50a <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 14 ||
 800f502:	18bb      	adds	r3, r7, r2
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	2b0f      	cmp	r3, #15
 800f508:	d104      	bne.n	800f514 <VL53L0X_get_pal_range_status+0xc8>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800f50a:	233e      	movs	r3, #62	; 0x3e
 800f50c:	18fb      	adds	r3, r7, r3
 800f50e:	2201      	movs	r2, #1
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	e003      	b.n	800f51c <VL53L0X_get_pal_range_status+0xd0>
	} else {
		NoneFlag = 0;
 800f514:	233e      	movs	r3, #62	; 0x3e
 800f516:	18fb      	adds	r3, r7, r3
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f51c:	223f      	movs	r2, #63	; 0x3f
 800f51e:	18bb      	adds	r3, r7, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	b25b      	sxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d109      	bne.n	800f53c <VL53L0X_get_pal_range_status+0xf0>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f528:	18bc      	adds	r4, r7, r2
 800f52a:	232b      	movs	r3, #43	; 0x2b
 800f52c:	18fa      	adds	r2, r7, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2100      	movs	r1, #0
 800f532:	0018      	movs	r0, r3
 800f534:	f7fb fbec 	bl	800ad10 <VL53L0X_GetLimitCheckEnable>
 800f538:	0003      	movs	r3, r0
 800f53a:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f53c:	232b      	movs	r3, #43	; 0x2b
 800f53e:	18fb      	adds	r3, r7, r3
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d034      	beq.n	800f5b0 <VL53L0X_get_pal_range_status+0x164>
 800f546:	253f      	movs	r5, #63	; 0x3f
 800f548:	197b      	adds	r3, r7, r5
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	b25b      	sxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d12e      	bne.n	800f5b0 <VL53L0X_get_pal_range_status+0x164>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f552:	197c      	adds	r4, r7, r5
 800f554:	2310      	movs	r3, #16
 800f556:	18fb      	adds	r3, r7, r3
 800f558:	2224      	movs	r2, #36	; 0x24
 800f55a:	18ba      	adds	r2, r7, r2
 800f55c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f7ff fcce 	bl	800ef00 <VL53L0X_calc_sigma_estimate>
 800f564:	0003      	movs	r3, r0
 800f566:	7023      	strb	r3, [r4, #0]
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f568:	197b      	adds	r3, r7, r5
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	b25b      	sxtb	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d103      	bne.n	800f57a <VL53L0X_get_pal_range_status+0x12e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	b29a      	uxth	r2, r3
 800f576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f578:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f57a:	223f      	movs	r2, #63	; 0x3f
 800f57c:	18bb      	adds	r3, r7, r2
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	b25b      	sxtb	r3, r3
 800f582:	2b00      	cmp	r3, #0
 800f584:	d114      	bne.n	800f5b0 <VL53L0X_get_pal_range_status+0x164>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f586:	18bc      	adds	r4, r7, r2
 800f588:	2320      	movs	r3, #32
 800f58a:	18fa      	adds	r2, r7, r3
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2100      	movs	r1, #0
 800f590:	0018      	movs	r0, r3
 800f592:	f7fb fc61 	bl	800ae58 <VL53L0X_GetLimitCheckValue>
 800f596:	0003      	movs	r3, r0
 800f598:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d007      	beq.n	800f5b0 <VL53L0X_get_pal_range_status+0x164>
				(SigmaEstimate > SigmaLimitValue))
 800f5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d903      	bls.n	800f5b0 <VL53L0X_get_pal_range_status+0x164>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f5a8:	233d      	movs	r3, #61	; 0x3d
 800f5aa:	18fb      	adds	r3, r7, r3
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f5b0:	223f      	movs	r2, #63	; 0x3f
 800f5b2:	18bb      	adds	r3, r7, r2
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	b25b      	sxtb	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d109      	bne.n	800f5d0 <VL53L0X_get_pal_range_status+0x184>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f5bc:	18bc      	adds	r4, r7, r2
 800f5be:	2329      	movs	r3, #41	; 0x29
 800f5c0:	18fa      	adds	r2, r7, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2102      	movs	r1, #2
 800f5c6:	0018      	movs	r0, r3
 800f5c8:	f7fb fba2 	bl	800ad10 <VL53L0X_GetLimitCheckEnable>
 800f5cc:	0003      	movs	r3, r0
 800f5ce:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f5d0:	2329      	movs	r3, #41	; 0x29
 800f5d2:	18fb      	adds	r3, r7, r3
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d051      	beq.n	800f67e <VL53L0X_get_pal_range_status+0x232>
 800f5da:	253f      	movs	r5, #63	; 0x3f
 800f5dc:	197b      	adds	r3, r7, r5
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	b25b      	sxtb	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d14b      	bne.n	800f67e <VL53L0X_get_pal_range_status+0x232>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f5e6:	197c      	adds	r4, r7, r5
 800f5e8:	231c      	movs	r3, #28
 800f5ea:	18fa      	adds	r2, r7, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2102      	movs	r1, #2
 800f5f0:	0018      	movs	r0, r3
 800f5f2:	f7fb fc31 	bl	800ae58 <VL53L0X_GetLimitCheckValue>
 800f5f6:	0003      	movs	r3, r0
 800f5f8:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f5fa:	197b      	adds	r3, r7, r5
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	b25b      	sxtb	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	d108      	bne.n	800f616 <VL53L0X_get_pal_range_status+0x1ca>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f604:	197c      	adds	r4, r7, r5
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	21ff      	movs	r1, #255	; 0xff
 800f60c:	0018      	movs	r0, r3
 800f60e:	f000 fa0d 	bl	800fa2c <VL53L0X_WrByte>
 800f612:	0003      	movs	r3, r0
 800f614:	7023      	strb	r3, [r4, #0]

		if (Status == VL53L0X_ERROR_NONE)
 800f616:	223f      	movs	r2, #63	; 0x3f
 800f618:	18bb      	adds	r3, r7, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	b25b      	sxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d109      	bne.n	800f636 <VL53L0X_get_pal_range_status+0x1ea>
			Status = VL53L0X_RdWord(Dev,
 800f622:	18bc      	adds	r4, r7, r2
 800f624:	2316      	movs	r3, #22
 800f626:	18fa      	adds	r2, r7, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	21b6      	movs	r1, #182	; 0xb6
 800f62c:	0018      	movs	r0, r3
 800f62e:	f000 fae1 	bl	800fbf4 <VL53L0X_RdWord>
 800f632:	0003      	movs	r3, r0
 800f634:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f636:	223f      	movs	r2, #63	; 0x3f
 800f638:	18bb      	adds	r3, r7, r2
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b25b      	sxtb	r3, r3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d108      	bne.n	800f654 <VL53L0X_get_pal_range_status+0x208>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f642:	18bc      	adds	r4, r7, r2
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	21ff      	movs	r1, #255	; 0xff
 800f64a:	0018      	movs	r0, r3
 800f64c:	f000 f9ee 	bl	800fa2c <VL53L0X_WrByte>
 800f650:	0003      	movs	r3, r0
 800f652:	7023      	strb	r3, [r4, #0]

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f654:	2316      	movs	r3, #22
 800f656:	18fb      	adds	r3, r7, r3
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	025b      	lsls	r3, r3, #9
 800f65c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	23a4      	movs	r3, #164	; 0xa4
 800f662:	005b      	lsls	r3, r3, #1
 800f664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f666:	50d1      	str	r1, [r2, r3]

		if ((SignalRefClipValue > 0) &&
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <VL53L0X_get_pal_range_status+0x232>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f66e:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f672:	429a      	cmp	r2, r3
 800f674:	d903      	bls.n	800f67e <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f676:	233c      	movs	r3, #60	; 0x3c
 800f678:	18fb      	adds	r3, r7, r3
 800f67a:	2201      	movs	r2, #1
 800f67c:	701a      	strb	r2, [r3, #0]
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f67e:	223f      	movs	r2, #63	; 0x3f
 800f680:	18bb      	adds	r3, r7, r2
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	b25b      	sxtb	r3, r3
 800f686:	2b00      	cmp	r3, #0
 800f688:	d109      	bne.n	800f69e <VL53L0X_get_pal_range_status+0x252>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f68a:	18bc      	adds	r4, r7, r2
 800f68c:	2328      	movs	r3, #40	; 0x28
 800f68e:	18fa      	adds	r2, r7, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2103      	movs	r1, #3
 800f694:	0018      	movs	r0, r3
 800f696:	f7fb fb3b 	bl	800ad10 <VL53L0X_GetLimitCheckEnable>
 800f69a:	0003      	movs	r3, r0
 800f69c:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f69e:	2328      	movs	r3, #40	; 0x28
 800f6a0:	18fb      	adds	r3, r7, r3
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d02e      	beq.n	800f706 <VL53L0X_get_pal_range_status+0x2ba>
 800f6a8:	233f      	movs	r3, #63	; 0x3f
 800f6aa:	18fb      	adds	r3, r7, r3
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d128      	bne.n	800f706 <VL53L0X_get_pal_range_status+0x2ba>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f6b4:	2308      	movs	r3, #8
 800f6b6:	18fb      	adds	r3, r7, r3
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <VL53L0X_get_pal_range_status+0x278>
			SignalRatePerSpad = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800f6c2:	e00a      	b.n	800f6da <VL53L0X_get_pal_range_status+0x28e>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	021a      	lsls	r2, r3, #8
 800f6c8:	2308      	movs	r3, #8
 800f6ca:	18fb      	adds	r3, r7, r3
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	0019      	movs	r1, r3
 800f6d0:	0010      	movs	r0, r2
 800f6d2:	f7f0 fd35 	bl	8000140 <__udivsi3>
 800f6d6:	0003      	movs	r3, r0
 800f6d8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f6da:	233f      	movs	r3, #63	; 0x3f
 800f6dc:	18fc      	adds	r4, r7, r3
 800f6de:	2318      	movs	r3, #24
 800f6e0:	18fa      	adds	r2, r7, r3
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2103      	movs	r1, #3
 800f6e6:	0018      	movs	r0, r3
 800f6e8:	f7fb fbb6 	bl	800ae58 <VL53L0X_GetLimitCheckValue>
 800f6ec:	0003      	movs	r3, r0
 800f6ee:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d007      	beq.n	800f706 <VL53L0X_get_pal_range_status+0x2ba>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f6f6:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d203      	bcs.n	800f706 <VL53L0X_get_pal_range_status+0x2ba>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f6fe:	233b      	movs	r3, #59	; 0x3b
 800f700:	18fb      	adds	r3, r7, r3
 800f702:	2201      	movs	r2, #1
 800f704:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f706:	233f      	movs	r3, #63	; 0x3f
 800f708:	18fb      	adds	r3, r7, r3
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	b25b      	sxtb	r3, r3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d152      	bne.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		if (NoneFlag == 1) {
 800f712:	233e      	movs	r3, #62	; 0x3e
 800f714:	18fb      	adds	r3, r7, r3
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d103      	bne.n	800f724 <VL53L0X_get_pal_range_status+0x2d8>
			*pPalRangeStatus = 255;	 /* NONE */
 800f71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f71e:	22ff      	movs	r2, #255	; 0xff
 800f720:	701a      	strb	r2, [r3, #0]
 800f722:	e049      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f724:	2232      	movs	r2, #50	; 0x32
 800f726:	18bb      	adds	r3, r7, r2
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d007      	beq.n	800f73e <VL53L0X_get_pal_range_status+0x2f2>
 800f72e:	18bb      	adds	r3, r7, r2
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	2b02      	cmp	r3, #2
 800f734:	d003      	beq.n	800f73e <VL53L0X_get_pal_range_status+0x2f2>
					DeviceRangeStatusInternal == 2 ||
 800f736:	18bb      	adds	r3, r7, r2
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	2b03      	cmp	r3, #3
 800f73c:	d103      	bne.n	800f746 <VL53L0X_get_pal_range_status+0x2fa>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f740:	2205      	movs	r2, #5
 800f742:	701a      	strb	r2, [r3, #0]
 800f744:	e038      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f746:	2232      	movs	r2, #50	; 0x32
 800f748:	18bb      	adds	r3, r7, r2
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b06      	cmp	r3, #6
 800f74e:	d003      	beq.n	800f758 <VL53L0X_get_pal_range_status+0x30c>
 800f750:	18bb      	adds	r3, r7, r2
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b09      	cmp	r3, #9
 800f756:	d103      	bne.n	800f760 <VL53L0X_get_pal_range_status+0x314>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75a:	2204      	movs	r2, #4
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	e02b      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f760:	2232      	movs	r2, #50	; 0x32
 800f762:	18bb      	adds	r3, r7, r2
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	2b08      	cmp	r3, #8
 800f768:	d008      	beq.n	800f77c <VL53L0X_get_pal_range_status+0x330>
 800f76a:	18bb      	adds	r3, r7, r2
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2b0a      	cmp	r3, #10
 800f770:	d004      	beq.n	800f77c <VL53L0X_get_pal_range_status+0x330>
					DeviceRangeStatusInternal == 10 ||
 800f772:	233c      	movs	r3, #60	; 0x3c
 800f774:	18fb      	adds	r3, r7, r3
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d103      	bne.n	800f784 <VL53L0X_get_pal_range_status+0x338>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f77e:	2203      	movs	r2, #3
 800f780:	701a      	strb	r2, [r3, #0]
 800f782:	e019      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f784:	2332      	movs	r3, #50	; 0x32
 800f786:	18fb      	adds	r3, r7, r3
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b04      	cmp	r3, #4
 800f78c:	d004      	beq.n	800f798 <VL53L0X_get_pal_range_status+0x34c>
 800f78e:	233b      	movs	r3, #59	; 0x3b
 800f790:	18fb      	adds	r3, r7, r3
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d103      	bne.n	800f7a0 <VL53L0X_get_pal_range_status+0x354>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f79a:	2202      	movs	r2, #2
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	e00b      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else if (SigmaLimitflag == 1) {
 800f7a0:	233d      	movs	r3, #61	; 0x3d
 800f7a2:	18fb      	adds	r3, r7, r3
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d103      	bne.n	800f7b2 <VL53L0X_get_pal_range_status+0x366>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	701a      	strb	r2, [r3, #0]
 800f7b0:	e002      	b.n	800f7b8 <VL53L0X_get_pal_range_status+0x36c>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d102      	bne.n	800f7c6 <VL53L0X_get_pal_range_status+0x37a>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f7c6:	253f      	movs	r5, #63	; 0x3f
 800f7c8:	197c      	adds	r4, r7, r5
 800f7ca:	232a      	movs	r3, #42	; 0x2a
 800f7cc:	18fa      	adds	r2, r7, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	f7fb fa9c 	bl	800ad10 <VL53L0X_GetLimitCheckEnable>
 800f7d8:	0003      	movs	r3, r0
 800f7da:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f7dc:	197b      	adds	r3, r7, r5
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	b25b      	sxtb	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d163      	bne.n	800f8ae <VL53L0X_get_pal_range_status+0x462>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f7e6:	232b      	movs	r3, #43	; 0x2b
 800f7e8:	18fb      	adds	r3, r7, r3
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d004      	beq.n	800f7fa <VL53L0X_get_pal_range_status+0x3ae>
 800f7f0:	233d      	movs	r3, #61	; 0x3d
 800f7f2:	18fb      	adds	r3, r7, r3
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d104      	bne.n	800f804 <VL53L0X_get_pal_range_status+0x3b8>
			Temp8 = 1;
 800f7fa:	2333      	movs	r3, #51	; 0x33
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	2201      	movs	r2, #1
 800f800:	701a      	strb	r2, [r3, #0]
 800f802:	e003      	b.n	800f80c <VL53L0X_get_pal_range_status+0x3c0>
		else
			Temp8 = 0;
 800f804:	2333      	movs	r3, #51	; 0x33
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	2200      	movs	r2, #0
 800f80a:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2233      	movs	r2, #51	; 0x33
 800f810:	18ba      	adds	r2, r7, r2
 800f812:	212e      	movs	r1, #46	; 0x2e
 800f814:	7812      	ldrb	r2, [r2, #0]
 800f816:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f818:	2332      	movs	r3, #50	; 0x32
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	2b04      	cmp	r3, #4
 800f820:	d004      	beq.n	800f82c <VL53L0X_get_pal_range_status+0x3e0>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f822:	232a      	movs	r3, #42	; 0x2a
 800f824:	18fb      	adds	r3, r7, r3
 800f826:	781b      	ldrb	r3, [r3, #0]
		if ((DeviceRangeStatusInternal == 4) ||
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d104      	bne.n	800f836 <VL53L0X_get_pal_range_status+0x3ea>
			Temp8 = 1;
 800f82c:	2333      	movs	r3, #51	; 0x33
 800f82e:	18fb      	adds	r3, r7, r3
 800f830:	2201      	movs	r2, #1
 800f832:	701a      	strb	r2, [r3, #0]
 800f834:	e003      	b.n	800f83e <VL53L0X_get_pal_range_status+0x3f2>
		else
			Temp8 = 0;
 800f836:	2333      	movs	r3, #51	; 0x33
 800f838:	18fb      	adds	r3, r7, r3
 800f83a:	2200      	movs	r2, #0
 800f83c:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2233      	movs	r2, #51	; 0x33
 800f842:	18ba      	adds	r2, r7, r2
 800f844:	212f      	movs	r1, #47	; 0x2f
 800f846:	7812      	ldrb	r2, [r2, #0]
 800f848:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f84a:	2329      	movs	r3, #41	; 0x29
 800f84c:	18fb      	adds	r3, r7, r3
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d004      	beq.n	800f85e <VL53L0X_get_pal_range_status+0x412>
 800f854:	233c      	movs	r3, #60	; 0x3c
 800f856:	18fb      	adds	r3, r7, r3
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d104      	bne.n	800f868 <VL53L0X_get_pal_range_status+0x41c>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f85e:	2333      	movs	r3, #51	; 0x33
 800f860:	18fb      	adds	r3, r7, r3
 800f862:	2201      	movs	r2, #1
 800f864:	701a      	strb	r2, [r3, #0]
 800f866:	e003      	b.n	800f870 <VL53L0X_get_pal_range_status+0x424>
		else
			Temp8 = 0;
 800f868:	2333      	movs	r3, #51	; 0x33
 800f86a:	18fb      	adds	r3, r7, r3
 800f86c:	2200      	movs	r2, #0
 800f86e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2233      	movs	r2, #51	; 0x33
 800f874:	18ba      	adds	r2, r7, r2
 800f876:	2130      	movs	r1, #48	; 0x30
 800f878:	7812      	ldrb	r2, [r2, #0]
 800f87a:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f87c:	2328      	movs	r3, #40	; 0x28
 800f87e:	18fb      	adds	r3, r7, r3
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <VL53L0X_get_pal_range_status+0x444>
 800f886:	233b      	movs	r3, #59	; 0x3b
 800f888:	18fb      	adds	r3, r7, r3
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d104      	bne.n	800f89a <VL53L0X_get_pal_range_status+0x44e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f890:	2333      	movs	r3, #51	; 0x33
 800f892:	18fb      	adds	r3, r7, r3
 800f894:	2201      	movs	r2, #1
 800f896:	701a      	strb	r2, [r3, #0]
 800f898:	e003      	b.n	800f8a2 <VL53L0X_get_pal_range_status+0x456>
		else
			Temp8 = 0;
 800f89a:	2333      	movs	r3, #51	; 0x33
 800f89c:	18fb      	adds	r3, r7, r3
 800f89e:	2200      	movs	r2, #0
 800f8a0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2233      	movs	r2, #51	; 0x33
 800f8a6:	18ba      	adds	r2, r7, r2
 800f8a8:	2131      	movs	r1, #49	; 0x31
 800f8aa:	7812      	ldrb	r2, [r2, #0]
 800f8ac:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f8ae:	233f      	movs	r3, #63	; 0x3f
 800f8b0:	18fb      	adds	r3, r7, r3
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	b25b      	sxtb	r3, r3

}
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	b010      	add	sp, #64	; 0x40
 800f8bc:	bdb0      	pop	{r4, r5, r7, pc}

0800f8be <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f8be:	b590      	push	{r4, r7, lr}
 800f8c0:	b089      	sub	sp, #36	; 0x24
 800f8c2:	af02      	add	r7, sp, #8
 800f8c4:	60f8      	str	r0, [r7, #12]
 800f8c6:	60b9      	str	r1, [r7, #8]
 800f8c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	330a      	adds	r3, #10
 800f8ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	23ae      	movs	r3, #174	; 0xae
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	58d0      	ldr	r0, [r2, r3]
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	23b0      	movs	r3, #176	; 0xb0
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	5cd3      	ldrb	r3, [r2, r3]
 800f8e0:	b299      	uxth	r1, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	b29c      	uxth	r4, r3
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	0023      	movs	r3, r4
 800f8ee:	f7f6 f86d 	bl	80059cc <HAL_I2C_Master_Transmit>
 800f8f2:	0003      	movs	r3, r0
 800f8f4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f8f6:	693b      	ldr	r3, [r7, #16]
}
 800f8f8:	0018      	movs	r0, r3
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	b007      	add	sp, #28
 800f8fe:	bd90      	pop	{r4, r7, pc}

0800f900 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f900:	b590      	push	{r4, r7, lr}
 800f902:	b089      	sub	sp, #36	; 0x24
 800f904:	af02      	add	r7, sp, #8
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	330a      	adds	r3, #10
 800f910:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	23ae      	movs	r3, #174	; 0xae
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	58d0      	ldr	r0, [r2, r3]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	23b0      	movs	r3, #176	; 0xb0
 800f91e:	005b      	lsls	r3, r3, #1
 800f920:	5cd3      	ldrb	r3, [r2, r3]
 800f922:	2201      	movs	r2, #1
 800f924:	4313      	orrs	r3, r2
 800f926:	b2db      	uxtb	r3, r3
 800f928:	b299      	uxth	r1, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	b29c      	uxth	r4, r3
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	9300      	str	r3, [sp, #0]
 800f934:	0023      	movs	r3, r4
 800f936:	f7f6 f951 	bl	8005bdc <HAL_I2C_Master_Receive>
 800f93a:	0003      	movs	r3, r0
 800f93c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f93e:	693b      	ldr	r3, [r7, #16]
}
 800f940:	0018      	movs	r0, r3
 800f942:	46bd      	mov	sp, r7
 800f944:	b007      	add	sp, #28
 800f946:	bd90      	pop	{r4, r7, pc}

0800f948 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b086      	sub	sp, #24
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	230b      	movs	r3, #11
 800f956:	18fb      	adds	r3, r7, r3
 800f958:	1c0a      	adds	r2, r1, #0
 800f95a:	701a      	strb	r2, [r3, #0]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f95c:	2317      	movs	r3, #23
 800f95e:	18fb      	adds	r3, r7, r3
 800f960:	2200      	movs	r2, #0
 800f962:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	2b3f      	cmp	r3, #63	; 0x3f
 800f968:	d902      	bls.n	800f970 <VL53L0X_WriteMulti+0x28>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f96a:	2304      	movs	r3, #4
 800f96c:	425b      	negs	r3, r3
 800f96e:	e01e      	b.n	800f9ae <VL53L0X_WriteMulti+0x66>
    }
    _I2CBuffer[0] = index;
 800f970:	4b11      	ldr	r3, [pc, #68]	; (800f9b8 <VL53L0X_WriteMulti+0x70>)
 800f972:	220b      	movs	r2, #11
 800f974:	18ba      	adds	r2, r7, r2
 800f976:	7812      	ldrb	r2, [r2, #0]
 800f978:	701a      	strb	r2, [r3, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	6879      	ldr	r1, [r7, #4]
 800f97e:	4b0f      	ldr	r3, [pc, #60]	; (800f9bc <VL53L0X_WriteMulti+0x74>)
 800f980:	0018      	movs	r0, r3
 800f982:	f001 fd9d 	bl	80114c0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	1c5a      	adds	r2, r3, #1
 800f98a:	490b      	ldr	r1, [pc, #44]	; (800f9b8 <VL53L0X_WriteMulti+0x70>)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	0018      	movs	r0, r3
 800f990:	f7ff ff95 	bl	800f8be <_I2CWrite>
 800f994:	0003      	movs	r3, r0
 800f996:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <VL53L0X_WriteMulti+0x5e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f99e:	2317      	movs	r3, #23
 800f9a0:	18fb      	adds	r3, r7, r3
 800f9a2:	22ec      	movs	r2, #236	; 0xec
 800f9a4:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f9a6:	2317      	movs	r3, #23
 800f9a8:	18fb      	adds	r3, r7, r3
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	b25b      	sxtb	r3, r3
}
 800f9ae:	0018      	movs	r0, r3
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	b006      	add	sp, #24
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	46c0      	nop			; (mov r8, r8)
 800f9b8:	20000a64 	.word	0x20000a64
 800f9bc:	20000a65 	.word	0x20000a65

0800f9c0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f9c0:	b590      	push	{r4, r7, lr}
 800f9c2:	b087      	sub	sp, #28
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	607a      	str	r2, [r7, #4]
 800f9ca:	603b      	str	r3, [r7, #0]
 800f9cc:	200b      	movs	r0, #11
 800f9ce:	183b      	adds	r3, r7, r0
 800f9d0:	1c0a      	adds	r2, r1, #0
 800f9d2:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9d4:	2417      	movs	r4, #23
 800f9d6:	193b      	adds	r3, r7, r4
 800f9d8:	2200      	movs	r2, #0
 800f9da:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f9dc:	1839      	adds	r1, r7, r0
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	0018      	movs	r0, r3
 800f9e4:	f7ff ff6b 	bl	800f8be <_I2CWrite>
 800f9e8:	0003      	movs	r3, r0
 800f9ea:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <VL53L0X_ReadMulti+0x3a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f9f2:	193b      	adds	r3, r7, r4
 800f9f4:	22ec      	movs	r2, #236	; 0xec
 800f9f6:	701a      	strb	r2, [r3, #0]
        goto done;
 800f9f8:	e010      	b.n	800fa1c <VL53L0X_ReadMulti+0x5c>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	0018      	movs	r0, r3
 800fa02:	f7ff ff7d 	bl	800f900 <_I2CRead>
 800fa06:	0003      	movs	r3, r0
 800fa08:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <VL53L0X_ReadMulti+0x5a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa10:	2317      	movs	r3, #23
 800fa12:	18fb      	adds	r3, r7, r3
 800fa14:	22ec      	movs	r2, #236	; 0xec
 800fa16:	701a      	strb	r2, [r3, #0]
 800fa18:	e000      	b.n	800fa1c <VL53L0X_ReadMulti+0x5c>
    }
done:
 800fa1a:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 800fa1c:	2317      	movs	r3, #23
 800fa1e:	18fb      	adds	r3, r7, r3
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	b25b      	sxtb	r3, r3
}
 800fa24:	0018      	movs	r0, r3
 800fa26:	46bd      	mov	sp, r7
 800fa28:	b007      	add	sp, #28
 800fa2a:	bd90      	pop	{r4, r7, pc}

0800fa2c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b085      	sub	sp, #20
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	0008      	movs	r0, r1
 800fa36:	0011      	movs	r1, r2
 800fa38:	1cfb      	adds	r3, r7, #3
 800fa3a:	1c02      	adds	r2, r0, #0
 800fa3c:	701a      	strb	r2, [r3, #0]
 800fa3e:	1cbb      	adds	r3, r7, #2
 800fa40:	1c0a      	adds	r2, r1, #0
 800fa42:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa44:	240f      	movs	r4, #15
 800fa46:	193b      	adds	r3, r7, r4
 800fa48:	2200      	movs	r2, #0
 800fa4a:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800fa4c:	4b0e      	ldr	r3, [pc, #56]	; (800fa88 <VL53L0X_WrByte+0x5c>)
 800fa4e:	1cfa      	adds	r2, r7, #3
 800fa50:	7812      	ldrb	r2, [r2, #0]
 800fa52:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data;
 800fa54:	4b0c      	ldr	r3, [pc, #48]	; (800fa88 <VL53L0X_WrByte+0x5c>)
 800fa56:	1cba      	adds	r2, r7, #2
 800fa58:	7812      	ldrb	r2, [r2, #0]
 800fa5a:	705a      	strb	r2, [r3, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800fa5c:	490a      	ldr	r1, [pc, #40]	; (800fa88 <VL53L0X_WrByte+0x5c>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2202      	movs	r2, #2
 800fa62:	0018      	movs	r0, r3
 800fa64:	f7ff ff2b 	bl	800f8be <_I2CWrite>
 800fa68:	0003      	movs	r3, r0
 800fa6a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <VL53L0X_WrByte+0x4c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa72:	193b      	adds	r3, r7, r4
 800fa74:	22ec      	movs	r2, #236	; 0xec
 800fa76:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fa78:	230f      	movs	r3, #15
 800fa7a:	18fb      	adds	r3, r7, r3
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	b25b      	sxtb	r3, r3
}
 800fa80:	0018      	movs	r0, r3
 800fa82:	46bd      	mov	sp, r7
 800fa84:	b005      	add	sp, #20
 800fa86:	bd90      	pop	{r4, r7, pc}
 800fa88:	20000a64 	.word	0x20000a64

0800fa8c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800fa8c:	b590      	push	{r4, r7, lr}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	0008      	movs	r0, r1
 800fa96:	0011      	movs	r1, r2
 800fa98:	1cfb      	adds	r3, r7, #3
 800fa9a:	1c02      	adds	r2, r0, #0
 800fa9c:	701a      	strb	r2, [r3, #0]
 800fa9e:	003b      	movs	r3, r7
 800faa0:	1c0a      	adds	r2, r1, #0
 800faa2:	801a      	strh	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800faa4:	240f      	movs	r4, #15
 800faa6:	193b      	adds	r3, r7, r4
 800faa8:	2200      	movs	r2, #0
 800faaa:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800faac:	4b12      	ldr	r3, [pc, #72]	; (800faf8 <VL53L0X_WrWord+0x6c>)
 800faae:	1cfa      	adds	r2, r7, #3
 800fab0:	7812      	ldrb	r2, [r2, #0]
 800fab2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 800fab4:	003b      	movs	r3, r7
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	0a1b      	lsrs	r3, r3, #8
 800faba:	b29b      	uxth	r3, r3
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	4b0e      	ldr	r3, [pc, #56]	; (800faf8 <VL53L0X_WrWord+0x6c>)
 800fac0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fac2:	003b      	movs	r3, r7
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	b2da      	uxtb	r2, r3
 800fac8:	4b0b      	ldr	r3, [pc, #44]	; (800faf8 <VL53L0X_WrWord+0x6c>)
 800faca:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800facc:	490a      	ldr	r1, [pc, #40]	; (800faf8 <VL53L0X_WrWord+0x6c>)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2203      	movs	r2, #3
 800fad2:	0018      	movs	r0, r3
 800fad4:	f7ff fef3 	bl	800f8be <_I2CWrite>
 800fad8:	0003      	movs	r3, r0
 800fada:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d002      	beq.n	800fae8 <VL53L0X_WrWord+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fae2:	193b      	adds	r3, r7, r4
 800fae4:	22ec      	movs	r2, #236	; 0xec
 800fae6:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fae8:	230f      	movs	r3, #15
 800faea:	18fb      	adds	r3, r7, r3
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	b25b      	sxtb	r3, r3
}
 800faf0:	0018      	movs	r0, r3
 800faf2:	46bd      	mov	sp, r7
 800faf4:	b005      	add	sp, #20
 800faf6:	bd90      	pop	{r4, r7, pc}
 800faf8:	20000a64 	.word	0x20000a64

0800fafc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800fafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	000c      	movs	r4, r1
 800fb06:	0010      	movs	r0, r2
 800fb08:	0019      	movs	r1, r3
 800fb0a:	1cfb      	adds	r3, r7, #3
 800fb0c:	1c22      	adds	r2, r4, #0
 800fb0e:	701a      	strb	r2, [r3, #0]
 800fb10:	1cbb      	adds	r3, r7, #2
 800fb12:	1c02      	adds	r2, r0, #0
 800fb14:	701a      	strb	r2, [r3, #0]
 800fb16:	1c7b      	adds	r3, r7, #1
 800fb18:	1c0a      	adds	r2, r1, #0
 800fb1a:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb1c:	250f      	movs	r5, #15
 800fb1e:	197b      	adds	r3, r7, r5
 800fb20:	2200      	movs	r2, #0
 800fb22:	701a      	strb	r2, [r3, #0]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800fb24:	197c      	adds	r4, r7, r5
 800fb26:	260e      	movs	r6, #14
 800fb28:	19ba      	adds	r2, r7, r6
 800fb2a:	1cfb      	adds	r3, r7, #3
 800fb2c:	7819      	ldrb	r1, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	0018      	movs	r0, r3
 800fb32:	f000 f82a 	bl	800fb8a <VL53L0X_RdByte>
 800fb36:	0003      	movs	r3, r0
 800fb38:	7023      	strb	r3, [r4, #0]
    if (Status) {
 800fb3a:	0029      	movs	r1, r5
 800fb3c:	187b      	adds	r3, r7, r1
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	b25b      	sxtb	r3, r3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d118      	bne.n	800fb78 <VL53L0X_UpdateByte+0x7c>
        goto done;
    }
    data = (data & AndData) | OrData;
 800fb46:	0030      	movs	r0, r6
 800fb48:	183b      	adds	r3, r7, r0
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	1cba      	adds	r2, r7, #2
 800fb4e:	7812      	ldrb	r2, [r2, #0]
 800fb50:	4013      	ands	r3, r2
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	1c7b      	adds	r3, r7, #1
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	183b      	adds	r3, r7, r0
 800fb5e:	701a      	strb	r2, [r3, #0]
    Status = VL53L0X_WrByte(Dev, index, data);
 800fb60:	183b      	adds	r3, r7, r0
 800fb62:	781a      	ldrb	r2, [r3, #0]
 800fb64:	187c      	adds	r4, r7, r1
 800fb66:	1cfb      	adds	r3, r7, #3
 800fb68:	7819      	ldrb	r1, [r3, #0]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	0018      	movs	r0, r3
 800fb6e:	f7ff ff5d 	bl	800fa2c <VL53L0X_WrByte>
 800fb72:	0003      	movs	r3, r0
 800fb74:	7023      	strb	r3, [r4, #0]
 800fb76:	e000      	b.n	800fb7a <VL53L0X_UpdateByte+0x7e>
        goto done;
 800fb78:	46c0      	nop			; (mov r8, r8)
done:
    return Status;
 800fb7a:	230f      	movs	r3, #15
 800fb7c:	18fb      	adds	r3, r7, r3
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	b25b      	sxtb	r3, r3
}
 800fb82:	0018      	movs	r0, r3
 800fb84:	46bd      	mov	sp, r7
 800fb86:	b005      	add	sp, #20
 800fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb8a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800fb8a:	b590      	push	{r4, r7, lr}
 800fb8c:	b087      	sub	sp, #28
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	200b      	movs	r0, #11
 800fb96:	183b      	adds	r3, r7, r0
 800fb98:	1c0a      	adds	r2, r1, #0
 800fb9a:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb9c:	2417      	movs	r4, #23
 800fb9e:	193b      	adds	r3, r7, r4
 800fba0:	2200      	movs	r2, #0
 800fba2:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fba4:	1839      	adds	r1, r7, r0
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	0018      	movs	r0, r3
 800fbac:	f7ff fe87 	bl	800f8be <_I2CWrite>
 800fbb0:	0003      	movs	r3, r0
 800fbb2:	613b      	str	r3, [r7, #16]
    if( status_int ){
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d003      	beq.n	800fbc2 <VL53L0X_RdByte+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbba:	193b      	adds	r3, r7, r4
 800fbbc:	22ec      	movs	r2, #236	; 0xec
 800fbbe:	701a      	strb	r2, [r3, #0]
        goto done;
 800fbc0:	e010      	b.n	800fbe4 <VL53L0X_RdByte+0x5a>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f7ff fe99 	bl	800f900 <_I2CRead>
 800fbce:	0003      	movs	r3, r0
 800fbd0:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d004      	beq.n	800fbe2 <VL53L0X_RdByte+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbd8:	2317      	movs	r3, #23
 800fbda:	18fb      	adds	r3, r7, r3
 800fbdc:	22ec      	movs	r2, #236	; 0xec
 800fbde:	701a      	strb	r2, [r3, #0]
 800fbe0:	e000      	b.n	800fbe4 <VL53L0X_RdByte+0x5a>
    }
done:
 800fbe2:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 800fbe4:	2317      	movs	r3, #23
 800fbe6:	18fb      	adds	r3, r7, r3
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	b25b      	sxtb	r3, r3
}
 800fbec:	0018      	movs	r0, r3
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	b007      	add	sp, #28
 800fbf2:	bd90      	pop	{r4, r7, pc}

0800fbf4 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800fbf4:	b590      	push	{r4, r7, lr}
 800fbf6:	b087      	sub	sp, #28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	607a      	str	r2, [r7, #4]
 800fbfe:	200b      	movs	r0, #11
 800fc00:	183b      	adds	r3, r7, r0
 800fc02:	1c0a      	adds	r2, r1, #0
 800fc04:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc06:	2417      	movs	r4, #23
 800fc08:	193b      	adds	r3, r7, r4
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fc0e:	1839      	adds	r1, r7, r0
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2201      	movs	r2, #1
 800fc14:	0018      	movs	r0, r3
 800fc16:	f7ff fe52 	bl	800f8be <_I2CWrite>
 800fc1a:	0003      	movs	r3, r0
 800fc1c:	613b      	str	r3, [r7, #16]

    if( status_int ){
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d003      	beq.n	800fc2c <VL53L0X_RdWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fc24:	193b      	adds	r3, r7, r4
 800fc26:	22ec      	movs	r2, #236	; 0xec
 800fc28:	701a      	strb	r2, [r3, #0]
        goto done;
 800fc2a:	e01b      	b.n	800fc64 <VL53L0X_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fc2c:	4911      	ldr	r1, [pc, #68]	; (800fc74 <VL53L0X_RdWord+0x80>)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2202      	movs	r2, #2
 800fc32:	0018      	movs	r0, r3
 800fc34:	f7ff fe64 	bl	800f900 <_I2CRead>
 800fc38:	0003      	movs	r3, r0
 800fc3a:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d004      	beq.n	800fc4c <VL53L0X_RdWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fc42:	2317      	movs	r3, #23
 800fc44:	18fb      	adds	r3, r7, r3
 800fc46:	22ec      	movs	r2, #236	; 0xec
 800fc48:	701a      	strb	r2, [r3, #0]
        goto done;
 800fc4a:	e00b      	b.n	800fc64 <VL53L0X_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fc4c:	4b09      	ldr	r3, [pc, #36]	; (800fc74 <VL53L0X_RdWord+0x80>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	021b      	lsls	r3, r3, #8
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <VL53L0X_RdWord+0x80>)
 800fc58:	785b      	ldrb	r3, [r3, #1]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	18d3      	adds	r3, r2, r3
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800fc64:	2317      	movs	r3, #23
 800fc66:	18fb      	adds	r3, r7, r3
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	b25b      	sxtb	r3, r3
}
 800fc6c:	0018      	movs	r0, r3
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	b007      	add	sp, #28
 800fc72:	bd90      	pop	{r4, r7, pc}
 800fc74:	20000a64 	.word	0x20000a64

0800fc78 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	607a      	str	r2, [r7, #4]
 800fc82:	200b      	movs	r0, #11
 800fc84:	183b      	adds	r3, r7, r0
 800fc86:	1c0a      	adds	r2, r1, #0
 800fc88:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fc8a:	2417      	movs	r4, #23
 800fc8c:	193b      	adds	r3, r7, r4
 800fc8e:	2200      	movs	r2, #0
 800fc90:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fc92:	1839      	adds	r1, r7, r0
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	0018      	movs	r0, r3
 800fc9a:	f7ff fe10 	bl	800f8be <_I2CWrite>
 800fc9e:	0003      	movs	r3, r0
 800fca0:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d003      	beq.n	800fcb0 <VL53L0X_RdDWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fca8:	193b      	adds	r3, r7, r4
 800fcaa:	22ec      	movs	r2, #236	; 0xec
 800fcac:	701a      	strb	r2, [r3, #0]
        goto done;
 800fcae:	e01f      	b.n	800fcf0 <VL53L0X_RdDWord+0x78>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800fcb0:	4913      	ldr	r1, [pc, #76]	; (800fd00 <VL53L0X_RdDWord+0x88>)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2204      	movs	r2, #4
 800fcb6:	0018      	movs	r0, r3
 800fcb8:	f7ff fe22 	bl	800f900 <_I2CRead>
 800fcbc:	0003      	movs	r3, r0
 800fcbe:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d004      	beq.n	800fcd0 <VL53L0X_RdDWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fcc6:	2317      	movs	r3, #23
 800fcc8:	18fb      	adds	r3, r7, r3
 800fcca:	22ec      	movs	r2, #236	; 0xec
 800fccc:	701a      	strb	r2, [r3, #0]
        goto done;
 800fcce:	e00f      	b.n	800fcf0 <VL53L0X_RdDWord+0x78>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800fcd0:	4b0b      	ldr	r3, [pc, #44]	; (800fd00 <VL53L0X_RdDWord+0x88>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	061a      	lsls	r2, r3, #24
 800fcd6:	4b0a      	ldr	r3, [pc, #40]	; (800fd00 <VL53L0X_RdDWord+0x88>)
 800fcd8:	785b      	ldrb	r3, [r3, #1]
 800fcda:	041b      	lsls	r3, r3, #16
 800fcdc:	18d2      	adds	r2, r2, r3
 800fcde:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <VL53L0X_RdDWord+0x88>)
 800fce0:	789b      	ldrb	r3, [r3, #2]
 800fce2:	021b      	lsls	r3, r3, #8
 800fce4:	18d3      	adds	r3, r2, r3
 800fce6:	4a06      	ldr	r2, [pc, #24]	; (800fd00 <VL53L0X_RdDWord+0x88>)
 800fce8:	78d2      	ldrb	r2, [r2, #3]
 800fcea:	189a      	adds	r2, r3, r2
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800fcf0:	2317      	movs	r3, #23
 800fcf2:	18fb      	adds	r3, r7, r3
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	b25b      	sxtb	r3, r3
}
 800fcf8:	0018      	movs	r0, r3
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	b007      	add	sp, #28
 800fcfe:	bd90      	pop	{r4, r7, pc}
 800fd00:	20000a64 	.word	0x20000a64

0800fd04 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800fd04:	b590      	push	{r4, r7, lr}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800fd0c:	240f      	movs	r4, #15
 800fd0e:	193b      	adds	r3, r7, r4
 800fd10:	2200      	movs	r2, #0
 800fd12:	701a      	strb	r2, [r3, #0]

    // do nothing
    VL53L0X_OsDelay();
 800fd14:	2002      	movs	r0, #2
 800fd16:	f7f4 fdc1 	bl	800489c <HAL_Delay>
    return status;
 800fd1a:	193b      	adds	r3, r7, r4
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	b25b      	sxtb	r3, r3
}
 800fd20:	0018      	movs	r0, r3
 800fd22:	46bd      	mov	sp, r7
 800fd24:	b005      	add	sp, #20
 800fd26:	bd90      	pop	{r4, r7, pc}

0800fd28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	0002      	movs	r2, r0
 800fd30:	1dbb      	adds	r3, r7, #6
 800fd32:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fd34:	2300      	movs	r3, #0
 800fd36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fd38:	1dbb      	adds	r3, r7, #6
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	5e9b      	ldrsh	r3, [r3, r2]
 800fd3e:	2b84      	cmp	r3, #132	; 0x84
 800fd40:	d006      	beq.n	800fd50 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800fd42:	1dbb      	adds	r3, r7, #6
 800fd44:	2200      	movs	r2, #0
 800fd46:	5e9a      	ldrsh	r2, [r3, r2]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	18d3      	adds	r3, r2, r3
 800fd4c:	3303      	adds	r3, #3
 800fd4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fd50:	68fb      	ldr	r3, [r7, #12]
}
 800fd52:	0018      	movs	r0, r3
 800fd54:	46bd      	mov	sp, r7
 800fd56:	b004      	add	sp, #16
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fd5e:	f000 fb17 	bl	8010390 <vTaskStartScheduler>
  
  return osOK;
 800fd62:	2300      	movs	r3, #0
}
 800fd64:	0018      	movs	r0, r3
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fd6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd6c:	b087      	sub	sp, #28
 800fd6e:	af02      	add	r7, sp, #8
 800fd70:	6078      	str	r0, [r7, #4]
 800fd72:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	685c      	ldr	r4, [r3, #4]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fd80:	b29e      	uxth	r6, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2208      	movs	r2, #8
 800fd86:	5e9b      	ldrsh	r3, [r3, r2]
 800fd88:	0018      	movs	r0, r3
 800fd8a:	f7ff ffcd 	bl	800fd28 <makeFreeRtosPriority>
 800fd8e:	0001      	movs	r1, r0
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	230c      	movs	r3, #12
 800fd94:	18fb      	adds	r3, r7, r3
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	9100      	str	r1, [sp, #0]
 800fd9a:	0013      	movs	r3, r2
 800fd9c:	0032      	movs	r2, r6
 800fd9e:	0029      	movs	r1, r5
 800fda0:	0020      	movs	r0, r4
 800fda2:	f000 f8c7 	bl	800ff34 <xTaskCreate>
 800fda6:	0003      	movs	r3, r0
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d001      	beq.n	800fdb0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800fdac:	2300      	movs	r3, #0
 800fdae:	e000      	b.n	800fdb2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
}
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	b005      	add	sp, #20
 800fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <osDelay+0x16>
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	e000      	b.n	800fdd2 <osDelay+0x18>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	0018      	movs	r0, r3
 800fdd4:	f000 f9dc 	bl	8010190 <vTaskDelay>
  
  return osOK;
 800fdd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fdda:	0018      	movs	r0, r3
 800fddc:	46bd      	mov	sp, r7
 800fdde:	b004      	add	sp, #16
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b082      	sub	sp, #8
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	3308      	adds	r3, #8
 800fdee:	001a      	movs	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	4252      	negs	r2, r2
 800fdfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3308      	adds	r3, #8
 800fe00:	001a      	movs	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	3308      	adds	r3, #8
 800fe0a:	001a      	movs	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fe16:	46c0      	nop			; (mov r8, r8)
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	b002      	add	sp, #8
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b082      	sub	sp, #8
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fe2c:	46c0      	nop			; (mov r8, r8)
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	b002      	add	sp, #8
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	689a      	ldr	r2, [r3, #8]
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	1c5a      	adds	r2, r3, #1
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	601a      	str	r2, [r3, #0]
}
 800fe70:	46c0      	nop			; (mov r8, r8)
 800fe72:	46bd      	mov	sp, r7
 800fe74:	b004      	add	sp, #16
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	d103      	bne.n	800fe96 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	60fb      	str	r3, [r7, #12]
 800fe94:	e00c      	b.n	800feb0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	3308      	adds	r3, #8
 800fe9a:	60fb      	str	r3, [r7, #12]
 800fe9c:	e002      	b.n	800fea4 <vListInsert+0x2c>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	429a      	cmp	r2, r3
 800feae:	d2f6      	bcs.n	800fe9e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	685a      	ldr	r2, [r3, #4]
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	1c5a      	adds	r2, r3, #1
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	601a      	str	r2, [r3, #0]
}
 800fedc:	46c0      	nop			; (mov r8, r8)
 800fede:	46bd      	mov	sp, r7
 800fee0:	b004      	add	sp, #16
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	6892      	ldr	r2, [r2, #8]
 800fefa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	6852      	ldr	r2, [r2, #4]
 800ff04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d103      	bne.n	800ff18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	689a      	ldr	r2, [r3, #8]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	1e5a      	subs	r2, r3, #1
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
}
 800ff2c:	0018      	movs	r0, r3
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	b004      	add	sp, #16
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ff34:	b590      	push	{r4, r7, lr}
 800ff36:	b08d      	sub	sp, #52	; 0x34
 800ff38:	af04      	add	r7, sp, #16
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	603b      	str	r3, [r7, #0]
 800ff40:	1dbb      	adds	r3, r7, #6
 800ff42:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ff44:	1dbb      	adds	r3, r7, #6
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	0018      	movs	r0, r3
 800ff4c:	f000 ff18 	bl	8010d80 <pvPortMalloc>
 800ff50:	0003      	movs	r3, r0
 800ff52:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d010      	beq.n	800ff7c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ff5a:	2054      	movs	r0, #84	; 0x54
 800ff5c:	f000 ff10 	bl	8010d80 <pvPortMalloc>
 800ff60:	0003      	movs	r3, r0
 800ff62:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d003      	beq.n	800ff72 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ff70:	e006      	b.n	800ff80 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	0018      	movs	r0, r3
 800ff76:	f000 ffaf 	bl	8010ed8 <vPortFree>
 800ff7a:	e001      	b.n	800ff80 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d016      	beq.n	800ffb4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ff86:	1dbb      	adds	r3, r7, #6
 800ff88:	881a      	ldrh	r2, [r3, #0]
 800ff8a:	683c      	ldr	r4, [r7, #0]
 800ff8c:	68b9      	ldr	r1, [r7, #8]
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	2300      	movs	r3, #0
 800ff92:	9303      	str	r3, [sp, #12]
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	9302      	str	r3, [sp, #8]
 800ff98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	0023      	movs	r3, r4
 800ffa2:	f000 f80f 	bl	800ffc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	f000 f88d 	bl	80100c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	61bb      	str	r3, [r7, #24]
 800ffb2:	e002      	b.n	800ffba <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	425b      	negs	r3, r3
 800ffb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ffba:	69bb      	ldr	r3, [r7, #24]
	}
 800ffbc:	0018      	movs	r0, r3
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	b009      	add	sp, #36	; 0x24
 800ffc2:	bd90      	pop	{r4, r7, pc}

0800ffc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
 800ffd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ffd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	493a      	ldr	r1, [pc, #232]	; (80100c4 <prvInitialiseNewTask+0x100>)
 800ffda:	468c      	mov	ip, r1
 800ffdc:	4463      	add	r3, ip
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	18d3      	adds	r3, r2, r3
 800ffe2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	2207      	movs	r2, #7
 800ffe8:	4393      	bics	r3, r2
 800ffea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	2207      	movs	r2, #7
 800fff0:	4013      	ands	r3, r2
 800fff2:	d001      	beq.n	800fff8 <prvInitialiseNewTask+0x34>
 800fff4:	b672      	cpsid	i
 800fff6:	e7fe      	b.n	800fff6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d020      	beq.n	8010040 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fffe:	2300      	movs	r3, #0
 8010000:	617b      	str	r3, [r7, #20]
 8010002:	e013      	b.n	801002c <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	18d3      	adds	r3, r2, r3
 801000a:	7818      	ldrb	r0, [r3, #0]
 801000c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801000e:	2134      	movs	r1, #52	; 0x34
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	18d3      	adds	r3, r2, r3
 8010014:	185b      	adds	r3, r3, r1
 8010016:	1c02      	adds	r2, r0, #0
 8010018:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	18d3      	adds	r3, r2, r3
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d006      	beq.n	8010034 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	3301      	adds	r3, #1
 801002a:	617b      	str	r3, [r7, #20]
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	2b0f      	cmp	r3, #15
 8010030:	d9e8      	bls.n	8010004 <prvInitialiseNewTask+0x40>
 8010032:	e000      	b.n	8010036 <prvInitialiseNewTask+0x72>
			{
				break;
 8010034:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010038:	2243      	movs	r2, #67	; 0x43
 801003a:	2100      	movs	r1, #0
 801003c:	5499      	strb	r1, [r3, r2]
 801003e:	e003      	b.n	8010048 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010042:	2234      	movs	r2, #52	; 0x34
 8010044:	2100      	movs	r1, #0
 8010046:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	2b06      	cmp	r3, #6
 801004c:	d901      	bls.n	8010052 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801004e:	2306      	movs	r3, #6
 8010050:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010054:	6a3a      	ldr	r2, [r7, #32]
 8010056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005a:	6a3a      	ldr	r2, [r7, #32]
 801005c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	2200      	movs	r2, #0
 8010062:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010066:	3304      	adds	r3, #4
 8010068:	0018      	movs	r0, r3
 801006a:	f7ff fed8 	bl	800fe1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801006e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010070:	3318      	adds	r3, #24
 8010072:	0018      	movs	r0, r3
 8010074:	f7ff fed3 	bl	800fe1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801007c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801007e:	6a3b      	ldr	r3, [r7, #32]
 8010080:	2207      	movs	r2, #7
 8010082:	1ad2      	subs	r2, r2, r3
 8010084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801008c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801008e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010090:	2200      	movs	r2, #0
 8010092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	2250      	movs	r2, #80	; 0x50
 8010098:	2100      	movs	r1, #0
 801009a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801009c:	683a      	ldr	r2, [r7, #0]
 801009e:	68f9      	ldr	r1, [r7, #12]
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	0018      	movs	r0, r3
 80100a4:	f000 fd3c 	bl	8010b20 <pxPortInitialiseStack>
 80100a8:	0002      	movs	r2, r0
 80100aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d002      	beq.n	80100ba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100ba:	46c0      	nop			; (mov r8, r8)
 80100bc:	46bd      	mov	sp, r7
 80100be:	b006      	add	sp, #24
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	46c0      	nop			; (mov r8, r8)
 80100c4:	3fffffff 	.word	0x3fffffff

080100c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80100d0:	f000 fdbe 	bl	8010c50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80100d4:	4b28      	ldr	r3, [pc, #160]	; (8010178 <prvAddNewTaskToReadyList+0xb0>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	4b27      	ldr	r3, [pc, #156]	; (8010178 <prvAddNewTaskToReadyList+0xb0>)
 80100dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80100de:	4b27      	ldr	r3, [pc, #156]	; (801017c <prvAddNewTaskToReadyList+0xb4>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d109      	bne.n	80100fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80100e6:	4b25      	ldr	r3, [pc, #148]	; (801017c <prvAddNewTaskToReadyList+0xb4>)
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80100ec:	4b22      	ldr	r3, [pc, #136]	; (8010178 <prvAddNewTaskToReadyList+0xb0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d110      	bne.n	8010116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80100f4:	f000 fb2c 	bl	8010750 <prvInitialiseTaskLists>
 80100f8:	e00d      	b.n	8010116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80100fa:	4b21      	ldr	r3, [pc, #132]	; (8010180 <prvAddNewTaskToReadyList+0xb8>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d109      	bne.n	8010116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010102:	4b1e      	ldr	r3, [pc, #120]	; (801017c <prvAddNewTaskToReadyList+0xb4>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010c:	429a      	cmp	r2, r3
 801010e:	d802      	bhi.n	8010116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010110:	4b1a      	ldr	r3, [pc, #104]	; (801017c <prvAddNewTaskToReadyList+0xb4>)
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010116:	4b1b      	ldr	r3, [pc, #108]	; (8010184 <prvAddNewTaskToReadyList+0xbc>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	4b19      	ldr	r3, [pc, #100]	; (8010184 <prvAddNewTaskToReadyList+0xbc>)
 801011e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010124:	4b18      	ldr	r3, [pc, #96]	; (8010188 <prvAddNewTaskToReadyList+0xc0>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d903      	bls.n	8010134 <prvAddNewTaskToReadyList+0x6c>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010130:	4b15      	ldr	r3, [pc, #84]	; (8010188 <prvAddNewTaskToReadyList+0xc0>)
 8010132:	601a      	str	r2, [r3, #0]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010138:	0013      	movs	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	189b      	adds	r3, r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4a12      	ldr	r2, [pc, #72]	; (801018c <prvAddNewTaskToReadyList+0xc4>)
 8010142:	189a      	adds	r2, r3, r2
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	3304      	adds	r3, #4
 8010148:	0019      	movs	r1, r3
 801014a:	0010      	movs	r0, r2
 801014c:	f7ff fe72 	bl	800fe34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010150:	f000 fd90 	bl	8010c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010154:	4b0a      	ldr	r3, [pc, #40]	; (8010180 <prvAddNewTaskToReadyList+0xb8>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d008      	beq.n	801016e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801015c:	4b07      	ldr	r3, [pc, #28]	; (801017c <prvAddNewTaskToReadyList+0xb4>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010166:	429a      	cmp	r2, r3
 8010168:	d201      	bcs.n	801016e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801016a:	f000 fd61 	bl	8010c30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801016e:	46c0      	nop			; (mov r8, r8)
 8010170:	46bd      	mov	sp, r7
 8010172:	b002      	add	sp, #8
 8010174:	bd80      	pop	{r7, pc}
 8010176:	46c0      	nop			; (mov r8, r8)
 8010178:	20000ba4 	.word	0x20000ba4
 801017c:	20000aa4 	.word	0x20000aa4
 8010180:	20000bb0 	.word	0x20000bb0
 8010184:	20000bc0 	.word	0x20000bc0
 8010188:	20000bac 	.word	0x20000bac
 801018c:	20000aa8 	.word	0x20000aa8

08010190 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010198:	2300      	movs	r3, #0
 801019a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d010      	beq.n	80101c4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80101a2:	4b0d      	ldr	r3, [pc, #52]	; (80101d8 <vTaskDelay+0x48>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <vTaskDelay+0x1e>
 80101aa:	b672      	cpsid	i
 80101ac:	e7fe      	b.n	80101ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80101ae:	f000 f925 	bl	80103fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2100      	movs	r1, #0
 80101b6:	0018      	movs	r0, r3
 80101b8:	f000 fc5e 	bl	8010a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80101bc:	f000 f92a 	bl	8010414 <xTaskResumeAll>
 80101c0:	0003      	movs	r3, r0
 80101c2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80101ca:	f000 fd31 	bl	8010c30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101ce:	46c0      	nop			; (mov r8, r8)
 80101d0:	46bd      	mov	sp, r7
 80101d2:	b004      	add	sp, #16
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	46c0      	nop			; (mov r8, r8)
 80101d8:	20000bcc 	.word	0x20000bcc

080101dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80101e4:	f000 fd34 	bl	8010c50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d102      	bne.n	80101f4 <vTaskSuspend+0x18>
 80101ee:	4b29      	ldr	r3, [pc, #164]	; (8010294 <vTaskSuspend+0xb8>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	e000      	b.n	80101f6 <vTaskSuspend+0x1a>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	3304      	adds	r3, #4
 80101fc:	0018      	movs	r0, r3
 80101fe:	f7ff fe71 	bl	800fee4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010206:	2b00      	cmp	r3, #0
 8010208:	d004      	beq.n	8010214 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3318      	adds	r3, #24
 801020e:	0018      	movs	r0, r3
 8010210:	f7ff fe68 	bl	800fee4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	1d1a      	adds	r2, r3, #4
 8010218:	4b1f      	ldr	r3, [pc, #124]	; (8010298 <vTaskSuspend+0xbc>)
 801021a:	0011      	movs	r1, r2
 801021c:	0018      	movs	r0, r3
 801021e:	f7ff fe09 	bl	800fe34 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2250      	movs	r2, #80	; 0x50
 8010226:	5c9b      	ldrb	r3, [r3, r2]
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b01      	cmp	r3, #1
 801022c:	d103      	bne.n	8010236 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2250      	movs	r2, #80	; 0x50
 8010232:	2100      	movs	r1, #0
 8010234:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8010236:	f000 fd1d 	bl	8010c74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801023a:	4b18      	ldr	r3, [pc, #96]	; (801029c <vTaskSuspend+0xc0>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d005      	beq.n	801024e <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8010242:	f000 fd05 	bl	8010c50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8010246:	f000 fb07 	bl	8010858 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801024a:	f000 fd13 	bl	8010c74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801024e:	4b11      	ldr	r3, [pc, #68]	; (8010294 <vTaskSuspend+0xb8>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	429a      	cmp	r2, r3
 8010256:	d118      	bne.n	801028a <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8010258:	4b10      	ldr	r3, [pc, #64]	; (801029c <vTaskSuspend+0xc0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d008      	beq.n	8010272 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010260:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <vTaskSuspend+0xc4>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d001      	beq.n	801026c <vTaskSuspend+0x90>
 8010268:	b672      	cpsid	i
 801026a:	e7fe      	b.n	801026a <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801026c:	f000 fce0 	bl	8010c30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010270:	e00b      	b.n	801028a <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <vTaskSuspend+0xbc>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <vTaskSuspend+0xc8>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	429a      	cmp	r2, r3
 801027c:	d103      	bne.n	8010286 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801027e:	4b05      	ldr	r3, [pc, #20]	; (8010294 <vTaskSuspend+0xb8>)
 8010280:	2200      	movs	r2, #0
 8010282:	601a      	str	r2, [r3, #0]
	}
 8010284:	e001      	b.n	801028a <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8010286:	f000 fa01 	bl	801068c <vTaskSwitchContext>
	}
 801028a:	46c0      	nop			; (mov r8, r8)
 801028c:	46bd      	mov	sp, r7
 801028e:	b004      	add	sp, #16
 8010290:	bd80      	pop	{r7, pc}
 8010292:	46c0      	nop			; (mov r8, r8)
 8010294:	20000aa4 	.word	0x20000aa4
 8010298:	20000b90 	.word	0x20000b90
 801029c:	20000bb0 	.word	0x20000bb0
 80102a0:	20000bcc 	.word	0x20000bcc
 80102a4:	20000ba4 	.word	0x20000ba4

080102a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80102b0:	2300      	movs	r3, #0
 80102b2:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <prvTaskIsTaskSuspended+0x1a>
 80102be:	b672      	cpsid	i
 80102c0:	e7fe      	b.n	80102c0 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	695a      	ldr	r2, [r3, #20]
 80102c6:	4b09      	ldr	r3, [pc, #36]	; (80102ec <prvTaskIsTaskSuspended+0x44>)
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d10a      	bne.n	80102e2 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80102d0:	4b07      	ldr	r3, [pc, #28]	; (80102f0 <prvTaskIsTaskSuspended+0x48>)
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d005      	beq.n	80102e2 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 80102de:	2301      	movs	r3, #1
 80102e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102e2:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80102e4:	0018      	movs	r0, r3
 80102e6:	46bd      	mov	sp, r7
 80102e8:	b004      	add	sp, #16
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	20000b90 	.word	0x20000b90
 80102f0:	20000b64 	.word	0x20000b64

080102f4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <vTaskResume+0x16>
 8010306:	b672      	cpsid	i
 8010308:	e7fe      	b.n	8010308 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801030a:	4b1e      	ldr	r3, [pc, #120]	; (8010384 <vTaskResume+0x90>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	429a      	cmp	r2, r3
 8010312:	d032      	beq.n	801037a <vTaskResume+0x86>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d02f      	beq.n	801037a <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 801031a:	f000 fc99 	bl	8010c50 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	0018      	movs	r0, r3
 8010322:	f7ff ffc1 	bl	80102a8 <prvTaskIsTaskSuspended>
 8010326:	1e03      	subs	r3, r0, #0
 8010328:	d025      	beq.n	8010376 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3304      	adds	r3, #4
 801032e:	0018      	movs	r0, r3
 8010330:	f7ff fdd8 	bl	800fee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	4b13      	ldr	r3, [pc, #76]	; (8010388 <vTaskResume+0x94>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d903      	bls.n	8010348 <vTaskResume+0x54>
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010344:	4b10      	ldr	r3, [pc, #64]	; (8010388 <vTaskResume+0x94>)
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034c:	0013      	movs	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	189b      	adds	r3, r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4a0d      	ldr	r2, [pc, #52]	; (801038c <vTaskResume+0x98>)
 8010356:	189a      	adds	r2, r3, r2
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3304      	adds	r3, #4
 801035c:	0019      	movs	r1, r3
 801035e:	0010      	movs	r0, r2
 8010360:	f7ff fd68 	bl	800fe34 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010368:	4b06      	ldr	r3, [pc, #24]	; (8010384 <vTaskResume+0x90>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036e:	429a      	cmp	r2, r3
 8010370:	d301      	bcc.n	8010376 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010372:	f000 fc5d 	bl	8010c30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010376:	f000 fc7d 	bl	8010c74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801037a:	46c0      	nop			; (mov r8, r8)
 801037c:	46bd      	mov	sp, r7
 801037e:	b004      	add	sp, #16
 8010380:	bd80      	pop	{r7, pc}
 8010382:	46c0      	nop			; (mov r8, r8)
 8010384:	20000aa4 	.word	0x20000aa4
 8010388:	20000bac 	.word	0x20000bac
 801038c:	20000aa8 	.word	0x20000aa8

08010390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010396:	4913      	ldr	r1, [pc, #76]	; (80103e4 <vTaskStartScheduler+0x54>)
 8010398:	4813      	ldr	r0, [pc, #76]	; (80103e8 <vTaskStartScheduler+0x58>)
 801039a:	4b14      	ldr	r3, [pc, #80]	; (80103ec <vTaskStartScheduler+0x5c>)
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	2300      	movs	r3, #0
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	2300      	movs	r3, #0
 80103a4:	2280      	movs	r2, #128	; 0x80
 80103a6:	f7ff fdc5 	bl	800ff34 <xTaskCreate>
 80103aa:	0003      	movs	r3, r0
 80103ac:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d10d      	bne.n	80103d0 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80103b4:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80103b6:	4b0e      	ldr	r3, [pc, #56]	; (80103f0 <vTaskStartScheduler+0x60>)
 80103b8:	2201      	movs	r2, #1
 80103ba:	4252      	negs	r2, r2
 80103bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80103be:	4b0d      	ldr	r3, [pc, #52]	; (80103f4 <vTaskStartScheduler+0x64>)
 80103c0:	2201      	movs	r2, #1
 80103c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80103c4:	4b0c      	ldr	r3, [pc, #48]	; (80103f8 <vTaskStartScheduler+0x68>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80103ca:	f000 fc0d 	bl	8010be8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80103ce:	e004      	b.n	80103da <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	3301      	adds	r3, #1
 80103d4:	d101      	bne.n	80103da <vTaskStartScheduler+0x4a>
 80103d6:	b672      	cpsid	i
 80103d8:	e7fe      	b.n	80103d8 <vTaskStartScheduler+0x48>
}
 80103da:	46c0      	nop			; (mov r8, r8)
 80103dc:	46bd      	mov	sp, r7
 80103de:	b002      	add	sp, #8
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	46c0      	nop			; (mov r8, r8)
 80103e4:	08014e18 	.word	0x08014e18
 80103e8:	08010731 	.word	0x08010731
 80103ec:	20000bc8 	.word	0x20000bc8
 80103f0:	20000bc4 	.word	0x20000bc4
 80103f4:	20000bb0 	.word	0x20000bb0
 80103f8:	20000ba8 	.word	0x20000ba8

080103fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010400:	4b03      	ldr	r3, [pc, #12]	; (8010410 <vTaskSuspendAll+0x14>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	1c5a      	adds	r2, r3, #1
 8010406:	4b02      	ldr	r3, [pc, #8]	; (8010410 <vTaskSuspendAll+0x14>)
 8010408:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801040a:	46c0      	nop			; (mov r8, r8)
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}
 8010410:	20000bcc 	.word	0x20000bcc

08010414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801041a:	2300      	movs	r3, #0
 801041c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801041e:	2300      	movs	r3, #0
 8010420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010422:	4b3a      	ldr	r3, [pc, #232]	; (801050c <xTaskResumeAll+0xf8>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <xTaskResumeAll+0x1a>
 801042a:	b672      	cpsid	i
 801042c:	e7fe      	b.n	801042c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801042e:	f000 fc0f 	bl	8010c50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010432:	4b36      	ldr	r3, [pc, #216]	; (801050c <xTaskResumeAll+0xf8>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	1e5a      	subs	r2, r3, #1
 8010438:	4b34      	ldr	r3, [pc, #208]	; (801050c <xTaskResumeAll+0xf8>)
 801043a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801043c:	4b33      	ldr	r3, [pc, #204]	; (801050c <xTaskResumeAll+0xf8>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d15b      	bne.n	80104fc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010444:	4b32      	ldr	r3, [pc, #200]	; (8010510 <xTaskResumeAll+0xfc>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d057      	beq.n	80104fc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801044c:	e02f      	b.n	80104ae <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801044e:	4b31      	ldr	r3, [pc, #196]	; (8010514 <xTaskResumeAll+0x100>)
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	3318      	adds	r3, #24
 801045a:	0018      	movs	r0, r3
 801045c:	f7ff fd42 	bl	800fee4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	3304      	adds	r3, #4
 8010464:	0018      	movs	r0, r3
 8010466:	f7ff fd3d 	bl	800fee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046e:	4b2a      	ldr	r3, [pc, #168]	; (8010518 <xTaskResumeAll+0x104>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	429a      	cmp	r2, r3
 8010474:	d903      	bls.n	801047e <xTaskResumeAll+0x6a>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047a:	4b27      	ldr	r3, [pc, #156]	; (8010518 <xTaskResumeAll+0x104>)
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010482:	0013      	movs	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	189b      	adds	r3, r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4a24      	ldr	r2, [pc, #144]	; (801051c <xTaskResumeAll+0x108>)
 801048c:	189a      	adds	r2, r3, r2
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	3304      	adds	r3, #4
 8010492:	0019      	movs	r1, r3
 8010494:	0010      	movs	r0, r2
 8010496:	f7ff fccd 	bl	800fe34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801049e:	4b20      	ldr	r3, [pc, #128]	; (8010520 <xTaskResumeAll+0x10c>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d302      	bcc.n	80104ae <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80104a8:	4b1e      	ldr	r3, [pc, #120]	; (8010524 <xTaskResumeAll+0x110>)
 80104aa:	2201      	movs	r2, #1
 80104ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80104ae:	4b19      	ldr	r3, [pc, #100]	; (8010514 <xTaskResumeAll+0x100>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1cb      	bne.n	801044e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80104bc:	f000 f9cc 	bl	8010858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80104c0:	4b19      	ldr	r3, [pc, #100]	; (8010528 <xTaskResumeAll+0x114>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00f      	beq.n	80104ec <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80104cc:	f000 f82e 	bl	801052c <xTaskIncrementTick>
 80104d0:	1e03      	subs	r3, r0, #0
 80104d2:	d002      	beq.n	80104da <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80104d4:	4b13      	ldr	r3, [pc, #76]	; (8010524 <xTaskResumeAll+0x110>)
 80104d6:	2201      	movs	r2, #1
 80104d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3b01      	subs	r3, #1
 80104de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1f2      	bne.n	80104cc <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80104e6:	4b10      	ldr	r3, [pc, #64]	; (8010528 <xTaskResumeAll+0x114>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80104ec:	4b0d      	ldr	r3, [pc, #52]	; (8010524 <xTaskResumeAll+0x110>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d003      	beq.n	80104fc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80104f4:	2301      	movs	r3, #1
 80104f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80104f8:	f000 fb9a 	bl	8010c30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104fc:	f000 fbba 	bl	8010c74 <vPortExitCritical>

	return xAlreadyYielded;
 8010500:	68bb      	ldr	r3, [r7, #8]
}
 8010502:	0018      	movs	r0, r3
 8010504:	46bd      	mov	sp, r7
 8010506:	b004      	add	sp, #16
 8010508:	bd80      	pop	{r7, pc}
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	20000bcc 	.word	0x20000bcc
 8010510:	20000ba4 	.word	0x20000ba4
 8010514:	20000b64 	.word	0x20000b64
 8010518:	20000bac 	.word	0x20000bac
 801051c:	20000aa8 	.word	0x20000aa8
 8010520:	20000aa4 	.word	0x20000aa4
 8010524:	20000bb8 	.word	0x20000bb8
 8010528:	20000bb4 	.word	0x20000bb4

0801052c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b086      	sub	sp, #24
 8010530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010536:	4b4a      	ldr	r3, [pc, #296]	; (8010660 <xTaskIncrementTick+0x134>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d000      	beq.n	8010540 <xTaskIncrementTick+0x14>
 801053e:	e084      	b.n	801064a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010540:	4b48      	ldr	r3, [pc, #288]	; (8010664 <xTaskIncrementTick+0x138>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3301      	adds	r3, #1
 8010546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010548:	4b46      	ldr	r3, [pc, #280]	; (8010664 <xTaskIncrementTick+0x138>)
 801054a:	693a      	ldr	r2, [r7, #16]
 801054c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d117      	bne.n	8010584 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8010554:	4b44      	ldr	r3, [pc, #272]	; (8010668 <xTaskIncrementTick+0x13c>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d001      	beq.n	8010562 <xTaskIncrementTick+0x36>
 801055e:	b672      	cpsid	i
 8010560:	e7fe      	b.n	8010560 <xTaskIncrementTick+0x34>
 8010562:	4b41      	ldr	r3, [pc, #260]	; (8010668 <xTaskIncrementTick+0x13c>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	4b40      	ldr	r3, [pc, #256]	; (801066c <xTaskIncrementTick+0x140>)
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	4b3e      	ldr	r3, [pc, #248]	; (8010668 <xTaskIncrementTick+0x13c>)
 801056e:	601a      	str	r2, [r3, #0]
 8010570:	4b3e      	ldr	r3, [pc, #248]	; (801066c <xTaskIncrementTick+0x140>)
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	4b3e      	ldr	r3, [pc, #248]	; (8010670 <xTaskIncrementTick+0x144>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	4b3c      	ldr	r3, [pc, #240]	; (8010670 <xTaskIncrementTick+0x144>)
 801057e:	601a      	str	r2, [r3, #0]
 8010580:	f000 f96a 	bl	8010858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010584:	4b3b      	ldr	r3, [pc, #236]	; (8010674 <xTaskIncrementTick+0x148>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	693a      	ldr	r2, [r7, #16]
 801058a:	429a      	cmp	r2, r3
 801058c:	d349      	bcc.n	8010622 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801058e:	4b36      	ldr	r3, [pc, #216]	; (8010668 <xTaskIncrementTick+0x13c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d104      	bne.n	80105a2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010598:	4b36      	ldr	r3, [pc, #216]	; (8010674 <xTaskIncrementTick+0x148>)
 801059a:	2201      	movs	r2, #1
 801059c:	4252      	negs	r2, r2
 801059e:	601a      	str	r2, [r3, #0]
					break;
 80105a0:	e03f      	b.n	8010622 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105a2:	4b31      	ldr	r3, [pc, #196]	; (8010668 <xTaskIncrementTick+0x13c>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d203      	bcs.n	80105c2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80105ba:	4b2e      	ldr	r3, [pc, #184]	; (8010674 <xTaskIncrementTick+0x148>)
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80105c0:	e02f      	b.n	8010622 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	3304      	adds	r3, #4
 80105c6:	0018      	movs	r0, r3
 80105c8:	f7ff fc8c 	bl	800fee4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d004      	beq.n	80105de <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3318      	adds	r3, #24
 80105d8:	0018      	movs	r0, r3
 80105da:	f7ff fc83 	bl	800fee4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e2:	4b25      	ldr	r3, [pc, #148]	; (8010678 <xTaskIncrementTick+0x14c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d903      	bls.n	80105f2 <xTaskIncrementTick+0xc6>
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ee:	4b22      	ldr	r3, [pc, #136]	; (8010678 <xTaskIncrementTick+0x14c>)
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105f6:	0013      	movs	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	189b      	adds	r3, r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4a1f      	ldr	r2, [pc, #124]	; (801067c <xTaskIncrementTick+0x150>)
 8010600:	189a      	adds	r2, r3, r2
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	3304      	adds	r3, #4
 8010606:	0019      	movs	r1, r3
 8010608:	0010      	movs	r0, r2
 801060a:	f7ff fc13 	bl	800fe34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010612:	4b1b      	ldr	r3, [pc, #108]	; (8010680 <xTaskIncrementTick+0x154>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010618:	429a      	cmp	r2, r3
 801061a:	d3b8      	bcc.n	801058e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 801061c:	2301      	movs	r3, #1
 801061e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010620:	e7b5      	b.n	801058e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010622:	4b17      	ldr	r3, [pc, #92]	; (8010680 <xTaskIncrementTick+0x154>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010628:	4914      	ldr	r1, [pc, #80]	; (801067c <xTaskIncrementTick+0x150>)
 801062a:	0013      	movs	r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	189b      	adds	r3, r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	585b      	ldr	r3, [r3, r1]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d901      	bls.n	801063c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8010638:	2301      	movs	r3, #1
 801063a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801063c:	4b11      	ldr	r3, [pc, #68]	; (8010684 <xTaskIncrementTick+0x158>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d007      	beq.n	8010654 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8010644:	2301      	movs	r3, #1
 8010646:	617b      	str	r3, [r7, #20]
 8010648:	e004      	b.n	8010654 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801064a:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <xTaskIncrementTick+0x15c>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	4b0d      	ldr	r3, [pc, #52]	; (8010688 <xTaskIncrementTick+0x15c>)
 8010652:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010654:	697b      	ldr	r3, [r7, #20]
}
 8010656:	0018      	movs	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	b006      	add	sp, #24
 801065c:	bd80      	pop	{r7, pc}
 801065e:	46c0      	nop			; (mov r8, r8)
 8010660:	20000bcc 	.word	0x20000bcc
 8010664:	20000ba8 	.word	0x20000ba8
 8010668:	20000b5c 	.word	0x20000b5c
 801066c:	20000b60 	.word	0x20000b60
 8010670:	20000bbc 	.word	0x20000bbc
 8010674:	20000bc4 	.word	0x20000bc4
 8010678:	20000bac 	.word	0x20000bac
 801067c:	20000aa8 	.word	0x20000aa8
 8010680:	20000aa4 	.word	0x20000aa4
 8010684:	20000bb8 	.word	0x20000bb8
 8010688:	20000bb4 	.word	0x20000bb4

0801068c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010692:	4b22      	ldr	r3, [pc, #136]	; (801071c <vTaskSwitchContext+0x90>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d003      	beq.n	80106a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801069a:	4b21      	ldr	r3, [pc, #132]	; (8010720 <vTaskSwitchContext+0x94>)
 801069c:	2201      	movs	r2, #1
 801069e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80106a0:	e037      	b.n	8010712 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80106a2:	4b1f      	ldr	r3, [pc, #124]	; (8010720 <vTaskSwitchContext+0x94>)
 80106a4:	2200      	movs	r2, #0
 80106a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106a8:	4b1e      	ldr	r3, [pc, #120]	; (8010724 <vTaskSwitchContext+0x98>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	607b      	str	r3, [r7, #4]
 80106ae:	e007      	b.n	80106c0 <vTaskSwitchContext+0x34>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <vTaskSwitchContext+0x2e>
 80106b6:	b672      	cpsid	i
 80106b8:	e7fe      	b.n	80106b8 <vTaskSwitchContext+0x2c>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	3b01      	subs	r3, #1
 80106be:	607b      	str	r3, [r7, #4]
 80106c0:	4919      	ldr	r1, [pc, #100]	; (8010728 <vTaskSwitchContext+0x9c>)
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	0013      	movs	r3, r2
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	189b      	adds	r3, r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	585b      	ldr	r3, [r3, r1]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d0ee      	beq.n	80106b0 <vTaskSwitchContext+0x24>
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	0013      	movs	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	189b      	adds	r3, r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	4a12      	ldr	r2, [pc, #72]	; (8010728 <vTaskSwitchContext+0x9c>)
 80106de:	189b      	adds	r3, r3, r2
 80106e0:	603b      	str	r3, [r7, #0]
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	605a      	str	r2, [r3, #4]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	3308      	adds	r3, #8
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d104      	bne.n	8010702 <vTaskSwitchContext+0x76>
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	605a      	str	r2, [r3, #4]
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	68da      	ldr	r2, [r3, #12]
 8010708:	4b08      	ldr	r3, [pc, #32]	; (801072c <vTaskSwitchContext+0xa0>)
 801070a:	601a      	str	r2, [r3, #0]
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <vTaskSwitchContext+0x98>)
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	601a      	str	r2, [r3, #0]
}
 8010712:	46c0      	nop			; (mov r8, r8)
 8010714:	46bd      	mov	sp, r7
 8010716:	b002      	add	sp, #8
 8010718:	bd80      	pop	{r7, pc}
 801071a:	46c0      	nop			; (mov r8, r8)
 801071c:	20000bcc 	.word	0x20000bcc
 8010720:	20000bb8 	.word	0x20000bb8
 8010724:	20000bac 	.word	0x20000bac
 8010728:	20000aa8 	.word	0x20000aa8
 801072c:	20000aa4 	.word	0x20000aa4

08010730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010738:	f000 f84e 	bl	80107d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801073c:	4b03      	ldr	r3, [pc, #12]	; (801074c <prvIdleTask+0x1c>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d9f9      	bls.n	8010738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010744:	f000 fa74 	bl	8010c30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010748:	e7f6      	b.n	8010738 <prvIdleTask+0x8>
 801074a:	46c0      	nop			; (mov r8, r8)
 801074c:	20000aa8 	.word	0x20000aa8

08010750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010756:	2300      	movs	r3, #0
 8010758:	607b      	str	r3, [r7, #4]
 801075a:	e00c      	b.n	8010776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	0013      	movs	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	189b      	adds	r3, r3, r2
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4a14      	ldr	r2, [pc, #80]	; (80107b8 <prvInitialiseTaskLists+0x68>)
 8010768:	189b      	adds	r3, r3, r2
 801076a:	0018      	movs	r0, r3
 801076c:	f7ff fb39 	bl	800fde2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3301      	adds	r3, #1
 8010774:	607b      	str	r3, [r7, #4]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b06      	cmp	r3, #6
 801077a:	d9ef      	bls.n	801075c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <prvInitialiseTaskLists+0x6c>)
 801077e:	0018      	movs	r0, r3
 8010780:	f7ff fb2f 	bl	800fde2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010784:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <prvInitialiseTaskLists+0x70>)
 8010786:	0018      	movs	r0, r3
 8010788:	f7ff fb2b 	bl	800fde2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801078c:	4b0d      	ldr	r3, [pc, #52]	; (80107c4 <prvInitialiseTaskLists+0x74>)
 801078e:	0018      	movs	r0, r3
 8010790:	f7ff fb27 	bl	800fde2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010794:	4b0c      	ldr	r3, [pc, #48]	; (80107c8 <prvInitialiseTaskLists+0x78>)
 8010796:	0018      	movs	r0, r3
 8010798:	f7ff fb23 	bl	800fde2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801079c:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <prvInitialiseTaskLists+0x7c>)
 801079e:	0018      	movs	r0, r3
 80107a0:	f7ff fb1f 	bl	800fde2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107a4:	4b0a      	ldr	r3, [pc, #40]	; (80107d0 <prvInitialiseTaskLists+0x80>)
 80107a6:	4a05      	ldr	r2, [pc, #20]	; (80107bc <prvInitialiseTaskLists+0x6c>)
 80107a8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107aa:	4b0a      	ldr	r3, [pc, #40]	; (80107d4 <prvInitialiseTaskLists+0x84>)
 80107ac:	4a04      	ldr	r2, [pc, #16]	; (80107c0 <prvInitialiseTaskLists+0x70>)
 80107ae:	601a      	str	r2, [r3, #0]
}
 80107b0:	46c0      	nop			; (mov r8, r8)
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b002      	add	sp, #8
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	20000aa8 	.word	0x20000aa8
 80107bc:	20000b34 	.word	0x20000b34
 80107c0:	20000b48 	.word	0x20000b48
 80107c4:	20000b64 	.word	0x20000b64
 80107c8:	20000b78 	.word	0x20000b78
 80107cc:	20000b90 	.word	0x20000b90
 80107d0:	20000b5c 	.word	0x20000b5c
 80107d4:	20000b60 	.word	0x20000b60

080107d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80107de:	e01a      	b.n	8010816 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80107e0:	f000 fa36 	bl	8010c50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107e4:	4b10      	ldr	r3, [pc, #64]	; (8010828 <prvCheckTasksWaitingTermination+0x50>)
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	3304      	adds	r3, #4
 80107f0:	0018      	movs	r0, r3
 80107f2:	f7ff fb77 	bl	800fee4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80107f6:	4b0d      	ldr	r3, [pc, #52]	; (801082c <prvCheckTasksWaitingTermination+0x54>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	1e5a      	subs	r2, r3, #1
 80107fc:	4b0b      	ldr	r3, [pc, #44]	; (801082c <prvCheckTasksWaitingTermination+0x54>)
 80107fe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010800:	4b0b      	ldr	r3, [pc, #44]	; (8010830 <prvCheckTasksWaitingTermination+0x58>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <prvCheckTasksWaitingTermination+0x58>)
 8010808:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 801080a:	f000 fa33 	bl	8010c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	0018      	movs	r0, r3
 8010812:	f000 f80f 	bl	8010834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010816:	4b06      	ldr	r3, [pc, #24]	; (8010830 <prvCheckTasksWaitingTermination+0x58>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1e0      	bne.n	80107e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	46c0      	nop			; (mov r8, r8)
 8010822:	46bd      	mov	sp, r7
 8010824:	b002      	add	sp, #8
 8010826:	bd80      	pop	{r7, pc}
 8010828:	20000b78 	.word	0x20000b78
 801082c:	20000ba4 	.word	0x20000ba4
 8010830:	20000b8c 	.word	0x20000b8c

08010834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010840:	0018      	movs	r0, r3
 8010842:	f000 fb49 	bl	8010ed8 <vPortFree>
			vPortFree( pxTCB );
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	0018      	movs	r0, r3
 801084a:	f000 fb45 	bl	8010ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801084e:	46c0      	nop			; (mov r8, r8)
 8010850:	46bd      	mov	sp, r7
 8010852:	b002      	add	sp, #8
 8010854:	bd80      	pop	{r7, pc}
	...

08010858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801085e:	4b0b      	ldr	r3, [pc, #44]	; (801088c <prvResetNextTaskUnblockTime+0x34>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d104      	bne.n	8010872 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010868:	4b09      	ldr	r3, [pc, #36]	; (8010890 <prvResetNextTaskUnblockTime+0x38>)
 801086a:	2201      	movs	r2, #1
 801086c:	4252      	negs	r2, r2
 801086e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010870:	e008      	b.n	8010884 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010872:	4b06      	ldr	r3, [pc, #24]	; (801088c <prvResetNextTaskUnblockTime+0x34>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	68db      	ldr	r3, [r3, #12]
 801087a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685a      	ldr	r2, [r3, #4]
 8010880:	4b03      	ldr	r3, [pc, #12]	; (8010890 <prvResetNextTaskUnblockTime+0x38>)
 8010882:	601a      	str	r2, [r3, #0]
}
 8010884:	46c0      	nop			; (mov r8, r8)
 8010886:	46bd      	mov	sp, r7
 8010888:	b002      	add	sp, #8
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20000b5c 	.word	0x20000b5c
 8010890:	20000bc4 	.word	0x20000bc4

08010894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801089a:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <xTaskGetSchedulerState+0x30>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d102      	bne.n	80108a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80108a2:	2301      	movs	r3, #1
 80108a4:	607b      	str	r3, [r7, #4]
 80108a6:	e008      	b.n	80108ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108a8:	4b07      	ldr	r3, [pc, #28]	; (80108c8 <xTaskGetSchedulerState+0x34>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80108b0:	2302      	movs	r3, #2
 80108b2:	607b      	str	r3, [r7, #4]
 80108b4:	e001      	b.n	80108ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80108b6:	2300      	movs	r3, #0
 80108b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80108ba:	687b      	ldr	r3, [r7, #4]
	}
 80108bc:	0018      	movs	r0, r3
 80108be:	46bd      	mov	sp, r7
 80108c0:	b002      	add	sp, #8
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	20000bb0 	.word	0x20000bb0
 80108c8:	20000bcc 	.word	0x20000bcc

080108cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80108d6:	f000 f9bb 	bl	8010c50 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80108da:	4b1c      	ldr	r3, [pc, #112]	; (801094c <ulTaskNotifyTake+0x80>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10e      	bne.n	8010902 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80108e4:	4b19      	ldr	r3, [pc, #100]	; (801094c <ulTaskNotifyTake+0x80>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2250      	movs	r2, #80	; 0x50
 80108ea:	2101      	movs	r1, #1
 80108ec:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d006      	beq.n	8010902 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2101      	movs	r1, #1
 80108f8:	0018      	movs	r0, r3
 80108fa:	f000 f8bd 	bl	8010a78 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80108fe:	f000 f997 	bl	8010c30 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010902:	f000 f9b7 	bl	8010c74 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010906:	f000 f9a3 	bl	8010c50 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <ulTaskNotifyTake+0x80>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010910:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00c      	beq.n	8010932 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801091e:	4b0b      	ldr	r3, [pc, #44]	; (801094c <ulTaskNotifyTake+0x80>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2200      	movs	r2, #0
 8010924:	64da      	str	r2, [r3, #76]	; 0x4c
 8010926:	e004      	b.n	8010932 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010928:	4b08      	ldr	r3, [pc, #32]	; (801094c <ulTaskNotifyTake+0x80>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	3a01      	subs	r2, #1
 8010930:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010932:	4b06      	ldr	r3, [pc, #24]	; (801094c <ulTaskNotifyTake+0x80>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2250      	movs	r2, #80	; 0x50
 8010938:	2100      	movs	r1, #0
 801093a:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 801093c:	f000 f99a 	bl	8010c74 <vPortExitCritical>

		return ulReturn;
 8010940:	68fb      	ldr	r3, [r7, #12]
	}
 8010942:	0018      	movs	r0, r3
 8010944:	46bd      	mov	sp, r7
 8010946:	b004      	add	sp, #16
 8010948:	bd80      	pop	{r7, pc}
 801094a:	46c0      	nop			; (mov r8, r8)
 801094c:	20000aa4 	.word	0x20000aa4

08010950 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	603b      	str	r3, [r7, #0]
 801095c:	1dfb      	adds	r3, r7, #7
 801095e:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010960:	2301      	movs	r3, #1
 8010962:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d101      	bne.n	801096e <xTaskGenericNotify+0x1e>
 801096a:	b672      	cpsid	i
 801096c:	e7fe      	b.n	801096c <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8010972:	f000 f96d 	bl	8010c50 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d003      	beq.n	8010984 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010984:	2317      	movs	r3, #23
 8010986:	18fb      	adds	r3, r7, r3
 8010988:	69ba      	ldr	r2, [r7, #24]
 801098a:	2150      	movs	r1, #80	; 0x50
 801098c:	5c52      	ldrb	r2, [r2, r1]
 801098e:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	2250      	movs	r2, #80	; 0x50
 8010994:	2102      	movs	r1, #2
 8010996:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8010998:	1dfb      	adds	r3, r7, #7
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	2b04      	cmp	r3, #4
 801099e:	d821      	bhi.n	80109e4 <xTaskGenericNotify+0x94>
 80109a0:	009a      	lsls	r2, r3, #2
 80109a2:	4b31      	ldr	r3, [pc, #196]	; (8010a68 <xTaskGenericNotify+0x118>)
 80109a4:	18d3      	adds	r3, r2, r3
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	431a      	orrs	r2, r3
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80109b6:	e01e      	b.n	80109f6 <xTaskGenericNotify+0xa6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80109c2:	e018      	b.n	80109f6 <xTaskGenericNotify+0xa6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80109c4:	69bb      	ldr	r3, [r7, #24]
 80109c6:	68ba      	ldr	r2, [r7, #8]
 80109c8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80109ca:	e014      	b.n	80109f6 <xTaskGenericNotify+0xa6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80109cc:	2317      	movs	r3, #23
 80109ce:	18fb      	adds	r3, r7, r3
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b02      	cmp	r3, #2
 80109d4:	d003      	beq.n	80109de <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80109dc:	e00b      	b.n	80109f6 <xTaskGenericNotify+0xa6>
						xReturn = pdFAIL;
 80109de:	2300      	movs	r3, #0
 80109e0:	61fb      	str	r3, [r7, #28]
					break;
 80109e2:	e008      	b.n	80109f6 <xTaskGenericNotify+0xa6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109e8:	3301      	adds	r3, #1
 80109ea:	d003      	beq.n	80109f4 <xTaskGenericNotify+0xa4>
 80109ec:	b672      	cpsid	i
 80109ee:	e7fe      	b.n	80109ee <xTaskGenericNotify+0x9e>
					break;
 80109f0:	46c0      	nop			; (mov r8, r8)
 80109f2:	e000      	b.n	80109f6 <xTaskGenericNotify+0xa6>

					break;
 80109f4:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80109f6:	2317      	movs	r3, #23
 80109f8:	18fb      	adds	r3, r7, r3
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d12b      	bne.n	8010a58 <xTaskGenericNotify+0x108>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	3304      	adds	r3, #4
 8010a04:	0018      	movs	r0, r3
 8010a06:	f7ff fa6d 	bl	800fee4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a0e:	4b17      	ldr	r3, [pc, #92]	; (8010a6c <xTaskGenericNotify+0x11c>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d903      	bls.n	8010a1e <xTaskGenericNotify+0xce>
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a1a:	4b14      	ldr	r3, [pc, #80]	; (8010a6c <xTaskGenericNotify+0x11c>)
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a22:	0013      	movs	r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	189b      	adds	r3, r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4a11      	ldr	r2, [pc, #68]	; (8010a70 <xTaskGenericNotify+0x120>)
 8010a2c:	189a      	adds	r2, r3, r2
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	3304      	adds	r3, #4
 8010a32:	0019      	movs	r1, r3
 8010a34:	0010      	movs	r0, r2
 8010a36:	f7ff f9fd 	bl	800fe34 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d001      	beq.n	8010a46 <xTaskGenericNotify+0xf6>
 8010a42:	b672      	cpsid	i
 8010a44:	e7fe      	b.n	8010a44 <xTaskGenericNotify+0xf4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <xTaskGenericNotify+0x124>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d901      	bls.n	8010a58 <xTaskGenericNotify+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010a54:	f000 f8ec 	bl	8010c30 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010a58:	f000 f90c 	bl	8010c74 <vPortExitCritical>

		return xReturn;
 8010a5c:	69fb      	ldr	r3, [r7, #28]
	}
 8010a5e:	0018      	movs	r0, r3
 8010a60:	46bd      	mov	sp, r7
 8010a62:	b008      	add	sp, #32
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	46c0      	nop			; (mov r8, r8)
 8010a68:	0801508c 	.word	0x0801508c
 8010a6c:	20000bac 	.word	0x20000bac
 8010a70:	20000aa8 	.word	0x20000aa8
 8010a74:	20000aa4 	.word	0x20000aa4

08010a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b084      	sub	sp, #16
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a82:	4b21      	ldr	r3, [pc, #132]	; (8010b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a88:	4b20      	ldr	r3, [pc, #128]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	3304      	adds	r3, #4
 8010a8e:	0018      	movs	r0, r3
 8010a90:	f7ff fa28 	bl	800fee4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3301      	adds	r3, #1
 8010a98:	d10b      	bne.n	8010ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d008      	beq.n	8010ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aa0:	4b1a      	ldr	r3, [pc, #104]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	1d1a      	adds	r2, r3, #4
 8010aa6:	4b1a      	ldr	r3, [pc, #104]	; (8010b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8010aa8:	0011      	movs	r1, r2
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f7ff f9c2 	bl	800fe34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ab0:	e026      	b.n	8010b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ab2:	68fa      	ldr	r2, [r7, #12]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	18d3      	adds	r3, r2, r3
 8010ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010aba:	4b14      	ldr	r3, [pc, #80]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ac2:	68ba      	ldr	r2, [r7, #8]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d209      	bcs.n	8010ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aca:	4b12      	ldr	r3, [pc, #72]	; (8010b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	4b0f      	ldr	r3, [pc, #60]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	0019      	movs	r1, r3
 8010ad6:	0010      	movs	r0, r2
 8010ad8:	f7ff f9ce 	bl	800fe78 <vListInsert>
}
 8010adc:	e010      	b.n	8010b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	4b0a      	ldr	r3, [pc, #40]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	0019      	movs	r1, r3
 8010aea:	0010      	movs	r0, r2
 8010aec:	f7ff f9c4 	bl	800fe78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010af0:	4b0a      	ldr	r3, [pc, #40]	; (8010b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d202      	bcs.n	8010b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010afa:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010afc:	68ba      	ldr	r2, [r7, #8]
 8010afe:	601a      	str	r2, [r3, #0]
}
 8010b00:	46c0      	nop			; (mov r8, r8)
 8010b02:	46bd      	mov	sp, r7
 8010b04:	b004      	add	sp, #16
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20000ba8 	.word	0x20000ba8
 8010b0c:	20000aa4 	.word	0x20000aa4
 8010b10:	20000b90 	.word	0x20000b90
 8010b14:	20000b60 	.word	0x20000b60
 8010b18:	20000b5c 	.word	0x20000b5c
 8010b1c:	20000bc4 	.word	0x20000bc4

08010b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	3b04      	subs	r3, #4
 8010b30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2280      	movs	r2, #128	; 0x80
 8010b36:	0452      	lsls	r2, r2, #17
 8010b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	3b04      	subs	r3, #4
 8010b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	3b04      	subs	r3, #4
 8010b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010b4c:	4a08      	ldr	r2, [pc, #32]	; (8010b70 <pxPortInitialiseStack+0x50>)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	3b14      	subs	r3, #20
 8010b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	3b20      	subs	r3, #32
 8010b62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b64:	68fb      	ldr	r3, [r7, #12]
}
 8010b66:	0018      	movs	r0, r3
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	b004      	add	sp, #16
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	46c0      	nop			; (mov r8, r8)
 8010b70:	08010b75 	.word	0x08010b75

08010b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b7e:	4b08      	ldr	r3, [pc, #32]	; (8010ba0 <prvTaskExitError+0x2c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	3301      	adds	r3, #1
 8010b84:	d001      	beq.n	8010b8a <prvTaskExitError+0x16>
 8010b86:	b672      	cpsid	i
 8010b88:	e7fe      	b.n	8010b88 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8010b8a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8010b8c:	46c0      	nop			; (mov r8, r8)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0fc      	beq.n	8010b8e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b94:	46c0      	nop			; (mov r8, r8)
 8010b96:	46c0      	nop			; (mov r8, r8)
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	b002      	add	sp, #8
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	46c0      	nop			; (mov r8, r8)
 8010ba0:	200002c8 	.word	0x200002c8

08010ba4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010ba8:	46c0      	nop			; (mov r8, r8)
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010bb0:	4a0b      	ldr	r2, [pc, #44]	; (8010be0 <pxCurrentTCBConst2>)
 8010bb2:	6813      	ldr	r3, [r2, #0]
 8010bb4:	6818      	ldr	r0, [r3, #0]
 8010bb6:	3020      	adds	r0, #32
 8010bb8:	f380 8809 	msr	PSP, r0
 8010bbc:	2002      	movs	r0, #2
 8010bbe:	f380 8814 	msr	CONTROL, r0
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010bc8:	46ae      	mov	lr, r5
 8010bca:	bc08      	pop	{r3}
 8010bcc:	bc04      	pop	{r2}
 8010bce:	b662      	cpsie	i
 8010bd0:	4718      	bx	r3
 8010bd2:	46c0      	nop			; (mov r8, r8)
 8010bd4:	46c0      	nop			; (mov r8, r8)
 8010bd6:	46c0      	nop			; (mov r8, r8)
 8010bd8:	46c0      	nop			; (mov r8, r8)
 8010bda:	46c0      	nop			; (mov r8, r8)
 8010bdc:	46c0      	nop			; (mov r8, r8)
 8010bde:	46c0      	nop			; (mov r8, r8)

08010be0 <pxCurrentTCBConst2>:
 8010be0:	20000aa4 	.word	0x20000aa4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8010be4:	46c0      	nop			; (mov r8, r8)
 8010be6:	46c0      	nop			; (mov r8, r8)

08010be8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010bec:	4b0e      	ldr	r3, [pc, #56]	; (8010c28 <xPortStartScheduler+0x40>)
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	4b0d      	ldr	r3, [pc, #52]	; (8010c28 <xPortStartScheduler+0x40>)
 8010bf2:	21ff      	movs	r1, #255	; 0xff
 8010bf4:	0409      	lsls	r1, r1, #16
 8010bf6:	430a      	orrs	r2, r1
 8010bf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010bfa:	4b0b      	ldr	r3, [pc, #44]	; (8010c28 <xPortStartScheduler+0x40>)
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	4b0a      	ldr	r3, [pc, #40]	; (8010c28 <xPortStartScheduler+0x40>)
 8010c00:	21ff      	movs	r1, #255	; 0xff
 8010c02:	0609      	lsls	r1, r1, #24
 8010c04:	430a      	orrs	r2, r1
 8010c06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c08:	f000 f898 	bl	8010d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c0c:	4b07      	ldr	r3, [pc, #28]	; (8010c2c <xPortStartScheduler+0x44>)
 8010c0e:	2200      	movs	r2, #0
 8010c10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8010c12:	f7ff ffcd 	bl	8010bb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c16:	f7ff fd39 	bl	801068c <vTaskSwitchContext>
	prvTaskExitError();
 8010c1a:	f7ff ffab 	bl	8010b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010c1e:	2300      	movs	r3, #0
}
 8010c20:	0018      	movs	r0, r3
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	46c0      	nop			; (mov r8, r8)
 8010c28:	e000ed20 	.word	0xe000ed20
 8010c2c:	200002c8 	.word	0x200002c8

08010c30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c34:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <vPortYield+0x1c>)
 8010c36:	2280      	movs	r2, #128	; 0x80
 8010c38:	0552      	lsls	r2, r2, #21
 8010c3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8010c3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010c40:	f3bf 8f6f 	isb	sy
}
 8010c44:	46c0      	nop			; (mov r8, r8)
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	46c0      	nop			; (mov r8, r8)
 8010c4c:	e000ed04 	.word	0xe000ed04

08010c50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8010c54:	b672      	cpsid	i
	uxCriticalNesting++;
 8010c56:	4b06      	ldr	r3, [pc, #24]	; (8010c70 <vPortEnterCritical+0x20>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	1c5a      	adds	r2, r3, #1
 8010c5c:	4b04      	ldr	r3, [pc, #16]	; (8010c70 <vPortEnterCritical+0x20>)
 8010c5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010c60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010c64:	f3bf 8f6f 	isb	sy
}
 8010c68:	46c0      	nop			; (mov r8, r8)
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	46c0      	nop			; (mov r8, r8)
 8010c70:	200002c8 	.word	0x200002c8

08010c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c78:	4b09      	ldr	r3, [pc, #36]	; (8010ca0 <vPortExitCritical+0x2c>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <vPortExitCritical+0x10>
 8010c80:	b672      	cpsid	i
 8010c82:	e7fe      	b.n	8010c82 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8010c84:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <vPortExitCritical+0x2c>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	1e5a      	subs	r2, r3, #1
 8010c8a:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <vPortExitCritical+0x2c>)
 8010c8c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010c8e:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <vPortExitCritical+0x2c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d100      	bne.n	8010c98 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8010c96:	b662      	cpsie	i
	}
}
 8010c98:	46c0      	nop			; (mov r8, r8)
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	46c0      	nop			; (mov r8, r8)
 8010ca0:	200002c8 	.word	0x200002c8

08010ca4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010ca4:	f3ef 8010 	mrs	r0, PRIMASK
 8010ca8:	b672      	cpsid	i
 8010caa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010cac:	46c0      	nop			; (mov r8, r8)
 8010cae:	0018      	movs	r0, r3

08010cb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010cb0:	f380 8810 	msr	PRIMASK, r0
 8010cb4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010cb6:	46c0      	nop			; (mov r8, r8)
	...

08010cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010cc0:	f3ef 8009 	mrs	r0, PSP
 8010cc4:	4b0e      	ldr	r3, [pc, #56]	; (8010d00 <pxCurrentTCBConst>)
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	3820      	subs	r0, #32
 8010cca:	6010      	str	r0, [r2, #0]
 8010ccc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010cce:	4644      	mov	r4, r8
 8010cd0:	464d      	mov	r5, r9
 8010cd2:	4656      	mov	r6, sl
 8010cd4:	465f      	mov	r7, fp
 8010cd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010cd8:	b508      	push	{r3, lr}
 8010cda:	b672      	cpsid	i
 8010cdc:	f7ff fcd6 	bl	801068c <vTaskSwitchContext>
 8010ce0:	b662      	cpsie	i
 8010ce2:	bc0c      	pop	{r2, r3}
 8010ce4:	6811      	ldr	r1, [r2, #0]
 8010ce6:	6808      	ldr	r0, [r1, #0]
 8010ce8:	3010      	adds	r0, #16
 8010cea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010cec:	46a0      	mov	r8, r4
 8010cee:	46a9      	mov	r9, r5
 8010cf0:	46b2      	mov	sl, r6
 8010cf2:	46bb      	mov	fp, r7
 8010cf4:	f380 8809 	msr	PSP, r0
 8010cf8:	3820      	subs	r0, #32
 8010cfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010cfc:	4718      	bx	r3
 8010cfe:	46c0      	nop			; (mov r8, r8)

08010d00 <pxCurrentTCBConst>:
 8010d00:	20000aa4 	.word	0x20000aa4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8010d04:	46c0      	nop			; (mov r8, r8)
 8010d06:	46c0      	nop			; (mov r8, r8)

08010d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d0e:	f7ff ffc9 	bl	8010ca4 <ulSetInterruptMaskFromISR>
 8010d12:	0003      	movs	r3, r0
 8010d14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d16:	f7ff fc09 	bl	801052c <xTaskIncrementTick>
 8010d1a:	1e03      	subs	r3, r0, #0
 8010d1c:	d003      	beq.n	8010d26 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d1e:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <xPortSysTickHandler+0x30>)
 8010d20:	2280      	movs	r2, #128	; 0x80
 8010d22:	0552      	lsls	r2, r2, #21
 8010d24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	0018      	movs	r0, r3
 8010d2a:	f7ff ffc1 	bl	8010cb0 <vClearInterruptMaskFromISR>
}
 8010d2e:	46c0      	nop			; (mov r8, r8)
 8010d30:	46bd      	mov	sp, r7
 8010d32:	b002      	add	sp, #8
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	46c0      	nop			; (mov r8, r8)
 8010d38:	e000ed04 	.word	0xe000ed04

08010d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d40:	4b0b      	ldr	r3, [pc, #44]	; (8010d70 <vPortSetupTimerInterrupt+0x34>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d46:	4b0b      	ldr	r3, [pc, #44]	; (8010d74 <vPortSetupTimerInterrupt+0x38>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d4c:	4b0a      	ldr	r3, [pc, #40]	; (8010d78 <vPortSetupTimerInterrupt+0x3c>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	22fa      	movs	r2, #250	; 0xfa
 8010d52:	0091      	lsls	r1, r2, #2
 8010d54:	0018      	movs	r0, r3
 8010d56:	f7ef f9f3 	bl	8000140 <__udivsi3>
 8010d5a:	0003      	movs	r3, r0
 8010d5c:	001a      	movs	r2, r3
 8010d5e:	4b07      	ldr	r3, [pc, #28]	; (8010d7c <vPortSetupTimerInterrupt+0x40>)
 8010d60:	3a01      	subs	r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010d64:	4b02      	ldr	r3, [pc, #8]	; (8010d70 <vPortSetupTimerInterrupt+0x34>)
 8010d66:	2207      	movs	r2, #7
 8010d68:	601a      	str	r2, [r3, #0]
}
 8010d6a:	46c0      	nop			; (mov r8, r8)
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	e000e010 	.word	0xe000e010
 8010d74:	e000e018 	.word	0xe000e018
 8010d78:	20000000 	.word	0x20000000
 8010d7c:	e000e014 	.word	0xe000e014

08010d80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010d8c:	f7ff fb36 	bl	80103fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d90:	4b4b      	ldr	r3, [pc, #300]	; (8010ec0 <pvPortMalloc+0x140>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d101      	bne.n	8010d9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d98:	f000 f8ec 	bl	8010f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d9c:	4b49      	ldr	r3, [pc, #292]	; (8010ec4 <pvPortMalloc+0x144>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	4013      	ands	r3, r2
 8010da4:	d000      	beq.n	8010da8 <pvPortMalloc+0x28>
 8010da6:	e07e      	b.n	8010ea6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d012      	beq.n	8010dd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010dae:	2208      	movs	r2, #8
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	189b      	adds	r3, r3, r2
 8010db4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2207      	movs	r2, #7
 8010dba:	4013      	ands	r3, r2
 8010dbc:	d00a      	beq.n	8010dd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2207      	movs	r2, #7
 8010dc2:	4393      	bics	r3, r2
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2207      	movs	r2, #7
 8010dcc:	4013      	ands	r3, r2
 8010dce:	d001      	beq.n	8010dd4 <pvPortMalloc+0x54>
 8010dd0:	b672      	cpsid	i
 8010dd2:	e7fe      	b.n	8010dd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d065      	beq.n	8010ea6 <pvPortMalloc+0x126>
 8010dda:	4b3b      	ldr	r3, [pc, #236]	; (8010ec8 <pvPortMalloc+0x148>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d860      	bhi.n	8010ea6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010de4:	4b39      	ldr	r3, [pc, #228]	; (8010ecc <pvPortMalloc+0x14c>)
 8010de6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010de8:	4b38      	ldr	r3, [pc, #224]	; (8010ecc <pvPortMalloc+0x14c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dee:	e004      	b.n	8010dfa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d903      	bls.n	8010e0c <pvPortMalloc+0x8c>
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1f1      	bne.n	8010df0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e0c:	4b2c      	ldr	r3, [pc, #176]	; (8010ec0 <pvPortMalloc+0x140>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d047      	beq.n	8010ea6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2208      	movs	r2, #8
 8010e1c:	189b      	adds	r3, r3, r2
 8010e1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	685a      	ldr	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	1ad2      	subs	r2, r2, r3
 8010e30:	2308      	movs	r3, #8
 8010e32:	005b      	lsls	r3, r3, #1
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d916      	bls.n	8010e66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e38:	697a      	ldr	r2, [r7, #20]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	18d3      	adds	r3, r2, r3
 8010e3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2207      	movs	r2, #7
 8010e44:	4013      	ands	r3, r2
 8010e46:	d001      	beq.n	8010e4c <pvPortMalloc+0xcc>
 8010e48:	b672      	cpsid	i
 8010e4a:	e7fe      	b.n	8010e4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	685a      	ldr	r2, [r3, #4]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	1ad2      	subs	r2, r2, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	0018      	movs	r0, r3
 8010e62:	f000 f8e7 	bl	8011034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e66:	4b18      	ldr	r3, [pc, #96]	; (8010ec8 <pvPortMalloc+0x148>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	1ad2      	subs	r2, r2, r3
 8010e70:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <pvPortMalloc+0x148>)
 8010e72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e74:	4b14      	ldr	r3, [pc, #80]	; (8010ec8 <pvPortMalloc+0x148>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	4b15      	ldr	r3, [pc, #84]	; (8010ed0 <pvPortMalloc+0x150>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d203      	bcs.n	8010e88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e80:	4b11      	ldr	r3, [pc, #68]	; (8010ec8 <pvPortMalloc+0x148>)
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <pvPortMalloc+0x150>)
 8010e86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	685a      	ldr	r2, [r3, #4]
 8010e8c:	4b0d      	ldr	r3, [pc, #52]	; (8010ec4 <pvPortMalloc+0x144>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	431a      	orrs	r2, r3
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e9c:	4b0d      	ldr	r3, [pc, #52]	; (8010ed4 <pvPortMalloc+0x154>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	1c5a      	adds	r2, r3, #1
 8010ea2:	4b0c      	ldr	r3, [pc, #48]	; (8010ed4 <pvPortMalloc+0x154>)
 8010ea4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010ea6:	f7ff fab5 	bl	8010414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2207      	movs	r2, #7
 8010eae:	4013      	ands	r3, r2
 8010eb0:	d001      	beq.n	8010eb6 <pvPortMalloc+0x136>
 8010eb2:	b672      	cpsid	i
 8010eb4:	e7fe      	b.n	8010eb4 <pvPortMalloc+0x134>
	return pvReturn;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
}
 8010eb8:	0018      	movs	r0, r3
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	b006      	add	sp, #24
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	20008108 	.word	0x20008108
 8010ec4:	2000811c 	.word	0x2000811c
 8010ec8:	2000810c 	.word	0x2000810c
 8010ecc:	20008100 	.word	0x20008100
 8010ed0:	20008110 	.word	0x20008110
 8010ed4:	20008114 	.word	0x20008114

08010ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d03a      	beq.n	8010f60 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eea:	2308      	movs	r3, #8
 8010eec:	425b      	negs	r3, r3
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	18d3      	adds	r3, r2, r3
 8010ef2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	4b1a      	ldr	r3, [pc, #104]	; (8010f68 <vPortFree+0x90>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4013      	ands	r3, r2
 8010f02:	d101      	bne.n	8010f08 <vPortFree+0x30>
 8010f04:	b672      	cpsid	i
 8010f06:	e7fe      	b.n	8010f06 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <vPortFree+0x3c>
 8010f10:	b672      	cpsid	i
 8010f12:	e7fe      	b.n	8010f12 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	685a      	ldr	r2, [r3, #4]
 8010f18:	4b13      	ldr	r3, [pc, #76]	; (8010f68 <vPortFree+0x90>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	d01f      	beq.n	8010f60 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d11b      	bne.n	8010f60 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	4b0e      	ldr	r3, [pc, #56]	; (8010f68 <vPortFree+0x90>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	43db      	mvns	r3, r3
 8010f32:	401a      	ands	r2, r3
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f38:	f7ff fa60 	bl	80103fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	4b0a      	ldr	r3, [pc, #40]	; (8010f6c <vPortFree+0x94>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	18d2      	adds	r2, r2, r3
 8010f46:	4b09      	ldr	r3, [pc, #36]	; (8010f6c <vPortFree+0x94>)
 8010f48:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	0018      	movs	r0, r3
 8010f4e:	f000 f871 	bl	8011034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f52:	4b07      	ldr	r3, [pc, #28]	; (8010f70 <vPortFree+0x98>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	1c5a      	adds	r2, r3, #1
 8010f58:	4b05      	ldr	r3, [pc, #20]	; (8010f70 <vPortFree+0x98>)
 8010f5a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8010f5c:	f7ff fa5a 	bl	8010414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f60:	46c0      	nop			; (mov r8, r8)
 8010f62:	46bd      	mov	sp, r7
 8010f64:	b004      	add	sp, #16
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	2000811c 	.word	0x2000811c
 8010f6c:	2000810c 	.word	0x2000810c
 8010f70:	20008118 	.word	0x20008118

08010f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f7a:	4b27      	ldr	r3, [pc, #156]	; (8011018 <prvHeapInit+0xa4>)
 8010f7c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f7e:	4b27      	ldr	r3, [pc, #156]	; (801101c <prvHeapInit+0xa8>)
 8010f80:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2207      	movs	r2, #7
 8010f86:	4013      	ands	r3, r2
 8010f88:	d00c      	beq.n	8010fa4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	3307      	adds	r3, #7
 8010f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2207      	movs	r2, #7
 8010f94:	4393      	bics	r3, r2
 8010f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	1ad2      	subs	r2, r2, r3
 8010f9e:	4b1f      	ldr	r3, [pc, #124]	; (801101c <prvHeapInit+0xa8>)
 8010fa0:	18d3      	adds	r3, r2, r3
 8010fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fa8:	4b1d      	ldr	r3, [pc, #116]	; (8011020 <prvHeapInit+0xac>)
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fae:	4b1c      	ldr	r3, [pc, #112]	; (8011020 <prvHeapInit+0xac>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	18d3      	adds	r3, r2, r3
 8010fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	1a9b      	subs	r3, r3, r2
 8010fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2207      	movs	r2, #7
 8010fc8:	4393      	bics	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	4b15      	ldr	r3, [pc, #84]	; (8011024 <prvHeapInit+0xb0>)
 8010fd0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8010fd2:	4b14      	ldr	r3, [pc, #80]	; (8011024 <prvHeapInit+0xb0>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fda:	4b12      	ldr	r3, [pc, #72]	; (8011024 <prvHeapInit+0xb0>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	1ad2      	subs	r2, r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <prvHeapInit+0xb0>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	685a      	ldr	r2, [r3, #4]
 8010ffc:	4b0a      	ldr	r3, [pc, #40]	; (8011028 <prvHeapInit+0xb4>)
 8010ffe:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	685a      	ldr	r2, [r3, #4]
 8011004:	4b09      	ldr	r3, [pc, #36]	; (801102c <prvHeapInit+0xb8>)
 8011006:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011008:	4b09      	ldr	r3, [pc, #36]	; (8011030 <prvHeapInit+0xbc>)
 801100a:	2280      	movs	r2, #128	; 0x80
 801100c:	0612      	lsls	r2, r2, #24
 801100e:	601a      	str	r2, [r3, #0]
}
 8011010:	46c0      	nop			; (mov r8, r8)
 8011012:	46bd      	mov	sp, r7
 8011014:	b004      	add	sp, #16
 8011016:	bd80      	pop	{r7, pc}
 8011018:	00007530 	.word	0x00007530
 801101c:	20000bd0 	.word	0x20000bd0
 8011020:	20008100 	.word	0x20008100
 8011024:	20008108 	.word	0x20008108
 8011028:	20008110 	.word	0x20008110
 801102c:	2000810c 	.word	0x2000810c
 8011030:	2000811c 	.word	0x2000811c

08011034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801103c:	4b27      	ldr	r3, [pc, #156]	; (80110dc <prvInsertBlockIntoFreeList+0xa8>)
 801103e:	60fb      	str	r3, [r7, #12]
 8011040:	e002      	b.n	8011048 <prvInsertBlockIntoFreeList+0x14>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d8f7      	bhi.n	8011042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	18d3      	adds	r3, r2, r3
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	429a      	cmp	r2, r3
 8011062:	d108      	bne.n	8011076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	685a      	ldr	r2, [r3, #4]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	18d2      	adds	r2, r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	18d2      	adds	r2, r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	429a      	cmp	r2, r3
 8011088:	d118      	bne.n	80110bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	4b14      	ldr	r3, [pc, #80]	; (80110e0 <prvInsertBlockIntoFreeList+0xac>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	429a      	cmp	r2, r3
 8011094:	d00d      	beq.n	80110b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	18d2      	adds	r2, r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e008      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110b2:	4b0b      	ldr	r3, [pc, #44]	; (80110e0 <prvInsertBlockIntoFreeList+0xac>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	e003      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d002      	beq.n	80110d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110d2:	46c0      	nop			; (mov r8, r8)
 80110d4:	46bd      	mov	sp, r7
 80110d6:	b004      	add	sp, #16
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	46c0      	nop			; (mov r8, r8)
 80110dc:	20008100 	.word	0x20008100
 80110e0:	20008108 	.word	0x20008108

080110e4 <initialisation_mesure_capteur>:
	}
	HAL_GPIO_WritePin(GPIOB, GPIO1_Pin, state);
	HAL_GPIO_WritePin(GPIOB, XSHUT_Pin, state);
}

void initialisation_mesure_capteur(){
 80110e4:	b580      	push	{r7, lr}
 80110e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit(&huart1, "TEST2 ",6,100);
	//HAL_Delay(500);

	Message_Size = sizeof(intro);
 80110e8:	4b3a      	ldr	r3, [pc, #232]	; (80111d4 <initialisation_mesure_capteur+0xf0>)
 80110ea:	221c      	movs	r2, #28
 80110ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, intro, Message_Size, 100);
 80110ee:	4b39      	ldr	r3, [pc, #228]	; (80111d4 <initialisation_mesure_capteur+0xf0>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	4938      	ldr	r1, [pc, #224]	; (80111d8 <initialisation_mesure_capteur+0xf4>)
 80110f6:	4839      	ldr	r0, [pc, #228]	; (80111dc <initialisation_mesure_capteur+0xf8>)
 80110f8:	2364      	movs	r3, #100	; 0x64
 80110fa:	f7f7 fcad 	bl	8008a58 <HAL_UART_Transmit>

	Dev->I2cHandle = &hi2c2;
 80110fe:	4b38      	ldr	r3, [pc, #224]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	23ae      	movs	r3, #174	; 0xae
 8011104:	005b      	lsls	r3, r3, #1
 8011106:	4937      	ldr	r1, [pc, #220]	; (80111e4 <initialisation_mesure_capteur+0x100>)
 8011108:	50d1      	str	r1, [r2, r3]
	Dev->I2cDevAddr = 0x52; //adresse de l'I2C dans la datasheet du VL530X
 801110a:	4b35      	ldr	r3, [pc, #212]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	23b0      	movs	r3, #176	; 0xb0
 8011110:	005b      	lsls	r3, r3, #1
 8011112:	2152      	movs	r1, #82	; 0x52
 8011114:	54d1      	strb	r1, [r2, r3]
	//On active Le port KSHUT qui est le port permettant de recevoir les valeurs
	//HAL_GPIO_WritePin(GPIOB, XSHUT_C1_Pin, GPIO_PIN_SET); // Enable XSHUT
	//vTaskDelay(20);

	//Enable capteur TOF 2 : haut
	HAL_GPIO_WritePin(GPIOB, GPIO1_C2_Pin, GPIO_PIN_SET);
 8011116:	2380      	movs	r3, #128	; 0x80
 8011118:	019b      	lsls	r3, r3, #6
 801111a:	4833      	ldr	r0, [pc, #204]	; (80111e8 <initialisation_mesure_capteur+0x104>)
 801111c:	2201      	movs	r2, #1
 801111e:	0019      	movs	r1, r3
 8011120:	f7f4 fb6c 	bl	80057fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, XSHUT_C2_Pin, GPIO_PIN_SET);
 8011124:	2380      	movs	r3, #128	; 0x80
 8011126:	015b      	lsls	r3, r3, #5
 8011128:	482f      	ldr	r0, [pc, #188]	; (80111e8 <initialisation_mesure_capteur+0x104>)
 801112a:	2201      	movs	r2, #1
 801112c:	0019      	movs	r1, r3
 801112e:	f7f4 fb65 	bl	80057fc <HAL_GPIO_WritePin>


	//Simple mesure pour Capteur
	VL53L0X_WaitDeviceBooted(Dev);
 8011132:	4b2b      	ldr	r3, [pc, #172]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	0018      	movs	r0, r3
 8011138:	f7f9 f938 	bl	800a3ac <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 801113c:	4b28      	ldr	r3, [pc, #160]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	0018      	movs	r0, r3
 8011142:	f7f8 fdcb 	bl	8009cdc <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8011146:	4b26      	ldr	r3, [pc, #152]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	0018      	movs	r0, r3
 801114c:	f7f8 ff60 	bl	800a010 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8011150:	4b23      	ldr	r3, [pc, #140]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a25      	ldr	r2, [pc, #148]	; (80111ec <initialisation_mesure_capteur+0x108>)
 8011156:	4926      	ldr	r1, [pc, #152]	; (80111f0 <initialisation_mesure_capteur+0x10c>)
 8011158:	0018      	movs	r0, r3
 801115a:	f7f9 ffb2 	bl	800b0c2 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 801115e:	4b20      	ldr	r3, [pc, #128]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	4a24      	ldr	r2, [pc, #144]	; (80111f4 <initialisation_mesure_capteur+0x110>)
 8011164:	4924      	ldr	r1, [pc, #144]	; (80111f8 <initialisation_mesure_capteur+0x114>)
 8011166:	0018      	movs	r0, r3
 8011168:	f7fa fd80 	bl	800bc6c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 801116c:	4b1c      	ldr	r3, [pc, #112]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2100      	movs	r1, #0
 8011172:	0018      	movs	r0, r3
 8011174:	f7f9 f9e2 	bl	800a53c <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8011178:	4b19      	ldr	r3, [pc, #100]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2201      	movs	r2, #1
 801117e:	2100      	movs	r1, #0
 8011180:	0018      	movs	r0, r3
 8011182:	f7f9 fd09 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8011186:	4b16      	ldr	r3, [pc, #88]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2201      	movs	r2, #1
 801118c:	2101      	movs	r1, #1
 801118e:	0018      	movs	r0, r3
 8011190:	f7f9 fd02 	bl	800ab98 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8011194:	4b12      	ldr	r3, [pc, #72]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4a18      	ldr	r2, [pc, #96]	; (80111fc <initialisation_mesure_capteur+0x118>)
 801119a:	2101      	movs	r1, #1
 801119c:	0018      	movs	r0, r3
 801119e:	f7f9 fde7 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80111a2:	4b0f      	ldr	r3, [pc, #60]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	22f0      	movs	r2, #240	; 0xf0
 80111a8:	0392      	lsls	r2, r2, #14
 80111aa:	2100      	movs	r1, #0
 80111ac:	0018      	movs	r0, r3
 80111ae:	f7f9 fddf 	bl	800ad70 <VL53L0X_SetLimitCheckValue>
	//VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 1910);
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80111b2:	4b0b      	ldr	r3, [pc, #44]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2212      	movs	r2, #18
 80111b8:	2100      	movs	r1, #0
 80111ba:	0018      	movs	r0, r3
 80111bc:	f7f9 fa5c 	bl	800a678 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80111c0:	4b07      	ldr	r3, [pc, #28]	; (80111e0 <initialisation_mesure_capteur+0xfc>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	220e      	movs	r2, #14
 80111c6:	2101      	movs	r1, #1
 80111c8:	0018      	movs	r0, r3
 80111ca:	f7f9 fa55 	bl	800a678 <VL53L0X_SetVcselPulsePeriod>

	/* USER CODE END 2 */

}
 80111ce:	46c0      	nop			; (mov r8, r8)
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	20008169 	.word	0x20008169
 80111d8:	200002cc 	.word	0x200002cc
 80111dc:	20000938 	.word	0x20000938
 80111e0:	200002e8 	.word	0x200002e8
 80111e4:	20000764 	.word	0x20000764
 80111e8:	50000400 	.word	0x50000400
 80111ec:	20008126 	.word	0x20008126
 80111f0:	20008125 	.word	0x20008125
 80111f4:	20008124 	.word	0x20008124
 80111f8:	20008120 	.word	0x20008120
 80111fc:	00001999 	.word	0x00001999

08011200 <mesure_et_affichage>:

void mesure_et_affichage(){
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0

	//Enable TOF 2 (haut)
	HAL_GPIO_WritePin(GPIOB, GPIO1_C2_Pin, GPIO_PIN_SET);
 8011206:	2380      	movs	r3, #128	; 0x80
 8011208:	019b      	lsls	r3, r3, #6
 801120a:	485a      	ldr	r0, [pc, #360]	; (8011374 <mesure_et_affichage+0x174>)
 801120c:	2201      	movs	r2, #1
 801120e:	0019      	movs	r1, r3
 8011210:	f7f4 faf4 	bl	80057fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, XSHUT_C2_Pin, GPIO_PIN_SET);
 8011214:	2380      	movs	r3, #128	; 0x80
 8011216:	015b      	lsls	r3, r3, #5
 8011218:	4856      	ldr	r0, [pc, #344]	; (8011374 <mesure_et_affichage+0x174>)
 801121a:	2201      	movs	r2, #1
 801121c:	0019      	movs	r1, r3
 801121e:	f7f4 faed 	bl	80057fc <HAL_GPIO_WritePin>

	//Disable TOF 1 (bas)
	HAL_GPIO_WritePin(GPIOB, GPIO1_C1_Pin, GPIO_PIN_RESET);
 8011222:	4b54      	ldr	r3, [pc, #336]	; (8011374 <mesure_et_affichage+0x174>)
 8011224:	2200      	movs	r2, #0
 8011226:	2104      	movs	r1, #4
 8011228:	0018      	movs	r0, r3
 801122a:	f7f4 fae7 	bl	80057fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, XSHUT_C1_Pin, GPIO_PIN_RESET);
 801122e:	4b51      	ldr	r3, [pc, #324]	; (8011374 <mesure_et_affichage+0x174>)
 8011230:	2200      	movs	r2, #0
 8011232:	2102      	movs	r1, #2
 8011234:	0018      	movs	r0, r3
 8011236:	f7f4 fae1 	bl	80057fc <HAL_GPIO_WritePin>
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 801123a:	4b4f      	ldr	r3, [pc, #316]	; (8011378 <mesure_et_affichage+0x178>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4a4f      	ldr	r2, [pc, #316]	; (801137c <mesure_et_affichage+0x17c>)
 8011240:	0011      	movs	r1, r2
 8011242:	0018      	movs	r0, r3
 8011244:	f7fa fa80 	bl	800b748 <VL53L0X_PerformSingleRangingMeasurement>
		DMaxMillimeter_size = sprintf((char*)resultat2, "RangeDMaxMillimeter: %i\n\r", RangingData.RangeDMaxMilliMeter );

		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
		HAL_UART_Transmit(&huart1, resultat2, DMaxMillimeter_size, 100);
	}*/
	if(RangingData.RangeStatus == 0){
 8011248:	4b4c      	ldr	r3, [pc, #304]	; (801137c <mesure_et_affichage+0x17c>)
 801124a:	7e1b      	ldrb	r3, [r3, #24]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d173      	bne.n	8011338 <mesure_et_affichage+0x138>
		//Value = 0 means value is valid.
		int distance =RangingData.RangeMilliMeter;
 8011250:	4b4a      	ldr	r3, [pc, #296]	; (801137c <mesure_et_affichage+0x17c>)
 8011252:	891b      	ldrh	r3, [r3, #8]
 8011254:	607b      	str	r3, [r7, #4]

		Message_resultat_Size = sprintf((char*)Message_resultat, "Distance en millimetre: %i\n\r", distance);
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	4949      	ldr	r1, [pc, #292]	; (8011380 <mesure_et_affichage+0x180>)
 801125a:	4b4a      	ldr	r3, [pc, #296]	; (8011384 <mesure_et_affichage+0x184>)
 801125c:	0018      	movs	r0, r3
 801125e:	f000 fe83 	bl	8011f68 <siprintf>
 8011262:	0003      	movs	r3, r0
 8011264:	b2da      	uxtb	r2, r3
 8011266:	4b48      	ldr	r3, [pc, #288]	; (8011388 <mesure_et_affichage+0x188>)
 8011268:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 801126a:	4b47      	ldr	r3, [pc, #284]	; (8011388 <mesure_et_affichage+0x188>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	b29a      	uxth	r2, r3
 8011270:	4944      	ldr	r1, [pc, #272]	; (8011384 <mesure_et_affichage+0x184>)
 8011272:	4846      	ldr	r0, [pc, #280]	; (801138c <mesure_et_affichage+0x18c>)
 8011274:	2364      	movs	r3, #100	; 0x64
 8011276:	f7f7 fbef 	bl	8008a58 <HAL_UART_Transmit>

		//on a rajoute 500 pour capter la canette de plus loin
		if(distance<500){
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	23fa      	movs	r3, #250	; 0xfa
 801127e:	005b      	lsls	r3, r3, #1
 8011280:	429a      	cmp	r2, r3
 8011282:	da3d      	bge.n	8011300 <mesure_et_affichage+0x100>
			HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
 8011284:	2380      	movs	r3, #128	; 0x80
 8011286:	015b      	lsls	r3, r3, #5
 8011288:	4841      	ldr	r0, [pc, #260]	; (8011390 <mesure_et_affichage+0x190>)
 801128a:	2201      	movs	r2, #1
 801128c:	0019      	movs	r1, r3
 801128e:	f7f4 fab5 	bl	80057fc <HAL_GPIO_WritePin>

			if(distance<90){
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2b59      	cmp	r3, #89	; 0x59
 8011296:	dc28      	bgt.n	80112ea <mesure_et_affichage+0xea>
				HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_SET);
 8011298:	2380      	movs	r3, #128	; 0x80
 801129a:	011b      	lsls	r3, r3, #4
 801129c:	483c      	ldr	r0, [pc, #240]	; (8011390 <mesure_et_affichage+0x190>)
 801129e:	2201      	movs	r2, #1
 80112a0:	0019      	movs	r1, r3
 80112a2:	f7f4 faab 	bl	80057fc <HAL_GPIO_WritePin>
				xTaskNotifyGive(h_attrape);
 80112a6:	4b3b      	ldr	r3, [pc, #236]	; (8011394 <mesure_et_affichage+0x194>)
 80112a8:	6818      	ldr	r0, [r3, #0]
 80112aa:	2300      	movs	r3, #0
 80112ac:	2202      	movs	r2, #2
 80112ae:	2100      	movs	r1, #0
 80112b0:	f7ff fb4e 	bl	8010950 <xTaskGenericNotify>
				vTaskDelay(200);
 80112b4:	20c8      	movs	r0, #200	; 0xc8
 80112b6:	f7fe ff6b 	bl	8010190 <vTaskDelay>
				if(distance>70){
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b46      	cmp	r3, #70	; 0x46
 80112be:	dd54      	ble.n	801136a <mesure_et_affichage+0x16a>
					h_cmd_servomotor.cmd='o';
 80112c0:	4b35      	ldr	r3, [pc, #212]	; (8011398 <mesure_et_affichage+0x198>)
 80112c2:	226f      	movs	r2, #111	; 0x6f
 80112c4:	701a      	strb	r2, [r3, #0]
					xTaskNotifyGive(h_servomotor);
 80112c6:	4b35      	ldr	r3, [pc, #212]	; (801139c <mesure_et_affichage+0x19c>)
 80112c8:	6818      	ldr	r0, [r3, #0]
 80112ca:	2300      	movs	r3, #0
 80112cc:	2202      	movs	r2, #2
 80112ce:	2100      	movs	r1, #0
 80112d0:	f7ff fb3e 	bl	8010950 <xTaskGenericNotify>
					//vTaskDelay(200);
					xTaskNotifyGive(h_trouve);
 80112d4:	4b32      	ldr	r3, [pc, #200]	; (80113a0 <mesure_et_affichage+0x1a0>)
 80112d6:	6818      	ldr	r0, [r3, #0]
 80112d8:	2300      	movs	r3, #0
 80112da:	2202      	movs	r2, #2
 80112dc:	2100      	movs	r1, #0
 80112de:	f7ff fb37 	bl	8010950 <xTaskGenericNotify>
					vTaskDelay(200);
 80112e2:	20c8      	movs	r0, #200	; 0xc8
 80112e4:	f7fe ff54 	bl	8010190 <vTaskDelay>
		vTaskDelay(200);

	}


}
 80112e8:	e03f      	b.n	801136a <mesure_et_affichage+0x16a>
				xTaskNotifyGive(h_trouve);
 80112ea:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <mesure_et_affichage+0x1a0>)
 80112ec:	6818      	ldr	r0, [r3, #0]
 80112ee:	2300      	movs	r3, #0
 80112f0:	2202      	movs	r2, #2
 80112f2:	2100      	movs	r1, #0
 80112f4:	f7ff fb2c 	bl	8010950 <xTaskGenericNotify>
				vTaskDelay(200);
 80112f8:	20c8      	movs	r0, #200	; 0xc8
 80112fa:	f7fe ff49 	bl	8010190 <vTaskDelay>
}
 80112fe:	e034      	b.n	801136a <mesure_et_affichage+0x16a>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_RESET);
 8011300:	2380      	movs	r3, #128	; 0x80
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	4822      	ldr	r0, [pc, #136]	; (8011390 <mesure_et_affichage+0x190>)
 8011306:	2200      	movs	r2, #0
 8011308:	0019      	movs	r1, r3
 801130a:	f7f4 fa77 	bl	80057fc <HAL_GPIO_WritePin>
			h_cmd_servomotor.cmd='o';
 801130e:	4b22      	ldr	r3, [pc, #136]	; (8011398 <mesure_et_affichage+0x198>)
 8011310:	226f      	movs	r2, #111	; 0x6f
 8011312:	701a      	strb	r2, [r3, #0]
			xTaskNotifyGive(h_servomotor);
 8011314:	4b21      	ldr	r3, [pc, #132]	; (801139c <mesure_et_affichage+0x19c>)
 8011316:	6818      	ldr	r0, [r3, #0]
 8011318:	2300      	movs	r3, #0
 801131a:	2202      	movs	r2, #2
 801131c:	2100      	movs	r1, #0
 801131e:	f7ff fb17 	bl	8010950 <xTaskGenericNotify>
			xTaskNotifyGive(h_trouve);
 8011322:	4b1f      	ldr	r3, [pc, #124]	; (80113a0 <mesure_et_affichage+0x1a0>)
 8011324:	6818      	ldr	r0, [r3, #0]
 8011326:	2300      	movs	r3, #0
 8011328:	2202      	movs	r2, #2
 801132a:	2100      	movs	r1, #0
 801132c:	f7ff fb10 	bl	8010950 <xTaskGenericNotify>
			vTaskDelay(200);
 8011330:	20c8      	movs	r0, #200	; 0xc8
 8011332:	f7fe ff2d 	bl	8010190 <vTaskDelay>
}
 8011336:	e018      	b.n	801136a <mesure_et_affichage+0x16a>
		HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_RESET);
 8011338:	2380      	movs	r3, #128	; 0x80
 801133a:	015b      	lsls	r3, r3, #5
 801133c:	4814      	ldr	r0, [pc, #80]	; (8011390 <mesure_et_affichage+0x190>)
 801133e:	2200      	movs	r2, #0
 8011340:	0019      	movs	r1, r3
 8011342:	f7f4 fa5b 	bl	80057fc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 8011346:	4b10      	ldr	r3, [pc, #64]	; (8011388 <mesure_et_affichage+0x188>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	b29a      	uxth	r2, r3
 801134c:	490d      	ldr	r1, [pc, #52]	; (8011384 <mesure_et_affichage+0x184>)
 801134e:	480f      	ldr	r0, [pc, #60]	; (801138c <mesure_et_affichage+0x18c>)
 8011350:	2364      	movs	r3, #100	; 0x64
 8011352:	f7f7 fb81 	bl	8008a58 <HAL_UART_Transmit>
		xTaskNotifyGive(h_recherche);
 8011356:	4b13      	ldr	r3, [pc, #76]	; (80113a4 <mesure_et_affichage+0x1a4>)
 8011358:	6818      	ldr	r0, [r3, #0]
 801135a:	2300      	movs	r3, #0
 801135c:	2202      	movs	r2, #2
 801135e:	2100      	movs	r1, #0
 8011360:	f7ff faf6 	bl	8010950 <xTaskGenericNotify>
		vTaskDelay(200);
 8011364:	20c8      	movs	r0, #200	; 0xc8
 8011366:	f7fe ff13 	bl	8010190 <vTaskDelay>
}
 801136a:	46c0      	nop			; (mov r8, r8)
 801136c:	46bd      	mov	sp, r7
 801136e:	b002      	add	sp, #8
 8011370:	bd80      	pop	{r7, pc}
 8011372:	46c0      	nop			; (mov r8, r8)
 8011374:	50000400 	.word	0x50000400
 8011378:	200002e8 	.word	0x200002e8
 801137c:	2000816c 	.word	0x2000816c
 8011380:	08014e20 	.word	0x08014e20
 8011384:	20008128 	.word	0x20008128
 8011388:	20008168 	.word	0x20008168
 801138c:	20000938 	.word	0x20000938
 8011390:	50000800 	.word	0x50000800
 8011394:	20000698 	.word	0x20000698
 8011398:	200006a4 	.word	0x200006a4
 801139c:	200006a0 	.word	0x200006a0
 80113a0:	2000069c 	.word	0x2000069c
 80113a4:	20000694 	.word	0x20000694

080113a8 <taskTOF>:
	}
	return 0;
}

//task TOF
void taskTOF(void *pTOF){
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
	printf("Tâche TOF créée\r\n");
 80113b0:	4b0e      	ldr	r3, [pc, #56]	; (80113ec <taskTOF+0x44>)
 80113b2:	0018      	movs	r0, r3
 80113b4:	f000 fd90 	bl	8011ed8 <puts>

	//Init TOF
	initialisation_mesure_capteur();
 80113b8:	f7ff fe94 	bl	80110e4 <initialisation_mesure_capteur>

	int index = 0;
 80113bc:	2300      	movs	r3, #0
 80113be:	60fb      	str	r3, [r7, #12]
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80113c0:	2301      	movs	r3, #1
 80113c2:	425b      	negs	r3, r3
 80113c4:	0019      	movs	r1, r3
 80113c6:	2001      	movs	r0, #1
 80113c8:	f7ff fa80 	bl	80108cc <ulTaskNotifyTake>
		index++;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	3301      	adds	r3, #1
 80113d0:	60fb      	str	r3, [r7, #12]
		mesure_et_affichage();
 80113d2:	f7ff ff15 	bl	8011200 <mesure_et_affichage>
		vTaskDelay(200);
 80113d6:	20c8      	movs	r0, #200	; 0xc8
 80113d8:	f7fe feda 	bl	8010190 <vTaskDelay>
		if(index==TAB_SIZE2){
 80113dc:	68fa      	ldr	r2, [r7, #12]
 80113de:	2396      	movs	r3, #150	; 0x96
 80113e0:	005b      	lsls	r3, r3, #1
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d1ec      	bne.n	80113c0 <taskTOF+0x18>
			index=0;
 80113e6:	2300      	movs	r3, #0
 80113e8:	60fb      	str	r3, [r7, #12]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80113ea:	e7e9      	b.n	80113c0 <taskTOF+0x18>
 80113ec:	08014e84 	.word	0x08014e84

080113f0 <demo_run>:
extern TaskHandle_t h_servomotor;
extern h_motor_t h_cmd_servomotor;
extern TaskHandle_t h_tof;
extern TaskHandle_t h_recherche;

int demo_run(h_demo_t *pdemo){
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]



	vTaskDelay(1000);
 80113f8:	23fa      	movs	r3, #250	; 0xfa
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	0018      	movs	r0, r3
 80113fe:	f7fe fec7 	bl	8010190 <vTaskDelay>
	h_cmd_motor.cmd='a';
 8011402:	4b15      	ldr	r3, [pc, #84]	; (8011458 <demo_run+0x68>)
 8011404:	2261      	movs	r2, #97	; 0x61
 8011406:	701a      	strb	r2, [r3, #0]
	h_cmd_motor.speed=250;
 8011408:	4b13      	ldr	r3, [pc, #76]	; (8011458 <demo_run+0x68>)
 801140a:	22fa      	movs	r2, #250	; 0xfa
 801140c:	805a      	strh	r2, [r3, #2]
	xTaskNotifyGive(h_motor);
 801140e:	4b13      	ldr	r3, [pc, #76]	; (801145c <demo_run+0x6c>)
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	2300      	movs	r3, #0
 8011414:	2202      	movs	r2, #2
 8011416:	2100      	movs	r1, #0
 8011418:	f7ff fa9a 	bl	8010950 <xTaskGenericNotify>
	h_cmd_servomotor.cmd='o';
 801141c:	4b10      	ldr	r3, [pc, #64]	; (8011460 <demo_run+0x70>)
 801141e:	226f      	movs	r2, #111	; 0x6f
 8011420:	701a      	strb	r2, [r3, #0]
	h_cmd_servomotor.speed=200;
 8011422:	4b0f      	ldr	r3, [pc, #60]	; (8011460 <demo_run+0x70>)
 8011424:	22c8      	movs	r2, #200	; 0xc8
 8011426:	805a      	strh	r2, [r3, #2]
	xTaskNotifyGive(h_servomotor);
 8011428:	4b0e      	ldr	r3, [pc, #56]	; (8011464 <demo_run+0x74>)
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	2300      	movs	r3, #0
 801142e:	2202      	movs	r2, #2
 8011430:	2100      	movs	r1, #0
 8011432:	f7ff fa8d 	bl	8010950 <xTaskGenericNotify>
	vTaskDelay(2000);
 8011436:	23fa      	movs	r3, #250	; 0xfa
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	0018      	movs	r0, r3
 801143c:	f7fe fea8 	bl	8010190 <vTaskDelay>
	xTaskNotifyGive(h_motor);
	//vTaskDelay(20);
#endif

	while(1){
		xTaskNotifyGive(h_tof);
 8011440:	4b09      	ldr	r3, [pc, #36]	; (8011468 <demo_run+0x78>)
 8011442:	6818      	ldr	r0, [r3, #0]
 8011444:	2300      	movs	r3, #0
 8011446:	2202      	movs	r2, #2
 8011448:	2100      	movs	r1, #0
 801144a:	f7ff fa81 	bl	8010950 <xTaskGenericNotify>
		//xTaskNotifyGive(h_recherche);
		vTaskDelay(200);
 801144e:	20c8      	movs	r0, #200	; 0xc8
 8011450:	f7fe fe9e 	bl	8010190 <vTaskDelay>
		xTaskNotifyGive(h_tof);
 8011454:	e7f4      	b.n	8011440 <demo_run+0x50>
 8011456:	46c0      	nop			; (mov r8, r8)
 8011458:	2000068c 	.word	0x2000068c
 801145c:	20000688 	.word	0x20000688
 8011460:	200006a4 	.word	0x200006a4
 8011464:	200006a0 	.word	0x200006a0
 8011468:	20008318 	.word	0x20008318

0801146c <__errno>:
 801146c:	4b01      	ldr	r3, [pc, #4]	; (8011474 <__errno+0x8>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	4770      	bx	lr
 8011472:	46c0      	nop			; (mov r8, r8)
 8011474:	200002ec 	.word	0x200002ec

08011478 <__libc_init_array>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	2600      	movs	r6, #0
 801147c:	4d0c      	ldr	r5, [pc, #48]	; (80114b0 <__libc_init_array+0x38>)
 801147e:	4c0d      	ldr	r4, [pc, #52]	; (80114b4 <__libc_init_array+0x3c>)
 8011480:	1b64      	subs	r4, r4, r5
 8011482:	10a4      	asrs	r4, r4, #2
 8011484:	42a6      	cmp	r6, r4
 8011486:	d109      	bne.n	801149c <__libc_init_array+0x24>
 8011488:	2600      	movs	r6, #0
 801148a:	f003 f89b 	bl	80145c4 <_init>
 801148e:	4d0a      	ldr	r5, [pc, #40]	; (80114b8 <__libc_init_array+0x40>)
 8011490:	4c0a      	ldr	r4, [pc, #40]	; (80114bc <__libc_init_array+0x44>)
 8011492:	1b64      	subs	r4, r4, r5
 8011494:	10a4      	asrs	r4, r4, #2
 8011496:	42a6      	cmp	r6, r4
 8011498:	d105      	bne.n	80114a6 <__libc_init_array+0x2e>
 801149a:	bd70      	pop	{r4, r5, r6, pc}
 801149c:	00b3      	lsls	r3, r6, #2
 801149e:	58eb      	ldr	r3, [r5, r3]
 80114a0:	4798      	blx	r3
 80114a2:	3601      	adds	r6, #1
 80114a4:	e7ee      	b.n	8011484 <__libc_init_array+0xc>
 80114a6:	00b3      	lsls	r3, r6, #2
 80114a8:	58eb      	ldr	r3, [r5, r3]
 80114aa:	4798      	blx	r3
 80114ac:	3601      	adds	r6, #1
 80114ae:	e7f2      	b.n	8011496 <__libc_init_array+0x1e>
 80114b0:	080154d8 	.word	0x080154d8
 80114b4:	080154d8 	.word	0x080154d8
 80114b8:	080154d8 	.word	0x080154d8
 80114bc:	080154dc 	.word	0x080154dc

080114c0 <memcpy>:
 80114c0:	2300      	movs	r3, #0
 80114c2:	b510      	push	{r4, lr}
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d100      	bne.n	80114ca <memcpy+0xa>
 80114c8:	bd10      	pop	{r4, pc}
 80114ca:	5ccc      	ldrb	r4, [r1, r3]
 80114cc:	54c4      	strb	r4, [r0, r3]
 80114ce:	3301      	adds	r3, #1
 80114d0:	e7f8      	b.n	80114c4 <memcpy+0x4>

080114d2 <memset>:
 80114d2:	0003      	movs	r3, r0
 80114d4:	1882      	adds	r2, r0, r2
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d100      	bne.n	80114dc <memset+0xa>
 80114da:	4770      	bx	lr
 80114dc:	7019      	strb	r1, [r3, #0]
 80114de:	3301      	adds	r3, #1
 80114e0:	e7f9      	b.n	80114d6 <memset+0x4>

080114e2 <__cvt>:
 80114e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114e4:	001e      	movs	r6, r3
 80114e6:	2300      	movs	r3, #0
 80114e8:	0014      	movs	r4, r2
 80114ea:	b08b      	sub	sp, #44	; 0x2c
 80114ec:	429e      	cmp	r6, r3
 80114ee:	da04      	bge.n	80114fa <__cvt+0x18>
 80114f0:	2180      	movs	r1, #128	; 0x80
 80114f2:	0609      	lsls	r1, r1, #24
 80114f4:	1873      	adds	r3, r6, r1
 80114f6:	001e      	movs	r6, r3
 80114f8:	232d      	movs	r3, #45	; 0x2d
 80114fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114fc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80114fe:	7013      	strb	r3, [r2, #0]
 8011500:	2320      	movs	r3, #32
 8011502:	2203      	movs	r2, #3
 8011504:	439f      	bics	r7, r3
 8011506:	2f46      	cmp	r7, #70	; 0x46
 8011508:	d007      	beq.n	801151a <__cvt+0x38>
 801150a:	003b      	movs	r3, r7
 801150c:	3b45      	subs	r3, #69	; 0x45
 801150e:	4259      	negs	r1, r3
 8011510:	414b      	adcs	r3, r1
 8011512:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011514:	3a01      	subs	r2, #1
 8011516:	18cb      	adds	r3, r1, r3
 8011518:	9310      	str	r3, [sp, #64]	; 0x40
 801151a:	ab09      	add	r3, sp, #36	; 0x24
 801151c:	9304      	str	r3, [sp, #16]
 801151e:	ab08      	add	r3, sp, #32
 8011520:	9303      	str	r3, [sp, #12]
 8011522:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011524:	9200      	str	r2, [sp, #0]
 8011526:	9302      	str	r3, [sp, #8]
 8011528:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801152a:	0022      	movs	r2, r4
 801152c:	9301      	str	r3, [sp, #4]
 801152e:	0033      	movs	r3, r6
 8011530:	f000 feba 	bl	80122a8 <_dtoa_r>
 8011534:	0005      	movs	r5, r0
 8011536:	2f47      	cmp	r7, #71	; 0x47
 8011538:	d102      	bne.n	8011540 <__cvt+0x5e>
 801153a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801153c:	07db      	lsls	r3, r3, #31
 801153e:	d528      	bpl.n	8011592 <__cvt+0xb0>
 8011540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011542:	18eb      	adds	r3, r5, r3
 8011544:	9307      	str	r3, [sp, #28]
 8011546:	2f46      	cmp	r7, #70	; 0x46
 8011548:	d114      	bne.n	8011574 <__cvt+0x92>
 801154a:	782b      	ldrb	r3, [r5, #0]
 801154c:	2b30      	cmp	r3, #48	; 0x30
 801154e:	d10c      	bne.n	801156a <__cvt+0x88>
 8011550:	2200      	movs	r2, #0
 8011552:	2300      	movs	r3, #0
 8011554:	0020      	movs	r0, r4
 8011556:	0031      	movs	r1, r6
 8011558:	f7ee ff78 	bl	800044c <__aeabi_dcmpeq>
 801155c:	2800      	cmp	r0, #0
 801155e:	d104      	bne.n	801156a <__cvt+0x88>
 8011560:	2301      	movs	r3, #1
 8011562:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011564:	1a9b      	subs	r3, r3, r2
 8011566:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011568:	6013      	str	r3, [r2, #0]
 801156a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801156c:	9a07      	ldr	r2, [sp, #28]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	18d3      	adds	r3, r2, r3
 8011572:	9307      	str	r3, [sp, #28]
 8011574:	2200      	movs	r2, #0
 8011576:	2300      	movs	r3, #0
 8011578:	0020      	movs	r0, r4
 801157a:	0031      	movs	r1, r6
 801157c:	f7ee ff66 	bl	800044c <__aeabi_dcmpeq>
 8011580:	2800      	cmp	r0, #0
 8011582:	d001      	beq.n	8011588 <__cvt+0xa6>
 8011584:	9b07      	ldr	r3, [sp, #28]
 8011586:	9309      	str	r3, [sp, #36]	; 0x24
 8011588:	2230      	movs	r2, #48	; 0x30
 801158a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801158c:	9907      	ldr	r1, [sp, #28]
 801158e:	428b      	cmp	r3, r1
 8011590:	d306      	bcc.n	80115a0 <__cvt+0xbe>
 8011592:	0028      	movs	r0, r5
 8011594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011598:	1b5b      	subs	r3, r3, r5
 801159a:	6013      	str	r3, [r2, #0]
 801159c:	b00b      	add	sp, #44	; 0x2c
 801159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115a0:	1c59      	adds	r1, r3, #1
 80115a2:	9109      	str	r1, [sp, #36]	; 0x24
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	e7f0      	b.n	801158a <__cvt+0xa8>

080115a8 <__exponent>:
 80115a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115aa:	1c83      	adds	r3, r0, #2
 80115ac:	b087      	sub	sp, #28
 80115ae:	9303      	str	r3, [sp, #12]
 80115b0:	0005      	movs	r5, r0
 80115b2:	000c      	movs	r4, r1
 80115b4:	232b      	movs	r3, #43	; 0x2b
 80115b6:	7002      	strb	r2, [r0, #0]
 80115b8:	2900      	cmp	r1, #0
 80115ba:	da01      	bge.n	80115c0 <__exponent+0x18>
 80115bc:	424c      	negs	r4, r1
 80115be:	3302      	adds	r3, #2
 80115c0:	706b      	strb	r3, [r5, #1]
 80115c2:	2c09      	cmp	r4, #9
 80115c4:	dd31      	ble.n	801162a <__exponent+0x82>
 80115c6:	270a      	movs	r7, #10
 80115c8:	ab04      	add	r3, sp, #16
 80115ca:	1dde      	adds	r6, r3, #7
 80115cc:	0020      	movs	r0, r4
 80115ce:	0039      	movs	r1, r7
 80115d0:	9601      	str	r6, [sp, #4]
 80115d2:	f7ee ff25 	bl	8000420 <__aeabi_idivmod>
 80115d6:	3e01      	subs	r6, #1
 80115d8:	3130      	adds	r1, #48	; 0x30
 80115da:	0020      	movs	r0, r4
 80115dc:	7031      	strb	r1, [r6, #0]
 80115de:	0039      	movs	r1, r7
 80115e0:	9402      	str	r4, [sp, #8]
 80115e2:	f7ee fe37 	bl	8000254 <__divsi3>
 80115e6:	9b02      	ldr	r3, [sp, #8]
 80115e8:	0004      	movs	r4, r0
 80115ea:	2b63      	cmp	r3, #99	; 0x63
 80115ec:	dcee      	bgt.n	80115cc <__exponent+0x24>
 80115ee:	9b01      	ldr	r3, [sp, #4]
 80115f0:	3430      	adds	r4, #48	; 0x30
 80115f2:	1e9a      	subs	r2, r3, #2
 80115f4:	0013      	movs	r3, r2
 80115f6:	9903      	ldr	r1, [sp, #12]
 80115f8:	7014      	strb	r4, [r2, #0]
 80115fa:	a804      	add	r0, sp, #16
 80115fc:	3007      	adds	r0, #7
 80115fe:	4298      	cmp	r0, r3
 8011600:	d80e      	bhi.n	8011620 <__exponent+0x78>
 8011602:	ab04      	add	r3, sp, #16
 8011604:	3307      	adds	r3, #7
 8011606:	2000      	movs	r0, #0
 8011608:	429a      	cmp	r2, r3
 801160a:	d804      	bhi.n	8011616 <__exponent+0x6e>
 801160c:	ab04      	add	r3, sp, #16
 801160e:	3009      	adds	r0, #9
 8011610:	18c0      	adds	r0, r0, r3
 8011612:	9b01      	ldr	r3, [sp, #4]
 8011614:	1ac0      	subs	r0, r0, r3
 8011616:	9b03      	ldr	r3, [sp, #12]
 8011618:	1818      	adds	r0, r3, r0
 801161a:	1b40      	subs	r0, r0, r5
 801161c:	b007      	add	sp, #28
 801161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011620:	7818      	ldrb	r0, [r3, #0]
 8011622:	3301      	adds	r3, #1
 8011624:	7008      	strb	r0, [r1, #0]
 8011626:	3101      	adds	r1, #1
 8011628:	e7e7      	b.n	80115fa <__exponent+0x52>
 801162a:	2330      	movs	r3, #48	; 0x30
 801162c:	18e4      	adds	r4, r4, r3
 801162e:	70ab      	strb	r3, [r5, #2]
 8011630:	1d28      	adds	r0, r5, #4
 8011632:	70ec      	strb	r4, [r5, #3]
 8011634:	e7f1      	b.n	801161a <__exponent+0x72>
	...

08011638 <_printf_float>:
 8011638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801163a:	b095      	sub	sp, #84	; 0x54
 801163c:	000c      	movs	r4, r1
 801163e:	9209      	str	r2, [sp, #36]	; 0x24
 8011640:	001e      	movs	r6, r3
 8011642:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8011644:	0007      	movs	r7, r0
 8011646:	f001 fe27 	bl	8013298 <_localeconv_r>
 801164a:	6803      	ldr	r3, [r0, #0]
 801164c:	0018      	movs	r0, r3
 801164e:	930c      	str	r3, [sp, #48]	; 0x30
 8011650:	f7ee fd5a 	bl	8000108 <strlen>
 8011654:	2300      	movs	r3, #0
 8011656:	9312      	str	r3, [sp, #72]	; 0x48
 8011658:	7e23      	ldrb	r3, [r4, #24]
 801165a:	2207      	movs	r2, #7
 801165c:	930a      	str	r3, [sp, #40]	; 0x28
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	900e      	str	r0, [sp, #56]	; 0x38
 8011662:	930d      	str	r3, [sp, #52]	; 0x34
 8011664:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011666:	682b      	ldr	r3, [r5, #0]
 8011668:	05c9      	lsls	r1, r1, #23
 801166a:	d547      	bpl.n	80116fc <_printf_float+0xc4>
 801166c:	189b      	adds	r3, r3, r2
 801166e:	4393      	bics	r3, r2
 8011670:	001a      	movs	r2, r3
 8011672:	3208      	adds	r2, #8
 8011674:	602a      	str	r2, [r5, #0]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	64a2      	str	r2, [r4, #72]	; 0x48
 801167c:	64e3      	str	r3, [r4, #76]	; 0x4c
 801167e:	2201      	movs	r2, #1
 8011680:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8011682:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011684:	930b      	str	r3, [sp, #44]	; 0x2c
 8011686:	006b      	lsls	r3, r5, #1
 8011688:	085b      	lsrs	r3, r3, #1
 801168a:	930f      	str	r3, [sp, #60]	; 0x3c
 801168c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801168e:	4ba7      	ldr	r3, [pc, #668]	; (801192c <_printf_float+0x2f4>)
 8011690:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011692:	4252      	negs	r2, r2
 8011694:	f7f0 fc72 	bl	8001f7c <__aeabi_dcmpun>
 8011698:	2800      	cmp	r0, #0
 801169a:	d131      	bne.n	8011700 <_printf_float+0xc8>
 801169c:	2201      	movs	r2, #1
 801169e:	4ba3      	ldr	r3, [pc, #652]	; (801192c <_printf_float+0x2f4>)
 80116a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80116a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80116a4:	4252      	negs	r2, r2
 80116a6:	f7ee fee1 	bl	800046c <__aeabi_dcmple>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d128      	bne.n	8011700 <_printf_float+0xc8>
 80116ae:	2200      	movs	r2, #0
 80116b0:	2300      	movs	r3, #0
 80116b2:	0029      	movs	r1, r5
 80116b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80116b6:	f7ee fecf 	bl	8000458 <__aeabi_dcmplt>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d003      	beq.n	80116c6 <_printf_float+0x8e>
 80116be:	0023      	movs	r3, r4
 80116c0:	222d      	movs	r2, #45	; 0x2d
 80116c2:	3343      	adds	r3, #67	; 0x43
 80116c4:	701a      	strb	r2, [r3, #0]
 80116c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116c8:	4d99      	ldr	r5, [pc, #612]	; (8011930 <_printf_float+0x2f8>)
 80116ca:	2b47      	cmp	r3, #71	; 0x47
 80116cc:	d900      	bls.n	80116d0 <_printf_float+0x98>
 80116ce:	4d99      	ldr	r5, [pc, #612]	; (8011934 <_printf_float+0x2fc>)
 80116d0:	2303      	movs	r3, #3
 80116d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116d4:	6123      	str	r3, [r4, #16]
 80116d6:	3301      	adds	r3, #1
 80116d8:	439a      	bics	r2, r3
 80116da:	2300      	movs	r3, #0
 80116dc:	6022      	str	r2, [r4, #0]
 80116de:	930b      	str	r3, [sp, #44]	; 0x2c
 80116e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e2:	0021      	movs	r1, r4
 80116e4:	0038      	movs	r0, r7
 80116e6:	9600      	str	r6, [sp, #0]
 80116e8:	aa13      	add	r2, sp, #76	; 0x4c
 80116ea:	f000 f9e7 	bl	8011abc <_printf_common>
 80116ee:	1c43      	adds	r3, r0, #1
 80116f0:	d000      	beq.n	80116f4 <_printf_float+0xbc>
 80116f2:	e0a2      	b.n	801183a <_printf_float+0x202>
 80116f4:	2001      	movs	r0, #1
 80116f6:	4240      	negs	r0, r0
 80116f8:	b015      	add	sp, #84	; 0x54
 80116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116fc:	3307      	adds	r3, #7
 80116fe:	e7b6      	b.n	801166e <_printf_float+0x36>
 8011700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011702:	002b      	movs	r3, r5
 8011704:	0010      	movs	r0, r2
 8011706:	0029      	movs	r1, r5
 8011708:	f7f0 fc38 	bl	8001f7c <__aeabi_dcmpun>
 801170c:	2800      	cmp	r0, #0
 801170e:	d00b      	beq.n	8011728 <_printf_float+0xf0>
 8011710:	2d00      	cmp	r5, #0
 8011712:	da03      	bge.n	801171c <_printf_float+0xe4>
 8011714:	0023      	movs	r3, r4
 8011716:	222d      	movs	r2, #45	; 0x2d
 8011718:	3343      	adds	r3, #67	; 0x43
 801171a:	701a      	strb	r2, [r3, #0]
 801171c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801171e:	4d86      	ldr	r5, [pc, #536]	; (8011938 <_printf_float+0x300>)
 8011720:	2b47      	cmp	r3, #71	; 0x47
 8011722:	d9d5      	bls.n	80116d0 <_printf_float+0x98>
 8011724:	4d85      	ldr	r5, [pc, #532]	; (801193c <_printf_float+0x304>)
 8011726:	e7d3      	b.n	80116d0 <_printf_float+0x98>
 8011728:	2220      	movs	r2, #32
 801172a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801172c:	6863      	ldr	r3, [r4, #4]
 801172e:	4391      	bics	r1, r2
 8011730:	910f      	str	r1, [sp, #60]	; 0x3c
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	d149      	bne.n	80117ca <_printf_float+0x192>
 8011736:	3307      	adds	r3, #7
 8011738:	6063      	str	r3, [r4, #4]
 801173a:	2380      	movs	r3, #128	; 0x80
 801173c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	4313      	orrs	r3, r2
 8011742:	2200      	movs	r2, #0
 8011744:	9206      	str	r2, [sp, #24]
 8011746:	aa12      	add	r2, sp, #72	; 0x48
 8011748:	9205      	str	r2, [sp, #20]
 801174a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801174c:	a908      	add	r1, sp, #32
 801174e:	9204      	str	r2, [sp, #16]
 8011750:	aa11      	add	r2, sp, #68	; 0x44
 8011752:	9203      	str	r2, [sp, #12]
 8011754:	2223      	movs	r2, #35	; 0x23
 8011756:	6023      	str	r3, [r4, #0]
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	6863      	ldr	r3, [r4, #4]
 801175c:	1852      	adds	r2, r2, r1
 801175e:	9202      	str	r2, [sp, #8]
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	0038      	movs	r0, r7
 8011764:	002b      	movs	r3, r5
 8011766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011768:	f7ff febb 	bl	80114e2 <__cvt>
 801176c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801176e:	0005      	movs	r5, r0
 8011770:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011772:	2b47      	cmp	r3, #71	; 0x47
 8011774:	d108      	bne.n	8011788 <_printf_float+0x150>
 8011776:	1ccb      	adds	r3, r1, #3
 8011778:	db02      	blt.n	8011780 <_printf_float+0x148>
 801177a:	6863      	ldr	r3, [r4, #4]
 801177c:	4299      	cmp	r1, r3
 801177e:	dd48      	ble.n	8011812 <_printf_float+0x1da>
 8011780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011782:	3b02      	subs	r3, #2
 8011784:	b2db      	uxtb	r3, r3
 8011786:	930a      	str	r3, [sp, #40]	; 0x28
 8011788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801178a:	2b65      	cmp	r3, #101	; 0x65
 801178c:	d824      	bhi.n	80117d8 <_printf_float+0x1a0>
 801178e:	0020      	movs	r0, r4
 8011790:	001a      	movs	r2, r3
 8011792:	3901      	subs	r1, #1
 8011794:	3050      	adds	r0, #80	; 0x50
 8011796:	9111      	str	r1, [sp, #68]	; 0x44
 8011798:	f7ff ff06 	bl	80115a8 <__exponent>
 801179c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801179e:	900b      	str	r0, [sp, #44]	; 0x2c
 80117a0:	1813      	adds	r3, r2, r0
 80117a2:	6123      	str	r3, [r4, #16]
 80117a4:	2a01      	cmp	r2, #1
 80117a6:	dc02      	bgt.n	80117ae <_printf_float+0x176>
 80117a8:	6822      	ldr	r2, [r4, #0]
 80117aa:	07d2      	lsls	r2, r2, #31
 80117ac:	d501      	bpl.n	80117b2 <_printf_float+0x17a>
 80117ae:	3301      	adds	r3, #1
 80117b0:	6123      	str	r3, [r4, #16]
 80117b2:	2323      	movs	r3, #35	; 0x23
 80117b4:	aa08      	add	r2, sp, #32
 80117b6:	189b      	adds	r3, r3, r2
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d100      	bne.n	80117c0 <_printf_float+0x188>
 80117be:	e78f      	b.n	80116e0 <_printf_float+0xa8>
 80117c0:	0023      	movs	r3, r4
 80117c2:	222d      	movs	r2, #45	; 0x2d
 80117c4:	3343      	adds	r3, #67	; 0x43
 80117c6:	701a      	strb	r2, [r3, #0]
 80117c8:	e78a      	b.n	80116e0 <_printf_float+0xa8>
 80117ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117cc:	2a47      	cmp	r2, #71	; 0x47
 80117ce:	d1b4      	bne.n	801173a <_printf_float+0x102>
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1b2      	bne.n	801173a <_printf_float+0x102>
 80117d4:	3301      	adds	r3, #1
 80117d6:	e7af      	b.n	8011738 <_printf_float+0x100>
 80117d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117da:	2b66      	cmp	r3, #102	; 0x66
 80117dc:	d11b      	bne.n	8011816 <_printf_float+0x1de>
 80117de:	6863      	ldr	r3, [r4, #4]
 80117e0:	2900      	cmp	r1, #0
 80117e2:	dd0d      	ble.n	8011800 <_printf_float+0x1c8>
 80117e4:	6121      	str	r1, [r4, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d102      	bne.n	80117f0 <_printf_float+0x1b8>
 80117ea:	6822      	ldr	r2, [r4, #0]
 80117ec:	07d2      	lsls	r2, r2, #31
 80117ee:	d502      	bpl.n	80117f6 <_printf_float+0x1be>
 80117f0:	3301      	adds	r3, #1
 80117f2:	1859      	adds	r1, r3, r1
 80117f4:	6121      	str	r1, [r4, #16]
 80117f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80117fa:	2300      	movs	r3, #0
 80117fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80117fe:	e7d8      	b.n	80117b2 <_printf_float+0x17a>
 8011800:	2b00      	cmp	r3, #0
 8011802:	d103      	bne.n	801180c <_printf_float+0x1d4>
 8011804:	2201      	movs	r2, #1
 8011806:	6821      	ldr	r1, [r4, #0]
 8011808:	4211      	tst	r1, r2
 801180a:	d000      	beq.n	801180e <_printf_float+0x1d6>
 801180c:	1c9a      	adds	r2, r3, #2
 801180e:	6122      	str	r2, [r4, #16]
 8011810:	e7f1      	b.n	80117f6 <_printf_float+0x1be>
 8011812:	2367      	movs	r3, #103	; 0x67
 8011814:	930a      	str	r3, [sp, #40]	; 0x28
 8011816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801181a:	4293      	cmp	r3, r2
 801181c:	db06      	blt.n	801182c <_printf_float+0x1f4>
 801181e:	6822      	ldr	r2, [r4, #0]
 8011820:	6123      	str	r3, [r4, #16]
 8011822:	07d2      	lsls	r2, r2, #31
 8011824:	d5e7      	bpl.n	80117f6 <_printf_float+0x1be>
 8011826:	3301      	adds	r3, #1
 8011828:	6123      	str	r3, [r4, #16]
 801182a:	e7e4      	b.n	80117f6 <_printf_float+0x1be>
 801182c:	2101      	movs	r1, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	dc01      	bgt.n	8011836 <_printf_float+0x1fe>
 8011832:	1849      	adds	r1, r1, r1
 8011834:	1ac9      	subs	r1, r1, r3
 8011836:	1852      	adds	r2, r2, r1
 8011838:	e7e9      	b.n	801180e <_printf_float+0x1d6>
 801183a:	6822      	ldr	r2, [r4, #0]
 801183c:	0553      	lsls	r3, r2, #21
 801183e:	d407      	bmi.n	8011850 <_printf_float+0x218>
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	002a      	movs	r2, r5
 8011844:	0038      	movs	r0, r7
 8011846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011848:	47b0      	blx	r6
 801184a:	1c43      	adds	r3, r0, #1
 801184c:	d128      	bne.n	80118a0 <_printf_float+0x268>
 801184e:	e751      	b.n	80116f4 <_printf_float+0xbc>
 8011850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011852:	2b65      	cmp	r3, #101	; 0x65
 8011854:	d800      	bhi.n	8011858 <_printf_float+0x220>
 8011856:	e0e1      	b.n	8011a1c <_printf_float+0x3e4>
 8011858:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801185a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801185c:	2200      	movs	r2, #0
 801185e:	2300      	movs	r3, #0
 8011860:	f7ee fdf4 	bl	800044c <__aeabi_dcmpeq>
 8011864:	2800      	cmp	r0, #0
 8011866:	d031      	beq.n	80118cc <_printf_float+0x294>
 8011868:	2301      	movs	r3, #1
 801186a:	0038      	movs	r0, r7
 801186c:	4a34      	ldr	r2, [pc, #208]	; (8011940 <_printf_float+0x308>)
 801186e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011870:	47b0      	blx	r6
 8011872:	1c43      	adds	r3, r0, #1
 8011874:	d100      	bne.n	8011878 <_printf_float+0x240>
 8011876:	e73d      	b.n	80116f4 <_printf_float+0xbc>
 8011878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801187a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801187c:	4293      	cmp	r3, r2
 801187e:	db02      	blt.n	8011886 <_printf_float+0x24e>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	07db      	lsls	r3, r3, #31
 8011884:	d50c      	bpl.n	80118a0 <_printf_float+0x268>
 8011886:	0038      	movs	r0, r7
 8011888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801188a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801188c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801188e:	47b0      	blx	r6
 8011890:	2500      	movs	r5, #0
 8011892:	1c43      	adds	r3, r0, #1
 8011894:	d100      	bne.n	8011898 <_printf_float+0x260>
 8011896:	e72d      	b.n	80116f4 <_printf_float+0xbc>
 8011898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801189a:	3b01      	subs	r3, #1
 801189c:	42ab      	cmp	r3, r5
 801189e:	dc0a      	bgt.n	80118b6 <_printf_float+0x27e>
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	079b      	lsls	r3, r3, #30
 80118a4:	d500      	bpl.n	80118a8 <_printf_float+0x270>
 80118a6:	e106      	b.n	8011ab6 <_printf_float+0x47e>
 80118a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80118aa:	68e0      	ldr	r0, [r4, #12]
 80118ac:	4298      	cmp	r0, r3
 80118ae:	db00      	blt.n	80118b2 <_printf_float+0x27a>
 80118b0:	e722      	b.n	80116f8 <_printf_float+0xc0>
 80118b2:	0018      	movs	r0, r3
 80118b4:	e720      	b.n	80116f8 <_printf_float+0xc0>
 80118b6:	0022      	movs	r2, r4
 80118b8:	2301      	movs	r3, #1
 80118ba:	0038      	movs	r0, r7
 80118bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118be:	321a      	adds	r2, #26
 80118c0:	47b0      	blx	r6
 80118c2:	1c43      	adds	r3, r0, #1
 80118c4:	d100      	bne.n	80118c8 <_printf_float+0x290>
 80118c6:	e715      	b.n	80116f4 <_printf_float+0xbc>
 80118c8:	3501      	adds	r5, #1
 80118ca:	e7e5      	b.n	8011898 <_printf_float+0x260>
 80118cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	dc38      	bgt.n	8011944 <_printf_float+0x30c>
 80118d2:	2301      	movs	r3, #1
 80118d4:	0038      	movs	r0, r7
 80118d6:	4a1a      	ldr	r2, [pc, #104]	; (8011940 <_printf_float+0x308>)
 80118d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118da:	47b0      	blx	r6
 80118dc:	1c43      	adds	r3, r0, #1
 80118de:	d100      	bne.n	80118e2 <_printf_float+0x2aa>
 80118e0:	e708      	b.n	80116f4 <_printf_float+0xbc>
 80118e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118e6:	4313      	orrs	r3, r2
 80118e8:	d102      	bne.n	80118f0 <_printf_float+0x2b8>
 80118ea:	6823      	ldr	r3, [r4, #0]
 80118ec:	07db      	lsls	r3, r3, #31
 80118ee:	d5d7      	bpl.n	80118a0 <_printf_float+0x268>
 80118f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118f2:	0038      	movs	r0, r7
 80118f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118f8:	47b0      	blx	r6
 80118fa:	1c43      	adds	r3, r0, #1
 80118fc:	d100      	bne.n	8011900 <_printf_float+0x2c8>
 80118fe:	e6f9      	b.n	80116f4 <_printf_float+0xbc>
 8011900:	2300      	movs	r3, #0
 8011902:	930a      	str	r3, [sp, #40]	; 0x28
 8011904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011908:	425b      	negs	r3, r3
 801190a:	4293      	cmp	r3, r2
 801190c:	dc01      	bgt.n	8011912 <_printf_float+0x2da>
 801190e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011910:	e797      	b.n	8011842 <_printf_float+0x20a>
 8011912:	0022      	movs	r2, r4
 8011914:	2301      	movs	r3, #1
 8011916:	0038      	movs	r0, r7
 8011918:	9909      	ldr	r1, [sp, #36]	; 0x24
 801191a:	321a      	adds	r2, #26
 801191c:	47b0      	blx	r6
 801191e:	1c43      	adds	r3, r0, #1
 8011920:	d100      	bne.n	8011924 <_printf_float+0x2ec>
 8011922:	e6e7      	b.n	80116f4 <_printf_float+0xbc>
 8011924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011926:	3301      	adds	r3, #1
 8011928:	e7eb      	b.n	8011902 <_printf_float+0x2ca>
 801192a:	46c0      	nop			; (mov r8, r8)
 801192c:	7fefffff 	.word	0x7fefffff
 8011930:	080150a4 	.word	0x080150a4
 8011934:	080150a8 	.word	0x080150a8
 8011938:	080150ac 	.word	0x080150ac
 801193c:	080150b0 	.word	0x080150b0
 8011940:	080150b4 	.word	0x080150b4
 8011944:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011948:	920a      	str	r2, [sp, #40]	; 0x28
 801194a:	429a      	cmp	r2, r3
 801194c:	dd00      	ble.n	8011950 <_printf_float+0x318>
 801194e:	930a      	str	r3, [sp, #40]	; 0x28
 8011950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	dc3c      	bgt.n	80119d0 <_printf_float+0x398>
 8011956:	2300      	movs	r3, #0
 8011958:	930d      	str	r3, [sp, #52]	; 0x34
 801195a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801195c:	43db      	mvns	r3, r3
 801195e:	17db      	asrs	r3, r3, #31
 8011960:	930f      	str	r3, [sp, #60]	; 0x3c
 8011962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011966:	930b      	str	r3, [sp, #44]	; 0x2c
 8011968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801196a:	4013      	ands	r3, r2
 801196c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011972:	4293      	cmp	r3, r2
 8011974:	dc34      	bgt.n	80119e0 <_printf_float+0x3a8>
 8011976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011978:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801197a:	4293      	cmp	r3, r2
 801197c:	db3d      	blt.n	80119fa <_printf_float+0x3c2>
 801197e:	6823      	ldr	r3, [r4, #0]
 8011980:	07db      	lsls	r3, r3, #31
 8011982:	d43a      	bmi.n	80119fa <_printf_float+0x3c2>
 8011984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011988:	9911      	ldr	r1, [sp, #68]	; 0x44
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	1a52      	subs	r2, r2, r1
 801198e:	920a      	str	r2, [sp, #40]	; 0x28
 8011990:	429a      	cmp	r2, r3
 8011992:	dd00      	ble.n	8011996 <_printf_float+0x35e>
 8011994:	930a      	str	r3, [sp, #40]	; 0x28
 8011996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011998:	2b00      	cmp	r3, #0
 801199a:	dc36      	bgt.n	8011a0a <_printf_float+0x3d2>
 801199c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801199e:	2500      	movs	r5, #0
 80119a0:	43db      	mvns	r3, r3
 80119a2:	17db      	asrs	r3, r3, #31
 80119a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80119a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80119aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119ac:	1a9b      	subs	r3, r3, r2
 80119ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119b0:	400a      	ands	r2, r1
 80119b2:	1a9b      	subs	r3, r3, r2
 80119b4:	42ab      	cmp	r3, r5
 80119b6:	dc00      	bgt.n	80119ba <_printf_float+0x382>
 80119b8:	e772      	b.n	80118a0 <_printf_float+0x268>
 80119ba:	0022      	movs	r2, r4
 80119bc:	2301      	movs	r3, #1
 80119be:	0038      	movs	r0, r7
 80119c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119c2:	321a      	adds	r2, #26
 80119c4:	47b0      	blx	r6
 80119c6:	1c43      	adds	r3, r0, #1
 80119c8:	d100      	bne.n	80119cc <_printf_float+0x394>
 80119ca:	e693      	b.n	80116f4 <_printf_float+0xbc>
 80119cc:	3501      	adds	r5, #1
 80119ce:	e7ea      	b.n	80119a6 <_printf_float+0x36e>
 80119d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119d2:	002a      	movs	r2, r5
 80119d4:	0038      	movs	r0, r7
 80119d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119d8:	47b0      	blx	r6
 80119da:	1c43      	adds	r3, r0, #1
 80119dc:	d1bb      	bne.n	8011956 <_printf_float+0x31e>
 80119de:	e689      	b.n	80116f4 <_printf_float+0xbc>
 80119e0:	0022      	movs	r2, r4
 80119e2:	2301      	movs	r3, #1
 80119e4:	0038      	movs	r0, r7
 80119e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119e8:	321a      	adds	r2, #26
 80119ea:	47b0      	blx	r6
 80119ec:	1c43      	adds	r3, r0, #1
 80119ee:	d100      	bne.n	80119f2 <_printf_float+0x3ba>
 80119f0:	e680      	b.n	80116f4 <_printf_float+0xbc>
 80119f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119f4:	3301      	adds	r3, #1
 80119f6:	930d      	str	r3, [sp, #52]	; 0x34
 80119f8:	e7b3      	b.n	8011962 <_printf_float+0x32a>
 80119fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119fc:	0038      	movs	r0, r7
 80119fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a02:	47b0      	blx	r6
 8011a04:	1c43      	adds	r3, r0, #1
 8011a06:	d1bd      	bne.n	8011984 <_printf_float+0x34c>
 8011a08:	e674      	b.n	80116f4 <_printf_float+0xbc>
 8011a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a0c:	0038      	movs	r0, r7
 8011a0e:	18ea      	adds	r2, r5, r3
 8011a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a14:	47b0      	blx	r6
 8011a16:	1c43      	adds	r3, r0, #1
 8011a18:	d1c0      	bne.n	801199c <_printf_float+0x364>
 8011a1a:	e66b      	b.n	80116f4 <_printf_float+0xbc>
 8011a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	dc02      	bgt.n	8011a28 <_printf_float+0x3f0>
 8011a22:	2301      	movs	r3, #1
 8011a24:	421a      	tst	r2, r3
 8011a26:	d034      	beq.n	8011a92 <_printf_float+0x45a>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	002a      	movs	r2, r5
 8011a2c:	0038      	movs	r0, r7
 8011a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a30:	47b0      	blx	r6
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	d100      	bne.n	8011a38 <_printf_float+0x400>
 8011a36:	e65d      	b.n	80116f4 <_printf_float+0xbc>
 8011a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a3a:	0038      	movs	r0, r7
 8011a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a40:	47b0      	blx	r6
 8011a42:	1c43      	adds	r3, r0, #1
 8011a44:	d100      	bne.n	8011a48 <_printf_float+0x410>
 8011a46:	e655      	b.n	80116f4 <_printf_float+0xbc>
 8011a48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011a4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f7ee fcfc 	bl	800044c <__aeabi_dcmpeq>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d11a      	bne.n	8011a8e <_printf_float+0x456>
 8011a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a5a:	1c6a      	adds	r2, r5, #1
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	0038      	movs	r0, r7
 8011a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a62:	47b0      	blx	r6
 8011a64:	1c43      	adds	r3, r0, #1
 8011a66:	d10e      	bne.n	8011a86 <_printf_float+0x44e>
 8011a68:	e644      	b.n	80116f4 <_printf_float+0xbc>
 8011a6a:	0022      	movs	r2, r4
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	0038      	movs	r0, r7
 8011a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a72:	321a      	adds	r2, #26
 8011a74:	47b0      	blx	r6
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	d100      	bne.n	8011a7c <_printf_float+0x444>
 8011a7a:	e63b      	b.n	80116f4 <_printf_float+0xbc>
 8011a7c:	3501      	adds	r5, #1
 8011a7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a80:	3b01      	subs	r3, #1
 8011a82:	42ab      	cmp	r3, r5
 8011a84:	dcf1      	bgt.n	8011a6a <_printf_float+0x432>
 8011a86:	0022      	movs	r2, r4
 8011a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a8a:	3250      	adds	r2, #80	; 0x50
 8011a8c:	e6da      	b.n	8011844 <_printf_float+0x20c>
 8011a8e:	2500      	movs	r5, #0
 8011a90:	e7f5      	b.n	8011a7e <_printf_float+0x446>
 8011a92:	002a      	movs	r2, r5
 8011a94:	e7e3      	b.n	8011a5e <_printf_float+0x426>
 8011a96:	0022      	movs	r2, r4
 8011a98:	2301      	movs	r3, #1
 8011a9a:	0038      	movs	r0, r7
 8011a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a9e:	3219      	adds	r2, #25
 8011aa0:	47b0      	blx	r6
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	d100      	bne.n	8011aa8 <_printf_float+0x470>
 8011aa6:	e625      	b.n	80116f4 <_printf_float+0xbc>
 8011aa8:	3501      	adds	r5, #1
 8011aaa:	68e3      	ldr	r3, [r4, #12]
 8011aac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011aae:	1a9b      	subs	r3, r3, r2
 8011ab0:	42ab      	cmp	r3, r5
 8011ab2:	dcf0      	bgt.n	8011a96 <_printf_float+0x45e>
 8011ab4:	e6f8      	b.n	80118a8 <_printf_float+0x270>
 8011ab6:	2500      	movs	r5, #0
 8011ab8:	e7f7      	b.n	8011aaa <_printf_float+0x472>
 8011aba:	46c0      	nop			; (mov r8, r8)

08011abc <_printf_common>:
 8011abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011abe:	0015      	movs	r5, r2
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	688a      	ldr	r2, [r1, #8]
 8011ac4:	690b      	ldr	r3, [r1, #16]
 8011ac6:	000c      	movs	r4, r1
 8011ac8:	9000      	str	r0, [sp, #0]
 8011aca:	4293      	cmp	r3, r2
 8011acc:	da00      	bge.n	8011ad0 <_printf_common+0x14>
 8011ace:	0013      	movs	r3, r2
 8011ad0:	0022      	movs	r2, r4
 8011ad2:	602b      	str	r3, [r5, #0]
 8011ad4:	3243      	adds	r2, #67	; 0x43
 8011ad6:	7812      	ldrb	r2, [r2, #0]
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	d001      	beq.n	8011ae0 <_printf_common+0x24>
 8011adc:	3301      	adds	r3, #1
 8011ade:	602b      	str	r3, [r5, #0]
 8011ae0:	6823      	ldr	r3, [r4, #0]
 8011ae2:	069b      	lsls	r3, r3, #26
 8011ae4:	d502      	bpl.n	8011aec <_printf_common+0x30>
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	3302      	adds	r3, #2
 8011aea:	602b      	str	r3, [r5, #0]
 8011aec:	6822      	ldr	r2, [r4, #0]
 8011aee:	2306      	movs	r3, #6
 8011af0:	0017      	movs	r7, r2
 8011af2:	401f      	ands	r7, r3
 8011af4:	421a      	tst	r2, r3
 8011af6:	d027      	beq.n	8011b48 <_printf_common+0x8c>
 8011af8:	0023      	movs	r3, r4
 8011afa:	3343      	adds	r3, #67	; 0x43
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	1e5a      	subs	r2, r3, #1
 8011b00:	4193      	sbcs	r3, r2
 8011b02:	6822      	ldr	r2, [r4, #0]
 8011b04:	0692      	lsls	r2, r2, #26
 8011b06:	d430      	bmi.n	8011b6a <_printf_common+0xae>
 8011b08:	0022      	movs	r2, r4
 8011b0a:	9901      	ldr	r1, [sp, #4]
 8011b0c:	9800      	ldr	r0, [sp, #0]
 8011b0e:	9e08      	ldr	r6, [sp, #32]
 8011b10:	3243      	adds	r2, #67	; 0x43
 8011b12:	47b0      	blx	r6
 8011b14:	1c43      	adds	r3, r0, #1
 8011b16:	d025      	beq.n	8011b64 <_printf_common+0xa8>
 8011b18:	2306      	movs	r3, #6
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	682a      	ldr	r2, [r5, #0]
 8011b1e:	68e1      	ldr	r1, [r4, #12]
 8011b20:	2500      	movs	r5, #0
 8011b22:	4003      	ands	r3, r0
 8011b24:	2b04      	cmp	r3, #4
 8011b26:	d103      	bne.n	8011b30 <_printf_common+0x74>
 8011b28:	1a8d      	subs	r5, r1, r2
 8011b2a:	43eb      	mvns	r3, r5
 8011b2c:	17db      	asrs	r3, r3, #31
 8011b2e:	401d      	ands	r5, r3
 8011b30:	68a3      	ldr	r3, [r4, #8]
 8011b32:	6922      	ldr	r2, [r4, #16]
 8011b34:	4293      	cmp	r3, r2
 8011b36:	dd01      	ble.n	8011b3c <_printf_common+0x80>
 8011b38:	1a9b      	subs	r3, r3, r2
 8011b3a:	18ed      	adds	r5, r5, r3
 8011b3c:	2700      	movs	r7, #0
 8011b3e:	42bd      	cmp	r5, r7
 8011b40:	d120      	bne.n	8011b84 <_printf_common+0xc8>
 8011b42:	2000      	movs	r0, #0
 8011b44:	e010      	b.n	8011b68 <_printf_common+0xac>
 8011b46:	3701      	adds	r7, #1
 8011b48:	68e3      	ldr	r3, [r4, #12]
 8011b4a:	682a      	ldr	r2, [r5, #0]
 8011b4c:	1a9b      	subs	r3, r3, r2
 8011b4e:	42bb      	cmp	r3, r7
 8011b50:	ddd2      	ble.n	8011af8 <_printf_common+0x3c>
 8011b52:	0022      	movs	r2, r4
 8011b54:	2301      	movs	r3, #1
 8011b56:	9901      	ldr	r1, [sp, #4]
 8011b58:	9800      	ldr	r0, [sp, #0]
 8011b5a:	9e08      	ldr	r6, [sp, #32]
 8011b5c:	3219      	adds	r2, #25
 8011b5e:	47b0      	blx	r6
 8011b60:	1c43      	adds	r3, r0, #1
 8011b62:	d1f0      	bne.n	8011b46 <_printf_common+0x8a>
 8011b64:	2001      	movs	r0, #1
 8011b66:	4240      	negs	r0, r0
 8011b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011b6a:	2030      	movs	r0, #48	; 0x30
 8011b6c:	18e1      	adds	r1, r4, r3
 8011b6e:	3143      	adds	r1, #67	; 0x43
 8011b70:	7008      	strb	r0, [r1, #0]
 8011b72:	0021      	movs	r1, r4
 8011b74:	1c5a      	adds	r2, r3, #1
 8011b76:	3145      	adds	r1, #69	; 0x45
 8011b78:	7809      	ldrb	r1, [r1, #0]
 8011b7a:	18a2      	adds	r2, r4, r2
 8011b7c:	3243      	adds	r2, #67	; 0x43
 8011b7e:	3302      	adds	r3, #2
 8011b80:	7011      	strb	r1, [r2, #0]
 8011b82:	e7c1      	b.n	8011b08 <_printf_common+0x4c>
 8011b84:	0022      	movs	r2, r4
 8011b86:	2301      	movs	r3, #1
 8011b88:	9901      	ldr	r1, [sp, #4]
 8011b8a:	9800      	ldr	r0, [sp, #0]
 8011b8c:	9e08      	ldr	r6, [sp, #32]
 8011b8e:	321a      	adds	r2, #26
 8011b90:	47b0      	blx	r6
 8011b92:	1c43      	adds	r3, r0, #1
 8011b94:	d0e6      	beq.n	8011b64 <_printf_common+0xa8>
 8011b96:	3701      	adds	r7, #1
 8011b98:	e7d1      	b.n	8011b3e <_printf_common+0x82>
	...

08011b9c <_printf_i>:
 8011b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b9e:	b08b      	sub	sp, #44	; 0x2c
 8011ba0:	9206      	str	r2, [sp, #24]
 8011ba2:	000a      	movs	r2, r1
 8011ba4:	3243      	adds	r2, #67	; 0x43
 8011ba6:	9307      	str	r3, [sp, #28]
 8011ba8:	9005      	str	r0, [sp, #20]
 8011baa:	9204      	str	r2, [sp, #16]
 8011bac:	7e0a      	ldrb	r2, [r1, #24]
 8011bae:	000c      	movs	r4, r1
 8011bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bb2:	2a78      	cmp	r2, #120	; 0x78
 8011bb4:	d807      	bhi.n	8011bc6 <_printf_i+0x2a>
 8011bb6:	2a62      	cmp	r2, #98	; 0x62
 8011bb8:	d809      	bhi.n	8011bce <_printf_i+0x32>
 8011bba:	2a00      	cmp	r2, #0
 8011bbc:	d100      	bne.n	8011bc0 <_printf_i+0x24>
 8011bbe:	e0c1      	b.n	8011d44 <_printf_i+0x1a8>
 8011bc0:	2a58      	cmp	r2, #88	; 0x58
 8011bc2:	d100      	bne.n	8011bc6 <_printf_i+0x2a>
 8011bc4:	e08c      	b.n	8011ce0 <_printf_i+0x144>
 8011bc6:	0026      	movs	r6, r4
 8011bc8:	3642      	adds	r6, #66	; 0x42
 8011bca:	7032      	strb	r2, [r6, #0]
 8011bcc:	e022      	b.n	8011c14 <_printf_i+0x78>
 8011bce:	0010      	movs	r0, r2
 8011bd0:	3863      	subs	r0, #99	; 0x63
 8011bd2:	2815      	cmp	r0, #21
 8011bd4:	d8f7      	bhi.n	8011bc6 <_printf_i+0x2a>
 8011bd6:	f7ee faa9 	bl	800012c <__gnu_thumb1_case_shi>
 8011bda:	0016      	.short	0x0016
 8011bdc:	fff6001f 	.word	0xfff6001f
 8011be0:	fff6fff6 	.word	0xfff6fff6
 8011be4:	001ffff6 	.word	0x001ffff6
 8011be8:	fff6fff6 	.word	0xfff6fff6
 8011bec:	fff6fff6 	.word	0xfff6fff6
 8011bf0:	003600a8 	.word	0x003600a8
 8011bf4:	fff6009a 	.word	0xfff6009a
 8011bf8:	00b9fff6 	.word	0x00b9fff6
 8011bfc:	0036fff6 	.word	0x0036fff6
 8011c00:	fff6fff6 	.word	0xfff6fff6
 8011c04:	009e      	.short	0x009e
 8011c06:	0026      	movs	r6, r4
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	3642      	adds	r6, #66	; 0x42
 8011c0c:	1d11      	adds	r1, r2, #4
 8011c0e:	6019      	str	r1, [r3, #0]
 8011c10:	6813      	ldr	r3, [r2, #0]
 8011c12:	7033      	strb	r3, [r6, #0]
 8011c14:	2301      	movs	r3, #1
 8011c16:	e0a7      	b.n	8011d68 <_printf_i+0x1cc>
 8011c18:	6808      	ldr	r0, [r1, #0]
 8011c1a:	6819      	ldr	r1, [r3, #0]
 8011c1c:	1d0a      	adds	r2, r1, #4
 8011c1e:	0605      	lsls	r5, r0, #24
 8011c20:	d50b      	bpl.n	8011c3a <_printf_i+0x9e>
 8011c22:	680d      	ldr	r5, [r1, #0]
 8011c24:	601a      	str	r2, [r3, #0]
 8011c26:	2d00      	cmp	r5, #0
 8011c28:	da03      	bge.n	8011c32 <_printf_i+0x96>
 8011c2a:	232d      	movs	r3, #45	; 0x2d
 8011c2c:	9a04      	ldr	r2, [sp, #16]
 8011c2e:	426d      	negs	r5, r5
 8011c30:	7013      	strb	r3, [r2, #0]
 8011c32:	4b61      	ldr	r3, [pc, #388]	; (8011db8 <_printf_i+0x21c>)
 8011c34:	270a      	movs	r7, #10
 8011c36:	9303      	str	r3, [sp, #12]
 8011c38:	e01b      	b.n	8011c72 <_printf_i+0xd6>
 8011c3a:	680d      	ldr	r5, [r1, #0]
 8011c3c:	601a      	str	r2, [r3, #0]
 8011c3e:	0641      	lsls	r1, r0, #25
 8011c40:	d5f1      	bpl.n	8011c26 <_printf_i+0x8a>
 8011c42:	b22d      	sxth	r5, r5
 8011c44:	e7ef      	b.n	8011c26 <_printf_i+0x8a>
 8011c46:	680d      	ldr	r5, [r1, #0]
 8011c48:	6819      	ldr	r1, [r3, #0]
 8011c4a:	1d08      	adds	r0, r1, #4
 8011c4c:	6018      	str	r0, [r3, #0]
 8011c4e:	062e      	lsls	r6, r5, #24
 8011c50:	d501      	bpl.n	8011c56 <_printf_i+0xba>
 8011c52:	680d      	ldr	r5, [r1, #0]
 8011c54:	e003      	b.n	8011c5e <_printf_i+0xc2>
 8011c56:	066d      	lsls	r5, r5, #25
 8011c58:	d5fb      	bpl.n	8011c52 <_printf_i+0xb6>
 8011c5a:	680d      	ldr	r5, [r1, #0]
 8011c5c:	b2ad      	uxth	r5, r5
 8011c5e:	4b56      	ldr	r3, [pc, #344]	; (8011db8 <_printf_i+0x21c>)
 8011c60:	2708      	movs	r7, #8
 8011c62:	9303      	str	r3, [sp, #12]
 8011c64:	2a6f      	cmp	r2, #111	; 0x6f
 8011c66:	d000      	beq.n	8011c6a <_printf_i+0xce>
 8011c68:	3702      	adds	r7, #2
 8011c6a:	0023      	movs	r3, r4
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	3343      	adds	r3, #67	; 0x43
 8011c70:	701a      	strb	r2, [r3, #0]
 8011c72:	6863      	ldr	r3, [r4, #4]
 8011c74:	60a3      	str	r3, [r4, #8]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	db03      	blt.n	8011c82 <_printf_i+0xe6>
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	6821      	ldr	r1, [r4, #0]
 8011c7e:	4391      	bics	r1, r2
 8011c80:	6021      	str	r1, [r4, #0]
 8011c82:	2d00      	cmp	r5, #0
 8011c84:	d102      	bne.n	8011c8c <_printf_i+0xf0>
 8011c86:	9e04      	ldr	r6, [sp, #16]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00c      	beq.n	8011ca6 <_printf_i+0x10a>
 8011c8c:	9e04      	ldr	r6, [sp, #16]
 8011c8e:	0028      	movs	r0, r5
 8011c90:	0039      	movs	r1, r7
 8011c92:	f7ee fadb 	bl	800024c <__aeabi_uidivmod>
 8011c96:	9b03      	ldr	r3, [sp, #12]
 8011c98:	3e01      	subs	r6, #1
 8011c9a:	5c5b      	ldrb	r3, [r3, r1]
 8011c9c:	7033      	strb	r3, [r6, #0]
 8011c9e:	002b      	movs	r3, r5
 8011ca0:	0005      	movs	r5, r0
 8011ca2:	429f      	cmp	r7, r3
 8011ca4:	d9f3      	bls.n	8011c8e <_printf_i+0xf2>
 8011ca6:	2f08      	cmp	r7, #8
 8011ca8:	d109      	bne.n	8011cbe <_printf_i+0x122>
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	07db      	lsls	r3, r3, #31
 8011cae:	d506      	bpl.n	8011cbe <_printf_i+0x122>
 8011cb0:	6863      	ldr	r3, [r4, #4]
 8011cb2:	6922      	ldr	r2, [r4, #16]
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	dc02      	bgt.n	8011cbe <_printf_i+0x122>
 8011cb8:	2330      	movs	r3, #48	; 0x30
 8011cba:	3e01      	subs	r6, #1
 8011cbc:	7033      	strb	r3, [r6, #0]
 8011cbe:	9b04      	ldr	r3, [sp, #16]
 8011cc0:	1b9b      	subs	r3, r3, r6
 8011cc2:	6123      	str	r3, [r4, #16]
 8011cc4:	9b07      	ldr	r3, [sp, #28]
 8011cc6:	0021      	movs	r1, r4
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	9805      	ldr	r0, [sp, #20]
 8011ccc:	9b06      	ldr	r3, [sp, #24]
 8011cce:	aa09      	add	r2, sp, #36	; 0x24
 8011cd0:	f7ff fef4 	bl	8011abc <_printf_common>
 8011cd4:	1c43      	adds	r3, r0, #1
 8011cd6:	d14c      	bne.n	8011d72 <_printf_i+0x1d6>
 8011cd8:	2001      	movs	r0, #1
 8011cda:	4240      	negs	r0, r0
 8011cdc:	b00b      	add	sp, #44	; 0x2c
 8011cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ce0:	3145      	adds	r1, #69	; 0x45
 8011ce2:	700a      	strb	r2, [r1, #0]
 8011ce4:	4a34      	ldr	r2, [pc, #208]	; (8011db8 <_printf_i+0x21c>)
 8011ce6:	9203      	str	r2, [sp, #12]
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	6821      	ldr	r1, [r4, #0]
 8011cec:	ca20      	ldmia	r2!, {r5}
 8011cee:	601a      	str	r2, [r3, #0]
 8011cf0:	0608      	lsls	r0, r1, #24
 8011cf2:	d516      	bpl.n	8011d22 <_printf_i+0x186>
 8011cf4:	07cb      	lsls	r3, r1, #31
 8011cf6:	d502      	bpl.n	8011cfe <_printf_i+0x162>
 8011cf8:	2320      	movs	r3, #32
 8011cfa:	4319      	orrs	r1, r3
 8011cfc:	6021      	str	r1, [r4, #0]
 8011cfe:	2710      	movs	r7, #16
 8011d00:	2d00      	cmp	r5, #0
 8011d02:	d1b2      	bne.n	8011c6a <_printf_i+0xce>
 8011d04:	2320      	movs	r3, #32
 8011d06:	6822      	ldr	r2, [r4, #0]
 8011d08:	439a      	bics	r2, r3
 8011d0a:	6022      	str	r2, [r4, #0]
 8011d0c:	e7ad      	b.n	8011c6a <_printf_i+0xce>
 8011d0e:	2220      	movs	r2, #32
 8011d10:	6809      	ldr	r1, [r1, #0]
 8011d12:	430a      	orrs	r2, r1
 8011d14:	6022      	str	r2, [r4, #0]
 8011d16:	0022      	movs	r2, r4
 8011d18:	2178      	movs	r1, #120	; 0x78
 8011d1a:	3245      	adds	r2, #69	; 0x45
 8011d1c:	7011      	strb	r1, [r2, #0]
 8011d1e:	4a27      	ldr	r2, [pc, #156]	; (8011dbc <_printf_i+0x220>)
 8011d20:	e7e1      	b.n	8011ce6 <_printf_i+0x14a>
 8011d22:	0648      	lsls	r0, r1, #25
 8011d24:	d5e6      	bpl.n	8011cf4 <_printf_i+0x158>
 8011d26:	b2ad      	uxth	r5, r5
 8011d28:	e7e4      	b.n	8011cf4 <_printf_i+0x158>
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	680d      	ldr	r5, [r1, #0]
 8011d2e:	1d10      	adds	r0, r2, #4
 8011d30:	6949      	ldr	r1, [r1, #20]
 8011d32:	6018      	str	r0, [r3, #0]
 8011d34:	6813      	ldr	r3, [r2, #0]
 8011d36:	062e      	lsls	r6, r5, #24
 8011d38:	d501      	bpl.n	8011d3e <_printf_i+0x1a2>
 8011d3a:	6019      	str	r1, [r3, #0]
 8011d3c:	e002      	b.n	8011d44 <_printf_i+0x1a8>
 8011d3e:	066d      	lsls	r5, r5, #25
 8011d40:	d5fb      	bpl.n	8011d3a <_printf_i+0x19e>
 8011d42:	8019      	strh	r1, [r3, #0]
 8011d44:	2300      	movs	r3, #0
 8011d46:	9e04      	ldr	r6, [sp, #16]
 8011d48:	6123      	str	r3, [r4, #16]
 8011d4a:	e7bb      	b.n	8011cc4 <_printf_i+0x128>
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	1d11      	adds	r1, r2, #4
 8011d50:	6019      	str	r1, [r3, #0]
 8011d52:	6816      	ldr	r6, [r2, #0]
 8011d54:	2100      	movs	r1, #0
 8011d56:	0030      	movs	r0, r6
 8011d58:	6862      	ldr	r2, [r4, #4]
 8011d5a:	f001 fb1b 	bl	8013394 <memchr>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d001      	beq.n	8011d66 <_printf_i+0x1ca>
 8011d62:	1b80      	subs	r0, r0, r6
 8011d64:	6060      	str	r0, [r4, #4]
 8011d66:	6863      	ldr	r3, [r4, #4]
 8011d68:	6123      	str	r3, [r4, #16]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	9a04      	ldr	r2, [sp, #16]
 8011d6e:	7013      	strb	r3, [r2, #0]
 8011d70:	e7a8      	b.n	8011cc4 <_printf_i+0x128>
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	0032      	movs	r2, r6
 8011d76:	9906      	ldr	r1, [sp, #24]
 8011d78:	9805      	ldr	r0, [sp, #20]
 8011d7a:	9d07      	ldr	r5, [sp, #28]
 8011d7c:	47a8      	blx	r5
 8011d7e:	1c43      	adds	r3, r0, #1
 8011d80:	d0aa      	beq.n	8011cd8 <_printf_i+0x13c>
 8011d82:	6823      	ldr	r3, [r4, #0]
 8011d84:	079b      	lsls	r3, r3, #30
 8011d86:	d415      	bmi.n	8011db4 <_printf_i+0x218>
 8011d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d8a:	68e0      	ldr	r0, [r4, #12]
 8011d8c:	4298      	cmp	r0, r3
 8011d8e:	daa5      	bge.n	8011cdc <_printf_i+0x140>
 8011d90:	0018      	movs	r0, r3
 8011d92:	e7a3      	b.n	8011cdc <_printf_i+0x140>
 8011d94:	0022      	movs	r2, r4
 8011d96:	2301      	movs	r3, #1
 8011d98:	9906      	ldr	r1, [sp, #24]
 8011d9a:	9805      	ldr	r0, [sp, #20]
 8011d9c:	9e07      	ldr	r6, [sp, #28]
 8011d9e:	3219      	adds	r2, #25
 8011da0:	47b0      	blx	r6
 8011da2:	1c43      	adds	r3, r0, #1
 8011da4:	d098      	beq.n	8011cd8 <_printf_i+0x13c>
 8011da6:	3501      	adds	r5, #1
 8011da8:	68e3      	ldr	r3, [r4, #12]
 8011daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011dac:	1a9b      	subs	r3, r3, r2
 8011dae:	42ab      	cmp	r3, r5
 8011db0:	dcf0      	bgt.n	8011d94 <_printf_i+0x1f8>
 8011db2:	e7e9      	b.n	8011d88 <_printf_i+0x1ec>
 8011db4:	2500      	movs	r5, #0
 8011db6:	e7f7      	b.n	8011da8 <_printf_i+0x20c>
 8011db8:	080150b6 	.word	0x080150b6
 8011dbc:	080150c7 	.word	0x080150c7

08011dc0 <iprintf>:
 8011dc0:	b40f      	push	{r0, r1, r2, r3}
 8011dc2:	4b0b      	ldr	r3, [pc, #44]	; (8011df0 <iprintf+0x30>)
 8011dc4:	b513      	push	{r0, r1, r4, lr}
 8011dc6:	681c      	ldr	r4, [r3, #0]
 8011dc8:	2c00      	cmp	r4, #0
 8011dca:	d005      	beq.n	8011dd8 <iprintf+0x18>
 8011dcc:	69a3      	ldr	r3, [r4, #24]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d102      	bne.n	8011dd8 <iprintf+0x18>
 8011dd2:	0020      	movs	r0, r4
 8011dd4:	f001 f9b0 	bl	8013138 <__sinit>
 8011dd8:	ab05      	add	r3, sp, #20
 8011dda:	0020      	movs	r0, r4
 8011ddc:	9a04      	ldr	r2, [sp, #16]
 8011dde:	68a1      	ldr	r1, [r4, #8]
 8011de0:	9301      	str	r3, [sp, #4]
 8011de2:	f002 f917 	bl	8014014 <_vfiprintf_r>
 8011de6:	bc16      	pop	{r1, r2, r4}
 8011de8:	bc08      	pop	{r3}
 8011dea:	b004      	add	sp, #16
 8011dec:	4718      	bx	r3
 8011dee:	46c0      	nop			; (mov r8, r8)
 8011df0:	200002ec 	.word	0x200002ec

08011df4 <_puts_r>:
 8011df4:	b570      	push	{r4, r5, r6, lr}
 8011df6:	0005      	movs	r5, r0
 8011df8:	000e      	movs	r6, r1
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d004      	beq.n	8011e08 <_puts_r+0x14>
 8011dfe:	6983      	ldr	r3, [r0, #24]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d101      	bne.n	8011e08 <_puts_r+0x14>
 8011e04:	f001 f998 	bl	8013138 <__sinit>
 8011e08:	69ab      	ldr	r3, [r5, #24]
 8011e0a:	68ac      	ldr	r4, [r5, #8]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d102      	bne.n	8011e16 <_puts_r+0x22>
 8011e10:	0028      	movs	r0, r5
 8011e12:	f001 f991 	bl	8013138 <__sinit>
 8011e16:	4b2d      	ldr	r3, [pc, #180]	; (8011ecc <_puts_r+0xd8>)
 8011e18:	429c      	cmp	r4, r3
 8011e1a:	d122      	bne.n	8011e62 <_puts_r+0x6e>
 8011e1c:	686c      	ldr	r4, [r5, #4]
 8011e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e20:	07db      	lsls	r3, r3, #31
 8011e22:	d405      	bmi.n	8011e30 <_puts_r+0x3c>
 8011e24:	89a3      	ldrh	r3, [r4, #12]
 8011e26:	059b      	lsls	r3, r3, #22
 8011e28:	d402      	bmi.n	8011e30 <_puts_r+0x3c>
 8011e2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e2c:	f001 fa39 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	071b      	lsls	r3, r3, #28
 8011e34:	d502      	bpl.n	8011e3c <_puts_r+0x48>
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d129      	bne.n	8011e90 <_puts_r+0x9c>
 8011e3c:	0021      	movs	r1, r4
 8011e3e:	0028      	movs	r0, r5
 8011e40:	f000 f910 	bl	8012064 <__swsetup_r>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d023      	beq.n	8011e90 <_puts_r+0x9c>
 8011e48:	2501      	movs	r5, #1
 8011e4a:	426d      	negs	r5, r5
 8011e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e4e:	07db      	lsls	r3, r3, #31
 8011e50:	d405      	bmi.n	8011e5e <_puts_r+0x6a>
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	059b      	lsls	r3, r3, #22
 8011e56:	d402      	bmi.n	8011e5e <_puts_r+0x6a>
 8011e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e5a:	f001 fa23 	bl	80132a4 <__retarget_lock_release_recursive>
 8011e5e:	0028      	movs	r0, r5
 8011e60:	bd70      	pop	{r4, r5, r6, pc}
 8011e62:	4b1b      	ldr	r3, [pc, #108]	; (8011ed0 <_puts_r+0xdc>)
 8011e64:	429c      	cmp	r4, r3
 8011e66:	d101      	bne.n	8011e6c <_puts_r+0x78>
 8011e68:	68ac      	ldr	r4, [r5, #8]
 8011e6a:	e7d8      	b.n	8011e1e <_puts_r+0x2a>
 8011e6c:	4b19      	ldr	r3, [pc, #100]	; (8011ed4 <_puts_r+0xe0>)
 8011e6e:	429c      	cmp	r4, r3
 8011e70:	d1d5      	bne.n	8011e1e <_puts_r+0x2a>
 8011e72:	68ec      	ldr	r4, [r5, #12]
 8011e74:	e7d3      	b.n	8011e1e <_puts_r+0x2a>
 8011e76:	3601      	adds	r6, #1
 8011e78:	60a3      	str	r3, [r4, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	da04      	bge.n	8011e88 <_puts_r+0x94>
 8011e7e:	69a2      	ldr	r2, [r4, #24]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	dc16      	bgt.n	8011eb2 <_puts_r+0xbe>
 8011e84:	290a      	cmp	r1, #10
 8011e86:	d014      	beq.n	8011eb2 <_puts_r+0xbe>
 8011e88:	6823      	ldr	r3, [r4, #0]
 8011e8a:	1c5a      	adds	r2, r3, #1
 8011e8c:	6022      	str	r2, [r4, #0]
 8011e8e:	7019      	strb	r1, [r3, #0]
 8011e90:	68a3      	ldr	r3, [r4, #8]
 8011e92:	7831      	ldrb	r1, [r6, #0]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	2900      	cmp	r1, #0
 8011e98:	d1ed      	bne.n	8011e76 <_puts_r+0x82>
 8011e9a:	60a3      	str	r3, [r4, #8]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	da0f      	bge.n	8011ec0 <_puts_r+0xcc>
 8011ea0:	0028      	movs	r0, r5
 8011ea2:	0022      	movs	r2, r4
 8011ea4:	310a      	adds	r1, #10
 8011ea6:	f000 f887 	bl	8011fb8 <__swbuf_r>
 8011eaa:	250a      	movs	r5, #10
 8011eac:	1c43      	adds	r3, r0, #1
 8011eae:	d1cd      	bne.n	8011e4c <_puts_r+0x58>
 8011eb0:	e7ca      	b.n	8011e48 <_puts_r+0x54>
 8011eb2:	0022      	movs	r2, r4
 8011eb4:	0028      	movs	r0, r5
 8011eb6:	f000 f87f 	bl	8011fb8 <__swbuf_r>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	d1e8      	bne.n	8011e90 <_puts_r+0x9c>
 8011ebe:	e7c3      	b.n	8011e48 <_puts_r+0x54>
 8011ec0:	250a      	movs	r5, #10
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	1c5a      	adds	r2, r3, #1
 8011ec6:	6022      	str	r2, [r4, #0]
 8011ec8:	701d      	strb	r5, [r3, #0]
 8011eca:	e7bf      	b.n	8011e4c <_puts_r+0x58>
 8011ecc:	08015320 	.word	0x08015320
 8011ed0:	08015340 	.word	0x08015340
 8011ed4:	08015300 	.word	0x08015300

08011ed8 <puts>:
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	4b03      	ldr	r3, [pc, #12]	; (8011ee8 <puts+0x10>)
 8011edc:	0001      	movs	r1, r0
 8011ede:	6818      	ldr	r0, [r3, #0]
 8011ee0:	f7ff ff88 	bl	8011df4 <_puts_r>
 8011ee4:	bd10      	pop	{r4, pc}
 8011ee6:	46c0      	nop			; (mov r8, r8)
 8011ee8:	200002ec 	.word	0x200002ec

08011eec <rand>:
 8011eec:	4b16      	ldr	r3, [pc, #88]	; (8011f48 <rand+0x5c>)
 8011eee:	b510      	push	{r4, lr}
 8011ef0:	681c      	ldr	r4, [r3, #0]
 8011ef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d116      	bne.n	8011f26 <rand+0x3a>
 8011ef8:	2018      	movs	r0, #24
 8011efa:	f001 fa41 	bl	8013380 <malloc>
 8011efe:	1e02      	subs	r2, r0, #0
 8011f00:	63a0      	str	r0, [r4, #56]	; 0x38
 8011f02:	d104      	bne.n	8011f0e <rand+0x22>
 8011f04:	214e      	movs	r1, #78	; 0x4e
 8011f06:	4b11      	ldr	r3, [pc, #68]	; (8011f4c <rand+0x60>)
 8011f08:	4811      	ldr	r0, [pc, #68]	; (8011f50 <rand+0x64>)
 8011f0a:	f000 f923 	bl	8012154 <__assert_func>
 8011f0e:	4b11      	ldr	r3, [pc, #68]	; (8011f54 <rand+0x68>)
 8011f10:	2100      	movs	r1, #0
 8011f12:	6003      	str	r3, [r0, #0]
 8011f14:	4b10      	ldr	r3, [pc, #64]	; (8011f58 <rand+0x6c>)
 8011f16:	6043      	str	r3, [r0, #4]
 8011f18:	4b10      	ldr	r3, [pc, #64]	; (8011f5c <rand+0x70>)
 8011f1a:	6083      	str	r3, [r0, #8]
 8011f1c:	230b      	movs	r3, #11
 8011f1e:	8183      	strh	r3, [r0, #12]
 8011f20:	2001      	movs	r0, #1
 8011f22:	6110      	str	r0, [r2, #16]
 8011f24:	6151      	str	r1, [r2, #20]
 8011f26:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8011f28:	4a0d      	ldr	r2, [pc, #52]	; (8011f60 <rand+0x74>)
 8011f2a:	6920      	ldr	r0, [r4, #16]
 8011f2c:	6961      	ldr	r1, [r4, #20]
 8011f2e:	4b0d      	ldr	r3, [pc, #52]	; (8011f64 <rand+0x78>)
 8011f30:	f7ee faba 	bl	80004a8 <__aeabi_lmul>
 8011f34:	2201      	movs	r2, #1
 8011f36:	2300      	movs	r3, #0
 8011f38:	1880      	adds	r0, r0, r2
 8011f3a:	4159      	adcs	r1, r3
 8011f3c:	6120      	str	r0, [r4, #16]
 8011f3e:	6161      	str	r1, [r4, #20]
 8011f40:	0048      	lsls	r0, r1, #1
 8011f42:	0840      	lsrs	r0, r0, #1
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	46c0      	nop			; (mov r8, r8)
 8011f48:	200002ec 	.word	0x200002ec
 8011f4c:	080150d8 	.word	0x080150d8
 8011f50:	080150ef 	.word	0x080150ef
 8011f54:	abcd330e 	.word	0xabcd330e
 8011f58:	e66d1234 	.word	0xe66d1234
 8011f5c:	0005deec 	.word	0x0005deec
 8011f60:	4c957f2d 	.word	0x4c957f2d
 8011f64:	5851f42d 	.word	0x5851f42d

08011f68 <siprintf>:
 8011f68:	b40e      	push	{r1, r2, r3}
 8011f6a:	b500      	push	{lr}
 8011f6c:	490b      	ldr	r1, [pc, #44]	; (8011f9c <siprintf+0x34>)
 8011f6e:	b09c      	sub	sp, #112	; 0x70
 8011f70:	ab1d      	add	r3, sp, #116	; 0x74
 8011f72:	9002      	str	r0, [sp, #8]
 8011f74:	9006      	str	r0, [sp, #24]
 8011f76:	9107      	str	r1, [sp, #28]
 8011f78:	9104      	str	r1, [sp, #16]
 8011f7a:	4809      	ldr	r0, [pc, #36]	; (8011fa0 <siprintf+0x38>)
 8011f7c:	4909      	ldr	r1, [pc, #36]	; (8011fa4 <siprintf+0x3c>)
 8011f7e:	cb04      	ldmia	r3!, {r2}
 8011f80:	9105      	str	r1, [sp, #20]
 8011f82:	6800      	ldr	r0, [r0, #0]
 8011f84:	a902      	add	r1, sp, #8
 8011f86:	9301      	str	r3, [sp, #4]
 8011f88:	f001 ff1c 	bl	8013dc4 <_svfiprintf_r>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	9a02      	ldr	r2, [sp, #8]
 8011f90:	7013      	strb	r3, [r2, #0]
 8011f92:	b01c      	add	sp, #112	; 0x70
 8011f94:	bc08      	pop	{r3}
 8011f96:	b003      	add	sp, #12
 8011f98:	4718      	bx	r3
 8011f9a:	46c0      	nop			; (mov r8, r8)
 8011f9c:	7fffffff 	.word	0x7fffffff
 8011fa0:	200002ec 	.word	0x200002ec
 8011fa4:	ffff0208 	.word	0xffff0208

08011fa8 <strcpy>:
 8011fa8:	0003      	movs	r3, r0
 8011faa:	780a      	ldrb	r2, [r1, #0]
 8011fac:	3101      	adds	r1, #1
 8011fae:	701a      	strb	r2, [r3, #0]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	2a00      	cmp	r2, #0
 8011fb4:	d1f9      	bne.n	8011faa <strcpy+0x2>
 8011fb6:	4770      	bx	lr

08011fb8 <__swbuf_r>:
 8011fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fba:	0005      	movs	r5, r0
 8011fbc:	000e      	movs	r6, r1
 8011fbe:	0014      	movs	r4, r2
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d004      	beq.n	8011fce <__swbuf_r+0x16>
 8011fc4:	6983      	ldr	r3, [r0, #24]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d101      	bne.n	8011fce <__swbuf_r+0x16>
 8011fca:	f001 f8b5 	bl	8013138 <__sinit>
 8011fce:	4b22      	ldr	r3, [pc, #136]	; (8012058 <__swbuf_r+0xa0>)
 8011fd0:	429c      	cmp	r4, r3
 8011fd2:	d12e      	bne.n	8012032 <__swbuf_r+0x7a>
 8011fd4:	686c      	ldr	r4, [r5, #4]
 8011fd6:	69a3      	ldr	r3, [r4, #24]
 8011fd8:	60a3      	str	r3, [r4, #8]
 8011fda:	89a3      	ldrh	r3, [r4, #12]
 8011fdc:	071b      	lsls	r3, r3, #28
 8011fde:	d532      	bpl.n	8012046 <__swbuf_r+0x8e>
 8011fe0:	6923      	ldr	r3, [r4, #16]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d02f      	beq.n	8012046 <__swbuf_r+0x8e>
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	6922      	ldr	r2, [r4, #16]
 8011fea:	b2f7      	uxtb	r7, r6
 8011fec:	1a98      	subs	r0, r3, r2
 8011fee:	6963      	ldr	r3, [r4, #20]
 8011ff0:	b2f6      	uxtb	r6, r6
 8011ff2:	4283      	cmp	r3, r0
 8011ff4:	dc05      	bgt.n	8012002 <__swbuf_r+0x4a>
 8011ff6:	0021      	movs	r1, r4
 8011ff8:	0028      	movs	r0, r5
 8011ffa:	f000 fffb 	bl	8012ff4 <_fflush_r>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d127      	bne.n	8012052 <__swbuf_r+0x9a>
 8012002:	68a3      	ldr	r3, [r4, #8]
 8012004:	3001      	adds	r0, #1
 8012006:	3b01      	subs	r3, #1
 8012008:	60a3      	str	r3, [r4, #8]
 801200a:	6823      	ldr	r3, [r4, #0]
 801200c:	1c5a      	adds	r2, r3, #1
 801200e:	6022      	str	r2, [r4, #0]
 8012010:	701f      	strb	r7, [r3, #0]
 8012012:	6963      	ldr	r3, [r4, #20]
 8012014:	4283      	cmp	r3, r0
 8012016:	d004      	beq.n	8012022 <__swbuf_r+0x6a>
 8012018:	89a3      	ldrh	r3, [r4, #12]
 801201a:	07db      	lsls	r3, r3, #31
 801201c:	d507      	bpl.n	801202e <__swbuf_r+0x76>
 801201e:	2e0a      	cmp	r6, #10
 8012020:	d105      	bne.n	801202e <__swbuf_r+0x76>
 8012022:	0021      	movs	r1, r4
 8012024:	0028      	movs	r0, r5
 8012026:	f000 ffe5 	bl	8012ff4 <_fflush_r>
 801202a:	2800      	cmp	r0, #0
 801202c:	d111      	bne.n	8012052 <__swbuf_r+0x9a>
 801202e:	0030      	movs	r0, r6
 8012030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012032:	4b0a      	ldr	r3, [pc, #40]	; (801205c <__swbuf_r+0xa4>)
 8012034:	429c      	cmp	r4, r3
 8012036:	d101      	bne.n	801203c <__swbuf_r+0x84>
 8012038:	68ac      	ldr	r4, [r5, #8]
 801203a:	e7cc      	b.n	8011fd6 <__swbuf_r+0x1e>
 801203c:	4b08      	ldr	r3, [pc, #32]	; (8012060 <__swbuf_r+0xa8>)
 801203e:	429c      	cmp	r4, r3
 8012040:	d1c9      	bne.n	8011fd6 <__swbuf_r+0x1e>
 8012042:	68ec      	ldr	r4, [r5, #12]
 8012044:	e7c7      	b.n	8011fd6 <__swbuf_r+0x1e>
 8012046:	0021      	movs	r1, r4
 8012048:	0028      	movs	r0, r5
 801204a:	f000 f80b 	bl	8012064 <__swsetup_r>
 801204e:	2800      	cmp	r0, #0
 8012050:	d0c9      	beq.n	8011fe6 <__swbuf_r+0x2e>
 8012052:	2601      	movs	r6, #1
 8012054:	4276      	negs	r6, r6
 8012056:	e7ea      	b.n	801202e <__swbuf_r+0x76>
 8012058:	08015320 	.word	0x08015320
 801205c:	08015340 	.word	0x08015340
 8012060:	08015300 	.word	0x08015300

08012064 <__swsetup_r>:
 8012064:	4b37      	ldr	r3, [pc, #220]	; (8012144 <__swsetup_r+0xe0>)
 8012066:	b570      	push	{r4, r5, r6, lr}
 8012068:	681d      	ldr	r5, [r3, #0]
 801206a:	0006      	movs	r6, r0
 801206c:	000c      	movs	r4, r1
 801206e:	2d00      	cmp	r5, #0
 8012070:	d005      	beq.n	801207e <__swsetup_r+0x1a>
 8012072:	69ab      	ldr	r3, [r5, #24]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d102      	bne.n	801207e <__swsetup_r+0x1a>
 8012078:	0028      	movs	r0, r5
 801207a:	f001 f85d 	bl	8013138 <__sinit>
 801207e:	4b32      	ldr	r3, [pc, #200]	; (8012148 <__swsetup_r+0xe4>)
 8012080:	429c      	cmp	r4, r3
 8012082:	d10f      	bne.n	80120a4 <__swsetup_r+0x40>
 8012084:	686c      	ldr	r4, [r5, #4]
 8012086:	230c      	movs	r3, #12
 8012088:	5ee2      	ldrsh	r2, [r4, r3]
 801208a:	b293      	uxth	r3, r2
 801208c:	0711      	lsls	r1, r2, #28
 801208e:	d42d      	bmi.n	80120ec <__swsetup_r+0x88>
 8012090:	06d9      	lsls	r1, r3, #27
 8012092:	d411      	bmi.n	80120b8 <__swsetup_r+0x54>
 8012094:	2309      	movs	r3, #9
 8012096:	2001      	movs	r0, #1
 8012098:	6033      	str	r3, [r6, #0]
 801209a:	3337      	adds	r3, #55	; 0x37
 801209c:	4313      	orrs	r3, r2
 801209e:	81a3      	strh	r3, [r4, #12]
 80120a0:	4240      	negs	r0, r0
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	4b29      	ldr	r3, [pc, #164]	; (801214c <__swsetup_r+0xe8>)
 80120a6:	429c      	cmp	r4, r3
 80120a8:	d101      	bne.n	80120ae <__swsetup_r+0x4a>
 80120aa:	68ac      	ldr	r4, [r5, #8]
 80120ac:	e7eb      	b.n	8012086 <__swsetup_r+0x22>
 80120ae:	4b28      	ldr	r3, [pc, #160]	; (8012150 <__swsetup_r+0xec>)
 80120b0:	429c      	cmp	r4, r3
 80120b2:	d1e8      	bne.n	8012086 <__swsetup_r+0x22>
 80120b4:	68ec      	ldr	r4, [r5, #12]
 80120b6:	e7e6      	b.n	8012086 <__swsetup_r+0x22>
 80120b8:	075b      	lsls	r3, r3, #29
 80120ba:	d513      	bpl.n	80120e4 <__swsetup_r+0x80>
 80120bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120be:	2900      	cmp	r1, #0
 80120c0:	d008      	beq.n	80120d4 <__swsetup_r+0x70>
 80120c2:	0023      	movs	r3, r4
 80120c4:	3344      	adds	r3, #68	; 0x44
 80120c6:	4299      	cmp	r1, r3
 80120c8:	d002      	beq.n	80120d0 <__swsetup_r+0x6c>
 80120ca:	0030      	movs	r0, r6
 80120cc:	f001 fd36 	bl	8013b3c <_free_r>
 80120d0:	2300      	movs	r3, #0
 80120d2:	6363      	str	r3, [r4, #52]	; 0x34
 80120d4:	2224      	movs	r2, #36	; 0x24
 80120d6:	89a3      	ldrh	r3, [r4, #12]
 80120d8:	4393      	bics	r3, r2
 80120da:	81a3      	strh	r3, [r4, #12]
 80120dc:	2300      	movs	r3, #0
 80120de:	6063      	str	r3, [r4, #4]
 80120e0:	6923      	ldr	r3, [r4, #16]
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	2308      	movs	r3, #8
 80120e6:	89a2      	ldrh	r2, [r4, #12]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	81a3      	strh	r3, [r4, #12]
 80120ec:	6923      	ldr	r3, [r4, #16]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d10b      	bne.n	801210a <__swsetup_r+0xa6>
 80120f2:	21a0      	movs	r1, #160	; 0xa0
 80120f4:	2280      	movs	r2, #128	; 0x80
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	0089      	lsls	r1, r1, #2
 80120fa:	0092      	lsls	r2, r2, #2
 80120fc:	400b      	ands	r3, r1
 80120fe:	4293      	cmp	r3, r2
 8012100:	d003      	beq.n	801210a <__swsetup_r+0xa6>
 8012102:	0021      	movs	r1, r4
 8012104:	0030      	movs	r0, r6
 8012106:	f001 f8f7 	bl	80132f8 <__smakebuf_r>
 801210a:	220c      	movs	r2, #12
 801210c:	5ea3      	ldrsh	r3, [r4, r2]
 801210e:	2001      	movs	r0, #1
 8012110:	001a      	movs	r2, r3
 8012112:	b299      	uxth	r1, r3
 8012114:	4002      	ands	r2, r0
 8012116:	4203      	tst	r3, r0
 8012118:	d00f      	beq.n	801213a <__swsetup_r+0xd6>
 801211a:	2200      	movs	r2, #0
 801211c:	60a2      	str	r2, [r4, #8]
 801211e:	6962      	ldr	r2, [r4, #20]
 8012120:	4252      	negs	r2, r2
 8012122:	61a2      	str	r2, [r4, #24]
 8012124:	2000      	movs	r0, #0
 8012126:	6922      	ldr	r2, [r4, #16]
 8012128:	4282      	cmp	r2, r0
 801212a:	d1ba      	bne.n	80120a2 <__swsetup_r+0x3e>
 801212c:	060a      	lsls	r2, r1, #24
 801212e:	d5b8      	bpl.n	80120a2 <__swsetup_r+0x3e>
 8012130:	2240      	movs	r2, #64	; 0x40
 8012132:	4313      	orrs	r3, r2
 8012134:	81a3      	strh	r3, [r4, #12]
 8012136:	3801      	subs	r0, #1
 8012138:	e7b3      	b.n	80120a2 <__swsetup_r+0x3e>
 801213a:	0788      	lsls	r0, r1, #30
 801213c:	d400      	bmi.n	8012140 <__swsetup_r+0xdc>
 801213e:	6962      	ldr	r2, [r4, #20]
 8012140:	60a2      	str	r2, [r4, #8]
 8012142:	e7ef      	b.n	8012124 <__swsetup_r+0xc0>
 8012144:	200002ec 	.word	0x200002ec
 8012148:	08015320 	.word	0x08015320
 801214c:	08015340 	.word	0x08015340
 8012150:	08015300 	.word	0x08015300

08012154 <__assert_func>:
 8012154:	b530      	push	{r4, r5, lr}
 8012156:	0014      	movs	r4, r2
 8012158:	001a      	movs	r2, r3
 801215a:	4b09      	ldr	r3, [pc, #36]	; (8012180 <__assert_func+0x2c>)
 801215c:	0005      	movs	r5, r0
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	b085      	sub	sp, #20
 8012162:	68d8      	ldr	r0, [r3, #12]
 8012164:	4b07      	ldr	r3, [pc, #28]	; (8012184 <__assert_func+0x30>)
 8012166:	2c00      	cmp	r4, #0
 8012168:	d101      	bne.n	801216e <__assert_func+0x1a>
 801216a:	4b07      	ldr	r3, [pc, #28]	; (8012188 <__assert_func+0x34>)
 801216c:	001c      	movs	r4, r3
 801216e:	9301      	str	r3, [sp, #4]
 8012170:	9100      	str	r1, [sp, #0]
 8012172:	002b      	movs	r3, r5
 8012174:	4905      	ldr	r1, [pc, #20]	; (801218c <__assert_func+0x38>)
 8012176:	9402      	str	r4, [sp, #8]
 8012178:	f001 f85e 	bl	8013238 <fiprintf>
 801217c:	f002 f8f6 	bl	801436c <abort>
 8012180:	200002ec 	.word	0x200002ec
 8012184:	0801514a 	.word	0x0801514a
 8012188:	08015185 	.word	0x08015185
 801218c:	08015157 	.word	0x08015157

08012190 <quorem>:
 8012190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012192:	0006      	movs	r6, r0
 8012194:	690b      	ldr	r3, [r1, #16]
 8012196:	6932      	ldr	r2, [r6, #16]
 8012198:	b087      	sub	sp, #28
 801219a:	2000      	movs	r0, #0
 801219c:	9103      	str	r1, [sp, #12]
 801219e:	429a      	cmp	r2, r3
 80121a0:	db65      	blt.n	801226e <quorem+0xde>
 80121a2:	3b01      	subs	r3, #1
 80121a4:	009c      	lsls	r4, r3, #2
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	000b      	movs	r3, r1
 80121aa:	3314      	adds	r3, #20
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	191b      	adds	r3, r3, r4
 80121b0:	9304      	str	r3, [sp, #16]
 80121b2:	0033      	movs	r3, r6
 80121b4:	3314      	adds	r3, #20
 80121b6:	9302      	str	r3, [sp, #8]
 80121b8:	191c      	adds	r4, r3, r4
 80121ba:	9b04      	ldr	r3, [sp, #16]
 80121bc:	6827      	ldr	r7, [r4, #0]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	0038      	movs	r0, r7
 80121c2:	1c5d      	adds	r5, r3, #1
 80121c4:	0029      	movs	r1, r5
 80121c6:	9301      	str	r3, [sp, #4]
 80121c8:	f7ed ffba 	bl	8000140 <__udivsi3>
 80121cc:	9001      	str	r0, [sp, #4]
 80121ce:	42af      	cmp	r7, r5
 80121d0:	d324      	bcc.n	801221c <quorem+0x8c>
 80121d2:	2500      	movs	r5, #0
 80121d4:	46ac      	mov	ip, r5
 80121d6:	9802      	ldr	r0, [sp, #8]
 80121d8:	9f05      	ldr	r7, [sp, #20]
 80121da:	cf08      	ldmia	r7!, {r3}
 80121dc:	9a01      	ldr	r2, [sp, #4]
 80121de:	b299      	uxth	r1, r3
 80121e0:	4351      	muls	r1, r2
 80121e2:	0c1b      	lsrs	r3, r3, #16
 80121e4:	4353      	muls	r3, r2
 80121e6:	1949      	adds	r1, r1, r5
 80121e8:	0c0a      	lsrs	r2, r1, #16
 80121ea:	189b      	adds	r3, r3, r2
 80121ec:	6802      	ldr	r2, [r0, #0]
 80121ee:	b289      	uxth	r1, r1
 80121f0:	b292      	uxth	r2, r2
 80121f2:	4462      	add	r2, ip
 80121f4:	1a52      	subs	r2, r2, r1
 80121f6:	6801      	ldr	r1, [r0, #0]
 80121f8:	0c1d      	lsrs	r5, r3, #16
 80121fa:	0c09      	lsrs	r1, r1, #16
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	1acb      	subs	r3, r1, r3
 8012200:	1411      	asrs	r1, r2, #16
 8012202:	185b      	adds	r3, r3, r1
 8012204:	1419      	asrs	r1, r3, #16
 8012206:	b292      	uxth	r2, r2
 8012208:	041b      	lsls	r3, r3, #16
 801220a:	431a      	orrs	r2, r3
 801220c:	9b04      	ldr	r3, [sp, #16]
 801220e:	468c      	mov	ip, r1
 8012210:	c004      	stmia	r0!, {r2}
 8012212:	42bb      	cmp	r3, r7
 8012214:	d2e1      	bcs.n	80121da <quorem+0x4a>
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d030      	beq.n	801227e <quorem+0xee>
 801221c:	0030      	movs	r0, r6
 801221e:	9903      	ldr	r1, [sp, #12]
 8012220:	f001 fb48 	bl	80138b4 <__mcmp>
 8012224:	2800      	cmp	r0, #0
 8012226:	db21      	blt.n	801226c <quorem+0xdc>
 8012228:	0030      	movs	r0, r6
 801222a:	2400      	movs	r4, #0
 801222c:	9b01      	ldr	r3, [sp, #4]
 801222e:	9903      	ldr	r1, [sp, #12]
 8012230:	3301      	adds	r3, #1
 8012232:	9301      	str	r3, [sp, #4]
 8012234:	3014      	adds	r0, #20
 8012236:	3114      	adds	r1, #20
 8012238:	6803      	ldr	r3, [r0, #0]
 801223a:	c920      	ldmia	r1!, {r5}
 801223c:	b29a      	uxth	r2, r3
 801223e:	1914      	adds	r4, r2, r4
 8012240:	b2aa      	uxth	r2, r5
 8012242:	1aa2      	subs	r2, r4, r2
 8012244:	0c1b      	lsrs	r3, r3, #16
 8012246:	0c2d      	lsrs	r5, r5, #16
 8012248:	1414      	asrs	r4, r2, #16
 801224a:	1b5b      	subs	r3, r3, r5
 801224c:	191b      	adds	r3, r3, r4
 801224e:	141c      	asrs	r4, r3, #16
 8012250:	b292      	uxth	r2, r2
 8012252:	041b      	lsls	r3, r3, #16
 8012254:	4313      	orrs	r3, r2
 8012256:	c008      	stmia	r0!, {r3}
 8012258:	9b04      	ldr	r3, [sp, #16]
 801225a:	428b      	cmp	r3, r1
 801225c:	d2ec      	bcs.n	8012238 <quorem+0xa8>
 801225e:	9b00      	ldr	r3, [sp, #0]
 8012260:	9a02      	ldr	r2, [sp, #8]
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	18d3      	adds	r3, r2, r3
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	2a00      	cmp	r2, #0
 801226a:	d015      	beq.n	8012298 <quorem+0x108>
 801226c:	9801      	ldr	r0, [sp, #4]
 801226e:	b007      	add	sp, #28
 8012270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <quorem+0xf6>
 8012278:	9b00      	ldr	r3, [sp, #0]
 801227a:	3b01      	subs	r3, #1
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	9b02      	ldr	r3, [sp, #8]
 8012280:	3c04      	subs	r4, #4
 8012282:	42a3      	cmp	r3, r4
 8012284:	d3f5      	bcc.n	8012272 <quorem+0xe2>
 8012286:	9b00      	ldr	r3, [sp, #0]
 8012288:	6133      	str	r3, [r6, #16]
 801228a:	e7c7      	b.n	801221c <quorem+0x8c>
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	2a00      	cmp	r2, #0
 8012290:	d106      	bne.n	80122a0 <quorem+0x110>
 8012292:	9a00      	ldr	r2, [sp, #0]
 8012294:	3a01      	subs	r2, #1
 8012296:	9200      	str	r2, [sp, #0]
 8012298:	9a02      	ldr	r2, [sp, #8]
 801229a:	3b04      	subs	r3, #4
 801229c:	429a      	cmp	r2, r3
 801229e:	d3f5      	bcc.n	801228c <quorem+0xfc>
 80122a0:	9b00      	ldr	r3, [sp, #0]
 80122a2:	6133      	str	r3, [r6, #16]
 80122a4:	e7e2      	b.n	801226c <quorem+0xdc>
	...

080122a8 <_dtoa_r>:
 80122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122aa:	b09d      	sub	sp, #116	; 0x74
 80122ac:	9202      	str	r2, [sp, #8]
 80122ae:	9303      	str	r3, [sp, #12]
 80122b0:	9b02      	ldr	r3, [sp, #8]
 80122b2:	9c03      	ldr	r4, [sp, #12]
 80122b4:	9308      	str	r3, [sp, #32]
 80122b6:	9409      	str	r4, [sp, #36]	; 0x24
 80122b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80122ba:	0007      	movs	r7, r0
 80122bc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80122be:	2c00      	cmp	r4, #0
 80122c0:	d10e      	bne.n	80122e0 <_dtoa_r+0x38>
 80122c2:	2010      	movs	r0, #16
 80122c4:	f001 f85c 	bl	8013380 <malloc>
 80122c8:	1e02      	subs	r2, r0, #0
 80122ca:	6278      	str	r0, [r7, #36]	; 0x24
 80122cc:	d104      	bne.n	80122d8 <_dtoa_r+0x30>
 80122ce:	21ea      	movs	r1, #234	; 0xea
 80122d0:	4bc7      	ldr	r3, [pc, #796]	; (80125f0 <_dtoa_r+0x348>)
 80122d2:	48c8      	ldr	r0, [pc, #800]	; (80125f4 <_dtoa_r+0x34c>)
 80122d4:	f7ff ff3e 	bl	8012154 <__assert_func>
 80122d8:	6044      	str	r4, [r0, #4]
 80122da:	6084      	str	r4, [r0, #8]
 80122dc:	6004      	str	r4, [r0, #0]
 80122de:	60c4      	str	r4, [r0, #12]
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	6819      	ldr	r1, [r3, #0]
 80122e4:	2900      	cmp	r1, #0
 80122e6:	d00a      	beq.n	80122fe <_dtoa_r+0x56>
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	2301      	movs	r3, #1
 80122ec:	4093      	lsls	r3, r2
 80122ee:	604a      	str	r2, [r1, #4]
 80122f0:	608b      	str	r3, [r1, #8]
 80122f2:	0038      	movs	r0, r7
 80122f4:	f001 f89e 	bl	8013434 <_Bfree>
 80122f8:	2200      	movs	r2, #0
 80122fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fc:	601a      	str	r2, [r3, #0]
 80122fe:	9b03      	ldr	r3, [sp, #12]
 8012300:	2b00      	cmp	r3, #0
 8012302:	da20      	bge.n	8012346 <_dtoa_r+0x9e>
 8012304:	2301      	movs	r3, #1
 8012306:	602b      	str	r3, [r5, #0]
 8012308:	9b03      	ldr	r3, [sp, #12]
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	085b      	lsrs	r3, r3, #1
 801230e:	9309      	str	r3, [sp, #36]	; 0x24
 8012310:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012312:	4bb9      	ldr	r3, [pc, #740]	; (80125f8 <_dtoa_r+0x350>)
 8012314:	4ab8      	ldr	r2, [pc, #736]	; (80125f8 <_dtoa_r+0x350>)
 8012316:	402b      	ands	r3, r5
 8012318:	4293      	cmp	r3, r2
 801231a:	d117      	bne.n	801234c <_dtoa_r+0xa4>
 801231c:	4bb7      	ldr	r3, [pc, #732]	; (80125fc <_dtoa_r+0x354>)
 801231e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012320:	0328      	lsls	r0, r5, #12
 8012322:	6013      	str	r3, [r2, #0]
 8012324:	9b02      	ldr	r3, [sp, #8]
 8012326:	0b00      	lsrs	r0, r0, #12
 8012328:	4318      	orrs	r0, r3
 801232a:	d101      	bne.n	8012330 <_dtoa_r+0x88>
 801232c:	f000 fdbf 	bl	8012eae <_dtoa_r+0xc06>
 8012330:	48b3      	ldr	r0, [pc, #716]	; (8012600 <_dtoa_r+0x358>)
 8012332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012334:	9006      	str	r0, [sp, #24]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d002      	beq.n	8012340 <_dtoa_r+0x98>
 801233a:	4bb2      	ldr	r3, [pc, #712]	; (8012604 <_dtoa_r+0x35c>)
 801233c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801233e:	6013      	str	r3, [r2, #0]
 8012340:	9806      	ldr	r0, [sp, #24]
 8012342:	b01d      	add	sp, #116	; 0x74
 8012344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012346:	2300      	movs	r3, #0
 8012348:	602b      	str	r3, [r5, #0]
 801234a:	e7e1      	b.n	8012310 <_dtoa_r+0x68>
 801234c:	9b08      	ldr	r3, [sp, #32]
 801234e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012350:	9312      	str	r3, [sp, #72]	; 0x48
 8012352:	9413      	str	r4, [sp, #76]	; 0x4c
 8012354:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012356:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012358:	2200      	movs	r2, #0
 801235a:	2300      	movs	r3, #0
 801235c:	f7ee f876 	bl	800044c <__aeabi_dcmpeq>
 8012360:	1e04      	subs	r4, r0, #0
 8012362:	d009      	beq.n	8012378 <_dtoa_r+0xd0>
 8012364:	2301      	movs	r3, #1
 8012366:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012368:	6013      	str	r3, [r2, #0]
 801236a:	4ba7      	ldr	r3, [pc, #668]	; (8012608 <_dtoa_r+0x360>)
 801236c:	9306      	str	r3, [sp, #24]
 801236e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012370:	2b00      	cmp	r3, #0
 8012372:	d0e5      	beq.n	8012340 <_dtoa_r+0x98>
 8012374:	4ba5      	ldr	r3, [pc, #660]	; (801260c <_dtoa_r+0x364>)
 8012376:	e7e1      	b.n	801233c <_dtoa_r+0x94>
 8012378:	ab1a      	add	r3, sp, #104	; 0x68
 801237a:	9301      	str	r3, [sp, #4]
 801237c:	ab1b      	add	r3, sp, #108	; 0x6c
 801237e:	9300      	str	r3, [sp, #0]
 8012380:	0038      	movs	r0, r7
 8012382:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012386:	f001 fb49 	bl	8013a1c <__d2b>
 801238a:	006e      	lsls	r6, r5, #1
 801238c:	9005      	str	r0, [sp, #20]
 801238e:	0d76      	lsrs	r6, r6, #21
 8012390:	d100      	bne.n	8012394 <_dtoa_r+0xec>
 8012392:	e07c      	b.n	801248e <_dtoa_r+0x1e6>
 8012394:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012396:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801239a:	4a9d      	ldr	r2, [pc, #628]	; (8012610 <_dtoa_r+0x368>)
 801239c:	031b      	lsls	r3, r3, #12
 801239e:	0b1b      	lsrs	r3, r3, #12
 80123a0:	431a      	orrs	r2, r3
 80123a2:	0011      	movs	r1, r2
 80123a4:	4b9b      	ldr	r3, [pc, #620]	; (8012614 <_dtoa_r+0x36c>)
 80123a6:	9418      	str	r4, [sp, #96]	; 0x60
 80123a8:	18f6      	adds	r6, r6, r3
 80123aa:	2200      	movs	r2, #0
 80123ac:	4b9a      	ldr	r3, [pc, #616]	; (8012618 <_dtoa_r+0x370>)
 80123ae:	f7ef fa53 	bl	8001858 <__aeabi_dsub>
 80123b2:	4a9a      	ldr	r2, [pc, #616]	; (801261c <_dtoa_r+0x374>)
 80123b4:	4b9a      	ldr	r3, [pc, #616]	; (8012620 <_dtoa_r+0x378>)
 80123b6:	f7ee ffe3 	bl	8001380 <__aeabi_dmul>
 80123ba:	4a9a      	ldr	r2, [pc, #616]	; (8012624 <_dtoa_r+0x37c>)
 80123bc:	4b9a      	ldr	r3, [pc, #616]	; (8012628 <_dtoa_r+0x380>)
 80123be:	f7ee f8a1 	bl	8000504 <__aeabi_dadd>
 80123c2:	0004      	movs	r4, r0
 80123c4:	0030      	movs	r0, r6
 80123c6:	000d      	movs	r5, r1
 80123c8:	f7ef fe2c 	bl	8002024 <__aeabi_i2d>
 80123cc:	4a97      	ldr	r2, [pc, #604]	; (801262c <_dtoa_r+0x384>)
 80123ce:	4b98      	ldr	r3, [pc, #608]	; (8012630 <_dtoa_r+0x388>)
 80123d0:	f7ee ffd6 	bl	8001380 <__aeabi_dmul>
 80123d4:	0002      	movs	r2, r0
 80123d6:	000b      	movs	r3, r1
 80123d8:	0020      	movs	r0, r4
 80123da:	0029      	movs	r1, r5
 80123dc:	f7ee f892 	bl	8000504 <__aeabi_dadd>
 80123e0:	0004      	movs	r4, r0
 80123e2:	000d      	movs	r5, r1
 80123e4:	f7ef fde8 	bl	8001fb8 <__aeabi_d2iz>
 80123e8:	2200      	movs	r2, #0
 80123ea:	9002      	str	r0, [sp, #8]
 80123ec:	2300      	movs	r3, #0
 80123ee:	0020      	movs	r0, r4
 80123f0:	0029      	movs	r1, r5
 80123f2:	f7ee f831 	bl	8000458 <__aeabi_dcmplt>
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d00b      	beq.n	8012412 <_dtoa_r+0x16a>
 80123fa:	9802      	ldr	r0, [sp, #8]
 80123fc:	f7ef fe12 	bl	8002024 <__aeabi_i2d>
 8012400:	002b      	movs	r3, r5
 8012402:	0022      	movs	r2, r4
 8012404:	f7ee f822 	bl	800044c <__aeabi_dcmpeq>
 8012408:	4243      	negs	r3, r0
 801240a:	4158      	adcs	r0, r3
 801240c:	9b02      	ldr	r3, [sp, #8]
 801240e:	1a1b      	subs	r3, r3, r0
 8012410:	9302      	str	r3, [sp, #8]
 8012412:	2301      	movs	r3, #1
 8012414:	9316      	str	r3, [sp, #88]	; 0x58
 8012416:	9b02      	ldr	r3, [sp, #8]
 8012418:	2b16      	cmp	r3, #22
 801241a:	d80f      	bhi.n	801243c <_dtoa_r+0x194>
 801241c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801241e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012420:	00da      	lsls	r2, r3, #3
 8012422:	4b84      	ldr	r3, [pc, #528]	; (8012634 <_dtoa_r+0x38c>)
 8012424:	189b      	adds	r3, r3, r2
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	f7ee f815 	bl	8000458 <__aeabi_dcmplt>
 801242e:	2800      	cmp	r0, #0
 8012430:	d049      	beq.n	80124c6 <_dtoa_r+0x21e>
 8012432:	9b02      	ldr	r3, [sp, #8]
 8012434:	3b01      	subs	r3, #1
 8012436:	9302      	str	r3, [sp, #8]
 8012438:	2300      	movs	r3, #0
 801243a:	9316      	str	r3, [sp, #88]	; 0x58
 801243c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801243e:	1b9e      	subs	r6, r3, r6
 8012440:	2300      	movs	r3, #0
 8012442:	930a      	str	r3, [sp, #40]	; 0x28
 8012444:	0033      	movs	r3, r6
 8012446:	3b01      	subs	r3, #1
 8012448:	930d      	str	r3, [sp, #52]	; 0x34
 801244a:	d504      	bpl.n	8012456 <_dtoa_r+0x1ae>
 801244c:	2301      	movs	r3, #1
 801244e:	1b9b      	subs	r3, r3, r6
 8012450:	930a      	str	r3, [sp, #40]	; 0x28
 8012452:	2300      	movs	r3, #0
 8012454:	930d      	str	r3, [sp, #52]	; 0x34
 8012456:	9b02      	ldr	r3, [sp, #8]
 8012458:	2b00      	cmp	r3, #0
 801245a:	db36      	blt.n	80124ca <_dtoa_r+0x222>
 801245c:	9a02      	ldr	r2, [sp, #8]
 801245e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012460:	4694      	mov	ip, r2
 8012462:	4463      	add	r3, ip
 8012464:	930d      	str	r3, [sp, #52]	; 0x34
 8012466:	2300      	movs	r3, #0
 8012468:	9215      	str	r2, [sp, #84]	; 0x54
 801246a:	930e      	str	r3, [sp, #56]	; 0x38
 801246c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801246e:	2401      	movs	r4, #1
 8012470:	2b09      	cmp	r3, #9
 8012472:	d864      	bhi.n	801253e <_dtoa_r+0x296>
 8012474:	2b05      	cmp	r3, #5
 8012476:	dd02      	ble.n	801247e <_dtoa_r+0x1d6>
 8012478:	2400      	movs	r4, #0
 801247a:	3b04      	subs	r3, #4
 801247c:	9322      	str	r3, [sp, #136]	; 0x88
 801247e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012480:	1e98      	subs	r0, r3, #2
 8012482:	2803      	cmp	r0, #3
 8012484:	d864      	bhi.n	8012550 <_dtoa_r+0x2a8>
 8012486:	f7ed fe47 	bl	8000118 <__gnu_thumb1_case_uqi>
 801248a:	3829      	.short	0x3829
 801248c:	5836      	.short	0x5836
 801248e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012490:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012492:	189e      	adds	r6, r3, r2
 8012494:	4b68      	ldr	r3, [pc, #416]	; (8012638 <_dtoa_r+0x390>)
 8012496:	18f2      	adds	r2, r6, r3
 8012498:	2a20      	cmp	r2, #32
 801249a:	dd0f      	ble.n	80124bc <_dtoa_r+0x214>
 801249c:	2340      	movs	r3, #64	; 0x40
 801249e:	1a9b      	subs	r3, r3, r2
 80124a0:	409d      	lsls	r5, r3
 80124a2:	4b66      	ldr	r3, [pc, #408]	; (801263c <_dtoa_r+0x394>)
 80124a4:	9802      	ldr	r0, [sp, #8]
 80124a6:	18f3      	adds	r3, r6, r3
 80124a8:	40d8      	lsrs	r0, r3
 80124aa:	4328      	orrs	r0, r5
 80124ac:	f7ef fdea 	bl	8002084 <__aeabi_ui2d>
 80124b0:	2301      	movs	r3, #1
 80124b2:	4c63      	ldr	r4, [pc, #396]	; (8012640 <_dtoa_r+0x398>)
 80124b4:	3e01      	subs	r6, #1
 80124b6:	1909      	adds	r1, r1, r4
 80124b8:	9318      	str	r3, [sp, #96]	; 0x60
 80124ba:	e776      	b.n	80123aa <_dtoa_r+0x102>
 80124bc:	2320      	movs	r3, #32
 80124be:	9802      	ldr	r0, [sp, #8]
 80124c0:	1a9b      	subs	r3, r3, r2
 80124c2:	4098      	lsls	r0, r3
 80124c4:	e7f2      	b.n	80124ac <_dtoa_r+0x204>
 80124c6:	9016      	str	r0, [sp, #88]	; 0x58
 80124c8:	e7b8      	b.n	801243c <_dtoa_r+0x194>
 80124ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124cc:	9a02      	ldr	r2, [sp, #8]
 80124ce:	1a9b      	subs	r3, r3, r2
 80124d0:	930a      	str	r3, [sp, #40]	; 0x28
 80124d2:	4253      	negs	r3, r2
 80124d4:	930e      	str	r3, [sp, #56]	; 0x38
 80124d6:	2300      	movs	r3, #0
 80124d8:	9315      	str	r3, [sp, #84]	; 0x54
 80124da:	e7c7      	b.n	801246c <_dtoa_r+0x1c4>
 80124dc:	2300      	movs	r3, #0
 80124de:	930f      	str	r3, [sp, #60]	; 0x3c
 80124e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80124e2:	930c      	str	r3, [sp, #48]	; 0x30
 80124e4:	9307      	str	r3, [sp, #28]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	dc13      	bgt.n	8012512 <_dtoa_r+0x26a>
 80124ea:	2301      	movs	r3, #1
 80124ec:	001a      	movs	r2, r3
 80124ee:	930c      	str	r3, [sp, #48]	; 0x30
 80124f0:	9307      	str	r3, [sp, #28]
 80124f2:	9223      	str	r2, [sp, #140]	; 0x8c
 80124f4:	e00d      	b.n	8012512 <_dtoa_r+0x26a>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e7f1      	b.n	80124de <_dtoa_r+0x236>
 80124fa:	2300      	movs	r3, #0
 80124fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80124fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012500:	4694      	mov	ip, r2
 8012502:	9b02      	ldr	r3, [sp, #8]
 8012504:	4463      	add	r3, ip
 8012506:	930c      	str	r3, [sp, #48]	; 0x30
 8012508:	3301      	adds	r3, #1
 801250a:	9307      	str	r3, [sp, #28]
 801250c:	2b00      	cmp	r3, #0
 801250e:	dc00      	bgt.n	8012512 <_dtoa_r+0x26a>
 8012510:	2301      	movs	r3, #1
 8012512:	2200      	movs	r2, #0
 8012514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012516:	6042      	str	r2, [r0, #4]
 8012518:	3204      	adds	r2, #4
 801251a:	0015      	movs	r5, r2
 801251c:	3514      	adds	r5, #20
 801251e:	6841      	ldr	r1, [r0, #4]
 8012520:	429d      	cmp	r5, r3
 8012522:	d919      	bls.n	8012558 <_dtoa_r+0x2b0>
 8012524:	0038      	movs	r0, r7
 8012526:	f000 ff41 	bl	80133ac <_Balloc>
 801252a:	9006      	str	r0, [sp, #24]
 801252c:	2800      	cmp	r0, #0
 801252e:	d117      	bne.n	8012560 <_dtoa_r+0x2b8>
 8012530:	21d5      	movs	r1, #213	; 0xd5
 8012532:	0002      	movs	r2, r0
 8012534:	4b43      	ldr	r3, [pc, #268]	; (8012644 <_dtoa_r+0x39c>)
 8012536:	0049      	lsls	r1, r1, #1
 8012538:	e6cb      	b.n	80122d2 <_dtoa_r+0x2a>
 801253a:	2301      	movs	r3, #1
 801253c:	e7de      	b.n	80124fc <_dtoa_r+0x254>
 801253e:	2300      	movs	r3, #0
 8012540:	940f      	str	r4, [sp, #60]	; 0x3c
 8012542:	9322      	str	r3, [sp, #136]	; 0x88
 8012544:	3b01      	subs	r3, #1
 8012546:	930c      	str	r3, [sp, #48]	; 0x30
 8012548:	9307      	str	r3, [sp, #28]
 801254a:	2200      	movs	r2, #0
 801254c:	3313      	adds	r3, #19
 801254e:	e7d0      	b.n	80124f2 <_dtoa_r+0x24a>
 8012550:	2301      	movs	r3, #1
 8012552:	930f      	str	r3, [sp, #60]	; 0x3c
 8012554:	3b02      	subs	r3, #2
 8012556:	e7f6      	b.n	8012546 <_dtoa_r+0x29e>
 8012558:	3101      	adds	r1, #1
 801255a:	6041      	str	r1, [r0, #4]
 801255c:	0052      	lsls	r2, r2, #1
 801255e:	e7dc      	b.n	801251a <_dtoa_r+0x272>
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	9a06      	ldr	r2, [sp, #24]
 8012564:	601a      	str	r2, [r3, #0]
 8012566:	9b07      	ldr	r3, [sp, #28]
 8012568:	2b0e      	cmp	r3, #14
 801256a:	d900      	bls.n	801256e <_dtoa_r+0x2c6>
 801256c:	e0eb      	b.n	8012746 <_dtoa_r+0x49e>
 801256e:	2c00      	cmp	r4, #0
 8012570:	d100      	bne.n	8012574 <_dtoa_r+0x2cc>
 8012572:	e0e8      	b.n	8012746 <_dtoa_r+0x49e>
 8012574:	9b02      	ldr	r3, [sp, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	dd68      	ble.n	801264c <_dtoa_r+0x3a4>
 801257a:	001a      	movs	r2, r3
 801257c:	210f      	movs	r1, #15
 801257e:	4b2d      	ldr	r3, [pc, #180]	; (8012634 <_dtoa_r+0x38c>)
 8012580:	400a      	ands	r2, r1
 8012582:	00d2      	lsls	r2, r2, #3
 8012584:	189b      	adds	r3, r3, r2
 8012586:	681d      	ldr	r5, [r3, #0]
 8012588:	685e      	ldr	r6, [r3, #4]
 801258a:	9b02      	ldr	r3, [sp, #8]
 801258c:	111c      	asrs	r4, r3, #4
 801258e:	2302      	movs	r3, #2
 8012590:	9310      	str	r3, [sp, #64]	; 0x40
 8012592:	9b02      	ldr	r3, [sp, #8]
 8012594:	05db      	lsls	r3, r3, #23
 8012596:	d50b      	bpl.n	80125b0 <_dtoa_r+0x308>
 8012598:	4b2b      	ldr	r3, [pc, #172]	; (8012648 <_dtoa_r+0x3a0>)
 801259a:	400c      	ands	r4, r1
 801259c:	6a1a      	ldr	r2, [r3, #32]
 801259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80125a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80125a4:	f7ee faea 	bl	8000b7c <__aeabi_ddiv>
 80125a8:	2303      	movs	r3, #3
 80125aa:	9008      	str	r0, [sp, #32]
 80125ac:	9109      	str	r1, [sp, #36]	; 0x24
 80125ae:	9310      	str	r3, [sp, #64]	; 0x40
 80125b0:	4b25      	ldr	r3, [pc, #148]	; (8012648 <_dtoa_r+0x3a0>)
 80125b2:	9314      	str	r3, [sp, #80]	; 0x50
 80125b4:	2c00      	cmp	r4, #0
 80125b6:	d108      	bne.n	80125ca <_dtoa_r+0x322>
 80125b8:	9808      	ldr	r0, [sp, #32]
 80125ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125bc:	002a      	movs	r2, r5
 80125be:	0033      	movs	r3, r6
 80125c0:	f7ee fadc 	bl	8000b7c <__aeabi_ddiv>
 80125c4:	9008      	str	r0, [sp, #32]
 80125c6:	9109      	str	r1, [sp, #36]	; 0x24
 80125c8:	e05c      	b.n	8012684 <_dtoa_r+0x3dc>
 80125ca:	2301      	movs	r3, #1
 80125cc:	421c      	tst	r4, r3
 80125ce:	d00b      	beq.n	80125e8 <_dtoa_r+0x340>
 80125d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125d2:	0028      	movs	r0, r5
 80125d4:	3301      	adds	r3, #1
 80125d6:	9310      	str	r3, [sp, #64]	; 0x40
 80125d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125da:	0031      	movs	r1, r6
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	f7ee fece 	bl	8001380 <__aeabi_dmul>
 80125e4:	0005      	movs	r5, r0
 80125e6:	000e      	movs	r6, r1
 80125e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125ea:	1064      	asrs	r4, r4, #1
 80125ec:	3308      	adds	r3, #8
 80125ee:	e7e0      	b.n	80125b2 <_dtoa_r+0x30a>
 80125f0:	080150d8 	.word	0x080150d8
 80125f4:	08015294 	.word	0x08015294
 80125f8:	7ff00000 	.word	0x7ff00000
 80125fc:	0000270f 	.word	0x0000270f
 8012600:	08015290 	.word	0x08015290
 8012604:	08015293 	.word	0x08015293
 8012608:	080150b4 	.word	0x080150b4
 801260c:	080150b5 	.word	0x080150b5
 8012610:	3ff00000 	.word	0x3ff00000
 8012614:	fffffc01 	.word	0xfffffc01
 8012618:	3ff80000 	.word	0x3ff80000
 801261c:	636f4361 	.word	0x636f4361
 8012620:	3fd287a7 	.word	0x3fd287a7
 8012624:	8b60c8b3 	.word	0x8b60c8b3
 8012628:	3fc68a28 	.word	0x3fc68a28
 801262c:	509f79fb 	.word	0x509f79fb
 8012630:	3fd34413 	.word	0x3fd34413
 8012634:	080153e8 	.word	0x080153e8
 8012638:	00000432 	.word	0x00000432
 801263c:	00000412 	.word	0x00000412
 8012640:	fe100000 	.word	0xfe100000
 8012644:	080152ef 	.word	0x080152ef
 8012648:	080153c0 	.word	0x080153c0
 801264c:	2302      	movs	r3, #2
 801264e:	9310      	str	r3, [sp, #64]	; 0x40
 8012650:	9b02      	ldr	r3, [sp, #8]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d016      	beq.n	8012684 <_dtoa_r+0x3dc>
 8012656:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012658:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801265a:	425c      	negs	r4, r3
 801265c:	230f      	movs	r3, #15
 801265e:	4ab6      	ldr	r2, [pc, #728]	; (8012938 <_dtoa_r+0x690>)
 8012660:	4023      	ands	r3, r4
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	18d3      	adds	r3, r2, r3
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	685b      	ldr	r3, [r3, #4]
 801266a:	f7ee fe89 	bl	8001380 <__aeabi_dmul>
 801266e:	2601      	movs	r6, #1
 8012670:	2300      	movs	r3, #0
 8012672:	9008      	str	r0, [sp, #32]
 8012674:	9109      	str	r1, [sp, #36]	; 0x24
 8012676:	4db1      	ldr	r5, [pc, #708]	; (801293c <_dtoa_r+0x694>)
 8012678:	1124      	asrs	r4, r4, #4
 801267a:	2c00      	cmp	r4, #0
 801267c:	d000      	beq.n	8012680 <_dtoa_r+0x3d8>
 801267e:	e094      	b.n	80127aa <_dtoa_r+0x502>
 8012680:	2b00      	cmp	r3, #0
 8012682:	d19f      	bne.n	80125c4 <_dtoa_r+0x31c>
 8012684:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012686:	2b00      	cmp	r3, #0
 8012688:	d100      	bne.n	801268c <_dtoa_r+0x3e4>
 801268a:	e09b      	b.n	80127c4 <_dtoa_r+0x51c>
 801268c:	9c08      	ldr	r4, [sp, #32]
 801268e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012690:	2200      	movs	r2, #0
 8012692:	0020      	movs	r0, r4
 8012694:	0029      	movs	r1, r5
 8012696:	4baa      	ldr	r3, [pc, #680]	; (8012940 <_dtoa_r+0x698>)
 8012698:	f7ed fede 	bl	8000458 <__aeabi_dcmplt>
 801269c:	2800      	cmp	r0, #0
 801269e:	d100      	bne.n	80126a2 <_dtoa_r+0x3fa>
 80126a0:	e090      	b.n	80127c4 <_dtoa_r+0x51c>
 80126a2:	9b07      	ldr	r3, [sp, #28]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d100      	bne.n	80126aa <_dtoa_r+0x402>
 80126a8:	e08c      	b.n	80127c4 <_dtoa_r+0x51c>
 80126aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	dd46      	ble.n	801273e <_dtoa_r+0x496>
 80126b0:	9b02      	ldr	r3, [sp, #8]
 80126b2:	2200      	movs	r2, #0
 80126b4:	0020      	movs	r0, r4
 80126b6:	0029      	movs	r1, r5
 80126b8:	1e5e      	subs	r6, r3, #1
 80126ba:	4ba2      	ldr	r3, [pc, #648]	; (8012944 <_dtoa_r+0x69c>)
 80126bc:	f7ee fe60 	bl	8001380 <__aeabi_dmul>
 80126c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126c2:	9008      	str	r0, [sp, #32]
 80126c4:	9109      	str	r1, [sp, #36]	; 0x24
 80126c6:	3301      	adds	r3, #1
 80126c8:	9310      	str	r3, [sp, #64]	; 0x40
 80126ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80126ce:	9c08      	ldr	r4, [sp, #32]
 80126d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80126d2:	9314      	str	r3, [sp, #80]	; 0x50
 80126d4:	f7ef fca6 	bl	8002024 <__aeabi_i2d>
 80126d8:	0022      	movs	r2, r4
 80126da:	002b      	movs	r3, r5
 80126dc:	f7ee fe50 	bl	8001380 <__aeabi_dmul>
 80126e0:	2200      	movs	r2, #0
 80126e2:	4b99      	ldr	r3, [pc, #612]	; (8012948 <_dtoa_r+0x6a0>)
 80126e4:	f7ed ff0e 	bl	8000504 <__aeabi_dadd>
 80126e8:	9010      	str	r0, [sp, #64]	; 0x40
 80126ea:	9111      	str	r1, [sp, #68]	; 0x44
 80126ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126f0:	9208      	str	r2, [sp, #32]
 80126f2:	9309      	str	r3, [sp, #36]	; 0x24
 80126f4:	4a95      	ldr	r2, [pc, #596]	; (801294c <_dtoa_r+0x6a4>)
 80126f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126f8:	4694      	mov	ip, r2
 80126fa:	4463      	add	r3, ip
 80126fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80126fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012700:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012702:	2b00      	cmp	r3, #0
 8012704:	d161      	bne.n	80127ca <_dtoa_r+0x522>
 8012706:	2200      	movs	r2, #0
 8012708:	0020      	movs	r0, r4
 801270a:	0029      	movs	r1, r5
 801270c:	4b90      	ldr	r3, [pc, #576]	; (8012950 <_dtoa_r+0x6a8>)
 801270e:	f7ef f8a3 	bl	8001858 <__aeabi_dsub>
 8012712:	9a08      	ldr	r2, [sp, #32]
 8012714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012716:	0004      	movs	r4, r0
 8012718:	000d      	movs	r5, r1
 801271a:	f7ed feb1 	bl	8000480 <__aeabi_dcmpgt>
 801271e:	2800      	cmp	r0, #0
 8012720:	d000      	beq.n	8012724 <_dtoa_r+0x47c>
 8012722:	e2af      	b.n	8012c84 <_dtoa_r+0x9dc>
 8012724:	488b      	ldr	r0, [pc, #556]	; (8012954 <_dtoa_r+0x6ac>)
 8012726:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012728:	4684      	mov	ip, r0
 801272a:	4461      	add	r1, ip
 801272c:	000b      	movs	r3, r1
 801272e:	0020      	movs	r0, r4
 8012730:	0029      	movs	r1, r5
 8012732:	9a08      	ldr	r2, [sp, #32]
 8012734:	f7ed fe90 	bl	8000458 <__aeabi_dcmplt>
 8012738:	2800      	cmp	r0, #0
 801273a:	d000      	beq.n	801273e <_dtoa_r+0x496>
 801273c:	e29f      	b.n	8012c7e <_dtoa_r+0x9d6>
 801273e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012740:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012742:	9308      	str	r3, [sp, #32]
 8012744:	9409      	str	r4, [sp, #36]	; 0x24
 8012746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012748:	2b00      	cmp	r3, #0
 801274a:	da00      	bge.n	801274e <_dtoa_r+0x4a6>
 801274c:	e172      	b.n	8012a34 <_dtoa_r+0x78c>
 801274e:	9a02      	ldr	r2, [sp, #8]
 8012750:	2a0e      	cmp	r2, #14
 8012752:	dd00      	ble.n	8012756 <_dtoa_r+0x4ae>
 8012754:	e16e      	b.n	8012a34 <_dtoa_r+0x78c>
 8012756:	4b78      	ldr	r3, [pc, #480]	; (8012938 <_dtoa_r+0x690>)
 8012758:	00d2      	lsls	r2, r2, #3
 801275a:	189b      	adds	r3, r3, r2
 801275c:	685c      	ldr	r4, [r3, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	930a      	str	r3, [sp, #40]	; 0x28
 8012762:	940b      	str	r4, [sp, #44]	; 0x2c
 8012764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012766:	2b00      	cmp	r3, #0
 8012768:	db00      	blt.n	801276c <_dtoa_r+0x4c4>
 801276a:	e0f7      	b.n	801295c <_dtoa_r+0x6b4>
 801276c:	9b07      	ldr	r3, [sp, #28]
 801276e:	2b00      	cmp	r3, #0
 8012770:	dd00      	ble.n	8012774 <_dtoa_r+0x4cc>
 8012772:	e0f3      	b.n	801295c <_dtoa_r+0x6b4>
 8012774:	d000      	beq.n	8012778 <_dtoa_r+0x4d0>
 8012776:	e282      	b.n	8012c7e <_dtoa_r+0x9d6>
 8012778:	980a      	ldr	r0, [sp, #40]	; 0x28
 801277a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801277c:	2200      	movs	r2, #0
 801277e:	4b74      	ldr	r3, [pc, #464]	; (8012950 <_dtoa_r+0x6a8>)
 8012780:	f7ee fdfe 	bl	8001380 <__aeabi_dmul>
 8012784:	9a08      	ldr	r2, [sp, #32]
 8012786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012788:	f7ed fe84 	bl	8000494 <__aeabi_dcmpge>
 801278c:	9e07      	ldr	r6, [sp, #28]
 801278e:	0035      	movs	r5, r6
 8012790:	2800      	cmp	r0, #0
 8012792:	d000      	beq.n	8012796 <_dtoa_r+0x4ee>
 8012794:	e259      	b.n	8012c4a <_dtoa_r+0x9a2>
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	9a06      	ldr	r2, [sp, #24]
 801279a:	3301      	adds	r3, #1
 801279c:	9308      	str	r3, [sp, #32]
 801279e:	2331      	movs	r3, #49	; 0x31
 80127a0:	7013      	strb	r3, [r2, #0]
 80127a2:	9b02      	ldr	r3, [sp, #8]
 80127a4:	3301      	adds	r3, #1
 80127a6:	9302      	str	r3, [sp, #8]
 80127a8:	e254      	b.n	8012c54 <_dtoa_r+0x9ac>
 80127aa:	4234      	tst	r4, r6
 80127ac:	d007      	beq.n	80127be <_dtoa_r+0x516>
 80127ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80127b0:	3301      	adds	r3, #1
 80127b2:	9310      	str	r3, [sp, #64]	; 0x40
 80127b4:	682a      	ldr	r2, [r5, #0]
 80127b6:	686b      	ldr	r3, [r5, #4]
 80127b8:	f7ee fde2 	bl	8001380 <__aeabi_dmul>
 80127bc:	0033      	movs	r3, r6
 80127be:	1064      	asrs	r4, r4, #1
 80127c0:	3508      	adds	r5, #8
 80127c2:	e75a      	b.n	801267a <_dtoa_r+0x3d2>
 80127c4:	9e02      	ldr	r6, [sp, #8]
 80127c6:	9b07      	ldr	r3, [sp, #28]
 80127c8:	e780      	b.n	80126cc <_dtoa_r+0x424>
 80127ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80127ce:	1e5a      	subs	r2, r3, #1
 80127d0:	4b59      	ldr	r3, [pc, #356]	; (8012938 <_dtoa_r+0x690>)
 80127d2:	00d2      	lsls	r2, r2, #3
 80127d4:	189b      	adds	r3, r3, r2
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	2900      	cmp	r1, #0
 80127dc:	d051      	beq.n	8012882 <_dtoa_r+0x5da>
 80127de:	2000      	movs	r0, #0
 80127e0:	495d      	ldr	r1, [pc, #372]	; (8012958 <_dtoa_r+0x6b0>)
 80127e2:	f7ee f9cb 	bl	8000b7c <__aeabi_ddiv>
 80127e6:	9a08      	ldr	r2, [sp, #32]
 80127e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ea:	f7ef f835 	bl	8001858 <__aeabi_dsub>
 80127ee:	9a06      	ldr	r2, [sp, #24]
 80127f0:	9b06      	ldr	r3, [sp, #24]
 80127f2:	4694      	mov	ip, r2
 80127f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80127f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127f8:	9010      	str	r0, [sp, #64]	; 0x40
 80127fa:	9111      	str	r1, [sp, #68]	; 0x44
 80127fc:	4463      	add	r3, ip
 80127fe:	9319      	str	r3, [sp, #100]	; 0x64
 8012800:	0029      	movs	r1, r5
 8012802:	0020      	movs	r0, r4
 8012804:	f7ef fbd8 	bl	8001fb8 <__aeabi_d2iz>
 8012808:	9014      	str	r0, [sp, #80]	; 0x50
 801280a:	f7ef fc0b 	bl	8002024 <__aeabi_i2d>
 801280e:	0002      	movs	r2, r0
 8012810:	000b      	movs	r3, r1
 8012812:	0020      	movs	r0, r4
 8012814:	0029      	movs	r1, r5
 8012816:	f7ef f81f 	bl	8001858 <__aeabi_dsub>
 801281a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801281c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801281e:	3301      	adds	r3, #1
 8012820:	9308      	str	r3, [sp, #32]
 8012822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012824:	0004      	movs	r4, r0
 8012826:	3330      	adds	r3, #48	; 0x30
 8012828:	7013      	strb	r3, [r2, #0]
 801282a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801282c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801282e:	000d      	movs	r5, r1
 8012830:	f7ed fe12 	bl	8000458 <__aeabi_dcmplt>
 8012834:	2800      	cmp	r0, #0
 8012836:	d175      	bne.n	8012924 <_dtoa_r+0x67c>
 8012838:	0022      	movs	r2, r4
 801283a:	002b      	movs	r3, r5
 801283c:	2000      	movs	r0, #0
 801283e:	4940      	ldr	r1, [pc, #256]	; (8012940 <_dtoa_r+0x698>)
 8012840:	f7ef f80a 	bl	8001858 <__aeabi_dsub>
 8012844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012848:	f7ed fe06 	bl	8000458 <__aeabi_dcmplt>
 801284c:	2800      	cmp	r0, #0
 801284e:	d000      	beq.n	8012852 <_dtoa_r+0x5aa>
 8012850:	e0d2      	b.n	80129f8 <_dtoa_r+0x750>
 8012852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012854:	9a08      	ldr	r2, [sp, #32]
 8012856:	4293      	cmp	r3, r2
 8012858:	d100      	bne.n	801285c <_dtoa_r+0x5b4>
 801285a:	e770      	b.n	801273e <_dtoa_r+0x496>
 801285c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801285e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012860:	2200      	movs	r2, #0
 8012862:	4b38      	ldr	r3, [pc, #224]	; (8012944 <_dtoa_r+0x69c>)
 8012864:	f7ee fd8c 	bl	8001380 <__aeabi_dmul>
 8012868:	4b36      	ldr	r3, [pc, #216]	; (8012944 <_dtoa_r+0x69c>)
 801286a:	9010      	str	r0, [sp, #64]	; 0x40
 801286c:	9111      	str	r1, [sp, #68]	; 0x44
 801286e:	2200      	movs	r2, #0
 8012870:	0020      	movs	r0, r4
 8012872:	0029      	movs	r1, r5
 8012874:	f7ee fd84 	bl	8001380 <__aeabi_dmul>
 8012878:	9b08      	ldr	r3, [sp, #32]
 801287a:	0004      	movs	r4, r0
 801287c:	000d      	movs	r5, r1
 801287e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012880:	e7be      	b.n	8012800 <_dtoa_r+0x558>
 8012882:	9808      	ldr	r0, [sp, #32]
 8012884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012886:	f7ee fd7b 	bl	8001380 <__aeabi_dmul>
 801288a:	9a06      	ldr	r2, [sp, #24]
 801288c:	9b06      	ldr	r3, [sp, #24]
 801288e:	4694      	mov	ip, r2
 8012890:	9308      	str	r3, [sp, #32]
 8012892:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012894:	9010      	str	r0, [sp, #64]	; 0x40
 8012896:	9111      	str	r1, [sp, #68]	; 0x44
 8012898:	4463      	add	r3, ip
 801289a:	9319      	str	r3, [sp, #100]	; 0x64
 801289c:	0029      	movs	r1, r5
 801289e:	0020      	movs	r0, r4
 80128a0:	f7ef fb8a 	bl	8001fb8 <__aeabi_d2iz>
 80128a4:	9017      	str	r0, [sp, #92]	; 0x5c
 80128a6:	f7ef fbbd 	bl	8002024 <__aeabi_i2d>
 80128aa:	0002      	movs	r2, r0
 80128ac:	000b      	movs	r3, r1
 80128ae:	0020      	movs	r0, r4
 80128b0:	0029      	movs	r1, r5
 80128b2:	f7ee ffd1 	bl	8001858 <__aeabi_dsub>
 80128b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128b8:	9a08      	ldr	r2, [sp, #32]
 80128ba:	3330      	adds	r3, #48	; 0x30
 80128bc:	7013      	strb	r3, [r2, #0]
 80128be:	0013      	movs	r3, r2
 80128c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80128c2:	3301      	adds	r3, #1
 80128c4:	0004      	movs	r4, r0
 80128c6:	000d      	movs	r5, r1
 80128c8:	9308      	str	r3, [sp, #32]
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d12c      	bne.n	8012928 <_dtoa_r+0x680>
 80128ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80128d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80128d2:	9a06      	ldr	r2, [sp, #24]
 80128d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80128d6:	4694      	mov	ip, r2
 80128d8:	4463      	add	r3, ip
 80128da:	2200      	movs	r2, #0
 80128dc:	9308      	str	r3, [sp, #32]
 80128de:	4b1e      	ldr	r3, [pc, #120]	; (8012958 <_dtoa_r+0x6b0>)
 80128e0:	f7ed fe10 	bl	8000504 <__aeabi_dadd>
 80128e4:	0002      	movs	r2, r0
 80128e6:	000b      	movs	r3, r1
 80128e8:	0020      	movs	r0, r4
 80128ea:	0029      	movs	r1, r5
 80128ec:	f7ed fdc8 	bl	8000480 <__aeabi_dcmpgt>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d000      	beq.n	80128f6 <_dtoa_r+0x64e>
 80128f4:	e080      	b.n	80129f8 <_dtoa_r+0x750>
 80128f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80128fa:	2000      	movs	r0, #0
 80128fc:	4916      	ldr	r1, [pc, #88]	; (8012958 <_dtoa_r+0x6b0>)
 80128fe:	f7ee ffab 	bl	8001858 <__aeabi_dsub>
 8012902:	0002      	movs	r2, r0
 8012904:	000b      	movs	r3, r1
 8012906:	0020      	movs	r0, r4
 8012908:	0029      	movs	r1, r5
 801290a:	f7ed fda5 	bl	8000458 <__aeabi_dcmplt>
 801290e:	2800      	cmp	r0, #0
 8012910:	d100      	bne.n	8012914 <_dtoa_r+0x66c>
 8012912:	e714      	b.n	801273e <_dtoa_r+0x496>
 8012914:	9b08      	ldr	r3, [sp, #32]
 8012916:	001a      	movs	r2, r3
 8012918:	3a01      	subs	r2, #1
 801291a:	9208      	str	r2, [sp, #32]
 801291c:	7812      	ldrb	r2, [r2, #0]
 801291e:	2a30      	cmp	r2, #48	; 0x30
 8012920:	d0f8      	beq.n	8012914 <_dtoa_r+0x66c>
 8012922:	9308      	str	r3, [sp, #32]
 8012924:	9602      	str	r6, [sp, #8]
 8012926:	e055      	b.n	80129d4 <_dtoa_r+0x72c>
 8012928:	2200      	movs	r2, #0
 801292a:	4b06      	ldr	r3, [pc, #24]	; (8012944 <_dtoa_r+0x69c>)
 801292c:	f7ee fd28 	bl	8001380 <__aeabi_dmul>
 8012930:	0004      	movs	r4, r0
 8012932:	000d      	movs	r5, r1
 8012934:	e7b2      	b.n	801289c <_dtoa_r+0x5f4>
 8012936:	46c0      	nop			; (mov r8, r8)
 8012938:	080153e8 	.word	0x080153e8
 801293c:	080153c0 	.word	0x080153c0
 8012940:	3ff00000 	.word	0x3ff00000
 8012944:	40240000 	.word	0x40240000
 8012948:	401c0000 	.word	0x401c0000
 801294c:	fcc00000 	.word	0xfcc00000
 8012950:	40140000 	.word	0x40140000
 8012954:	7cc00000 	.word	0x7cc00000
 8012958:	3fe00000 	.word	0x3fe00000
 801295c:	9b07      	ldr	r3, [sp, #28]
 801295e:	9e06      	ldr	r6, [sp, #24]
 8012960:	3b01      	subs	r3, #1
 8012962:	199b      	adds	r3, r3, r6
 8012964:	930c      	str	r3, [sp, #48]	; 0x30
 8012966:	9c08      	ldr	r4, [sp, #32]
 8012968:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801296a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801296c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801296e:	0020      	movs	r0, r4
 8012970:	0029      	movs	r1, r5
 8012972:	f7ee f903 	bl	8000b7c <__aeabi_ddiv>
 8012976:	f7ef fb1f 	bl	8001fb8 <__aeabi_d2iz>
 801297a:	9007      	str	r0, [sp, #28]
 801297c:	f7ef fb52 	bl	8002024 <__aeabi_i2d>
 8012980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012984:	f7ee fcfc 	bl	8001380 <__aeabi_dmul>
 8012988:	0002      	movs	r2, r0
 801298a:	000b      	movs	r3, r1
 801298c:	0020      	movs	r0, r4
 801298e:	0029      	movs	r1, r5
 8012990:	f7ee ff62 	bl	8001858 <__aeabi_dsub>
 8012994:	0033      	movs	r3, r6
 8012996:	9a07      	ldr	r2, [sp, #28]
 8012998:	3601      	adds	r6, #1
 801299a:	3230      	adds	r2, #48	; 0x30
 801299c:	701a      	strb	r2, [r3, #0]
 801299e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129a0:	9608      	str	r6, [sp, #32]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d139      	bne.n	8012a1a <_dtoa_r+0x772>
 80129a6:	0002      	movs	r2, r0
 80129a8:	000b      	movs	r3, r1
 80129aa:	f7ed fdab 	bl	8000504 <__aeabi_dadd>
 80129ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129b2:	0004      	movs	r4, r0
 80129b4:	000d      	movs	r5, r1
 80129b6:	f7ed fd63 	bl	8000480 <__aeabi_dcmpgt>
 80129ba:	2800      	cmp	r0, #0
 80129bc:	d11b      	bne.n	80129f6 <_dtoa_r+0x74e>
 80129be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129c2:	0020      	movs	r0, r4
 80129c4:	0029      	movs	r1, r5
 80129c6:	f7ed fd41 	bl	800044c <__aeabi_dcmpeq>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	d002      	beq.n	80129d4 <_dtoa_r+0x72c>
 80129ce:	9b07      	ldr	r3, [sp, #28]
 80129d0:	07db      	lsls	r3, r3, #31
 80129d2:	d410      	bmi.n	80129f6 <_dtoa_r+0x74e>
 80129d4:	0038      	movs	r0, r7
 80129d6:	9905      	ldr	r1, [sp, #20]
 80129d8:	f000 fd2c 	bl	8013434 <_Bfree>
 80129dc:	2300      	movs	r3, #0
 80129de:	9a08      	ldr	r2, [sp, #32]
 80129e0:	9802      	ldr	r0, [sp, #8]
 80129e2:	7013      	strb	r3, [r2, #0]
 80129e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80129e6:	3001      	adds	r0, #1
 80129e8:	6018      	str	r0, [r3, #0]
 80129ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d100      	bne.n	80129f2 <_dtoa_r+0x74a>
 80129f0:	e4a6      	b.n	8012340 <_dtoa_r+0x98>
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	e4a4      	b.n	8012340 <_dtoa_r+0x98>
 80129f6:	9e02      	ldr	r6, [sp, #8]
 80129f8:	9b08      	ldr	r3, [sp, #32]
 80129fa:	9308      	str	r3, [sp, #32]
 80129fc:	3b01      	subs	r3, #1
 80129fe:	781a      	ldrb	r2, [r3, #0]
 8012a00:	2a39      	cmp	r2, #57	; 0x39
 8012a02:	d106      	bne.n	8012a12 <_dtoa_r+0x76a>
 8012a04:	9a06      	ldr	r2, [sp, #24]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d1f7      	bne.n	80129fa <_dtoa_r+0x752>
 8012a0a:	2230      	movs	r2, #48	; 0x30
 8012a0c:	9906      	ldr	r1, [sp, #24]
 8012a0e:	3601      	adds	r6, #1
 8012a10:	700a      	strb	r2, [r1, #0]
 8012a12:	781a      	ldrb	r2, [r3, #0]
 8012a14:	3201      	adds	r2, #1
 8012a16:	701a      	strb	r2, [r3, #0]
 8012a18:	e784      	b.n	8012924 <_dtoa_r+0x67c>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	4baa      	ldr	r3, [pc, #680]	; (8012cc8 <_dtoa_r+0xa20>)
 8012a1e:	f7ee fcaf 	bl	8001380 <__aeabi_dmul>
 8012a22:	2200      	movs	r2, #0
 8012a24:	2300      	movs	r3, #0
 8012a26:	0004      	movs	r4, r0
 8012a28:	000d      	movs	r5, r1
 8012a2a:	f7ed fd0f 	bl	800044c <__aeabi_dcmpeq>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	d09b      	beq.n	801296a <_dtoa_r+0x6c2>
 8012a32:	e7cf      	b.n	80129d4 <_dtoa_r+0x72c>
 8012a34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012a36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012a38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012a3a:	2d00      	cmp	r5, #0
 8012a3c:	d012      	beq.n	8012a64 <_dtoa_r+0x7bc>
 8012a3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012a40:	2a01      	cmp	r2, #1
 8012a42:	dc66      	bgt.n	8012b12 <_dtoa_r+0x86a>
 8012a44:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012a46:	2a00      	cmp	r2, #0
 8012a48:	d05d      	beq.n	8012b06 <_dtoa_r+0x85e>
 8012a4a:	4aa0      	ldr	r2, [pc, #640]	; (8012ccc <_dtoa_r+0xa24>)
 8012a4c:	189b      	adds	r3, r3, r2
 8012a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a50:	2101      	movs	r1, #1
 8012a52:	18d2      	adds	r2, r2, r3
 8012a54:	920a      	str	r2, [sp, #40]	; 0x28
 8012a56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a58:	0038      	movs	r0, r7
 8012a5a:	18d3      	adds	r3, r2, r3
 8012a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8012a5e:	f000 fd99 	bl	8013594 <__i2b>
 8012a62:	0005      	movs	r5, r0
 8012a64:	2c00      	cmp	r4, #0
 8012a66:	dd0e      	ble.n	8012a86 <_dtoa_r+0x7de>
 8012a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	dd0b      	ble.n	8012a86 <_dtoa_r+0x7de>
 8012a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a70:	0023      	movs	r3, r4
 8012a72:	4294      	cmp	r4, r2
 8012a74:	dd00      	ble.n	8012a78 <_dtoa_r+0x7d0>
 8012a76:	0013      	movs	r3, r2
 8012a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a7a:	1ae4      	subs	r4, r4, r3
 8012a7c:	1ad2      	subs	r2, r2, r3
 8012a7e:	920a      	str	r2, [sp, #40]	; 0x28
 8012a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	930d      	str	r3, [sp, #52]	; 0x34
 8012a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d01f      	beq.n	8012acc <_dtoa_r+0x824>
 8012a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d054      	beq.n	8012b3c <_dtoa_r+0x894>
 8012a92:	2e00      	cmp	r6, #0
 8012a94:	dd11      	ble.n	8012aba <_dtoa_r+0x812>
 8012a96:	0029      	movs	r1, r5
 8012a98:	0032      	movs	r2, r6
 8012a9a:	0038      	movs	r0, r7
 8012a9c:	f000 fe40 	bl	8013720 <__pow5mult>
 8012aa0:	9a05      	ldr	r2, [sp, #20]
 8012aa2:	0001      	movs	r1, r0
 8012aa4:	0005      	movs	r5, r0
 8012aa6:	0038      	movs	r0, r7
 8012aa8:	f000 fd8a 	bl	80135c0 <__multiply>
 8012aac:	9905      	ldr	r1, [sp, #20]
 8012aae:	9014      	str	r0, [sp, #80]	; 0x50
 8012ab0:	0038      	movs	r0, r7
 8012ab2:	f000 fcbf 	bl	8013434 <_Bfree>
 8012ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ab8:	9305      	str	r3, [sp, #20]
 8012aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012abc:	1b9a      	subs	r2, r3, r6
 8012abe:	42b3      	cmp	r3, r6
 8012ac0:	d004      	beq.n	8012acc <_dtoa_r+0x824>
 8012ac2:	0038      	movs	r0, r7
 8012ac4:	9905      	ldr	r1, [sp, #20]
 8012ac6:	f000 fe2b 	bl	8013720 <__pow5mult>
 8012aca:	9005      	str	r0, [sp, #20]
 8012acc:	2101      	movs	r1, #1
 8012ace:	0038      	movs	r0, r7
 8012ad0:	f000 fd60 	bl	8013594 <__i2b>
 8012ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ad6:	0006      	movs	r6, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	dd31      	ble.n	8012b40 <_dtoa_r+0x898>
 8012adc:	001a      	movs	r2, r3
 8012ade:	0001      	movs	r1, r0
 8012ae0:	0038      	movs	r0, r7
 8012ae2:	f000 fe1d 	bl	8013720 <__pow5mult>
 8012ae6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ae8:	0006      	movs	r6, r0
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	dd2d      	ble.n	8012b4a <_dtoa_r+0x8a2>
 8012aee:	2300      	movs	r3, #0
 8012af0:	930e      	str	r3, [sp, #56]	; 0x38
 8012af2:	6933      	ldr	r3, [r6, #16]
 8012af4:	3303      	adds	r3, #3
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	18f3      	adds	r3, r6, r3
 8012afa:	6858      	ldr	r0, [r3, #4]
 8012afc:	f000 fd02 	bl	8013504 <__hi0bits>
 8012b00:	2320      	movs	r3, #32
 8012b02:	1a18      	subs	r0, r3, r0
 8012b04:	e039      	b.n	8012b7a <_dtoa_r+0x8d2>
 8012b06:	2336      	movs	r3, #54	; 0x36
 8012b08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012b0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012b0e:	1a9b      	subs	r3, r3, r2
 8012b10:	e79d      	b.n	8012a4e <_dtoa_r+0x7a6>
 8012b12:	9b07      	ldr	r3, [sp, #28]
 8012b14:	1e5e      	subs	r6, r3, #1
 8012b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b18:	42b3      	cmp	r3, r6
 8012b1a:	db07      	blt.n	8012b2c <_dtoa_r+0x884>
 8012b1c:	1b9e      	subs	r6, r3, r6
 8012b1e:	9b07      	ldr	r3, [sp, #28]
 8012b20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	da93      	bge.n	8012a4e <_dtoa_r+0x7a6>
 8012b26:	1ae4      	subs	r4, r4, r3
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e790      	b.n	8012a4e <_dtoa_r+0x7a6>
 8012b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012b30:	1af3      	subs	r3, r6, r3
 8012b32:	18d3      	adds	r3, r2, r3
 8012b34:	960e      	str	r6, [sp, #56]	; 0x38
 8012b36:	9315      	str	r3, [sp, #84]	; 0x54
 8012b38:	2600      	movs	r6, #0
 8012b3a:	e7f0      	b.n	8012b1e <_dtoa_r+0x876>
 8012b3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b3e:	e7c0      	b.n	8012ac2 <_dtoa_r+0x81a>
 8012b40:	2300      	movs	r3, #0
 8012b42:	930e      	str	r3, [sp, #56]	; 0x38
 8012b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	dc13      	bgt.n	8012b72 <_dtoa_r+0x8ca>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8012b4e:	9b08      	ldr	r3, [sp, #32]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d10e      	bne.n	8012b72 <_dtoa_r+0x8ca>
 8012b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b56:	031b      	lsls	r3, r3, #12
 8012b58:	d10b      	bne.n	8012b72 <_dtoa_r+0x8ca>
 8012b5a:	4b5d      	ldr	r3, [pc, #372]	; (8012cd0 <_dtoa_r+0xa28>)
 8012b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b5e:	4213      	tst	r3, r2
 8012b60:	d007      	beq.n	8012b72 <_dtoa_r+0x8ca>
 8012b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b64:	3301      	adds	r3, #1
 8012b66:	930a      	str	r3, [sp, #40]	; 0x28
 8012b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8012b6e:	2301      	movs	r3, #1
 8012b70:	930e      	str	r3, [sp, #56]	; 0x38
 8012b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b74:	2001      	movs	r0, #1
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d1bb      	bne.n	8012af2 <_dtoa_r+0x84a>
 8012b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b7c:	221f      	movs	r2, #31
 8012b7e:	1818      	adds	r0, r3, r0
 8012b80:	0003      	movs	r3, r0
 8012b82:	4013      	ands	r3, r2
 8012b84:	4210      	tst	r0, r2
 8012b86:	d046      	beq.n	8012c16 <_dtoa_r+0x96e>
 8012b88:	3201      	adds	r2, #1
 8012b8a:	1ad2      	subs	r2, r2, r3
 8012b8c:	2a04      	cmp	r2, #4
 8012b8e:	dd3f      	ble.n	8012c10 <_dtoa_r+0x968>
 8012b90:	221c      	movs	r2, #28
 8012b92:	1ad3      	subs	r3, r2, r3
 8012b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b96:	18e4      	adds	r4, r4, r3
 8012b98:	18d2      	adds	r2, r2, r3
 8012b9a:	920a      	str	r2, [sp, #40]	; 0x28
 8012b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b9e:	18d3      	adds	r3, r2, r3
 8012ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8012ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	dd05      	ble.n	8012bb4 <_dtoa_r+0x90c>
 8012ba8:	001a      	movs	r2, r3
 8012baa:	0038      	movs	r0, r7
 8012bac:	9905      	ldr	r1, [sp, #20]
 8012bae:	f000 fe13 	bl	80137d8 <__lshift>
 8012bb2:	9005      	str	r0, [sp, #20]
 8012bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	dd05      	ble.n	8012bc6 <_dtoa_r+0x91e>
 8012bba:	0031      	movs	r1, r6
 8012bbc:	001a      	movs	r2, r3
 8012bbe:	0038      	movs	r0, r7
 8012bc0:	f000 fe0a 	bl	80137d8 <__lshift>
 8012bc4:	0006      	movs	r6, r0
 8012bc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d026      	beq.n	8012c1a <_dtoa_r+0x972>
 8012bcc:	0031      	movs	r1, r6
 8012bce:	9805      	ldr	r0, [sp, #20]
 8012bd0:	f000 fe70 	bl	80138b4 <__mcmp>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	da20      	bge.n	8012c1a <_dtoa_r+0x972>
 8012bd8:	9b02      	ldr	r3, [sp, #8]
 8012bda:	220a      	movs	r2, #10
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	9302      	str	r3, [sp, #8]
 8012be0:	0038      	movs	r0, r7
 8012be2:	2300      	movs	r3, #0
 8012be4:	9905      	ldr	r1, [sp, #20]
 8012be6:	f000 fc49 	bl	801347c <__multadd>
 8012bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bec:	9005      	str	r0, [sp, #20]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d100      	bne.n	8012bf4 <_dtoa_r+0x94c>
 8012bf2:	e166      	b.n	8012ec2 <_dtoa_r+0xc1a>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	0029      	movs	r1, r5
 8012bf8:	220a      	movs	r2, #10
 8012bfa:	0038      	movs	r0, r7
 8012bfc:	f000 fc3e 	bl	801347c <__multadd>
 8012c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c02:	0005      	movs	r5, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	dc47      	bgt.n	8012c98 <_dtoa_r+0x9f0>
 8012c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	dc0d      	bgt.n	8012c2a <_dtoa_r+0x982>
 8012c0e:	e043      	b.n	8012c98 <_dtoa_r+0x9f0>
 8012c10:	2a04      	cmp	r2, #4
 8012c12:	d0c6      	beq.n	8012ba2 <_dtoa_r+0x8fa>
 8012c14:	0013      	movs	r3, r2
 8012c16:	331c      	adds	r3, #28
 8012c18:	e7bc      	b.n	8012b94 <_dtoa_r+0x8ec>
 8012c1a:	9b07      	ldr	r3, [sp, #28]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	dc35      	bgt.n	8012c8c <_dtoa_r+0x9e4>
 8012c20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c22:	2b02      	cmp	r3, #2
 8012c24:	dd32      	ble.n	8012c8c <_dtoa_r+0x9e4>
 8012c26:	9b07      	ldr	r3, [sp, #28]
 8012c28:	930c      	str	r3, [sp, #48]	; 0x30
 8012c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d10c      	bne.n	8012c4a <_dtoa_r+0x9a2>
 8012c30:	0031      	movs	r1, r6
 8012c32:	2205      	movs	r2, #5
 8012c34:	0038      	movs	r0, r7
 8012c36:	f000 fc21 	bl	801347c <__multadd>
 8012c3a:	0006      	movs	r6, r0
 8012c3c:	0001      	movs	r1, r0
 8012c3e:	9805      	ldr	r0, [sp, #20]
 8012c40:	f000 fe38 	bl	80138b4 <__mcmp>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	dd00      	ble.n	8012c4a <_dtoa_r+0x9a2>
 8012c48:	e5a5      	b.n	8012796 <_dtoa_r+0x4ee>
 8012c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012c4c:	43db      	mvns	r3, r3
 8012c4e:	9302      	str	r3, [sp, #8]
 8012c50:	9b06      	ldr	r3, [sp, #24]
 8012c52:	9308      	str	r3, [sp, #32]
 8012c54:	2400      	movs	r4, #0
 8012c56:	0031      	movs	r1, r6
 8012c58:	0038      	movs	r0, r7
 8012c5a:	f000 fbeb 	bl	8013434 <_Bfree>
 8012c5e:	2d00      	cmp	r5, #0
 8012c60:	d100      	bne.n	8012c64 <_dtoa_r+0x9bc>
 8012c62:	e6b7      	b.n	80129d4 <_dtoa_r+0x72c>
 8012c64:	2c00      	cmp	r4, #0
 8012c66:	d005      	beq.n	8012c74 <_dtoa_r+0x9cc>
 8012c68:	42ac      	cmp	r4, r5
 8012c6a:	d003      	beq.n	8012c74 <_dtoa_r+0x9cc>
 8012c6c:	0021      	movs	r1, r4
 8012c6e:	0038      	movs	r0, r7
 8012c70:	f000 fbe0 	bl	8013434 <_Bfree>
 8012c74:	0029      	movs	r1, r5
 8012c76:	0038      	movs	r0, r7
 8012c78:	f000 fbdc 	bl	8013434 <_Bfree>
 8012c7c:	e6aa      	b.n	80129d4 <_dtoa_r+0x72c>
 8012c7e:	2600      	movs	r6, #0
 8012c80:	0035      	movs	r5, r6
 8012c82:	e7e2      	b.n	8012c4a <_dtoa_r+0x9a2>
 8012c84:	9602      	str	r6, [sp, #8]
 8012c86:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012c88:	0035      	movs	r5, r6
 8012c8a:	e584      	b.n	8012796 <_dtoa_r+0x4ee>
 8012c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d100      	bne.n	8012c94 <_dtoa_r+0x9ec>
 8012c92:	e0ce      	b.n	8012e32 <_dtoa_r+0xb8a>
 8012c94:	9b07      	ldr	r3, [sp, #28]
 8012c96:	930c      	str	r3, [sp, #48]	; 0x30
 8012c98:	2c00      	cmp	r4, #0
 8012c9a:	dd05      	ble.n	8012ca8 <_dtoa_r+0xa00>
 8012c9c:	0029      	movs	r1, r5
 8012c9e:	0022      	movs	r2, r4
 8012ca0:	0038      	movs	r0, r7
 8012ca2:	f000 fd99 	bl	80137d8 <__lshift>
 8012ca6:	0005      	movs	r5, r0
 8012ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012caa:	0028      	movs	r0, r5
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d022      	beq.n	8012cf6 <_dtoa_r+0xa4e>
 8012cb0:	0038      	movs	r0, r7
 8012cb2:	6869      	ldr	r1, [r5, #4]
 8012cb4:	f000 fb7a 	bl	80133ac <_Balloc>
 8012cb8:	1e04      	subs	r4, r0, #0
 8012cba:	d10f      	bne.n	8012cdc <_dtoa_r+0xa34>
 8012cbc:	0002      	movs	r2, r0
 8012cbe:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <_dtoa_r+0xa2c>)
 8012cc0:	4905      	ldr	r1, [pc, #20]	; (8012cd8 <_dtoa_r+0xa30>)
 8012cc2:	f7ff fb06 	bl	80122d2 <_dtoa_r+0x2a>
 8012cc6:	46c0      	nop			; (mov r8, r8)
 8012cc8:	40240000 	.word	0x40240000
 8012ccc:	00000433 	.word	0x00000433
 8012cd0:	7ff00000 	.word	0x7ff00000
 8012cd4:	080152ef 	.word	0x080152ef
 8012cd8:	000002ea 	.word	0x000002ea
 8012cdc:	0029      	movs	r1, r5
 8012cde:	692b      	ldr	r3, [r5, #16]
 8012ce0:	310c      	adds	r1, #12
 8012ce2:	1c9a      	adds	r2, r3, #2
 8012ce4:	0092      	lsls	r2, r2, #2
 8012ce6:	300c      	adds	r0, #12
 8012ce8:	f7fe fbea 	bl	80114c0 <memcpy>
 8012cec:	2201      	movs	r2, #1
 8012cee:	0021      	movs	r1, r4
 8012cf0:	0038      	movs	r0, r7
 8012cf2:	f000 fd71 	bl	80137d8 <__lshift>
 8012cf6:	9b06      	ldr	r3, [sp, #24]
 8012cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	189b      	adds	r3, r3, r2
 8012d00:	2201      	movs	r2, #1
 8012d02:	002c      	movs	r4, r5
 8012d04:	0005      	movs	r5, r0
 8012d06:	9314      	str	r3, [sp, #80]	; 0x50
 8012d08:	9b08      	ldr	r3, [sp, #32]
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d0e:	0031      	movs	r1, r6
 8012d10:	9805      	ldr	r0, [sp, #20]
 8012d12:	f7ff fa3d 	bl	8012190 <quorem>
 8012d16:	0003      	movs	r3, r0
 8012d18:	0021      	movs	r1, r4
 8012d1a:	3330      	adds	r3, #48	; 0x30
 8012d1c:	900d      	str	r0, [sp, #52]	; 0x34
 8012d1e:	9805      	ldr	r0, [sp, #20]
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	f000 fdc7 	bl	80138b4 <__mcmp>
 8012d26:	002a      	movs	r2, r5
 8012d28:	900e      	str	r0, [sp, #56]	; 0x38
 8012d2a:	0031      	movs	r1, r6
 8012d2c:	0038      	movs	r0, r7
 8012d2e:	f000 fddd 	bl	80138ec <__mdiff>
 8012d32:	68c3      	ldr	r3, [r0, #12]
 8012d34:	9008      	str	r0, [sp, #32]
 8012d36:	9310      	str	r3, [sp, #64]	; 0x40
 8012d38:	2301      	movs	r3, #1
 8012d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8012d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d104      	bne.n	8012d4c <_dtoa_r+0xaa4>
 8012d42:	0001      	movs	r1, r0
 8012d44:	9805      	ldr	r0, [sp, #20]
 8012d46:	f000 fdb5 	bl	80138b4 <__mcmp>
 8012d4a:	900c      	str	r0, [sp, #48]	; 0x30
 8012d4c:	0038      	movs	r0, r7
 8012d4e:	9908      	ldr	r1, [sp, #32]
 8012d50:	f000 fb70 	bl	8013434 <_Bfree>
 8012d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d58:	3301      	adds	r3, #1
 8012d5a:	9308      	str	r3, [sp, #32]
 8012d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012d5e:	4313      	orrs	r3, r2
 8012d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d62:	4313      	orrs	r3, r2
 8012d64:	d10c      	bne.n	8012d80 <_dtoa_r+0xad8>
 8012d66:	9b07      	ldr	r3, [sp, #28]
 8012d68:	2b39      	cmp	r3, #57	; 0x39
 8012d6a:	d026      	beq.n	8012dba <_dtoa_r+0xb12>
 8012d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	dd02      	ble.n	8012d78 <_dtoa_r+0xad0>
 8012d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d74:	3331      	adds	r3, #49	; 0x31
 8012d76:	9307      	str	r3, [sp, #28]
 8012d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d7a:	9a07      	ldr	r2, [sp, #28]
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	e76a      	b.n	8012c56 <_dtoa_r+0x9ae>
 8012d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	db04      	blt.n	8012d90 <_dtoa_r+0xae8>
 8012d86:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	d11f      	bne.n	8012dd0 <_dtoa_r+0xb28>
 8012d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	ddf0      	ble.n	8012d78 <_dtoa_r+0xad0>
 8012d96:	9905      	ldr	r1, [sp, #20]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	0038      	movs	r0, r7
 8012d9c:	f000 fd1c 	bl	80137d8 <__lshift>
 8012da0:	0031      	movs	r1, r6
 8012da2:	9005      	str	r0, [sp, #20]
 8012da4:	f000 fd86 	bl	80138b4 <__mcmp>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	dc03      	bgt.n	8012db4 <_dtoa_r+0xb0c>
 8012dac:	d1e4      	bne.n	8012d78 <_dtoa_r+0xad0>
 8012dae:	9b07      	ldr	r3, [sp, #28]
 8012db0:	07db      	lsls	r3, r3, #31
 8012db2:	d5e1      	bpl.n	8012d78 <_dtoa_r+0xad0>
 8012db4:	9b07      	ldr	r3, [sp, #28]
 8012db6:	2b39      	cmp	r3, #57	; 0x39
 8012db8:	d1db      	bne.n	8012d72 <_dtoa_r+0xaca>
 8012dba:	2339      	movs	r3, #57	; 0x39
 8012dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012dbe:	7013      	strb	r3, [r2, #0]
 8012dc0:	9b08      	ldr	r3, [sp, #32]
 8012dc2:	9308      	str	r3, [sp, #32]
 8012dc4:	3b01      	subs	r3, #1
 8012dc6:	781a      	ldrb	r2, [r3, #0]
 8012dc8:	2a39      	cmp	r2, #57	; 0x39
 8012dca:	d068      	beq.n	8012e9e <_dtoa_r+0xbf6>
 8012dcc:	3201      	adds	r2, #1
 8012dce:	e7d5      	b.n	8012d7c <_dtoa_r+0xad4>
 8012dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	dd07      	ble.n	8012de6 <_dtoa_r+0xb3e>
 8012dd6:	9b07      	ldr	r3, [sp, #28]
 8012dd8:	2b39      	cmp	r3, #57	; 0x39
 8012dda:	d0ee      	beq.n	8012dba <_dtoa_r+0xb12>
 8012ddc:	9b07      	ldr	r3, [sp, #28]
 8012dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012de0:	3301      	adds	r3, #1
 8012de2:	7013      	strb	r3, [r2, #0]
 8012de4:	e737      	b.n	8012c56 <_dtoa_r+0x9ae>
 8012de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012de8:	9a07      	ldr	r2, [sp, #28]
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d03e      	beq.n	8012e72 <_dtoa_r+0xbca>
 8012df4:	2300      	movs	r3, #0
 8012df6:	220a      	movs	r2, #10
 8012df8:	9905      	ldr	r1, [sp, #20]
 8012dfa:	0038      	movs	r0, r7
 8012dfc:	f000 fb3e 	bl	801347c <__multadd>
 8012e00:	2300      	movs	r3, #0
 8012e02:	9005      	str	r0, [sp, #20]
 8012e04:	220a      	movs	r2, #10
 8012e06:	0021      	movs	r1, r4
 8012e08:	0038      	movs	r0, r7
 8012e0a:	42ac      	cmp	r4, r5
 8012e0c:	d106      	bne.n	8012e1c <_dtoa_r+0xb74>
 8012e0e:	f000 fb35 	bl	801347c <__multadd>
 8012e12:	0004      	movs	r4, r0
 8012e14:	0005      	movs	r5, r0
 8012e16:	9b08      	ldr	r3, [sp, #32]
 8012e18:	930a      	str	r3, [sp, #40]	; 0x28
 8012e1a:	e778      	b.n	8012d0e <_dtoa_r+0xa66>
 8012e1c:	f000 fb2e 	bl	801347c <__multadd>
 8012e20:	0029      	movs	r1, r5
 8012e22:	0004      	movs	r4, r0
 8012e24:	2300      	movs	r3, #0
 8012e26:	220a      	movs	r2, #10
 8012e28:	0038      	movs	r0, r7
 8012e2a:	f000 fb27 	bl	801347c <__multadd>
 8012e2e:	0005      	movs	r5, r0
 8012e30:	e7f1      	b.n	8012e16 <_dtoa_r+0xb6e>
 8012e32:	9b07      	ldr	r3, [sp, #28]
 8012e34:	930c      	str	r3, [sp, #48]	; 0x30
 8012e36:	2400      	movs	r4, #0
 8012e38:	0031      	movs	r1, r6
 8012e3a:	9805      	ldr	r0, [sp, #20]
 8012e3c:	f7ff f9a8 	bl	8012190 <quorem>
 8012e40:	9b06      	ldr	r3, [sp, #24]
 8012e42:	3030      	adds	r0, #48	; 0x30
 8012e44:	5518      	strb	r0, [r3, r4]
 8012e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e48:	3401      	adds	r4, #1
 8012e4a:	9007      	str	r0, [sp, #28]
 8012e4c:	42a3      	cmp	r3, r4
 8012e4e:	dd07      	ble.n	8012e60 <_dtoa_r+0xbb8>
 8012e50:	2300      	movs	r3, #0
 8012e52:	220a      	movs	r2, #10
 8012e54:	0038      	movs	r0, r7
 8012e56:	9905      	ldr	r1, [sp, #20]
 8012e58:	f000 fb10 	bl	801347c <__multadd>
 8012e5c:	9005      	str	r0, [sp, #20]
 8012e5e:	e7eb      	b.n	8012e38 <_dtoa_r+0xb90>
 8012e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e62:	2001      	movs	r0, #1
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	dd00      	ble.n	8012e6a <_dtoa_r+0xbc2>
 8012e68:	0018      	movs	r0, r3
 8012e6a:	2400      	movs	r4, #0
 8012e6c:	9b06      	ldr	r3, [sp, #24]
 8012e6e:	181b      	adds	r3, r3, r0
 8012e70:	9308      	str	r3, [sp, #32]
 8012e72:	9905      	ldr	r1, [sp, #20]
 8012e74:	2201      	movs	r2, #1
 8012e76:	0038      	movs	r0, r7
 8012e78:	f000 fcae 	bl	80137d8 <__lshift>
 8012e7c:	0031      	movs	r1, r6
 8012e7e:	9005      	str	r0, [sp, #20]
 8012e80:	f000 fd18 	bl	80138b4 <__mcmp>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	dc9b      	bgt.n	8012dc0 <_dtoa_r+0xb18>
 8012e88:	d102      	bne.n	8012e90 <_dtoa_r+0xbe8>
 8012e8a:	9b07      	ldr	r3, [sp, #28]
 8012e8c:	07db      	lsls	r3, r3, #31
 8012e8e:	d497      	bmi.n	8012dc0 <_dtoa_r+0xb18>
 8012e90:	9b08      	ldr	r3, [sp, #32]
 8012e92:	9308      	str	r3, [sp, #32]
 8012e94:	3b01      	subs	r3, #1
 8012e96:	781a      	ldrb	r2, [r3, #0]
 8012e98:	2a30      	cmp	r2, #48	; 0x30
 8012e9a:	d0fa      	beq.n	8012e92 <_dtoa_r+0xbea>
 8012e9c:	e6db      	b.n	8012c56 <_dtoa_r+0x9ae>
 8012e9e:	9a06      	ldr	r2, [sp, #24]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d18e      	bne.n	8012dc2 <_dtoa_r+0xb1a>
 8012ea4:	9b02      	ldr	r3, [sp, #8]
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	9302      	str	r3, [sp, #8]
 8012eaa:	2331      	movs	r3, #49	; 0x31
 8012eac:	e799      	b.n	8012de2 <_dtoa_r+0xb3a>
 8012eae:	4b09      	ldr	r3, [pc, #36]	; (8012ed4 <_dtoa_r+0xc2c>)
 8012eb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012eb2:	9306      	str	r3, [sp, #24]
 8012eb4:	4b08      	ldr	r3, [pc, #32]	; (8012ed8 <_dtoa_r+0xc30>)
 8012eb6:	2a00      	cmp	r2, #0
 8012eb8:	d001      	beq.n	8012ebe <_dtoa_r+0xc16>
 8012eba:	f7ff fa3f 	bl	801233c <_dtoa_r+0x94>
 8012ebe:	f7ff fa3f 	bl	8012340 <_dtoa_r+0x98>
 8012ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dcb6      	bgt.n	8012e36 <_dtoa_r+0xb8e>
 8012ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	dd00      	ble.n	8012ed0 <_dtoa_r+0xc28>
 8012ece:	e6ac      	b.n	8012c2a <_dtoa_r+0x982>
 8012ed0:	e7b1      	b.n	8012e36 <_dtoa_r+0xb8e>
 8012ed2:	46c0      	nop			; (mov r8, r8)
 8012ed4:	08015287 	.word	0x08015287
 8012ed8:	0801528f 	.word	0x0801528f

08012edc <__sflush_r>:
 8012edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ede:	898b      	ldrh	r3, [r1, #12]
 8012ee0:	0005      	movs	r5, r0
 8012ee2:	000c      	movs	r4, r1
 8012ee4:	071a      	lsls	r2, r3, #28
 8012ee6:	d45f      	bmi.n	8012fa8 <__sflush_r+0xcc>
 8012ee8:	684a      	ldr	r2, [r1, #4]
 8012eea:	2a00      	cmp	r2, #0
 8012eec:	dc04      	bgt.n	8012ef8 <__sflush_r+0x1c>
 8012eee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012ef0:	2a00      	cmp	r2, #0
 8012ef2:	dc01      	bgt.n	8012ef8 <__sflush_r+0x1c>
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012ef8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012efa:	2f00      	cmp	r7, #0
 8012efc:	d0fa      	beq.n	8012ef4 <__sflush_r+0x18>
 8012efe:	2200      	movs	r2, #0
 8012f00:	2180      	movs	r1, #128	; 0x80
 8012f02:	682e      	ldr	r6, [r5, #0]
 8012f04:	602a      	str	r2, [r5, #0]
 8012f06:	001a      	movs	r2, r3
 8012f08:	0149      	lsls	r1, r1, #5
 8012f0a:	400a      	ands	r2, r1
 8012f0c:	420b      	tst	r3, r1
 8012f0e:	d034      	beq.n	8012f7a <__sflush_r+0x9e>
 8012f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f12:	89a3      	ldrh	r3, [r4, #12]
 8012f14:	075b      	lsls	r3, r3, #29
 8012f16:	d506      	bpl.n	8012f26 <__sflush_r+0x4a>
 8012f18:	6863      	ldr	r3, [r4, #4]
 8012f1a:	1ac0      	subs	r0, r0, r3
 8012f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <__sflush_r+0x4a>
 8012f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f24:	1ac0      	subs	r0, r0, r3
 8012f26:	0002      	movs	r2, r0
 8012f28:	6a21      	ldr	r1, [r4, #32]
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	0028      	movs	r0, r5
 8012f2e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012f30:	47b8      	blx	r7
 8012f32:	89a1      	ldrh	r1, [r4, #12]
 8012f34:	1c43      	adds	r3, r0, #1
 8012f36:	d106      	bne.n	8012f46 <__sflush_r+0x6a>
 8012f38:	682b      	ldr	r3, [r5, #0]
 8012f3a:	2b1d      	cmp	r3, #29
 8012f3c:	d831      	bhi.n	8012fa2 <__sflush_r+0xc6>
 8012f3e:	4a2c      	ldr	r2, [pc, #176]	; (8012ff0 <__sflush_r+0x114>)
 8012f40:	40da      	lsrs	r2, r3
 8012f42:	07d3      	lsls	r3, r2, #31
 8012f44:	d52d      	bpl.n	8012fa2 <__sflush_r+0xc6>
 8012f46:	2300      	movs	r3, #0
 8012f48:	6063      	str	r3, [r4, #4]
 8012f4a:	6923      	ldr	r3, [r4, #16]
 8012f4c:	6023      	str	r3, [r4, #0]
 8012f4e:	04cb      	lsls	r3, r1, #19
 8012f50:	d505      	bpl.n	8012f5e <__sflush_r+0x82>
 8012f52:	1c43      	adds	r3, r0, #1
 8012f54:	d102      	bne.n	8012f5c <__sflush_r+0x80>
 8012f56:	682b      	ldr	r3, [r5, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d100      	bne.n	8012f5e <__sflush_r+0x82>
 8012f5c:	6560      	str	r0, [r4, #84]	; 0x54
 8012f5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f60:	602e      	str	r6, [r5, #0]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	d0c6      	beq.n	8012ef4 <__sflush_r+0x18>
 8012f66:	0023      	movs	r3, r4
 8012f68:	3344      	adds	r3, #68	; 0x44
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	d002      	beq.n	8012f74 <__sflush_r+0x98>
 8012f6e:	0028      	movs	r0, r5
 8012f70:	f000 fde4 	bl	8013b3c <_free_r>
 8012f74:	2000      	movs	r0, #0
 8012f76:	6360      	str	r0, [r4, #52]	; 0x34
 8012f78:	e7bd      	b.n	8012ef6 <__sflush_r+0x1a>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	0028      	movs	r0, r5
 8012f7e:	6a21      	ldr	r1, [r4, #32]
 8012f80:	47b8      	blx	r7
 8012f82:	1c43      	adds	r3, r0, #1
 8012f84:	d1c5      	bne.n	8012f12 <__sflush_r+0x36>
 8012f86:	682b      	ldr	r3, [r5, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d0c2      	beq.n	8012f12 <__sflush_r+0x36>
 8012f8c:	2b1d      	cmp	r3, #29
 8012f8e:	d001      	beq.n	8012f94 <__sflush_r+0xb8>
 8012f90:	2b16      	cmp	r3, #22
 8012f92:	d101      	bne.n	8012f98 <__sflush_r+0xbc>
 8012f94:	602e      	str	r6, [r5, #0]
 8012f96:	e7ad      	b.n	8012ef4 <__sflush_r+0x18>
 8012f98:	2340      	movs	r3, #64	; 0x40
 8012f9a:	89a2      	ldrh	r2, [r4, #12]
 8012f9c:	4313      	orrs	r3, r2
 8012f9e:	81a3      	strh	r3, [r4, #12]
 8012fa0:	e7a9      	b.n	8012ef6 <__sflush_r+0x1a>
 8012fa2:	2340      	movs	r3, #64	; 0x40
 8012fa4:	430b      	orrs	r3, r1
 8012fa6:	e7fa      	b.n	8012f9e <__sflush_r+0xc2>
 8012fa8:	690f      	ldr	r7, [r1, #16]
 8012faa:	2f00      	cmp	r7, #0
 8012fac:	d0a2      	beq.n	8012ef4 <__sflush_r+0x18>
 8012fae:	680a      	ldr	r2, [r1, #0]
 8012fb0:	600f      	str	r7, [r1, #0]
 8012fb2:	1bd2      	subs	r2, r2, r7
 8012fb4:	9201      	str	r2, [sp, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	079b      	lsls	r3, r3, #30
 8012fba:	d100      	bne.n	8012fbe <__sflush_r+0xe2>
 8012fbc:	694a      	ldr	r2, [r1, #20]
 8012fbe:	60a2      	str	r2, [r4, #8]
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dc00      	bgt.n	8012fc8 <__sflush_r+0xec>
 8012fc6:	e795      	b.n	8012ef4 <__sflush_r+0x18>
 8012fc8:	003a      	movs	r2, r7
 8012fca:	0028      	movs	r0, r5
 8012fcc:	9b01      	ldr	r3, [sp, #4]
 8012fce:	6a21      	ldr	r1, [r4, #32]
 8012fd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fd2:	47b0      	blx	r6
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	dc06      	bgt.n	8012fe6 <__sflush_r+0x10a>
 8012fd8:	2340      	movs	r3, #64	; 0x40
 8012fda:	2001      	movs	r0, #1
 8012fdc:	89a2      	ldrh	r2, [r4, #12]
 8012fde:	4240      	negs	r0, r0
 8012fe0:	4313      	orrs	r3, r2
 8012fe2:	81a3      	strh	r3, [r4, #12]
 8012fe4:	e787      	b.n	8012ef6 <__sflush_r+0x1a>
 8012fe6:	9b01      	ldr	r3, [sp, #4]
 8012fe8:	183f      	adds	r7, r7, r0
 8012fea:	1a1b      	subs	r3, r3, r0
 8012fec:	9301      	str	r3, [sp, #4]
 8012fee:	e7e7      	b.n	8012fc0 <__sflush_r+0xe4>
 8012ff0:	20400001 	.word	0x20400001

08012ff4 <_fflush_r>:
 8012ff4:	690b      	ldr	r3, [r1, #16]
 8012ff6:	b570      	push	{r4, r5, r6, lr}
 8012ff8:	0005      	movs	r5, r0
 8012ffa:	000c      	movs	r4, r1
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d102      	bne.n	8013006 <_fflush_r+0x12>
 8013000:	2500      	movs	r5, #0
 8013002:	0028      	movs	r0, r5
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	2800      	cmp	r0, #0
 8013008:	d004      	beq.n	8013014 <_fflush_r+0x20>
 801300a:	6983      	ldr	r3, [r0, #24]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d101      	bne.n	8013014 <_fflush_r+0x20>
 8013010:	f000 f892 	bl	8013138 <__sinit>
 8013014:	4b14      	ldr	r3, [pc, #80]	; (8013068 <_fflush_r+0x74>)
 8013016:	429c      	cmp	r4, r3
 8013018:	d11b      	bne.n	8013052 <_fflush_r+0x5e>
 801301a:	686c      	ldr	r4, [r5, #4]
 801301c:	220c      	movs	r2, #12
 801301e:	5ea3      	ldrsh	r3, [r4, r2]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d0ed      	beq.n	8013000 <_fflush_r+0xc>
 8013024:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013026:	07d2      	lsls	r2, r2, #31
 8013028:	d404      	bmi.n	8013034 <_fflush_r+0x40>
 801302a:	059b      	lsls	r3, r3, #22
 801302c:	d402      	bmi.n	8013034 <_fflush_r+0x40>
 801302e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013030:	f000 f937 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8013034:	0028      	movs	r0, r5
 8013036:	0021      	movs	r1, r4
 8013038:	f7ff ff50 	bl	8012edc <__sflush_r>
 801303c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801303e:	0005      	movs	r5, r0
 8013040:	07db      	lsls	r3, r3, #31
 8013042:	d4de      	bmi.n	8013002 <_fflush_r+0xe>
 8013044:	89a3      	ldrh	r3, [r4, #12]
 8013046:	059b      	lsls	r3, r3, #22
 8013048:	d4db      	bmi.n	8013002 <_fflush_r+0xe>
 801304a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801304c:	f000 f92a 	bl	80132a4 <__retarget_lock_release_recursive>
 8013050:	e7d7      	b.n	8013002 <_fflush_r+0xe>
 8013052:	4b06      	ldr	r3, [pc, #24]	; (801306c <_fflush_r+0x78>)
 8013054:	429c      	cmp	r4, r3
 8013056:	d101      	bne.n	801305c <_fflush_r+0x68>
 8013058:	68ac      	ldr	r4, [r5, #8]
 801305a:	e7df      	b.n	801301c <_fflush_r+0x28>
 801305c:	4b04      	ldr	r3, [pc, #16]	; (8013070 <_fflush_r+0x7c>)
 801305e:	429c      	cmp	r4, r3
 8013060:	d1dc      	bne.n	801301c <_fflush_r+0x28>
 8013062:	68ec      	ldr	r4, [r5, #12]
 8013064:	e7da      	b.n	801301c <_fflush_r+0x28>
 8013066:	46c0      	nop			; (mov r8, r8)
 8013068:	08015320 	.word	0x08015320
 801306c:	08015340 	.word	0x08015340
 8013070:	08015300 	.word	0x08015300

08013074 <std>:
 8013074:	2300      	movs	r3, #0
 8013076:	b510      	push	{r4, lr}
 8013078:	0004      	movs	r4, r0
 801307a:	6003      	str	r3, [r0, #0]
 801307c:	6043      	str	r3, [r0, #4]
 801307e:	6083      	str	r3, [r0, #8]
 8013080:	8181      	strh	r1, [r0, #12]
 8013082:	6643      	str	r3, [r0, #100]	; 0x64
 8013084:	0019      	movs	r1, r3
 8013086:	81c2      	strh	r2, [r0, #14]
 8013088:	6103      	str	r3, [r0, #16]
 801308a:	6143      	str	r3, [r0, #20]
 801308c:	6183      	str	r3, [r0, #24]
 801308e:	2208      	movs	r2, #8
 8013090:	305c      	adds	r0, #92	; 0x5c
 8013092:	f7fe fa1e 	bl	80114d2 <memset>
 8013096:	4b05      	ldr	r3, [pc, #20]	; (80130ac <std+0x38>)
 8013098:	6224      	str	r4, [r4, #32]
 801309a:	6263      	str	r3, [r4, #36]	; 0x24
 801309c:	4b04      	ldr	r3, [pc, #16]	; (80130b0 <std+0x3c>)
 801309e:	62a3      	str	r3, [r4, #40]	; 0x28
 80130a0:	4b04      	ldr	r3, [pc, #16]	; (80130b4 <std+0x40>)
 80130a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130a4:	4b04      	ldr	r3, [pc, #16]	; (80130b8 <std+0x44>)
 80130a6:	6323      	str	r3, [r4, #48]	; 0x30
 80130a8:	bd10      	pop	{r4, pc}
 80130aa:	46c0      	nop			; (mov r8, r8)
 80130ac:	080142ad 	.word	0x080142ad
 80130b0:	080142d5 	.word	0x080142d5
 80130b4:	0801430d 	.word	0x0801430d
 80130b8:	08014339 	.word	0x08014339

080130bc <_cleanup_r>:
 80130bc:	b510      	push	{r4, lr}
 80130be:	4902      	ldr	r1, [pc, #8]	; (80130c8 <_cleanup_r+0xc>)
 80130c0:	f000 f8ca 	bl	8013258 <_fwalk_reent>
 80130c4:	bd10      	pop	{r4, pc}
 80130c6:	46c0      	nop			; (mov r8, r8)
 80130c8:	08012ff5 	.word	0x08012ff5

080130cc <__sfmoreglue>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	2568      	movs	r5, #104	; 0x68
 80130d0:	1e4a      	subs	r2, r1, #1
 80130d2:	4355      	muls	r5, r2
 80130d4:	000e      	movs	r6, r1
 80130d6:	0029      	movs	r1, r5
 80130d8:	3174      	adds	r1, #116	; 0x74
 80130da:	f000 fd9b 	bl	8013c14 <_malloc_r>
 80130de:	1e04      	subs	r4, r0, #0
 80130e0:	d008      	beq.n	80130f4 <__sfmoreglue+0x28>
 80130e2:	2100      	movs	r1, #0
 80130e4:	002a      	movs	r2, r5
 80130e6:	6001      	str	r1, [r0, #0]
 80130e8:	6046      	str	r6, [r0, #4]
 80130ea:	300c      	adds	r0, #12
 80130ec:	60a0      	str	r0, [r4, #8]
 80130ee:	3268      	adds	r2, #104	; 0x68
 80130f0:	f7fe f9ef 	bl	80114d2 <memset>
 80130f4:	0020      	movs	r0, r4
 80130f6:	bd70      	pop	{r4, r5, r6, pc}

080130f8 <__sfp_lock_acquire>:
 80130f8:	b510      	push	{r4, lr}
 80130fa:	4802      	ldr	r0, [pc, #8]	; (8013104 <__sfp_lock_acquire+0xc>)
 80130fc:	f000 f8d1 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8013100:	bd10      	pop	{r4, pc}
 8013102:	46c0      	nop			; (mov r8, r8)
 8013104:	20008321 	.word	0x20008321

08013108 <__sfp_lock_release>:
 8013108:	b510      	push	{r4, lr}
 801310a:	4802      	ldr	r0, [pc, #8]	; (8013114 <__sfp_lock_release+0xc>)
 801310c:	f000 f8ca 	bl	80132a4 <__retarget_lock_release_recursive>
 8013110:	bd10      	pop	{r4, pc}
 8013112:	46c0      	nop			; (mov r8, r8)
 8013114:	20008321 	.word	0x20008321

08013118 <__sinit_lock_acquire>:
 8013118:	b510      	push	{r4, lr}
 801311a:	4802      	ldr	r0, [pc, #8]	; (8013124 <__sinit_lock_acquire+0xc>)
 801311c:	f000 f8c1 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8013120:	bd10      	pop	{r4, pc}
 8013122:	46c0      	nop			; (mov r8, r8)
 8013124:	20008322 	.word	0x20008322

08013128 <__sinit_lock_release>:
 8013128:	b510      	push	{r4, lr}
 801312a:	4802      	ldr	r0, [pc, #8]	; (8013134 <__sinit_lock_release+0xc>)
 801312c:	f000 f8ba 	bl	80132a4 <__retarget_lock_release_recursive>
 8013130:	bd10      	pop	{r4, pc}
 8013132:	46c0      	nop			; (mov r8, r8)
 8013134:	20008322 	.word	0x20008322

08013138 <__sinit>:
 8013138:	b513      	push	{r0, r1, r4, lr}
 801313a:	0004      	movs	r4, r0
 801313c:	f7ff ffec 	bl	8013118 <__sinit_lock_acquire>
 8013140:	69a3      	ldr	r3, [r4, #24]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d002      	beq.n	801314c <__sinit+0x14>
 8013146:	f7ff ffef 	bl	8013128 <__sinit_lock_release>
 801314a:	bd13      	pop	{r0, r1, r4, pc}
 801314c:	64a3      	str	r3, [r4, #72]	; 0x48
 801314e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013150:	6523      	str	r3, [r4, #80]	; 0x50
 8013152:	4b13      	ldr	r3, [pc, #76]	; (80131a0 <__sinit+0x68>)
 8013154:	4a13      	ldr	r2, [pc, #76]	; (80131a4 <__sinit+0x6c>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	62a2      	str	r2, [r4, #40]	; 0x28
 801315a:	9301      	str	r3, [sp, #4]
 801315c:	42a3      	cmp	r3, r4
 801315e:	d101      	bne.n	8013164 <__sinit+0x2c>
 8013160:	2301      	movs	r3, #1
 8013162:	61a3      	str	r3, [r4, #24]
 8013164:	0020      	movs	r0, r4
 8013166:	f000 f81f 	bl	80131a8 <__sfp>
 801316a:	6060      	str	r0, [r4, #4]
 801316c:	0020      	movs	r0, r4
 801316e:	f000 f81b 	bl	80131a8 <__sfp>
 8013172:	60a0      	str	r0, [r4, #8]
 8013174:	0020      	movs	r0, r4
 8013176:	f000 f817 	bl	80131a8 <__sfp>
 801317a:	2200      	movs	r2, #0
 801317c:	2104      	movs	r1, #4
 801317e:	60e0      	str	r0, [r4, #12]
 8013180:	6860      	ldr	r0, [r4, #4]
 8013182:	f7ff ff77 	bl	8013074 <std>
 8013186:	2201      	movs	r2, #1
 8013188:	2109      	movs	r1, #9
 801318a:	68a0      	ldr	r0, [r4, #8]
 801318c:	f7ff ff72 	bl	8013074 <std>
 8013190:	2202      	movs	r2, #2
 8013192:	2112      	movs	r1, #18
 8013194:	68e0      	ldr	r0, [r4, #12]
 8013196:	f7ff ff6d 	bl	8013074 <std>
 801319a:	2301      	movs	r3, #1
 801319c:	61a3      	str	r3, [r4, #24]
 801319e:	e7d2      	b.n	8013146 <__sinit+0xe>
 80131a0:	080150a0 	.word	0x080150a0
 80131a4:	080130bd 	.word	0x080130bd

080131a8 <__sfp>:
 80131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131aa:	0007      	movs	r7, r0
 80131ac:	f7ff ffa4 	bl	80130f8 <__sfp_lock_acquire>
 80131b0:	4b1f      	ldr	r3, [pc, #124]	; (8013230 <__sfp+0x88>)
 80131b2:	681e      	ldr	r6, [r3, #0]
 80131b4:	69b3      	ldr	r3, [r6, #24]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d102      	bne.n	80131c0 <__sfp+0x18>
 80131ba:	0030      	movs	r0, r6
 80131bc:	f7ff ffbc 	bl	8013138 <__sinit>
 80131c0:	3648      	adds	r6, #72	; 0x48
 80131c2:	68b4      	ldr	r4, [r6, #8]
 80131c4:	6873      	ldr	r3, [r6, #4]
 80131c6:	3b01      	subs	r3, #1
 80131c8:	d504      	bpl.n	80131d4 <__sfp+0x2c>
 80131ca:	6833      	ldr	r3, [r6, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d022      	beq.n	8013216 <__sfp+0x6e>
 80131d0:	6836      	ldr	r6, [r6, #0]
 80131d2:	e7f6      	b.n	80131c2 <__sfp+0x1a>
 80131d4:	220c      	movs	r2, #12
 80131d6:	5ea5      	ldrsh	r5, [r4, r2]
 80131d8:	2d00      	cmp	r5, #0
 80131da:	d11a      	bne.n	8013212 <__sfp+0x6a>
 80131dc:	0020      	movs	r0, r4
 80131de:	4b15      	ldr	r3, [pc, #84]	; (8013234 <__sfp+0x8c>)
 80131e0:	3058      	adds	r0, #88	; 0x58
 80131e2:	60e3      	str	r3, [r4, #12]
 80131e4:	6665      	str	r5, [r4, #100]	; 0x64
 80131e6:	f000 f85b 	bl	80132a0 <__retarget_lock_init_recursive>
 80131ea:	f7ff ff8d 	bl	8013108 <__sfp_lock_release>
 80131ee:	0020      	movs	r0, r4
 80131f0:	2208      	movs	r2, #8
 80131f2:	0029      	movs	r1, r5
 80131f4:	6025      	str	r5, [r4, #0]
 80131f6:	60a5      	str	r5, [r4, #8]
 80131f8:	6065      	str	r5, [r4, #4]
 80131fa:	6125      	str	r5, [r4, #16]
 80131fc:	6165      	str	r5, [r4, #20]
 80131fe:	61a5      	str	r5, [r4, #24]
 8013200:	305c      	adds	r0, #92	; 0x5c
 8013202:	f7fe f966 	bl	80114d2 <memset>
 8013206:	6365      	str	r5, [r4, #52]	; 0x34
 8013208:	63a5      	str	r5, [r4, #56]	; 0x38
 801320a:	64a5      	str	r5, [r4, #72]	; 0x48
 801320c:	64e5      	str	r5, [r4, #76]	; 0x4c
 801320e:	0020      	movs	r0, r4
 8013210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013212:	3468      	adds	r4, #104	; 0x68
 8013214:	e7d7      	b.n	80131c6 <__sfp+0x1e>
 8013216:	2104      	movs	r1, #4
 8013218:	0038      	movs	r0, r7
 801321a:	f7ff ff57 	bl	80130cc <__sfmoreglue>
 801321e:	1e04      	subs	r4, r0, #0
 8013220:	6030      	str	r0, [r6, #0]
 8013222:	d1d5      	bne.n	80131d0 <__sfp+0x28>
 8013224:	f7ff ff70 	bl	8013108 <__sfp_lock_release>
 8013228:	230c      	movs	r3, #12
 801322a:	603b      	str	r3, [r7, #0]
 801322c:	e7ef      	b.n	801320e <__sfp+0x66>
 801322e:	46c0      	nop			; (mov r8, r8)
 8013230:	080150a0 	.word	0x080150a0
 8013234:	ffff0001 	.word	0xffff0001

08013238 <fiprintf>:
 8013238:	b40e      	push	{r1, r2, r3}
 801323a:	b503      	push	{r0, r1, lr}
 801323c:	0001      	movs	r1, r0
 801323e:	ab03      	add	r3, sp, #12
 8013240:	4804      	ldr	r0, [pc, #16]	; (8013254 <fiprintf+0x1c>)
 8013242:	cb04      	ldmia	r3!, {r2}
 8013244:	6800      	ldr	r0, [r0, #0]
 8013246:	9301      	str	r3, [sp, #4]
 8013248:	f000 fee4 	bl	8014014 <_vfiprintf_r>
 801324c:	b002      	add	sp, #8
 801324e:	bc08      	pop	{r3}
 8013250:	b003      	add	sp, #12
 8013252:	4718      	bx	r3
 8013254:	200002ec 	.word	0x200002ec

08013258 <_fwalk_reent>:
 8013258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801325a:	0004      	movs	r4, r0
 801325c:	0006      	movs	r6, r0
 801325e:	2700      	movs	r7, #0
 8013260:	9101      	str	r1, [sp, #4]
 8013262:	3448      	adds	r4, #72	; 0x48
 8013264:	6863      	ldr	r3, [r4, #4]
 8013266:	68a5      	ldr	r5, [r4, #8]
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	9b00      	ldr	r3, [sp, #0]
 801326c:	3b01      	subs	r3, #1
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	d504      	bpl.n	801327c <_fwalk_reent+0x24>
 8013272:	6824      	ldr	r4, [r4, #0]
 8013274:	2c00      	cmp	r4, #0
 8013276:	d1f5      	bne.n	8013264 <_fwalk_reent+0xc>
 8013278:	0038      	movs	r0, r7
 801327a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801327c:	89ab      	ldrh	r3, [r5, #12]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d908      	bls.n	8013294 <_fwalk_reent+0x3c>
 8013282:	220e      	movs	r2, #14
 8013284:	5eab      	ldrsh	r3, [r5, r2]
 8013286:	3301      	adds	r3, #1
 8013288:	d004      	beq.n	8013294 <_fwalk_reent+0x3c>
 801328a:	0029      	movs	r1, r5
 801328c:	0030      	movs	r0, r6
 801328e:	9b01      	ldr	r3, [sp, #4]
 8013290:	4798      	blx	r3
 8013292:	4307      	orrs	r7, r0
 8013294:	3568      	adds	r5, #104	; 0x68
 8013296:	e7e8      	b.n	801326a <_fwalk_reent+0x12>

08013298 <_localeconv_r>:
 8013298:	4800      	ldr	r0, [pc, #0]	; (801329c <_localeconv_r+0x4>)
 801329a:	4770      	bx	lr
 801329c:	20000440 	.word	0x20000440

080132a0 <__retarget_lock_init_recursive>:
 80132a0:	4770      	bx	lr

080132a2 <__retarget_lock_acquire_recursive>:
 80132a2:	4770      	bx	lr

080132a4 <__retarget_lock_release_recursive>:
 80132a4:	4770      	bx	lr
	...

080132a8 <__swhatbuf_r>:
 80132a8:	b570      	push	{r4, r5, r6, lr}
 80132aa:	000e      	movs	r6, r1
 80132ac:	001d      	movs	r5, r3
 80132ae:	230e      	movs	r3, #14
 80132b0:	5ec9      	ldrsh	r1, [r1, r3]
 80132b2:	0014      	movs	r4, r2
 80132b4:	b096      	sub	sp, #88	; 0x58
 80132b6:	2900      	cmp	r1, #0
 80132b8:	da08      	bge.n	80132cc <__swhatbuf_r+0x24>
 80132ba:	220c      	movs	r2, #12
 80132bc:	5eb3      	ldrsh	r3, [r6, r2]
 80132be:	2200      	movs	r2, #0
 80132c0:	602a      	str	r2, [r5, #0]
 80132c2:	061b      	lsls	r3, r3, #24
 80132c4:	d411      	bmi.n	80132ea <__swhatbuf_r+0x42>
 80132c6:	2380      	movs	r3, #128	; 0x80
 80132c8:	00db      	lsls	r3, r3, #3
 80132ca:	e00f      	b.n	80132ec <__swhatbuf_r+0x44>
 80132cc:	466a      	mov	r2, sp
 80132ce:	f001 f867 	bl	80143a0 <_fstat_r>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	dbf1      	blt.n	80132ba <__swhatbuf_r+0x12>
 80132d6:	23f0      	movs	r3, #240	; 0xf0
 80132d8:	9901      	ldr	r1, [sp, #4]
 80132da:	021b      	lsls	r3, r3, #8
 80132dc:	4019      	ands	r1, r3
 80132de:	4b05      	ldr	r3, [pc, #20]	; (80132f4 <__swhatbuf_r+0x4c>)
 80132e0:	18c9      	adds	r1, r1, r3
 80132e2:	424b      	negs	r3, r1
 80132e4:	4159      	adcs	r1, r3
 80132e6:	6029      	str	r1, [r5, #0]
 80132e8:	e7ed      	b.n	80132c6 <__swhatbuf_r+0x1e>
 80132ea:	2340      	movs	r3, #64	; 0x40
 80132ec:	2000      	movs	r0, #0
 80132ee:	6023      	str	r3, [r4, #0]
 80132f0:	b016      	add	sp, #88	; 0x58
 80132f2:	bd70      	pop	{r4, r5, r6, pc}
 80132f4:	ffffe000 	.word	0xffffe000

080132f8 <__smakebuf_r>:
 80132f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132fa:	2602      	movs	r6, #2
 80132fc:	898b      	ldrh	r3, [r1, #12]
 80132fe:	0005      	movs	r5, r0
 8013300:	000c      	movs	r4, r1
 8013302:	4233      	tst	r3, r6
 8013304:	d006      	beq.n	8013314 <__smakebuf_r+0x1c>
 8013306:	0023      	movs	r3, r4
 8013308:	3347      	adds	r3, #71	; 0x47
 801330a:	6023      	str	r3, [r4, #0]
 801330c:	6123      	str	r3, [r4, #16]
 801330e:	2301      	movs	r3, #1
 8013310:	6163      	str	r3, [r4, #20]
 8013312:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013314:	466a      	mov	r2, sp
 8013316:	ab01      	add	r3, sp, #4
 8013318:	f7ff ffc6 	bl	80132a8 <__swhatbuf_r>
 801331c:	9900      	ldr	r1, [sp, #0]
 801331e:	0007      	movs	r7, r0
 8013320:	0028      	movs	r0, r5
 8013322:	f000 fc77 	bl	8013c14 <_malloc_r>
 8013326:	2800      	cmp	r0, #0
 8013328:	d108      	bne.n	801333c <__smakebuf_r+0x44>
 801332a:	220c      	movs	r2, #12
 801332c:	5ea3      	ldrsh	r3, [r4, r2]
 801332e:	059a      	lsls	r2, r3, #22
 8013330:	d4ef      	bmi.n	8013312 <__smakebuf_r+0x1a>
 8013332:	2203      	movs	r2, #3
 8013334:	4393      	bics	r3, r2
 8013336:	431e      	orrs	r6, r3
 8013338:	81a6      	strh	r6, [r4, #12]
 801333a:	e7e4      	b.n	8013306 <__smakebuf_r+0xe>
 801333c:	4b0f      	ldr	r3, [pc, #60]	; (801337c <__smakebuf_r+0x84>)
 801333e:	62ab      	str	r3, [r5, #40]	; 0x28
 8013340:	2380      	movs	r3, #128	; 0x80
 8013342:	89a2      	ldrh	r2, [r4, #12]
 8013344:	6020      	str	r0, [r4, #0]
 8013346:	4313      	orrs	r3, r2
 8013348:	81a3      	strh	r3, [r4, #12]
 801334a:	9b00      	ldr	r3, [sp, #0]
 801334c:	6120      	str	r0, [r4, #16]
 801334e:	6163      	str	r3, [r4, #20]
 8013350:	9b01      	ldr	r3, [sp, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00d      	beq.n	8013372 <__smakebuf_r+0x7a>
 8013356:	0028      	movs	r0, r5
 8013358:	230e      	movs	r3, #14
 801335a:	5ee1      	ldrsh	r1, [r4, r3]
 801335c:	f001 f832 	bl	80143c4 <_isatty_r>
 8013360:	2800      	cmp	r0, #0
 8013362:	d006      	beq.n	8013372 <__smakebuf_r+0x7a>
 8013364:	2203      	movs	r2, #3
 8013366:	89a3      	ldrh	r3, [r4, #12]
 8013368:	4393      	bics	r3, r2
 801336a:	001a      	movs	r2, r3
 801336c:	2301      	movs	r3, #1
 801336e:	4313      	orrs	r3, r2
 8013370:	81a3      	strh	r3, [r4, #12]
 8013372:	89a0      	ldrh	r0, [r4, #12]
 8013374:	4307      	orrs	r7, r0
 8013376:	81a7      	strh	r7, [r4, #12]
 8013378:	e7cb      	b.n	8013312 <__smakebuf_r+0x1a>
 801337a:	46c0      	nop			; (mov r8, r8)
 801337c:	080130bd 	.word	0x080130bd

08013380 <malloc>:
 8013380:	b510      	push	{r4, lr}
 8013382:	4b03      	ldr	r3, [pc, #12]	; (8013390 <malloc+0x10>)
 8013384:	0001      	movs	r1, r0
 8013386:	6818      	ldr	r0, [r3, #0]
 8013388:	f000 fc44 	bl	8013c14 <_malloc_r>
 801338c:	bd10      	pop	{r4, pc}
 801338e:	46c0      	nop			; (mov r8, r8)
 8013390:	200002ec 	.word	0x200002ec

08013394 <memchr>:
 8013394:	b2c9      	uxtb	r1, r1
 8013396:	1882      	adds	r2, r0, r2
 8013398:	4290      	cmp	r0, r2
 801339a:	d101      	bne.n	80133a0 <memchr+0xc>
 801339c:	2000      	movs	r0, #0
 801339e:	4770      	bx	lr
 80133a0:	7803      	ldrb	r3, [r0, #0]
 80133a2:	428b      	cmp	r3, r1
 80133a4:	d0fb      	beq.n	801339e <memchr+0xa>
 80133a6:	3001      	adds	r0, #1
 80133a8:	e7f6      	b.n	8013398 <memchr+0x4>
	...

080133ac <_Balloc>:
 80133ac:	b570      	push	{r4, r5, r6, lr}
 80133ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80133b0:	0006      	movs	r6, r0
 80133b2:	000c      	movs	r4, r1
 80133b4:	2d00      	cmp	r5, #0
 80133b6:	d10e      	bne.n	80133d6 <_Balloc+0x2a>
 80133b8:	2010      	movs	r0, #16
 80133ba:	f7ff ffe1 	bl	8013380 <malloc>
 80133be:	1e02      	subs	r2, r0, #0
 80133c0:	6270      	str	r0, [r6, #36]	; 0x24
 80133c2:	d104      	bne.n	80133ce <_Balloc+0x22>
 80133c4:	2166      	movs	r1, #102	; 0x66
 80133c6:	4b19      	ldr	r3, [pc, #100]	; (801342c <_Balloc+0x80>)
 80133c8:	4819      	ldr	r0, [pc, #100]	; (8013430 <_Balloc+0x84>)
 80133ca:	f7fe fec3 	bl	8012154 <__assert_func>
 80133ce:	6045      	str	r5, [r0, #4]
 80133d0:	6085      	str	r5, [r0, #8]
 80133d2:	6005      	str	r5, [r0, #0]
 80133d4:	60c5      	str	r5, [r0, #12]
 80133d6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80133d8:	68eb      	ldr	r3, [r5, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d013      	beq.n	8013406 <_Balloc+0x5a>
 80133de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133e0:	00a2      	lsls	r2, r4, #2
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	189b      	adds	r3, r3, r2
 80133e6:	6818      	ldr	r0, [r3, #0]
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d118      	bne.n	801341e <_Balloc+0x72>
 80133ec:	2101      	movs	r1, #1
 80133ee:	000d      	movs	r5, r1
 80133f0:	40a5      	lsls	r5, r4
 80133f2:	1d6a      	adds	r2, r5, #5
 80133f4:	0030      	movs	r0, r6
 80133f6:	0092      	lsls	r2, r2, #2
 80133f8:	f000 fb74 	bl	8013ae4 <_calloc_r>
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d00c      	beq.n	801341a <_Balloc+0x6e>
 8013400:	6044      	str	r4, [r0, #4]
 8013402:	6085      	str	r5, [r0, #8]
 8013404:	e00d      	b.n	8013422 <_Balloc+0x76>
 8013406:	2221      	movs	r2, #33	; 0x21
 8013408:	2104      	movs	r1, #4
 801340a:	0030      	movs	r0, r6
 801340c:	f000 fb6a 	bl	8013ae4 <_calloc_r>
 8013410:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013412:	60e8      	str	r0, [r5, #12]
 8013414:	68db      	ldr	r3, [r3, #12]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d1e1      	bne.n	80133de <_Balloc+0x32>
 801341a:	2000      	movs	r0, #0
 801341c:	bd70      	pop	{r4, r5, r6, pc}
 801341e:	6802      	ldr	r2, [r0, #0]
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	2300      	movs	r3, #0
 8013424:	6103      	str	r3, [r0, #16]
 8013426:	60c3      	str	r3, [r0, #12]
 8013428:	e7f8      	b.n	801341c <_Balloc+0x70>
 801342a:	46c0      	nop			; (mov r8, r8)
 801342c:	080150d8 	.word	0x080150d8
 8013430:	08015360 	.word	0x08015360

08013434 <_Bfree>:
 8013434:	b570      	push	{r4, r5, r6, lr}
 8013436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013438:	0005      	movs	r5, r0
 801343a:	000c      	movs	r4, r1
 801343c:	2e00      	cmp	r6, #0
 801343e:	d10e      	bne.n	801345e <_Bfree+0x2a>
 8013440:	2010      	movs	r0, #16
 8013442:	f7ff ff9d 	bl	8013380 <malloc>
 8013446:	1e02      	subs	r2, r0, #0
 8013448:	6268      	str	r0, [r5, #36]	; 0x24
 801344a:	d104      	bne.n	8013456 <_Bfree+0x22>
 801344c:	218a      	movs	r1, #138	; 0x8a
 801344e:	4b09      	ldr	r3, [pc, #36]	; (8013474 <_Bfree+0x40>)
 8013450:	4809      	ldr	r0, [pc, #36]	; (8013478 <_Bfree+0x44>)
 8013452:	f7fe fe7f 	bl	8012154 <__assert_func>
 8013456:	6046      	str	r6, [r0, #4]
 8013458:	6086      	str	r6, [r0, #8]
 801345a:	6006      	str	r6, [r0, #0]
 801345c:	60c6      	str	r6, [r0, #12]
 801345e:	2c00      	cmp	r4, #0
 8013460:	d007      	beq.n	8013472 <_Bfree+0x3e>
 8013462:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013464:	6862      	ldr	r2, [r4, #4]
 8013466:	68db      	ldr	r3, [r3, #12]
 8013468:	0092      	lsls	r2, r2, #2
 801346a:	189b      	adds	r3, r3, r2
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	6022      	str	r2, [r4, #0]
 8013470:	601c      	str	r4, [r3, #0]
 8013472:	bd70      	pop	{r4, r5, r6, pc}
 8013474:	080150d8 	.word	0x080150d8
 8013478:	08015360 	.word	0x08015360

0801347c <__multadd>:
 801347c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801347e:	000e      	movs	r6, r1
 8013480:	9001      	str	r0, [sp, #4]
 8013482:	000c      	movs	r4, r1
 8013484:	001d      	movs	r5, r3
 8013486:	2000      	movs	r0, #0
 8013488:	690f      	ldr	r7, [r1, #16]
 801348a:	3614      	adds	r6, #20
 801348c:	6833      	ldr	r3, [r6, #0]
 801348e:	3001      	adds	r0, #1
 8013490:	b299      	uxth	r1, r3
 8013492:	4351      	muls	r1, r2
 8013494:	0c1b      	lsrs	r3, r3, #16
 8013496:	4353      	muls	r3, r2
 8013498:	1949      	adds	r1, r1, r5
 801349a:	0c0d      	lsrs	r5, r1, #16
 801349c:	195b      	adds	r3, r3, r5
 801349e:	0c1d      	lsrs	r5, r3, #16
 80134a0:	b289      	uxth	r1, r1
 80134a2:	041b      	lsls	r3, r3, #16
 80134a4:	185b      	adds	r3, r3, r1
 80134a6:	c608      	stmia	r6!, {r3}
 80134a8:	4287      	cmp	r7, r0
 80134aa:	dcef      	bgt.n	801348c <__multadd+0x10>
 80134ac:	2d00      	cmp	r5, #0
 80134ae:	d022      	beq.n	80134f6 <__multadd+0x7a>
 80134b0:	68a3      	ldr	r3, [r4, #8]
 80134b2:	42bb      	cmp	r3, r7
 80134b4:	dc19      	bgt.n	80134ea <__multadd+0x6e>
 80134b6:	6863      	ldr	r3, [r4, #4]
 80134b8:	9801      	ldr	r0, [sp, #4]
 80134ba:	1c59      	adds	r1, r3, #1
 80134bc:	f7ff ff76 	bl	80133ac <_Balloc>
 80134c0:	1e06      	subs	r6, r0, #0
 80134c2:	d105      	bne.n	80134d0 <__multadd+0x54>
 80134c4:	0002      	movs	r2, r0
 80134c6:	21b5      	movs	r1, #181	; 0xb5
 80134c8:	4b0c      	ldr	r3, [pc, #48]	; (80134fc <__multadd+0x80>)
 80134ca:	480d      	ldr	r0, [pc, #52]	; (8013500 <__multadd+0x84>)
 80134cc:	f7fe fe42 	bl	8012154 <__assert_func>
 80134d0:	0021      	movs	r1, r4
 80134d2:	6923      	ldr	r3, [r4, #16]
 80134d4:	310c      	adds	r1, #12
 80134d6:	1c9a      	adds	r2, r3, #2
 80134d8:	0092      	lsls	r2, r2, #2
 80134da:	300c      	adds	r0, #12
 80134dc:	f7fd fff0 	bl	80114c0 <memcpy>
 80134e0:	0021      	movs	r1, r4
 80134e2:	9801      	ldr	r0, [sp, #4]
 80134e4:	f7ff ffa6 	bl	8013434 <_Bfree>
 80134e8:	0034      	movs	r4, r6
 80134ea:	1d3b      	adds	r3, r7, #4
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	18e3      	adds	r3, r4, r3
 80134f0:	605d      	str	r5, [r3, #4]
 80134f2:	1c7b      	adds	r3, r7, #1
 80134f4:	6123      	str	r3, [r4, #16]
 80134f6:	0020      	movs	r0, r4
 80134f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80134fa:	46c0      	nop			; (mov r8, r8)
 80134fc:	080152ef 	.word	0x080152ef
 8013500:	08015360 	.word	0x08015360

08013504 <__hi0bits>:
 8013504:	0003      	movs	r3, r0
 8013506:	0c02      	lsrs	r2, r0, #16
 8013508:	2000      	movs	r0, #0
 801350a:	4282      	cmp	r2, r0
 801350c:	d101      	bne.n	8013512 <__hi0bits+0xe>
 801350e:	041b      	lsls	r3, r3, #16
 8013510:	3010      	adds	r0, #16
 8013512:	0e1a      	lsrs	r2, r3, #24
 8013514:	d101      	bne.n	801351a <__hi0bits+0x16>
 8013516:	3008      	adds	r0, #8
 8013518:	021b      	lsls	r3, r3, #8
 801351a:	0f1a      	lsrs	r2, r3, #28
 801351c:	d101      	bne.n	8013522 <__hi0bits+0x1e>
 801351e:	3004      	adds	r0, #4
 8013520:	011b      	lsls	r3, r3, #4
 8013522:	0f9a      	lsrs	r2, r3, #30
 8013524:	d101      	bne.n	801352a <__hi0bits+0x26>
 8013526:	3002      	adds	r0, #2
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	2b00      	cmp	r3, #0
 801352c:	db03      	blt.n	8013536 <__hi0bits+0x32>
 801352e:	3001      	adds	r0, #1
 8013530:	005b      	lsls	r3, r3, #1
 8013532:	d400      	bmi.n	8013536 <__hi0bits+0x32>
 8013534:	2020      	movs	r0, #32
 8013536:	4770      	bx	lr

08013538 <__lo0bits>:
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	0002      	movs	r2, r0
 801353c:	2107      	movs	r1, #7
 801353e:	0018      	movs	r0, r3
 8013540:	4008      	ands	r0, r1
 8013542:	420b      	tst	r3, r1
 8013544:	d00d      	beq.n	8013562 <__lo0bits+0x2a>
 8013546:	3906      	subs	r1, #6
 8013548:	2000      	movs	r0, #0
 801354a:	420b      	tst	r3, r1
 801354c:	d105      	bne.n	801355a <__lo0bits+0x22>
 801354e:	3002      	adds	r0, #2
 8013550:	4203      	tst	r3, r0
 8013552:	d003      	beq.n	801355c <__lo0bits+0x24>
 8013554:	40cb      	lsrs	r3, r1
 8013556:	0008      	movs	r0, r1
 8013558:	6013      	str	r3, [r2, #0]
 801355a:	4770      	bx	lr
 801355c:	089b      	lsrs	r3, r3, #2
 801355e:	6013      	str	r3, [r2, #0]
 8013560:	e7fb      	b.n	801355a <__lo0bits+0x22>
 8013562:	b299      	uxth	r1, r3
 8013564:	2900      	cmp	r1, #0
 8013566:	d101      	bne.n	801356c <__lo0bits+0x34>
 8013568:	2010      	movs	r0, #16
 801356a:	0c1b      	lsrs	r3, r3, #16
 801356c:	b2d9      	uxtb	r1, r3
 801356e:	2900      	cmp	r1, #0
 8013570:	d101      	bne.n	8013576 <__lo0bits+0x3e>
 8013572:	3008      	adds	r0, #8
 8013574:	0a1b      	lsrs	r3, r3, #8
 8013576:	0719      	lsls	r1, r3, #28
 8013578:	d101      	bne.n	801357e <__lo0bits+0x46>
 801357a:	3004      	adds	r0, #4
 801357c:	091b      	lsrs	r3, r3, #4
 801357e:	0799      	lsls	r1, r3, #30
 8013580:	d101      	bne.n	8013586 <__lo0bits+0x4e>
 8013582:	3002      	adds	r0, #2
 8013584:	089b      	lsrs	r3, r3, #2
 8013586:	07d9      	lsls	r1, r3, #31
 8013588:	d4e9      	bmi.n	801355e <__lo0bits+0x26>
 801358a:	3001      	adds	r0, #1
 801358c:	085b      	lsrs	r3, r3, #1
 801358e:	d1e6      	bne.n	801355e <__lo0bits+0x26>
 8013590:	2020      	movs	r0, #32
 8013592:	e7e2      	b.n	801355a <__lo0bits+0x22>

08013594 <__i2b>:
 8013594:	b510      	push	{r4, lr}
 8013596:	000c      	movs	r4, r1
 8013598:	2101      	movs	r1, #1
 801359a:	f7ff ff07 	bl	80133ac <_Balloc>
 801359e:	2800      	cmp	r0, #0
 80135a0:	d106      	bne.n	80135b0 <__i2b+0x1c>
 80135a2:	21a0      	movs	r1, #160	; 0xa0
 80135a4:	0002      	movs	r2, r0
 80135a6:	4b04      	ldr	r3, [pc, #16]	; (80135b8 <__i2b+0x24>)
 80135a8:	4804      	ldr	r0, [pc, #16]	; (80135bc <__i2b+0x28>)
 80135aa:	0049      	lsls	r1, r1, #1
 80135ac:	f7fe fdd2 	bl	8012154 <__assert_func>
 80135b0:	2301      	movs	r3, #1
 80135b2:	6144      	str	r4, [r0, #20]
 80135b4:	6103      	str	r3, [r0, #16]
 80135b6:	bd10      	pop	{r4, pc}
 80135b8:	080152ef 	.word	0x080152ef
 80135bc:	08015360 	.word	0x08015360

080135c0 <__multiply>:
 80135c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135c2:	690b      	ldr	r3, [r1, #16]
 80135c4:	0014      	movs	r4, r2
 80135c6:	6912      	ldr	r2, [r2, #16]
 80135c8:	000d      	movs	r5, r1
 80135ca:	b089      	sub	sp, #36	; 0x24
 80135cc:	4293      	cmp	r3, r2
 80135ce:	da01      	bge.n	80135d4 <__multiply+0x14>
 80135d0:	0025      	movs	r5, r4
 80135d2:	000c      	movs	r4, r1
 80135d4:	692f      	ldr	r7, [r5, #16]
 80135d6:	6926      	ldr	r6, [r4, #16]
 80135d8:	6869      	ldr	r1, [r5, #4]
 80135da:	19bb      	adds	r3, r7, r6
 80135dc:	9302      	str	r3, [sp, #8]
 80135de:	68ab      	ldr	r3, [r5, #8]
 80135e0:	19ba      	adds	r2, r7, r6
 80135e2:	4293      	cmp	r3, r2
 80135e4:	da00      	bge.n	80135e8 <__multiply+0x28>
 80135e6:	3101      	adds	r1, #1
 80135e8:	f7ff fee0 	bl	80133ac <_Balloc>
 80135ec:	9001      	str	r0, [sp, #4]
 80135ee:	2800      	cmp	r0, #0
 80135f0:	d106      	bne.n	8013600 <__multiply+0x40>
 80135f2:	215e      	movs	r1, #94	; 0x5e
 80135f4:	0002      	movs	r2, r0
 80135f6:	4b48      	ldr	r3, [pc, #288]	; (8013718 <__multiply+0x158>)
 80135f8:	4848      	ldr	r0, [pc, #288]	; (801371c <__multiply+0x15c>)
 80135fa:	31ff      	adds	r1, #255	; 0xff
 80135fc:	f7fe fdaa 	bl	8012154 <__assert_func>
 8013600:	9b01      	ldr	r3, [sp, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	3314      	adds	r3, #20
 8013606:	469c      	mov	ip, r3
 8013608:	19bb      	adds	r3, r7, r6
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	4463      	add	r3, ip
 801360e:	9303      	str	r3, [sp, #12]
 8013610:	4663      	mov	r3, ip
 8013612:	9903      	ldr	r1, [sp, #12]
 8013614:	428b      	cmp	r3, r1
 8013616:	d32c      	bcc.n	8013672 <__multiply+0xb2>
 8013618:	002b      	movs	r3, r5
 801361a:	0022      	movs	r2, r4
 801361c:	3314      	adds	r3, #20
 801361e:	00bf      	lsls	r7, r7, #2
 8013620:	3214      	adds	r2, #20
 8013622:	9306      	str	r3, [sp, #24]
 8013624:	00b6      	lsls	r6, r6, #2
 8013626:	19db      	adds	r3, r3, r7
 8013628:	9304      	str	r3, [sp, #16]
 801362a:	1993      	adds	r3, r2, r6
 801362c:	9307      	str	r3, [sp, #28]
 801362e:	2304      	movs	r3, #4
 8013630:	9305      	str	r3, [sp, #20]
 8013632:	002b      	movs	r3, r5
 8013634:	9904      	ldr	r1, [sp, #16]
 8013636:	3315      	adds	r3, #21
 8013638:	9200      	str	r2, [sp, #0]
 801363a:	4299      	cmp	r1, r3
 801363c:	d305      	bcc.n	801364a <__multiply+0x8a>
 801363e:	1b4b      	subs	r3, r1, r5
 8013640:	3b15      	subs	r3, #21
 8013642:	089b      	lsrs	r3, r3, #2
 8013644:	3301      	adds	r3, #1
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	9305      	str	r3, [sp, #20]
 801364a:	9b07      	ldr	r3, [sp, #28]
 801364c:	9a00      	ldr	r2, [sp, #0]
 801364e:	429a      	cmp	r2, r3
 8013650:	d311      	bcc.n	8013676 <__multiply+0xb6>
 8013652:	9b02      	ldr	r3, [sp, #8]
 8013654:	2b00      	cmp	r3, #0
 8013656:	dd06      	ble.n	8013666 <__multiply+0xa6>
 8013658:	9b03      	ldr	r3, [sp, #12]
 801365a:	3b04      	subs	r3, #4
 801365c:	9303      	str	r3, [sp, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	9300      	str	r3, [sp, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d053      	beq.n	801370e <__multiply+0x14e>
 8013666:	9b01      	ldr	r3, [sp, #4]
 8013668:	9a02      	ldr	r2, [sp, #8]
 801366a:	0018      	movs	r0, r3
 801366c:	611a      	str	r2, [r3, #16]
 801366e:	b009      	add	sp, #36	; 0x24
 8013670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013672:	c304      	stmia	r3!, {r2}
 8013674:	e7cd      	b.n	8013612 <__multiply+0x52>
 8013676:	9b00      	ldr	r3, [sp, #0]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	b298      	uxth	r0, r3
 801367c:	2800      	cmp	r0, #0
 801367e:	d01b      	beq.n	80136b8 <__multiply+0xf8>
 8013680:	4667      	mov	r7, ip
 8013682:	2400      	movs	r4, #0
 8013684:	9e06      	ldr	r6, [sp, #24]
 8013686:	ce02      	ldmia	r6!, {r1}
 8013688:	683a      	ldr	r2, [r7, #0]
 801368a:	b28b      	uxth	r3, r1
 801368c:	4343      	muls	r3, r0
 801368e:	b292      	uxth	r2, r2
 8013690:	189b      	adds	r3, r3, r2
 8013692:	191b      	adds	r3, r3, r4
 8013694:	0c0c      	lsrs	r4, r1, #16
 8013696:	4344      	muls	r4, r0
 8013698:	683a      	ldr	r2, [r7, #0]
 801369a:	0c11      	lsrs	r1, r2, #16
 801369c:	1861      	adds	r1, r4, r1
 801369e:	0c1c      	lsrs	r4, r3, #16
 80136a0:	1909      	adds	r1, r1, r4
 80136a2:	0c0c      	lsrs	r4, r1, #16
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	0409      	lsls	r1, r1, #16
 80136a8:	430b      	orrs	r3, r1
 80136aa:	c708      	stmia	r7!, {r3}
 80136ac:	9b04      	ldr	r3, [sp, #16]
 80136ae:	42b3      	cmp	r3, r6
 80136b0:	d8e9      	bhi.n	8013686 <__multiply+0xc6>
 80136b2:	4663      	mov	r3, ip
 80136b4:	9a05      	ldr	r2, [sp, #20]
 80136b6:	509c      	str	r4, [r3, r2]
 80136b8:	9b00      	ldr	r3, [sp, #0]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	0c1e      	lsrs	r6, r3, #16
 80136be:	d020      	beq.n	8013702 <__multiply+0x142>
 80136c0:	4663      	mov	r3, ip
 80136c2:	002c      	movs	r4, r5
 80136c4:	4660      	mov	r0, ip
 80136c6:	2700      	movs	r7, #0
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	3414      	adds	r4, #20
 80136cc:	6822      	ldr	r2, [r4, #0]
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	b291      	uxth	r1, r2
 80136d2:	4371      	muls	r1, r6
 80136d4:	6802      	ldr	r2, [r0, #0]
 80136d6:	0c12      	lsrs	r2, r2, #16
 80136d8:	1889      	adds	r1, r1, r2
 80136da:	19cf      	adds	r7, r1, r7
 80136dc:	0439      	lsls	r1, r7, #16
 80136de:	430b      	orrs	r3, r1
 80136e0:	6003      	str	r3, [r0, #0]
 80136e2:	cc02      	ldmia	r4!, {r1}
 80136e4:	6843      	ldr	r3, [r0, #4]
 80136e6:	0c09      	lsrs	r1, r1, #16
 80136e8:	4371      	muls	r1, r6
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	0c3f      	lsrs	r7, r7, #16
 80136ee:	18cb      	adds	r3, r1, r3
 80136f0:	9a04      	ldr	r2, [sp, #16]
 80136f2:	19db      	adds	r3, r3, r7
 80136f4:	0c1f      	lsrs	r7, r3, #16
 80136f6:	3004      	adds	r0, #4
 80136f8:	42a2      	cmp	r2, r4
 80136fa:	d8e7      	bhi.n	80136cc <__multiply+0x10c>
 80136fc:	4662      	mov	r2, ip
 80136fe:	9905      	ldr	r1, [sp, #20]
 8013700:	5053      	str	r3, [r2, r1]
 8013702:	9b00      	ldr	r3, [sp, #0]
 8013704:	3304      	adds	r3, #4
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	2304      	movs	r3, #4
 801370a:	449c      	add	ip, r3
 801370c:	e79d      	b.n	801364a <__multiply+0x8a>
 801370e:	9b02      	ldr	r3, [sp, #8]
 8013710:	3b01      	subs	r3, #1
 8013712:	9302      	str	r3, [sp, #8]
 8013714:	e79d      	b.n	8013652 <__multiply+0x92>
 8013716:	46c0      	nop			; (mov r8, r8)
 8013718:	080152ef 	.word	0x080152ef
 801371c:	08015360 	.word	0x08015360

08013720 <__pow5mult>:
 8013720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013722:	2303      	movs	r3, #3
 8013724:	0015      	movs	r5, r2
 8013726:	0007      	movs	r7, r0
 8013728:	000e      	movs	r6, r1
 801372a:	401a      	ands	r2, r3
 801372c:	421d      	tst	r5, r3
 801372e:	d008      	beq.n	8013742 <__pow5mult+0x22>
 8013730:	4925      	ldr	r1, [pc, #148]	; (80137c8 <__pow5mult+0xa8>)
 8013732:	3a01      	subs	r2, #1
 8013734:	0092      	lsls	r2, r2, #2
 8013736:	5852      	ldr	r2, [r2, r1]
 8013738:	2300      	movs	r3, #0
 801373a:	0031      	movs	r1, r6
 801373c:	f7ff fe9e 	bl	801347c <__multadd>
 8013740:	0006      	movs	r6, r0
 8013742:	10ad      	asrs	r5, r5, #2
 8013744:	d03d      	beq.n	80137c2 <__pow5mult+0xa2>
 8013746:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8013748:	2c00      	cmp	r4, #0
 801374a:	d10f      	bne.n	801376c <__pow5mult+0x4c>
 801374c:	2010      	movs	r0, #16
 801374e:	f7ff fe17 	bl	8013380 <malloc>
 8013752:	1e02      	subs	r2, r0, #0
 8013754:	6278      	str	r0, [r7, #36]	; 0x24
 8013756:	d105      	bne.n	8013764 <__pow5mult+0x44>
 8013758:	21d7      	movs	r1, #215	; 0xd7
 801375a:	4b1c      	ldr	r3, [pc, #112]	; (80137cc <__pow5mult+0xac>)
 801375c:	481c      	ldr	r0, [pc, #112]	; (80137d0 <__pow5mult+0xb0>)
 801375e:	0049      	lsls	r1, r1, #1
 8013760:	f7fe fcf8 	bl	8012154 <__assert_func>
 8013764:	6044      	str	r4, [r0, #4]
 8013766:	6084      	str	r4, [r0, #8]
 8013768:	6004      	str	r4, [r0, #0]
 801376a:	60c4      	str	r4, [r0, #12]
 801376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376e:	689c      	ldr	r4, [r3, #8]
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	2c00      	cmp	r4, #0
 8013774:	d108      	bne.n	8013788 <__pow5mult+0x68>
 8013776:	0038      	movs	r0, r7
 8013778:	4916      	ldr	r1, [pc, #88]	; (80137d4 <__pow5mult+0xb4>)
 801377a:	f7ff ff0b 	bl	8013594 <__i2b>
 801377e:	9b01      	ldr	r3, [sp, #4]
 8013780:	0004      	movs	r4, r0
 8013782:	6098      	str	r0, [r3, #8]
 8013784:	2300      	movs	r3, #0
 8013786:	6003      	str	r3, [r0, #0]
 8013788:	2301      	movs	r3, #1
 801378a:	421d      	tst	r5, r3
 801378c:	d00a      	beq.n	80137a4 <__pow5mult+0x84>
 801378e:	0031      	movs	r1, r6
 8013790:	0022      	movs	r2, r4
 8013792:	0038      	movs	r0, r7
 8013794:	f7ff ff14 	bl	80135c0 <__multiply>
 8013798:	0031      	movs	r1, r6
 801379a:	9001      	str	r0, [sp, #4]
 801379c:	0038      	movs	r0, r7
 801379e:	f7ff fe49 	bl	8013434 <_Bfree>
 80137a2:	9e01      	ldr	r6, [sp, #4]
 80137a4:	106d      	asrs	r5, r5, #1
 80137a6:	d00c      	beq.n	80137c2 <__pow5mult+0xa2>
 80137a8:	6820      	ldr	r0, [r4, #0]
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d107      	bne.n	80137be <__pow5mult+0x9e>
 80137ae:	0022      	movs	r2, r4
 80137b0:	0021      	movs	r1, r4
 80137b2:	0038      	movs	r0, r7
 80137b4:	f7ff ff04 	bl	80135c0 <__multiply>
 80137b8:	2300      	movs	r3, #0
 80137ba:	6020      	str	r0, [r4, #0]
 80137bc:	6003      	str	r3, [r0, #0]
 80137be:	0004      	movs	r4, r0
 80137c0:	e7e2      	b.n	8013788 <__pow5mult+0x68>
 80137c2:	0030      	movs	r0, r6
 80137c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80137c6:	46c0      	nop			; (mov r8, r8)
 80137c8:	080154b0 	.word	0x080154b0
 80137cc:	080150d8 	.word	0x080150d8
 80137d0:	08015360 	.word	0x08015360
 80137d4:	00000271 	.word	0x00000271

080137d8 <__lshift>:
 80137d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137da:	000c      	movs	r4, r1
 80137dc:	0017      	movs	r7, r2
 80137de:	6923      	ldr	r3, [r4, #16]
 80137e0:	1155      	asrs	r5, r2, #5
 80137e2:	b087      	sub	sp, #28
 80137e4:	18eb      	adds	r3, r5, r3
 80137e6:	9302      	str	r3, [sp, #8]
 80137e8:	3301      	adds	r3, #1
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	6849      	ldr	r1, [r1, #4]
 80137ee:	68a3      	ldr	r3, [r4, #8]
 80137f0:	9004      	str	r0, [sp, #16]
 80137f2:	9a01      	ldr	r2, [sp, #4]
 80137f4:	4293      	cmp	r3, r2
 80137f6:	db10      	blt.n	801381a <__lshift+0x42>
 80137f8:	9804      	ldr	r0, [sp, #16]
 80137fa:	f7ff fdd7 	bl	80133ac <_Balloc>
 80137fe:	2300      	movs	r3, #0
 8013800:	0002      	movs	r2, r0
 8013802:	0006      	movs	r6, r0
 8013804:	0019      	movs	r1, r3
 8013806:	3214      	adds	r2, #20
 8013808:	4298      	cmp	r0, r3
 801380a:	d10c      	bne.n	8013826 <__lshift+0x4e>
 801380c:	21da      	movs	r1, #218	; 0xda
 801380e:	0002      	movs	r2, r0
 8013810:	4b26      	ldr	r3, [pc, #152]	; (80138ac <__lshift+0xd4>)
 8013812:	4827      	ldr	r0, [pc, #156]	; (80138b0 <__lshift+0xd8>)
 8013814:	31ff      	adds	r1, #255	; 0xff
 8013816:	f7fe fc9d 	bl	8012154 <__assert_func>
 801381a:	3101      	adds	r1, #1
 801381c:	005b      	lsls	r3, r3, #1
 801381e:	e7e8      	b.n	80137f2 <__lshift+0x1a>
 8013820:	0098      	lsls	r0, r3, #2
 8013822:	5011      	str	r1, [r2, r0]
 8013824:	3301      	adds	r3, #1
 8013826:	42ab      	cmp	r3, r5
 8013828:	dbfa      	blt.n	8013820 <__lshift+0x48>
 801382a:	43eb      	mvns	r3, r5
 801382c:	17db      	asrs	r3, r3, #31
 801382e:	401d      	ands	r5, r3
 8013830:	211f      	movs	r1, #31
 8013832:	0023      	movs	r3, r4
 8013834:	0038      	movs	r0, r7
 8013836:	00ad      	lsls	r5, r5, #2
 8013838:	1955      	adds	r5, r2, r5
 801383a:	6922      	ldr	r2, [r4, #16]
 801383c:	3314      	adds	r3, #20
 801383e:	0092      	lsls	r2, r2, #2
 8013840:	4008      	ands	r0, r1
 8013842:	4684      	mov	ip, r0
 8013844:	189a      	adds	r2, r3, r2
 8013846:	420f      	tst	r7, r1
 8013848:	d02a      	beq.n	80138a0 <__lshift+0xc8>
 801384a:	3101      	adds	r1, #1
 801384c:	1a09      	subs	r1, r1, r0
 801384e:	9105      	str	r1, [sp, #20]
 8013850:	2100      	movs	r1, #0
 8013852:	9503      	str	r5, [sp, #12]
 8013854:	4667      	mov	r7, ip
 8013856:	6818      	ldr	r0, [r3, #0]
 8013858:	40b8      	lsls	r0, r7
 801385a:	4301      	orrs	r1, r0
 801385c:	9803      	ldr	r0, [sp, #12]
 801385e:	c002      	stmia	r0!, {r1}
 8013860:	cb02      	ldmia	r3!, {r1}
 8013862:	9003      	str	r0, [sp, #12]
 8013864:	9805      	ldr	r0, [sp, #20]
 8013866:	40c1      	lsrs	r1, r0
 8013868:	429a      	cmp	r2, r3
 801386a:	d8f3      	bhi.n	8013854 <__lshift+0x7c>
 801386c:	0020      	movs	r0, r4
 801386e:	3015      	adds	r0, #21
 8013870:	2304      	movs	r3, #4
 8013872:	4282      	cmp	r2, r0
 8013874:	d304      	bcc.n	8013880 <__lshift+0xa8>
 8013876:	1b13      	subs	r3, r2, r4
 8013878:	3b15      	subs	r3, #21
 801387a:	089b      	lsrs	r3, r3, #2
 801387c:	3301      	adds	r3, #1
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	50e9      	str	r1, [r5, r3]
 8013882:	2900      	cmp	r1, #0
 8013884:	d002      	beq.n	801388c <__lshift+0xb4>
 8013886:	9b02      	ldr	r3, [sp, #8]
 8013888:	3302      	adds	r3, #2
 801388a:	9301      	str	r3, [sp, #4]
 801388c:	9b01      	ldr	r3, [sp, #4]
 801388e:	9804      	ldr	r0, [sp, #16]
 8013890:	3b01      	subs	r3, #1
 8013892:	0021      	movs	r1, r4
 8013894:	6133      	str	r3, [r6, #16]
 8013896:	f7ff fdcd 	bl	8013434 <_Bfree>
 801389a:	0030      	movs	r0, r6
 801389c:	b007      	add	sp, #28
 801389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138a0:	cb02      	ldmia	r3!, {r1}
 80138a2:	c502      	stmia	r5!, {r1}
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d8fb      	bhi.n	80138a0 <__lshift+0xc8>
 80138a8:	e7f0      	b.n	801388c <__lshift+0xb4>
 80138aa:	46c0      	nop			; (mov r8, r8)
 80138ac:	080152ef 	.word	0x080152ef
 80138b0:	08015360 	.word	0x08015360

080138b4 <__mcmp>:
 80138b4:	6902      	ldr	r2, [r0, #16]
 80138b6:	690b      	ldr	r3, [r1, #16]
 80138b8:	b530      	push	{r4, r5, lr}
 80138ba:	0004      	movs	r4, r0
 80138bc:	1ad0      	subs	r0, r2, r3
 80138be:	429a      	cmp	r2, r3
 80138c0:	d10d      	bne.n	80138de <__mcmp+0x2a>
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	3414      	adds	r4, #20
 80138c6:	3114      	adds	r1, #20
 80138c8:	18e2      	adds	r2, r4, r3
 80138ca:	18c9      	adds	r1, r1, r3
 80138cc:	3a04      	subs	r2, #4
 80138ce:	3904      	subs	r1, #4
 80138d0:	6815      	ldr	r5, [r2, #0]
 80138d2:	680b      	ldr	r3, [r1, #0]
 80138d4:	429d      	cmp	r5, r3
 80138d6:	d003      	beq.n	80138e0 <__mcmp+0x2c>
 80138d8:	2001      	movs	r0, #1
 80138da:	429d      	cmp	r5, r3
 80138dc:	d303      	bcc.n	80138e6 <__mcmp+0x32>
 80138de:	bd30      	pop	{r4, r5, pc}
 80138e0:	4294      	cmp	r4, r2
 80138e2:	d3f3      	bcc.n	80138cc <__mcmp+0x18>
 80138e4:	e7fb      	b.n	80138de <__mcmp+0x2a>
 80138e6:	4240      	negs	r0, r0
 80138e8:	e7f9      	b.n	80138de <__mcmp+0x2a>
	...

080138ec <__mdiff>:
 80138ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ee:	000e      	movs	r6, r1
 80138f0:	0007      	movs	r7, r0
 80138f2:	0011      	movs	r1, r2
 80138f4:	0030      	movs	r0, r6
 80138f6:	b087      	sub	sp, #28
 80138f8:	0014      	movs	r4, r2
 80138fa:	f7ff ffdb 	bl	80138b4 <__mcmp>
 80138fe:	1e05      	subs	r5, r0, #0
 8013900:	d110      	bne.n	8013924 <__mdiff+0x38>
 8013902:	0001      	movs	r1, r0
 8013904:	0038      	movs	r0, r7
 8013906:	f7ff fd51 	bl	80133ac <_Balloc>
 801390a:	1e02      	subs	r2, r0, #0
 801390c:	d104      	bne.n	8013918 <__mdiff+0x2c>
 801390e:	4b40      	ldr	r3, [pc, #256]	; (8013a10 <__mdiff+0x124>)
 8013910:	4940      	ldr	r1, [pc, #256]	; (8013a14 <__mdiff+0x128>)
 8013912:	4841      	ldr	r0, [pc, #260]	; (8013a18 <__mdiff+0x12c>)
 8013914:	f7fe fc1e 	bl	8012154 <__assert_func>
 8013918:	2301      	movs	r3, #1
 801391a:	6145      	str	r5, [r0, #20]
 801391c:	6103      	str	r3, [r0, #16]
 801391e:	0010      	movs	r0, r2
 8013920:	b007      	add	sp, #28
 8013922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013924:	2301      	movs	r3, #1
 8013926:	9301      	str	r3, [sp, #4]
 8013928:	2800      	cmp	r0, #0
 801392a:	db04      	blt.n	8013936 <__mdiff+0x4a>
 801392c:	0023      	movs	r3, r4
 801392e:	0034      	movs	r4, r6
 8013930:	001e      	movs	r6, r3
 8013932:	2300      	movs	r3, #0
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	0038      	movs	r0, r7
 8013938:	6861      	ldr	r1, [r4, #4]
 801393a:	f7ff fd37 	bl	80133ac <_Balloc>
 801393e:	1e02      	subs	r2, r0, #0
 8013940:	d103      	bne.n	801394a <__mdiff+0x5e>
 8013942:	2190      	movs	r1, #144	; 0x90
 8013944:	4b32      	ldr	r3, [pc, #200]	; (8013a10 <__mdiff+0x124>)
 8013946:	0089      	lsls	r1, r1, #2
 8013948:	e7e3      	b.n	8013912 <__mdiff+0x26>
 801394a:	9b01      	ldr	r3, [sp, #4]
 801394c:	2700      	movs	r7, #0
 801394e:	60c3      	str	r3, [r0, #12]
 8013950:	6920      	ldr	r0, [r4, #16]
 8013952:	3414      	adds	r4, #20
 8013954:	9401      	str	r4, [sp, #4]
 8013956:	9b01      	ldr	r3, [sp, #4]
 8013958:	0084      	lsls	r4, r0, #2
 801395a:	191b      	adds	r3, r3, r4
 801395c:	0034      	movs	r4, r6
 801395e:	9302      	str	r3, [sp, #8]
 8013960:	6933      	ldr	r3, [r6, #16]
 8013962:	3414      	adds	r4, #20
 8013964:	0099      	lsls	r1, r3, #2
 8013966:	1863      	adds	r3, r4, r1
 8013968:	9303      	str	r3, [sp, #12]
 801396a:	0013      	movs	r3, r2
 801396c:	3314      	adds	r3, #20
 801396e:	469c      	mov	ip, r3
 8013970:	9305      	str	r3, [sp, #20]
 8013972:	9b01      	ldr	r3, [sp, #4]
 8013974:	9304      	str	r3, [sp, #16]
 8013976:	9b04      	ldr	r3, [sp, #16]
 8013978:	cc02      	ldmia	r4!, {r1}
 801397a:	cb20      	ldmia	r3!, {r5}
 801397c:	9304      	str	r3, [sp, #16]
 801397e:	b2ab      	uxth	r3, r5
 8013980:	19df      	adds	r7, r3, r7
 8013982:	b28b      	uxth	r3, r1
 8013984:	1afb      	subs	r3, r7, r3
 8013986:	0c09      	lsrs	r1, r1, #16
 8013988:	0c2d      	lsrs	r5, r5, #16
 801398a:	1a6d      	subs	r5, r5, r1
 801398c:	1419      	asrs	r1, r3, #16
 801398e:	186d      	adds	r5, r5, r1
 8013990:	4661      	mov	r1, ip
 8013992:	142f      	asrs	r7, r5, #16
 8013994:	b29b      	uxth	r3, r3
 8013996:	042d      	lsls	r5, r5, #16
 8013998:	432b      	orrs	r3, r5
 801399a:	c108      	stmia	r1!, {r3}
 801399c:	9b03      	ldr	r3, [sp, #12]
 801399e:	468c      	mov	ip, r1
 80139a0:	42a3      	cmp	r3, r4
 80139a2:	d8e8      	bhi.n	8013976 <__mdiff+0x8a>
 80139a4:	0031      	movs	r1, r6
 80139a6:	9c03      	ldr	r4, [sp, #12]
 80139a8:	3115      	adds	r1, #21
 80139aa:	2304      	movs	r3, #4
 80139ac:	428c      	cmp	r4, r1
 80139ae:	d304      	bcc.n	80139ba <__mdiff+0xce>
 80139b0:	1ba3      	subs	r3, r4, r6
 80139b2:	3b15      	subs	r3, #21
 80139b4:	089b      	lsrs	r3, r3, #2
 80139b6:	3301      	adds	r3, #1
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	9901      	ldr	r1, [sp, #4]
 80139bc:	18cc      	adds	r4, r1, r3
 80139be:	9905      	ldr	r1, [sp, #20]
 80139c0:	0026      	movs	r6, r4
 80139c2:	18cb      	adds	r3, r1, r3
 80139c4:	469c      	mov	ip, r3
 80139c6:	9902      	ldr	r1, [sp, #8]
 80139c8:	428e      	cmp	r6, r1
 80139ca:	d310      	bcc.n	80139ee <__mdiff+0x102>
 80139cc:	9e02      	ldr	r6, [sp, #8]
 80139ce:	1ee1      	subs	r1, r4, #3
 80139d0:	2500      	movs	r5, #0
 80139d2:	428e      	cmp	r6, r1
 80139d4:	d304      	bcc.n	80139e0 <__mdiff+0xf4>
 80139d6:	0031      	movs	r1, r6
 80139d8:	3103      	adds	r1, #3
 80139da:	1b0c      	subs	r4, r1, r4
 80139dc:	08a4      	lsrs	r4, r4, #2
 80139de:	00a5      	lsls	r5, r4, #2
 80139e0:	195b      	adds	r3, r3, r5
 80139e2:	3b04      	subs	r3, #4
 80139e4:	6819      	ldr	r1, [r3, #0]
 80139e6:	2900      	cmp	r1, #0
 80139e8:	d00f      	beq.n	8013a0a <__mdiff+0x11e>
 80139ea:	6110      	str	r0, [r2, #16]
 80139ec:	e797      	b.n	801391e <__mdiff+0x32>
 80139ee:	ce02      	ldmia	r6!, {r1}
 80139f0:	b28d      	uxth	r5, r1
 80139f2:	19ed      	adds	r5, r5, r7
 80139f4:	0c0f      	lsrs	r7, r1, #16
 80139f6:	1429      	asrs	r1, r5, #16
 80139f8:	1879      	adds	r1, r7, r1
 80139fa:	140f      	asrs	r7, r1, #16
 80139fc:	b2ad      	uxth	r5, r5
 80139fe:	0409      	lsls	r1, r1, #16
 8013a00:	430d      	orrs	r5, r1
 8013a02:	4661      	mov	r1, ip
 8013a04:	c120      	stmia	r1!, {r5}
 8013a06:	468c      	mov	ip, r1
 8013a08:	e7dd      	b.n	80139c6 <__mdiff+0xda>
 8013a0a:	3801      	subs	r0, #1
 8013a0c:	e7e9      	b.n	80139e2 <__mdiff+0xf6>
 8013a0e:	46c0      	nop			; (mov r8, r8)
 8013a10:	080152ef 	.word	0x080152ef
 8013a14:	00000232 	.word	0x00000232
 8013a18:	08015360 	.word	0x08015360

08013a1c <__d2b>:
 8013a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a1e:	2101      	movs	r1, #1
 8013a20:	0014      	movs	r4, r2
 8013a22:	001e      	movs	r6, r3
 8013a24:	9f08      	ldr	r7, [sp, #32]
 8013a26:	f7ff fcc1 	bl	80133ac <_Balloc>
 8013a2a:	1e05      	subs	r5, r0, #0
 8013a2c:	d105      	bne.n	8013a3a <__d2b+0x1e>
 8013a2e:	0002      	movs	r2, r0
 8013a30:	4b26      	ldr	r3, [pc, #152]	; (8013acc <__d2b+0xb0>)
 8013a32:	4927      	ldr	r1, [pc, #156]	; (8013ad0 <__d2b+0xb4>)
 8013a34:	4827      	ldr	r0, [pc, #156]	; (8013ad4 <__d2b+0xb8>)
 8013a36:	f7fe fb8d 	bl	8012154 <__assert_func>
 8013a3a:	0333      	lsls	r3, r6, #12
 8013a3c:	0076      	lsls	r6, r6, #1
 8013a3e:	0b1b      	lsrs	r3, r3, #12
 8013a40:	0d76      	lsrs	r6, r6, #21
 8013a42:	d124      	bne.n	8013a8e <__d2b+0x72>
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	2c00      	cmp	r4, #0
 8013a48:	d027      	beq.n	8013a9a <__d2b+0x7e>
 8013a4a:	4668      	mov	r0, sp
 8013a4c:	9400      	str	r4, [sp, #0]
 8013a4e:	f7ff fd73 	bl	8013538 <__lo0bits>
 8013a52:	9c00      	ldr	r4, [sp, #0]
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d01e      	beq.n	8013a96 <__d2b+0x7a>
 8013a58:	9b01      	ldr	r3, [sp, #4]
 8013a5a:	2120      	movs	r1, #32
 8013a5c:	001a      	movs	r2, r3
 8013a5e:	1a09      	subs	r1, r1, r0
 8013a60:	408a      	lsls	r2, r1
 8013a62:	40c3      	lsrs	r3, r0
 8013a64:	4322      	orrs	r2, r4
 8013a66:	616a      	str	r2, [r5, #20]
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	9c01      	ldr	r4, [sp, #4]
 8013a6c:	61ac      	str	r4, [r5, #24]
 8013a6e:	1e63      	subs	r3, r4, #1
 8013a70:	419c      	sbcs	r4, r3
 8013a72:	3401      	adds	r4, #1
 8013a74:	612c      	str	r4, [r5, #16]
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	d018      	beq.n	8013aac <__d2b+0x90>
 8013a7a:	4b17      	ldr	r3, [pc, #92]	; (8013ad8 <__d2b+0xbc>)
 8013a7c:	18f6      	adds	r6, r6, r3
 8013a7e:	2335      	movs	r3, #53	; 0x35
 8013a80:	1836      	adds	r6, r6, r0
 8013a82:	1a18      	subs	r0, r3, r0
 8013a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a86:	603e      	str	r6, [r7, #0]
 8013a88:	6018      	str	r0, [r3, #0]
 8013a8a:	0028      	movs	r0, r5
 8013a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013a8e:	2280      	movs	r2, #128	; 0x80
 8013a90:	0352      	lsls	r2, r2, #13
 8013a92:	4313      	orrs	r3, r2
 8013a94:	e7d6      	b.n	8013a44 <__d2b+0x28>
 8013a96:	616c      	str	r4, [r5, #20]
 8013a98:	e7e7      	b.n	8013a6a <__d2b+0x4e>
 8013a9a:	a801      	add	r0, sp, #4
 8013a9c:	f7ff fd4c 	bl	8013538 <__lo0bits>
 8013aa0:	2401      	movs	r4, #1
 8013aa2:	9b01      	ldr	r3, [sp, #4]
 8013aa4:	612c      	str	r4, [r5, #16]
 8013aa6:	616b      	str	r3, [r5, #20]
 8013aa8:	3020      	adds	r0, #32
 8013aaa:	e7e4      	b.n	8013a76 <__d2b+0x5a>
 8013aac:	4b0b      	ldr	r3, [pc, #44]	; (8013adc <__d2b+0xc0>)
 8013aae:	18c0      	adds	r0, r0, r3
 8013ab0:	4b0b      	ldr	r3, [pc, #44]	; (8013ae0 <__d2b+0xc4>)
 8013ab2:	6038      	str	r0, [r7, #0]
 8013ab4:	18e3      	adds	r3, r4, r3
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	18eb      	adds	r3, r5, r3
 8013aba:	6958      	ldr	r0, [r3, #20]
 8013abc:	f7ff fd22 	bl	8013504 <__hi0bits>
 8013ac0:	0164      	lsls	r4, r4, #5
 8013ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ac4:	1a24      	subs	r4, r4, r0
 8013ac6:	601c      	str	r4, [r3, #0]
 8013ac8:	e7df      	b.n	8013a8a <__d2b+0x6e>
 8013aca:	46c0      	nop			; (mov r8, r8)
 8013acc:	080152ef 	.word	0x080152ef
 8013ad0:	0000030a 	.word	0x0000030a
 8013ad4:	08015360 	.word	0x08015360
 8013ad8:	fffffbcd 	.word	0xfffffbcd
 8013adc:	fffffbce 	.word	0xfffffbce
 8013ae0:	3fffffff 	.word	0x3fffffff

08013ae4 <_calloc_r>:
 8013ae4:	b570      	push	{r4, r5, r6, lr}
 8013ae6:	0c13      	lsrs	r3, r2, #16
 8013ae8:	0c0d      	lsrs	r5, r1, #16
 8013aea:	d11e      	bne.n	8013b2a <_calloc_r+0x46>
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10c      	bne.n	8013b0a <_calloc_r+0x26>
 8013af0:	b289      	uxth	r1, r1
 8013af2:	b294      	uxth	r4, r2
 8013af4:	434c      	muls	r4, r1
 8013af6:	0021      	movs	r1, r4
 8013af8:	f000 f88c 	bl	8013c14 <_malloc_r>
 8013afc:	1e05      	subs	r5, r0, #0
 8013afe:	d01b      	beq.n	8013b38 <_calloc_r+0x54>
 8013b00:	0022      	movs	r2, r4
 8013b02:	2100      	movs	r1, #0
 8013b04:	f7fd fce5 	bl	80114d2 <memset>
 8013b08:	e016      	b.n	8013b38 <_calloc_r+0x54>
 8013b0a:	1c1d      	adds	r5, r3, #0
 8013b0c:	1c0b      	adds	r3, r1, #0
 8013b0e:	b292      	uxth	r2, r2
 8013b10:	b289      	uxth	r1, r1
 8013b12:	b29c      	uxth	r4, r3
 8013b14:	4351      	muls	r1, r2
 8013b16:	b2ab      	uxth	r3, r5
 8013b18:	4363      	muls	r3, r4
 8013b1a:	0c0c      	lsrs	r4, r1, #16
 8013b1c:	191c      	adds	r4, r3, r4
 8013b1e:	0c22      	lsrs	r2, r4, #16
 8013b20:	d107      	bne.n	8013b32 <_calloc_r+0x4e>
 8013b22:	0424      	lsls	r4, r4, #16
 8013b24:	b289      	uxth	r1, r1
 8013b26:	430c      	orrs	r4, r1
 8013b28:	e7e5      	b.n	8013af6 <_calloc_r+0x12>
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <_calloc_r+0x4e>
 8013b2e:	1c13      	adds	r3, r2, #0
 8013b30:	e7ed      	b.n	8013b0e <_calloc_r+0x2a>
 8013b32:	230c      	movs	r3, #12
 8013b34:	2500      	movs	r5, #0
 8013b36:	6003      	str	r3, [r0, #0]
 8013b38:	0028      	movs	r0, r5
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}

08013b3c <_free_r>:
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	0005      	movs	r5, r0
 8013b40:	2900      	cmp	r1, #0
 8013b42:	d010      	beq.n	8013b66 <_free_r+0x2a>
 8013b44:	1f0c      	subs	r4, r1, #4
 8013b46:	6823      	ldr	r3, [r4, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	da00      	bge.n	8013b4e <_free_r+0x12>
 8013b4c:	18e4      	adds	r4, r4, r3
 8013b4e:	0028      	movs	r0, r5
 8013b50:	f000 fc84 	bl	801445c <__malloc_lock>
 8013b54:	4a1d      	ldr	r2, [pc, #116]	; (8013bcc <_free_r+0x90>)
 8013b56:	6813      	ldr	r3, [r2, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d105      	bne.n	8013b68 <_free_r+0x2c>
 8013b5c:	6063      	str	r3, [r4, #4]
 8013b5e:	6014      	str	r4, [r2, #0]
 8013b60:	0028      	movs	r0, r5
 8013b62:	f000 fc83 	bl	801446c <__malloc_unlock>
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	42a3      	cmp	r3, r4
 8013b6a:	d908      	bls.n	8013b7e <_free_r+0x42>
 8013b6c:	6821      	ldr	r1, [r4, #0]
 8013b6e:	1860      	adds	r0, r4, r1
 8013b70:	4283      	cmp	r3, r0
 8013b72:	d1f3      	bne.n	8013b5c <_free_r+0x20>
 8013b74:	6818      	ldr	r0, [r3, #0]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	1841      	adds	r1, r0, r1
 8013b7a:	6021      	str	r1, [r4, #0]
 8013b7c:	e7ee      	b.n	8013b5c <_free_r+0x20>
 8013b7e:	001a      	movs	r2, r3
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d001      	beq.n	8013b8a <_free_r+0x4e>
 8013b86:	42a3      	cmp	r3, r4
 8013b88:	d9f9      	bls.n	8013b7e <_free_r+0x42>
 8013b8a:	6811      	ldr	r1, [r2, #0]
 8013b8c:	1850      	adds	r0, r2, r1
 8013b8e:	42a0      	cmp	r0, r4
 8013b90:	d10b      	bne.n	8013baa <_free_r+0x6e>
 8013b92:	6820      	ldr	r0, [r4, #0]
 8013b94:	1809      	adds	r1, r1, r0
 8013b96:	1850      	adds	r0, r2, r1
 8013b98:	6011      	str	r1, [r2, #0]
 8013b9a:	4283      	cmp	r3, r0
 8013b9c:	d1e0      	bne.n	8013b60 <_free_r+0x24>
 8013b9e:	6818      	ldr	r0, [r3, #0]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	1841      	adds	r1, r0, r1
 8013ba4:	6011      	str	r1, [r2, #0]
 8013ba6:	6053      	str	r3, [r2, #4]
 8013ba8:	e7da      	b.n	8013b60 <_free_r+0x24>
 8013baa:	42a0      	cmp	r0, r4
 8013bac:	d902      	bls.n	8013bb4 <_free_r+0x78>
 8013bae:	230c      	movs	r3, #12
 8013bb0:	602b      	str	r3, [r5, #0]
 8013bb2:	e7d5      	b.n	8013b60 <_free_r+0x24>
 8013bb4:	6821      	ldr	r1, [r4, #0]
 8013bb6:	1860      	adds	r0, r4, r1
 8013bb8:	4283      	cmp	r3, r0
 8013bba:	d103      	bne.n	8013bc4 <_free_r+0x88>
 8013bbc:	6818      	ldr	r0, [r3, #0]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	1841      	adds	r1, r0, r1
 8013bc2:	6021      	str	r1, [r4, #0]
 8013bc4:	6063      	str	r3, [r4, #4]
 8013bc6:	6054      	str	r4, [r2, #4]
 8013bc8:	e7ca      	b.n	8013b60 <_free_r+0x24>
 8013bca:	46c0      	nop			; (mov r8, r8)
 8013bcc:	20008324 	.word	0x20008324

08013bd0 <sbrk_aligned>:
 8013bd0:	b570      	push	{r4, r5, r6, lr}
 8013bd2:	4e0f      	ldr	r6, [pc, #60]	; (8013c10 <sbrk_aligned+0x40>)
 8013bd4:	000d      	movs	r5, r1
 8013bd6:	6831      	ldr	r1, [r6, #0]
 8013bd8:	0004      	movs	r4, r0
 8013bda:	2900      	cmp	r1, #0
 8013bdc:	d102      	bne.n	8013be4 <sbrk_aligned+0x14>
 8013bde:	f000 fb53 	bl	8014288 <_sbrk_r>
 8013be2:	6030      	str	r0, [r6, #0]
 8013be4:	0029      	movs	r1, r5
 8013be6:	0020      	movs	r0, r4
 8013be8:	f000 fb4e 	bl	8014288 <_sbrk_r>
 8013bec:	1c43      	adds	r3, r0, #1
 8013bee:	d00a      	beq.n	8013c06 <sbrk_aligned+0x36>
 8013bf0:	2303      	movs	r3, #3
 8013bf2:	1cc5      	adds	r5, r0, #3
 8013bf4:	439d      	bics	r5, r3
 8013bf6:	42a8      	cmp	r0, r5
 8013bf8:	d007      	beq.n	8013c0a <sbrk_aligned+0x3a>
 8013bfa:	1a29      	subs	r1, r5, r0
 8013bfc:	0020      	movs	r0, r4
 8013bfe:	f000 fb43 	bl	8014288 <_sbrk_r>
 8013c02:	1c43      	adds	r3, r0, #1
 8013c04:	d101      	bne.n	8013c0a <sbrk_aligned+0x3a>
 8013c06:	2501      	movs	r5, #1
 8013c08:	426d      	negs	r5, r5
 8013c0a:	0028      	movs	r0, r5
 8013c0c:	bd70      	pop	{r4, r5, r6, pc}
 8013c0e:	46c0      	nop			; (mov r8, r8)
 8013c10:	20008328 	.word	0x20008328

08013c14 <_malloc_r>:
 8013c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c16:	2203      	movs	r2, #3
 8013c18:	1ccb      	adds	r3, r1, #3
 8013c1a:	4393      	bics	r3, r2
 8013c1c:	3308      	adds	r3, #8
 8013c1e:	0006      	movs	r6, r0
 8013c20:	001f      	movs	r7, r3
 8013c22:	2b0c      	cmp	r3, #12
 8013c24:	d232      	bcs.n	8013c8c <_malloc_r+0x78>
 8013c26:	270c      	movs	r7, #12
 8013c28:	42b9      	cmp	r1, r7
 8013c2a:	d831      	bhi.n	8013c90 <_malloc_r+0x7c>
 8013c2c:	0030      	movs	r0, r6
 8013c2e:	f000 fc15 	bl	801445c <__malloc_lock>
 8013c32:	4d32      	ldr	r5, [pc, #200]	; (8013cfc <_malloc_r+0xe8>)
 8013c34:	682b      	ldr	r3, [r5, #0]
 8013c36:	001c      	movs	r4, r3
 8013c38:	2c00      	cmp	r4, #0
 8013c3a:	d12e      	bne.n	8013c9a <_malloc_r+0x86>
 8013c3c:	0039      	movs	r1, r7
 8013c3e:	0030      	movs	r0, r6
 8013c40:	f7ff ffc6 	bl	8013bd0 <sbrk_aligned>
 8013c44:	0004      	movs	r4, r0
 8013c46:	1c43      	adds	r3, r0, #1
 8013c48:	d11e      	bne.n	8013c88 <_malloc_r+0x74>
 8013c4a:	682c      	ldr	r4, [r5, #0]
 8013c4c:	0025      	movs	r5, r4
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	d14a      	bne.n	8013ce8 <_malloc_r+0xd4>
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	0029      	movs	r1, r5
 8013c56:	18e3      	adds	r3, r4, r3
 8013c58:	0030      	movs	r0, r6
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	f000 fb14 	bl	8014288 <_sbrk_r>
 8013c60:	9b01      	ldr	r3, [sp, #4]
 8013c62:	4283      	cmp	r3, r0
 8013c64:	d143      	bne.n	8013cee <_malloc_r+0xda>
 8013c66:	6823      	ldr	r3, [r4, #0]
 8013c68:	3703      	adds	r7, #3
 8013c6a:	1aff      	subs	r7, r7, r3
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	439f      	bics	r7, r3
 8013c70:	3708      	adds	r7, #8
 8013c72:	2f0c      	cmp	r7, #12
 8013c74:	d200      	bcs.n	8013c78 <_malloc_r+0x64>
 8013c76:	270c      	movs	r7, #12
 8013c78:	0039      	movs	r1, r7
 8013c7a:	0030      	movs	r0, r6
 8013c7c:	f7ff ffa8 	bl	8013bd0 <sbrk_aligned>
 8013c80:	1c43      	adds	r3, r0, #1
 8013c82:	d034      	beq.n	8013cee <_malloc_r+0xda>
 8013c84:	6823      	ldr	r3, [r4, #0]
 8013c86:	19df      	adds	r7, r3, r7
 8013c88:	6027      	str	r7, [r4, #0]
 8013c8a:	e013      	b.n	8013cb4 <_malloc_r+0xa0>
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dacb      	bge.n	8013c28 <_malloc_r+0x14>
 8013c90:	230c      	movs	r3, #12
 8013c92:	2500      	movs	r5, #0
 8013c94:	6033      	str	r3, [r6, #0]
 8013c96:	0028      	movs	r0, r5
 8013c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013c9a:	6822      	ldr	r2, [r4, #0]
 8013c9c:	1bd1      	subs	r1, r2, r7
 8013c9e:	d420      	bmi.n	8013ce2 <_malloc_r+0xce>
 8013ca0:	290b      	cmp	r1, #11
 8013ca2:	d917      	bls.n	8013cd4 <_malloc_r+0xc0>
 8013ca4:	19e2      	adds	r2, r4, r7
 8013ca6:	6027      	str	r7, [r4, #0]
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	d111      	bne.n	8013cd0 <_malloc_r+0xbc>
 8013cac:	602a      	str	r2, [r5, #0]
 8013cae:	6863      	ldr	r3, [r4, #4]
 8013cb0:	6011      	str	r1, [r2, #0]
 8013cb2:	6053      	str	r3, [r2, #4]
 8013cb4:	0030      	movs	r0, r6
 8013cb6:	0025      	movs	r5, r4
 8013cb8:	f000 fbd8 	bl	801446c <__malloc_unlock>
 8013cbc:	2207      	movs	r2, #7
 8013cbe:	350b      	adds	r5, #11
 8013cc0:	1d23      	adds	r3, r4, #4
 8013cc2:	4395      	bics	r5, r2
 8013cc4:	1aea      	subs	r2, r5, r3
 8013cc6:	429d      	cmp	r5, r3
 8013cc8:	d0e5      	beq.n	8013c96 <_malloc_r+0x82>
 8013cca:	1b5b      	subs	r3, r3, r5
 8013ccc:	50a3      	str	r3, [r4, r2]
 8013cce:	e7e2      	b.n	8013c96 <_malloc_r+0x82>
 8013cd0:	605a      	str	r2, [r3, #4]
 8013cd2:	e7ec      	b.n	8013cae <_malloc_r+0x9a>
 8013cd4:	6862      	ldr	r2, [r4, #4]
 8013cd6:	42a3      	cmp	r3, r4
 8013cd8:	d101      	bne.n	8013cde <_malloc_r+0xca>
 8013cda:	602a      	str	r2, [r5, #0]
 8013cdc:	e7ea      	b.n	8013cb4 <_malloc_r+0xa0>
 8013cde:	605a      	str	r2, [r3, #4]
 8013ce0:	e7e8      	b.n	8013cb4 <_malloc_r+0xa0>
 8013ce2:	0023      	movs	r3, r4
 8013ce4:	6864      	ldr	r4, [r4, #4]
 8013ce6:	e7a7      	b.n	8013c38 <_malloc_r+0x24>
 8013ce8:	002c      	movs	r4, r5
 8013cea:	686d      	ldr	r5, [r5, #4]
 8013cec:	e7af      	b.n	8013c4e <_malloc_r+0x3a>
 8013cee:	230c      	movs	r3, #12
 8013cf0:	0030      	movs	r0, r6
 8013cf2:	6033      	str	r3, [r6, #0]
 8013cf4:	f000 fbba 	bl	801446c <__malloc_unlock>
 8013cf8:	e7cd      	b.n	8013c96 <_malloc_r+0x82>
 8013cfa:	46c0      	nop			; (mov r8, r8)
 8013cfc:	20008324 	.word	0x20008324

08013d00 <__ssputs_r>:
 8013d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d02:	688e      	ldr	r6, [r1, #8]
 8013d04:	b085      	sub	sp, #20
 8013d06:	0007      	movs	r7, r0
 8013d08:	000c      	movs	r4, r1
 8013d0a:	9203      	str	r2, [sp, #12]
 8013d0c:	9301      	str	r3, [sp, #4]
 8013d0e:	429e      	cmp	r6, r3
 8013d10:	d83c      	bhi.n	8013d8c <__ssputs_r+0x8c>
 8013d12:	2390      	movs	r3, #144	; 0x90
 8013d14:	898a      	ldrh	r2, [r1, #12]
 8013d16:	00db      	lsls	r3, r3, #3
 8013d18:	421a      	tst	r2, r3
 8013d1a:	d034      	beq.n	8013d86 <__ssputs_r+0x86>
 8013d1c:	6909      	ldr	r1, [r1, #16]
 8013d1e:	6823      	ldr	r3, [r4, #0]
 8013d20:	6960      	ldr	r0, [r4, #20]
 8013d22:	1a5b      	subs	r3, r3, r1
 8013d24:	9302      	str	r3, [sp, #8]
 8013d26:	2303      	movs	r3, #3
 8013d28:	4343      	muls	r3, r0
 8013d2a:	0fdd      	lsrs	r5, r3, #31
 8013d2c:	18ed      	adds	r5, r5, r3
 8013d2e:	9b01      	ldr	r3, [sp, #4]
 8013d30:	9802      	ldr	r0, [sp, #8]
 8013d32:	3301      	adds	r3, #1
 8013d34:	181b      	adds	r3, r3, r0
 8013d36:	106d      	asrs	r5, r5, #1
 8013d38:	42ab      	cmp	r3, r5
 8013d3a:	d900      	bls.n	8013d3e <__ssputs_r+0x3e>
 8013d3c:	001d      	movs	r5, r3
 8013d3e:	0553      	lsls	r3, r2, #21
 8013d40:	d532      	bpl.n	8013da8 <__ssputs_r+0xa8>
 8013d42:	0029      	movs	r1, r5
 8013d44:	0038      	movs	r0, r7
 8013d46:	f7ff ff65 	bl	8013c14 <_malloc_r>
 8013d4a:	1e06      	subs	r6, r0, #0
 8013d4c:	d109      	bne.n	8013d62 <__ssputs_r+0x62>
 8013d4e:	230c      	movs	r3, #12
 8013d50:	603b      	str	r3, [r7, #0]
 8013d52:	2340      	movs	r3, #64	; 0x40
 8013d54:	2001      	movs	r0, #1
 8013d56:	89a2      	ldrh	r2, [r4, #12]
 8013d58:	4240      	negs	r0, r0
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	81a3      	strh	r3, [r4, #12]
 8013d5e:	b005      	add	sp, #20
 8013d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d62:	9a02      	ldr	r2, [sp, #8]
 8013d64:	6921      	ldr	r1, [r4, #16]
 8013d66:	f7fd fbab 	bl	80114c0 <memcpy>
 8013d6a:	89a3      	ldrh	r3, [r4, #12]
 8013d6c:	4a14      	ldr	r2, [pc, #80]	; (8013dc0 <__ssputs_r+0xc0>)
 8013d6e:	401a      	ands	r2, r3
 8013d70:	2380      	movs	r3, #128	; 0x80
 8013d72:	4313      	orrs	r3, r2
 8013d74:	81a3      	strh	r3, [r4, #12]
 8013d76:	9b02      	ldr	r3, [sp, #8]
 8013d78:	6126      	str	r6, [r4, #16]
 8013d7a:	18f6      	adds	r6, r6, r3
 8013d7c:	6026      	str	r6, [r4, #0]
 8013d7e:	6165      	str	r5, [r4, #20]
 8013d80:	9e01      	ldr	r6, [sp, #4]
 8013d82:	1aed      	subs	r5, r5, r3
 8013d84:	60a5      	str	r5, [r4, #8]
 8013d86:	9b01      	ldr	r3, [sp, #4]
 8013d88:	429e      	cmp	r6, r3
 8013d8a:	d900      	bls.n	8013d8e <__ssputs_r+0x8e>
 8013d8c:	9e01      	ldr	r6, [sp, #4]
 8013d8e:	0032      	movs	r2, r6
 8013d90:	9903      	ldr	r1, [sp, #12]
 8013d92:	6820      	ldr	r0, [r4, #0]
 8013d94:	f000 fb4e 	bl	8014434 <memmove>
 8013d98:	68a3      	ldr	r3, [r4, #8]
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	1b9b      	subs	r3, r3, r6
 8013d9e:	60a3      	str	r3, [r4, #8]
 8013da0:	6823      	ldr	r3, [r4, #0]
 8013da2:	199e      	adds	r6, r3, r6
 8013da4:	6026      	str	r6, [r4, #0]
 8013da6:	e7da      	b.n	8013d5e <__ssputs_r+0x5e>
 8013da8:	002a      	movs	r2, r5
 8013daa:	0038      	movs	r0, r7
 8013dac:	f000 fb66 	bl	801447c <_realloc_r>
 8013db0:	1e06      	subs	r6, r0, #0
 8013db2:	d1e0      	bne.n	8013d76 <__ssputs_r+0x76>
 8013db4:	0038      	movs	r0, r7
 8013db6:	6921      	ldr	r1, [r4, #16]
 8013db8:	f7ff fec0 	bl	8013b3c <_free_r>
 8013dbc:	e7c7      	b.n	8013d4e <__ssputs_r+0x4e>
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	fffffb7f 	.word	0xfffffb7f

08013dc4 <_svfiprintf_r>:
 8013dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dc6:	b0a1      	sub	sp, #132	; 0x84
 8013dc8:	9003      	str	r0, [sp, #12]
 8013dca:	001d      	movs	r5, r3
 8013dcc:	898b      	ldrh	r3, [r1, #12]
 8013dce:	000f      	movs	r7, r1
 8013dd0:	0016      	movs	r6, r2
 8013dd2:	061b      	lsls	r3, r3, #24
 8013dd4:	d511      	bpl.n	8013dfa <_svfiprintf_r+0x36>
 8013dd6:	690b      	ldr	r3, [r1, #16]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d10e      	bne.n	8013dfa <_svfiprintf_r+0x36>
 8013ddc:	2140      	movs	r1, #64	; 0x40
 8013dde:	f7ff ff19 	bl	8013c14 <_malloc_r>
 8013de2:	6038      	str	r0, [r7, #0]
 8013de4:	6138      	str	r0, [r7, #16]
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d105      	bne.n	8013df6 <_svfiprintf_r+0x32>
 8013dea:	230c      	movs	r3, #12
 8013dec:	9a03      	ldr	r2, [sp, #12]
 8013dee:	3801      	subs	r0, #1
 8013df0:	6013      	str	r3, [r2, #0]
 8013df2:	b021      	add	sp, #132	; 0x84
 8013df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df6:	2340      	movs	r3, #64	; 0x40
 8013df8:	617b      	str	r3, [r7, #20]
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	ac08      	add	r4, sp, #32
 8013dfe:	6163      	str	r3, [r4, #20]
 8013e00:	3320      	adds	r3, #32
 8013e02:	7663      	strb	r3, [r4, #25]
 8013e04:	3310      	adds	r3, #16
 8013e06:	76a3      	strb	r3, [r4, #26]
 8013e08:	9507      	str	r5, [sp, #28]
 8013e0a:	0035      	movs	r5, r6
 8013e0c:	782b      	ldrb	r3, [r5, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <_svfiprintf_r+0x52>
 8013e12:	2b25      	cmp	r3, #37	; 0x25
 8013e14:	d147      	bne.n	8013ea6 <_svfiprintf_r+0xe2>
 8013e16:	1bab      	subs	r3, r5, r6
 8013e18:	9305      	str	r3, [sp, #20]
 8013e1a:	42b5      	cmp	r5, r6
 8013e1c:	d00c      	beq.n	8013e38 <_svfiprintf_r+0x74>
 8013e1e:	0032      	movs	r2, r6
 8013e20:	0039      	movs	r1, r7
 8013e22:	9803      	ldr	r0, [sp, #12]
 8013e24:	f7ff ff6c 	bl	8013d00 <__ssputs_r>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d100      	bne.n	8013e2e <_svfiprintf_r+0x6a>
 8013e2c:	e0ae      	b.n	8013f8c <_svfiprintf_r+0x1c8>
 8013e2e:	6962      	ldr	r2, [r4, #20]
 8013e30:	9b05      	ldr	r3, [sp, #20]
 8013e32:	4694      	mov	ip, r2
 8013e34:	4463      	add	r3, ip
 8013e36:	6163      	str	r3, [r4, #20]
 8013e38:	782b      	ldrb	r3, [r5, #0]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d100      	bne.n	8013e40 <_svfiprintf_r+0x7c>
 8013e3e:	e0a5      	b.n	8013f8c <_svfiprintf_r+0x1c8>
 8013e40:	2201      	movs	r2, #1
 8013e42:	2300      	movs	r3, #0
 8013e44:	4252      	negs	r2, r2
 8013e46:	6062      	str	r2, [r4, #4]
 8013e48:	a904      	add	r1, sp, #16
 8013e4a:	3254      	adds	r2, #84	; 0x54
 8013e4c:	1852      	adds	r2, r2, r1
 8013e4e:	1c6e      	adds	r6, r5, #1
 8013e50:	6023      	str	r3, [r4, #0]
 8013e52:	60e3      	str	r3, [r4, #12]
 8013e54:	60a3      	str	r3, [r4, #8]
 8013e56:	7013      	strb	r3, [r2, #0]
 8013e58:	65a3      	str	r3, [r4, #88]	; 0x58
 8013e5a:	2205      	movs	r2, #5
 8013e5c:	7831      	ldrb	r1, [r6, #0]
 8013e5e:	4854      	ldr	r0, [pc, #336]	; (8013fb0 <_svfiprintf_r+0x1ec>)
 8013e60:	f7ff fa98 	bl	8013394 <memchr>
 8013e64:	1c75      	adds	r5, r6, #1
 8013e66:	2800      	cmp	r0, #0
 8013e68:	d11f      	bne.n	8013eaa <_svfiprintf_r+0xe6>
 8013e6a:	6822      	ldr	r2, [r4, #0]
 8013e6c:	06d3      	lsls	r3, r2, #27
 8013e6e:	d504      	bpl.n	8013e7a <_svfiprintf_r+0xb6>
 8013e70:	2353      	movs	r3, #83	; 0x53
 8013e72:	a904      	add	r1, sp, #16
 8013e74:	185b      	adds	r3, r3, r1
 8013e76:	2120      	movs	r1, #32
 8013e78:	7019      	strb	r1, [r3, #0]
 8013e7a:	0713      	lsls	r3, r2, #28
 8013e7c:	d504      	bpl.n	8013e88 <_svfiprintf_r+0xc4>
 8013e7e:	2353      	movs	r3, #83	; 0x53
 8013e80:	a904      	add	r1, sp, #16
 8013e82:	185b      	adds	r3, r3, r1
 8013e84:	212b      	movs	r1, #43	; 0x2b
 8013e86:	7019      	strb	r1, [r3, #0]
 8013e88:	7833      	ldrb	r3, [r6, #0]
 8013e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e8c:	d016      	beq.n	8013ebc <_svfiprintf_r+0xf8>
 8013e8e:	0035      	movs	r5, r6
 8013e90:	2100      	movs	r1, #0
 8013e92:	200a      	movs	r0, #10
 8013e94:	68e3      	ldr	r3, [r4, #12]
 8013e96:	782a      	ldrb	r2, [r5, #0]
 8013e98:	1c6e      	adds	r6, r5, #1
 8013e9a:	3a30      	subs	r2, #48	; 0x30
 8013e9c:	2a09      	cmp	r2, #9
 8013e9e:	d94e      	bls.n	8013f3e <_svfiprintf_r+0x17a>
 8013ea0:	2900      	cmp	r1, #0
 8013ea2:	d111      	bne.n	8013ec8 <_svfiprintf_r+0x104>
 8013ea4:	e017      	b.n	8013ed6 <_svfiprintf_r+0x112>
 8013ea6:	3501      	adds	r5, #1
 8013ea8:	e7b0      	b.n	8013e0c <_svfiprintf_r+0x48>
 8013eaa:	4b41      	ldr	r3, [pc, #260]	; (8013fb0 <_svfiprintf_r+0x1ec>)
 8013eac:	6822      	ldr	r2, [r4, #0]
 8013eae:	1ac0      	subs	r0, r0, r3
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	4083      	lsls	r3, r0
 8013eb4:	4313      	orrs	r3, r2
 8013eb6:	002e      	movs	r6, r5
 8013eb8:	6023      	str	r3, [r4, #0]
 8013eba:	e7ce      	b.n	8013e5a <_svfiprintf_r+0x96>
 8013ebc:	9b07      	ldr	r3, [sp, #28]
 8013ebe:	1d19      	adds	r1, r3, #4
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	9107      	str	r1, [sp, #28]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	db01      	blt.n	8013ecc <_svfiprintf_r+0x108>
 8013ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013eca:	e004      	b.n	8013ed6 <_svfiprintf_r+0x112>
 8013ecc:	425b      	negs	r3, r3
 8013ece:	60e3      	str	r3, [r4, #12]
 8013ed0:	2302      	movs	r3, #2
 8013ed2:	4313      	orrs	r3, r2
 8013ed4:	6023      	str	r3, [r4, #0]
 8013ed6:	782b      	ldrb	r3, [r5, #0]
 8013ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8013eda:	d10a      	bne.n	8013ef2 <_svfiprintf_r+0x12e>
 8013edc:	786b      	ldrb	r3, [r5, #1]
 8013ede:	2b2a      	cmp	r3, #42	; 0x2a
 8013ee0:	d135      	bne.n	8013f4e <_svfiprintf_r+0x18a>
 8013ee2:	9b07      	ldr	r3, [sp, #28]
 8013ee4:	3502      	adds	r5, #2
 8013ee6:	1d1a      	adds	r2, r3, #4
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	9207      	str	r2, [sp, #28]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	db2b      	blt.n	8013f48 <_svfiprintf_r+0x184>
 8013ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ef2:	4e30      	ldr	r6, [pc, #192]	; (8013fb4 <_svfiprintf_r+0x1f0>)
 8013ef4:	2203      	movs	r2, #3
 8013ef6:	0030      	movs	r0, r6
 8013ef8:	7829      	ldrb	r1, [r5, #0]
 8013efa:	f7ff fa4b 	bl	8013394 <memchr>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d006      	beq.n	8013f10 <_svfiprintf_r+0x14c>
 8013f02:	2340      	movs	r3, #64	; 0x40
 8013f04:	1b80      	subs	r0, r0, r6
 8013f06:	4083      	lsls	r3, r0
 8013f08:	6822      	ldr	r2, [r4, #0]
 8013f0a:	3501      	adds	r5, #1
 8013f0c:	4313      	orrs	r3, r2
 8013f0e:	6023      	str	r3, [r4, #0]
 8013f10:	7829      	ldrb	r1, [r5, #0]
 8013f12:	2206      	movs	r2, #6
 8013f14:	4828      	ldr	r0, [pc, #160]	; (8013fb8 <_svfiprintf_r+0x1f4>)
 8013f16:	1c6e      	adds	r6, r5, #1
 8013f18:	7621      	strb	r1, [r4, #24]
 8013f1a:	f7ff fa3b 	bl	8013394 <memchr>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d03c      	beq.n	8013f9c <_svfiprintf_r+0x1d8>
 8013f22:	4b26      	ldr	r3, [pc, #152]	; (8013fbc <_svfiprintf_r+0x1f8>)
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d125      	bne.n	8013f74 <_svfiprintf_r+0x1b0>
 8013f28:	2207      	movs	r2, #7
 8013f2a:	9b07      	ldr	r3, [sp, #28]
 8013f2c:	3307      	adds	r3, #7
 8013f2e:	4393      	bics	r3, r2
 8013f30:	3308      	adds	r3, #8
 8013f32:	9307      	str	r3, [sp, #28]
 8013f34:	6963      	ldr	r3, [r4, #20]
 8013f36:	9a04      	ldr	r2, [sp, #16]
 8013f38:	189b      	adds	r3, r3, r2
 8013f3a:	6163      	str	r3, [r4, #20]
 8013f3c:	e765      	b.n	8013e0a <_svfiprintf_r+0x46>
 8013f3e:	4343      	muls	r3, r0
 8013f40:	0035      	movs	r5, r6
 8013f42:	2101      	movs	r1, #1
 8013f44:	189b      	adds	r3, r3, r2
 8013f46:	e7a6      	b.n	8013e96 <_svfiprintf_r+0xd2>
 8013f48:	2301      	movs	r3, #1
 8013f4a:	425b      	negs	r3, r3
 8013f4c:	e7d0      	b.n	8013ef0 <_svfiprintf_r+0x12c>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	200a      	movs	r0, #10
 8013f52:	001a      	movs	r2, r3
 8013f54:	3501      	adds	r5, #1
 8013f56:	6063      	str	r3, [r4, #4]
 8013f58:	7829      	ldrb	r1, [r5, #0]
 8013f5a:	1c6e      	adds	r6, r5, #1
 8013f5c:	3930      	subs	r1, #48	; 0x30
 8013f5e:	2909      	cmp	r1, #9
 8013f60:	d903      	bls.n	8013f6a <_svfiprintf_r+0x1a6>
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d0c5      	beq.n	8013ef2 <_svfiprintf_r+0x12e>
 8013f66:	9209      	str	r2, [sp, #36]	; 0x24
 8013f68:	e7c3      	b.n	8013ef2 <_svfiprintf_r+0x12e>
 8013f6a:	4342      	muls	r2, r0
 8013f6c:	0035      	movs	r5, r6
 8013f6e:	2301      	movs	r3, #1
 8013f70:	1852      	adds	r2, r2, r1
 8013f72:	e7f1      	b.n	8013f58 <_svfiprintf_r+0x194>
 8013f74:	ab07      	add	r3, sp, #28
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	003a      	movs	r2, r7
 8013f7a:	0021      	movs	r1, r4
 8013f7c:	4b10      	ldr	r3, [pc, #64]	; (8013fc0 <_svfiprintf_r+0x1fc>)
 8013f7e:	9803      	ldr	r0, [sp, #12]
 8013f80:	f7fd fb5a 	bl	8011638 <_printf_float>
 8013f84:	9004      	str	r0, [sp, #16]
 8013f86:	9b04      	ldr	r3, [sp, #16]
 8013f88:	3301      	adds	r3, #1
 8013f8a:	d1d3      	bne.n	8013f34 <_svfiprintf_r+0x170>
 8013f8c:	89bb      	ldrh	r3, [r7, #12]
 8013f8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013f90:	065b      	lsls	r3, r3, #25
 8013f92:	d400      	bmi.n	8013f96 <_svfiprintf_r+0x1d2>
 8013f94:	e72d      	b.n	8013df2 <_svfiprintf_r+0x2e>
 8013f96:	2001      	movs	r0, #1
 8013f98:	4240      	negs	r0, r0
 8013f9a:	e72a      	b.n	8013df2 <_svfiprintf_r+0x2e>
 8013f9c:	ab07      	add	r3, sp, #28
 8013f9e:	9300      	str	r3, [sp, #0]
 8013fa0:	003a      	movs	r2, r7
 8013fa2:	0021      	movs	r1, r4
 8013fa4:	4b06      	ldr	r3, [pc, #24]	; (8013fc0 <_svfiprintf_r+0x1fc>)
 8013fa6:	9803      	ldr	r0, [sp, #12]
 8013fa8:	f7fd fdf8 	bl	8011b9c <_printf_i>
 8013fac:	e7ea      	b.n	8013f84 <_svfiprintf_r+0x1c0>
 8013fae:	46c0      	nop			; (mov r8, r8)
 8013fb0:	080154bc 	.word	0x080154bc
 8013fb4:	080154c2 	.word	0x080154c2
 8013fb8:	080154c6 	.word	0x080154c6
 8013fbc:	08011639 	.word	0x08011639
 8013fc0:	08013d01 	.word	0x08013d01

08013fc4 <__sfputc_r>:
 8013fc4:	6893      	ldr	r3, [r2, #8]
 8013fc6:	b510      	push	{r4, lr}
 8013fc8:	3b01      	subs	r3, #1
 8013fca:	6093      	str	r3, [r2, #8]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	da04      	bge.n	8013fda <__sfputc_r+0x16>
 8013fd0:	6994      	ldr	r4, [r2, #24]
 8013fd2:	42a3      	cmp	r3, r4
 8013fd4:	db07      	blt.n	8013fe6 <__sfputc_r+0x22>
 8013fd6:	290a      	cmp	r1, #10
 8013fd8:	d005      	beq.n	8013fe6 <__sfputc_r+0x22>
 8013fda:	6813      	ldr	r3, [r2, #0]
 8013fdc:	1c58      	adds	r0, r3, #1
 8013fde:	6010      	str	r0, [r2, #0]
 8013fe0:	7019      	strb	r1, [r3, #0]
 8013fe2:	0008      	movs	r0, r1
 8013fe4:	bd10      	pop	{r4, pc}
 8013fe6:	f7fd ffe7 	bl	8011fb8 <__swbuf_r>
 8013fea:	0001      	movs	r1, r0
 8013fec:	e7f9      	b.n	8013fe2 <__sfputc_r+0x1e>

08013fee <__sfputs_r>:
 8013fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ff0:	0006      	movs	r6, r0
 8013ff2:	000f      	movs	r7, r1
 8013ff4:	0014      	movs	r4, r2
 8013ff6:	18d5      	adds	r5, r2, r3
 8013ff8:	42ac      	cmp	r4, r5
 8013ffa:	d101      	bne.n	8014000 <__sfputs_r+0x12>
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	e007      	b.n	8014010 <__sfputs_r+0x22>
 8014000:	7821      	ldrb	r1, [r4, #0]
 8014002:	003a      	movs	r2, r7
 8014004:	0030      	movs	r0, r6
 8014006:	f7ff ffdd 	bl	8013fc4 <__sfputc_r>
 801400a:	3401      	adds	r4, #1
 801400c:	1c43      	adds	r3, r0, #1
 801400e:	d1f3      	bne.n	8013ff8 <__sfputs_r+0xa>
 8014010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014014 <_vfiprintf_r>:
 8014014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014016:	b0a1      	sub	sp, #132	; 0x84
 8014018:	0006      	movs	r6, r0
 801401a:	000c      	movs	r4, r1
 801401c:	001f      	movs	r7, r3
 801401e:	9203      	str	r2, [sp, #12]
 8014020:	2800      	cmp	r0, #0
 8014022:	d004      	beq.n	801402e <_vfiprintf_r+0x1a>
 8014024:	6983      	ldr	r3, [r0, #24]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <_vfiprintf_r+0x1a>
 801402a:	f7ff f885 	bl	8013138 <__sinit>
 801402e:	4b8e      	ldr	r3, [pc, #568]	; (8014268 <_vfiprintf_r+0x254>)
 8014030:	429c      	cmp	r4, r3
 8014032:	d11c      	bne.n	801406e <_vfiprintf_r+0x5a>
 8014034:	6874      	ldr	r4, [r6, #4]
 8014036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014038:	07db      	lsls	r3, r3, #31
 801403a:	d405      	bmi.n	8014048 <_vfiprintf_r+0x34>
 801403c:	89a3      	ldrh	r3, [r4, #12]
 801403e:	059b      	lsls	r3, r3, #22
 8014040:	d402      	bmi.n	8014048 <_vfiprintf_r+0x34>
 8014042:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014044:	f7ff f92d 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	071b      	lsls	r3, r3, #28
 801404c:	d502      	bpl.n	8014054 <_vfiprintf_r+0x40>
 801404e:	6923      	ldr	r3, [r4, #16]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d11d      	bne.n	8014090 <_vfiprintf_r+0x7c>
 8014054:	0021      	movs	r1, r4
 8014056:	0030      	movs	r0, r6
 8014058:	f7fe f804 	bl	8012064 <__swsetup_r>
 801405c:	2800      	cmp	r0, #0
 801405e:	d017      	beq.n	8014090 <_vfiprintf_r+0x7c>
 8014060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014062:	07db      	lsls	r3, r3, #31
 8014064:	d50d      	bpl.n	8014082 <_vfiprintf_r+0x6e>
 8014066:	2001      	movs	r0, #1
 8014068:	4240      	negs	r0, r0
 801406a:	b021      	add	sp, #132	; 0x84
 801406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801406e:	4b7f      	ldr	r3, [pc, #508]	; (801426c <_vfiprintf_r+0x258>)
 8014070:	429c      	cmp	r4, r3
 8014072:	d101      	bne.n	8014078 <_vfiprintf_r+0x64>
 8014074:	68b4      	ldr	r4, [r6, #8]
 8014076:	e7de      	b.n	8014036 <_vfiprintf_r+0x22>
 8014078:	4b7d      	ldr	r3, [pc, #500]	; (8014270 <_vfiprintf_r+0x25c>)
 801407a:	429c      	cmp	r4, r3
 801407c:	d1db      	bne.n	8014036 <_vfiprintf_r+0x22>
 801407e:	68f4      	ldr	r4, [r6, #12]
 8014080:	e7d9      	b.n	8014036 <_vfiprintf_r+0x22>
 8014082:	89a3      	ldrh	r3, [r4, #12]
 8014084:	059b      	lsls	r3, r3, #22
 8014086:	d4ee      	bmi.n	8014066 <_vfiprintf_r+0x52>
 8014088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801408a:	f7ff f90b 	bl	80132a4 <__retarget_lock_release_recursive>
 801408e:	e7ea      	b.n	8014066 <_vfiprintf_r+0x52>
 8014090:	2300      	movs	r3, #0
 8014092:	ad08      	add	r5, sp, #32
 8014094:	616b      	str	r3, [r5, #20]
 8014096:	3320      	adds	r3, #32
 8014098:	766b      	strb	r3, [r5, #25]
 801409a:	3310      	adds	r3, #16
 801409c:	76ab      	strb	r3, [r5, #26]
 801409e:	9707      	str	r7, [sp, #28]
 80140a0:	9f03      	ldr	r7, [sp, #12]
 80140a2:	783b      	ldrb	r3, [r7, #0]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d001      	beq.n	80140ac <_vfiprintf_r+0x98>
 80140a8:	2b25      	cmp	r3, #37	; 0x25
 80140aa:	d14e      	bne.n	801414a <_vfiprintf_r+0x136>
 80140ac:	9b03      	ldr	r3, [sp, #12]
 80140ae:	1afb      	subs	r3, r7, r3
 80140b0:	9305      	str	r3, [sp, #20]
 80140b2:	9b03      	ldr	r3, [sp, #12]
 80140b4:	429f      	cmp	r7, r3
 80140b6:	d00d      	beq.n	80140d4 <_vfiprintf_r+0xc0>
 80140b8:	9b05      	ldr	r3, [sp, #20]
 80140ba:	0021      	movs	r1, r4
 80140bc:	0030      	movs	r0, r6
 80140be:	9a03      	ldr	r2, [sp, #12]
 80140c0:	f7ff ff95 	bl	8013fee <__sfputs_r>
 80140c4:	1c43      	adds	r3, r0, #1
 80140c6:	d100      	bne.n	80140ca <_vfiprintf_r+0xb6>
 80140c8:	e0b5      	b.n	8014236 <_vfiprintf_r+0x222>
 80140ca:	696a      	ldr	r2, [r5, #20]
 80140cc:	9b05      	ldr	r3, [sp, #20]
 80140ce:	4694      	mov	ip, r2
 80140d0:	4463      	add	r3, ip
 80140d2:	616b      	str	r3, [r5, #20]
 80140d4:	783b      	ldrb	r3, [r7, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d100      	bne.n	80140dc <_vfiprintf_r+0xc8>
 80140da:	e0ac      	b.n	8014236 <_vfiprintf_r+0x222>
 80140dc:	2201      	movs	r2, #1
 80140de:	1c7b      	adds	r3, r7, #1
 80140e0:	9303      	str	r3, [sp, #12]
 80140e2:	2300      	movs	r3, #0
 80140e4:	4252      	negs	r2, r2
 80140e6:	606a      	str	r2, [r5, #4]
 80140e8:	a904      	add	r1, sp, #16
 80140ea:	3254      	adds	r2, #84	; 0x54
 80140ec:	1852      	adds	r2, r2, r1
 80140ee:	602b      	str	r3, [r5, #0]
 80140f0:	60eb      	str	r3, [r5, #12]
 80140f2:	60ab      	str	r3, [r5, #8]
 80140f4:	7013      	strb	r3, [r2, #0]
 80140f6:	65ab      	str	r3, [r5, #88]	; 0x58
 80140f8:	9b03      	ldr	r3, [sp, #12]
 80140fa:	2205      	movs	r2, #5
 80140fc:	7819      	ldrb	r1, [r3, #0]
 80140fe:	485d      	ldr	r0, [pc, #372]	; (8014274 <_vfiprintf_r+0x260>)
 8014100:	f7ff f948 	bl	8013394 <memchr>
 8014104:	9b03      	ldr	r3, [sp, #12]
 8014106:	1c5f      	adds	r7, r3, #1
 8014108:	2800      	cmp	r0, #0
 801410a:	d120      	bne.n	801414e <_vfiprintf_r+0x13a>
 801410c:	682a      	ldr	r2, [r5, #0]
 801410e:	06d3      	lsls	r3, r2, #27
 8014110:	d504      	bpl.n	801411c <_vfiprintf_r+0x108>
 8014112:	2353      	movs	r3, #83	; 0x53
 8014114:	a904      	add	r1, sp, #16
 8014116:	185b      	adds	r3, r3, r1
 8014118:	2120      	movs	r1, #32
 801411a:	7019      	strb	r1, [r3, #0]
 801411c:	0713      	lsls	r3, r2, #28
 801411e:	d504      	bpl.n	801412a <_vfiprintf_r+0x116>
 8014120:	2353      	movs	r3, #83	; 0x53
 8014122:	a904      	add	r1, sp, #16
 8014124:	185b      	adds	r3, r3, r1
 8014126:	212b      	movs	r1, #43	; 0x2b
 8014128:	7019      	strb	r1, [r3, #0]
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	2b2a      	cmp	r3, #42	; 0x2a
 8014130:	d016      	beq.n	8014160 <_vfiprintf_r+0x14c>
 8014132:	2100      	movs	r1, #0
 8014134:	68eb      	ldr	r3, [r5, #12]
 8014136:	9f03      	ldr	r7, [sp, #12]
 8014138:	783a      	ldrb	r2, [r7, #0]
 801413a:	1c78      	adds	r0, r7, #1
 801413c:	3a30      	subs	r2, #48	; 0x30
 801413e:	4684      	mov	ip, r0
 8014140:	2a09      	cmp	r2, #9
 8014142:	d94f      	bls.n	80141e4 <_vfiprintf_r+0x1d0>
 8014144:	2900      	cmp	r1, #0
 8014146:	d111      	bne.n	801416c <_vfiprintf_r+0x158>
 8014148:	e017      	b.n	801417a <_vfiprintf_r+0x166>
 801414a:	3701      	adds	r7, #1
 801414c:	e7a9      	b.n	80140a2 <_vfiprintf_r+0x8e>
 801414e:	4b49      	ldr	r3, [pc, #292]	; (8014274 <_vfiprintf_r+0x260>)
 8014150:	682a      	ldr	r2, [r5, #0]
 8014152:	1ac0      	subs	r0, r0, r3
 8014154:	2301      	movs	r3, #1
 8014156:	4083      	lsls	r3, r0
 8014158:	4313      	orrs	r3, r2
 801415a:	602b      	str	r3, [r5, #0]
 801415c:	9703      	str	r7, [sp, #12]
 801415e:	e7cb      	b.n	80140f8 <_vfiprintf_r+0xe4>
 8014160:	9b07      	ldr	r3, [sp, #28]
 8014162:	1d19      	adds	r1, r3, #4
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	9107      	str	r1, [sp, #28]
 8014168:	2b00      	cmp	r3, #0
 801416a:	db01      	blt.n	8014170 <_vfiprintf_r+0x15c>
 801416c:	930b      	str	r3, [sp, #44]	; 0x2c
 801416e:	e004      	b.n	801417a <_vfiprintf_r+0x166>
 8014170:	425b      	negs	r3, r3
 8014172:	60eb      	str	r3, [r5, #12]
 8014174:	2302      	movs	r3, #2
 8014176:	4313      	orrs	r3, r2
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	783b      	ldrb	r3, [r7, #0]
 801417c:	2b2e      	cmp	r3, #46	; 0x2e
 801417e:	d10a      	bne.n	8014196 <_vfiprintf_r+0x182>
 8014180:	787b      	ldrb	r3, [r7, #1]
 8014182:	2b2a      	cmp	r3, #42	; 0x2a
 8014184:	d137      	bne.n	80141f6 <_vfiprintf_r+0x1e2>
 8014186:	9b07      	ldr	r3, [sp, #28]
 8014188:	3702      	adds	r7, #2
 801418a:	1d1a      	adds	r2, r3, #4
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	9207      	str	r2, [sp, #28]
 8014190:	2b00      	cmp	r3, #0
 8014192:	db2d      	blt.n	80141f0 <_vfiprintf_r+0x1dc>
 8014194:	9309      	str	r3, [sp, #36]	; 0x24
 8014196:	2203      	movs	r2, #3
 8014198:	7839      	ldrb	r1, [r7, #0]
 801419a:	4837      	ldr	r0, [pc, #220]	; (8014278 <_vfiprintf_r+0x264>)
 801419c:	f7ff f8fa 	bl	8013394 <memchr>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d007      	beq.n	80141b4 <_vfiprintf_r+0x1a0>
 80141a4:	4b34      	ldr	r3, [pc, #208]	; (8014278 <_vfiprintf_r+0x264>)
 80141a6:	682a      	ldr	r2, [r5, #0]
 80141a8:	1ac0      	subs	r0, r0, r3
 80141aa:	2340      	movs	r3, #64	; 0x40
 80141ac:	4083      	lsls	r3, r0
 80141ae:	4313      	orrs	r3, r2
 80141b0:	3701      	adds	r7, #1
 80141b2:	602b      	str	r3, [r5, #0]
 80141b4:	7839      	ldrb	r1, [r7, #0]
 80141b6:	1c7b      	adds	r3, r7, #1
 80141b8:	2206      	movs	r2, #6
 80141ba:	4830      	ldr	r0, [pc, #192]	; (801427c <_vfiprintf_r+0x268>)
 80141bc:	9303      	str	r3, [sp, #12]
 80141be:	7629      	strb	r1, [r5, #24]
 80141c0:	f7ff f8e8 	bl	8013394 <memchr>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	d045      	beq.n	8014254 <_vfiprintf_r+0x240>
 80141c8:	4b2d      	ldr	r3, [pc, #180]	; (8014280 <_vfiprintf_r+0x26c>)
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d127      	bne.n	801421e <_vfiprintf_r+0x20a>
 80141ce:	2207      	movs	r2, #7
 80141d0:	9b07      	ldr	r3, [sp, #28]
 80141d2:	3307      	adds	r3, #7
 80141d4:	4393      	bics	r3, r2
 80141d6:	3308      	adds	r3, #8
 80141d8:	9307      	str	r3, [sp, #28]
 80141da:	696b      	ldr	r3, [r5, #20]
 80141dc:	9a04      	ldr	r2, [sp, #16]
 80141de:	189b      	adds	r3, r3, r2
 80141e0:	616b      	str	r3, [r5, #20]
 80141e2:	e75d      	b.n	80140a0 <_vfiprintf_r+0x8c>
 80141e4:	210a      	movs	r1, #10
 80141e6:	434b      	muls	r3, r1
 80141e8:	4667      	mov	r7, ip
 80141ea:	189b      	adds	r3, r3, r2
 80141ec:	3909      	subs	r1, #9
 80141ee:	e7a3      	b.n	8014138 <_vfiprintf_r+0x124>
 80141f0:	2301      	movs	r3, #1
 80141f2:	425b      	negs	r3, r3
 80141f4:	e7ce      	b.n	8014194 <_vfiprintf_r+0x180>
 80141f6:	2300      	movs	r3, #0
 80141f8:	001a      	movs	r2, r3
 80141fa:	3701      	adds	r7, #1
 80141fc:	606b      	str	r3, [r5, #4]
 80141fe:	7839      	ldrb	r1, [r7, #0]
 8014200:	1c78      	adds	r0, r7, #1
 8014202:	3930      	subs	r1, #48	; 0x30
 8014204:	4684      	mov	ip, r0
 8014206:	2909      	cmp	r1, #9
 8014208:	d903      	bls.n	8014212 <_vfiprintf_r+0x1fe>
 801420a:	2b00      	cmp	r3, #0
 801420c:	d0c3      	beq.n	8014196 <_vfiprintf_r+0x182>
 801420e:	9209      	str	r2, [sp, #36]	; 0x24
 8014210:	e7c1      	b.n	8014196 <_vfiprintf_r+0x182>
 8014212:	230a      	movs	r3, #10
 8014214:	435a      	muls	r2, r3
 8014216:	4667      	mov	r7, ip
 8014218:	1852      	adds	r2, r2, r1
 801421a:	3b09      	subs	r3, #9
 801421c:	e7ef      	b.n	80141fe <_vfiprintf_r+0x1ea>
 801421e:	ab07      	add	r3, sp, #28
 8014220:	9300      	str	r3, [sp, #0]
 8014222:	0022      	movs	r2, r4
 8014224:	0029      	movs	r1, r5
 8014226:	0030      	movs	r0, r6
 8014228:	4b16      	ldr	r3, [pc, #88]	; (8014284 <_vfiprintf_r+0x270>)
 801422a:	f7fd fa05 	bl	8011638 <_printf_float>
 801422e:	9004      	str	r0, [sp, #16]
 8014230:	9b04      	ldr	r3, [sp, #16]
 8014232:	3301      	adds	r3, #1
 8014234:	d1d1      	bne.n	80141da <_vfiprintf_r+0x1c6>
 8014236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014238:	07db      	lsls	r3, r3, #31
 801423a:	d405      	bmi.n	8014248 <_vfiprintf_r+0x234>
 801423c:	89a3      	ldrh	r3, [r4, #12]
 801423e:	059b      	lsls	r3, r3, #22
 8014240:	d402      	bmi.n	8014248 <_vfiprintf_r+0x234>
 8014242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014244:	f7ff f82e 	bl	80132a4 <__retarget_lock_release_recursive>
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	065b      	lsls	r3, r3, #25
 801424c:	d500      	bpl.n	8014250 <_vfiprintf_r+0x23c>
 801424e:	e70a      	b.n	8014066 <_vfiprintf_r+0x52>
 8014250:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014252:	e70a      	b.n	801406a <_vfiprintf_r+0x56>
 8014254:	ab07      	add	r3, sp, #28
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	0022      	movs	r2, r4
 801425a:	0029      	movs	r1, r5
 801425c:	0030      	movs	r0, r6
 801425e:	4b09      	ldr	r3, [pc, #36]	; (8014284 <_vfiprintf_r+0x270>)
 8014260:	f7fd fc9c 	bl	8011b9c <_printf_i>
 8014264:	e7e3      	b.n	801422e <_vfiprintf_r+0x21a>
 8014266:	46c0      	nop			; (mov r8, r8)
 8014268:	08015320 	.word	0x08015320
 801426c:	08015340 	.word	0x08015340
 8014270:	08015300 	.word	0x08015300
 8014274:	080154bc 	.word	0x080154bc
 8014278:	080154c2 	.word	0x080154c2
 801427c:	080154c6 	.word	0x080154c6
 8014280:	08011639 	.word	0x08011639
 8014284:	08013fef 	.word	0x08013fef

08014288 <_sbrk_r>:
 8014288:	2300      	movs	r3, #0
 801428a:	b570      	push	{r4, r5, r6, lr}
 801428c:	4d06      	ldr	r5, [pc, #24]	; (80142a8 <_sbrk_r+0x20>)
 801428e:	0004      	movs	r4, r0
 8014290:	0008      	movs	r0, r1
 8014292:	602b      	str	r3, [r5, #0]
 8014294:	f7ef fd14 	bl	8003cc0 <_sbrk>
 8014298:	1c43      	adds	r3, r0, #1
 801429a:	d103      	bne.n	80142a4 <_sbrk_r+0x1c>
 801429c:	682b      	ldr	r3, [r5, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d000      	beq.n	80142a4 <_sbrk_r+0x1c>
 80142a2:	6023      	str	r3, [r4, #0]
 80142a4:	bd70      	pop	{r4, r5, r6, pc}
 80142a6:	46c0      	nop			; (mov r8, r8)
 80142a8:	2000832c 	.word	0x2000832c

080142ac <__sread>:
 80142ac:	b570      	push	{r4, r5, r6, lr}
 80142ae:	000c      	movs	r4, r1
 80142b0:	250e      	movs	r5, #14
 80142b2:	5f49      	ldrsh	r1, [r1, r5]
 80142b4:	f000 f912 	bl	80144dc <_read_r>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	db03      	blt.n	80142c4 <__sread+0x18>
 80142bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80142be:	181b      	adds	r3, r3, r0
 80142c0:	6563      	str	r3, [r4, #84]	; 0x54
 80142c2:	bd70      	pop	{r4, r5, r6, pc}
 80142c4:	89a3      	ldrh	r3, [r4, #12]
 80142c6:	4a02      	ldr	r2, [pc, #8]	; (80142d0 <__sread+0x24>)
 80142c8:	4013      	ands	r3, r2
 80142ca:	81a3      	strh	r3, [r4, #12]
 80142cc:	e7f9      	b.n	80142c2 <__sread+0x16>
 80142ce:	46c0      	nop			; (mov r8, r8)
 80142d0:	ffffefff 	.word	0xffffefff

080142d4 <__swrite>:
 80142d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d6:	001f      	movs	r7, r3
 80142d8:	898b      	ldrh	r3, [r1, #12]
 80142da:	0005      	movs	r5, r0
 80142dc:	000c      	movs	r4, r1
 80142de:	0016      	movs	r6, r2
 80142e0:	05db      	lsls	r3, r3, #23
 80142e2:	d505      	bpl.n	80142f0 <__swrite+0x1c>
 80142e4:	230e      	movs	r3, #14
 80142e6:	5ec9      	ldrsh	r1, [r1, r3]
 80142e8:	2200      	movs	r2, #0
 80142ea:	2302      	movs	r3, #2
 80142ec:	f000 f87c 	bl	80143e8 <_lseek_r>
 80142f0:	89a3      	ldrh	r3, [r4, #12]
 80142f2:	4a05      	ldr	r2, [pc, #20]	; (8014308 <__swrite+0x34>)
 80142f4:	0028      	movs	r0, r5
 80142f6:	4013      	ands	r3, r2
 80142f8:	81a3      	strh	r3, [r4, #12]
 80142fa:	0032      	movs	r2, r6
 80142fc:	230e      	movs	r3, #14
 80142fe:	5ee1      	ldrsh	r1, [r4, r3]
 8014300:	003b      	movs	r3, r7
 8014302:	f000 f81f 	bl	8014344 <_write_r>
 8014306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014308:	ffffefff 	.word	0xffffefff

0801430c <__sseek>:
 801430c:	b570      	push	{r4, r5, r6, lr}
 801430e:	000c      	movs	r4, r1
 8014310:	250e      	movs	r5, #14
 8014312:	5f49      	ldrsh	r1, [r1, r5]
 8014314:	f000 f868 	bl	80143e8 <_lseek_r>
 8014318:	89a3      	ldrh	r3, [r4, #12]
 801431a:	1c42      	adds	r2, r0, #1
 801431c:	d103      	bne.n	8014326 <__sseek+0x1a>
 801431e:	4a05      	ldr	r2, [pc, #20]	; (8014334 <__sseek+0x28>)
 8014320:	4013      	ands	r3, r2
 8014322:	81a3      	strh	r3, [r4, #12]
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	2280      	movs	r2, #128	; 0x80
 8014328:	0152      	lsls	r2, r2, #5
 801432a:	4313      	orrs	r3, r2
 801432c:	81a3      	strh	r3, [r4, #12]
 801432e:	6560      	str	r0, [r4, #84]	; 0x54
 8014330:	e7f8      	b.n	8014324 <__sseek+0x18>
 8014332:	46c0      	nop			; (mov r8, r8)
 8014334:	ffffefff 	.word	0xffffefff

08014338 <__sclose>:
 8014338:	b510      	push	{r4, lr}
 801433a:	230e      	movs	r3, #14
 801433c:	5ec9      	ldrsh	r1, [r1, r3]
 801433e:	f000 f81d 	bl	801437c <_close_r>
 8014342:	bd10      	pop	{r4, pc}

08014344 <_write_r>:
 8014344:	b570      	push	{r4, r5, r6, lr}
 8014346:	0004      	movs	r4, r0
 8014348:	0008      	movs	r0, r1
 801434a:	0011      	movs	r1, r2
 801434c:	001a      	movs	r2, r3
 801434e:	2300      	movs	r3, #0
 8014350:	4d05      	ldr	r5, [pc, #20]	; (8014368 <_write_r+0x24>)
 8014352:	602b      	str	r3, [r5, #0]
 8014354:	f7ef fc6b 	bl	8003c2e <_write>
 8014358:	1c43      	adds	r3, r0, #1
 801435a:	d103      	bne.n	8014364 <_write_r+0x20>
 801435c:	682b      	ldr	r3, [r5, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d000      	beq.n	8014364 <_write_r+0x20>
 8014362:	6023      	str	r3, [r4, #0]
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	46c0      	nop			; (mov r8, r8)
 8014368:	2000832c 	.word	0x2000832c

0801436c <abort>:
 801436c:	2006      	movs	r0, #6
 801436e:	b510      	push	{r4, lr}
 8014370:	f000 f8f2 	bl	8014558 <raise>
 8014374:	2001      	movs	r0, #1
 8014376:	f7ef fc31 	bl	8003bdc <_exit>
	...

0801437c <_close_r>:
 801437c:	2300      	movs	r3, #0
 801437e:	b570      	push	{r4, r5, r6, lr}
 8014380:	4d06      	ldr	r5, [pc, #24]	; (801439c <_close_r+0x20>)
 8014382:	0004      	movs	r4, r0
 8014384:	0008      	movs	r0, r1
 8014386:	602b      	str	r3, [r5, #0]
 8014388:	f7ef fc6d 	bl	8003c66 <_close>
 801438c:	1c43      	adds	r3, r0, #1
 801438e:	d103      	bne.n	8014398 <_close_r+0x1c>
 8014390:	682b      	ldr	r3, [r5, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d000      	beq.n	8014398 <_close_r+0x1c>
 8014396:	6023      	str	r3, [r4, #0]
 8014398:	bd70      	pop	{r4, r5, r6, pc}
 801439a:	46c0      	nop			; (mov r8, r8)
 801439c:	2000832c 	.word	0x2000832c

080143a0 <_fstat_r>:
 80143a0:	2300      	movs	r3, #0
 80143a2:	b570      	push	{r4, r5, r6, lr}
 80143a4:	4d06      	ldr	r5, [pc, #24]	; (80143c0 <_fstat_r+0x20>)
 80143a6:	0004      	movs	r4, r0
 80143a8:	0008      	movs	r0, r1
 80143aa:	0011      	movs	r1, r2
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	f7ef fc64 	bl	8003c7a <_fstat>
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	d103      	bne.n	80143be <_fstat_r+0x1e>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d000      	beq.n	80143be <_fstat_r+0x1e>
 80143bc:	6023      	str	r3, [r4, #0]
 80143be:	bd70      	pop	{r4, r5, r6, pc}
 80143c0:	2000832c 	.word	0x2000832c

080143c4 <_isatty_r>:
 80143c4:	2300      	movs	r3, #0
 80143c6:	b570      	push	{r4, r5, r6, lr}
 80143c8:	4d06      	ldr	r5, [pc, #24]	; (80143e4 <_isatty_r+0x20>)
 80143ca:	0004      	movs	r4, r0
 80143cc:	0008      	movs	r0, r1
 80143ce:	602b      	str	r3, [r5, #0]
 80143d0:	f7ef fc61 	bl	8003c96 <_isatty>
 80143d4:	1c43      	adds	r3, r0, #1
 80143d6:	d103      	bne.n	80143e0 <_isatty_r+0x1c>
 80143d8:	682b      	ldr	r3, [r5, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d000      	beq.n	80143e0 <_isatty_r+0x1c>
 80143de:	6023      	str	r3, [r4, #0]
 80143e0:	bd70      	pop	{r4, r5, r6, pc}
 80143e2:	46c0      	nop			; (mov r8, r8)
 80143e4:	2000832c 	.word	0x2000832c

080143e8 <_lseek_r>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	0004      	movs	r4, r0
 80143ec:	0008      	movs	r0, r1
 80143ee:	0011      	movs	r1, r2
 80143f0:	001a      	movs	r2, r3
 80143f2:	2300      	movs	r3, #0
 80143f4:	4d05      	ldr	r5, [pc, #20]	; (801440c <_lseek_r+0x24>)
 80143f6:	602b      	str	r3, [r5, #0]
 80143f8:	f7ef fc56 	bl	8003ca8 <_lseek>
 80143fc:	1c43      	adds	r3, r0, #1
 80143fe:	d103      	bne.n	8014408 <_lseek_r+0x20>
 8014400:	682b      	ldr	r3, [r5, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d000      	beq.n	8014408 <_lseek_r+0x20>
 8014406:	6023      	str	r3, [r4, #0]
 8014408:	bd70      	pop	{r4, r5, r6, pc}
 801440a:	46c0      	nop			; (mov r8, r8)
 801440c:	2000832c 	.word	0x2000832c

08014410 <__ascii_mbtowc>:
 8014410:	b082      	sub	sp, #8
 8014412:	2900      	cmp	r1, #0
 8014414:	d100      	bne.n	8014418 <__ascii_mbtowc+0x8>
 8014416:	a901      	add	r1, sp, #4
 8014418:	1e10      	subs	r0, r2, #0
 801441a:	d006      	beq.n	801442a <__ascii_mbtowc+0x1a>
 801441c:	2b00      	cmp	r3, #0
 801441e:	d006      	beq.n	801442e <__ascii_mbtowc+0x1e>
 8014420:	7813      	ldrb	r3, [r2, #0]
 8014422:	600b      	str	r3, [r1, #0]
 8014424:	7810      	ldrb	r0, [r2, #0]
 8014426:	1e43      	subs	r3, r0, #1
 8014428:	4198      	sbcs	r0, r3
 801442a:	b002      	add	sp, #8
 801442c:	4770      	bx	lr
 801442e:	2002      	movs	r0, #2
 8014430:	4240      	negs	r0, r0
 8014432:	e7fa      	b.n	801442a <__ascii_mbtowc+0x1a>

08014434 <memmove>:
 8014434:	b510      	push	{r4, lr}
 8014436:	4288      	cmp	r0, r1
 8014438:	d902      	bls.n	8014440 <memmove+0xc>
 801443a:	188b      	adds	r3, r1, r2
 801443c:	4298      	cmp	r0, r3
 801443e:	d303      	bcc.n	8014448 <memmove+0x14>
 8014440:	2300      	movs	r3, #0
 8014442:	e007      	b.n	8014454 <memmove+0x20>
 8014444:	5c8b      	ldrb	r3, [r1, r2]
 8014446:	5483      	strb	r3, [r0, r2]
 8014448:	3a01      	subs	r2, #1
 801444a:	d2fb      	bcs.n	8014444 <memmove+0x10>
 801444c:	bd10      	pop	{r4, pc}
 801444e:	5ccc      	ldrb	r4, [r1, r3]
 8014450:	54c4      	strb	r4, [r0, r3]
 8014452:	3301      	adds	r3, #1
 8014454:	429a      	cmp	r2, r3
 8014456:	d1fa      	bne.n	801444e <memmove+0x1a>
 8014458:	e7f8      	b.n	801444c <memmove+0x18>
	...

0801445c <__malloc_lock>:
 801445c:	b510      	push	{r4, lr}
 801445e:	4802      	ldr	r0, [pc, #8]	; (8014468 <__malloc_lock+0xc>)
 8014460:	f7fe ff1f 	bl	80132a2 <__retarget_lock_acquire_recursive>
 8014464:	bd10      	pop	{r4, pc}
 8014466:	46c0      	nop			; (mov r8, r8)
 8014468:	20008320 	.word	0x20008320

0801446c <__malloc_unlock>:
 801446c:	b510      	push	{r4, lr}
 801446e:	4802      	ldr	r0, [pc, #8]	; (8014478 <__malloc_unlock+0xc>)
 8014470:	f7fe ff18 	bl	80132a4 <__retarget_lock_release_recursive>
 8014474:	bd10      	pop	{r4, pc}
 8014476:	46c0      	nop			; (mov r8, r8)
 8014478:	20008320 	.word	0x20008320

0801447c <_realloc_r>:
 801447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801447e:	0007      	movs	r7, r0
 8014480:	000e      	movs	r6, r1
 8014482:	0014      	movs	r4, r2
 8014484:	2900      	cmp	r1, #0
 8014486:	d105      	bne.n	8014494 <_realloc_r+0x18>
 8014488:	0011      	movs	r1, r2
 801448a:	f7ff fbc3 	bl	8013c14 <_malloc_r>
 801448e:	0005      	movs	r5, r0
 8014490:	0028      	movs	r0, r5
 8014492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014494:	2a00      	cmp	r2, #0
 8014496:	d103      	bne.n	80144a0 <_realloc_r+0x24>
 8014498:	f7ff fb50 	bl	8013b3c <_free_r>
 801449c:	0025      	movs	r5, r4
 801449e:	e7f7      	b.n	8014490 <_realloc_r+0x14>
 80144a0:	f000 f887 	bl	80145b2 <_malloc_usable_size_r>
 80144a4:	9001      	str	r0, [sp, #4]
 80144a6:	4284      	cmp	r4, r0
 80144a8:	d803      	bhi.n	80144b2 <_realloc_r+0x36>
 80144aa:	0035      	movs	r5, r6
 80144ac:	0843      	lsrs	r3, r0, #1
 80144ae:	42a3      	cmp	r3, r4
 80144b0:	d3ee      	bcc.n	8014490 <_realloc_r+0x14>
 80144b2:	0021      	movs	r1, r4
 80144b4:	0038      	movs	r0, r7
 80144b6:	f7ff fbad 	bl	8013c14 <_malloc_r>
 80144ba:	1e05      	subs	r5, r0, #0
 80144bc:	d0e8      	beq.n	8014490 <_realloc_r+0x14>
 80144be:	9b01      	ldr	r3, [sp, #4]
 80144c0:	0022      	movs	r2, r4
 80144c2:	429c      	cmp	r4, r3
 80144c4:	d900      	bls.n	80144c8 <_realloc_r+0x4c>
 80144c6:	001a      	movs	r2, r3
 80144c8:	0031      	movs	r1, r6
 80144ca:	0028      	movs	r0, r5
 80144cc:	f7fc fff8 	bl	80114c0 <memcpy>
 80144d0:	0031      	movs	r1, r6
 80144d2:	0038      	movs	r0, r7
 80144d4:	f7ff fb32 	bl	8013b3c <_free_r>
 80144d8:	e7da      	b.n	8014490 <_realloc_r+0x14>
	...

080144dc <_read_r>:
 80144dc:	b570      	push	{r4, r5, r6, lr}
 80144de:	0004      	movs	r4, r0
 80144e0:	0008      	movs	r0, r1
 80144e2:	0011      	movs	r1, r2
 80144e4:	001a      	movs	r2, r3
 80144e6:	2300      	movs	r3, #0
 80144e8:	4d05      	ldr	r5, [pc, #20]	; (8014500 <_read_r+0x24>)
 80144ea:	602b      	str	r3, [r5, #0]
 80144ec:	f7ef fb82 	bl	8003bf4 <_read>
 80144f0:	1c43      	adds	r3, r0, #1
 80144f2:	d103      	bne.n	80144fc <_read_r+0x20>
 80144f4:	682b      	ldr	r3, [r5, #0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d000      	beq.n	80144fc <_read_r+0x20>
 80144fa:	6023      	str	r3, [r4, #0]
 80144fc:	bd70      	pop	{r4, r5, r6, pc}
 80144fe:	46c0      	nop			; (mov r8, r8)
 8014500:	2000832c 	.word	0x2000832c

08014504 <_raise_r>:
 8014504:	b570      	push	{r4, r5, r6, lr}
 8014506:	0004      	movs	r4, r0
 8014508:	000d      	movs	r5, r1
 801450a:	291f      	cmp	r1, #31
 801450c:	d904      	bls.n	8014518 <_raise_r+0x14>
 801450e:	2316      	movs	r3, #22
 8014510:	6003      	str	r3, [r0, #0]
 8014512:	2001      	movs	r0, #1
 8014514:	4240      	negs	r0, r0
 8014516:	bd70      	pop	{r4, r5, r6, pc}
 8014518:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801451a:	2b00      	cmp	r3, #0
 801451c:	d004      	beq.n	8014528 <_raise_r+0x24>
 801451e:	008a      	lsls	r2, r1, #2
 8014520:	189b      	adds	r3, r3, r2
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	2a00      	cmp	r2, #0
 8014526:	d108      	bne.n	801453a <_raise_r+0x36>
 8014528:	0020      	movs	r0, r4
 801452a:	f000 f831 	bl	8014590 <_getpid_r>
 801452e:	002a      	movs	r2, r5
 8014530:	0001      	movs	r1, r0
 8014532:	0020      	movs	r0, r4
 8014534:	f000 f81a 	bl	801456c <_kill_r>
 8014538:	e7ed      	b.n	8014516 <_raise_r+0x12>
 801453a:	2000      	movs	r0, #0
 801453c:	2a01      	cmp	r2, #1
 801453e:	d0ea      	beq.n	8014516 <_raise_r+0x12>
 8014540:	1c51      	adds	r1, r2, #1
 8014542:	d103      	bne.n	801454c <_raise_r+0x48>
 8014544:	2316      	movs	r3, #22
 8014546:	3001      	adds	r0, #1
 8014548:	6023      	str	r3, [r4, #0]
 801454a:	e7e4      	b.n	8014516 <_raise_r+0x12>
 801454c:	2400      	movs	r4, #0
 801454e:	0028      	movs	r0, r5
 8014550:	601c      	str	r4, [r3, #0]
 8014552:	4790      	blx	r2
 8014554:	0020      	movs	r0, r4
 8014556:	e7de      	b.n	8014516 <_raise_r+0x12>

08014558 <raise>:
 8014558:	b510      	push	{r4, lr}
 801455a:	4b03      	ldr	r3, [pc, #12]	; (8014568 <raise+0x10>)
 801455c:	0001      	movs	r1, r0
 801455e:	6818      	ldr	r0, [r3, #0]
 8014560:	f7ff ffd0 	bl	8014504 <_raise_r>
 8014564:	bd10      	pop	{r4, pc}
 8014566:	46c0      	nop			; (mov r8, r8)
 8014568:	200002ec 	.word	0x200002ec

0801456c <_kill_r>:
 801456c:	2300      	movs	r3, #0
 801456e:	b570      	push	{r4, r5, r6, lr}
 8014570:	4d06      	ldr	r5, [pc, #24]	; (801458c <_kill_r+0x20>)
 8014572:	0004      	movs	r4, r0
 8014574:	0008      	movs	r0, r1
 8014576:	0011      	movs	r1, r2
 8014578:	602b      	str	r3, [r5, #0]
 801457a:	f7ef fb1f 	bl	8003bbc <_kill>
 801457e:	1c43      	adds	r3, r0, #1
 8014580:	d103      	bne.n	801458a <_kill_r+0x1e>
 8014582:	682b      	ldr	r3, [r5, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d000      	beq.n	801458a <_kill_r+0x1e>
 8014588:	6023      	str	r3, [r4, #0]
 801458a:	bd70      	pop	{r4, r5, r6, pc}
 801458c:	2000832c 	.word	0x2000832c

08014590 <_getpid_r>:
 8014590:	b510      	push	{r4, lr}
 8014592:	f7ef fb0d 	bl	8003bb0 <_getpid>
 8014596:	bd10      	pop	{r4, pc}

08014598 <__ascii_wctomb>:
 8014598:	0003      	movs	r3, r0
 801459a:	1e08      	subs	r0, r1, #0
 801459c:	d005      	beq.n	80145aa <__ascii_wctomb+0x12>
 801459e:	2aff      	cmp	r2, #255	; 0xff
 80145a0:	d904      	bls.n	80145ac <__ascii_wctomb+0x14>
 80145a2:	228a      	movs	r2, #138	; 0x8a
 80145a4:	2001      	movs	r0, #1
 80145a6:	601a      	str	r2, [r3, #0]
 80145a8:	4240      	negs	r0, r0
 80145aa:	4770      	bx	lr
 80145ac:	2001      	movs	r0, #1
 80145ae:	700a      	strb	r2, [r1, #0]
 80145b0:	e7fb      	b.n	80145aa <__ascii_wctomb+0x12>

080145b2 <_malloc_usable_size_r>:
 80145b2:	1f0b      	subs	r3, r1, #4
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	1f18      	subs	r0, r3, #4
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	da01      	bge.n	80145c0 <_malloc_usable_size_r+0xe>
 80145bc:	580b      	ldr	r3, [r1, r0]
 80145be:	18c0      	adds	r0, r0, r3
 80145c0:	4770      	bx	lr
	...

080145c4 <_init>:
 80145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145c6:	46c0      	nop			; (mov r8, r8)
 80145c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ca:	bc08      	pop	{r3}
 80145cc:	469e      	mov	lr, r3
 80145ce:	4770      	bx	lr

080145d0 <_fini>:
 80145d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d2:	46c0      	nop			; (mov r8, r8)
 80145d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145d6:	bc08      	pop	{r3}
 80145d8:	469e      	mov	lr, r3
 80145da:	4770      	bx	lr
