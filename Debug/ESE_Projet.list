
ESE_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014324  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  080143e8  080143e8  000243e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015284  08015284  000304bc  2**0
                  CONTENTS
  4 .ARM          00000000  08015284  08015284  000304bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015284  08015284  000304bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015284  08015284  00025284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015288  08015288  00025288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  0801528c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e74  200004bc  08015748  000304bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008330  08015748  00038330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029447  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057c4  00000000  00000000  0005992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002030  00000000  00000000  0005f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de8  00000000  00000000  00061120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e590  00000000  00000000  00062f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029bbd  00000000  00000000  00081498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac488  00000000  00000000  000ab055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001574dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008718  00000000  00000000  00157530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004bc 	.word	0x200004bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080143cc 	.word	0x080143cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004c0 	.word	0x200004c0
 8000104:	080143cc 	.word	0x080143cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff0d 	bl	800125c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe5d 	bl	800110c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feff 	bl	800125c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef5 	bl	800125c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe85 	bl	8001190 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe7b 	bl	8001190 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fe5a 	bl	8002214 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fd5a 	bl	8002214 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff fb0f 	bl	800024c <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fafb 	bl	800024c <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff faa3 	bl	800024c <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa96 	bl	800024c <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 fa22 	bl	8002214 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 fa06 	bl	8002214 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	08014ca0 	.word	0x08014ca0
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f937 	bl	8002214 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f928 	bl	8002214 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fe1e 	bl	8002214 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fe00 	bl	8002214 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	08014ce0 	.word	0x08014ce0
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fd50 	bl	8002214 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fd42 	bl	8002214 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fcac 	bl	8002214 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fb74 	bl	8002214 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_dcmpun>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f26:	031c      	lsls	r4, r3, #12
 8001f28:	0016      	movs	r6, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	030a      	lsls	r2, r1, #12
 8001f2e:	0049      	lsls	r1, r1, #1
 8001f30:	0b12      	lsrs	r2, r2, #12
 8001f32:	0d49      	lsrs	r1, r1, #21
 8001f34:	0b24      	lsrs	r4, r4, #12
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	d008      	beq.n	8001f4e <__aeabi_dcmpun+0x2e>
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <__aeabi_dcmpun+0x38>)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d103      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f44:	0020      	movs	r0, r4
 8001f46:	4330      	orrs	r0, r6
 8001f48:	1e43      	subs	r3, r0, #1
 8001f4a:	4198      	sbcs	r0, r3
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	2001      	movs	r0, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	d1fb      	bne.n	8001f4c <__aeabi_dcmpun+0x2c>
 8001f54:	e7f2      	b.n	8001f3c <__aeabi_dcmpun+0x1c>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff

08001f5c <__aeabi_d2iz>:
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	4c13      	ldr	r4, [pc, #76]	; (8001fb0 <__aeabi_d2iz+0x54>)
 8001f62:	0053      	lsls	r3, r2, #1
 8001f64:	0309      	lsls	r1, r1, #12
 8001f66:	0005      	movs	r5, r0
 8001f68:	0b09      	lsrs	r1, r1, #12
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	0fd2      	lsrs	r2, r2, #31
 8001f70:	42a3      	cmp	r3, r4
 8001f72:	dd04      	ble.n	8001f7e <__aeabi_d2iz+0x22>
 8001f74:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <__aeabi_d2iz+0x58>)
 8001f76:	4283      	cmp	r3, r0
 8001f78:	dd02      	ble.n	8001f80 <__aeabi_d2iz+0x24>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <__aeabi_d2iz+0x5c>)
 8001f7c:	18d0      	adds	r0, r2, r3
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	2080      	movs	r0, #128	; 0x80
 8001f82:	0340      	lsls	r0, r0, #13
 8001f84:	4301      	orrs	r1, r0
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <__aeabi_d2iz+0x60>)
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	281f      	cmp	r0, #31
 8001f8c:	dd08      	ble.n	8001fa0 <__aeabi_d2iz+0x44>
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <__aeabi_d2iz+0x64>)
 8001f90:	1ac3      	subs	r3, r0, r3
 8001f92:	40d9      	lsrs	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	4258      	negs	r0, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d1f0      	bne.n	8001f7e <__aeabi_d2iz+0x22>
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	e7ee      	b.n	8001f7e <__aeabi_d2iz+0x22>
 8001fa0:	4c08      	ldr	r4, [pc, #32]	; (8001fc4 <__aeabi_d2iz+0x68>)
 8001fa2:	40c5      	lsrs	r5, r0
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	4463      	add	r3, ip
 8001fa8:	4099      	lsls	r1, r3
 8001faa:	000b      	movs	r3, r1
 8001fac:	432b      	orrs	r3, r5
 8001fae:	e7f2      	b.n	8001f96 <__aeabi_d2iz+0x3a>
 8001fb0:	000003fe 	.word	0x000003fe
 8001fb4:	0000041d 	.word	0x0000041d
 8001fb8:	7fffffff 	.word	0x7fffffff
 8001fbc:	00000433 	.word	0x00000433
 8001fc0:	00000413 	.word	0x00000413
 8001fc4:	fffffbed 	.word	0xfffffbed

08001fc8 <__aeabi_i2d>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d016      	beq.n	8001ffc <__aeabi_i2d+0x34>
 8001fce:	17c3      	asrs	r3, r0, #31
 8001fd0:	18c5      	adds	r5, r0, r3
 8001fd2:	405d      	eors	r5, r3
 8001fd4:	0fc4      	lsrs	r4, r0, #31
 8001fd6:	0028      	movs	r0, r5
 8001fd8:	f000 f91c 	bl	8002214 <__clzsi2>
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <__aeabi_i2d+0x5c>)
 8001fde:	1a12      	subs	r2, r2, r0
 8001fe0:	280a      	cmp	r0, #10
 8001fe2:	dc16      	bgt.n	8002012 <__aeabi_i2d+0x4a>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	002e      	movs	r6, r5
 8001fe8:	3315      	adds	r3, #21
 8001fea:	409e      	lsls	r6, r3
 8001fec:	230b      	movs	r3, #11
 8001fee:	1a18      	subs	r0, r3, r0
 8001ff0:	40c5      	lsrs	r5, r0
 8001ff2:	0552      	lsls	r2, r2, #21
 8001ff4:	032d      	lsls	r5, r5, #12
 8001ff6:	0b2d      	lsrs	r5, r5, #12
 8001ff8:	0d53      	lsrs	r3, r2, #21
 8001ffa:	e003      	b.n	8002004 <__aeabi_i2d+0x3c>
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	2500      	movs	r5, #0
 8002002:	2600      	movs	r6, #0
 8002004:	051b      	lsls	r3, r3, #20
 8002006:	432b      	orrs	r3, r5
 8002008:	07e4      	lsls	r4, r4, #31
 800200a:	4323      	orrs	r3, r4
 800200c:	0030      	movs	r0, r6
 800200e:	0019      	movs	r1, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	380b      	subs	r0, #11
 8002014:	4085      	lsls	r5, r0
 8002016:	0552      	lsls	r2, r2, #21
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	2600      	movs	r6, #0
 800201c:	0b2d      	lsrs	r5, r5, #12
 800201e:	0d53      	lsrs	r3, r2, #21
 8002020:	e7f0      	b.n	8002004 <__aeabi_i2d+0x3c>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	0000041e 	.word	0x0000041e

08002028 <__aeabi_ui2d>:
 8002028:	b510      	push	{r4, lr}
 800202a:	1e04      	subs	r4, r0, #0
 800202c:	d010      	beq.n	8002050 <__aeabi_ui2d+0x28>
 800202e:	f000 f8f1 	bl	8002214 <__clzsi2>
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <__aeabi_ui2d+0x48>)
 8002034:	1a1b      	subs	r3, r3, r0
 8002036:	280a      	cmp	r0, #10
 8002038:	dc11      	bgt.n	800205e <__aeabi_ui2d+0x36>
 800203a:	220b      	movs	r2, #11
 800203c:	0021      	movs	r1, r4
 800203e:	1a12      	subs	r2, r2, r0
 8002040:	40d1      	lsrs	r1, r2
 8002042:	3015      	adds	r0, #21
 8002044:	030a      	lsls	r2, r1, #12
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4084      	lsls	r4, r0
 800204a:	0b12      	lsrs	r2, r2, #12
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	e001      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002050:	2300      	movs	r3, #0
 8002052:	2200      	movs	r2, #0
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4313      	orrs	r3, r2
 8002058:	0020      	movs	r0, r4
 800205a:	0019      	movs	r1, r3
 800205c:	bd10      	pop	{r4, pc}
 800205e:	0022      	movs	r2, r4
 8002060:	380b      	subs	r0, #11
 8002062:	4082      	lsls	r2, r0
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	2400      	movs	r4, #0
 800206a:	0b12      	lsrs	r2, r2, #12
 800206c:	0d5b      	lsrs	r3, r3, #21
 800206e:	e7f1      	b.n	8002054 <__aeabi_ui2d+0x2c>
 8002070:	0000041e 	.word	0x0000041e

08002074 <__aeabi_f2d>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	0043      	lsls	r3, r0, #1
 8002078:	0246      	lsls	r6, r0, #9
 800207a:	0fc4      	lsrs	r4, r0, #31
 800207c:	20fe      	movs	r0, #254	; 0xfe
 800207e:	0e1b      	lsrs	r3, r3, #24
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	0a75      	lsrs	r5, r6, #9
 8002084:	4208      	tst	r0, r1
 8002086:	d00c      	beq.n	80020a2 <__aeabi_f2d+0x2e>
 8002088:	22e0      	movs	r2, #224	; 0xe0
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4694      	mov	ip, r2
 800208e:	076d      	lsls	r5, r5, #29
 8002090:	0b36      	lsrs	r6, r6, #12
 8002092:	4463      	add	r3, ip
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	4333      	orrs	r3, r6
 8002098:	07e4      	lsls	r4, r4, #31
 800209a:	4323      	orrs	r3, r4
 800209c:	0028      	movs	r0, r5
 800209e:	0019      	movs	r1, r3
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d114      	bne.n	80020d0 <__aeabi_f2d+0x5c>
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d01b      	beq.n	80020e2 <__aeabi_f2d+0x6e>
 80020aa:	0028      	movs	r0, r5
 80020ac:	f000 f8b2 	bl	8002214 <__clzsi2>
 80020b0:	280a      	cmp	r0, #10
 80020b2:	dc1c      	bgt.n	80020ee <__aeabi_f2d+0x7a>
 80020b4:	230b      	movs	r3, #11
 80020b6:	002e      	movs	r6, r5
 80020b8:	1a1b      	subs	r3, r3, r0
 80020ba:	40de      	lsrs	r6, r3
 80020bc:	0003      	movs	r3, r0
 80020be:	3315      	adds	r3, #21
 80020c0:	409d      	lsls	r5, r3
 80020c2:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <__aeabi_f2d+0x88>)
 80020c4:	0336      	lsls	r6, r6, #12
 80020c6:	1a12      	subs	r2, r2, r0
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	0b36      	lsrs	r6, r6, #12
 80020cc:	0d53      	lsrs	r3, r2, #21
 80020ce:	e7e1      	b.n	8002094 <__aeabi_f2d+0x20>
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d009      	beq.n	80020e8 <__aeabi_f2d+0x74>
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0b36      	lsrs	r6, r6, #12
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <__aeabi_f2d+0x8c>)
 80020dc:	076d      	lsls	r5, r5, #29
 80020de:	4316      	orrs	r6, r2
 80020e0:	e7d8      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e2:	2300      	movs	r3, #0
 80020e4:	2600      	movs	r6, #0
 80020e6:	e7d5      	b.n	8002094 <__aeabi_f2d+0x20>
 80020e8:	2600      	movs	r6, #0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <__aeabi_f2d+0x8c>)
 80020ec:	e7d2      	b.n	8002094 <__aeabi_f2d+0x20>
 80020ee:	0003      	movs	r3, r0
 80020f0:	3b0b      	subs	r3, #11
 80020f2:	409d      	lsls	r5, r3
 80020f4:	002e      	movs	r6, r5
 80020f6:	2500      	movs	r5, #0
 80020f8:	e7e3      	b.n	80020c2 <__aeabi_f2d+0x4e>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	00000389 	.word	0x00000389
 8002100:	000007ff 	.word	0x000007ff

08002104 <__aeabi_d2f>:
 8002104:	0002      	movs	r2, r0
 8002106:	004b      	lsls	r3, r1, #1
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	030c      	lsls	r4, r1, #12
 800210e:	4e3d      	ldr	r6, [pc, #244]	; (8002204 <__aeabi_d2f+0x100>)
 8002110:	0a64      	lsrs	r4, r4, #9
 8002112:	0f40      	lsrs	r0, r0, #29
 8002114:	1c5f      	adds	r7, r3, #1
 8002116:	0fc9      	lsrs	r1, r1, #31
 8002118:	4304      	orrs	r4, r0
 800211a:	00d5      	lsls	r5, r2, #3
 800211c:	4237      	tst	r7, r6
 800211e:	d00a      	beq.n	8002136 <__aeabi_d2f+0x32>
 8002120:	4839      	ldr	r0, [pc, #228]	; (8002208 <__aeabi_d2f+0x104>)
 8002122:	181e      	adds	r6, r3, r0
 8002124:	2efe      	cmp	r6, #254	; 0xfe
 8002126:	dd16      	ble.n	8002156 <__aeabi_d2f+0x52>
 8002128:	20ff      	movs	r0, #255	; 0xff
 800212a:	2400      	movs	r4, #0
 800212c:	05c0      	lsls	r0, r0, #23
 800212e:	4320      	orrs	r0, r4
 8002130:	07c9      	lsls	r1, r1, #31
 8002132:	4308      	orrs	r0, r1
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <__aeabi_d2f+0x44>
 800213a:	432c      	orrs	r4, r5
 800213c:	d026      	beq.n	800218c <__aeabi_d2f+0x88>
 800213e:	2205      	movs	r2, #5
 8002140:	0192      	lsls	r2, r2, #6
 8002142:	0a54      	lsrs	r4, r2, #9
 8002144:	b2d8      	uxtb	r0, r3
 8002146:	e7f1      	b.n	800212c <__aeabi_d2f+0x28>
 8002148:	4325      	orrs	r5, r4
 800214a:	d0ed      	beq.n	8002128 <__aeabi_d2f+0x24>
 800214c:	2080      	movs	r0, #128	; 0x80
 800214e:	03c0      	lsls	r0, r0, #15
 8002150:	4304      	orrs	r4, r0
 8002152:	20ff      	movs	r0, #255	; 0xff
 8002154:	e7ea      	b.n	800212c <__aeabi_d2f+0x28>
 8002156:	2e00      	cmp	r6, #0
 8002158:	dd1b      	ble.n	8002192 <__aeabi_d2f+0x8e>
 800215a:	0192      	lsls	r2, r2, #6
 800215c:	1e53      	subs	r3, r2, #1
 800215e:	419a      	sbcs	r2, r3
 8002160:	00e4      	lsls	r4, r4, #3
 8002162:	0f6d      	lsrs	r5, r5, #29
 8002164:	4322      	orrs	r2, r4
 8002166:	432a      	orrs	r2, r5
 8002168:	0753      	lsls	r3, r2, #29
 800216a:	d048      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800216c:	230f      	movs	r3, #15
 800216e:	4013      	ands	r3, r2
 8002170:	2b04      	cmp	r3, #4
 8002172:	d000      	beq.n	8002176 <__aeabi_d2f+0x72>
 8002174:	3204      	adds	r2, #4
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	04db      	lsls	r3, r3, #19
 800217a:	4013      	ands	r3, r2
 800217c:	d03f      	beq.n	80021fe <__aeabi_d2f+0xfa>
 800217e:	1c70      	adds	r0, r6, #1
 8002180:	2efe      	cmp	r6, #254	; 0xfe
 8002182:	d0d1      	beq.n	8002128 <__aeabi_d2f+0x24>
 8002184:	0192      	lsls	r2, r2, #6
 8002186:	0a54      	lsrs	r4, r2, #9
 8002188:	b2c0      	uxtb	r0, r0
 800218a:	e7cf      	b.n	800212c <__aeabi_d2f+0x28>
 800218c:	2000      	movs	r0, #0
 800218e:	2400      	movs	r4, #0
 8002190:	e7cc      	b.n	800212c <__aeabi_d2f+0x28>
 8002192:	0032      	movs	r2, r6
 8002194:	3217      	adds	r2, #23
 8002196:	db22      	blt.n	80021de <__aeabi_d2f+0xda>
 8002198:	2080      	movs	r0, #128	; 0x80
 800219a:	0400      	lsls	r0, r0, #16
 800219c:	4320      	orrs	r0, r4
 800219e:	241e      	movs	r4, #30
 80021a0:	1ba4      	subs	r4, r4, r6
 80021a2:	2c1f      	cmp	r4, #31
 80021a4:	dd1d      	ble.n	80021e2 <__aeabi_d2f+0xde>
 80021a6:	2202      	movs	r2, #2
 80021a8:	4252      	negs	r2, r2
 80021aa:	1b96      	subs	r6, r2, r6
 80021ac:	0002      	movs	r2, r0
 80021ae:	40f2      	lsrs	r2, r6
 80021b0:	0016      	movs	r6, r2
 80021b2:	2c20      	cmp	r4, #32
 80021b4:	d004      	beq.n	80021c0 <__aeabi_d2f+0xbc>
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <__aeabi_d2f+0x108>)
 80021b8:	4694      	mov	ip, r2
 80021ba:	4463      	add	r3, ip
 80021bc:	4098      	lsls	r0, r3
 80021be:	4305      	orrs	r5, r0
 80021c0:	002a      	movs	r2, r5
 80021c2:	1e53      	subs	r3, r2, #1
 80021c4:	419a      	sbcs	r2, r3
 80021c6:	4332      	orrs	r2, r6
 80021c8:	2600      	movs	r6, #0
 80021ca:	0753      	lsls	r3, r2, #29
 80021cc:	d1ce      	bne.n	800216c <__aeabi_d2f+0x68>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	0013      	movs	r3, r2
 80021d2:	04e4      	lsls	r4, r4, #19
 80021d4:	2001      	movs	r0, #1
 80021d6:	4023      	ands	r3, r4
 80021d8:	4222      	tst	r2, r4
 80021da:	d1d3      	bne.n	8002184 <__aeabi_d2f+0x80>
 80021dc:	e7b0      	b.n	8002140 <__aeabi_d2f+0x3c>
 80021de:	2300      	movs	r3, #0
 80021e0:	e7ad      	b.n	800213e <__aeabi_d2f+0x3a>
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <__aeabi_d2f+0x10c>)
 80021e4:	4694      	mov	ip, r2
 80021e6:	002a      	movs	r2, r5
 80021e8:	40e2      	lsrs	r2, r4
 80021ea:	0014      	movs	r4, r2
 80021ec:	002a      	movs	r2, r5
 80021ee:	4463      	add	r3, ip
 80021f0:	409a      	lsls	r2, r3
 80021f2:	4098      	lsls	r0, r3
 80021f4:	1e55      	subs	r5, r2, #1
 80021f6:	41aa      	sbcs	r2, r5
 80021f8:	4302      	orrs	r2, r0
 80021fa:	4322      	orrs	r2, r4
 80021fc:	e7e4      	b.n	80021c8 <__aeabi_d2f+0xc4>
 80021fe:	0033      	movs	r3, r6
 8002200:	e79e      	b.n	8002140 <__aeabi_d2f+0x3c>
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	000007fe 	.word	0x000007fe
 8002208:	fffffc80 	.word	0xfffffc80
 800220c:	fffffca2 	.word	0xfffffca2
 8002210:	fffffc82 	.word	0xfffffc82

08002214 <__clzsi2>:
 8002214:	211c      	movs	r1, #28
 8002216:	2301      	movs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4298      	cmp	r0, r3
 800221c:	d301      	bcc.n	8002222 <__clzsi2+0xe>
 800221e:	0c00      	lsrs	r0, r0, #16
 8002220:	3910      	subs	r1, #16
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	4298      	cmp	r0, r3
 8002226:	d301      	bcc.n	800222c <__clzsi2+0x18>
 8002228:	0a00      	lsrs	r0, r0, #8
 800222a:	3908      	subs	r1, #8
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	4298      	cmp	r0, r3
 8002230:	d301      	bcc.n	8002236 <__clzsi2+0x22>
 8002232:	0900      	lsrs	r0, r0, #4
 8002234:	3904      	subs	r1, #4
 8002236:	a202      	add	r2, pc, #8	; (adr r2, 8002240 <__clzsi2+0x2c>)
 8002238:	5c10      	ldrb	r0, [r2, r0]
 800223a:	1840      	adds	r0, r0, r1
 800223c:	4770      	bx	lr
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	02020304 	.word	0x02020304
 8002244:	01010101 	.word	0x01010101
	...

08002250 <taskEncoder>:
		return -1;
	}
	return 0;
}

void taskEncoder(void *pEncoder){
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur créée\r\n");
 8002258:	4bc0      	ldr	r3, [pc, #768]	; (800255c <taskEncoder+0x30c>)
 800225a:	0018      	movs	r0, r3
 800225c:	f00f fd80 	bl	8011d60 <puts>
	vTaskSuspend(0);
 8002260:	2000      	movs	r0, #0
 8002262:	f00d ff57 	bl	8010114 <vTaskSuspend>

	encoder_left.Ts= 5;
 8002266:	4bbe      	ldr	r3, [pc, #760]	; (8002560 <taskEncoder+0x310>)
 8002268:	22d0      	movs	r2, #208	; 0xd0
 800226a:	2105      	movs	r1, #5
 800226c:	5499      	strb	r1, [r3, r2]
	encoder_right.Ts = 5;
 800226e:	4bbd      	ldr	r3, [pc, #756]	; (8002564 <taskEncoder+0x314>)
 8002270:	22d0      	movs	r2, #208	; 0xd0
 8002272:	2105      	movs	r1, #5
 8002274:	5499      	strb	r1, [r3, r2]

	encoder_left.position=0;
 8002276:	4bba      	ldr	r3, [pc, #744]	; (8002560 <taskEncoder+0x310>)
 8002278:	2200      	movs	r2, #0
 800227a:	805a      	strh	r2, [r3, #2]
	encoder_right.position=0;
 800227c:	4bb9      	ldr	r3, [pc, #740]	; (8002564 <taskEncoder+0x314>)
 800227e:	2200      	movs	r2, #0
 8002280:	805a      	strh	r2, [r3, #2]


	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002282:	4bb9      	ldr	r3, [pc, #740]	; (8002568 <taskEncoder+0x318>)
 8002284:	213c      	movs	r1, #60	; 0x3c
 8002286:	0018      	movs	r0, r3
 8002288:	f005 f9dc 	bl	8007644 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800228c:	4bb7      	ldr	r3, [pc, #732]	; (800256c <taskEncoder+0x31c>)
 800228e:	213c      	movs	r1, #60	; 0x3c
 8002290:	0018      	movs	r0, r3
 8002292:	f005 f9d7 	bl	8007644 <HAL_TIM_Encoder_Start>
	int index = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
	for(;;){
		encoder_left.speed=0;
 800229a:	4bb1      	ldr	r3, [pc, #708]	; (8002560 <taskEncoder+0x310>)
 800229c:	2200      	movs	r2, #0
 800229e:	605a      	str	r2, [r3, #4]
		encoder_right.speed=0;
 80022a0:	4bb0      	ldr	r3, [pc, #704]	; (8002564 <taskEncoder+0x314>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
		encoder_left.countTIM = __HAL_TIM_GET_COUNTER(&htim1);
 80022a6:	4bb0      	ldr	r3, [pc, #704]	; (8002568 <taskEncoder+0x318>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	4bac      	ldr	r3, [pc, #688]	; (8002560 <taskEncoder+0x310>)
 80022b0:	801a      	strh	r2, [r3, #0]
		encoder_right.countTIM =__HAL_TIM_GET_COUNTER(&htim3);
 80022b2:	4bae      	ldr	r3, [pc, #696]	; (800256c <taskEncoder+0x31c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	4baa      	ldr	r3, [pc, #680]	; (8002564 <taskEncoder+0x314>)
 80022bc:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80022be:	4baa      	ldr	r3, [pc, #680]	; (8002568 <taskEncoder+0x318>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80022c6:	4ba9      	ldr	r3, [pc, #676]	; (800256c <taskEncoder+0x31c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
		if (encoder_left.countTIM<((TIM1->ARR)/2)){//recule
 80022ce:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <taskEncoder+0x310>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	5e9b      	ldrsh	r3, [r3, r2]
 80022d4:	001a      	movs	r2, r3
 80022d6:	4ba6      	ldr	r3, [pc, #664]	; (8002570 <taskEncoder+0x320>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	429a      	cmp	r2, r3
 80022de:	d300      	bcc.n	80022e2 <taskEncoder+0x92>
 80022e0:	e096      	b.n	8002410 <taskEncoder+0x1c0>
			encoder_left.tab_pos[index]=-1*encoder_left.countTIM;
 80022e2:	4b9f      	ldr	r3, [pc, #636]	; (8002560 <taskEncoder+0x310>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	5e9b      	ldrsh	r3, [r3, r2]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	425b      	negs	r3, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b219      	sxth	r1, r3
 80022f0:	4b9b      	ldr	r3, [pc, #620]	; (8002560 <taskEncoder+0x310>)
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	3204      	adds	r2, #4
 80022f6:	0052      	lsls	r2, r2, #1
 80022f8:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM-(TIM1->ARR);
 80022fa:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <taskEncoder+0x314>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b9b      	ldr	r3, [pc, #620]	; (8002570 <taskEncoder+0x320>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	b29b      	uxth	r3, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b29b      	uxth	r3, r3
 800230c:	b219      	sxth	r1, r3
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <taskEncoder+0x314>)
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	3204      	adds	r2, #4
 8002314:	0052      	lsls	r2, r2, #1
 8002316:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=-1*(encoder_left.countTIM/REVOLUTION)*2*PI*R/1000;
 8002318:	4b91      	ldr	r3, [pc, #580]	; (8002560 <taskEncoder+0x310>)
 800231a:	2202      	movs	r2, #2
 800231c:	5e9b      	ldrsh	r3, [r3, r2]
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff fe52 	bl	8001fc8 <__aeabi_i2d>
 8002324:	0004      	movs	r4, r0
 8002326:	000d      	movs	r5, r1
 8002328:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <taskEncoder+0x310>)
 800232a:	2200      	movs	r2, #0
 800232c:	5e9b      	ldrsh	r3, [r3, r2]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	0018      	movs	r0, r3
 8002332:	f7fd ff8f 	bl	8000254 <__divsi3>
 8002336:	0003      	movs	r3, r0
 8002338:	b21b      	sxth	r3, r3
 800233a:	001a      	movs	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	07db      	lsls	r3, r3, #31
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fe3f 	bl	8001fc8 <__aeabi_i2d>
 800234a:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <taskEncoder+0x324>)
 800234c:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <taskEncoder+0x328>)
 800234e:	f7fe ffe9 	bl	8001324 <__aeabi_dmul>
 8002352:	0002      	movs	r2, r0
 8002354:	000b      	movs	r3, r1
 8002356:	0010      	movs	r0, r2
 8002358:	0019      	movs	r1, r3
 800235a:	2200      	movs	r2, #0
 800235c:	4b87      	ldr	r3, [pc, #540]	; (800257c <taskEncoder+0x32c>)
 800235e:	f7fe ffe1 	bl	8001324 <__aeabi_dmul>
 8002362:	0002      	movs	r2, r0
 8002364:	000b      	movs	r3, r1
 8002366:	0010      	movs	r0, r2
 8002368:	0019      	movs	r1, r3
 800236a:	2200      	movs	r2, #0
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <taskEncoder+0x330>)
 800236e:	f7fe fbd7 	bl	8000b20 <__aeabi_ddiv>
 8002372:	0002      	movs	r2, r0
 8002374:	000b      	movs	r3, r1
 8002376:	0020      	movs	r0, r4
 8002378:	0029      	movs	r1, r5
 800237a:	f7fe f895 	bl	80004a8 <__aeabi_dadd>
 800237e:	0002      	movs	r2, r0
 8002380:	000b      	movs	r3, r1
 8002382:	0010      	movs	r0, r2
 8002384:	0019      	movs	r1, r3
 8002386:	f7ff fde9 	bl	8001f5c <__aeabi_d2iz>
 800238a:	0003      	movs	r3, r0
 800238c:	b21a      	sxth	r2, r3
 800238e:	4b74      	ldr	r3, [pc, #464]	; (8002560 <taskEncoder+0x310>)
 8002390:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM-(TIM1->ARR))/REVOLUTION*2*PI*R/1000;
 8002392:	4b74      	ldr	r3, [pc, #464]	; (8002564 <taskEncoder+0x314>)
 8002394:	2200      	movs	r2, #0
 8002396:	5e9b      	ldrsh	r3, [r3, r2]
 8002398:	001a      	movs	r2, r3
 800239a:	4b75      	ldr	r3, [pc, #468]	; (8002570 <taskEncoder+0x320>)
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd fecc 	bl	8000140 <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff fe3b 	bl	8002028 <__aeabi_ui2d>
 80023b2:	4a70      	ldr	r2, [pc, #448]	; (8002574 <taskEncoder+0x324>)
 80023b4:	4b70      	ldr	r3, [pc, #448]	; (8002578 <taskEncoder+0x328>)
 80023b6:	f7fe ffb5 	bl	8001324 <__aeabi_dmul>
 80023ba:	0002      	movs	r2, r0
 80023bc:	000b      	movs	r3, r1
 80023be:	0010      	movs	r0, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <taskEncoder+0x32c>)
 80023c6:	f7fe ffad 	bl	8001324 <__aeabi_dmul>
 80023ca:	0002      	movs	r2, r0
 80023cc:	000b      	movs	r3, r1
 80023ce:	0010      	movs	r0, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	2200      	movs	r2, #0
 80023d4:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <taskEncoder+0x330>)
 80023d6:	f7fe fba3 	bl	8000b20 <__aeabi_ddiv>
 80023da:	0002      	movs	r2, r0
 80023dc:	000b      	movs	r3, r1
 80023de:	0014      	movs	r4, r2
 80023e0:	001d      	movs	r5, r3
 80023e2:	4b60      	ldr	r3, [pc, #384]	; (8002564 <taskEncoder+0x314>)
 80023e4:	2202      	movs	r2, #2
 80023e6:	5e9b      	ldrsh	r3, [r3, r2]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff fded 	bl	8001fc8 <__aeabi_i2d>
 80023ee:	0002      	movs	r2, r0
 80023f0:	000b      	movs	r3, r1
 80023f2:	0020      	movs	r0, r4
 80023f4:	0029      	movs	r1, r5
 80023f6:	f7fe f857 	bl	80004a8 <__aeabi_dadd>
 80023fa:	0002      	movs	r2, r0
 80023fc:	000b      	movs	r3, r1
 80023fe:	0010      	movs	r0, r2
 8002400:	0019      	movs	r1, r3
 8002402:	f7ff fdab 	bl	8001f5c <__aeabi_d2iz>
 8002406:	0003      	movs	r3, r0
 8002408:	b21a      	sxth	r2, r3
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <taskEncoder+0x314>)
 800240c:	805a      	strh	r2, [r3, #2]
 800240e:	e08c      	b.n	800252a <taskEncoder+0x2da>
		}
		else{//avance
			encoder_left.tab_pos[index]=(TIM1->ARR)-encoder_left.countTIM;
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <taskEncoder+0x320>)
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b52      	ldr	r3, [pc, #328]	; (8002560 <taskEncoder+0x310>)
 8002418:	2100      	movs	r1, #0
 800241a:	5e5b      	ldrsh	r3, [r3, r1]
 800241c:	b29b      	uxth	r3, r3
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	b29b      	uxth	r3, r3
 8002422:	b219      	sxth	r1, r3
 8002424:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <taskEncoder+0x310>)
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	3204      	adds	r2, #4
 800242a:	0052      	lsls	r2, r2, #1
 800242c:	52d1      	strh	r1, [r2, r3]
			encoder_right.tab_pos[index]=encoder_right.countTIM;
 800242e:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <taskEncoder+0x314>)
 8002430:	2100      	movs	r1, #0
 8002432:	5e59      	ldrsh	r1, [r3, r1]
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <taskEncoder+0x314>)
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	3204      	adds	r2, #4
 800243a:	0052      	lsls	r2, r2, #1
 800243c:	52d1      	strh	r1, [r2, r3]

			encoder_left.position+=((TIM1->ARR)-encoder_left.countTIM)/REVOLUTION*2*PI*R/1000;
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <taskEncoder+0x320>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	4a47      	ldr	r2, [pc, #284]	; (8002560 <taskEncoder+0x310>)
 8002444:	2100      	movs	r1, #0
 8002446:	5e52      	ldrsh	r2, [r2, r1]
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	0018      	movs	r0, r3
 800244e:	f7fd fe77 	bl	8000140 <__udivsi3>
 8002452:	0003      	movs	r3, r0
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	0018      	movs	r0, r3
 8002458:	f7ff fde6 	bl	8002028 <__aeabi_ui2d>
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <taskEncoder+0x324>)
 800245e:	4b46      	ldr	r3, [pc, #280]	; (8002578 <taskEncoder+0x328>)
 8002460:	f7fe ff60 	bl	8001324 <__aeabi_dmul>
 8002464:	0002      	movs	r2, r0
 8002466:	000b      	movs	r3, r1
 8002468:	0010      	movs	r0, r2
 800246a:	0019      	movs	r1, r3
 800246c:	2200      	movs	r2, #0
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <taskEncoder+0x32c>)
 8002470:	f7fe ff58 	bl	8001324 <__aeabi_dmul>
 8002474:	0002      	movs	r2, r0
 8002476:	000b      	movs	r3, r1
 8002478:	0010      	movs	r0, r2
 800247a:	0019      	movs	r1, r3
 800247c:	2200      	movs	r2, #0
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <taskEncoder+0x330>)
 8002480:	f7fe fb4e 	bl	8000b20 <__aeabi_ddiv>
 8002484:	0002      	movs	r2, r0
 8002486:	000b      	movs	r3, r1
 8002488:	0014      	movs	r4, r2
 800248a:	001d      	movs	r5, r3
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <taskEncoder+0x310>)
 800248e:	2202      	movs	r2, #2
 8002490:	5e9b      	ldrsh	r3, [r3, r2]
 8002492:	0018      	movs	r0, r3
 8002494:	f7ff fd98 	bl	8001fc8 <__aeabi_i2d>
 8002498:	0002      	movs	r2, r0
 800249a:	000b      	movs	r3, r1
 800249c:	0020      	movs	r0, r4
 800249e:	0029      	movs	r1, r5
 80024a0:	f7fe f802 	bl	80004a8 <__aeabi_dadd>
 80024a4:	0002      	movs	r2, r0
 80024a6:	000b      	movs	r3, r1
 80024a8:	0010      	movs	r0, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	f7ff fd56 	bl	8001f5c <__aeabi_d2iz>
 80024b0:	0003      	movs	r3, r0
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <taskEncoder+0x310>)
 80024b6:	805a      	strh	r2, [r3, #2]
			encoder_right.position+=(encoder_right.countTIM/REVOLUTION)*2*PI*R/1000;
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <taskEncoder+0x314>)
 80024ba:	2202      	movs	r2, #2
 80024bc:	5e9b      	ldrsh	r3, [r3, r2]
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff fd82 	bl	8001fc8 <__aeabi_i2d>
 80024c4:	0004      	movs	r4, r0
 80024c6:	000d      	movs	r5, r1
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <taskEncoder+0x314>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	5e9b      	ldrsh	r3, [r3, r2]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fd febf 	bl	8000254 <__divsi3>
 80024d6:	0003      	movs	r3, r0
 80024d8:	b21b      	sxth	r3, r3
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff fd73 	bl	8001fc8 <__aeabi_i2d>
 80024e2:	4a24      	ldr	r2, [pc, #144]	; (8002574 <taskEncoder+0x324>)
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <taskEncoder+0x328>)
 80024e6:	f7fe ff1d 	bl	8001324 <__aeabi_dmul>
 80024ea:	0002      	movs	r2, r0
 80024ec:	000b      	movs	r3, r1
 80024ee:	0010      	movs	r0, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	2200      	movs	r2, #0
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <taskEncoder+0x32c>)
 80024f6:	f7fe ff15 	bl	8001324 <__aeabi_dmul>
 80024fa:	0002      	movs	r2, r0
 80024fc:	000b      	movs	r3, r1
 80024fe:	0010      	movs	r0, r2
 8002500:	0019      	movs	r1, r3
 8002502:	2200      	movs	r2, #0
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <taskEncoder+0x330>)
 8002506:	f7fe fb0b 	bl	8000b20 <__aeabi_ddiv>
 800250a:	0002      	movs	r2, r0
 800250c:	000b      	movs	r3, r1
 800250e:	0020      	movs	r0, r4
 8002510:	0029      	movs	r1, r5
 8002512:	f7fd ffc9 	bl	80004a8 <__aeabi_dadd>
 8002516:	0002      	movs	r2, r0
 8002518:	000b      	movs	r3, r1
 800251a:	0010      	movs	r0, r2
 800251c:	0019      	movs	r1, r3
 800251e:	f7ff fd1d 	bl	8001f5c <__aeabi_d2iz>
 8002522:	0003      	movs	r3, r0
 8002524:	b21a      	sxth	r2, r3
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <taskEncoder+0x314>)
 8002528:	805a      	strh	r2, [r3, #2]

		}
		index++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
		if(index==TAB_SIZE){
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d10b      	bne.n	800254e <taskEncoder+0x2fe>
			xTaskNotifyGive(h_encoder_print);
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <taskEncoder+0x334>)
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	2202      	movs	r2, #2
 800253e:	2100      	movs	r1, #0
 8002540:	f00e f9a2 	bl	8010888 <xTaskGenericNotify>
			vTaskSuspend(0);
 8002544:	2000      	movs	r0, #0
 8002546:	f00d fde5 	bl	8010114 <vTaskSuspend>
			index=0;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
		}
		vTaskDelay(encoder_left.Ts);
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <taskEncoder+0x310>)
 8002550:	22d0      	movs	r2, #208	; 0xd0
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	0018      	movs	r0, r3
 8002556:	f00d fdb7 	bl	80100c8 <vTaskDelay>
		encoder_left.speed=0;
 800255a:	e69e      	b.n	800229a <taskEncoder+0x4a>
 800255c:	08014428 	.word	0x08014428
 8002560:	200004e0 	.word	0x200004e0
 8002564:	200005b4 	.word	0x200005b4
 8002568:	200007bc 	.word	0x200007bc
 800256c:	20000808 	.word	0x20000808
 8002570:	40012c00 	.word	0x40012c00
 8002574:	f01b866e 	.word	0xf01b866e
 8002578:	400921f9 	.word	0x400921f9
 800257c:	40350000 	.word	0x40350000
 8002580:	408f4000 	.word	0x408f4000
 8002584:	200004dc 	.word	0x200004dc

08002588 <taskEncoderPrint>:
	}
}

void taskEncoderPrint(void *pPrint){
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
	printf("Tâche encodeur print créée\r\n");
 8002590:	4b69      	ldr	r3, [pc, #420]	; (8002738 <taskEncoderPrint+0x1b0>)
 8002592:	0018      	movs	r0, r3
 8002594:	f00f fbe4 	bl	8011d60 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002598:	2301      	movs	r3, #1
 800259a:	425b      	negs	r3, r3
 800259c:	0019      	movs	r1, r3
 800259e:	2001      	movs	r0, #1
 80025a0:	f00e f930 	bl	8010804 <ulTaskNotifyTake>
		for(int i=0;i<TAB_SIZE;i++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e012      	b.n	80025d0 <taskEncoderPrint+0x48>
			printf("l:%d  r:%d\r\n",encoder_left.tab_pos[i],encoder_right.tab_pos[i]);
 80025aa:	4b64      	ldr	r3, [pc, #400]	; (800273c <taskEncoderPrint+0x1b4>)
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	3204      	adds	r2, #4
 80025b0:	0052      	lsls	r2, r2, #1
 80025b2:	5ed3      	ldrsh	r3, [r2, r3]
 80025b4:	0019      	movs	r1, r3
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <taskEncoderPrint+0x1b8>)
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	3204      	adds	r2, #4
 80025bc:	0052      	lsls	r2, r2, #1
 80025be:	5ed3      	ldrsh	r3, [r2, r3]
 80025c0:	001a      	movs	r2, r3
 80025c2:	4b60      	ldr	r3, [pc, #384]	; (8002744 <taskEncoderPrint+0x1bc>)
 80025c4:	0018      	movs	r0, r3
 80025c6:	f00f fb3f 	bl	8011c48 <iprintf>
		for(int i=0;i<TAB_SIZE;i++){
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3301      	adds	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b63      	cmp	r3, #99	; 0x63
 80025d4:	dde9      	ble.n	80025aa <taskEncoderPrint+0x22>
		}
		printf("pos l:%d  pos r:%d\r\n",encoder_left.position,encoder_right.position);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <taskEncoderPrint+0x1b4>)
 80025d8:	2202      	movs	r2, #2
 80025da:	5e9b      	ldrsh	r3, [r3, r2]
 80025dc:	0019      	movs	r1, r3
 80025de:	4b58      	ldr	r3, [pc, #352]	; (8002740 <taskEncoderPrint+0x1b8>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	5e9b      	ldrsh	r3, [r3, r2]
 80025e4:	001a      	movs	r2, r3
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <taskEncoderPrint+0x1c0>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f00f fb2d 	bl	8011c48 <iprintf>
		printf("%f  %d",encoder_left.speed,encoder_left.tab_pos[TAB_SIZE-1]);
 80025ee:	4b53      	ldr	r3, [pc, #332]	; (800273c <taskEncoderPrint+0x1b4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	1c18      	adds	r0, r3, #0
 80025f4:	f7ff fd3e 	bl	8002074 <__aeabi_f2d>
 80025f8:	0002      	movs	r2, r0
 80025fa:	000b      	movs	r3, r1
 80025fc:	494f      	ldr	r1, [pc, #316]	; (800273c <taskEncoderPrint+0x1b4>)
 80025fe:	20ce      	movs	r0, #206	; 0xce
 8002600:	5e09      	ldrsh	r1, [r1, r0]
 8002602:	0008      	movs	r0, r1
 8002604:	4951      	ldr	r1, [pc, #324]	; (800274c <taskEncoderPrint+0x1c4>)
 8002606:	9000      	str	r0, [sp, #0]
 8002608:	0008      	movs	r0, r1
 800260a:	f00f fb1d 	bl	8011c48 <iprintf>
		encoder_left.speed=((encoder_left.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_left.Ts*1000); //speed en m/S
 800260e:	4b4b      	ldr	r3, [pc, #300]	; (800273c <taskEncoderPrint+0x1b4>)
 8002610:	22ce      	movs	r2, #206	; 0xce
 8002612:	5e9b      	ldrsh	r3, [r3, r2]
 8002614:	001a      	movs	r2, r3
 8002616:	0013      	movs	r3, r2
 8002618:	015b      	lsls	r3, r3, #5
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	189b      	adds	r3, r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	0018      	movs	r0, r3
 8002626:	f7fd fe15 	bl	8000254 <__divsi3>
 800262a:	0003      	movs	r3, r0
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fcca 	bl	8001fc8 <__aeabi_i2d>
 8002634:	4a46      	ldr	r2, [pc, #280]	; (8002750 <taskEncoderPrint+0x1c8>)
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <taskEncoderPrint+0x1cc>)
 8002638:	f7fe fe74 	bl	8001324 <__aeabi_dmul>
 800263c:	0002      	movs	r2, r0
 800263e:	000b      	movs	r3, r1
 8002640:	0010      	movs	r0, r2
 8002642:	0019      	movs	r1, r3
 8002644:	2200      	movs	r2, #0
 8002646:	4b44      	ldr	r3, [pc, #272]	; (8002758 <taskEncoderPrint+0x1d0>)
 8002648:	f7fe fe6c 	bl	8001324 <__aeabi_dmul>
 800264c:	0002      	movs	r2, r0
 800264e:	000b      	movs	r3, r1
 8002650:	0014      	movs	r4, r2
 8002652:	001d      	movs	r5, r3
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <taskEncoderPrint+0x1b4>)
 8002656:	22d0      	movs	r2, #208	; 0xd0
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	001a      	movs	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	189b      	adds	r3, r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff fcad 	bl	8001fc8 <__aeabi_i2d>
 800266e:	0002      	movs	r2, r0
 8002670:	000b      	movs	r3, r1
 8002672:	0020      	movs	r0, r4
 8002674:	0029      	movs	r1, r5
 8002676:	f7fe fa53 	bl	8000b20 <__aeabi_ddiv>
 800267a:	0002      	movs	r2, r0
 800267c:	000b      	movs	r3, r1
 800267e:	0010      	movs	r0, r2
 8002680:	0019      	movs	r1, r3
 8002682:	f7ff fd3f 	bl	8002104 <__aeabi_d2f>
 8002686:	1c02      	adds	r2, r0, #0
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <taskEncoderPrint+0x1b4>)
 800268a:	605a      	str	r2, [r3, #4]
		encoder_right.speed=((encoder_right.tab_pos[TAB_SIZE-1]*1000/REVOLUTION)*2*PI*R)/(encoder_right.Ts*1000);
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <taskEncoderPrint+0x1b8>)
 800268e:	22ce      	movs	r2, #206	; 0xce
 8002690:	5e9b      	ldrsh	r3, [r3, r2]
 8002692:	001a      	movs	r2, r3
 8002694:	0013      	movs	r3, r2
 8002696:	015b      	lsls	r3, r3, #5
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	189b      	adds	r3, r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7fd fdd6 	bl	8000254 <__divsi3>
 80026a8:	0003      	movs	r3, r0
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff fc8b 	bl	8001fc8 <__aeabi_i2d>
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <taskEncoderPrint+0x1c8>)
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <taskEncoderPrint+0x1cc>)
 80026b6:	f7fe fe35 	bl	8001324 <__aeabi_dmul>
 80026ba:	0002      	movs	r2, r0
 80026bc:	000b      	movs	r3, r1
 80026be:	0010      	movs	r0, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <taskEncoderPrint+0x1d0>)
 80026c6:	f7fe fe2d 	bl	8001324 <__aeabi_dmul>
 80026ca:	0002      	movs	r2, r0
 80026cc:	000b      	movs	r3, r1
 80026ce:	0014      	movs	r4, r2
 80026d0:	001d      	movs	r5, r3
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <taskEncoderPrint+0x1b8>)
 80026d4:	22d0      	movs	r2, #208	; 0xd0
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	001a      	movs	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	015b      	lsls	r3, r3, #5
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7ff fc6e 	bl	8001fc8 <__aeabi_i2d>
 80026ec:	0002      	movs	r2, r0
 80026ee:	000b      	movs	r3, r1
 80026f0:	0020      	movs	r0, r4
 80026f2:	0029      	movs	r1, r5
 80026f4:	f7fe fa14 	bl	8000b20 <__aeabi_ddiv>
 80026f8:	0002      	movs	r2, r0
 80026fa:	000b      	movs	r3, r1
 80026fc:	0010      	movs	r0, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	f7ff fd00 	bl	8002104 <__aeabi_d2f>
 8002704:	1c02      	adds	r2, r0, #0
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <taskEncoderPrint+0x1b8>)
 8002708:	605a      	str	r2, [r3, #4]
		printf("speed l:%f  speed r:%f\r\n",encoder_left.speed,encoder_right.speed);
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <taskEncoderPrint+0x1b4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	1c18      	adds	r0, r3, #0
 8002710:	f7ff fcb0 	bl	8002074 <__aeabi_f2d>
 8002714:	0004      	movs	r4, r0
 8002716:	000d      	movs	r5, r1
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <taskEncoderPrint+0x1b8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	1c18      	adds	r0, r3, #0
 800271e:	f7ff fca9 	bl	8002074 <__aeabi_f2d>
 8002722:	0002      	movs	r2, r0
 8002724:	000b      	movs	r3, r1
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <taskEncoderPrint+0x1d4>)
 8002728:	9200      	str	r2, [sp, #0]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	0022      	movs	r2, r4
 800272e:	002b      	movs	r3, r5
 8002730:	0008      	movs	r0, r1
 8002732:	f00f fa89 	bl	8011c48 <iprintf>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002736:	e72f      	b.n	8002598 <taskEncoderPrint+0x10>
 8002738:	08014444 	.word	0x08014444
 800273c:	200004e0 	.word	0x200004e0
 8002740:	200005b4 	.word	0x200005b4
 8002744:	08014464 	.word	0x08014464
 8002748:	08014474 	.word	0x08014474
 800274c:	0801448c 	.word	0x0801448c
 8002750:	f01b866e 	.word	0xf01b866e
 8002754:	400921f9 	.word	0x400921f9
 8002758:	40350000 	.word	0x40350000
 800275c:	08014494 	.word	0x08014494

08002760 <avance>:
	}
	return 0;
}
 */

int avance(int vitesse){
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <avance+0x4c>)
 800276a:	2100      	movs	r1, #0
 800276c:	0018      	movs	r0, r3
 800276e:	f005 fecd 	bl	800850c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <avance+0x50>)
 8002774:	2100      	movs	r1, #0
 8002776:	0018      	movs	r0, r3
 8002778:	f004 fdd0 	bl	800731c <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <avance+0x4c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <avance+0x50>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <avance+0x4c>)
 800278e:	2100      	movs	r1, #0
 8002790:	0018      	movs	r0, r3
 8002792:	f004 fcdf 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <avance+0x50>)
 8002798:	2100      	movs	r1, #0
 800279a:	0018      	movs	r0, r3
 800279c:	f005 fe18 	bl	80083d0 <HAL_TIMEx_PWMN_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	200008a0 	.word	0x200008a0
 80027b0:	200008ec 	.word	0x200008ec

080027b4 <recule>:

int recule(int vitesse){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <recule+0x4c>)
 80027be:	2100      	movs	r1, #0
 80027c0:	0018      	movs	r0, r3
 80027c2:	f004 fdab 	bl	800731c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <recule+0x50>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	0018      	movs	r0, r3
 80027cc:	f005 fe9e 	bl	800850c <HAL_TIMEx_PWMN_Stop>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <recule+0x4c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <recule+0x50>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <recule+0x4c>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	0018      	movs	r0, r3
 80027e6:	f005 fdf3 	bl	80083d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <recule+0x50>)
 80027ec:	2100      	movs	r1, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	f004 fcb0 	bl	8007154 <HAL_TIM_PWM_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	200008a0 	.word	0x200008a0
 8002804:	200008ec 	.word	0x200008ec

08002808 <stop>:

int stop(void){
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <stop+0x34>)
 800280e:	2100      	movs	r1, #0
 8002810:	0018      	movs	r0, r3
 8002812:	f004 fd83 	bl	800731c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <stop+0x38>)
 8002818:	2100      	movs	r1, #0
 800281a:	0018      	movs	r0, r3
 800281c:	f005 fe76 	bl	800850c <HAL_TIMEx_PWMN_Stop>

	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <stop+0x34>)
 8002822:	2100      	movs	r1, #0
 8002824:	0018      	movs	r0, r3
 8002826:	f005 fe71 	bl	800850c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <stop+0x38>)
 800282c:	2100      	movs	r1, #0
 800282e:	0018      	movs	r0, r3
 8002830:	f004 fd74 	bl	800731c <HAL_TIM_PWM_Stop>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200008a0 	.word	0x200008a0
 8002840:	200008ec 	.word	0x200008ec

08002844 <gauche>:

int gauche(int vitesse){
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	//Le moteur droit avance
	HAL_TIMEx_PWMN_Stop(&htim16, TIM_CHANNEL_1);
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <gauche+0x4c>)
 800284e:	2100      	movs	r1, #0
 8002850:	0018      	movs	r0, r3
 8002852:	f005 fe5b 	bl	800850c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <gauche+0x4c>)
 8002858:	2100      	movs	r1, #0
 800285a:	0018      	movs	r0, r3
 800285c:	f004 fc7a 	bl	8007154 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <gauche+0x4c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <gauche+0x50>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche recule (voir si on doit plutôt l'arrêter)
	HAL_TIMEx_PWMN_Stop(&htim17, TIM_CHANNEL_1);
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <gauche+0x50>)
 8002872:	2100      	movs	r1, #0
 8002874:	0018      	movs	r0, r3
 8002876:	f005 fe49 	bl	800850c <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <gauche+0x50>)
 800287c:	2100      	movs	r1, #0
 800287e:	0018      	movs	r0, r3
 8002880:	f004 fc68 	bl	8007154 <HAL_TIM_PWM_Start>
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	200008a0 	.word	0x200008a0
 8002894:	200008ec 	.word	0x200008ec

08002898 <droite>:

int droite(int vitesse){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

	//Le moteur droit recule (voir si on doit plutôt l'arrêter)
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <droite+0x4c>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	0018      	movs	r0, r3
 80028a6:	f004 fd39 	bl	800731c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <droite+0x4c>)
 80028ac:	2100      	movs	r1, #0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f005 fd8e 	bl	80083d0 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE(&htim16,TIM_CHANNEL_1,vitesse);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <droite+0x4c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim17,TIM_CHANNEL_1,vitesse);
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <droite+0x50>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34

	//Le moteur gauche avance
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <droite+0x50>)
 80028c6:	2100      	movs	r1, #0
 80028c8:	0018      	movs	r0, r3
 80028ca:	f004 fd27 	bl	800731c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <droite+0x50>)
 80028d0:	2100      	movs	r1, #0
 80028d2:	0018      	movs	r0, r3
 80028d4:	f005 fd7c 	bl	80083d0 <HAL_TIMEx_PWMN_Start>

	//Appel taskMotor
	//vTaskSuspend(h_motor);
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	return 0;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b002      	add	sp, #8
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	200008a0 	.word	0x200008a0
 80028e8:	200008ec 	.word	0x200008ec

080028ec <taskBordure>:

void taskBordure(void *pMotor){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	printf("Tâche bordure créée\r\n");
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <taskBordure+0xac>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f00f fa32 	bl	8011d60 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80028fc:	2301      	movs	r3, #1
 80028fe:	425b      	negs	r3, r3
 8002900:	0019      	movs	r1, r3
 8002902:	2001      	movs	r0, #1
 8002904:	f00d ff7e 	bl	8010804 <ulTaskNotifyTake>
		//vTaskSuspend(h_tof);
		vTaskSuspend(h_recherche);
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <taskBordure+0xb0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f00d fc01 	bl	8010114 <vTaskSuspend>
		vTaskSuspend(h_trouve);
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <taskBordure+0xb4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0018      	movs	r0, r3
 8002918:	f00d fbfc 	bl	8010114 <vTaskSuspend>
		//vTaskSuspend(h_attrape);
		printf("Je suis sur une bordure");
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <taskBordure+0xb8>)
 800291e:	0018      	movs	r0, r3
 8002920:	f00f f992 	bl	8011c48 <iprintf>
		//((h_motor_t *)pMotor)->cmd = 'r';
		//((h_motor_t *)pMotor)->speed = 300;
		//xTaskNotifyGive(h_motor);
		vTaskDelay(3);
 8002924:	2003      	movs	r0, #3
 8002926:	f00d fbcf 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='r';
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <taskBordure+0xbc>)
 800292c:	2272      	movs	r2, #114	; 0x72
 800292e:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <taskBordure+0xc0>)
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	2202      	movs	r2, #2
 8002938:	2100      	movs	r1, #0
 800293a:	f00d ffa5 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(400);
 800293e:	23c8      	movs	r3, #200	; 0xc8
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	0018      	movs	r0, r3
 8002944:	f00d fbc0 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='d';
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <taskBordure+0xbc>)
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <taskBordure+0xc0>)
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	2202      	movs	r2, #2
 8002956:	2100      	movs	r1, #0
 8002958:	f00d ff96 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(300);
 800295c:	2396      	movs	r3, #150	; 0x96
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	0018      	movs	r0, r3
 8002962:	f00d fbb1 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='a';
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <taskBordure+0xbc>)
 8002968:	2261      	movs	r2, #97	; 0x61
 800296a:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <taskBordure+0xc0>)
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	2202      	movs	r2, #2
 8002974:	2100      	movs	r1, #0
 8002976:	f00d ff87 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 800297a:	20c8      	movs	r0, #200	; 0xc8
 800297c:	f00d fba4 	bl	80100c8 <vTaskDelay>
		//vTaskResume(h_tof);
		vTaskResume(h_recherche);
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <taskBordure+0xb0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	f00d fc51 	bl	801022c <vTaskResume>
		vTaskResume(h_trouve);
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <taskBordure+0xb4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0018      	movs	r0, r3
 8002990:	f00d fc4c 	bl	801022c <vTaskResume>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002994:	e7b2      	b.n	80028fc <taskBordure+0x10>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	08014614 	.word	0x08014614
 800299c:	20000694 	.word	0x20000694
 80029a0:	2000069c 	.word	0x2000069c
 80029a4:	0801462c 	.word	0x0801462c
 80029a8:	2000068c 	.word	0x2000068c
 80029ac:	20000688 	.word	0x20000688

080029b0 <taskRecherche>:

}


//La tache recherche fonctionne mal
void taskRecherche(void *pMotor){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	printf("Tâche recherche créée\r\n");
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <taskRecherche+0xc0>)
 80029ba:	0018      	movs	r0, r3
 80029bc:	f00f f9d0 	bl	8011d60 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80029c0:	2301      	movs	r3, #1
 80029c2:	425b      	negs	r3, r3
 80029c4:	0019      	movs	r1, r3
 80029c6:	2001      	movs	r0, #1
 80029c8:	f00d ff1c 	bl	8010804 <ulTaskNotifyTake>
		vTaskSuspend(h_trouve);
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <taskRecherche+0xc4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f00d fb9f 	bl	8010114 <vTaskSuspend>
		vTaskDelay(3);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f00d fb76 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='a';
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <taskRecherche+0xc8>)
 80029de:	2261      	movs	r2, #97	; 0x61
 80029e0:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <taskRecherche+0xcc>)
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	2202      	movs	r2, #2
 80029ea:	2100      	movs	r1, #0
 80029ec:	f00d ff4c 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(400);
 80029f0:	23c8      	movs	r3, #200	; 0xc8
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	0018      	movs	r0, r3
 80029f6:	f00d fb67 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='d';
 80029fa:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <taskRecherche+0xc8>)
 80029fc:	2264      	movs	r2, #100	; 0x64
 80029fe:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <taskRecherche+0xcc>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	2202      	movs	r2, #2
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f00d ff3d 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002a0e:	20c8      	movs	r0, #200	; 0xc8
 8002a10:	f00d fb5a 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='a';
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <taskRecherche+0xc8>)
 8002a16:	2261      	movs	r2, #97	; 0x61
 8002a18:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <taskRecherche+0xcc>)
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2202      	movs	r2, #2
 8002a22:	2100      	movs	r1, #0
 8002a24:	f00d ff30 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002a28:	20c8      	movs	r0, #200	; 0xc8
 8002a2a:	f00d fb4d 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='g';
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <taskRecherche+0xc8>)
 8002a30:	2267      	movs	r2, #103	; 0x67
 8002a32:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <taskRecherche+0xcc>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f00d ff23 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002a42:	20c8      	movs	r0, #200	; 0xc8
 8002a44:	f00d fb40 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='s';
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <taskRecherche+0xc8>)
 8002a4a:	2273      	movs	r2, #115	; 0x73
 8002a4c:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <taskRecherche+0xcc>)
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	2202      	movs	r2, #2
 8002a56:	2100      	movs	r1, #0
 8002a58:	f00d ff16 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002a5c:	20c8      	movs	r0, #200	; 0xc8
 8002a5e:	f00d fb33 	bl	80100c8 <vTaskDelay>
		vTaskResume(h_trouve);
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <taskRecherche+0xc4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f00d fbe0 	bl	801022c <vTaskResume>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002a6c:	e7a8      	b.n	80029c0 <taskRecherche+0x10>
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	08014644 	.word	0x08014644
 8002a74:	2000069c 	.word	0x2000069c
 8002a78:	2000068c 	.word	0x2000068c
 8002a7c:	20000688 	.word	0x20000688

08002a80 <taskTrouve>:
	}
}


void taskTrouve(void *pMotor){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	printf("Tâche trouve créée\r\n");
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <taskTrouve+0x70>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f00f f968 	bl	8011d60 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002a90:	2301      	movs	r3, #1
 8002a92:	425b      	negs	r3, r3
 8002a94:	0019      	movs	r1, r3
 8002a96:	2001      	movs	r0, #1
 8002a98:	f00d feb4 	bl	8010804 <ulTaskNotifyTake>
		vTaskSuspend(h_recherche);
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <taskTrouve+0x74>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f00d fb37 	bl	8010114 <vTaskSuspend>
		h_cmd_motor.cmd='s';
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <taskTrouve+0x78>)
 8002aa8:	2273      	movs	r2, #115	; 0x73
 8002aaa:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <taskTrouve+0x7c>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f00d fee7 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002aba:	20c8      	movs	r0, #200	; 0xc8
 8002abc:	f00d fb04 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='a';
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <taskTrouve+0x78>)
 8002ac2:	2261      	movs	r2, #97	; 0x61
 8002ac4:	701a      	strb	r2, [r3, #0]
		h_cmd_motor.speed=300;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <taskTrouve+0x78>)
 8002ac8:	2296      	movs	r2, #150	; 0x96
 8002aca:	0052      	lsls	r2, r2, #1
 8002acc:	805a      	strh	r2, [r3, #2]
		xTaskNotifyGive(h_motor);
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <taskTrouve+0x7c>)
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f00d fed6 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002adc:	20c8      	movs	r0, #200	; 0xc8
 8002ade:	f00d faf3 	bl	80100c8 <vTaskDelay>
		vTaskResume(h_recherche);
 8002ae2:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <taskTrouve+0x74>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f00d fba0 	bl	801022c <vTaskResume>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002aec:	e7d0      	b.n	8002a90 <taskTrouve+0x10>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	08014660 	.word	0x08014660
 8002af4:	20000694 	.word	0x20000694
 8002af8:	2000068c 	.word	0x2000068c
 8002afc:	20000688 	.word	0x20000688

08002b00 <taskAttrape>:
	}
}

void taskAttrape(void *pMotor){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	printf("Tâche attrape créée\r\n");
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <taskAttrape+0x64>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f00f f928 	bl	8011d60 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002b10:	2301      	movs	r3, #1
 8002b12:	425b      	negs	r3, r3
 8002b14:	0019      	movs	r1, r3
 8002b16:	2001      	movs	r0, #1
 8002b18:	f00d fe74 	bl	8010804 <ulTaskNotifyTake>
		vTaskSuspend(h_recherche);
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <taskAttrape+0x68>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f00d faf7 	bl	8010114 <vTaskSuspend>
		h_cmd_servomotor.cmd='c';
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <taskAttrape+0x6c>)
 8002b28:	2263      	movs	r2, #99	; 0x63
 8002b2a:	701a      	strb	r2, [r3, #0]
		h_cmd_servomotor.speed=200;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <taskAttrape+0x6c>)
 8002b2e:	22c8      	movs	r2, #200	; 0xc8
 8002b30:	805a      	strh	r2, [r3, #2]
		xTaskNotifyGive(h_servomotor);
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <taskAttrape+0x70>)
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	2202      	movs	r2, #2
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f00d fea4 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b40:	20c8      	movs	r0, #200	; 0xc8
 8002b42:	f00d fac1 	bl	80100c8 <vTaskDelay>
		h_cmd_motor.cmd='s';
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <taskAttrape+0x74>)
 8002b48:	2273      	movs	r2, #115	; 0x73
 8002b4a:	701a      	strb	r2, [r3, #0]
		xTaskNotifyGive(h_motor);
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <taskAttrape+0x78>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	2202      	movs	r2, #2
 8002b54:	2100      	movs	r1, #0
 8002b56:	f00d fe97 	bl	8010888 <xTaskGenericNotify>
		vTaskDelay(200);
 8002b5a:	20c8      	movs	r0, #200	; 0xc8
 8002b5c:	f00d fab4 	bl	80100c8 <vTaskDelay>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002b60:	e7d6      	b.n	8002b10 <taskAttrape+0x10>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	08014678 	.word	0x08014678
 8002b68:	20000694 	.word	0x20000694
 8002b6c:	200006a4 	.word	0x200006a4
 8002b70:	200006a0 	.word	0x200006a0
 8002b74:	2000068c 	.word	0x2000068c
 8002b78:	20000688 	.word	0x20000688

08002b7c <taskMotor>:





void taskMotor(void *pMotor){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	printf("Tâche moteur créée\r\n");
 8002b84:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <taskMotor+0x7c>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f00f f8ea 	bl	8011d60 <puts>
	//ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
	printf("Notif taken");
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <taskMotor+0x80>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f00f f85a 	bl	8011c48 <iprintf>
	//vTaskSuspend(0);
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002b94:	2301      	movs	r3, #1
 8002b96:	425b      	negs	r3, r3
 8002b98:	0019      	movs	r1, r3
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f00d fe32 	bl	8010804 <ulTaskNotifyTake>
		if(((h_motor_t *)pMotor)->cmd=='a'){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b61      	cmp	r3, #97	; 0x61
 8002ba6:	d104      	bne.n	8002bb2 <taskMotor+0x36>
			avance(((h_motor_t *)pMotor)->speed);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	885b      	ldrh	r3, [r3, #2]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff fdd7 	bl	8002760 <avance>
		}
		if(((h_motor_t *)pMotor)->cmd=='r'){
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b72      	cmp	r3, #114	; 0x72
 8002bb8:	d104      	bne.n	8002bc4 <taskMotor+0x48>
			recule(((h_motor_t *)pMotor)->speed);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	885b      	ldrh	r3, [r3, #2]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fdf8 	bl	80027b4 <recule>
		}
		if(((h_motor_t *)pMotor)->cmd=='s'){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b73      	cmp	r3, #115	; 0x73
 8002bca:	d101      	bne.n	8002bd0 <taskMotor+0x54>
			stop();
 8002bcc:	f7ff fe1c 	bl	8002808 <stop>
		}
		if(((h_motor_t *)pMotor)->cmd=='g'){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b67      	cmp	r3, #103	; 0x67
 8002bd6:	d104      	bne.n	8002be2 <taskMotor+0x66>
			gauche(((h_motor_t *)pMotor)->speed);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	885b      	ldrh	r3, [r3, #2]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fe31 	bl	8002844 <gauche>
		}
		if(((h_motor_t *)pMotor)->cmd=='d'){
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d1d4      	bne.n	8002b94 <taskMotor+0x18>
			droite(((h_motor_t *)pMotor)->speed);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	885b      	ldrh	r3, [r3, #2]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff fe52 	bl	8002898 <droite>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002bf4:	e7ce      	b.n	8002b94 <taskMotor+0x18>
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	08014690 	.word	0x08014690
 8002bfc:	080146a8 	.word	0x080146a8

08002c00 <taskServoMotor>:
	}

	return 0;
}

void taskServoMotor(void *pServoMotor){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	printf("Tâche servomoteur créée\r\n");
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <taskServoMotor+0x3c>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f00f f8a8 	bl	8011d60 <puts>
	//speed(200);
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002c10:	2301      	movs	r3, #1
 8002c12:	425b      	negs	r3, r3
 8002c14:	0019      	movs	r1, r3
 8002c16:	2001      	movs	r0, #1
 8002c18:	f00d fdf4 	bl	8010804 <ulTaskNotifyTake>
		speed(200);
 8002c1c:	20c8      	movs	r0, #200	; 0xc8
 8002c1e:	f000 f96b 	bl	8002ef8 <speed>
		if(((h_servomotor_t *)pServoMotor)->cmd=='o'){
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b6f      	cmp	r3, #111	; 0x6f
 8002c28:	d101      	bne.n	8002c2e <taskServoMotor+0x2e>
			//speed(((h_servomotor_t *)pServoMotor)->speed);
			//vTaskDelay(10);
			open();
 8002c2a:	f000 f8f1 	bl	8002e10 <open>
		}
		if(((h_servomotor_t *)pServoMotor)->cmd=='c'){
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b63      	cmp	r3, #99	; 0x63
 8002c34:	d1ec      	bne.n	8002c10 <taskServoMotor+0x10>
			//speed(((h_servomotor_t *)pServoMotor)->speed);
			//vTaskDelay(10);
			//vTaskSuspend(h_recherche);
			//vTaskSuspend(h_tof);
			close();
 8002c36:	f000 f877 	bl	8002d28 <close>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002c3a:	e7e9      	b.n	8002c10 <taskServoMotor+0x10>
 8002c3c:	08014724 	.word	0x08014724

08002c40 <update_crc>:
unsigned char incomingByte = 0x00;   // for incoming serial data

extern TaskHandle_t h_servomotor;

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	4c33      	ldr	r4, [pc, #204]	; (8002d10 <update_crc+0xd0>)
 8002c44:	44a5      	add	sp, r4
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <update_crc+0xd4>)
 8002c4e:	2484      	movs	r4, #132	; 0x84
 8002c50:	00a4      	lsls	r4, r4, #2
 8002c52:	191b      	adds	r3, r3, r4
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	1c02      	adds	r2, r0, #0
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <update_crc+0xd8>)
 8002c5c:	0020      	movs	r0, r4
 8002c5e:	181b      	adds	r3, r3, r0
 8002c60:	19db      	adds	r3, r3, r7
 8002c62:	1c0a      	adds	r2, r1, #0
 8002c64:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <update_crc+0xdc>)
 8002c68:	181b      	adds	r3, r3, r0
 8002c6a:	19da      	adds	r2, r3, r7
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <update_crc+0xe0>)
 8002c6e:	0010      	movs	r0, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	001a      	movs	r2, r3
 8002c78:	f00e fb66 	bl	8011348 <memcpy>
			0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};
	for(j = 0; j < data_blk_size; j++)
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <update_crc+0xe4>)
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	e02f      	b.n	8002ce6 <update_crc+0xa6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <update_crc+0xd4>)
 8002c88:	2084      	movs	r0, #132	; 0x84
 8002c8a:	0080      	lsls	r0, r0, #2
 8002c8c:	181b      	adds	r3, r3, r0
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	4c23      	ldr	r4, [pc, #140]	; (8002d24 <update_crc+0xe4>)
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	18cb      	adds	r3, r1, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4053      	eors	r3, r2
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	2583      	movs	r5, #131	; 0x83
 8002caa:	00ad      	lsls	r5, r5, #2
 8002cac:	197b      	adds	r3, r7, r5
 8002cae:	21ff      	movs	r1, #255	; 0xff
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <update_crc+0xd4>)
 8002cb6:	181b      	adds	r3, r3, r0
 8002cb8:	19db      	adds	r3, r3, r7
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	197b      	adds	r3, r7, r5
 8002cc2:	8819      	ldrh	r1, [r3, #0]
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <update_crc+0xdc>)
 8002cc6:	181b      	adds	r3, r3, r0
 8002cc8:	19db      	adds	r3, r3, r7
 8002cca:	0049      	lsls	r1, r1, #1
 8002ccc:	5acb      	ldrh	r3, [r1, r3]
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	4053      	eors	r3, r2
 8002cd2:	b21a      	sxth	r2, r3
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <update_crc+0xd4>)
 8002cd6:	181b      	adds	r3, r3, r0
 8002cd8:	19db      	adds	r3, r3, r7
 8002cda:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	3201      	adds	r2, #1
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <update_crc+0xe4>)
 8002ce8:	18fa      	adds	r2, r7, r3
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <update_crc+0xd8>)
 8002cec:	2184      	movs	r1, #132	; 0x84
 8002cee:	0089      	lsls	r1, r1, #2
 8002cf0:	185b      	adds	r3, r3, r1
 8002cf2:	19db      	adds	r3, r3, r7
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3c4      	bcc.n	8002c86 <update_crc+0x46>
	}
	return crc_accum;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <update_crc+0xd4>)
 8002cfe:	185b      	adds	r3, r3, r1
 8002d00:	19db      	adds	r3, r3, r7
 8002d02:	881b      	ldrh	r3, [r3, #0]
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	2384      	movs	r3, #132	; 0x84
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	449d      	add	sp, r3
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d10:	fffffdf0 	.word	0xfffffdf0
 8002d14:	fffffdf6 	.word	0xfffffdf6
 8002d18:	fffffdf4 	.word	0xfffffdf4
 8002d1c:	fffffdfc 	.word	0xfffffdfc
 8002d20:	08014740 	.word	0x08014740
 8002d24:	0000020e 	.word	0x0000020e

08002d28 <close>:
		HAL_Delay(1000);
	}

}

void close(){
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002d2e:	201f      	movs	r0, #31
 8002d30:	183b      	adds	r3, r7, r0
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002d36:	241e      	movs	r4, #30
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
	//WRITE MOTOR TO POSITION 0x02C (300/1023),
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002d3e:	2518      	movs	r5, #24
 8002d40:	197b      	adds	r3, r7, r5
 8002d42:	2207      	movs	r2, #7
 8002d44:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x5E, 0x01};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002d46:	2114      	movs	r1, #20
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <close+0xe0>)
 8002d4c:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	22ff      	movs	r2, #255	; 0xff
 8002d58:	705a      	strb	r2, [r3, #1]
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	22fd      	movs	r2, #253	; 0xfd
 8002d5e:	709a      	strb	r2, [r3, #2]
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	70da      	strb	r2, [r3, #3]
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	22fe      	movs	r2, #254	; 0xfe
 8002d6a:	711a      	strb	r2, [r3, #4]
 8002d6c:	197b      	adds	r3, r7, r5
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	715a      	strb	r2, [r3, #5]
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	785a      	ldrb	r2, [r3, #1]
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	719a      	strb	r2, [r3, #6]
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2203      	movs	r2, #3
 8002d80:	71da      	strb	r2, [r3, #7]
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	721a      	strb	r2, [r3, #8]
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	785a      	ldrb	r2, [r3, #1]
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	725a      	strb	r2, [r3, #9]
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	789a      	ldrb	r2, [r3, #2]
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	729a      	strb	r2, [r3, #10]
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	78da      	ldrb	r2, [r3, #3]
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	72da      	strb	r2, [r3, #11]
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	0005      	movs	r5, r0
 8002da6:	183a      	adds	r2, r7, r0
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	731a      	strb	r2, [r3, #12]
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	0026      	movs	r6, r4
 8002db0:	193a      	adds	r2, r7, r4
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 8002db6:	211c      	movs	r1, #28
 8002db8:	187c      	adds	r4, r7, r1
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	220c      	movs	r2, #12
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7ff ff3d 	bl	8002c40 <update_crc>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002dca:	0028      	movs	r0, r5
 8002dcc:	183b      	adds	r3, r7, r0
 8002dce:	211c      	movs	r1, #28
 8002dd0:	187a      	adds	r2, r7, r1
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	19bb      	adds	r3, r7, r6
 8002de0:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	183a      	adds	r2, r7, r0
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	19ba      	adds	r2, r7, r6
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8002df2:	23fa      	movs	r3, #250	; 0xfa
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	1d39      	adds	r1, r7, #4
 8002df8:	4804      	ldr	r0, [pc, #16]	; (8002e0c <close+0xe4>)
 8002dfa:	220e      	movs	r2, #14
 8002dfc:	f005 fdc8 	bl	8008990 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b009      	add	sp, #36	; 0x24
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	015e001e 	.word	0x015e001e
 8002e0c:	200009cc 	.word	0x200009cc

08002e10 <open>:
void open(){
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002e16:	201f      	movs	r0, #31
 8002e18:	183b      	adds	r3, r7, r0
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002e1e:	241e      	movs	r4, #30
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002e26:	2518      	movs	r5, #24
 8002e28:	197b      	adds	r3, r7, r5
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	801a      	strh	r2, [r3, #0]
	//LEN_MOT[0]=NB_param +3
	//faire attention au courant max que l'on autorise (370mA)
	//pour avoir la rotation max il suffit de mettre para[2]=0xFF et para[3]=0x03
	unsigned char param_mot[4]={0x1E, 0x00, 0x64, 0x00};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002e2e:	2114      	movs	r1, #20
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <open+0xe0>)
 8002e34:	601a      	str	r2, [r3, #0]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	705a      	strb	r2, [r3, #1]
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	22fd      	movs	r2, #253	; 0xfd
 8002e46:	709a      	strb	r2, [r3, #2]
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	70da      	strb	r2, [r3, #3]
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	22fe      	movs	r2, #254	; 0xfe
 8002e52:	711a      	strb	r2, [r3, #4]
 8002e54:	197b      	adds	r3, r7, r5
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	715a      	strb	r2, [r3, #5]
 8002e5c:	197b      	adds	r3, r7, r5
 8002e5e:	785a      	ldrb	r2, [r3, #1]
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	719a      	strb	r2, [r3, #6]
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2203      	movs	r2, #3
 8002e68:	71da      	strb	r2, [r3, #7]
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	721a      	strb	r2, [r3, #8]
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	785a      	ldrb	r2, [r3, #1]
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	725a      	strb	r2, [r3, #9]
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	789a      	ldrb	r2, [r3, #2]
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	729a      	strb	r2, [r3, #10]
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	78da      	ldrb	r2, [r3, #3]
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	72da      	strb	r2, [r3, #11]
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	0005      	movs	r5, r0
 8002e8e:	183a      	adds	r2, r7, r0
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	731a      	strb	r2, [r3, #12]
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	0026      	movs	r6, r4
 8002e98:	193a      	adds	r2, r7, r4
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	735a      	strb	r2, [r3, #13]
	//unsigned char TxPacket2[14] = { 0xFF, 0xFF, 0xFD, 0x00, 0xFE, 0x07, 0x00, 0x03, 0x1E, 0x00, 0x2C, 0x01, CRC_L, CRC_H };
	crc = update_crc(0, TxPacket2, 12);
 8002e9e:	211c      	movs	r1, #28
 8002ea0:	187c      	adds	r4, r7, r1
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	220c      	movs	r2, #12
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff fec9 	bl	8002c40 <update_crc>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	211c      	movs	r1, #28
 8002eb8:	187a      	adds	r2, r7, r1
 8002eba:	8812      	ldrh	r2, [r2, #0]
 8002ebc:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	19bb      	adds	r3, r7, r6
 8002ec8:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	183a      	adds	r2, r7, r0
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	19ba      	adds	r2, r7, r6
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8002eda:	23fa      	movs	r3, #250	; 0xfa
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	1d39      	adds	r1, r7, #4
 8002ee0:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <open+0xe4>)
 8002ee2:	220e      	movs	r2, #14
 8002ee4:	f005 fd54 	bl	8008990 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b009      	add	sp, #36	; 0x24
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef0:	0064001e 	.word	0x0064001e
 8002ef4:	200009cc 	.word	0x200009cc

08002ef8 <speed>:

void speed(int speed){
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	uint16_t crc;
	unsigned char CRC_L = 0;
 8002f00:	2027      	movs	r0, #39	; 0x27
 8002f02:	183b      	adds	r3, r7, r0
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
	unsigned char CRC_H = 0;
 8002f08:	2426      	movs	r4, #38	; 0x26
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	unsigned char LEN_MOT[2]={0x07, 0x00};
 8002f10:	2620      	movs	r6, #32
 8002f12:	19bb      	adds	r3, r7, r6
 8002f14:	2207      	movs	r2, #7
 8002f16:	801a      	strh	r2, [r3, #0]
	unsigned char param_mot[4]={0x20, 0x00, speed&0xFF,speed>>8};//param_mot[0] et param_mot[2] = start adress & param_mot[2] et param_mot[3]=data length
 8002f18:	211c      	movs	r1, #28
 8002f1a:	187b      	adds	r3, r7, r1
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	709a      	strb	r2, [r3, #2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	121b      	asrs	r3, r3, #8
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	70da      	strb	r2, [r3, #3]
	unsigned char TxPacket2[14] = { HEADER0, HEADER1, HEADER2, RESERVED, ID, LEN_MOT[0], LEN_MOT[1], INSTR_WRITE, param_mot[0], param_mot[1], param_mot[2], param_mot[3], CRC_L, CRC_H };
 8002f38:	250c      	movs	r5, #12
 8002f3a:	197b      	adds	r3, r7, r5
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	197b      	adds	r3, r7, r5
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	705a      	strb	r2, [r3, #1]
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	22fd      	movs	r2, #253	; 0xfd
 8002f4a:	709a      	strb	r2, [r3, #2]
 8002f4c:	197b      	adds	r3, r7, r5
 8002f4e:	2200      	movs	r2, #0
 8002f50:	70da      	strb	r2, [r3, #3]
 8002f52:	197b      	adds	r3, r7, r5
 8002f54:	22fe      	movs	r2, #254	; 0xfe
 8002f56:	711a      	strb	r2, [r3, #4]
 8002f58:	19bb      	adds	r3, r7, r6
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	197b      	adds	r3, r7, r5
 8002f5e:	715a      	strb	r2, [r3, #5]
 8002f60:	19bb      	adds	r3, r7, r6
 8002f62:	785a      	ldrb	r2, [r3, #1]
 8002f64:	197b      	adds	r3, r7, r5
 8002f66:	719a      	strb	r2, [r3, #6]
 8002f68:	197b      	adds	r3, r7, r5
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	71da      	strb	r2, [r3, #7]
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	197b      	adds	r3, r7, r5
 8002f74:	721a      	strb	r2, [r3, #8]
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	785a      	ldrb	r2, [r3, #1]
 8002f7a:	197b      	adds	r3, r7, r5
 8002f7c:	725a      	strb	r2, [r3, #9]
 8002f7e:	187b      	adds	r3, r7, r1
 8002f80:	789a      	ldrb	r2, [r3, #2]
 8002f82:	197b      	adds	r3, r7, r5
 8002f84:	729a      	strb	r2, [r3, #10]
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	78da      	ldrb	r2, [r3, #3]
 8002f8a:	197b      	adds	r3, r7, r5
 8002f8c:	72da      	strb	r2, [r3, #11]
 8002f8e:	197b      	adds	r3, r7, r5
 8002f90:	0006      	movs	r6, r0
 8002f92:	183a      	adds	r2, r7, r0
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	731a      	strb	r2, [r3, #12]
 8002f98:	197b      	adds	r3, r7, r5
 8002f9a:	193a      	adds	r2, r7, r4
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	735a      	strb	r2, [r3, #13]
	crc = update_crc(0, TxPacket2, 12);
 8002fa0:	2124      	movs	r1, #36	; 0x24
 8002fa2:	187c      	adds	r4, r7, r1
 8002fa4:	197b      	adds	r3, r7, r5
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	0019      	movs	r1, r3
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7ff fe48 	bl	8002c40 <update_crc>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	8023      	strh	r3, [r4, #0]
	CRC_L = (crc & 0x00FF);
 8002fb4:	0030      	movs	r0, r6
 8002fb6:	183b      	adds	r3, r7, r0
 8002fb8:	2124      	movs	r1, #36	; 0x24
 8002fba:	187a      	adds	r2, r7, r1
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	701a      	strb	r2, [r3, #0]
	CRC_H = (crc>>8) & 0x00FF;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	2426      	movs	r4, #38	; 0x26
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	701a      	strb	r2, [r3, #0]
	TxPacket2[12] = CRC_L;
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	183a      	adds	r2, r7, r0
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	731a      	strb	r2, [r3, #12]
	TxPacket2[13] = CRC_H;
 8002fd6:	197b      	adds	r3, r7, r5
 8002fd8:	193a      	adds	r2, r7, r4
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	735a      	strb	r2, [r3, #13]
	HAL_UART_Transmit(&huart2, TxPacket2, 14, 1000);
 8002fde:	23fa      	movs	r3, #250	; 0xfa
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	1979      	adds	r1, r7, r5
 8002fe4:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <speed+0xfc>)
 8002fe6:	220e      	movs	r2, #14
 8002fe8:	f005 fcd2 	bl	8008990 <HAL_UART_Transmit>
	/*for (int i=0; i<14; i++){
		printf(" %x", TxPacket2[i]);
	}
	printf("\r\n");*/

}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b00b      	add	sp, #44	; 0x2c
 8002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff4:	200009cc 	.word	0x200009cc

08002ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	0018      	movs	r0, r3
 8003002:	230c      	movs	r3, #12
 8003004:	001a      	movs	r2, r3
 8003006:	2100      	movs	r1, #0
 8003008:	f00e f9a7 	bl	801135a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800300e:	4a2e      	ldr	r2, [pc, #184]	; (80030c8 <MX_ADC1_Init+0xd0>)
 8003010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	05d2      	lsls	r2, r2, #23
 8003018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800301a:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003026:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003028:	2200      	movs	r2, #0
 800302a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800302e:	2204      	movs	r2, #4
 8003030:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003034:	2200      	movs	r2, #0
 8003036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800303a:	2200      	movs	r2, #0
 800303c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800303e:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003040:	2200      	movs	r2, #0
 8003042:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003046:	2201      	movs	r2, #1
 8003048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800304c:	2220      	movs	r2, #32
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800305a:	2200      	movs	r2, #0
 800305c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800305e:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003060:	222c      	movs	r2, #44	; 0x2c
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003074:	2200      	movs	r2, #0
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003078:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <MX_ADC1_Init+0xcc>)
 800307a:	223c      	movs	r2, #60	; 0x3c
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003082:	2200      	movs	r2, #0
 8003084:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <MX_ADC1_Init+0xcc>)
 8003088:	0018      	movs	r0, r3
 800308a:	f001 fcc5 	bl	8004a18 <HAL_ADC_Init>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d001      	beq.n	8003096 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003092:	f000 fcc9 	bl	8003a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	4a0c      	ldr	r2, [pc, #48]	; (80030cc <MX_ADC1_Init+0xd4>)
 800309a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a8:	1d3a      	adds	r2, r7, #4
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_ADC1_Init+0xcc>)
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f001 fe5a 	bl	8004d68 <HAL_ADC_ConfigChannel>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d001      	beq.n	80030bc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80030b8:	f000 fcb6 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	200006a8 	.word	0x200006a8
 80030c8:	40012400 	.word	0x40012400
 80030cc:	20000100 	.word	0x20000100

080030d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b091      	sub	sp, #68	; 0x44
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	232c      	movs	r3, #44	; 0x2c
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	0018      	movs	r0, r3
 80030de:	2314      	movs	r3, #20
 80030e0:	001a      	movs	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f00e f939 	bl	801135a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030e8:	2410      	movs	r4, #16
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	0018      	movs	r0, r3
 80030ee:	231c      	movs	r3, #28
 80030f0:	001a      	movs	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	f00e f931 	bl	801135a <memset>
  if(adcHandle->Instance==ADC1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_ADC_MspInit+0xac>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d138      	bne.n	8003174 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003102:	193b      	adds	r3, r7, r4
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	01d2      	lsls	r2, r2, #7
 8003108:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003110:	193b      	adds	r3, r7, r4
 8003112:	0018      	movs	r0, r3
 8003114:	f003 fe32 	bl	8006d7c <HAL_RCCEx_PeriphCLKConfig>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800311c:	f000 fc84 	bl	8003a28 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 8003122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003124:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	0349      	lsls	r1, r1, #13
 800312a:	430a      	orrs	r2, r1
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 8003130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	035b      	lsls	r3, r3, #13
 8003136:	4013      	ands	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 800313e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 8003142:	2102      	movs	r1, #2
 8003144:	430a      	orrs	r2, r1
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_ADC_MspInit+0xb0>)
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	187b      	adds	r3, r7, r1
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2203      	movs	r2, #3
 8003160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8003168:	187b      	adds	r3, r7, r1
 800316a:	4a06      	ldr	r2, [pc, #24]	; (8003184 <HAL_ADC_MspInit+0xb4>)
 800316c:	0019      	movs	r1, r3
 800316e:	0010      	movs	r0, r2
 8003170:	f002 f97c 	bl	800546c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b011      	add	sp, #68	; 0x44
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	40012400 	.word	0x40012400
 8003180:	40021000 	.word	0x40021000
 8003184:	50000400 	.word	0x50000400

08003188 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <MX_FREERTOS_Init+0x2c>)
 8003192:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003194:	c313      	stmia	r3!, {r0, r1, r4}
 8003196:	ca03      	ldmia	r2!, {r0, r1}
 8003198:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	2100      	movs	r1, #0
 800319e:	0018      	movs	r0, r3
 80031a0:	f00c fd7f 	bl	800fca2 <osThreadCreate>
 80031a4:	0002      	movs	r2, r0
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <MX_FREERTOS_Init+0x30>)
 80031a8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b007      	add	sp, #28
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	0801495c 	.word	0x0801495c
 80031b8:	2000070c 	.word	0x2000070c

080031bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031c4:	2001      	movs	r0, #1
 80031c6:	f00c fd94 	bl	800fcf2 <osDelay>
 80031ca:	e7fb      	b.n	80031c4 <StartDefaultTask+0x8>

080031cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b08b      	sub	sp, #44	; 0x2c
 80031d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d2:	2414      	movs	r4, #20
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	0018      	movs	r0, r3
 80031d8:	2314      	movs	r3, #20
 80031da:	001a      	movs	r2, r3
 80031dc:	2100      	movs	r1, #0
 80031de:	f00e f8bc 	bl	801135a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e2:	4b66      	ldr	r3, [pc, #408]	; (800337c <MX_GPIO_Init+0x1b0>)
 80031e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <MX_GPIO_Init+0x1b0>)
 80031e8:	2104      	movs	r1, #4
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	4b63      	ldr	r3, [pc, #396]	; (800337c <MX_GPIO_Init+0x1b0>)
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	2204      	movs	r2, #4
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031fa:	4b60      	ldr	r3, [pc, #384]	; (800337c <MX_GPIO_Init+0x1b0>)
 80031fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003200:	2120      	movs	r1, #32
 8003202:	430a      	orrs	r2, r1
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003216:	4b59      	ldr	r3, [pc, #356]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003218:	2101      	movs	r1, #1
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	4b57      	ldr	r3, [pc, #348]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	4b54      	ldr	r3, [pc, #336]	; (800337c <MX_GPIO_Init+0x1b0>)
 800322c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322e:	4b53      	ldr	r3, [pc, #332]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003230:	2102      	movs	r1, #2
 8003232:	430a      	orrs	r2, r1
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
 8003236:	4b51      	ldr	r3, [pc, #324]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	2202      	movs	r2, #2
 800323c:	4013      	ands	r3, r2
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003242:	4b4e      	ldr	r3, [pc, #312]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003246:	4b4d      	ldr	r3, [pc, #308]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003248:	2108      	movs	r1, #8
 800324a:	430a      	orrs	r2, r1
 800324c:	635a      	str	r2, [r3, #52]	; 0x34
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <MX_GPIO_Init+0x1b0>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2208      	movs	r2, #8
 8003254:	4013      	ands	r3, r2
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_RED_Pin|OE_Pin, GPIO_PIN_RESET);
 800325a:	4949      	ldr	r1, [pc, #292]	; (8003380 <MX_GPIO_Init+0x1b4>)
 800325c:	4b49      	ldr	r3, [pc, #292]	; (8003384 <MX_GPIO_Init+0x1b8>)
 800325e:	2200      	movs	r2, #0
 8003260:	0018      	movs	r0, r3
 8003262:	f002 fa67 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S0_Pin|S1_Pin|S2_Pin|S3_Pin
 8003266:	23a0      	movs	r3, #160	; 0xa0
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	2200      	movs	r2, #0
 800326c:	214f      	movs	r1, #79	; 0x4f
 800326e:	0018      	movs	r0, r3
 8003270:	f002 fa60 	bl	8005734 <HAL_GPIO_WritePin>
                          |LED_CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO1_C1_Pin|GPIO1_C2_Pin, GPIO_PIN_RESET);
 8003274:	4944      	ldr	r1, [pc, #272]	; (8003388 <MX_GPIO_Init+0x1bc>)
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <MX_GPIO_Init+0x1c0>)
 8003278:	2200      	movs	r2, #0
 800327a:	0018      	movs	r0, r3
 800327c:	f002 fa5a 	bl	8005734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|OE_Pin;
 8003280:	193b      	adds	r3, r7, r4
 8003282:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <MX_GPIO_Init+0x1b4>)
 8003284:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2201      	movs	r2, #1
 800328a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	193b      	adds	r3, r7, r4
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003298:	193b      	adds	r3, r7, r4
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <MX_GPIO_Init+0x1b8>)
 800329c:	0019      	movs	r1, r3
 800329e:	0010      	movs	r0, r2
 80032a0:	f002 f8e4 	bl	800546c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CB1_OUT_Pin|CB2_OUT_Pin;
 80032a4:	0021      	movs	r1, r4
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2206      	movs	r2, #6
 80032aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2288      	movs	r2, #136	; 0x88
 80032b0:	0352      	lsls	r2, r2, #13
 80032b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	000c      	movs	r4, r1
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	4a31      	ldr	r2, [pc, #196]	; (8003384 <MX_GPIO_Init+0x1b8>)
 80032c0:	0019      	movs	r1, r3
 80032c2:	0010      	movs	r0, r2
 80032c4:	f002 f8d2 	bl	800546c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	224f      	movs	r2, #79	; 0x4f
 80032cc:	601a      	str	r2, [r3, #0]
                          |LED_CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	2201      	movs	r2, #1
 80032d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	193a      	adds	r2, r7, r4
 80032e2:	23a0      	movs	r3, #160	; 0xa0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 f8bf 	bl	800546c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C1_Pin;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2202      	movs	r2, #2
 80032f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	2202      	movs	r2, #2
 80032fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C1_GPIO_Port, &GPIO_InitStruct);
 8003300:	193b      	adds	r3, r7, r4
 8003302:	4a22      	ldr	r2, [pc, #136]	; (800338c <MX_GPIO_Init+0x1c0>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f002 f8b0 	bl	800546c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO1_C1_Pin|GPIO1_C2_Pin;
 800330c:	193b      	adds	r3, r7, r4
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <MX_GPIO_Init+0x1bc>)
 8003310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003312:	193b      	adds	r3, r7, r4
 8003314:	2201      	movs	r2, #1
 8003316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2200      	movs	r2, #0
 8003322:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	193b      	adds	r3, r7, r4
 8003326:	4a19      	ldr	r2, [pc, #100]	; (800338c <MX_GPIO_Init+0x1c0>)
 8003328:	0019      	movs	r1, r3
 800332a:	0010      	movs	r0, r2
 800332c:	f002 f89e 	bl	800546c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XSHUT_C2_Pin;
 8003330:	0021      	movs	r1, r4
 8003332:	187b      	adds	r3, r7, r1
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	0152      	lsls	r2, r2, #5
 8003338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(XSHUT_C2_GPIO_Port, &GPIO_InitStruct);
 8003346:	187b      	adds	r3, r7, r1
 8003348:	4a10      	ldr	r2, [pc, #64]	; (800338c <MX_GPIO_Init+0x1c0>)
 800334a:	0019      	movs	r1, r3
 800334c:	0010      	movs	r0, r2
 800334e:	f002 f88d 	bl	800546c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2103      	movs	r1, #3
 8003356:	2005      	movs	r0, #5
 8003358:	f001 ff8a 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800335c:	2005      	movs	r0, #5
 800335e:	f001 ff9c 	bl	800529a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2103      	movs	r1, #3
 8003366:	2006      	movs	r0, #6
 8003368:	f001 ff82 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800336c:	2006      	movs	r0, #6
 800336e:	f001 ff94 	bl	800529a <HAL_NVIC_EnableIRQ>

}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b00b      	add	sp, #44	; 0x2c
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	40021000 	.word	0x40021000
 8003380:	00001808 	.word	0x00001808
 8003384:	50000800 	.word	0x50000800
 8003388:	00002004 	.word	0x00002004
 800338c:	50000400 	.word	0x50000400

08003390 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <MX_I2C1_Init+0x74>)
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <MX_I2C1_Init+0x78>)
 8003398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <MX_I2C1_Init+0x74>)
 800339c:	4a1b      	ldr	r2, [pc, #108]	; (800340c <MX_I2C1_Init+0x7c>)
 800339e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033a0:	4b18      	ldr	r3, [pc, #96]	; (8003404 <MX_I2C1_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <MX_I2C1_Init+0x74>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <MX_I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <MX_I2C1_Init+0x74>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <MX_I2C1_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <MX_I2C1_Init+0x74>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <MX_I2C1_Init+0x74>)
 80033cc:	0018      	movs	r0, r3
 80033ce:	f002 fa03 	bl	80057d8 <HAL_I2C_Init>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d001      	beq.n	80033da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033d6:	f000 fb27 	bl	8003a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <MX_I2C1_Init+0x74>)
 80033dc:	2100      	movs	r1, #0
 80033de:	0018      	movs	r0, r3
 80033e0:	f002 ff30 	bl	8006244 <HAL_I2CEx_ConfigAnalogFilter>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033e8:	f000 fb1e 	bl	8003a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <MX_I2C1_Init+0x74>)
 80033ee:	2100      	movs	r1, #0
 80033f0:	0018      	movs	r0, r3
 80033f2:	f002 ff73 	bl	80062dc <HAL_I2CEx_ConfigDigitalFilter>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033fa:	f000 fb15 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000710 	.word	0x20000710
 8003408:	40005400 	.word	0x40005400
 800340c:	10707dbc 	.word	0x10707dbc

08003410 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <MX_I2C2_Init+0x74>)
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <MX_I2C2_Init+0x78>)
 8003418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <MX_I2C2_Init+0x74>)
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <MX_I2C2_Init+0x7c>)
 800341e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <MX_I2C2_Init+0x74>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <MX_I2C2_Init+0x74>)
 8003428:	2201      	movs	r2, #1
 800342a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <MX_I2C2_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <MX_I2C2_Init+0x74>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <MX_I2C2_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_I2C2_Init+0x74>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <MX_I2C2_Init+0x74>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_I2C2_Init+0x74>)
 800344c:	0018      	movs	r0, r3
 800344e:	f002 f9c3 	bl	80057d8 <HAL_I2C_Init>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d001      	beq.n	800345a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003456:	f000 fae7 	bl	8003a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <MX_I2C2_Init+0x74>)
 800345c:	2100      	movs	r1, #0
 800345e:	0018      	movs	r0, r3
 8003460:	f002 fef0 	bl	8006244 <HAL_I2CEx_ConfigAnalogFilter>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d001      	beq.n	800346c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003468:	f000 fade 	bl	8003a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <MX_I2C2_Init+0x74>)
 800346e:	2100      	movs	r1, #0
 8003470:	0018      	movs	r0, r3
 8003472:	f002 ff33 	bl	80062dc <HAL_I2CEx_ConfigDigitalFilter>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800347a:	f000 fad5 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000764 	.word	0x20000764
 8003488:	40005800 	.word	0x40005800
 800348c:	10707dbc 	.word	0x10707dbc

08003490 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b093      	sub	sp, #76	; 0x4c
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	2334      	movs	r3, #52	; 0x34
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	0018      	movs	r0, r3
 800349e:	2314      	movs	r3, #20
 80034a0:	001a      	movs	r2, r3
 80034a2:	2100      	movs	r1, #0
 80034a4:	f00d ff59 	bl	801135a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a8:	2418      	movs	r4, #24
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	0018      	movs	r0, r3
 80034ae:	231c      	movs	r3, #28
 80034b0:	001a      	movs	r2, r3
 80034b2:	2100      	movs	r1, #0
 80034b4:	f00d ff51 	bl	801135a <memset>
  if(i2cHandle->Instance==I2C1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <HAL_I2C_MspInit+0x128>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d140      	bne.n	8003544 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	2220      	movs	r2, #32
 80034c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	0018      	movs	r0, r3
 80034d2:	f003 fc53 	bl	8006d7c <HAL_RCCEx_PeriphCLKConfig>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034da:	f000 faa5 	bl	8003a28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 80034e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_1_Pin|SDA_1_Pin;
 80034f6:	2134      	movs	r1, #52	; 0x34
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	22c0      	movs	r2, #192	; 0xc0
 80034fc:	00d2      	lsls	r2, r2, #3
 80034fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2212      	movs	r2, #18
 8003504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	187b      	adds	r3, r7, r1
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2206      	movs	r2, #6
 8003516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	187a      	adds	r2, r7, r1
 800351a:	23a0      	movs	r3, #160	; 0xa0
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f001 ffa3 	bl	800546c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	0389      	lsls	r1, r1, #14
 8003530:	430a      	orrs	r2, r1
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 8003536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	039b      	lsls	r3, r3, #14
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003542:	e035      	b.n	80035b0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_I2C_MspInit+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d130      	bne.n	80035b0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 8003550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 8003554:	2102      	movs	r1, #2
 8003556:	430a      	orrs	r2, r1
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
 800355a:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCL_2_Pin|SDA_2_Pin;
 8003566:	2134      	movs	r1, #52	; 0x34
 8003568:	187b      	adds	r3, r7, r1
 800356a:	22c0      	movs	r2, #192	; 0xc0
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2212      	movs	r2, #18
 8003574:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003582:	187b      	adds	r3, r7, r1
 8003584:	2206      	movs	r2, #6
 8003586:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	187b      	adds	r3, r7, r1
 800358a:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_I2C_MspInit+0x134>)
 800358c:	0019      	movs	r1, r3
 800358e:	0010      	movs	r0, r2
 8003590:	f001 ff6c 	bl	800546c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 8003596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	03c9      	lsls	r1, r1, #15
 800359e:	430a      	orrs	r2, r1
 80035a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_I2C_MspInit+0x12c>)
 80035a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	03db      	lsls	r3, r3, #15
 80035aa:	4013      	ands	r3, r2
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b013      	add	sp, #76	; 0x4c
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40005800 	.word	0x40005800
 80035c4:	50000400 	.word	0x50000400

080035c8 <__io_putchar>:
void clignote();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80035d0:	2301      	movs	r3, #1
 80035d2:	425b      	negs	r3, r3
 80035d4:	1d39      	adds	r1, r7, #4
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <__io_putchar+0x20>)
 80035d8:	2201      	movs	r2, #1
 80035da:	f005 f9d9 	bl	8008990 <HAL_UART_Transmit>
	return ch;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000938 	.word	0x20000938

080035ec <task_demo>:
	}
}
#endif

void task_demo(void * unused)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	for(;;){
		demo_run(&demo_funct1); //boucle infinie
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <task_demo+0x14>)
 80035f6:	0018      	movs	r0, r3
 80035f8:	f00d fe3e 	bl	8011278 <demo_run>
 80035fc:	e7fa      	b.n	80035f4 <task_demo+0x8>
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	200007b8 	.word	0x200007b8

08003604 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800360a:	f001 f85d 	bl	80046c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800360e:	f000 f99d 	bl	800394c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003612:	f7ff fddb 	bl	80031cc <MX_GPIO_Init>
	MX_I2C2_Init();
 8003616:	f7ff fefb 	bl	8003410 <MX_I2C2_Init>
	MX_TIM1_Init();
 800361a:	f000 fb29 	bl	8003c70 <MX_TIM1_Init>
	MX_TIM3_Init();
 800361e:	f000 fb91 	bl	8003d44 <MX_TIM3_Init>
	MX_TIM14_Init();
 8003622:	f000 fbf3 	bl	8003e0c <MX_TIM14_Init>
	MX_USART1_UART_Init();
 8003626:	f000 fed7 	bl	80043d8 <MX_USART1_UART_Init>
	MX_TIM16_Init();
 800362a:	f000 fc3b 	bl	8003ea4 <MX_TIM16_Init>
	MX_I2C1_Init();
 800362e:	f7ff feaf 	bl	8003390 <MX_I2C1_Init>
	MX_TIM17_Init();
 8003632:	f000 fcc1 	bl	8003fb8 <MX_TIM17_Init>
	MX_USART2_UART_Init();
 8003636:	f000 ff1d 	bl	8004474 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800363a:	f7ff fcdd 	bl	8002ff8 <MX_ADC1_Init>
	else{
		printf("C'est bon\r\n");
	}*/

	BaseType_t ret;
	ret = xTaskCreate(task_demo, "Demo", DEMO_STACK_SIZE,NULL, DEMO_PRIORITY,&h_task_demo);
 800363e:	23fa      	movs	r3, #250	; 0xfa
 8003640:	005a      	lsls	r2, r3, #1
 8003642:	498c      	ldr	r1, [pc, #560]	; (8003874 <main+0x270>)
 8003644:	488c      	ldr	r0, [pc, #560]	; (8003878 <main+0x274>)
 8003646:	4b8d      	ldr	r3, [pc, #564]	; (800387c <main+0x278>)
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2301      	movs	r3, #1
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	f00c fc0c 	bl	800fe6c <xTaskCreate>
 8003654:	0003      	movs	r3, r0
 8003656:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3301      	adds	r3, #1
 800365c:	d105      	bne.n	800366a <main+0x66>
		printf("Error creating task demo\r\n");
 800365e:	4b88      	ldr	r3, [pc, #544]	; (8003880 <main+0x27c>)
 8003660:	0018      	movs	r0, r3
 8003662:	f00e fb7d 	bl	8011d60 <puts>
		Error_Handler();
 8003666:	f000 f9df 	bl	8003a28 <Error_Handler>
	}
	printf("coucou task motor\r\n");
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <main+0x280>)
 800366c:	0018      	movs	r0, r3
 800366e:	f00e fb77 	bl	8011d60 <puts>
	ret = xTaskCreate(taskMotor,"Motor",MOTOR_STACK_SIZE,(void*)&h_cmd_motor, MOTOR_PRIORITY, &h_motor);
 8003672:	4c85      	ldr	r4, [pc, #532]	; (8003888 <main+0x284>)
 8003674:	23fa      	movs	r3, #250	; 0xfa
 8003676:	005a      	lsls	r2, r3, #1
 8003678:	4984      	ldr	r1, [pc, #528]	; (800388c <main+0x288>)
 800367a:	4885      	ldr	r0, [pc, #532]	; (8003890 <main+0x28c>)
 800367c:	4b85      	ldr	r3, [pc, #532]	; (8003894 <main+0x290>)
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	230a      	movs	r3, #10
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	0023      	movs	r3, r4
 8003686:	f00c fbf1 	bl	800fe6c <xTaskCreate>
 800368a:	0003      	movs	r3, r0
 800368c:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3301      	adds	r3, #1
 8003692:	d105      	bne.n	80036a0 <main+0x9c>
		printf("Error Task Motor\r\n");
 8003694:	4b80      	ldr	r3, [pc, #512]	; (8003898 <main+0x294>)
 8003696:	0018      	movs	r0, r3
 8003698:	f00e fb62 	bl	8011d60 <puts>
		Error_Handler();
 800369c:	f000 f9c4 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task motor\r\n");
 80036a0:	4b7e      	ldr	r3, [pc, #504]	; (800389c <main+0x298>)
 80036a2:	0018      	movs	r0, r3
 80036a4:	f00e fb5c 	bl	8011d60 <puts>
	printf("coucou task encoder\r\n");
 80036a8:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <main+0x29c>)
 80036aa:	0018      	movs	r0, r3
 80036ac:	f00e fb58 	bl	8011d60 <puts>
	ret = xTaskCreate(taskEncoder,"Encoder",ENCODER_STACK_SIZE,NULL, ENCODER_PRIORITY, &h_encoder);
 80036b0:	23fa      	movs	r3, #250	; 0xfa
 80036b2:	005a      	lsls	r2, r3, #1
 80036b4:	497b      	ldr	r1, [pc, #492]	; (80038a4 <main+0x2a0>)
 80036b6:	487c      	ldr	r0, [pc, #496]	; (80038a8 <main+0x2a4>)
 80036b8:	4b7c      	ldr	r3, [pc, #496]	; (80038ac <main+0x2a8>)
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	2304      	movs	r3, #4
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	f00c fbd3 	bl	800fe6c <xTaskCreate>
 80036c6:	0003      	movs	r3, r0
 80036c8:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3301      	adds	r3, #1
 80036ce:	d105      	bne.n	80036dc <main+0xd8>
		printf("Error Task Encoder\r\n");
 80036d0:	4b77      	ldr	r3, [pc, #476]	; (80038b0 <main+0x2ac>)
 80036d2:	0018      	movs	r0, r3
 80036d4:	f00e fb44 	bl	8011d60 <puts>
		Error_Handler();
 80036d8:	f000 f9a6 	bl	8003a28 <Error_Handler>
	}
	printf("coucou task encoder\r\n");
 80036dc:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <main+0x29c>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f00e fb3e 	bl	8011d60 <puts>
	ret = xTaskCreate(taskEncoderPrint,"Encoder Print",ENCODER_PRINT_STACK_SIZE,NULL, ENCODER_PRINT_PRIORITY, &h_encoder_print);
 80036e4:	23fa      	movs	r3, #250	; 0xfa
 80036e6:	005a      	lsls	r2, r3, #1
 80036e8:	4972      	ldr	r1, [pc, #456]	; (80038b4 <main+0x2b0>)
 80036ea:	4873      	ldr	r0, [pc, #460]	; (80038b8 <main+0x2b4>)
 80036ec:	4b73      	ldr	r3, [pc, #460]	; (80038bc <main+0x2b8>)
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2303      	movs	r3, #3
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	f00c fbb9 	bl	800fe6c <xTaskCreate>
 80036fa:	0003      	movs	r3, r0
 80036fc:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3301      	adds	r3, #1
 8003702:	d105      	bne.n	8003710 <main+0x10c>
		printf("Error Task Encoder Print\r\n");
 8003704:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <main+0x2bc>)
 8003706:	0018      	movs	r0, r3
 8003708:	f00e fb2a 	bl	8011d60 <puts>
		Error_Handler();
 800370c:	f000 f98c 	bl	8003a28 <Error_Handler>
	}
	printf("coucou task TOF\r\n");
 8003710:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <main+0x2c0>)
 8003712:	0018      	movs	r0, r3
 8003714:	f00e fb24 	bl	8011d60 <puts>
	ret = xTaskCreate(taskTOF,"TOF",TOF_STACK_SIZE,NULL,TOF_PRIORITY,&h_tof);
 8003718:	23fa      	movs	r3, #250	; 0xfa
 800371a:	005a      	lsls	r2, r3, #1
 800371c:	496a      	ldr	r1, [pc, #424]	; (80038c8 <main+0x2c4>)
 800371e:	486b      	ldr	r0, [pc, #428]	; (80038cc <main+0x2c8>)
 8003720:	4b6b      	ldr	r3, [pc, #428]	; (80038d0 <main+0x2cc>)
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2308      	movs	r3, #8
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	f00c fb9f 	bl	800fe6c <xTaskCreate>
 800372e:	0003      	movs	r3, r0
 8003730:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3301      	adds	r3, #1
 8003736:	d105      	bne.n	8003744 <main+0x140>
		printf("Error Task TOF\r\n");
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <main+0x2d0>)
 800373a:	0018      	movs	r0, r3
 800373c:	f00e fb10 	bl	8011d60 <puts>
		Error_Handler();
 8003740:	f000 f972 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task TOF\r\n");
 8003744:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <main+0x2d4>)
 8003746:	0018      	movs	r0, r3
 8003748:	f00e fb0a 	bl	8011d60 <puts>
	printf("coucou task servo\r\n");
 800374c:	4b63      	ldr	r3, [pc, #396]	; (80038dc <main+0x2d8>)
 800374e:	0018      	movs	r0, r3
 8003750:	f00e fb06 	bl	8011d60 <puts>
	ret = xTaskCreate(taskServoMotor,"Servomoteur",SERVO_STACK_SIZE,(void*)&h_cmd_servomotor,SERVO_PRIORITY,&h_servomotor);
 8003754:	4c62      	ldr	r4, [pc, #392]	; (80038e0 <main+0x2dc>)
 8003756:	23fa      	movs	r3, #250	; 0xfa
 8003758:	005a      	lsls	r2, r3, #1
 800375a:	4962      	ldr	r1, [pc, #392]	; (80038e4 <main+0x2e0>)
 800375c:	4862      	ldr	r0, [pc, #392]	; (80038e8 <main+0x2e4>)
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <main+0x2e8>)
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2307      	movs	r3, #7
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	0023      	movs	r3, r4
 8003768:	f00c fb80 	bl	800fe6c <xTaskCreate>
 800376c:	0003      	movs	r3, r0
 800376e:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	d105      	bne.n	8003782 <main+0x17e>
		printf("Error Task Servomotor\r\n");
 8003776:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <main+0x2ec>)
 8003778:	0018      	movs	r0, r3
 800377a:	f00e faf1 	bl	8011d60 <puts>
		Error_Handler();
 800377e:	f000 f953 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task servo\r\n");
 8003782:	4b5c      	ldr	r3, [pc, #368]	; (80038f4 <main+0x2f0>)
 8003784:	0018      	movs	r0, r3
 8003786:	f00e faeb 	bl	8011d60 <puts>
	printf("coucou task bordure\r\n");
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <main+0x2f4>)
 800378c:	0018      	movs	r0, r3
 800378e:	f00e fae7 	bl	8011d60 <puts>
	ret = xTaskCreate(taskBordure,"Bordure",BORDURE_STACK_SIZE,(void*)&h_cmd_motor,BORDURE_PRIORITY,&h_bordure);
 8003792:	4c3d      	ldr	r4, [pc, #244]	; (8003888 <main+0x284>)
 8003794:	23fa      	movs	r3, #250	; 0xfa
 8003796:	005a      	lsls	r2, r3, #1
 8003798:	4958      	ldr	r1, [pc, #352]	; (80038fc <main+0x2f8>)
 800379a:	4859      	ldr	r0, [pc, #356]	; (8003900 <main+0x2fc>)
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <main+0x300>)
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2309      	movs	r3, #9
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	0023      	movs	r3, r4
 80037a6:	f00c fb61 	bl	800fe6c <xTaskCreate>
 80037aa:	0003      	movs	r3, r0
 80037ac:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d105      	bne.n	80037c0 <main+0x1bc>
		printf("Error Task Bordure\r\n");
 80037b4:	4b54      	ldr	r3, [pc, #336]	; (8003908 <main+0x304>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f00e fad2 	bl	8011d60 <puts>
		Error_Handler();
 80037bc:	f000 f934 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task bordure\r\n");
 80037c0:	4b52      	ldr	r3, [pc, #328]	; (800390c <main+0x308>)
 80037c2:	0018      	movs	r0, r3
 80037c4:	f00e facc 	bl	8011d60 <puts>
	ret = xTaskCreate(taskRecherche,"Recherche",RECHERCHE_STACK_SIZE,(void*)&h_cmd_motor,RECHERCHE_PRIORITY,&h_recherche);
 80037c8:	4c2f      	ldr	r4, [pc, #188]	; (8003888 <main+0x284>)
 80037ca:	23fa      	movs	r3, #250	; 0xfa
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	4950      	ldr	r1, [pc, #320]	; (8003910 <main+0x30c>)
 80037d0:	4850      	ldr	r0, [pc, #320]	; (8003914 <main+0x310>)
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <main+0x314>)
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2306      	movs	r3, #6
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	0023      	movs	r3, r4
 80037dc:	f00c fb46 	bl	800fe6c <xTaskCreate>
 80037e0:	0003      	movs	r3, r0
 80037e2:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	d105      	bne.n	80037f6 <main+0x1f2>
		printf("Error Task Recherche\r\n");
 80037ea:	4b4c      	ldr	r3, [pc, #304]	; (800391c <main+0x318>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f00e fab7 	bl	8011d60 <puts>
		Error_Handler();
 80037f2:	f000 f919 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task Recherche\r\n");
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <main+0x31c>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f00e fab1 	bl	8011d60 <puts>

	ret = xTaskCreate(taskTrouve,"Trouve",TROUVE_STACK_SIZE,(void*)&h_cmd_motor,TROUVE_PRIORITY,&h_trouve);
 80037fe:	4c22      	ldr	r4, [pc, #136]	; (8003888 <main+0x284>)
 8003800:	23fa      	movs	r3, #250	; 0xfa
 8003802:	005a      	lsls	r2, r3, #1
 8003804:	4947      	ldr	r1, [pc, #284]	; (8003924 <main+0x320>)
 8003806:	4848      	ldr	r0, [pc, #288]	; (8003928 <main+0x324>)
 8003808:	4b48      	ldr	r3, [pc, #288]	; (800392c <main+0x328>)
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	2306      	movs	r3, #6
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	0023      	movs	r3, r4
 8003812:	f00c fb2b 	bl	800fe6c <xTaskCreate>
 8003816:	0003      	movs	r3, r0
 8003818:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3301      	adds	r3, #1
 800381e:	d105      	bne.n	800382c <main+0x228>
		printf("Error Task Trouve\r\n");
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <main+0x32c>)
 8003822:	0018      	movs	r0, r3
 8003824:	f00e fa9c 	bl	8011d60 <puts>
		Error_Handler();
 8003828:	f000 f8fe 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task Trouve\r\n");
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <main+0x330>)
 800382e:	0018      	movs	r0, r3
 8003830:	f00e fa96 	bl	8011d60 <puts>

	ret = xTaskCreate(taskAttrape,"Attrape",ATTRAPE_STACK_SIZE,(void*)&h_cmd_motor,ATTRAPE_PRIORITY,&h_attrape);
 8003834:	4c14      	ldr	r4, [pc, #80]	; (8003888 <main+0x284>)
 8003836:	23fa      	movs	r3, #250	; 0xfa
 8003838:	005a      	lsls	r2, r3, #1
 800383a:	493f      	ldr	r1, [pc, #252]	; (8003938 <main+0x334>)
 800383c:	483f      	ldr	r0, [pc, #252]	; (800393c <main+0x338>)
 800383e:	4b40      	ldr	r3, [pc, #256]	; (8003940 <main+0x33c>)
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	2306      	movs	r3, #6
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	0023      	movs	r3, r4
 8003848:	f00c fb10 	bl	800fe6c <xTaskCreate>
 800384c:	0003      	movs	r3, r0
 800384e:	607b      	str	r3, [r7, #4]
	if (ret == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY){
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3301      	adds	r3, #1
 8003854:	d105      	bne.n	8003862 <main+0x25e>
		printf("Error Task Attrape\r\n");
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <main+0x340>)
 8003858:	0018      	movs	r0, r3
 800385a:	f00e fa81 	bl	8011d60 <puts>
		Error_Handler();
 800385e:	f000 f8e3 	bl	8003a28 <Error_Handler>
	}
	printf("bye bye task Attrape\r\n");
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <main+0x344>)
 8003864:	0018      	movs	r0, r3
 8003866:	f00e fa7b 	bl	8011d60 <puts>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800386a:	f7ff fc8d 	bl	8003188 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800386e:	f00c fa10 	bl	800fc92 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003872:	e7fe      	b.n	8003872 <main+0x26e>
 8003874:	080149e0 	.word	0x080149e0
 8003878:	080035ed 	.word	0x080035ed
 800387c:	2000831c 	.word	0x2000831c
 8003880:	080149e8 	.word	0x080149e8
 8003884:	08014a04 	.word	0x08014a04
 8003888:	2000068c 	.word	0x2000068c
 800388c:	08014a18 	.word	0x08014a18
 8003890:	08002b7d 	.word	0x08002b7d
 8003894:	20000688 	.word	0x20000688
 8003898:	08014a20 	.word	0x08014a20
 800389c:	08014a34 	.word	0x08014a34
 80038a0:	08014a48 	.word	0x08014a48
 80038a4:	08014a60 	.word	0x08014a60
 80038a8:	08002251 	.word	0x08002251
 80038ac:	200004d8 	.word	0x200004d8
 80038b0:	08014a68 	.word	0x08014a68
 80038b4:	08014a7c 	.word	0x08014a7c
 80038b8:	08002589 	.word	0x08002589
 80038bc:	200004dc 	.word	0x200004dc
 80038c0:	08014a8c 	.word	0x08014a8c
 80038c4:	08014aa8 	.word	0x08014aa8
 80038c8:	08014abc 	.word	0x08014abc
 80038cc:	08011231 	.word	0x08011231
 80038d0:	20008318 	.word	0x20008318
 80038d4:	08014ac0 	.word	0x08014ac0
 80038d8:	08014ad0 	.word	0x08014ad0
 80038dc:	08014ae4 	.word	0x08014ae4
 80038e0:	200006a4 	.word	0x200006a4
 80038e4:	08014af8 	.word	0x08014af8
 80038e8:	08002c01 	.word	0x08002c01
 80038ec:	200006a0 	.word	0x200006a0
 80038f0:	08014b04 	.word	0x08014b04
 80038f4:	08014b1c 	.word	0x08014b1c
 80038f8:	08014b30 	.word	0x08014b30
 80038fc:	08014b48 	.word	0x08014b48
 8003900:	080028ed 	.word	0x080028ed
 8003904:	20000690 	.word	0x20000690
 8003908:	08014b50 	.word	0x08014b50
 800390c:	08014b64 	.word	0x08014b64
 8003910:	08014b7c 	.word	0x08014b7c
 8003914:	080029b1 	.word	0x080029b1
 8003918:	20000694 	.word	0x20000694
 800391c:	08014b88 	.word	0x08014b88
 8003920:	08014ba0 	.word	0x08014ba0
 8003924:	08014bb8 	.word	0x08014bb8
 8003928:	08002a81 	.word	0x08002a81
 800392c:	2000069c 	.word	0x2000069c
 8003930:	08014bc0 	.word	0x08014bc0
 8003934:	08014bd4 	.word	0x08014bd4
 8003938:	08014bec 	.word	0x08014bec
 800393c:	08002b01 	.word	0x08002b01
 8003940:	20000698 	.word	0x20000698
 8003944:	08014bf4 	.word	0x08014bf4
 8003948:	08014c08 	.word	0x08014c08

0800394c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b093      	sub	sp, #76	; 0x4c
 8003950:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003952:	2414      	movs	r4, #20
 8003954:	193b      	adds	r3, r7, r4
 8003956:	0018      	movs	r0, r3
 8003958:	2334      	movs	r3, #52	; 0x34
 800395a:	001a      	movs	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	f00d fcfc 	bl	801135a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	0018      	movs	r0, r3
 8003966:	2310      	movs	r3, #16
 8003968:	001a      	movs	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f00d fcf5 	bl	801135a <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	0018      	movs	r0, r3
 8003976:	f002 fcfd 	bl	8006374 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800397a:	193b      	adds	r3, r7, r4
 800397c:	2202      	movs	r2, #2
 800397e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003980:	193b      	adds	r3, r7, r4
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	0052      	lsls	r2, r2, #1
 8003986:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003988:	0021      	movs	r1, r4
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2202      	movs	r2, #2
 800399a:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800399c:	187b      	adds	r3, r7, r1
 800399e:	2202      	movs	r2, #2
 80039a0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2200      	movs	r2, #0
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2208      	movs	r2, #8
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	0292      	lsls	r2, r2, #10
 80039b4:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0592      	lsls	r2, r2, #22
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	0018      	movs	r0, r3
 80039c2:	f002 fd23 	bl	800640c <HAL_RCC_OscConfig>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d001      	beq.n	80039ce <SystemClock_Config+0x82>
	{
		Error_Handler();
 80039ca:	f000 f82d 	bl	8003a28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	2202      	movs	r2, #2
 80039d8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	2102      	movs	r1, #2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f003 f81e 	bl	8006a2c <HAL_RCC_ClockConfig>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d001      	beq.n	80039f8 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80039f4:	f000 f818 	bl	8003a28 <Error_Handler>
	}
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b013      	add	sp, #76	; 0x4c
 80039fe:	bd90      	pop	{r4, r7, pc}

08003a00 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	0002      	movs	r2, r0
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	801a      	strh	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1, "Stop\r\n", 8, HAL_MAX_DELAY);
	xTaskNotifyGive(h_bordure);
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	2202      	movs	r2, #2
 8003a14:	2100      	movs	r1, #0
 8003a16:	f00c ff37 	bl	8010888 <xTaskGenericNotify>
	//vTaskResume(h_motor);
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	20000690 	.word	0x20000690

08003a28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2c:	b672      	cpsid	i
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003a30:	e7fe      	b.n	8003a30 <Error_Handler+0x8>
	...

08003a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_MspInit+0x50>)
 8003a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_MspInit+0x50>)
 8003a40:	2101      	movs	r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <HAL_MspInit+0x50>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_MspInit+0x50>)
 8003a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_MspInit+0x50>)
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	0549      	lsls	r1, r1, #21
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_MspInit+0x50>)
 8003a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	055b      	lsls	r3, r3, #21
 8003a68:	4013      	ands	r3, r2
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003a6e:	2302      	movs	r3, #2
 8003a70:	425b      	negs	r3, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	2103      	movs	r1, #3
 8003a76:	0018      	movs	r0, r3
 8003a78:	f001 fbfa 	bl	8005270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003a8c:	e7fe      	b.n	8003a8c <NMI_Handler+0x4>

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a98:	f000 fe80 	bl	800479c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003a9c:	f00c fe96 	bl	80107cc <xTaskGetSchedulerState>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d001      	beq.n	8003aaa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003aa6:	f00d f8cf 	bl	8010c48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB1_OUT_Pin);
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f001 fe5b 	bl	8005770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB2_OUT_Pin);
 8003ac4:	2004      	movs	r0, #4
 8003ac6:	f001 fe53 	bl	8005770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <USART1_IRQHandler+0x14>)
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f004 fff6 	bl	8008ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	20000938 	.word	0x20000938

08003ae8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	return 1;
 8003aec:	2301      	movs	r3, #1
}
 8003aee:	0018      	movs	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <_kill>:

int _kill(int pid, int sig)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003afe:	f00d fbf9 	bl	80112f4 <__errno>
 8003b02:	0003      	movs	r3, r0
 8003b04:	2216      	movs	r2, #22
 8003b06:	601a      	str	r2, [r3, #0]
	return -1;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	425b      	negs	r3, r3
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_exit>:

void _exit (int status)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	425a      	negs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff ffe5 	bl	8003af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b2a:	e7fe      	b.n	8003b2a <_exit+0x16>

08003b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e00a      	b.n	8003b54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b3e:	e000      	b.n	8003b42 <_read+0x16>
 8003b40:	bf00      	nop
 8003b42:	0001      	movs	r1, r0
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	60ba      	str	r2, [r7, #8]
 8003b4a:	b2ca      	uxtb	r2, r1
 8003b4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	dbf0      	blt.n	8003b3e <_read+0x12>
	}

return len;
 8003b5c:	687b      	ldr	r3, [r7, #4]
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b006      	add	sp, #24
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	e009      	b.n	8003b8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	60ba      	str	r2, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff fd21 	bl	80035c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	dbf1      	blt.n	8003b78 <_write+0x12>
	}
	return len;
 8003b94:	687b      	ldr	r3, [r7, #4]
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b006      	add	sp, #24
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_close>:

int _close(int file)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	425b      	negs	r3, r3
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	0192      	lsls	r2, r2, #6
 8003bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_isatty>:

int _isatty(int file)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
	return 0;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <_sbrk+0x5c>)
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <_sbrk+0x60>)
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x64>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <_sbrk+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c28:	f00d fb64 	bl	80112f4 <__errno>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	220c      	movs	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	425b      	negs	r3, r3
 8003c36:	e009      	b.n	8003c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	18d2      	adds	r2, r2, r3
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <_sbrk+0x64>)
 8003c48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20009000 	.word	0x20009000
 8003c58:	00000400 	.word	0x00000400
 8003c5c:	200007b8 	.word	0x200007b8
 8003c60:	20008330 	.word	0x20008330

08003c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b08d      	sub	sp, #52	; 0x34
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c76:	240c      	movs	r4, #12
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	2324      	movs	r3, #36	; 0x24
 8003c7e:	001a      	movs	r2, r3
 8003c80:	2100      	movs	r1, #0
 8003c82:	f00d fb6a 	bl	801135a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c86:	003b      	movs	r3, r7
 8003c88:	0018      	movs	r0, r3
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f00d fb63 	bl	801135a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <MX_TIM1_Init+0xcc>)
 8003c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003ca8:	4a25      	ldr	r2, [pc, #148]	; (8003d40 <MX_TIM1_Init+0xd0>)
 8003caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cbe:	0021      	movs	r1, r4
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2200      	movs	r2, #0
 8003cca:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2201      	movs	r2, #1
 8003cd0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003cf6:	187a      	adds	r2, r7, r1
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f003 fbf9 	bl	80074f4 <HAL_TIM_Encoder_Init>
 8003d02:	1e03      	subs	r3, r0, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003d06:	f7ff fe8f 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d0a:	003b      	movs	r3, r7
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d10:	003b      	movs	r3, r7
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d16:	003b      	movs	r3, r7
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d1c:	003a      	movs	r2, r7
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_TIM1_Init+0xc8>)
 8003d20:	0011      	movs	r1, r2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f004 fc4e 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d28:	1e03      	subs	r3, r0, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8003d2c:	f7ff fe7c 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b00d      	add	sp, #52	; 0x34
 8003d36:	bd90      	pop	{r4, r7, pc}
 8003d38:	200007bc 	.word	0x200007bc
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	0000ffff 	.word	0x0000ffff

08003d44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b08d      	sub	sp, #52	; 0x34
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d4a:	240c      	movs	r4, #12
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	0018      	movs	r0, r3
 8003d50:	2324      	movs	r3, #36	; 0x24
 8003d52:	001a      	movs	r2, r3
 8003d54:	2100      	movs	r1, #0
 8003d56:	f00d fb00 	bl	801135a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d5a:	003b      	movs	r3, r7
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	230c      	movs	r3, #12
 8003d60:	001a      	movs	r2, r3
 8003d62:	2100      	movs	r1, #0
 8003d64:	f00d faf9 	bl	801135a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <MX_TIM3_Init+0xc0>)
 8003d6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <MX_TIM3_Init+0xc4>)
 8003d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d80:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d8c:	0021      	movs	r1, r4
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	2203      	movs	r2, #3
 8003d92:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	2200      	movs	r2, #0
 8003d98:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2201      	movs	r2, #1
 8003db6:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003dc4:	187a      	adds	r2, r7, r1
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003dc8:	0011      	movs	r1, r2
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f003 fb92 	bl	80074f4 <HAL_TIM_Encoder_Init>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003dd4:	f7ff fe28 	bl	8003a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de4:	003a      	movs	r2, r7
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_TIM3_Init+0xbc>)
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f004 fbea 	bl	80085c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003df4:	f7ff fe18 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b00d      	add	sp, #52	; 0x34
 8003dfe:	bd90      	pop	{r4, r7, pc}
 8003e00:	20000808 	.word	0x20000808
 8003e04:	40000400 	.word	0x40000400
 8003e08:	0000ffff 	.word	0x0000ffff

08003e0c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e12:	003b      	movs	r3, r7
 8003e14:	0018      	movs	r0, r3
 8003e16:	2310      	movs	r3, #16
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f00d fa9d 	bl	801135a <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <MX_TIM14_Init+0x90>)
 8003e24:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <MX_TIM14_Init+0x94>)
 8003e36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e38:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f003 f8cc 	bl	8006fe4 <HAL_TIM_Base_Init>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8003e50:	f7ff fdea 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f003 faec 	bl	8007434 <HAL_TIM_IC_Init>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8003e60:	f7ff fde2 	bl	8003a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e64:	003b      	movs	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e6a:	003b      	movs	r3, r7
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e70:	003b      	movs	r3, r7
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003e76:	003b      	movs	r3, r7
 8003e78:	2200      	movs	r2, #0
 8003e7a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e7c:	0039      	movs	r1, r7
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <MX_TIM14_Init+0x8c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	0018      	movs	r0, r3
 8003e84:	f003 fc82 	bl	800778c <HAL_TIM_IC_ConfigChannel>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003e8c:	f7ff fdcc 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b004      	add	sp, #16
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000854 	.word	0x20000854
 8003e9c:	40002000 	.word	0x40002000
 8003ea0:	0000ffff 	.word	0x0000ffff

08003ea4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b094      	sub	sp, #80	; 0x50
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eaa:	2334      	movs	r3, #52	; 0x34
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	0018      	movs	r0, r3
 8003eb0:	231c      	movs	r3, #28
 8003eb2:	001a      	movs	r2, r3
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f00d fa50 	bl	801135a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eba:	003b      	movs	r3, r7
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	2334      	movs	r3, #52	; 0x34
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f00d fa49 	bl	801135a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ec8:	4b38      	ldr	r3, [pc, #224]	; (8003fac <MX_TIM16_Init+0x108>)
 8003eca:	4a39      	ldr	r2, [pc, #228]	; (8003fb0 <MX_TIM16_Init+0x10c>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <MX_TIM16_Init+0x108>)
 8003ed0:	223f      	movs	r2, #63	; 0x3f
 8003ed2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <MX_TIM16_Init+0x108>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1023;
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <MX_TIM16_Init+0x108>)
 8003edc:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <MX_TIM16_Init+0x110>)
 8003ede:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee0:	4b32      	ldr	r3, [pc, #200]	; (8003fac <MX_TIM16_Init+0x108>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ee6:	4b31      	ldr	r3, [pc, #196]	; (8003fac <MX_TIM16_Init+0x108>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <MX_TIM16_Init+0x108>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <MX_TIM16_Init+0x108>)
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f003 f875 	bl	8006fe4 <HAL_TIM_Base_Init>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003efe:	f7ff fd93 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <MX_TIM16_Init+0x108>)
 8003f04:	0018      	movs	r0, r3
 8003f06:	f003 f8c5 	bl	8007094 <HAL_TIM_PWM_Init>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003f0e:	f7ff fd8b 	bl	8003a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f12:	2134      	movs	r1, #52	; 0x34
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2260      	movs	r2, #96	; 0x60
 8003f18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	22fa      	movs	r2, #250	; 0xfa
 8003f1e:	0052      	lsls	r2, r2, #1
 8003f20:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2200      	movs	r2, #0
 8003f26:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2200      	movs	r2, #0
 8003f32:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f40:	1879      	adds	r1, r7, r1
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <MX_TIM16_Init+0x108>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	0018      	movs	r0, r3
 8003f48:	f003 fcc4 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8003f50:	f7ff fd6a 	bl	8003a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f54:	003b      	movs	r3, r7
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f5a:	003b      	movs	r3, r7
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f60:	003b      	movs	r3, r7
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 8003f66:	003b      	movs	r3, r7
 8003f68:	22cb      	movs	r2, #203	; 0xcb
 8003f6a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f6c:	003b      	movs	r3, r7
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f72:	003b      	movs	r3, r7
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0192      	lsls	r2, r2, #6
 8003f78:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f7a:	003b      	movs	r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f80:	003b      	movs	r3, r7
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003f86:	003a      	movs	r2, r7
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <MX_TIM16_Init+0x108>)
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f004 fb81 	bl	8008694 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM16_Init+0xf6>
  {
    Error_Handler();
 8003f96:	f7ff fd47 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <MX_TIM16_Init+0x108>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 f9b1 	bl	8004304 <HAL_TIM_MspPostInit>

}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b014      	add	sp, #80	; 0x50
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	200008a0 	.word	0x200008a0
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	000003ff 	.word	0x000003ff

08003fb8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b094      	sub	sp, #80	; 0x50
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fbe:	2334      	movs	r3, #52	; 0x34
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	231c      	movs	r3, #28
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f00d f9c6 	bl	801135a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fce:	003b      	movs	r3, r7
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	2334      	movs	r3, #52	; 0x34
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f00d f9bf 	bl	801135a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003fdc:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003fde:	4a39      	ldr	r2, [pc, #228]	; (80040c4 <MX_TIM17_Init+0x10c>)
 8003fe0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003fe4:	223f      	movs	r2, #63	; 0x3f
 8003fe6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1023;
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003ff0:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <MX_TIM17_Init+0x110>)
 8003ff2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff4:	4b32      	ldr	r3, [pc, #200]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003ffa:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <MX_TIM17_Init+0x108>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004000:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <MX_TIM17_Init+0x108>)
 8004002:	2200      	movs	r2, #0
 8004004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004006:	4b2e      	ldr	r3, [pc, #184]	; (80040c0 <MX_TIM17_Init+0x108>)
 8004008:	0018      	movs	r0, r3
 800400a:	f002 ffeb 	bl	8006fe4 <HAL_TIM_Base_Init>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d001      	beq.n	8004016 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8004012:	f7ff fd09 	bl	8003a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <MX_TIM17_Init+0x108>)
 8004018:	0018      	movs	r0, r3
 800401a:	f003 f83b 	bl	8007094 <HAL_TIM_PWM_Init>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8004022:	f7ff fd01 	bl	8003a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004026:	2134      	movs	r1, #52	; 0x34
 8004028:	187b      	adds	r3, r7, r1
 800402a:	2260      	movs	r2, #96	; 0x60
 800402c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	22fa      	movs	r2, #250	; 0xfa
 8004032:	0052      	lsls	r2, r2, #1
 8004034:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004036:	187b      	adds	r3, r7, r1
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800403c:	187b      	adds	r3, r7, r1
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004042:	187b      	adds	r3, r7, r1
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004048:	187b      	adds	r3, r7, r1
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800404e:	187b      	adds	r3, r7, r1
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004054:	1879      	adds	r1, r7, r1
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <MX_TIM17_Init+0x108>)
 8004058:	2200      	movs	r2, #0
 800405a:	0018      	movs	r0, r3
 800405c:	f003 fc3a 	bl	80078d4 <HAL_TIM_PWM_ConfigChannel>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8004064:	f7ff fce0 	bl	8003a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004068:	003b      	movs	r3, r7
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800406e:	003b      	movs	r3, r7
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004074:	003b      	movs	r3, r7
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 203;
 800407a:	003b      	movs	r3, r7
 800407c:	22cb      	movs	r2, #203	; 0xcb
 800407e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004080:	003b      	movs	r3, r7
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004086:	003b      	movs	r3, r7
 8004088:	2280      	movs	r2, #128	; 0x80
 800408a:	0192      	lsls	r2, r2, #6
 800408c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800408e:	003b      	movs	r3, r7
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004094:	003b      	movs	r3, r7
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800409a:	003a      	movs	r2, r7
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <MX_TIM17_Init+0x108>)
 800409e:	0011      	movs	r1, r2
 80040a0:	0018      	movs	r0, r3
 80040a2:	f004 faf7 	bl	8008694 <HAL_TIMEx_ConfigBreakDeadTime>
 80040a6:	1e03      	subs	r3, r0, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM17_Init+0xf6>
  {
    Error_Handler();
 80040aa:	f7ff fcbd 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <MX_TIM17_Init+0x108>)
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f927 	bl	8004304 <HAL_TIM_MspPostInit>

}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b014      	add	sp, #80	; 0x50
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	200008ec 	.word	0x200008ec
 80040c4:	40014800 	.word	0x40014800
 80040c8:	000003ff 	.word	0x000003ff

080040cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b08d      	sub	sp, #52	; 0x34
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	241c      	movs	r4, #28
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	0018      	movs	r0, r3
 80040da:	2314      	movs	r3, #20
 80040dc:	001a      	movs	r2, r3
 80040de:	2100      	movs	r1, #0
 80040e0:	f00d f93b 	bl	801135a <memset>
  if(tim_encoderHandle->Instance==TIM1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a46      	ldr	r2, [pc, #280]	; (8004204 <HAL_TIM_Encoder_MspInit+0x138>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d152      	bne.n	8004194 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80040f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f2:	4b45      	ldr	r3, [pc, #276]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	0109      	lsls	r1, r1, #4
 80040f8:	430a      	orrs	r2, r1
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80040fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004110:	2104      	movs	r1, #4
 8004112:	430a      	orrs	r2, r1
 8004114:	635a      	str	r2, [r3, #52]	; 0x34
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	2204      	movs	r2, #4
 800411c:	4013      	ands	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004128:	2102      	movs	r1, #2
 800412a:	430a      	orrs	r2, r1
 800412c:	635a      	str	r2, [r3, #52]	; 0x34
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_Encoder1_CH1_Pin;
 800413a:	193b      	adds	r3, r7, r4
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	0052      	lsls	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004142:	193b      	adds	r3, r7, r4
 8004144:	2202      	movs	r2, #2
 8004146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	193b      	adds	r3, r7, r4
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414e:	193b      	adds	r3, r7, r4
 8004150:	2200      	movs	r2, #0
 8004152:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004154:	193b      	adds	r3, r7, r4
 8004156:	2202      	movs	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH1_GPIO_Port, &GPIO_InitStruct);
 800415a:	193b      	adds	r3, r7, r4
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <HAL_TIM_Encoder_MspInit+0x140>)
 800415e:	0019      	movs	r1, r3
 8004160:	0010      	movs	r0, r2
 8004162:	f001 f983 	bl	800546c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_Encoder1_CH2_Pin;
 8004166:	0021      	movs	r1, r4
 8004168:	187b      	adds	r3, r7, r1
 800416a:	2208      	movs	r2, #8
 800416c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	187b      	adds	r3, r7, r1
 8004170:	2202      	movs	r2, #2
 8004172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	187b      	adds	r3, r7, r1
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004180:	187b      	adds	r3, r7, r1
 8004182:	2201      	movs	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_Encoder1_CH2_GPIO_Port, &GPIO_InitStruct);
 8004186:	187b      	adds	r3, r7, r1
 8004188:	4a21      	ldr	r2, [pc, #132]	; (8004210 <HAL_TIM_Encoder_MspInit+0x144>)
 800418a:	0019      	movs	r1, r3
 800418c:	0010      	movs	r0, r2
 800418e:	f001 f96d 	bl	800546c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004192:	e032      	b.n	80041fa <HAL_TIM_Encoder_MspInit+0x12e>
  else if(tim_encoderHandle->Instance==TIM3)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_TIM_Encoder_MspInit+0x148>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d12d      	bne.n	80041fa <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041a4:	2102      	movs	r1, #2
 80041a6:	430a      	orrs	r2, r1
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80041aa:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	2202      	movs	r2, #2
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b6:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041bc:	2102      	movs	r1, #2
 80041be:	430a      	orrs	r2, r1
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_TIM_Encoder_MspInit+0x13c>)
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	2202      	movs	r2, #2
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_Encoder2_CH1_Pin|TIM_Encoder2_CH2_Pin;
 80041ce:	211c      	movs	r1, #28
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2230      	movs	r2, #48	; 0x30
 80041d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2202      	movs	r2, #2
 80041da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	187b      	adds	r3, r7, r1
 80041de:	2200      	movs	r2, #0
 80041e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	2201      	movs	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_TIM_Encoder_MspInit+0x144>)
 80041f2:	0019      	movs	r1, r3
 80041f4:	0010      	movs	r0, r2
 80041f6:	f001 f939 	bl	800546c <HAL_GPIO_Init>
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b00d      	add	sp, #52	; 0x34
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40021000 	.word	0x40021000
 800420c:	50000800 	.word	0x50000800
 8004210:	50000400 	.word	0x50000400
 8004214:	40000400 	.word	0x40000400

08004218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b08d      	sub	sp, #52	; 0x34
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	241c      	movs	r4, #28
 8004222:	193b      	adds	r3, r7, r4
 8004224:	0018      	movs	r0, r3
 8004226:	2314      	movs	r3, #20
 8004228:	001a      	movs	r2, r3
 800422a:	2100      	movs	r1, #0
 800422c:	f00d f895 	bl	801135a <memset>
  if(tim_baseHandle->Instance==TIM14)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <HAL_TIM_Base_MspInit+0xdc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d131      	bne.n	800429e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800423a:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	0209      	lsls	r1, r1, #8
 8004244:	430a      	orrs	r2, r1
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
 8004248:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 800424a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 8004258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 800425c:	2101      	movs	r1, #1
 800425e:	430a      	orrs	r2, r1
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
 8004262:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	2201      	movs	r2, #1
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	697b      	ldr	r3, [r7, #20]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = TIM_CC_Pin;
 800426e:	0021      	movs	r1, r4
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2202      	movs	r2, #2
 800427a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8004288:	187b      	adds	r3, r7, r1
 800428a:	2204      	movs	r2, #4
 800428c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM_CC_GPIO_Port, &GPIO_InitStruct);
 800428e:	187a      	adds	r2, r7, r1
 8004290:	23a0      	movs	r3, #160	; 0xa0
 8004292:	05db      	lsls	r3, r3, #23
 8004294:	0011      	movs	r1, r2
 8004296:	0018      	movs	r0, r3
 8004298:	f001 f8e8 	bl	800546c <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800429c:	e026      	b.n	80042ec <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM16)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_TIM_Base_MspInit+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10e      	bne.n	80042c6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	0289      	lsls	r1, r1, #10
 80042b2:	430a      	orrs	r2, r1
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
}
 80042c4:	e012      	b.n	80042ec <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM17)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <HAL_TIM_Base_MspInit+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10d      	bne.n	80042ec <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042d6:	2180      	movs	r1, #128	; 0x80
 80042d8:	02c9      	lsls	r1, r1, #11
 80042da:	430a      	orrs	r2, r1
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_TIM_Base_MspInit+0xe0>)
 80042e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	02db      	lsls	r3, r3, #11
 80042e6:	4013      	ands	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b00d      	add	sp, #52	; 0x34
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	40002000 	.word	0x40002000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b08b      	sub	sp, #44	; 0x2c
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430c:	2414      	movs	r4, #20
 800430e:	193b      	adds	r3, r7, r4
 8004310:	0018      	movs	r0, r3
 8004312:	2314      	movs	r3, #20
 8004314:	001a      	movs	r2, r3
 8004316:	2100      	movs	r1, #0
 8004318:	f00d f81f 	bl	801135a <memset>
  if(timHandle->Instance==TIM16)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <HAL_TIM_MspPostInit+0xc4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d123      	bne.n	800436e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004326:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	4b28      	ldr	r3, [pc, #160]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 800432c:	2102      	movs	r1, #2
 800432e:	430a      	orrs	r2, r1
 8004330:	635a      	str	r2, [r3, #52]	; 0x34
 8004332:	4b26      	ldr	r3, [pc, #152]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = TIM_Driver2_CH1N_Pin|TIM_Driver2_CH1_Pin;
 800433e:	193b      	adds	r3, r7, r4
 8004340:	22a0      	movs	r2, #160	; 0xa0
 8004342:	0052      	lsls	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	0021      	movs	r1, r4
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2202      	movs	r2, #2
 800434c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	187b      	adds	r3, r7, r1
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800435a:	187b      	adds	r3, r7, r1
 800435c:	2202      	movs	r2, #2
 800435e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004360:	187b      	adds	r3, r7, r1
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_TIM_MspPostInit+0xcc>)
 8004364:	0019      	movs	r1, r3
 8004366:	0010      	movs	r0, r2
 8004368:	f001 f880 	bl	800546c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800436c:	e027      	b.n	80043be <HAL_TIM_MspPostInit+0xba>
  else if(timHandle->Instance==TIM17)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_TIM_MspPostInit+0xd0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d122      	bne.n	80043be <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 800437a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 800437e:	2102      	movs	r1, #2
 8004380:	430a      	orrs	r2, r1
 8004382:	635a      	str	r2, [r3, #52]	; 0x34
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <HAL_TIM_MspPostInit+0xc8>)
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	2202      	movs	r2, #2
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_Driver1_CH1N_Pin|TIM_Driver1_CH1_Pin;
 8004390:	2114      	movs	r1, #20
 8004392:	187b      	adds	r3, r7, r1
 8004394:	22a0      	movs	r2, #160	; 0xa0
 8004396:	0092      	lsls	r2, r2, #2
 8004398:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439a:	187b      	adds	r3, r7, r1
 800439c:	2202      	movs	r2, #2
 800439e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	2200      	movs	r2, #0
 80043aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	2202      	movs	r2, #2
 80043b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <HAL_TIM_MspPostInit+0xcc>)
 80043b6:	0019      	movs	r1, r3
 80043b8:	0010      	movs	r0, r2
 80043ba:	f001 f857 	bl	800546c <HAL_GPIO_Init>
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b00b      	add	sp, #44	; 0x2c
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40021000 	.word	0x40021000
 80043d0:	50000400 	.word	0x50000400
 80043d4:	40014800 	.word	0x40014800

080043d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043de:	4a24      	ldr	r2, [pc, #144]	; (8004470 <MX_USART1_UART_Init+0x98>)
 80043e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043e4:	22e1      	movs	r2, #225	; 0xe1
 80043e6:	0252      	lsls	r2, r2, #9
 80043e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <MX_USART1_UART_Init+0x94>)
 80043fe:	220c      	movs	r2, #12
 8004400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004402:	4b1a      	ldr	r3, [pc, #104]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004408:	4b18      	ldr	r3, [pc, #96]	; (800446c <MX_USART1_UART_Init+0x94>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004410:	2200      	movs	r2, #0
 8004412:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004416:	2200      	movs	r2, #0
 8004418:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <MX_USART1_UART_Init+0x94>)
 800441c:	2200      	movs	r2, #0
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004422:	0018      	movs	r0, r3
 8004424:	f004 fa00 	bl	8008828 <HAL_UART_Init>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800442c:	f7ff fafc 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004432:	2100      	movs	r1, #0
 8004434:	0018      	movs	r0, r3
 8004436:	f005 faf3 	bl	8009a20 <HAL_UARTEx_SetTxFifoThreshold>
 800443a:	1e03      	subs	r3, r0, #0
 800443c:	d001      	beq.n	8004442 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800443e:	f7ff faf3 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004444:	2100      	movs	r1, #0
 8004446:	0018      	movs	r0, r3
 8004448:	f005 fb2a 	bl	8009aa0 <HAL_UARTEx_SetRxFifoThreshold>
 800444c:	1e03      	subs	r3, r0, #0
 800444e:	d001      	beq.n	8004454 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004450:	f7ff faea 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <MX_USART1_UART_Init+0x94>)
 8004456:	0018      	movs	r0, r3
 8004458:	f005 faa8 	bl	80099ac <HAL_UARTEx_DisableFifoMode>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004460:	f7ff fae2 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	20000938 	.word	0x20000938
 8004470:	40013800 	.word	0x40013800

08004474 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004478:	4b22      	ldr	r3, [pc, #136]	; (8004504 <MX_USART2_UART_Init+0x90>)
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <MX_USART2_UART_Init+0x94>)
 800447c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <MX_USART2_UART_Init+0x90>)
 8004480:	4a22      	ldr	r2, [pc, #136]	; (800450c <MX_USART2_UART_Init+0x98>)
 8004482:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <MX_USART2_UART_Init+0x90>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <MX_USART2_UART_Init+0x90>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <MX_USART2_UART_Init+0x90>)
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <MX_USART2_UART_Init+0x90>)
 8004498:	220c      	movs	r2, #12
 800449a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <MX_USART2_UART_Init+0x90>)
 800449e:	2200      	movs	r2, #0
 80044a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044a8:	4b16      	ldr	r3, [pc, #88]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044bc:	0018      	movs	r0, r3
 80044be:	f004 fa09 	bl	80088d4 <HAL_HalfDuplex_Init>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d001      	beq.n	80044ca <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80044c6:	f7ff faaf 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044ca:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044cc:	2100      	movs	r1, #0
 80044ce:	0018      	movs	r0, r3
 80044d0:	f005 faa6 	bl	8009a20 <HAL_UARTEx_SetTxFifoThreshold>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80044d8:	f7ff faa6 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044de:	2100      	movs	r1, #0
 80044e0:	0018      	movs	r0, r3
 80044e2:	f005 fadd 	bl	8009aa0 <HAL_UARTEx_SetRxFifoThreshold>
 80044e6:	1e03      	subs	r3, r0, #0
 80044e8:	d001      	beq.n	80044ee <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80044ea:	f7ff fa9d 	bl	8003a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <MX_USART2_UART_Init+0x90>)
 80044f0:	0018      	movs	r0, r3
 80044f2:	f005 fa5b 	bl	80099ac <HAL_UARTEx_DisableFifoMode>
 80044f6:	1e03      	subs	r3, r0, #0
 80044f8:	d001      	beq.n	80044fe <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80044fa:	f7ff fa95 	bl	8003a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	200009cc 	.word	0x200009cc
 8004508:	40004400 	.word	0x40004400
 800450c:	000f4240 	.word	0x000f4240

08004510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b093      	sub	sp, #76	; 0x4c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	2334      	movs	r3, #52	; 0x34
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	0018      	movs	r0, r3
 800451e:	2314      	movs	r3, #20
 8004520:	001a      	movs	r2, r3
 8004522:	2100      	movs	r1, #0
 8004524:	f00c ff19 	bl	801135a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004528:	2418      	movs	r4, #24
 800452a:	193b      	adds	r3, r7, r4
 800452c:	0018      	movs	r0, r3
 800452e:	231c      	movs	r3, #28
 8004530:	001a      	movs	r2, r3
 8004532:	2100      	movs	r1, #0
 8004534:	f00c ff11 	bl	801135a <memset>
  if(uartHandle->Instance==USART1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a48      	ldr	r2, [pc, #288]	; (8004660 <HAL_UART_MspInit+0x150>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d146      	bne.n	80045d0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004542:	193b      	adds	r3, r7, r4
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	2200      	movs	r2, #0
 800454c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800454e:	193b      	adds	r3, r7, r4
 8004550:	0018      	movs	r0, r3
 8004552:	f002 fc13 	bl	8006d7c <HAL_RCCEx_PeriphCLKConfig>
 8004556:	1e03      	subs	r3, r0, #0
 8004558:	d001      	beq.n	800455e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800455a:	f7ff fa65 	bl	8003a28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004562:	4b40      	ldr	r3, [pc, #256]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	01c9      	lsls	r1, r1, #7
 8004568:	430a      	orrs	r2, r1
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
 800456c:	4b3d      	ldr	r3, [pc, #244]	; (8004664 <HAL_UART_MspInit+0x154>)
 800456e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	4013      	ands	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_UART_MspInit+0x154>)
 800457c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457e:	4b39      	ldr	r3, [pc, #228]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004580:	2104      	movs	r1, #4
 8004582:	430a      	orrs	r2, r1
 8004584:	635a      	str	r2, [r3, #52]	; 0x34
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_STLink_TX_Pin|UART_STLink_RX_Pin;
 8004592:	2134      	movs	r1, #52	; 0x34
 8004594:	187b      	adds	r3, r7, r1
 8004596:	2230      	movs	r2, #48	; 0x30
 8004598:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	187b      	adds	r3, r7, r1
 800459c:	2202      	movs	r2, #2
 800459e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	187b      	adds	r3, r7, r1
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a6:	187b      	adds	r3, r7, r1
 80045a8:	2200      	movs	r2, #0
 80045aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	2201      	movs	r2, #1
 80045b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <HAL_UART_MspInit+0x158>)
 80045b6:	0019      	movs	r1, r3
 80045b8:	0010      	movs	r0, r2
 80045ba:	f000 ff57 	bl	800546c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80045be:	2200      	movs	r2, #0
 80045c0:	2103      	movs	r1, #3
 80045c2:	201b      	movs	r0, #27
 80045c4:	f000 fe54 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045c8:	201b      	movs	r0, #27
 80045ca:	f000 fe66 	bl	800529a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80045ce:	e043      	b.n	8004658 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a25      	ldr	r2, [pc, #148]	; (800466c <HAL_UART_MspInit+0x15c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d13e      	bne.n	8004658 <HAL_UART_MspInit+0x148>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045da:	2118      	movs	r1, #24
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	2202      	movs	r2, #2
 80045e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	0018      	movs	r0, r3
 80045ec:	f002 fbc6 	bl	8006d7c <HAL_RCCEx_PeriphCLKConfig>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80045f4:	f7ff fa18 	bl	8003a28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_UART_MspInit+0x154>)
 80045fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_UART_MspInit+0x154>)
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	0289      	lsls	r1, r1, #10
 8004602:	430a      	orrs	r2, r1
 8004604:	63da      	str	r2, [r3, #60]	; 0x3c
 8004606:	4b17      	ldr	r3, [pc, #92]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_UART_MspInit+0x154>)
 800461a:	2108      	movs	r1, #8
 800461c:	430a      	orrs	r2, r1
 800461e:	635a      	str	r2, [r3, #52]	; 0x34
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_UART_MspInit+0x154>)
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	2208      	movs	r2, #8
 8004626:	4013      	ands	r3, r2
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_XL320_Pin;
 800462c:	2134      	movs	r1, #52	; 0x34
 800462e:	187b      	adds	r3, r7, r1
 8004630:	2220      	movs	r2, #32
 8004632:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004634:	187b      	adds	r3, r7, r1
 8004636:	2212      	movs	r2, #18
 8004638:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463a:	187b      	adds	r3, r7, r1
 800463c:	2201      	movs	r2, #1
 800463e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8004646:	187b      	adds	r3, r7, r1
 8004648:	2200      	movs	r2, #0
 800464a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_XL320_GPIO_Port, &GPIO_InitStruct);
 800464c:	187b      	adds	r3, r7, r1
 800464e:	4a08      	ldr	r2, [pc, #32]	; (8004670 <HAL_UART_MspInit+0x160>)
 8004650:	0019      	movs	r1, r3
 8004652:	0010      	movs	r0, r2
 8004654:	f000 ff0a 	bl	800546c <HAL_GPIO_Init>
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b013      	add	sp, #76	; 0x4c
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	40013800 	.word	0x40013800
 8004664:	40021000 	.word	0x40021000
 8004668:	50000800 	.word	0x50000800
 800466c:	40004400 	.word	0x40004400
 8004670:	50000c00 	.word	0x50000c00

08004674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004674:	480d      	ldr	r0, [pc, #52]	; (80046ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004676:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004678:	f7ff faf4 	bl	8003c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800467c:	480c      	ldr	r0, [pc, #48]	; (80046b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800467e:	490d      	ldr	r1, [pc, #52]	; (80046b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004680:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <LoopForever+0xe>)
  movs r3, #0
 8004682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004684:	e002      	b.n	800468c <LoopCopyDataInit>

08004686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800468a:	3304      	adds	r3, #4

0800468c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800468c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800468e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004690:	d3f9      	bcc.n	8004686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004694:	4c0a      	ldr	r4, [pc, #40]	; (80046c0 <LoopForever+0x16>)
  movs r3, #0
 8004696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004698:	e001      	b.n	800469e <LoopFillZerobss>

0800469a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800469a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800469c:	3204      	adds	r2, #4

0800469e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800469e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a0:	d3fb      	bcc.n	800469a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80046a2:	f00c fe2d 	bl	8011300 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80046a6:	f7fe ffad 	bl	8003604 <main>

080046aa <LoopForever>:

LoopForever:
  b LoopForever
 80046aa:	e7fe      	b.n	80046aa <LoopForever>
  ldr   r0, =_estack
 80046ac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80046b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b4:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 80046b8:	0801528c 	.word	0x0801528c
  ldr r2, =_sbss
 80046bc:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 80046c0:	20008330 	.word	0x20008330

080046c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046c4:	e7fe      	b.n	80046c4 <ADC1_IRQHandler>
	...

080046c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046ce:	1dfb      	adds	r3, r7, #7
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_Init+0x3c>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_Init+0x3c>)
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	0049      	lsls	r1, r1, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046e2:	2003      	movs	r0, #3
 80046e4:	f000 f810 	bl	8004708 <HAL_InitTick>
 80046e8:	1e03      	subs	r3, r0, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80046ec:	1dfb      	adds	r3, r7, #7
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e001      	b.n	80046f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80046f4:	f7ff f99e 	bl	8003a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046f8:	1dfb      	adds	r3, r7, #7
 80046fa:	781b      	ldrb	r3, [r3, #0]
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40022000 	.word	0x40022000

08004708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004710:	230f      	movs	r3, #15
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_InitTick+0x88>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02b      	beq.n	8004778 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <HAL_InitTick+0x8c>)
 8004722:	681c      	ldr	r4, [r3, #0]
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <HAL_InitTick+0x88>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	0019      	movs	r1, r3
 800472a:	23fa      	movs	r3, #250	; 0xfa
 800472c:	0098      	lsls	r0, r3, #2
 800472e:	f7fb fd07 	bl	8000140 <__udivsi3>
 8004732:	0003      	movs	r3, r0
 8004734:	0019      	movs	r1, r3
 8004736:	0020      	movs	r0, r4
 8004738:	f7fb fd02 	bl	8000140 <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fdbb 	bl	80052ba <HAL_SYSTICK_Config>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d112      	bne.n	800476e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d80a      	bhi.n	8004764 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	2301      	movs	r3, #1
 8004752:	425b      	negs	r3, r3
 8004754:	2200      	movs	r2, #0
 8004756:	0018      	movs	r0, r3
 8004758:	f000 fd8a 	bl	8005270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_InitTick+0x90>)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e00d      	b.n	8004780 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004764:	230f      	movs	r3, #15
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e008      	b.n	8004780 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800476e:	230f      	movs	r3, #15
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e003      	b.n	8004780 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004778:	230f      	movs	r3, #15
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004780:	230f      	movs	r3, #15
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	781b      	ldrb	r3, [r3, #0]
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b005      	add	sp, #20
 800478c:	bd90      	pop	{r4, r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	20000008 	.word	0x20000008
 8004794:	20000000 	.word	0x20000000
 8004798:	20000004 	.word	0x20000004

0800479c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_IncTick+0x1c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_IncTick+0x20>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	18d2      	adds	r2, r2, r3
 80047ac:	4b03      	ldr	r3, [pc, #12]	; (80047bc <HAL_IncTick+0x20>)
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	20000008 	.word	0x20000008
 80047bc:	20000a60 	.word	0x20000a60

080047c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  return uwTick;
 80047c4:	4b02      	ldr	r3, [pc, #8]	; (80047d0 <HAL_GetTick+0x10>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	20000a60 	.word	0x20000a60

080047d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_GetTick>
 80047e0:	0003      	movs	r3, r0
 80047e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	d005      	beq.n	80047fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_Delay+0x44>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	001a      	movs	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	f7ff ffe0 	bl	80047c0 <HAL_GetTick>
 8004800:	0002      	movs	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	429a      	cmp	r2, r3
 800480a:	d8f7      	bhi.n	80047fc <HAL_Delay+0x28>
  {
  }
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b004      	add	sp, #16
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	20000008 	.word	0x20000008

0800481c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a05      	ldr	r2, [pc, #20]	; (8004840 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800482c:	401a      	ands	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	fe3fffff 	.word	0xfe3fffff

08004844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	23e0      	movs	r3, #224	; 0xe0
 8004852:	045b      	lsls	r3, r3, #17
 8004854:	4013      	ands	r3, r2
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}

0800485e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	2104      	movs	r1, #4
 8004872:	400a      	ands	r2, r1
 8004874:	2107      	movs	r1, #7
 8004876:	4091      	lsls	r1, r2
 8004878:	000a      	movs	r2, r1
 800487a:	43d2      	mvns	r2, r2
 800487c:	401a      	ands	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2104      	movs	r1, #4
 8004882:	400b      	ands	r3, r1
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4099      	lsls	r1, r3
 8004888:	000b      	movs	r3, r1
 800488a:	431a      	orrs	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}

08004898 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	2104      	movs	r1, #4
 80048aa:	400a      	ands	r2, r1
 80048ac:	2107      	movs	r1, #7
 80048ae:	4091      	lsls	r1, r2
 80048b0:	000a      	movs	r2, r1
 80048b2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2104      	movs	r1, #4
 80048b8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80048ba:	40da      	lsrs	r2, r3
 80048bc:	0013      	movs	r3, r2
}
 80048be:	0018      	movs	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b002      	add	sp, #8
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	211f      	movs	r1, #31
 80048da:	400a      	ands	r2, r1
 80048dc:	210f      	movs	r1, #15
 80048de:	4091      	lsls	r1, r2
 80048e0:	000a      	movs	r2, r1
 80048e2:	43d2      	mvns	r2, r2
 80048e4:	401a      	ands	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	210f      	movs	r1, #15
 80048ec:	4019      	ands	r1, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	201f      	movs	r0, #31
 80048f2:	4003      	ands	r3, r0
 80048f4:	4099      	lsls	r1, r3
 80048f6:	000b      	movs	r3, r1
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}

08004906 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	035b      	lsls	r3, r3, #13
 8004918:	0b5b      	lsrs	r3, r3, #13
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	0352      	lsls	r2, r2, #13
 800493a:	0b52      	lsrs	r2, r2, #13
 800493c:	43d2      	mvns	r2, r2
 800493e:	401a      	ands	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b002      	add	sp, #8
 800494a:	bd80      	pop	{r7, pc}

0800494c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	0212      	lsls	r2, r2, #8
 8004960:	43d2      	mvns	r2, r2
 8004962:	401a      	ands	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	400b      	ands	r3, r1
 800496c:	4904      	ldr	r1, [pc, #16]	; (8004980 <LL_ADC_SetChannelSamplingTime+0x34>)
 800496e:	400b      	ands	r3, r1
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	07ffff00 	.word	0x07ffff00

08004984 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004992:	4013      	ands	r3, r2
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	0552      	lsls	r2, r2, #21
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	6fffffe8 	.word	0x6fffffe8

080049ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	055b      	lsls	r3, r3, #21
 80049bc:	401a      	ands	r2, r3
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	055b      	lsls	r3, r3, #21
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d101      	bne.n	80049ca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2201      	movs	r2, #1
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <LL_ADC_IsEnabled+0x18>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <LL_ADC_IsEnabled+0x1a>
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2204      	movs	r2, #4
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d101      	bne.n	8004a0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a20:	231f      	movs	r3, #31
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e17f      	b.n	8004d3e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fe fb41 	bl	80030d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2254      	movs	r2, #84	; 0x54
 8004a58:	2100      	movs	r1, #0
 8004a5a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7ff ffa3 	bl	80049ac <LL_ADC_IsInternalRegulatorEnabled>
 8004a66:	1e03      	subs	r3, r0, #0
 8004a68:	d115      	bne.n	8004a96 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7ff ff88 	bl	8004984 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a74:	4bb4      	ldr	r3, [pc, #720]	; (8004d48 <HAL_ADC_Init+0x330>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	49b4      	ldr	r1, [pc, #720]	; (8004d4c <HAL_ADC_Init+0x334>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fb fb60 	bl	8000140 <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a88:	e002      	b.n	8004a90 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f9      	bne.n	8004a8a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff ff86 	bl	80049ac <LL_ADC_IsInternalRegulatorEnabled>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004abc:	231f      	movs	r3, #31
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff ff94 	bl	80049f6 <LL_ADC_REG_IsConversionOngoing>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d000      	beq.n	8004ade <HAL_ADC_Init+0xc6>
 8004adc:	e122      	b.n	8004d24 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d000      	beq.n	8004ae6 <HAL_ADC_Init+0xce>
 8004ae4:	e11e      	b.n	8004d24 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4a99      	ldr	r2, [pc, #612]	; (8004d50 <HAL_ADC_Init+0x338>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	2202      	movs	r2, #2
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff ff6a 	bl	80049d4 <LL_ADC_IsEnabled>
 8004b00:	1e03      	subs	r3, r0, #0
 8004b02:	d000      	beq.n	8004b06 <HAL_ADC_Init+0xee>
 8004b04:	e0ad      	b.n	8004c62 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	7e1b      	ldrb	r3, [r3, #24]
 8004b0e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b10:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7e5b      	ldrb	r3, [r3, #25]
 8004b16:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b18:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7e9b      	ldrb	r3, [r3, #26]
 8004b1e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b20:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <HAL_ADC_Init+0x118>
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_Init+0x11a>
 8004b30:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b32:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b38:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da04      	bge.n	8004b4c <HAL_ADC_Init+0x134>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	e001      	b.n	8004b50 <HAL_ADC_Init+0x138>
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004b50:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	5c5b      	ldrb	r3, [r3, r1]
 8004b58:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b5a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d115      	bne.n	8004b98 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7e9b      	ldrb	r3, [r3, #26]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	0252      	lsls	r2, r2, #9
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e00b      	b.n	8004b98 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	2220      	movs	r2, #32
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	2201      	movs	r2, #1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba4:	23e0      	movs	r3, #224	; 0xe0
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a65      	ldr	r2, [pc, #404]	; (8004d54 <HAL_ADC_Init+0x33c>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0f9b      	lsrs	r3, r3, #30
 8004bd2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	223c      	movs	r2, #60	; 0x3c
 8004be4:	5c9b      	ldrb	r3, [r3, r2]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d111      	bne.n	8004c0e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0f9b      	lsrs	r3, r3, #30
 8004bf0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bf6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004bfc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004c02:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	4a50      	ldr	r2, [pc, #320]	; (8004d58 <HAL_ADC_Init+0x340>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	23c0      	movs	r3, #192	; 0xc0
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d018      	beq.n	8004c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	05db      	lsls	r3, r3, #23
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d012      	beq.n	8004c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d00c      	beq.n	8004c62 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004c48:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <HAL_ADC_Init+0x344>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a44      	ldr	r2, [pc, #272]	; (8004d60 <HAL_ADC_Init+0x348>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	0019      	movs	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	23f0      	movs	r3, #240	; 0xf0
 8004c58:	039b      	lsls	r3, r3, #14
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_ADC_Init+0x344>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f7ff fdf6 	bl	800485e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	493a      	ldr	r1, [pc, #232]	; (8004d64 <HAL_ADC_Init+0x34c>)
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	f7ff fdee 	bl	800485e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2110      	movs	r1, #16
 8004c96:	4249      	negs	r1, r1
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9c:	e018      	b.n	8004cd0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	039b      	lsls	r3, r3, #14
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d112      	bne.n	8004cd0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	221c      	movs	r2, #28
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	4252      	negs	r2, r2
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f7ff fdde 	bl	8004898 <LL_ADC_GetSamplingTimeCommonChannels>
 8004cdc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d10b      	bne.n	8004cfe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004cfc:	e01c      	b.n	8004d38 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	2212      	movs	r2, #18
 8004d04:	4393      	bics	r3, r2
 8004d06:	2210      	movs	r2, #16
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	2201      	movs	r2, #1
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004d1a:	231f      	movs	r3, #31
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d22:	e009      	b.n	8004d38 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	2210      	movs	r2, #16
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d30:	231f      	movs	r3, #31
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004d38:	231f      	movs	r3, #31
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b008      	add	sp, #32
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	00030d40 	.word	0x00030d40
 8004d50:	fffffefd 	.word	0xfffffefd
 8004d54:	fffe0201 	.word	0xfffe0201
 8004d58:	1ffffc02 	.word	0x1ffffc02
 8004d5c:	40012708 	.word	0x40012708
 8004d60:	ffc3ffff 	.word	0xffc3ffff
 8004d64:	07ffff04 	.word	0x07ffff04

08004d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d72:	2317      	movs	r3, #23
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2254      	movs	r2, #84	; 0x54
 8004d82:	5c9b      	ldrb	r3, [r3, r2]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x24>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e1c0      	b.n	800510e <HAL_ADC_ConfigChannel+0x3a6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2254      	movs	r2, #84	; 0x54
 8004d90:	2101      	movs	r1, #1
 8004d92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7ff fe2c 	bl	80049f6 <LL_ADC_REG_IsConversionOngoing>
 8004d9e:	1e03      	subs	r3, r0, #0
 8004da0:	d000      	beq.n	8004da4 <HAL_ADC_ConfigChannel+0x3c>
 8004da2:	e1a3      	b.n	80050ec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d100      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x46>
 8004dac:	e143      	b.n	8005036 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d004      	beq.n	8004dc4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004dbe:	4ac1      	ldr	r2, [pc, #772]	; (80050c4 <HAL_ADC_ConfigChannel+0x35c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d108      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0019      	movs	r1, r3
 8004dce:	0010      	movs	r0, r2
 8004dd0:	f7ff fd99 	bl	8004906 <LL_ADC_REG_SetSequencerChAdd>
 8004dd4:	e0c9      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	211f      	movs	r1, #31
 8004de0:	400b      	ands	r3, r1
 8004de2:	210f      	movs	r1, #15
 8004de4:	4099      	lsls	r1, r3
 8004de6:	000b      	movs	r3, r1
 8004de8:	43db      	mvns	r3, r3
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	035b      	lsls	r3, r3, #13
 8004df4:	0b5b      	lsrs	r3, r3, #13
 8004df6:	d105      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x9c>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0e9b      	lsrs	r3, r3, #26
 8004dfe:	221f      	movs	r2, #31
 8004e00:	4013      	ands	r3, r2
 8004e02:	e098      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d000      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0xa8>
 8004e0e:	e091      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x1cc>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2202      	movs	r2, #2
 8004e16:	4013      	ands	r3, r2
 8004e18:	d000      	beq.n	8004e1c <HAL_ADC_ConfigChannel+0xb4>
 8004e1a:	e089      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x1c8>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2204      	movs	r2, #4
 8004e22:	4013      	ands	r3, r2
 8004e24:	d000      	beq.n	8004e28 <HAL_ADC_ConfigChannel+0xc0>
 8004e26:	e081      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x1c4>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d000      	beq.n	8004e34 <HAL_ADC_ConfigChannel+0xcc>
 8004e32:	e079      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x1c0>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2210      	movs	r2, #16
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d000      	beq.n	8004e40 <HAL_ADC_ConfigChannel+0xd8>
 8004e3e:	e071      	b.n	8004f24 <HAL_ADC_ConfigChannel+0x1bc>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2220      	movs	r2, #32
 8004e46:	4013      	ands	r3, r2
 8004e48:	d000      	beq.n	8004e4c <HAL_ADC_ConfigChannel+0xe4>
 8004e4a:	e069      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x1b8>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2240      	movs	r2, #64	; 0x40
 8004e52:	4013      	ands	r3, r2
 8004e54:	d000      	beq.n	8004e58 <HAL_ADC_ConfigChannel+0xf0>
 8004e56:	e061      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x1b4>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d000      	beq.n	8004e64 <HAL_ADC_ConfigChannel+0xfc>
 8004e62:	e059      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x1b0>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d151      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x1ac>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d149      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x1a8>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4013      	ands	r3, r2
 8004e86:	d141      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x1a4>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	4013      	ands	r3, r2
 8004e92:	d139      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1a0>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d131      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x19c>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d129      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x198>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d121      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x194>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	2380      	movs	r3, #128	; 0x80
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d119      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x190>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	025b      	lsls	r3, r3, #9
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d111      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x18c>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x188>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	02db      	lsls	r3, r3, #11
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d001      	beq.n	8004eec <HAL_ADC_ConfigChannel+0x184>
 8004ee8:	2312      	movs	r3, #18
 8004eea:	e024      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004eec:	2300      	movs	r3, #0
 8004eee:	e022      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004ef0:	2311      	movs	r3, #17
 8004ef2:	e020      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	e01e      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004ef8:	230f      	movs	r3, #15
 8004efa:	e01c      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004efc:	230e      	movs	r3, #14
 8004efe:	e01a      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f00:	230d      	movs	r3, #13
 8004f02:	e018      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f04:	230c      	movs	r3, #12
 8004f06:	e016      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f08:	230b      	movs	r3, #11
 8004f0a:	e014      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f0c:	230a      	movs	r3, #10
 8004f0e:	e012      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f10:	2309      	movs	r3, #9
 8004f12:	e010      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f14:	2308      	movs	r3, #8
 8004f16:	e00e      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f18:	2307      	movs	r3, #7
 8004f1a:	e00c      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f1c:	2306      	movs	r3, #6
 8004f1e:	e00a      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f20:	2305      	movs	r3, #5
 8004f22:	e008      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f24:	2304      	movs	r3, #4
 8004f26:	e006      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e004      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e002      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x1ce>
 8004f34:	2300      	movs	r3, #0
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	6852      	ldr	r2, [r2, #4]
 8004f3a:	201f      	movs	r0, #31
 8004f3c:	4002      	ands	r2, r0
 8004f3e:	4093      	lsls	r3, r2
 8004f40:	000a      	movs	r2, r1
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d808      	bhi.n	8004f6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	001a      	movs	r2, r3
 8004f66:	f7ff fcae 	bl	80048c6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	001a      	movs	r2, r3
 8004f78:	f7ff fce8 	bl	800494c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db00      	blt.n	8004f86 <HAL_ADC_ConfigChannel+0x21e>
 8004f84:	e0bc      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f86:	4b50      	ldr	r3, [pc, #320]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7ff fc5b 	bl	8004844 <LL_ADC_GetCommonPathInternalCh>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4d      	ldr	r2, [pc, #308]	; (80050cc <HAL_ADC_ConfigChannel+0x364>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d122      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004fa4:	d11d      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2280      	movs	r2, #128	; 0x80
 8004faa:	0412      	lsls	r2, r2, #16
 8004fac:	4313      	orrs	r3, r2
 8004fae:	4a46      	ldr	r2, [pc, #280]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	0010      	movs	r0, r2
 8004fb4:	f7ff fc32 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fb8:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <HAL_ADC_ConfigChannel+0x368>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4945      	ldr	r1, [pc, #276]	; (80050d4 <HAL_ADC_ConfigChannel+0x36c>)
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fb f8be 	bl	8000140 <__udivsi3>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	0013      	movs	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fd2:	e002      	b.n	8004fda <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f9      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004fe0:	e08e      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <HAL_ADC_ConfigChannel+0x370>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10e      	bne.n	800500a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	045b      	lsls	r3, r3, #17
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d109      	bne.n	800500a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2280      	movs	r2, #128	; 0x80
 8004ffa:	0452      	lsls	r2, r2, #17
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 8005000:	0019      	movs	r1, r3
 8005002:	0010      	movs	r0, r2
 8005004:	f7ff fc0a 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
 8005008:	e07a      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a33      	ldr	r2, [pc, #204]	; (80050dc <HAL_ADC_ConfigChannel+0x374>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d000      	beq.n	8005016 <HAL_ADC_ConfigChannel+0x2ae>
 8005014:	e074      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	03db      	lsls	r3, r3, #15
 800501c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800501e:	d000      	beq.n	8005022 <HAL_ADC_ConfigChannel+0x2ba>
 8005020:	e06e      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2280      	movs	r2, #128	; 0x80
 8005026:	03d2      	lsls	r2, r2, #15
 8005028:	4313      	orrs	r3, r2
 800502a:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 800502c:	0019      	movs	r1, r3
 800502e:	0010      	movs	r0, r2
 8005030:	f7ff fbf4 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
 8005034:	e064      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	2380      	movs	r3, #128	; 0x80
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	429a      	cmp	r2, r3
 8005040:	d004      	beq.n	800504c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_ADC_ConfigChannel+0x35c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d107      	bne.n	800505c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	0019      	movs	r1, r3
 8005056:	0010      	movs	r0, r2
 8005058:	f7ff fc66 	bl	8004928 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	da4d      	bge.n	8005100 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 8005066:	0018      	movs	r0, r3
 8005068:	f7ff fbec 	bl	8004844 <LL_ADC_GetCommonPathInternalCh>
 800506c:	0003      	movs	r3, r0
 800506e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <HAL_ADC_ConfigChannel+0x364>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_ADC_ConfigChannel+0x378>)
 800507e:	4013      	ands	r3, r2
 8005080:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 8005082:	0019      	movs	r1, r3
 8005084:	0010      	movs	r0, r2
 8005086:	f7ff fbc9 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
 800508a:	e039      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a11      	ldr	r2, [pc, #68]	; (80050d8 <HAL_ADC_ConfigChannel+0x370>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <HAL_ADC_ConfigChannel+0x37c>)
 800509a:	4013      	ands	r3, r2
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 800509e:	0019      	movs	r1, r3
 80050a0:	0010      	movs	r0, r2
 80050a2:	f7ff fbbb 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
 80050a6:	e02b      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <HAL_ADC_ConfigChannel+0x374>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d126      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <HAL_ADC_ConfigChannel+0x380>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <HAL_ADC_ConfigChannel+0x360>)
 80050ba:	0019      	movs	r1, r3
 80050bc:	0010      	movs	r0, r2
 80050be:	f7ff fbad 	bl	800481c <LL_ADC_SetCommonPathInternalCh>
 80050c2:	e01d      	b.n	8005100 <HAL_ADC_ConfigChannel+0x398>
 80050c4:	80000004 	.word	0x80000004
 80050c8:	40012708 	.word	0x40012708
 80050cc:	b0001000 	.word	0xb0001000
 80050d0:	20000000 	.word	0x20000000
 80050d4:	00030d40 	.word	0x00030d40
 80050d8:	b8004000 	.word	0xb8004000
 80050dc:	b4002000 	.word	0xb4002000
 80050e0:	ff7fffff 	.word	0xff7fffff
 80050e4:	feffffff 	.word	0xfeffffff
 80050e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	2220      	movs	r2, #32
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80050f8:	2317      	movs	r3, #23
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2254      	movs	r2, #84	; 0x54
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005108:	2317      	movs	r3, #23
 800510a:	18fb      	adds	r3, r7, r3
 800510c:	781b      	ldrb	r3, [r3, #0]
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b006      	add	sp, #24
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)

08005118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	0002      	movs	r2, r0
 8005120:	1dfb      	adds	r3, r7, #7
 8005122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b7f      	cmp	r3, #127	; 0x7f
 800512a:	d809      	bhi.n	8005140 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	001a      	movs	r2, r3
 8005132:	231f      	movs	r3, #31
 8005134:	401a      	ands	r2, r3
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <__NVIC_EnableIRQ+0x30>)
 8005138:	2101      	movs	r1, #1
 800513a:	4091      	lsls	r1, r2
 800513c:	000a      	movs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	e000e100 	.word	0xe000e100

0800514c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	0002      	movs	r2, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	1dfb      	adds	r3, r7, #7
 8005158:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800515a:	1dfb      	adds	r3, r7, #7
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b7f      	cmp	r3, #127	; 0x7f
 8005160:	d828      	bhi.n	80051b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005162:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <__NVIC_SetPriority+0xd4>)
 8005164:	1dfb      	adds	r3, r7, #7
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b25b      	sxtb	r3, r3
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	33c0      	adds	r3, #192	; 0xc0
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	589b      	ldr	r3, [r3, r2]
 8005172:	1dfa      	adds	r2, r7, #7
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	0011      	movs	r1, r2
 8005178:	2203      	movs	r2, #3
 800517a:	400a      	ands	r2, r1
 800517c:	00d2      	lsls	r2, r2, #3
 800517e:	21ff      	movs	r1, #255	; 0xff
 8005180:	4091      	lsls	r1, r2
 8005182:	000a      	movs	r2, r1
 8005184:	43d2      	mvns	r2, r2
 8005186:	401a      	ands	r2, r3
 8005188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	22ff      	movs	r2, #255	; 0xff
 8005190:	401a      	ands	r2, r3
 8005192:	1dfb      	adds	r3, r7, #7
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	0018      	movs	r0, r3
 8005198:	2303      	movs	r3, #3
 800519a:	4003      	ands	r3, r0
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051a0:	481f      	ldr	r0, [pc, #124]	; (8005220 <__NVIC_SetPriority+0xd4>)
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	430a      	orrs	r2, r1
 80051ac:	33c0      	adds	r3, #192	; 0xc0
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051b2:	e031      	b.n	8005218 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <__NVIC_SetPriority+0xd8>)
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	0019      	movs	r1, r3
 80051bc:	230f      	movs	r3, #15
 80051be:	400b      	ands	r3, r1
 80051c0:	3b08      	subs	r3, #8
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3306      	adds	r3, #6
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	3304      	adds	r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	1dfa      	adds	r2, r7, #7
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	0011      	movs	r1, r2
 80051d4:	2203      	movs	r2, #3
 80051d6:	400a      	ands	r2, r1
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	21ff      	movs	r1, #255	; 0xff
 80051dc:	4091      	lsls	r1, r2
 80051de:	000a      	movs	r2, r1
 80051e0:	43d2      	mvns	r2, r2
 80051e2:	401a      	ands	r2, r3
 80051e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	22ff      	movs	r2, #255	; 0xff
 80051ec:	401a      	ands	r2, r3
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	0018      	movs	r0, r3
 80051f4:	2303      	movs	r3, #3
 80051f6:	4003      	ands	r3, r0
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051fc:	4809      	ldr	r0, [pc, #36]	; (8005224 <__NVIC_SetPriority+0xd8>)
 80051fe:	1dfb      	adds	r3, r7, #7
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	001c      	movs	r4, r3
 8005204:	230f      	movs	r3, #15
 8005206:	4023      	ands	r3, r4
 8005208:	3b08      	subs	r3, #8
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	430a      	orrs	r2, r1
 800520e:	3306      	adds	r3, #6
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	18c3      	adds	r3, r0, r3
 8005214:	3304      	adds	r3, #4
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	46bd      	mov	sp, r7
 800521c:	b003      	add	sp, #12
 800521e:	bd90      	pop	{r4, r7, pc}
 8005220:	e000e100 	.word	0xe000e100
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	045b      	lsls	r3, r3, #17
 8005238:	429a      	cmp	r2, r3
 800523a:	d301      	bcc.n	8005240 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800523c:	2301      	movs	r3, #1
 800523e:	e010      	b.n	8005262 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <SysTick_Config+0x44>)
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	3a01      	subs	r2, #1
 8005246:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005248:	2301      	movs	r3, #1
 800524a:	425b      	negs	r3, r3
 800524c:	2103      	movs	r1, #3
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff ff7c 	bl	800514c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <SysTick_Config+0x44>)
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <SysTick_Config+0x44>)
 800525c:	2207      	movs	r2, #7
 800525e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005260:	2300      	movs	r3, #0
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	e000e010 	.word	0xe000e010

08005270 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	210f      	movs	r1, #15
 800527c:	187b      	adds	r3, r7, r1
 800527e:	1c02      	adds	r2, r0, #0
 8005280:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	187b      	adds	r3, r7, r1
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b25b      	sxtb	r3, r3
 800528a:	0011      	movs	r1, r2
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff ff5d 	bl	800514c <__NVIC_SetPriority>
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b004      	add	sp, #16
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	0002      	movs	r2, r0
 80052a2:	1dfb      	adds	r3, r7, #7
 80052a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052a6:	1dfb      	adds	r3, r7, #7
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff ff33 	bl	8005118 <__NVIC_EnableIRQ>
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b002      	add	sp, #8
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff ffaf 	bl	8005228 <SysTick_Config>
 80052ca:	0003      	movs	r3, r0
}
 80052cc:	0018      	movs	r0, r3
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b002      	add	sp, #8
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e050      	b.n	8005388 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2225      	movs	r2, #37	; 0x25
 80052ea:	5c9b      	ldrb	r3, [r3, r2]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d008      	beq.n	8005304 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	; 0x24
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e041      	b.n	8005388 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	210e      	movs	r1, #14
 8005310:	438a      	bics	r2, r1
 8005312:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	491c      	ldr	r1, [pc, #112]	; (8005390 <HAL_DMA_Abort+0xbc>)
 8005320:	400a      	ands	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2101      	movs	r1, #1
 8005330:	438a      	bics	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8005334:	4b17      	ldr	r3, [pc, #92]	; (8005394 <HAL_DMA_Abort+0xc0>)
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	221c      	movs	r2, #28
 800533e:	4013      	ands	r3, r2
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <HAL_DMA_Abort+0xc0>)
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005352:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005366:	490a      	ldr	r1, [pc, #40]	; (8005390 <HAL_DMA_Abort+0xbc>)
 8005368:	400a      	ands	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005374:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2225      	movs	r2, #37	; 0x25
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b002      	add	sp, #8
 800538e:	bd80      	pop	{r7, pc}
 8005390:	fffffeff 	.word	0xfffffeff
 8005394:	40020000 	.word	0x40020000

08005398 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	210f      	movs	r1, #15
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2225      	movs	r2, #37	; 0x25
 80053ac:	5c9b      	ldrb	r3, [r3, r2]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d006      	beq.n	80053c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2204      	movs	r2, #4
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053ba:	187b      	adds	r3, r7, r1
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	e049      	b.n	8005456 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	210e      	movs	r1, #14
 80053ce:	438a      	bics	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	438a      	bics	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	491d      	ldr	r1, [pc, #116]	; (8005464 <HAL_DMA_Abort_IT+0xcc>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80053f2:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <HAL_DMA_Abort_IT+0xd0>)
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	221c      	movs	r2, #28
 80053fc:	4013      	ands	r3, r2
 80053fe:	2201      	movs	r2, #1
 8005400:	409a      	lsls	r2, r3
 8005402:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_DMA_Abort_IT+0xd0>)
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005410:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005424:	490f      	ldr	r1, [pc, #60]	; (8005464 <HAL_DMA_Abort_IT+0xcc>)
 8005426:	400a      	ands	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005432:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2225      	movs	r2, #37	; 0x25
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	2100      	movs	r1, #0
 8005442:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d004      	beq.n	8005456 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	0010      	movs	r0, r2
 8005454:	4798      	blx	r3
    }
  }
  return status;
 8005456:	230f      	movs	r3, #15
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	781b      	ldrb	r3, [r3, #0]
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b004      	add	sp, #16
 8005462:	bd80      	pop	{r7, pc}
 8005464:	fffffeff 	.word	0xfffffeff
 8005468:	40020000 	.word	0x40020000

0800546c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800547a:	e147      	b.n	800570c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2101      	movs	r1, #1
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4091      	lsls	r1, r2
 8005486:	000a      	movs	r2, r1
 8005488:	4013      	ands	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d100      	bne.n	8005494 <HAL_GPIO_Init+0x28>
 8005492:	e138      	b.n	8005706 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	4013      	ands	r3, r2
 800549c:	2b01      	cmp	r3, #1
 800549e:	d005      	beq.n	80054ac <HAL_GPIO_Init+0x40>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2203      	movs	r2, #3
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d130      	bne.n	800550e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2203      	movs	r2, #3
 80054b8:	409a      	lsls	r2, r3
 80054ba:	0013      	movs	r3, r2
 80054bc:	43da      	mvns	r2, r3
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	409a      	lsls	r2, r3
 80054ce:	0013      	movs	r3, r2
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054e2:	2201      	movs	r2, #1
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	409a      	lsls	r2, r3
 80054e8:	0013      	movs	r3, r2
 80054ea:	43da      	mvns	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4013      	ands	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	2201      	movs	r2, #1
 80054fa:	401a      	ands	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	409a      	lsls	r2, r3
 8005500:	0013      	movs	r3, r2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2203      	movs	r2, #3
 8005514:	4013      	ands	r3, r2
 8005516:	2b03      	cmp	r3, #3
 8005518:	d017      	beq.n	800554a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	2203      	movs	r2, #3
 8005526:	409a      	lsls	r2, r3
 8005528:	0013      	movs	r3, r2
 800552a:	43da      	mvns	r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	409a      	lsls	r2, r3
 800553c:	0013      	movs	r3, r2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2203      	movs	r2, #3
 8005550:	4013      	ands	r3, r2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d123      	bne.n	800559e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	08da      	lsrs	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3208      	adds	r2, #8
 800555e:	0092      	lsls	r2, r2, #2
 8005560:	58d3      	ldr	r3, [r2, r3]
 8005562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2207      	movs	r2, #7
 8005568:	4013      	ands	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	220f      	movs	r2, #15
 800556e:	409a      	lsls	r2, r3
 8005570:	0013      	movs	r3, r2
 8005572:	43da      	mvns	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2107      	movs	r1, #7
 8005582:	400b      	ands	r3, r1
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	409a      	lsls	r2, r3
 8005588:	0013      	movs	r3, r2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	08da      	lsrs	r2, r3, #3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3208      	adds	r2, #8
 8005598:	0092      	lsls	r2, r2, #2
 800559a:	6939      	ldr	r1, [r7, #16]
 800559c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	2203      	movs	r2, #3
 80055aa:	409a      	lsls	r2, r3
 80055ac:	0013      	movs	r3, r2
 80055ae:	43da      	mvns	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2203      	movs	r2, #3
 80055bc:	401a      	ands	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	0013      	movs	r3, r2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	23c0      	movs	r3, #192	; 0xc0
 80055d8:	029b      	lsls	r3, r3, #10
 80055da:	4013      	ands	r3, r2
 80055dc:	d100      	bne.n	80055e0 <HAL_GPIO_Init+0x174>
 80055de:	e092      	b.n	8005706 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80055e0:	4a50      	ldr	r2, [pc, #320]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	089b      	lsrs	r3, r3, #2
 80055e6:	3318      	adds	r3, #24
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	589b      	ldr	r3, [r3, r2]
 80055ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2203      	movs	r2, #3
 80055f2:	4013      	ands	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	220f      	movs	r2, #15
 80055f8:	409a      	lsls	r2, r3
 80055fa:	0013      	movs	r3, r2
 80055fc:	43da      	mvns	r2, r3
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	23a0      	movs	r3, #160	; 0xa0
 8005608:	05db      	lsls	r3, r3, #23
 800560a:	429a      	cmp	r2, r3
 800560c:	d013      	beq.n	8005636 <HAL_GPIO_Init+0x1ca>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a45      	ldr	r2, [pc, #276]	; (8005728 <HAL_GPIO_Init+0x2bc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00d      	beq.n	8005632 <HAL_GPIO_Init+0x1c6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a44      	ldr	r2, [pc, #272]	; (800572c <HAL_GPIO_Init+0x2c0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <HAL_GPIO_Init+0x1c2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a43      	ldr	r2, [pc, #268]	; (8005730 <HAL_GPIO_Init+0x2c4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <HAL_GPIO_Init+0x1be>
 8005626:	2303      	movs	r3, #3
 8005628:	e006      	b.n	8005638 <HAL_GPIO_Init+0x1cc>
 800562a:	2305      	movs	r3, #5
 800562c:	e004      	b.n	8005638 <HAL_GPIO_Init+0x1cc>
 800562e:	2302      	movs	r3, #2
 8005630:	e002      	b.n	8005638 <HAL_GPIO_Init+0x1cc>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_GPIO_Init+0x1cc>
 8005636:	2300      	movs	r3, #0
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	2103      	movs	r1, #3
 800563c:	400a      	ands	r2, r1
 800563e:	00d2      	lsls	r2, r2, #3
 8005640:	4093      	lsls	r3, r2
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005648:	4936      	ldr	r1, [pc, #216]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	3318      	adds	r3, #24
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005656:	4b33      	ldr	r3, [pc, #204]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43da      	mvns	r2, r3
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	035b      	lsls	r3, r3, #13
 800566e:	4013      	ands	r3, r2
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800567a:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	43da      	mvns	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	039b      	lsls	r3, r3, #14
 8005698:	4013      	ands	r3, r2
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056a4:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 80056ac:	2384      	movs	r3, #132	; 0x84
 80056ae:	58d3      	ldr	r3, [r2, r3]
 80056b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	43da      	mvns	r2, r3
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4013      	ands	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	029b      	lsls	r3, r3, #10
 80056c4:	4013      	ands	r3, r2
 80056c6:	d003      	beq.n	80056d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056d0:	4914      	ldr	r1, [pc, #80]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 80056d2:	2284      	movs	r2, #132	; 0x84
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80056d8:	4a12      	ldr	r2, [pc, #72]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	58d3      	ldr	r3, [r2, r3]
 80056de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	4013      	ands	r3, r2
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056fe:	4909      	ldr	r1, [pc, #36]	; (8005724 <HAL_GPIO_Init+0x2b8>)
 8005700:	2280      	movs	r2, #128	; 0x80
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	40da      	lsrs	r2, r3
 8005714:	1e13      	subs	r3, r2, #0
 8005716:	d000      	beq.n	800571a <HAL_GPIO_Init+0x2ae>
 8005718:	e6b0      	b.n	800547c <HAL_GPIO_Init+0x10>
  }
}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b006      	add	sp, #24
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021800 	.word	0x40021800
 8005728:	50000400 	.word	0x50000400
 800572c:	50000800 	.word	0x50000800
 8005730:	50000c00 	.word	0x50000c00

08005734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	0008      	movs	r0, r1
 800573e:	0011      	movs	r1, r2
 8005740:	1cbb      	adds	r3, r7, #2
 8005742:	1c02      	adds	r2, r0, #0
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	1c7b      	adds	r3, r7, #1
 8005748:	1c0a      	adds	r2, r1, #0
 800574a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800574c:	1c7b      	adds	r3, r7, #1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005754:	1cbb      	adds	r3, r7, #2
 8005756:	881a      	ldrh	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800575c:	e003      	b.n	8005766 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800575e:	1cbb      	adds	r3, r7, #2
 8005760:	881a      	ldrh	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b002      	add	sp, #8
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	0002      	movs	r2, r0
 8005778:	1dbb      	adds	r3, r7, #6
 800577a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800577c:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	1dba      	adds	r2, r7, #6
 8005782:	8812      	ldrh	r2, [r2, #0]
 8005784:	4013      	ands	r3, r2
 8005786:	d008      	beq.n	800579a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800578a:	1dba      	adds	r2, r7, #6
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	0018      	movs	r0, r3
 8005796:	f7fe f933 	bl	8003a00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	1dba      	adds	r2, r7, #6
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	4013      	ands	r3, r2
 80057a4:	d008      	beq.n	80057b8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80057a8:	1dba      	adds	r2, r7, #6
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80057ae:	1dbb      	adds	r3, r7, #6
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f806 	bl	80057c4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021800 	.word	0x40021800

080057c4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	0002      	movs	r2, r0
 80057cc:	1dbb      	adds	r3, r7, #6
 80057ce:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b002      	add	sp, #8
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e082      	b.n	80058f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2240      	movs	r2, #64	; 0x40
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0018      	movs	r0, r3
 8005802:	f7fd fe45 	bl	8003490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2241      	movs	r2, #65	; 0x41
 800580a:	2124      	movs	r1, #36	; 0x24
 800580c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2101      	movs	r1, #1
 800581a:	438a      	bics	r2, r1
 800581c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4934      	ldr	r1, [pc, #208]	; (80058f8 <HAL_I2C_Init+0x120>)
 8005828:	400a      	ands	r2, r1
 800582a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4931      	ldr	r1, [pc, #196]	; (80058fc <HAL_I2C_Init+0x124>)
 8005838:	400a      	ands	r2, r1
 800583a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d108      	bne.n	8005856 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	0209      	lsls	r1, r1, #8
 8005850:	430a      	orrs	r2, r1
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	e007      	b.n	8005866 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2184      	movs	r1, #132	; 0x84
 8005860:	0209      	lsls	r1, r1, #8
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d104      	bne.n	8005878 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	491f      	ldr	r1, [pc, #124]	; (8005900 <HAL_I2C_Init+0x128>)
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	491a      	ldr	r1, [pc, #104]	; (80058fc <HAL_I2C_Init+0x124>)
 8005894:	400a      	ands	r2, r1
 8005896:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69d9      	ldr	r1, [r3, #28]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2101      	movs	r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2241      	movs	r2, #65	; 0x41
 80058dc:	2120      	movs	r1, #32
 80058de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2242      	movs	r2, #66	; 0x42
 80058ea:	2100      	movs	r1, #0
 80058ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b002      	add	sp, #8
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	f0ffffff 	.word	0xf0ffffff
 80058fc:	ffff7fff 	.word	0xffff7fff
 8005900:	02008000 	.word	0x02008000

08005904 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	0008      	movs	r0, r1
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	0019      	movs	r1, r3
 8005912:	230a      	movs	r3, #10
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	1c02      	adds	r2, r0, #0
 8005918:	801a      	strh	r2, [r3, #0]
 800591a:	2308      	movs	r3, #8
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	1c0a      	adds	r2, r1, #0
 8005920:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2241      	movs	r2, #65	; 0x41
 8005926:	5c9b      	ldrb	r3, [r3, r2]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b20      	cmp	r3, #32
 800592c:	d000      	beq.n	8005930 <HAL_I2C_Master_Transmit+0x2c>
 800592e:	e0e7      	b.n	8005b00 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2240      	movs	r2, #64	; 0x40
 8005934:	5c9b      	ldrb	r3, [r3, r2]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_I2C_Master_Transmit+0x3a>
 800593a:	2302      	movs	r3, #2
 800593c:	e0e1      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	2101      	movs	r1, #1
 8005944:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005946:	f7fe ff3b 	bl	80047c0 <HAL_GetTick>
 800594a:	0003      	movs	r3, r0
 800594c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	0219      	lsls	r1, r3, #8
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2319      	movs	r3, #25
 800595a:	2201      	movs	r2, #1
 800595c:	f000 fa04 	bl	8005d68 <I2C_WaitOnFlagUntilTimeout>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0cc      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2241      	movs	r2, #65	; 0x41
 800596c:	2121      	movs	r1, #33	; 0x21
 800596e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2242      	movs	r2, #66	; 0x42
 8005974:	2110      	movs	r1, #16
 8005976:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2208      	movs	r2, #8
 8005988:	18ba      	adds	r2, r7, r2
 800598a:	8812      	ldrh	r2, [r2, #0]
 800598c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2bff      	cmp	r3, #255	; 0xff
 800599c:	d911      	bls.n	80059c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	045c      	lsls	r4, r3, #17
 80059ae:	230a      	movs	r3, #10
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	8819      	ldrh	r1, [r3, #0]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <HAL_I2C_Master_Transmit+0x208>)
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	0023      	movs	r3, r4
 80059bc:	f000 fc08 	bl	80061d0 <I2C_TransferConfig>
 80059c0:	e075      	b.n	8005aae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	049c      	lsls	r4, r3, #18
 80059d6:	230a      	movs	r3, #10
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	8819      	ldrh	r1, [r3, #0]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	4b4b      	ldr	r3, [pc, #300]	; (8005b0c <HAL_I2C_Master_Transmit+0x208>)
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	0023      	movs	r3, r4
 80059e4:	f000 fbf4 	bl	80061d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80059e8:	e061      	b.n	8005aae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 f9f8 	bl	8005de6 <I2C_WaitOnTXISFlagUntilTimeout>
 80059f6:	1e03      	subs	r3, r0, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e081      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d03a      	beq.n	8005aae <HAL_I2C_Master_Transmit+0x1aa>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d136      	bne.n	8005aae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	0013      	movs	r3, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2180      	movs	r1, #128	; 0x80
 8005a4e:	f000 f98b 	bl	8005d68 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e053      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2bff      	cmp	r3, #255	; 0xff
 8005a62:	d911      	bls.n	8005a88 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	045c      	lsls	r4, r3, #17
 8005a74:	230a      	movs	r3, #10
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	8819      	ldrh	r1, [r3, #0]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	0023      	movs	r3, r4
 8005a82:	f000 fba5 	bl	80061d0 <I2C_TransferConfig>
 8005a86:	e012      	b.n	8005aae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	049c      	lsls	r4, r3, #18
 8005a9c:	230a      	movs	r3, #10
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	8819      	ldrh	r1, [r3, #0]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	0023      	movs	r3, r4
 8005aaa:	f000 fb91 	bl	80061d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d198      	bne.n	80059ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f000 f9d0 	bl	8005e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ac4:	1e03      	subs	r3, r0, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e01a      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	490c      	ldr	r1, [pc, #48]	; (8005b10 <HAL_I2C_Master_Transmit+0x20c>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2241      	movs	r2, #65	; 0x41
 8005ae8:	2120      	movs	r1, #32
 8005aea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2242      	movs	r2, #66	; 0x42
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2240      	movs	r2, #64	; 0x40
 8005af8:	2100      	movs	r1, #0
 8005afa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b007      	add	sp, #28
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	80002000 	.word	0x80002000
 8005b10:	fe00e800 	.word	0xfe00e800

08005b14 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	0008      	movs	r0, r1
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	0019      	movs	r1, r3
 8005b22:	230a      	movs	r3, #10
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	1c02      	adds	r2, r0, #0
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	1c0a      	adds	r2, r1, #0
 8005b30:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2241      	movs	r2, #65	; 0x41
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d000      	beq.n	8005b40 <HAL_I2C_Master_Receive+0x2c>
 8005b3e:	e0e8      	b.n	8005d12 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2240      	movs	r2, #64	; 0x40
 8005b44:	5c9b      	ldrb	r3, [r3, r2]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_Master_Receive+0x3a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e0e2      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	2101      	movs	r1, #1
 8005b54:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b56:	f7fe fe33 	bl	80047c0 <HAL_GetTick>
 8005b5a:	0003      	movs	r3, r0
 8005b5c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	0219      	lsls	r1, r3, #8
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2319      	movs	r3, #25
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f000 f8fc 	bl	8005d68 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	1e03      	subs	r3, r0, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0cd      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2241      	movs	r2, #65	; 0x41
 8005b7c:	2122      	movs	r1, #34	; 0x22
 8005b7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2242      	movs	r2, #66	; 0x42
 8005b84:	2110      	movs	r1, #16
 8005b86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2208      	movs	r2, #8
 8005b98:	18ba      	adds	r2, r7, r2
 8005b9a:	8812      	ldrh	r2, [r2, #0]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2bff      	cmp	r3, #255	; 0xff
 8005bac:	d911      	bls.n	8005bd2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	22ff      	movs	r2, #255	; 0xff
 8005bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	045c      	lsls	r4, r3, #17
 8005bbe:	230a      	movs	r3, #10
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	8819      	ldrh	r1, [r3, #0]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <HAL_I2C_Master_Receive+0x208>)
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	0023      	movs	r3, r4
 8005bcc:	f000 fb00 	bl	80061d0 <I2C_TransferConfig>
 8005bd0:	e076      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	049c      	lsls	r4, r3, #18
 8005be6:	230a      	movs	r3, #10
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	8819      	ldrh	r1, [r3, #0]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	4b4b      	ldr	r3, [pc, #300]	; (8005d1c <HAL_I2C_Master_Receive+0x208>)
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	0023      	movs	r3, r4
 8005bf4:	f000 faec 	bl	80061d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005bf8:	e062      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 f96b 	bl	8005edc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c06:	1e03      	subs	r3, r0, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e082      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <HAL_I2C_Master_Receive+0x1ac>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d136      	bne.n	8005cc0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	0013      	movs	r3, r2
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	f000 f882 	bl	8005d68 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e053      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	d911      	bls.n	8005c9a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	22ff      	movs	r2, #255	; 0xff
 8005c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	045c      	lsls	r4, r3, #17
 8005c86:	230a      	movs	r3, #10
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	8819      	ldrh	r1, [r3, #0]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	0023      	movs	r3, r4
 8005c94:	f000 fa9c 	bl	80061d0 <I2C_TransferConfig>
 8005c98:	e012      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	049c      	lsls	r4, r3, #18
 8005cae:	230a      	movs	r3, #10
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	8819      	ldrh	r1, [r3, #0]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	0023      	movs	r3, r4
 8005cbc:	f000 fa88 	bl	80061d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d197      	bne.n	8005bfa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f8c7 	bl	8005e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e01a      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	490b      	ldr	r1, [pc, #44]	; (8005d20 <HAL_I2C_Master_Receive+0x20c>)
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2241      	movs	r2, #65	; 0x41
 8005cfa:	2120      	movs	r1, #32
 8005cfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2242      	movs	r2, #66	; 0x42
 8005d02:	2100      	movs	r1, #0
 8005d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b007      	add	sp, #28
 8005d1a:	bd90      	pop	{r4, r7, pc}
 8005d1c:	80002400 	.word	0x80002400
 8005d20:	fe00e800 	.word	0xfe00e800

08005d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2202      	movs	r2, #2
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d103      	bne.n	8005d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d007      	beq.n	8005d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	619a      	str	r2, [r3, #24]
  }
}
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b002      	add	sp, #8
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	1dfb      	adds	r3, r7, #7
 8005d76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d78:	e021      	b.n	8005dbe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	d01e      	beq.n	8005dbe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d80:	f7fe fd1e 	bl	80047c0 <HAL_GetTick>
 8005d84:	0002      	movs	r2, r0
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d113      	bne.n	8005dbe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2241      	movs	r2, #65	; 0x41
 8005da6:	2120      	movs	r1, #32
 8005da8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2242      	movs	r2, #66	; 0x42
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2240      	movs	r2, #64	; 0x40
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e00f      	b.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	425a      	negs	r2, r3
 8005dce:	4153      	adcs	r3, r2
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d0ce      	beq.n	8005d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005df2:	e02b      	b.n	8005e4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 f8e8 	bl	8005fd0 <I2C_IsErrorOccurred>
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d001      	beq.n	8005e08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e029      	b.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	d01e      	beq.n	8005e4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fe fcd7 	bl	80047c0 <HAL_GetTick>
 8005e12:	0002      	movs	r2, r0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d113      	bne.n	8005e4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	2220      	movs	r2, #32
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2241      	movs	r2, #65	; 0x41
 8005e34:	2120      	movs	r1, #32
 8005e36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2242      	movs	r2, #66	; 0x42
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2240      	movs	r2, #64	; 0x40
 8005e44:	2100      	movs	r1, #0
 8005e46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e007      	b.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2202      	movs	r2, #2
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d1cc      	bne.n	8005df4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b004      	add	sp, #16
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e70:	e028      	b.n	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f8a9 	bl	8005fd0 <I2C_IsErrorOccurred>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e026      	b.n	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fe fc9b 	bl	80047c0 <HAL_GetTick>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d113      	bne.n	8005ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2241      	movs	r2, #65	; 0x41
 8005eac:	2120      	movs	r1, #32
 8005eae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2242      	movs	r2, #66	; 0x42
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e007      	b.n	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d1cf      	bne.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b004      	add	sp, #16
 8005eda:	bd80      	pop	{r7, pc}

08005edc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee8:	e064      	b.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 f86d 	bl	8005fd0 <I2C_IsErrorOccurred>
 8005ef6:	1e03      	subs	r3, r0, #0
 8005ef8:	d001      	beq.n	8005efe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e062      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2220      	movs	r2, #32
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	d138      	bne.n	8005f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	2204      	movs	r2, #4
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d105      	bne.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e04e      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d107      	bne.n	8005f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
 8005f42:	e002      	b.n	8005f4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	491b      	ldr	r1, [pc, #108]	; (8005fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005f5e:	400a      	ands	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2241      	movs	r2, #65	; 0x41
 8005f66:	2120      	movs	r1, #32
 8005f68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2242      	movs	r2, #66	; 0x42
 8005f6e:	2100      	movs	r1, #0
 8005f70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2240      	movs	r2, #64	; 0x40
 8005f76:	2100      	movs	r1, #0
 8005f78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e022      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fe fc1f 	bl	80047c0 <HAL_GetTick>
 8005f82:	0002      	movs	r2, r0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10f      	bne.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	2220      	movs	r2, #32
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2241      	movs	r2, #65	; 0x41
 8005fa4:	2120      	movs	r1, #32
 8005fa6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2240      	movs	r2, #64	; 0x40
 8005fac:	2100      	movs	r1, #0
 8005fae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e007      	b.n	8005fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d193      	bne.n	8005eea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	fe00e800 	.word	0xfe00e800

08005fd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b08b      	sub	sp, #44	; 0x2c
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2327      	movs	r3, #39	; 0x27
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <I2C_IsErrorOccurred+0x2e>
 8005ffc:	e082      	b.n	8006104 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2210      	movs	r2, #16
 8006004:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006006:	e060      	b.n	80060ca <I2C_IsErrorOccurred+0xfa>
 8006008:	2427      	movs	r4, #39	; 0x27
 800600a:	193b      	adds	r3, r7, r4
 800600c:	193a      	adds	r2, r7, r4
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3301      	adds	r3, #1
 8006016:	d058      	beq.n	80060ca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006018:	f7fe fbd2 	bl	80047c0 <HAL_GetTick>
 800601c:	0002      	movs	r2, r0
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	429a      	cmp	r2, r3
 8006026:	d306      	bcc.n	8006036 <I2C_IsErrorOccurred+0x66>
 8006028:	193b      	adds	r3, r7, r4
 800602a:	193a      	adds	r2, r7, r4
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d149      	bne.n	80060ca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	01db      	lsls	r3, r3, #7
 8006040:	4013      	ands	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006044:	2013      	movs	r0, #19
 8006046:	183b      	adds	r3, r7, r0
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	2142      	movs	r1, #66	; 0x42
 800604c:	5c52      	ldrb	r2, [r2, r1]
 800604e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	401a      	ands	r2, r3
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	429a      	cmp	r2, r3
 8006062:	d126      	bne.n	80060b2 <I2C_IsErrorOccurred+0xe2>
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	01db      	lsls	r3, r3, #7
 800606a:	429a      	cmp	r2, r3
 800606c:	d021      	beq.n	80060b2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800606e:	183b      	adds	r3, r7, r0
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b20      	cmp	r3, #32
 8006074:	d01d      	beq.n	80060b2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2180      	movs	r1, #128	; 0x80
 8006082:	01c9      	lsls	r1, r1, #7
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006088:	f7fe fb9a 	bl	80047c0 <HAL_GetTick>
 800608c:	0003      	movs	r3, r0
 800608e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006090:	e00f      	b.n	80060b2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006092:	f7fe fb95 	bl	80047c0 <HAL_GetTick>
 8006096:	0002      	movs	r2, r0
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b19      	cmp	r3, #25
 800609e:	d908      	bls.n	80060b2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2220      	movs	r2, #32
 80060a4:	4313      	orrs	r3, r2
 80060a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060a8:	2327      	movs	r3, #39	; 0x27
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	2201      	movs	r2, #1
 80060ae:	701a      	strb	r2, [r3, #0]

              break;
 80060b0:	e00b      	b.n	80060ca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	2220      	movs	r2, #32
 80060ba:	4013      	ands	r3, r2
 80060bc:	2127      	movs	r1, #39	; 0x27
 80060be:	187a      	adds	r2, r7, r1
 80060c0:	1879      	adds	r1, r7, r1
 80060c2:	7809      	ldrb	r1, [r1, #0]
 80060c4:	7011      	strb	r1, [r2, #0]
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d1e3      	bne.n	8006092 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2220      	movs	r2, #32
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d004      	beq.n	80060e2 <I2C_IsErrorOccurred+0x112>
 80060d8:	2327      	movs	r3, #39	; 0x27
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d092      	beq.n	8006008 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060e2:	2327      	movs	r3, #39	; 0x27
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2220      	movs	r2, #32
 80060f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	2204      	movs	r2, #4
 80060f8:	4313      	orrs	r3, r2
 80060fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060fc:	2327      	movs	r3, #39	; 0x27
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4013      	ands	r3, r2
 8006114:	d00c      	beq.n	8006130 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2201      	movs	r2, #1
 800611a:	4313      	orrs	r3, r2
 800611c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2280      	movs	r2, #128	; 0x80
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006128:	2327      	movs	r3, #39	; 0x27
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4013      	ands	r3, r2
 8006138:	d00c      	beq.n	8006154 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	2208      	movs	r2, #8
 800613e:	4313      	orrs	r3, r2
 8006140:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2280      	movs	r2, #128	; 0x80
 8006148:	00d2      	lsls	r2, r2, #3
 800614a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800614c:	2327      	movs	r3, #39	; 0x27
 800614e:	18fb      	adds	r3, r7, r3
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4013      	ands	r3, r2
 800615c:	d00c      	beq.n	8006178 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	2202      	movs	r2, #2
 8006162:	4313      	orrs	r3, r2
 8006164:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0092      	lsls	r2, r2, #2
 800616e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006170:	2327      	movs	r3, #39	; 0x27
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006178:	2327      	movs	r3, #39	; 0x27
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01d      	beq.n	80061be <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	0018      	movs	r0, r3
 8006186:	f7ff fdcd 	bl	8005d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	490d      	ldr	r1, [pc, #52]	; (80061cc <I2C_IsErrorOccurred+0x1fc>)
 8006196:	400a      	ands	r2, r1
 8006198:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2241      	movs	r2, #65	; 0x41
 80061aa:	2120      	movs	r1, #32
 80061ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2242      	movs	r2, #66	; 0x42
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	2100      	movs	r1, #0
 80061bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80061be:	2327      	movs	r3, #39	; 0x27
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	781b      	ldrb	r3, [r3, #0]
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b00b      	add	sp, #44	; 0x2c
 80061ca:	bd90      	pop	{r4, r7, pc}
 80061cc:	fe00e800 	.word	0xfe00e800

080061d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	0008      	movs	r0, r1
 80061da:	0011      	movs	r1, r2
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	240a      	movs	r4, #10
 80061e0:	193b      	adds	r3, r7, r4
 80061e2:	1c02      	adds	r2, r0, #0
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	2009      	movs	r0, #9
 80061e8:	183b      	adds	r3, r7, r0
 80061ea:	1c0a      	adds	r2, r1, #0
 80061ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	059b      	lsls	r3, r3, #22
 80061f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061f6:	183b      	adds	r3, r7, r0
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	0419      	lsls	r1, r3, #16
 80061fc:	23ff      	movs	r3, #255	; 0xff
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006202:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	4313      	orrs	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621a:	0d51      	lsrs	r1, r2, #21
 800621c:	2280      	movs	r2, #128	; 0x80
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	400a      	ands	r2, r1
 8006222:	4907      	ldr	r1, [pc, #28]	; (8006240 <I2C_TransferConfig+0x70>)
 8006224:	430a      	orrs	r2, r1
 8006226:	43d2      	mvns	r2, r2
 8006228:	401a      	ands	r2, r3
 800622a:	0011      	movs	r1, r2
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	b007      	add	sp, #28
 800623c:	bd90      	pop	{r4, r7, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	03ff63ff 	.word	0x03ff63ff

08006244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2241      	movs	r2, #65	; 0x41
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	d138      	bne.n	80062cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d101      	bne.n	8006268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006264:	2302      	movs	r3, #2
 8006266:	e032      	b.n	80062ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2240      	movs	r2, #64	; 0x40
 800626c:	2101      	movs	r1, #1
 800626e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2241      	movs	r2, #65	; 0x41
 8006274:	2124      	movs	r1, #36	; 0x24
 8006276:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2101      	movs	r1, #1
 8006284:	438a      	bics	r2, r1
 8006286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4911      	ldr	r1, [pc, #68]	; (80062d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006294:	400a      	ands	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2101      	movs	r1, #1
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2241      	movs	r2, #65	; 0x41
 80062bc:	2120      	movs	r1, #32
 80062be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2240      	movs	r2, #64	; 0x40
 80062c4:	2100      	movs	r1, #0
 80062c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b002      	add	sp, #8
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	ffffefff 	.word	0xffffefff

080062dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	; 0x41
 80062ea:	5c9b      	ldrb	r3, [r3, r2]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d139      	bne.n	8006366 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2240      	movs	r2, #64	; 0x40
 80062f6:	5c9b      	ldrb	r3, [r3, r2]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e033      	b.n	8006368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	2101      	movs	r1, #1
 8006306:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2241      	movs	r2, #65	; 0x41
 800630c:	2124      	movs	r1, #36	; 0x24
 800630e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2101      	movs	r1, #1
 800631c:	438a      	bics	r2, r1
 800631e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a11      	ldr	r2, [pc, #68]	; (8006370 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2101      	movs	r1, #1
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2241      	movs	r2, #65	; 0x41
 8006356:	2120      	movs	r1, #32
 8006358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2240      	movs	r2, #64	; 0x40
 800635e:	2100      	movs	r1, #0
 8006360:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b004      	add	sp, #16
 800636e:	bd80      	pop	{r7, pc}
 8006370:	fffff0ff 	.word	0xfffff0ff

08006374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800637c:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	; (80063e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006382:	4013      	ands	r3, r2
 8006384:	0019      	movs	r1, r3
 8006386:	4b17      	ldr	r3, [pc, #92]	; (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	430a      	orrs	r2, r1
 800638c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	429a      	cmp	r2, r3
 8006396:	d11f      	bne.n	80063d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006398:	4b14      	ldr	r3, [pc, #80]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	0013      	movs	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4912      	ldr	r1, [pc, #72]	; (80063f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80063a6:	0018      	movs	r0, r3
 80063a8:	f7f9 feca 	bl	8000140 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b2:	e008      	b.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b01      	subs	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e001      	b.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e009      	b.n	80063da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	401a      	ands	r2, r3
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d0ed      	beq.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b004      	add	sp, #16
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	40007000 	.word	0x40007000
 80063e8:	fffff9ff 	.word	0xfffff9ff
 80063ec:	20000000 	.word	0x20000000
 80063f0:	000f4240 	.word	0x000f4240

080063f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <LL_RCC_GetAPB1Prescaler+0x14>)
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	23e0      	movs	r3, #224	; 0xe0
 80063fe:	01db      	lsls	r3, r3, #7
 8006400:	4013      	ands	r3, r2
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000

0800640c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e2f3      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2201      	movs	r2, #1
 8006424:	4013      	ands	r3, r2
 8006426:	d100      	bne.n	800642a <HAL_RCC_OscConfig+0x1e>
 8006428:	e07c      	b.n	8006524 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	4bc3      	ldr	r3, [pc, #780]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2238      	movs	r2, #56	; 0x38
 8006430:	4013      	ands	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006434:	4bc0      	ldr	r3, [pc, #768]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2203      	movs	r2, #3
 800643a:	4013      	ands	r3, r2
 800643c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b10      	cmp	r3, #16
 8006442:	d102      	bne.n	800644a <HAL_RCC_OscConfig+0x3e>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d002      	beq.n	8006450 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d10b      	bne.n	8006468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006450:	4bb9      	ldr	r3, [pc, #740]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	029b      	lsls	r3, r3, #10
 8006458:	4013      	ands	r3, r2
 800645a:	d062      	beq.n	8006522 <HAL_RCC_OscConfig+0x116>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d15e      	bne.n	8006522 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e2ce      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	025b      	lsls	r3, r3, #9
 8006470:	429a      	cmp	r2, r3
 8006472:	d107      	bne.n	8006484 <HAL_RCC_OscConfig+0x78>
 8006474:	4bb0      	ldr	r3, [pc, #704]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4baf      	ldr	r3, [pc, #700]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800647a:	2180      	movs	r1, #128	; 0x80
 800647c:	0249      	lsls	r1, r1, #9
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e020      	b.n	80064c6 <HAL_RCC_OscConfig+0xba>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	23a0      	movs	r3, #160	; 0xa0
 800648a:	02db      	lsls	r3, r3, #11
 800648c:	429a      	cmp	r2, r3
 800648e:	d10e      	bne.n	80064ae <HAL_RCC_OscConfig+0xa2>
 8006490:	4ba9      	ldr	r3, [pc, #676]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4ba8      	ldr	r3, [pc, #672]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	02c9      	lsls	r1, r1, #11
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	4ba6      	ldr	r3, [pc, #664]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4ba5      	ldr	r3, [pc, #660]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064a4:	2180      	movs	r1, #128	; 0x80
 80064a6:	0249      	lsls	r1, r1, #9
 80064a8:	430a      	orrs	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e00b      	b.n	80064c6 <HAL_RCC_OscConfig+0xba>
 80064ae:	4ba2      	ldr	r3, [pc, #648]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4ba1      	ldr	r3, [pc, #644]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064b4:	49a1      	ldr	r1, [pc, #644]	; (800673c <HAL_RCC_OscConfig+0x330>)
 80064b6:	400a      	ands	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	4b9f      	ldr	r3, [pc, #636]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b9e      	ldr	r3, [pc, #632]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064c0:	499f      	ldr	r1, [pc, #636]	; (8006740 <HAL_RCC_OscConfig+0x334>)
 80064c2:	400a      	ands	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d014      	beq.n	80064f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fe f977 	bl	80047c0 <HAL_GetTick>
 80064d2:	0003      	movs	r3, r0
 80064d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d8:	f7fe f972 	bl	80047c0 <HAL_GetTick>
 80064dc:	0002      	movs	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	; 0x64
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e28d      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ea:	4b93      	ldr	r3, [pc, #588]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	4013      	ands	r3, r2
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0xcc>
 80064f6:	e015      	b.n	8006524 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fe f962 	bl	80047c0 <HAL_GetTick>
 80064fc:	0003      	movs	r3, r0
 80064fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006502:	f7fe f95d 	bl	80047c0 <HAL_GetTick>
 8006506:	0002      	movs	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b64      	cmp	r3, #100	; 0x64
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e278      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006514:	4b88      	ldr	r3, [pc, #544]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	2380      	movs	r3, #128	; 0x80
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	4013      	ands	r3, r2
 800651e:	d1f0      	bne.n	8006502 <HAL_RCC_OscConfig+0xf6>
 8006520:	e000      	b.n	8006524 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006522:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2202      	movs	r2, #2
 800652a:	4013      	ands	r3, r2
 800652c:	d100      	bne.n	8006530 <HAL_RCC_OscConfig+0x124>
 800652e:	e099      	b.n	8006664 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006530:	4b81      	ldr	r3, [pc, #516]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2238      	movs	r2, #56	; 0x38
 8006536:	4013      	ands	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800653a:	4b7f      	ldr	r3, [pc, #508]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2203      	movs	r2, #3
 8006540:	4013      	ands	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b10      	cmp	r3, #16
 8006548:	d102      	bne.n	8006550 <HAL_RCC_OscConfig+0x144>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d002      	beq.n	8006556 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d135      	bne.n	80065c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006556:	4b78      	ldr	r3, [pc, #480]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4013      	ands	r3, r2
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x162>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e24b      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656e:	4b72      	ldr	r3, [pc, #456]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_RCC_OscConfig+0x338>)
 8006574:	4013      	ands	r3, r2
 8006576:	0019      	movs	r1, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	021a      	lsls	r2, r3, #8
 800657e:	4b6e      	ldr	r3, [pc, #440]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d112      	bne.n	80065b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800658a:	4b6b      	ldr	r3, [pc, #428]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6e      	ldr	r2, [pc, #440]	; (8006748 <HAL_RCC_OscConfig+0x33c>)
 8006590:	4013      	ands	r3, r2
 8006592:	0019      	movs	r1, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	4b67      	ldr	r3, [pc, #412]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800659e:	4b66      	ldr	r3, [pc, #408]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	0adb      	lsrs	r3, r3, #11
 80065a4:	2207      	movs	r2, #7
 80065a6:	4013      	ands	r3, r2
 80065a8:	4a68      	ldr	r2, [pc, #416]	; (800674c <HAL_RCC_OscConfig+0x340>)
 80065aa:	40da      	lsrs	r2, r3
 80065ac:	4b68      	ldr	r3, [pc, #416]	; (8006750 <HAL_RCC_OscConfig+0x344>)
 80065ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065b0:	4b68      	ldr	r3, [pc, #416]	; (8006754 <HAL_RCC_OscConfig+0x348>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7fe f8a7 	bl	8004708 <HAL_InitTick>
 80065ba:	1e03      	subs	r3, r0, #0
 80065bc:	d051      	beq.n	8006662 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e221      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d030      	beq.n	800662c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80065ca:	4b5b      	ldr	r3, [pc, #364]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a5e      	ldr	r2, [pc, #376]	; (8006748 <HAL_RCC_OscConfig+0x33c>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	0019      	movs	r1, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	4b57      	ldr	r3, [pc, #348]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80065da:	430a      	orrs	r2, r1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80065de:	4b56      	ldr	r3, [pc, #344]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b55      	ldr	r3, [pc, #340]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	0049      	lsls	r1, r1, #1
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fe f8e8 	bl	80047c0 <HAL_GetTick>
 80065f0:	0003      	movs	r3, r0
 80065f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f6:	f7fe f8e3 	bl	80047c0 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e1fe      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006608:	4b4b      	ldr	r3, [pc, #300]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4013      	ands	r3, r2
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006614:	4b48      	ldr	r3, [pc, #288]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a4a      	ldr	r2, [pc, #296]	; (8006744 <HAL_RCC_OscConfig+0x338>)
 800661a:	4013      	ands	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	4b44      	ldr	r3, [pc, #272]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	e01b      	b.n	8006664 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800662c:	4b42      	ldr	r3, [pc, #264]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006632:	4949      	ldr	r1, [pc, #292]	; (8006758 <HAL_RCC_OscConfig+0x34c>)
 8006634:	400a      	ands	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fe f8c2 	bl	80047c0 <HAL_GetTick>
 800663c:	0003      	movs	r3, r0
 800663e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006642:	f7fe f8bd 	bl	80047c0 <HAL_GetTick>
 8006646:	0002      	movs	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e1d8      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006654:	4b38      	ldr	r3, [pc, #224]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4013      	ands	r3, r2
 800665e:	d1f0      	bne.n	8006642 <HAL_RCC_OscConfig+0x236>
 8006660:	e000      	b.n	8006664 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006662:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2208      	movs	r2, #8
 800666a:	4013      	ands	r3, r2
 800666c:	d047      	beq.n	80066fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2238      	movs	r2, #56	; 0x38
 8006674:	4013      	ands	r3, r2
 8006676:	2b18      	cmp	r3, #24
 8006678:	d10a      	bne.n	8006690 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800667a:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800667c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667e:	2202      	movs	r2, #2
 8006680:	4013      	ands	r3, r2
 8006682:	d03c      	beq.n	80066fe <HAL_RCC_OscConfig+0x2f2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d138      	bne.n	80066fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e1ba      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d019      	beq.n	80066cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800669a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 800669e:	2101      	movs	r1, #1
 80066a0:	430a      	orrs	r2, r1
 80066a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fe f88c 	bl	80047c0 <HAL_GetTick>
 80066a8:	0003      	movs	r3, r0
 80066aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ae:	f7fe f887 	bl	80047c0 <HAL_GetTick>
 80066b2:	0002      	movs	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e1a2      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80066c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c4:	2202      	movs	r2, #2
 80066c6:	4013      	ands	r3, r2
 80066c8:	d0f1      	beq.n	80066ae <HAL_RCC_OscConfig+0x2a2>
 80066ca:	e018      	b.n	80066fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80066ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066d0:	4b19      	ldr	r3, [pc, #100]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80066d2:	2101      	movs	r1, #1
 80066d4:	438a      	bics	r2, r1
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d8:	f7fe f872 	bl	80047c0 <HAL_GetTick>
 80066dc:	0003      	movs	r3, r0
 80066de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e2:	f7fe f86d 	bl	80047c0 <HAL_GetTick>
 80066e6:	0002      	movs	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e188      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	2202      	movs	r2, #2
 80066fa:	4013      	ands	r3, r2
 80066fc:	d1f1      	bne.n	80066e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2204      	movs	r2, #4
 8006704:	4013      	ands	r3, r2
 8006706:	d100      	bne.n	800670a <HAL_RCC_OscConfig+0x2fe>
 8006708:	e0c6      	b.n	8006898 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800670a:	231f      	movs	r3, #31
 800670c:	18fb      	adds	r3, r7, r3
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	2238      	movs	r2, #56	; 0x38
 8006718:	4013      	ands	r3, r2
 800671a:	2b20      	cmp	r3, #32
 800671c:	d11e      	bne.n	800675c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_RCC_OscConfig+0x32c>)
 8006720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006722:	2202      	movs	r2, #2
 8006724:	4013      	ands	r3, r2
 8006726:	d100      	bne.n	800672a <HAL_RCC_OscConfig+0x31e>
 8006728:	e0b6      	b.n	8006898 <HAL_RCC_OscConfig+0x48c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d000      	beq.n	8006734 <HAL_RCC_OscConfig+0x328>
 8006732:	e0b1      	b.n	8006898 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e166      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
 8006738:	40021000 	.word	0x40021000
 800673c:	fffeffff 	.word	0xfffeffff
 8006740:	fffbffff 	.word	0xfffbffff
 8006744:	ffff80ff 	.word	0xffff80ff
 8006748:	ffffc7ff 	.word	0xffffc7ff
 800674c:	00f42400 	.word	0x00f42400
 8006750:	20000000 	.word	0x20000000
 8006754:	20000004 	.word	0x20000004
 8006758:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800675c:	4bac      	ldr	r3, [pc, #688]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800675e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	055b      	lsls	r3, r3, #21
 8006764:	4013      	ands	r3, r2
 8006766:	d101      	bne.n	800676c <HAL_RCC_OscConfig+0x360>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x362>
 800676c:	2300      	movs	r3, #0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d011      	beq.n	8006796 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006772:	4ba7      	ldr	r3, [pc, #668]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006776:	4ba6      	ldr	r3, [pc, #664]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006778:	2180      	movs	r1, #128	; 0x80
 800677a:	0549      	lsls	r1, r1, #21
 800677c:	430a      	orrs	r2, r1
 800677e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006780:	4ba3      	ldr	r3, [pc, #652]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	055b      	lsls	r3, r3, #21
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800678e:	231f      	movs	r3, #31
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006796:	4b9f      	ldr	r3, [pc, #636]	; (8006a14 <HAL_RCC_OscConfig+0x608>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	d11a      	bne.n	80067d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a2:	4b9c      	ldr	r3, [pc, #624]	; (8006a14 <HAL_RCC_OscConfig+0x608>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	4b9b      	ldr	r3, [pc, #620]	; (8006a14 <HAL_RCC_OscConfig+0x608>)
 80067a8:	2180      	movs	r1, #128	; 0x80
 80067aa:	0049      	lsls	r1, r1, #1
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80067b0:	f7fe f806 	bl	80047c0 <HAL_GetTick>
 80067b4:	0003      	movs	r3, r0
 80067b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fe f801 	bl	80047c0 <HAL_GetTick>
 80067be:	0002      	movs	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e11c      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067cc:	4b91      	ldr	r3, [pc, #580]	; (8006a14 <HAL_RCC_OscConfig+0x608>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4013      	ands	r3, r2
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x3e2>
 80067e0:	4b8b      	ldr	r3, [pc, #556]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80067e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067e4:	4b8a      	ldr	r3, [pc, #552]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80067e6:	2101      	movs	r1, #1
 80067e8:	430a      	orrs	r2, r1
 80067ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80067ec:	e01c      	b.n	8006828 <HAL_RCC_OscConfig+0x41c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x404>
 80067f6:	4b86      	ldr	r3, [pc, #536]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80067f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067fa:	4b85      	ldr	r3, [pc, #532]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80067fc:	2104      	movs	r1, #4
 80067fe:	430a      	orrs	r2, r1
 8006800:	65da      	str	r2, [r3, #92]	; 0x5c
 8006802:	4b83      	ldr	r3, [pc, #524]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006806:	4b82      	ldr	r3, [pc, #520]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006808:	2101      	movs	r1, #1
 800680a:	430a      	orrs	r2, r1
 800680c:	65da      	str	r2, [r3, #92]	; 0x5c
 800680e:	e00b      	b.n	8006828 <HAL_RCC_OscConfig+0x41c>
 8006810:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006814:	4b7e      	ldr	r3, [pc, #504]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006816:	2101      	movs	r1, #1
 8006818:	438a      	bics	r2, r1
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
 800681c:	4b7c      	ldr	r3, [pc, #496]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800681e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006820:	4b7b      	ldr	r3, [pc, #492]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006822:	2104      	movs	r1, #4
 8006824:	438a      	bics	r2, r1
 8006826:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d014      	beq.n	800685a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fd ffc6 	bl	80047c0 <HAL_GetTick>
 8006834:	0003      	movs	r3, r0
 8006836:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006838:	e009      	b.n	800684e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683a:	f7fd ffc1 	bl	80047c0 <HAL_GetTick>
 800683e:	0002      	movs	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	4a74      	ldr	r2, [pc, #464]	; (8006a18 <HAL_RCC_OscConfig+0x60c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0db      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684e:	4b70      	ldr	r3, [pc, #448]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006852:	2202      	movs	r2, #2
 8006854:	4013      	ands	r3, r2
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x42e>
 8006858:	e013      	b.n	8006882 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fd ffb1 	bl	80047c0 <HAL_GetTick>
 800685e:	0003      	movs	r3, r0
 8006860:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006862:	e009      	b.n	8006878 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006864:	f7fd ffac 	bl	80047c0 <HAL_GetTick>
 8006868:	0002      	movs	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	4a6a      	ldr	r2, [pc, #424]	; (8006a18 <HAL_RCC_OscConfig+0x60c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e0c6      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006878:	4b65      	ldr	r3, [pc, #404]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800687a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687c:	2202      	movs	r2, #2
 800687e:	4013      	ands	r3, r2
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006882:	231f      	movs	r3, #31
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b60      	ldr	r3, [pc, #384]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800688e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006890:	4b5f      	ldr	r3, [pc, #380]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006892:	4962      	ldr	r1, [pc, #392]	; (8006a1c <HAL_RCC_OscConfig+0x610>)
 8006894:	400a      	ands	r2, r1
 8006896:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d100      	bne.n	80068a2 <HAL_RCC_OscConfig+0x496>
 80068a0:	e0b0      	b.n	8006a04 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a2:	4b5b      	ldr	r3, [pc, #364]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2238      	movs	r2, #56	; 0x38
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d100      	bne.n	80068b0 <HAL_RCC_OscConfig+0x4a4>
 80068ae:	e078      	b.n	80069a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d153      	bne.n	8006960 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b8:	4b55      	ldr	r3, [pc, #340]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b54      	ldr	r3, [pc, #336]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80068be:	4958      	ldr	r1, [pc, #352]	; (8006a20 <HAL_RCC_OscConfig+0x614>)
 80068c0:	400a      	ands	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fd ff7c 	bl	80047c0 <HAL_GetTick>
 80068c8:	0003      	movs	r3, r0
 80068ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ce:	f7fd ff77 	bl	80047c0 <HAL_GetTick>
 80068d2:	0002      	movs	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e092      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e0:	4b4b      	ldr	r3, [pc, #300]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	049b      	lsls	r3, r3, #18
 80068e8:	4013      	ands	r3, r2
 80068ea:	d1f0      	bne.n	80068ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ec:	4b48      	ldr	r3, [pc, #288]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a4c      	ldr	r2, [pc, #304]	; (8006a24 <HAL_RCC_OscConfig+0x618>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	0019      	movs	r1, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1a      	ldr	r2, [r3, #32]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	431a      	orrs	r2, r3
 8006914:	4b3e      	ldr	r3, [pc, #248]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006916:	430a      	orrs	r2, r1
 8006918:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800691a:	4b3d      	ldr	r3, [pc, #244]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b3c      	ldr	r3, [pc, #240]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0449      	lsls	r1, r1, #17
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800692e:	2180      	movs	r1, #128	; 0x80
 8006930:	0549      	lsls	r1, r1, #21
 8006932:	430a      	orrs	r2, r1
 8006934:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fd ff43 	bl	80047c0 <HAL_GetTick>
 800693a:	0003      	movs	r3, r0
 800693c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006940:	f7fd ff3e 	bl	80047c0 <HAL_GetTick>
 8006944:	0002      	movs	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e059      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006952:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	2380      	movs	r3, #128	; 0x80
 8006958:	049b      	lsls	r3, r3, #18
 800695a:	4013      	ands	r3, r2
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x534>
 800695e:	e051      	b.n	8006a04 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006960:	4b2b      	ldr	r3, [pc, #172]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006966:	492e      	ldr	r1, [pc, #184]	; (8006a20 <HAL_RCC_OscConfig+0x614>)
 8006968:	400a      	ands	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fd ff28 	bl	80047c0 <HAL_GetTick>
 8006970:	0003      	movs	r3, r0
 8006972:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fd ff23 	bl	80047c0 <HAL_GetTick>
 800697a:	0002      	movs	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e03e      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006988:	4b21      	ldr	r3, [pc, #132]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	049b      	lsls	r3, r3, #18
 8006990:	4013      	ands	r3, r2
 8006992:	d1f0      	bne.n	8006976 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006994:	4b1e      	ldr	r3, [pc, #120]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 800699a:	4923      	ldr	r1, [pc, #140]	; (8006a28 <HAL_RCC_OscConfig+0x61c>)
 800699c:	400a      	ands	r2, r1
 800699e:	60da      	str	r2, [r3, #12]
 80069a0:	e030      	b.n	8006a04 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e02b      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <HAL_RCC_OscConfig+0x604>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2203      	movs	r2, #3
 80069b8:	401a      	ands	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d11e      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2270      	movs	r2, #112	; 0x70
 80069c6:	401a      	ands	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d117      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	23fe      	movs	r3, #254	; 0xfe
 80069d4:	01db      	lsls	r3, r3, #7
 80069d6:	401a      	ands	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10e      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	23f8      	movs	r3, #248	; 0xf8
 80069e6:	039b      	lsls	r3, r3, #14
 80069e8:	401a      	ands	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d106      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0f5b      	lsrs	r3, r3, #29
 80069f6:	075a      	lsls	r2, r3, #29
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b008      	add	sp, #32
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	40021000 	.word	0x40021000
 8006a14:	40007000 	.word	0x40007000
 8006a18:	00001388 	.word	0x00001388
 8006a1c:	efffffff 	.word	0xefffffff
 8006a20:	feffffff 	.word	0xfeffffff
 8006a24:	1fc1808c 	.word	0x1fc1808c
 8006a28:	effefffc 	.word	0xeffefffc

08006a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0e9      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a40:	4b76      	ldr	r3, [pc, #472]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2207      	movs	r2, #7
 8006a46:	4013      	ands	r3, r2
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d91e      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4e:	4b73      	ldr	r3, [pc, #460]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2207      	movs	r2, #7
 8006a54:	4393      	bics	r3, r2
 8006a56:	0019      	movs	r1, r3
 8006a58:	4b70      	ldr	r3, [pc, #448]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a60:	f7fd feae 	bl	80047c0 <HAL_GetTick>
 8006a64:	0003      	movs	r3, r0
 8006a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a68:	e009      	b.n	8006a7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a6a:	f7fd fea9 	bl	80047c0 <HAL_GetTick>
 8006a6e:	0002      	movs	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	4a6a      	ldr	r2, [pc, #424]	; (8006c20 <HAL_RCC_ClockConfig+0x1f4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0ca      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a7e:	4b67      	ldr	r3, [pc, #412]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2207      	movs	r2, #7
 8006a84:	4013      	ands	r3, r2
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d1ee      	bne.n	8006a6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4013      	ands	r3, r2
 8006a94:	d015      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d006      	beq.n	8006aae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006aa0:	4b60      	ldr	r3, [pc, #384]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	4b5f      	ldr	r3, [pc, #380]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006aa6:	21e0      	movs	r1, #224	; 0xe0
 8006aa8:	01c9      	lsls	r1, r1, #7
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aae:	4b5d      	ldr	r3, [pc, #372]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4a5d      	ldr	r2, [pc, #372]	; (8006c28 <HAL_RCC_ClockConfig+0x1fc>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	4b59      	ldr	r3, [pc, #356]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d057      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad4:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	4013      	ands	r3, r2
 8006ade:	d12b      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e097      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aec:	4b4d      	ldr	r3, [pc, #308]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	049b      	lsls	r3, r3, #18
 8006af4:	4013      	ands	r3, r2
 8006af6:	d11f      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e08b      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b04:	4b47      	ldr	r3, [pc, #284]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d113      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e07f      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d106      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b1c:	4b41      	ldr	r3, [pc, #260]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b20:	2202      	movs	r2, #2
 8006b22:	4013      	ands	r3, r2
 8006b24:	d108      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e074      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b2a:	4b3e      	ldr	r3, [pc, #248]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	2202      	movs	r2, #2
 8006b30:	4013      	ands	r3, r2
 8006b32:	d101      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e06d      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b38:	4b3a      	ldr	r3, [pc, #232]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2207      	movs	r2, #7
 8006b3e:	4393      	bics	r3, r2
 8006b40:	0019      	movs	r1, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4c:	f7fd fe38 	bl	80047c0 <HAL_GetTick>
 8006b50:	0003      	movs	r3, r0
 8006b52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b54:	e009      	b.n	8006b6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b56:	f7fd fe33 	bl	80047c0 <HAL_GetTick>
 8006b5a:	0002      	movs	r2, r0
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	4a2f      	ldr	r2, [pc, #188]	; (8006c20 <HAL_RCC_ClockConfig+0x1f4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e054      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2238      	movs	r2, #56	; 0x38
 8006b70:	401a      	ands	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d1ec      	bne.n	8006b56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b27      	ldr	r3, [pc, #156]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2207      	movs	r2, #7
 8006b82:	4013      	ands	r3, r2
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d21e      	bcs.n	8006bc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	4393      	bics	r3, r2
 8006b92:	0019      	movs	r1, r3
 8006b94:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b9c:	f7fd fe10 	bl	80047c0 <HAL_GetTick>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ba4:	e009      	b.n	8006bba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba6:	f7fd fe0b 	bl	80047c0 <HAL_GetTick>
 8006baa:	0002      	movs	r2, r0
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <HAL_RCC_ClockConfig+0x1f4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e02c      	b.n	8006c14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <HAL_RCC_ClockConfig+0x1f0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2207      	movs	r2, #7
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d1ee      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2204      	movs	r2, #4
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd2:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <HAL_RCC_ClockConfig+0x200>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	0019      	movs	r1, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006be2:	430a      	orrs	r2, r1
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006be6:	f000 f829 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8006bea:	0001      	movs	r1, r0
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_RCC_ClockConfig+0x1f8>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	0a1b      	lsrs	r3, r3, #8
 8006bf2:	220f      	movs	r2, #15
 8006bf4:	401a      	ands	r2, r3
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <HAL_RCC_ClockConfig+0x204>)
 8006bf8:	0092      	lsls	r2, r2, #2
 8006bfa:	58d3      	ldr	r3, [r2, r3]
 8006bfc:	221f      	movs	r2, #31
 8006bfe:	4013      	ands	r3, r2
 8006c00:	000a      	movs	r2, r1
 8006c02:	40da      	lsrs	r2, r3
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_ClockConfig+0x208>)
 8006c06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_ClockConfig+0x20c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7fd fd7b 	bl	8004708 <HAL_InitTick>
 8006c12:	0003      	movs	r3, r0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b004      	add	sp, #16
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40022000 	.word	0x40022000
 8006c20:	00001388 	.word	0x00001388
 8006c24:	40021000 	.word	0x40021000
 8006c28:	fffff0ff 	.word	0xfffff0ff
 8006c2c:	ffff8fff 	.word	0xffff8fff
 8006c30:	08014d20 	.word	0x08014d20
 8006c34:	20000000 	.word	0x20000000
 8006c38:	20000004 	.word	0x20000004

08006c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c42:	4b3c      	ldr	r3, [pc, #240]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2238      	movs	r2, #56	; 0x38
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d10f      	bne.n	8006c6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006c4c:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	0adb      	lsrs	r3, r3, #11
 8006c52:	2207      	movs	r2, #7
 8006c54:	4013      	ands	r3, r2
 8006c56:	2201      	movs	r2, #1
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	4835      	ldr	r0, [pc, #212]	; (8006d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c62:	f7f9 fa6d 	bl	8000140 <__udivsi3>
 8006c66:	0003      	movs	r3, r0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e05d      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2238      	movs	r2, #56	; 0x38
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d102      	bne.n	8006c7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c78:	4b2f      	ldr	r3, [pc, #188]	; (8006d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	e054      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c7e:	4b2d      	ldr	r3, [pc, #180]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2238      	movs	r2, #56	; 0x38
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d138      	bne.n	8006cfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006c8a:	4b2a      	ldr	r3, [pc, #168]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2203      	movs	r2, #3
 8006c90:	4013      	ands	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	2207      	movs	r2, #7
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d10d      	bne.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4823      	ldr	r0, [pc, #140]	; (8006d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cac:	f7f9 fa48 	bl	8000140 <__udivsi3>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	0019      	movs	r1, r3
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	227f      	movs	r2, #127	; 0x7f
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	434b      	muls	r3, r1
 8006cc0:	617b      	str	r3, [r7, #20]
        break;
 8006cc2:	e00d      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	481c      	ldr	r0, [pc, #112]	; (8006d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cc8:	f7f9 fa3a 	bl	8000140 <__udivsi3>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	0019      	movs	r1, r3
 8006cd0:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	227f      	movs	r2, #127	; 0x7f
 8006cd8:	4013      	ands	r3, r2
 8006cda:	434b      	muls	r3, r1
 8006cdc:	617b      	str	r3, [r7, #20]
        break;
 8006cde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	0f5b      	lsrs	r3, r3, #29
 8006ce6:	2207      	movs	r2, #7
 8006ce8:	4013      	ands	r3, r2
 8006cea:	3301      	adds	r3, #1
 8006cec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f7f9 fa25 	bl	8000140 <__udivsi3>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	e015      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2238      	movs	r2, #56	; 0x38
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d103      	bne.n	8006d10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	021b      	lsls	r3, r3, #8
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	e00b      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2238      	movs	r2, #56	; 0x38
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b18      	cmp	r3, #24
 8006d1a:	d103      	bne.n	8006d24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006d1c:	23fa      	movs	r3, #250	; 0xfa
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e001      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d28:	693b      	ldr	r3, [r7, #16]
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b006      	add	sp, #24
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	40021000 	.word	0x40021000
 8006d38:	00f42400 	.word	0x00f42400

08006d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d42:	681b      	ldr	r3, [r3, #0]
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	20000000 	.word	0x20000000

08006d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d50:	b5b0      	push	{r4, r5, r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d54:	f7ff fff2 	bl	8006d3c <HAL_RCC_GetHCLKFreq>
 8006d58:	0004      	movs	r4, r0
 8006d5a:	f7ff fb4b 	bl	80063f4 <LL_RCC_GetAPB1Prescaler>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	0b1a      	lsrs	r2, r3, #12
 8006d62:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d64:	0092      	lsls	r2, r2, #2
 8006d66:	58d3      	ldr	r3, [r2, r3]
 8006d68:	221f      	movs	r2, #31
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	40dc      	lsrs	r4, r3
 8006d6e:	0023      	movs	r3, r4
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bdb0      	pop	{r4, r5, r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	08014d60 	.word	0x08014d60

08006d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006d84:	2313      	movs	r3, #19
 8006d86:	18fb      	adds	r3, r7, r3
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d8c:	2312      	movs	r3, #18
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d100      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006da0:	e0a3      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006da2:	2011      	movs	r0, #17
 8006da4:	183b      	adds	r3, r7, r0
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006daa:	4b86      	ldr	r3, [pc, #536]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	055b      	lsls	r3, r3, #21
 8006db2:	4013      	ands	r3, r2
 8006db4:	d110      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006db6:	4b83      	ldr	r3, [pc, #524]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dba:	4b82      	ldr	r3, [pc, #520]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	0549      	lsls	r1, r1, #21
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006dc4:	4b7f      	ldr	r3, [pc, #508]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc8:	2380      	movs	r3, #128	; 0x80
 8006dca:	055b      	lsls	r3, r3, #21
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dd2:	183b      	adds	r3, r7, r0
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dd8:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b7a      	ldr	r3, [pc, #488]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006dde:	2180      	movs	r1, #128	; 0x80
 8006de0:	0049      	lsls	r1, r1, #1
 8006de2:	430a      	orrs	r2, r1
 8006de4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006de6:	f7fd fceb 	bl	80047c0 <HAL_GetTick>
 8006dea:	0003      	movs	r3, r0
 8006dec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dee:	e00b      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006df0:	f7fd fce6 	bl	80047c0 <HAL_GetTick>
 8006df4:	0002      	movs	r2, r0
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d904      	bls.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006dfe:	2313      	movs	r3, #19
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	2203      	movs	r2, #3
 8006e04:	701a      	strb	r2, [r3, #0]
        break;
 8006e06:	e005      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e08:	4b6f      	ldr	r3, [pc, #444]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	2380      	movs	r3, #128	; 0x80
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4013      	ands	r3, r2
 8006e12:	d0ed      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006e14:	2313      	movs	r3, #19
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d154      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e1e:	4b69      	ldr	r3, [pc, #420]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e22:	23c0      	movs	r3, #192	; 0xc0
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d019      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d014      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e3a:	4b62      	ldr	r3, [pc, #392]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	4a63      	ldr	r2, [pc, #396]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e44:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e48:	4b5e      	ldr	r3, [pc, #376]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e4a:	2180      	movs	r1, #128	; 0x80
 8006e4c:	0249      	lsls	r1, r1, #9
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e52:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e56:	4b5b      	ldr	r3, [pc, #364]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e58:	495d      	ldr	r1, [pc, #372]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006e5a:	400a      	ands	r2, r1
 8006e5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e5e:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2201      	movs	r2, #1
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d016      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6c:	f7fd fca8 	bl	80047c0 <HAL_GetTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e74:	e00c      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e76:	f7fd fca3 	bl	80047c0 <HAL_GetTick>
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	4a54      	ldr	r2, [pc, #336]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d904      	bls.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006e86:	2313      	movs	r3, #19
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	701a      	strb	r2, [r3, #0]
            break;
 8006e8e:	e004      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e90:	4b4c      	ldr	r3, [pc, #304]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e94:	2202      	movs	r2, #2
 8006e96:	4013      	ands	r3, r2
 8006e98:	d0ed      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006e9a:	2313      	movs	r3, #19
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ea4:	4b47      	ldr	r3, [pc, #284]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	4a48      	ldr	r2, [pc, #288]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	0019      	movs	r1, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	4b44      	ldr	r3, [pc, #272]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006eb8:	e00c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006eba:	2312      	movs	r3, #18
 8006ebc:	18fb      	adds	r3, r7, r3
 8006ebe:	2213      	movs	r2, #19
 8006ec0:	18ba      	adds	r2, r7, r2
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	e005      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	2312      	movs	r3, #18
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	2213      	movs	r2, #19
 8006ece:	18ba      	adds	r2, r7, r2
 8006ed0:	7812      	ldrb	r2, [r2, #0]
 8006ed2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ed4:	2311      	movs	r3, #17
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d105      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee2:	4b38      	ldr	r3, [pc, #224]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ee4:	493c      	ldr	r1, [pc, #240]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ef4:	4b33      	ldr	r3, [pc, #204]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef8:	2203      	movs	r2, #3
 8006efa:	4393      	bics	r3, r2
 8006efc:	0019      	movs	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f04:	430a      	orrs	r2, r1
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f12:	4b2c      	ldr	r3, [pc, #176]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f16:	220c      	movs	r2, #12
 8006f18:	4393      	bics	r3, r2
 8006f1a:	0019      	movs	r1, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	4b28      	ldr	r3, [pc, #160]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f22:	430a      	orrs	r2, r1
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f30:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f34:	4a29      	ldr	r2, [pc, #164]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	0019      	movs	r1, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	4b21      	ldr	r3, [pc, #132]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f40:	430a      	orrs	r2, r1
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	01db      	lsls	r3, r3, #7
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d015      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f50:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	0899      	lsrs	r1, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695a      	ldr	r2, [r3, #20]
 8006f66:	2380      	movs	r3, #128	; 0x80
 8006f68:	05db      	lsls	r3, r3, #23
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d106      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f6e:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	0249      	lsls	r1, r1, #9
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	4013      	ands	r3, r2
 8006f86:	d016      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006f88:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8c:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	0019      	movs	r1, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	2380      	movs	r3, #128	; 0x80
 8006fa2:	01db      	lsls	r3, r3, #7
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d106      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	0249      	lsls	r1, r1, #9
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006fb6:	2312      	movs	r3, #18
 8006fb8:	18fb      	adds	r3, r7, r3
 8006fba:	781b      	ldrb	r3, [r3, #0]
}
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b006      	add	sp, #24
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40007000 	.word	0x40007000
 8006fcc:	fffffcff 	.word	0xfffffcff
 8006fd0:	fffeffff 	.word	0xfffeffff
 8006fd4:	00001388 	.word	0x00001388
 8006fd8:	efffffff 	.word	0xefffffff
 8006fdc:	ffffcfff 	.word	0xffffcfff
 8006fe0:	ffff3fff 	.word	0xffff3fff

08006fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e04a      	b.n	800708c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	223d      	movs	r2, #61	; 0x3d
 8006ffa:	5c9b      	ldrb	r3, [r3, r2]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d107      	bne.n	8007012 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	223c      	movs	r2, #60	; 0x3c
 8007006:	2100      	movs	r1, #0
 8007008:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	0018      	movs	r0, r3
 800700e:	f7fd f903 	bl	8004218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	223d      	movs	r2, #61	; 0x3d
 8007016:	2102      	movs	r1, #2
 8007018:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	0019      	movs	r1, r3
 8007024:	0010      	movs	r0, r2
 8007026:	f000 fd55 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2248      	movs	r2, #72	; 0x48
 800702e:	2101      	movs	r1, #1
 8007030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	223e      	movs	r2, #62	; 0x3e
 8007036:	2101      	movs	r1, #1
 8007038:	5499      	strb	r1, [r3, r2]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	223f      	movs	r2, #63	; 0x3f
 800703e:	2101      	movs	r1, #1
 8007040:	5499      	strb	r1, [r3, r2]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2240      	movs	r2, #64	; 0x40
 8007046:	2101      	movs	r1, #1
 8007048:	5499      	strb	r1, [r3, r2]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2241      	movs	r2, #65	; 0x41
 800704e:	2101      	movs	r1, #1
 8007050:	5499      	strb	r1, [r3, r2]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2242      	movs	r2, #66	; 0x42
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2243      	movs	r2, #67	; 0x43
 800705e:	2101      	movs	r1, #1
 8007060:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2244      	movs	r2, #68	; 0x44
 8007066:	2101      	movs	r1, #1
 8007068:	5499      	strb	r1, [r3, r2]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2245      	movs	r2, #69	; 0x45
 800706e:	2101      	movs	r1, #1
 8007070:	5499      	strb	r1, [r3, r2]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2246      	movs	r2, #70	; 0x46
 8007076:	2101      	movs	r1, #1
 8007078:	5499      	strb	r1, [r3, r2]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2247      	movs	r2, #71	; 0x47
 800707e:	2101      	movs	r1, #1
 8007080:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	223d      	movs	r2, #61	; 0x3d
 8007086:	2101      	movs	r1, #1
 8007088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	0018      	movs	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	b002      	add	sp, #8
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e04a      	b.n	800713c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	223d      	movs	r2, #61	; 0x3d
 80070aa:	5c9b      	ldrb	r3, [r3, r2]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	223c      	movs	r2, #60	; 0x3c
 80070b6:	2100      	movs	r1, #0
 80070b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	0018      	movs	r0, r3
 80070be:	f000 f841 	bl	8007144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	223d      	movs	r2, #61	; 0x3d
 80070c6:	2102      	movs	r1, #2
 80070c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	0019      	movs	r1, r3
 80070d4:	0010      	movs	r0, r2
 80070d6:	f000 fcfd 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2248      	movs	r2, #72	; 0x48
 80070de:	2101      	movs	r1, #1
 80070e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	223e      	movs	r2, #62	; 0x3e
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	223f      	movs	r2, #63	; 0x3f
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2240      	movs	r2, #64	; 0x40
 80070f6:	2101      	movs	r1, #1
 80070f8:	5499      	strb	r1, [r3, r2]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2241      	movs	r2, #65	; 0x41
 80070fe:	2101      	movs	r1, #1
 8007100:	5499      	strb	r1, [r3, r2]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2242      	movs	r2, #66	; 0x42
 8007106:	2101      	movs	r1, #1
 8007108:	5499      	strb	r1, [r3, r2]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2243      	movs	r2, #67	; 0x43
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2244      	movs	r2, #68	; 0x44
 8007116:	2101      	movs	r1, #1
 8007118:	5499      	strb	r1, [r3, r2]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2245      	movs	r2, #69	; 0x45
 800711e:	2101      	movs	r1, #1
 8007120:	5499      	strb	r1, [r3, r2]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2246      	movs	r2, #70	; 0x46
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2247      	movs	r2, #71	; 0x47
 800712e:	2101      	movs	r1, #1
 8007130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	223d      	movs	r2, #61	; 0x3d
 8007136:	2101      	movs	r1, #1
 8007138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	0018      	movs	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	b002      	add	sp, #8
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d108      	bne.n	8007176 <HAL_TIM_PWM_Start+0x22>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	223e      	movs	r2, #62	; 0x3e
 8007168:	5c9b      	ldrb	r3, [r3, r2]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	4193      	sbcs	r3, r2
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e037      	b.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b04      	cmp	r3, #4
 800717a:	d108      	bne.n	800718e <HAL_TIM_PWM_Start+0x3a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	223f      	movs	r2, #63	; 0x3f
 8007180:	5c9b      	ldrb	r3, [r3, r2]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	3b01      	subs	r3, #1
 8007186:	1e5a      	subs	r2, r3, #1
 8007188:	4193      	sbcs	r3, r2
 800718a:	b2db      	uxtb	r3, r3
 800718c:	e02b      	b.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d108      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x52>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	5c9b      	ldrb	r3, [r3, r2]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	4193      	sbcs	r3, r2
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	e01f      	b.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d108      	bne.n	80071be <HAL_TIM_PWM_Start+0x6a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2241      	movs	r2, #65	; 0x41
 80071b0:	5c9b      	ldrb	r3, [r3, r2]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	4193      	sbcs	r3, r2
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	e013      	b.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d108      	bne.n	80071d6 <HAL_TIM_PWM_Start+0x82>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2242      	movs	r2, #66	; 0x42
 80071c8:	5c9b      	ldrb	r3, [r3, r2]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	1e5a      	subs	r2, r3, #1
 80071d0:	4193      	sbcs	r3, r2
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	e007      	b.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2243      	movs	r2, #67	; 0x43
 80071da:	5c9b      	ldrb	r3, [r3, r2]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	4193      	sbcs	r3, r2
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e085      	b.n	80072fa <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d104      	bne.n	80071fe <HAL_TIM_PWM_Start+0xaa>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	223e      	movs	r2, #62	; 0x3e
 80071f8:	2102      	movs	r1, #2
 80071fa:	5499      	strb	r1, [r3, r2]
 80071fc:	e023      	b.n	8007246 <HAL_TIM_PWM_Start+0xf2>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b04      	cmp	r3, #4
 8007202:	d104      	bne.n	800720e <HAL_TIM_PWM_Start+0xba>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	223f      	movs	r2, #63	; 0x3f
 8007208:	2102      	movs	r1, #2
 800720a:	5499      	strb	r1, [r3, r2]
 800720c:	e01b      	b.n	8007246 <HAL_TIM_PWM_Start+0xf2>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b08      	cmp	r3, #8
 8007212:	d104      	bne.n	800721e <HAL_TIM_PWM_Start+0xca>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	2102      	movs	r1, #2
 800721a:	5499      	strb	r1, [r3, r2]
 800721c:	e013      	b.n	8007246 <HAL_TIM_PWM_Start+0xf2>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d104      	bne.n	800722e <HAL_TIM_PWM_Start+0xda>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2241      	movs	r2, #65	; 0x41
 8007228:	2102      	movs	r1, #2
 800722a:	5499      	strb	r1, [r3, r2]
 800722c:	e00b      	b.n	8007246 <HAL_TIM_PWM_Start+0xf2>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b10      	cmp	r3, #16
 8007232:	d104      	bne.n	800723e <HAL_TIM_PWM_Start+0xea>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2242      	movs	r2, #66	; 0x42
 8007238:	2102      	movs	r1, #2
 800723a:	5499      	strb	r1, [r3, r2]
 800723c:	e003      	b.n	8007246 <HAL_TIM_PWM_Start+0xf2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2243      	movs	r2, #67	; 0x43
 8007242:	2102      	movs	r1, #2
 8007244:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	0018      	movs	r0, r3
 8007250:	f001 f89a 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2a      	ldr	r2, [pc, #168]	; (8007304 <HAL_TIM_PWM_Start+0x1b0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_TIM_PWM_Start+0x128>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a29      	ldr	r2, [pc, #164]	; (8007308 <HAL_TIM_PWM_Start+0x1b4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d009      	beq.n	800727c <HAL_TIM_PWM_Start+0x128>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a27      	ldr	r2, [pc, #156]	; (800730c <HAL_TIM_PWM_Start+0x1b8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIM_PWM_Start+0x128>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <HAL_TIM_PWM_Start+0x1bc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d101      	bne.n	8007280 <HAL_TIM_PWM_Start+0x12c>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <HAL_TIM_PWM_Start+0x12e>
 8007280:	2300      	movs	r3, #0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	0209      	lsls	r1, r1, #8
 8007294:	430a      	orrs	r2, r1
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a19      	ldr	r2, [pc, #100]	; (8007304 <HAL_TIM_PWM_Start+0x1b0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x162>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <HAL_TIM_PWM_Start+0x1c0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x162>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_TIM_PWM_Start+0x1b4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d116      	bne.n	80072e4 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a16      	ldr	r2, [pc, #88]	; (8007318 <HAL_TIM_PWM_Start+0x1c4>)
 80072be:	4013      	ands	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b06      	cmp	r3, #6
 80072c6:	d016      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x1a2>
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	2380      	movs	r3, #128	; 0x80
 80072cc:	025b      	lsls	r3, r3, #9
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d011      	beq.n	80072f6 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	e008      	b.n	80072f6 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2101      	movs	r1, #1
 80072f0:	430a      	orrs	r2, r1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	0018      	movs	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	b004      	add	sp, #16
 8007300:	bd80      	pop	{r7, pc}
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	40012c00 	.word	0x40012c00
 8007308:	40014000 	.word	0x40014000
 800730c:	40014400 	.word	0x40014400
 8007310:	40014800 	.word	0x40014800
 8007314:	40000400 	.word	0x40000400
 8007318:	00010007 	.word	0x00010007

0800731c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	2200      	movs	r2, #0
 800732e:	0018      	movs	r0, r3
 8007330:	f001 f82a 	bl	8008388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a37      	ldr	r2, [pc, #220]	; (8007418 <HAL_TIM_PWM_Stop+0xfc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00e      	beq.n	800735c <HAL_TIM_PWM_Stop+0x40>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a36      	ldr	r2, [pc, #216]	; (800741c <HAL_TIM_PWM_Stop+0x100>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIM_PWM_Stop+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a34      	ldr	r2, [pc, #208]	; (8007420 <HAL_TIM_PWM_Stop+0x104>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIM_PWM_Stop+0x40>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a33      	ldr	r2, [pc, #204]	; (8007424 <HAL_TIM_PWM_Stop+0x108>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d101      	bne.n	8007360 <HAL_TIM_PWM_Stop+0x44>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <HAL_TIM_PWM_Stop+0x46>
 8007360:	2300      	movs	r3, #0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d013      	beq.n	800738e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	4a2e      	ldr	r2, [pc, #184]	; (8007428 <HAL_TIM_PWM_Stop+0x10c>)
 800736e:	4013      	ands	r3, r2
 8007370:	d10d      	bne.n	800738e <HAL_TIM_PWM_Stop+0x72>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <HAL_TIM_PWM_Stop+0x110>)
 800737a:	4013      	ands	r3, r2
 800737c:	d107      	bne.n	800738e <HAL_TIM_PWM_Stop+0x72>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4929      	ldr	r1, [pc, #164]	; (8007430 <HAL_TIM_PWM_Stop+0x114>)
 800738a:	400a      	ands	r2, r1
 800738c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <HAL_TIM_PWM_Stop+0x10c>)
 8007396:	4013      	ands	r3, r2
 8007398:	d10d      	bne.n	80073b6 <HAL_TIM_PWM_Stop+0x9a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	4a22      	ldr	r2, [pc, #136]	; (800742c <HAL_TIM_PWM_Stop+0x110>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	d107      	bne.n	80073b6 <HAL_TIM_PWM_Stop+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2101      	movs	r1, #1
 80073b2:	438a      	bics	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_PWM_Stop+0xaa>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	223e      	movs	r2, #62	; 0x3e
 80073c0:	2101      	movs	r1, #1
 80073c2:	5499      	strb	r1, [r3, r2]
 80073c4:	e023      	b.n	800740e <HAL_TIM_PWM_Stop+0xf2>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d104      	bne.n	80073d6 <HAL_TIM_PWM_Stop+0xba>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	223f      	movs	r2, #63	; 0x3f
 80073d0:	2101      	movs	r1, #1
 80073d2:	5499      	strb	r1, [r3, r2]
 80073d4:	e01b      	b.n	800740e <HAL_TIM_PWM_Stop+0xf2>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d104      	bne.n	80073e6 <HAL_TIM_PWM_Stop+0xca>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2240      	movs	r2, #64	; 0x40
 80073e0:	2101      	movs	r1, #1
 80073e2:	5499      	strb	r1, [r3, r2]
 80073e4:	e013      	b.n	800740e <HAL_TIM_PWM_Stop+0xf2>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	d104      	bne.n	80073f6 <HAL_TIM_PWM_Stop+0xda>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2241      	movs	r2, #65	; 0x41
 80073f0:	2101      	movs	r1, #1
 80073f2:	5499      	strb	r1, [r3, r2]
 80073f4:	e00b      	b.n	800740e <HAL_TIM_PWM_Stop+0xf2>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Stop+0xea>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2242      	movs	r2, #66	; 0x42
 8007400:	2101      	movs	r1, #1
 8007402:	5499      	strb	r1, [r3, r2]
 8007404:	e003      	b.n	800740e <HAL_TIM_PWM_Stop+0xf2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2243      	movs	r2, #67	; 0x43
 800740a:	2101      	movs	r1, #1
 800740c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	0018      	movs	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	b002      	add	sp, #8
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40012c00 	.word	0x40012c00
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800
 8007428:	00001111 	.word	0x00001111
 800742c:	00000444 	.word	0x00000444
 8007430:	ffff7fff 	.word	0xffff7fff

08007434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e04a      	b.n	80074dc <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	223d      	movs	r2, #61	; 0x3d
 800744a:	5c9b      	ldrb	r3, [r3, r2]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	223c      	movs	r2, #60	; 0x3c
 8007456:	2100      	movs	r1, #0
 8007458:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0018      	movs	r0, r3
 800745e:	f000 f841 	bl	80074e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	223d      	movs	r2, #61	; 0x3d
 8007466:	2102      	movs	r1, #2
 8007468:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3304      	adds	r3, #4
 8007472:	0019      	movs	r1, r3
 8007474:	0010      	movs	r0, r2
 8007476:	f000 fb2d 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2248      	movs	r2, #72	; 0x48
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	223e      	movs	r2, #62	; 0x3e
 8007486:	2101      	movs	r1, #1
 8007488:	5499      	strb	r1, [r3, r2]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	223f      	movs	r2, #63	; 0x3f
 800748e:	2101      	movs	r1, #1
 8007490:	5499      	strb	r1, [r3, r2]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2241      	movs	r2, #65	; 0x41
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2242      	movs	r2, #66	; 0x42
 80074a6:	2101      	movs	r1, #1
 80074a8:	5499      	strb	r1, [r3, r2]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2243      	movs	r2, #67	; 0x43
 80074ae:	2101      	movs	r1, #1
 80074b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2244      	movs	r2, #68	; 0x44
 80074b6:	2101      	movs	r1, #1
 80074b8:	5499      	strb	r1, [r3, r2]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2245      	movs	r2, #69	; 0x45
 80074be:	2101      	movs	r1, #1
 80074c0:	5499      	strb	r1, [r3, r2]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2246      	movs	r2, #70	; 0x46
 80074c6:	2101      	movs	r1, #1
 80074c8:	5499      	strb	r1, [r3, r2]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2247      	movs	r2, #71	; 0x47
 80074ce:	2101      	movs	r1, #1
 80074d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223d      	movs	r2, #61	; 0x3d
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	0018      	movs	r0, r3
 80074de:	46bd      	mov	sp, r7
 80074e0:	b002      	add	sp, #8
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b002      	add	sp, #8
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e090      	b.n	800762a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	223d      	movs	r2, #61	; 0x3d
 800750c:	5c9b      	ldrb	r3, [r3, r2]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	223c      	movs	r2, #60	; 0x3c
 8007518:	2100      	movs	r1, #0
 800751a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	0018      	movs	r0, r3
 8007520:	f7fc fdd4 	bl	80040cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	223d      	movs	r2, #61	; 0x3d
 8007528:	2102      	movs	r1, #2
 800752a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	493f      	ldr	r1, [pc, #252]	; (8007634 <HAL_TIM_Encoder_Init+0x140>)
 8007538:	400a      	ands	r2, r1
 800753a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	0019      	movs	r1, r3
 8007546:	0010      	movs	r0, r2
 8007548:	f000 fac4 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4a31      	ldr	r2, [pc, #196]	; (8007638 <HAL_TIM_Encoder_Init+0x144>)
 8007572:	4013      	ands	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	4313      	orrs	r3, r2
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4a2c      	ldr	r2, [pc, #176]	; (800763c <HAL_TIM_Encoder_Init+0x148>)
 800758c:	4013      	ands	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	4a2b      	ldr	r2, [pc, #172]	; (8007640 <HAL_TIM_Encoder_Init+0x14c>)
 8007594:	4013      	ands	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	4313      	orrs	r3, r2
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	011a      	lsls	r2, r3, #4
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	031b      	lsls	r3, r3, #12
 80075b6:	4313      	orrs	r3, r2
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2222      	movs	r2, #34	; 0x22
 80075c2:	4393      	bics	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2288      	movs	r2, #136	; 0x88
 80075ca:	4393      	bics	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	4313      	orrs	r3, r2
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2248      	movs	r2, #72	; 0x48
 80075fc:	2101      	movs	r1, #1
 80075fe:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	223e      	movs	r2, #62	; 0x3e
 8007604:	2101      	movs	r1, #1
 8007606:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	223f      	movs	r2, #63	; 0x3f
 800760c:	2101      	movs	r1, #1
 800760e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2244      	movs	r2, #68	; 0x44
 8007614:	2101      	movs	r1, #1
 8007616:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2245      	movs	r2, #69	; 0x45
 800761c:	2101      	movs	r1, #1
 800761e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	223d      	movs	r2, #61	; 0x3d
 8007624:	2101      	movs	r1, #1
 8007626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	0018      	movs	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	b006      	add	sp, #24
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	fffebff8 	.word	0xfffebff8
 8007638:	fffffcfc 	.word	0xfffffcfc
 800763c:	fffff3f3 	.word	0xfffff3f3
 8007640:	ffff0f0f 	.word	0xffff0f0f

08007644 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800764e:	200f      	movs	r0, #15
 8007650:	183b      	adds	r3, r7, r0
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	213e      	movs	r1, #62	; 0x3e
 8007656:	5c52      	ldrb	r2, [r2, r1]
 8007658:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800765a:	230e      	movs	r3, #14
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	213f      	movs	r1, #63	; 0x3f
 8007662:	5c52      	ldrb	r2, [r2, r1]
 8007664:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007666:	240d      	movs	r4, #13
 8007668:	193b      	adds	r3, r7, r4
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	2144      	movs	r1, #68	; 0x44
 800766e:	5c52      	ldrb	r2, [r2, r1]
 8007670:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007672:	230c      	movs	r3, #12
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	2145      	movs	r1, #69	; 0x45
 800767a:	5c52      	ldrb	r2, [r2, r1]
 800767c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d112      	bne.n	80076aa <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007684:	183b      	adds	r3, r7, r0
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d103      	bne.n	8007694 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800768c:	193b      	adds	r3, r7, r4
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e075      	b.n	8007784 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	223e      	movs	r2, #62	; 0x3e
 800769c:	2102      	movs	r1, #2
 800769e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2244      	movs	r2, #68	; 0x44
 80076a4:	2102      	movs	r1, #2
 80076a6:	5499      	strb	r1, [r3, r2]
 80076a8:	e03d      	b.n	8007726 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d114      	bne.n	80076da <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b0:	230e      	movs	r3, #14
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d104      	bne.n	80076c4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ba:	230c      	movs	r3, #12
 80076bc:	18fb      	adds	r3, r7, r3
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e05d      	b.n	8007784 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	223f      	movs	r2, #63	; 0x3f
 80076cc:	2102      	movs	r1, #2
 80076ce:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2245      	movs	r2, #69	; 0x45
 80076d4:	2102      	movs	r1, #2
 80076d6:	5499      	strb	r1, [r3, r2]
 80076d8:	e025      	b.n	8007726 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076da:	230f      	movs	r3, #15
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10e      	bne.n	8007702 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076e4:	230e      	movs	r3, #14
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d109      	bne.n	8007702 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ee:	230d      	movs	r3, #13
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d104      	bne.n	8007702 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076f8:	230c      	movs	r3, #12
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d001      	beq.n	8007706 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e03e      	b.n	8007784 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	223e      	movs	r2, #62	; 0x3e
 800770a:	2102      	movs	r1, #2
 800770c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	223f      	movs	r2, #63	; 0x3f
 8007712:	2102      	movs	r1, #2
 8007714:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2244      	movs	r2, #68	; 0x44
 800771a:	2102      	movs	r1, #2
 800771c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2245      	movs	r2, #69	; 0x45
 8007722:	2102      	movs	r1, #2
 8007724:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_TIM_Encoder_Start+0xf0>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d008      	beq.n	8007744 <HAL_TIM_Encoder_Start+0x100>
 8007732:	e00f      	b.n	8007754 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	2100      	movs	r1, #0
 800773c:	0018      	movs	r0, r3
 800773e:	f000 fe23 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007742:	e016      	b.n	8007772 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2201      	movs	r2, #1
 800774a:	2104      	movs	r1, #4
 800774c:	0018      	movs	r0, r3
 800774e:	f000 fe1b 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007752:	e00e      	b.n	8007772 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	2100      	movs	r1, #0
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fe13 	bl	8008388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	2104      	movs	r1, #4
 800776a:	0018      	movs	r0, r3
 800776c:	f000 fe0c 	bl	8008388 <TIM_CCxChannelCmd>
      break;
 8007770:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2101      	movs	r1, #1
 800777e:	430a      	orrs	r2, r1
 8007780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	0018      	movs	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	b005      	add	sp, #20
 800778a:	bd90      	pop	{r4, r7, pc}

0800778c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007798:	2317      	movs	r3, #23
 800779a:	18fb      	adds	r3, r7, r3
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	223c      	movs	r2, #60	; 0x3c
 80077a4:	5c9b      	ldrb	r3, [r3, r2]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_TIM_IC_ConfigChannel+0x22>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e08c      	b.n	80078c8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	223c      	movs	r2, #60	; 0x3c
 80077b2:	2101      	movs	r1, #1
 80077b4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d11b      	bne.n	80077f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f000 fcbc 	bl	8008148 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	210c      	movs	r1, #12
 80077dc:	438a      	bics	r2, r1
 80077de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6999      	ldr	r1, [r3, #24]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	619a      	str	r2, [r3, #24]
 80077f2:	e062      	b.n	80078ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d11c      	bne.n	8007834 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6819      	ldr	r1, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f000 fcf5 	bl	80081f8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	492d      	ldr	r1, [pc, #180]	; (80078d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800781a:	400a      	ands	r2, r1
 800781c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6999      	ldr	r1, [r3, #24]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	021a      	lsls	r2, r3, #8
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	619a      	str	r2, [r3, #24]
 8007832:	e042      	b.n	80078ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b08      	cmp	r3, #8
 8007838:	d11b      	bne.n	8007872 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f000 fd17 	bl	800827c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	210c      	movs	r1, #12
 800785a:	438a      	bics	r2, r1
 800785c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69d9      	ldr	r1, [r3, #28]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	61da      	str	r2, [r3, #28]
 8007870:	e023      	b.n	80078ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b0c      	cmp	r3, #12
 8007876:	d11c      	bne.n	80078b2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6819      	ldr	r1, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f000 fd38 	bl	80082fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69da      	ldr	r2, [r3, #28]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	490e      	ldr	r1, [pc, #56]	; (80078d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8007898:	400a      	ands	r2, r1
 800789a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69d9      	ldr	r1, [r3, #28]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	021a      	lsls	r2, r3, #8
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	61da      	str	r2, [r3, #28]
 80078b0:	e003      	b.n	80078ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80078b2:	2317      	movs	r3, #23
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	2201      	movs	r2, #1
 80078b8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	223c      	movs	r2, #60	; 0x3c
 80078be:	2100      	movs	r1, #0
 80078c0:	5499      	strb	r1, [r3, r2]

  return status;
 80078c2:	2317      	movs	r3, #23
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	781b      	ldrb	r3, [r3, #0]
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b006      	add	sp, #24
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	fffff3ff 	.word	0xfffff3ff

080078d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e0:	2317      	movs	r3, #23
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	223c      	movs	r2, #60	; 0x3c
 80078ec:	5c9b      	ldrb	r3, [r3, r2]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e0e5      	b.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	223c      	movs	r2, #60	; 0x3c
 80078fa:	2101      	movs	r1, #1
 80078fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b14      	cmp	r3, #20
 8007902:	d900      	bls.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007904:	e0d1      	b.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	009a      	lsls	r2, r3, #2
 800790a:	4b70      	ldr	r3, [pc, #448]	; (8007acc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800790c:	18d3      	adds	r3, r2, r3
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	0011      	movs	r1, r2
 800791a:	0018      	movs	r0, r3
 800791c:	f000 f950 	bl	8007bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2108      	movs	r1, #8
 800792c:	430a      	orrs	r2, r1
 800792e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	438a      	bics	r2, r1
 800793e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6999      	ldr	r1, [r3, #24]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	619a      	str	r2, [r3, #24]
      break;
 8007952:	e0af      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	0011      	movs	r1, r2
 800795c:	0018      	movs	r0, r3
 800795e:	f000 f9b9 	bl	8007cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2180      	movs	r1, #128	; 0x80
 800796e:	0109      	lsls	r1, r1, #4
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4954      	ldr	r1, [pc, #336]	; (8007ad0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007980:	400a      	ands	r2, r1
 8007982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6999      	ldr	r1, [r3, #24]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	619a      	str	r2, [r3, #24]
      break;
 8007998:	e08c      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	0011      	movs	r1, r2
 80079a2:	0018      	movs	r0, r3
 80079a4:	f000 fa1a 	bl	8007ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69da      	ldr	r2, [r3, #28]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2108      	movs	r1, #8
 80079b4:	430a      	orrs	r2, r1
 80079b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69da      	ldr	r2, [r3, #28]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2104      	movs	r1, #4
 80079c4:	438a      	bics	r2, r1
 80079c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69d9      	ldr	r1, [r3, #28]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	61da      	str	r2, [r3, #28]
      break;
 80079da:	e06b      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	0011      	movs	r1, r2
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 fa81 	bl	8007eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2180      	movs	r1, #128	; 0x80
 80079f6:	0109      	lsls	r1, r1, #4
 80079f8:	430a      	orrs	r2, r1
 80079fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69da      	ldr	r2, [r3, #28]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4932      	ldr	r1, [pc, #200]	; (8007ad0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007a08:	400a      	ands	r2, r1
 8007a0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69d9      	ldr	r1, [r3, #28]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	021a      	lsls	r2, r3, #8
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	61da      	str	r2, [r3, #28]
      break;
 8007a20:	e048      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	0011      	movs	r1, r2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f000 fac8 	bl	8007fc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2108      	movs	r1, #8
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2104      	movs	r1, #4
 8007a4c:	438a      	bics	r2, r1
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a62:	e027      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	0011      	movs	r1, r2
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f000 fb07 	bl	8008080 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	0109      	lsls	r1, r1, #4
 8007a80:	430a      	orrs	r2, r1
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4910      	ldr	r1, [pc, #64]	; (8007ad0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007a90:	400a      	ands	r2, r1
 8007a92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	021a      	lsls	r2, r3, #8
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007aa8:	e004      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007aaa:	2317      	movs	r3, #23
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2201      	movs	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
      break;
 8007ab2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	223c      	movs	r2, #60	; 0x3c
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5499      	strb	r1, [r3, r2]

  return status;
 8007abc:	2317      	movs	r3, #23
 8007abe:	18fb      	adds	r3, r7, r3
 8007ac0:	781b      	ldrb	r3, [r3, #0]
}
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	b006      	add	sp, #24
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	08014d80 	.word	0x08014d80
 8007ad0:	fffffbff 	.word	0xfffffbff

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a2f      	ldr	r2, [pc, #188]	; (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_Base_SetConfig+0x20>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <TIM_Base_SetConfig+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d108      	bne.n	8007b06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2270      	movs	r2, #112	; 0x70
 8007af8:	4393      	bics	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a26      	ldr	r2, [pc, #152]	; (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a25      	ldr	r2, [pc, #148]	; (8007ba8 <TIM_Base_SetConfig+0xd4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00f      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <TIM_Base_SetConfig+0xd8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a23      	ldr	r2, [pc, #140]	; (8007bb0 <TIM_Base_SetConfig+0xdc>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d007      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a22      	ldr	r2, [pc, #136]	; (8007bb4 <TIM_Base_SetConfig+0xe0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_Base_SetConfig+0x62>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a21      	ldr	r2, [pc, #132]	; (8007bb8 <TIM_Base_SetConfig+0xe4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <TIM_Base_SetConfig+0xe8>)
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2280      	movs	r2, #128	; 0x80
 8007b4c:	4393      	bics	r3, r2
 8007b4e:	001a      	movs	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <TIM_Base_SetConfig+0xd0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00b      	beq.n	8007b8e <TIM_Base_SetConfig+0xba>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a0d      	ldr	r2, [pc, #52]	; (8007bb0 <TIM_Base_SetConfig+0xdc>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d007      	beq.n	8007b8e <TIM_Base_SetConfig+0xba>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a0c      	ldr	r2, [pc, #48]	; (8007bb4 <TIM_Base_SetConfig+0xe0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d003      	beq.n	8007b8e <TIM_Base_SetConfig+0xba>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a0b      	ldr	r2, [pc, #44]	; (8007bb8 <TIM_Base_SetConfig+0xe4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d103      	bne.n	8007b96 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	615a      	str	r2, [r3, #20]
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b004      	add	sp, #16
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40000400 	.word	0x40000400
 8007bac:	40002000 	.word	0x40002000
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800
 8007bbc:	fffffcff 	.word	0xfffffcff

08007bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4393      	bics	r3, r2
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4a32      	ldr	r2, [pc, #200]	; (8007cb8 <TIM_OC1_SetConfig+0xf8>)
 8007bee:	4013      	ands	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	4393      	bics	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2202      	movs	r2, #2
 8007c08:	4393      	bics	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a28      	ldr	r2, [pc, #160]	; (8007cbc <TIM_OC1_SetConfig+0xfc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00b      	beq.n	8007c36 <TIM_OC1_SetConfig+0x76>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a27      	ldr	r2, [pc, #156]	; (8007cc0 <TIM_OC1_SetConfig+0x100>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <TIM_OC1_SetConfig+0x76>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a26      	ldr	r2, [pc, #152]	; (8007cc4 <TIM_OC1_SetConfig+0x104>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_OC1_SetConfig+0x76>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a25      	ldr	r2, [pc, #148]	; (8007cc8 <TIM_OC1_SetConfig+0x108>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d10c      	bne.n	8007c50 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2208      	movs	r2, #8
 8007c3a:	4393      	bics	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	4393      	bics	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a1a      	ldr	r2, [pc, #104]	; (8007cbc <TIM_OC1_SetConfig+0xfc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <TIM_OC1_SetConfig+0xb0>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <TIM_OC1_SetConfig+0x100>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_OC1_SetConfig+0xb0>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <TIM_OC1_SetConfig+0x104>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_OC1_SetConfig+0xb0>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <TIM_OC1_SetConfig+0x108>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d111      	bne.n	8007c94 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_OC1_SetConfig+0x10c>)
 8007c74:	4013      	ands	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <TIM_OC1_SetConfig+0x110>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b006      	add	sp, #24
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	fffeff8f 	.word	0xfffeff8f
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800
 8007ccc:	fffffeff 	.word	0xfffffeff
 8007cd0:	fffffdff 	.word	0xfffffdff

08007cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4a2e      	ldr	r2, [pc, #184]	; (8007dbc <TIM_OC2_SetConfig+0xe8>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a2d      	ldr	r2, [pc, #180]	; (8007dc0 <TIM_OC2_SetConfig+0xec>)
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	4393      	bics	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a24      	ldr	r2, [pc, #144]	; (8007dc4 <TIM_OC2_SetConfig+0xf0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2280      	movs	r2, #128	; 0x80
 8007d3a:	4393      	bics	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	4393      	bics	r3, r2
 8007d50:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <TIM_OC2_SetConfig+0xf0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00b      	beq.n	8007d72 <TIM_OC2_SetConfig+0x9e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a1a      	ldr	r2, [pc, #104]	; (8007dc8 <TIM_OC2_SetConfig+0xf4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d007      	beq.n	8007d72 <TIM_OC2_SetConfig+0x9e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a19      	ldr	r2, [pc, #100]	; (8007dcc <TIM_OC2_SetConfig+0xf8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d003      	beq.n	8007d72 <TIM_OC2_SetConfig+0x9e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a18      	ldr	r2, [pc, #96]	; (8007dd0 <TIM_OC2_SetConfig+0xfc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d113      	bne.n	8007d9a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <TIM_OC2_SetConfig+0x100>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <TIM_OC2_SetConfig+0x104>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	621a      	str	r2, [r3, #32]
}
 8007db4:	46c0      	nop			; (mov r8, r8)
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b006      	add	sp, #24
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	feff8fff 	.word	0xfeff8fff
 8007dc0:	fffffcff 	.word	0xfffffcff
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800
 8007dd4:	fffffbff 	.word	0xfffffbff
 8007dd8:	fffff7ff 	.word	0xfffff7ff

08007ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4a35      	ldr	r2, [pc, #212]	; (8007ec0 <TIM_OC3_SetConfig+0xe4>)
 8007dec:	401a      	ands	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4a2f      	ldr	r2, [pc, #188]	; (8007ec4 <TIM_OC3_SetConfig+0xe8>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2203      	movs	r2, #3
 8007e10:	4393      	bics	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <TIM_OC3_SetConfig+0xec>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a25      	ldr	r2, [pc, #148]	; (8007ecc <TIM_OC3_SetConfig+0xf0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d10d      	bne.n	8007e56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <TIM_OC3_SetConfig+0xf4>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4a20      	ldr	r2, [pc, #128]	; (8007ed4 <TIM_OC3_SetConfig+0xf8>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1c      	ldr	r2, [pc, #112]	; (8007ecc <TIM_OC3_SetConfig+0xf0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <TIM_OC3_SetConfig+0x9a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a1d      	ldr	r2, [pc, #116]	; (8007ed8 <TIM_OC3_SetConfig+0xfc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_OC3_SetConfig+0x9a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a1c      	ldr	r2, [pc, #112]	; (8007edc <TIM_OC3_SetConfig+0x100>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_OC3_SetConfig+0x9a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <TIM_OC3_SetConfig+0x104>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d113      	bne.n	8007e9e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <TIM_OC3_SetConfig+0x108>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	4a19      	ldr	r2, [pc, #100]	; (8007ee8 <TIM_OC3_SetConfig+0x10c>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b006      	add	sp, #24
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	fffffeff 	.word	0xfffffeff
 8007ec4:	fffeff8f 	.word	0xfffeff8f
 8007ec8:	fffffdff 	.word	0xfffffdff
 8007ecc:	40012c00 	.word	0x40012c00
 8007ed0:	fffff7ff 	.word	0xfffff7ff
 8007ed4:	fffffbff 	.word	0xfffffbff
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40014400 	.word	0x40014400
 8007ee0:	40014800 	.word	0x40014800
 8007ee4:	ffffefff 	.word	0xffffefff
 8007ee8:	ffffdfff 	.word	0xffffdfff

08007eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	4a28      	ldr	r2, [pc, #160]	; (8007f9c <TIM_OC4_SetConfig+0xb0>)
 8007efc:	401a      	ands	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <TIM_OC4_SetConfig+0xb4>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <TIM_OC4_SetConfig+0xb8>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <TIM_OC4_SetConfig+0xbc>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	031b      	lsls	r3, r3, #12
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a19      	ldr	r2, [pc, #100]	; (8007fac <TIM_OC4_SetConfig+0xc0>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00b      	beq.n	8007f64 <TIM_OC4_SetConfig+0x78>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <TIM_OC4_SetConfig+0xc4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d007      	beq.n	8007f64 <TIM_OC4_SetConfig+0x78>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a17      	ldr	r2, [pc, #92]	; (8007fb4 <TIM_OC4_SetConfig+0xc8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d003      	beq.n	8007f64 <TIM_OC4_SetConfig+0x78>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a16      	ldr	r2, [pc, #88]	; (8007fb8 <TIM_OC4_SetConfig+0xcc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d109      	bne.n	8007f78 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <TIM_OC4_SetConfig+0xd0>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	019b      	lsls	r3, r3, #6
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	46bd      	mov	sp, r7
 8007f96:	b006      	add	sp, #24
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	ffffefff 	.word	0xffffefff
 8007fa0:	feff8fff 	.word	0xfeff8fff
 8007fa4:	fffffcff 	.word	0xfffffcff
 8007fa8:	ffffdfff 	.word	0xffffdfff
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800
 8007fbc:	ffffbfff 	.word	0xffffbfff

08007fc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <TIM_OC5_SetConfig+0xa4>)
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a1f      	ldr	r2, [pc, #124]	; (8008068 <TIM_OC5_SetConfig+0xa8>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	; (800806c <TIM_OC5_SetConfig+0xac>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	041b      	lsls	r3, r3, #16
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <TIM_OC5_SetConfig+0xb0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_OC5_SetConfig+0x6e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a16      	ldr	r2, [pc, #88]	; (8008074 <TIM_OC5_SetConfig+0xb4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC5_SetConfig+0x6e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a15      	ldr	r2, [pc, #84]	; (8008078 <TIM_OC5_SetConfig+0xb8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC5_SetConfig+0x6e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a14      	ldr	r2, [pc, #80]	; (800807c <TIM_OC5_SetConfig+0xbc>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d109      	bne.n	8008042 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <TIM_OC5_SetConfig+0xa4>)
 8008032:	4013      	ands	r3, r2
 8008034:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	621a      	str	r2, [r3, #32]
}
 800805c:	46c0      	nop			; (mov r8, r8)
 800805e:	46bd      	mov	sp, r7
 8008060:	b006      	add	sp, #24
 8008062:	bd80      	pop	{r7, pc}
 8008064:	fffeffff 	.word	0xfffeffff
 8008068:	fffeff8f 	.word	0xfffeff8f
 800806c:	fffdffff 	.word	0xfffdffff
 8008070:	40012c00 	.word	0x40012c00
 8008074:	40014000 	.word	0x40014000
 8008078:	40014400 	.word	0x40014400
 800807c:	40014800 	.word	0x40014800

08008080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	4a26      	ldr	r2, [pc, #152]	; (8008128 <TIM_OC6_SetConfig+0xa8>)
 8008090:	401a      	ands	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4a20      	ldr	r2, [pc, #128]	; (800812c <TIM_OC6_SetConfig+0xac>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	021b      	lsls	r3, r3, #8
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4a1c      	ldr	r2, [pc, #112]	; (8008130 <TIM_OC6_SetConfig+0xb0>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	051b      	lsls	r3, r3, #20
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a18      	ldr	r2, [pc, #96]	; (8008134 <TIM_OC6_SetConfig+0xb4>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00b      	beq.n	80080f0 <TIM_OC6_SetConfig+0x70>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <TIM_OC6_SetConfig+0xb8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_OC6_SetConfig+0x70>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a16      	ldr	r2, [pc, #88]	; (800813c <TIM_OC6_SetConfig+0xbc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_OC6_SetConfig+0x70>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a15      	ldr	r2, [pc, #84]	; (8008140 <TIM_OC6_SetConfig+0xc0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d109      	bne.n	8008104 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	4a14      	ldr	r2, [pc, #80]	; (8008144 <TIM_OC6_SetConfig+0xc4>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	029b      	lsls	r3, r3, #10
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	621a      	str	r2, [r3, #32]
}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	46bd      	mov	sp, r7
 8008122:	b006      	add	sp, #24
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	ffefffff 	.word	0xffefffff
 800812c:	feff8fff 	.word	0xfeff8fff
 8008130:	ffdfffff 	.word	0xffdfffff
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800
 8008144:	fffbffff 	.word	0xfffbffff

08008148 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	2201      	movs	r2, #1
 800815c:	4393      	bics	r3, r2
 800815e:	001a      	movs	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <TIM_TI1_SetConfig+0xa4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d007      	beq.n	8008188 <TIM_TI1_SetConfig+0x40>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4a1d      	ldr	r2, [pc, #116]	; (80081f0 <TIM_TI1_SetConfig+0xa8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d003      	beq.n	8008188 <TIM_TI1_SetConfig+0x40>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4a1c      	ldr	r2, [pc, #112]	; (80081f4 <TIM_TI1_SetConfig+0xac>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d101      	bne.n	800818c <TIM_TI1_SetConfig+0x44>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <TIM_TI1_SetConfig+0x46>
 800818c:	2300      	movs	r3, #0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d008      	beq.n	80081a4 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2203      	movs	r2, #3
 8008196:	4393      	bics	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4313      	orrs	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e003      	b.n	80081ac <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2201      	movs	r2, #1
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	22f0      	movs	r2, #240	; 0xf0
 80081b0:	4393      	bics	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	22ff      	movs	r2, #255	; 0xff
 80081ba:	4013      	ands	r3, r2
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	220a      	movs	r2, #10
 80081c6:	4393      	bics	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	220a      	movs	r2, #10
 80081ce:	4013      	ands	r3, r2
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	621a      	str	r2, [r3, #32]
}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	46bd      	mov	sp, r7
 80081e6:	b006      	add	sp, #24
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	40012c00 	.word	0x40012c00
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40014000 	.word	0x40014000

080081f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	2210      	movs	r2, #16
 800820c:	4393      	bics	r3, r2
 800820e:	001a      	movs	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	4a14      	ldr	r2, [pc, #80]	; (8008274 <TIM_TI2_SetConfig+0x7c>)
 8008224:	4013      	ands	r3, r2
 8008226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4a10      	ldr	r2, [pc, #64]	; (8008278 <TIM_TI2_SetConfig+0x80>)
 8008236:	4013      	ands	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	22a0      	movs	r2, #160	; 0xa0
 800824c:	4393      	bics	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	22a0      	movs	r2, #160	; 0xa0
 8008256:	4013      	ands	r3, r2
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	46bd      	mov	sp, r7
 800826e:	b006      	add	sp, #24
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	fffffcff 	.word	0xfffffcff
 8008278:	ffff0fff 	.word	0xffff0fff

0800827c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <TIM_TI3_SetConfig+0x78>)
 8008290:	401a      	ands	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2203      	movs	r2, #3
 80082a6:	4393      	bics	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	22f0      	movs	r2, #240	; 0xf0
 80082b6:	4393      	bics	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	22ff      	movs	r2, #255	; 0xff
 80082c0:	4013      	ands	r3, r2
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4a0b      	ldr	r2, [pc, #44]	; (80082f8 <TIM_TI3_SetConfig+0x7c>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	23a0      	movs	r3, #160	; 0xa0
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	4013      	ands	r3, r2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	621a      	str	r2, [r3, #32]
}
 80082ec:	46c0      	nop			; (mov r8, r8)
 80082ee:	46bd      	mov	sp, r7
 80082f0:	b006      	add	sp, #24
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	fffffeff 	.word	0xfffffeff
 80082f8:	fffff5ff 	.word	0xfffff5ff

080082fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	4a1a      	ldr	r2, [pc, #104]	; (8008378 <TIM_TI4_SetConfig+0x7c>)
 8008310:	401a      	ands	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	4a15      	ldr	r2, [pc, #84]	; (800837c <TIM_TI4_SetConfig+0x80>)
 8008326:	4013      	ands	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	4a12      	ldr	r2, [pc, #72]	; (8008380 <TIM_TI4_SetConfig+0x84>)
 8008338:	4013      	ands	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	031b      	lsls	r3, r3, #12
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	0c1b      	lsrs	r3, r3, #16
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <TIM_TI4_SetConfig+0x88>)
 800834e:	4013      	ands	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	031a      	lsls	r2, r3, #12
 8008356:	23a0      	movs	r3, #160	; 0xa0
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	4013      	ands	r3, r2
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	621a      	str	r2, [r3, #32]
}
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b006      	add	sp, #24
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	ffffefff 	.word	0xffffefff
 800837c:	fffffcff 	.word	0xfffffcff
 8008380:	ffff0fff 	.word	0xffff0fff
 8008384:	ffff5fff 	.word	0xffff5fff

08008388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	221f      	movs	r2, #31
 8008398:	4013      	ands	r3, r2
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	0013      	movs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	43d2      	mvns	r2, r2
 80083aa:	401a      	ands	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	211f      	movs	r1, #31
 80083b8:	400b      	ands	r3, r1
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4099      	lsls	r1, r3
 80083be:	000b      	movs	r3, r1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b006      	add	sp, #24
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d108      	bne.n	80083f2 <HAL_TIMEx_PWMN_Start+0x22>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2244      	movs	r2, #68	; 0x44
 80083e4:	5c9b      	ldrb	r3, [r3, r2]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	1e5a      	subs	r2, r3, #1
 80083ec:	4193      	sbcs	r3, r2
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	e01f      	b.n	8008432 <HAL_TIMEx_PWMN_Start+0x62>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d108      	bne.n	800840a <HAL_TIMEx_PWMN_Start+0x3a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2245      	movs	r2, #69	; 0x45
 80083fc:	5c9b      	ldrb	r3, [r3, r2]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	1e5a      	subs	r2, r3, #1
 8008404:	4193      	sbcs	r3, r2
 8008406:	b2db      	uxtb	r3, r3
 8008408:	e013      	b.n	8008432 <HAL_TIMEx_PWMN_Start+0x62>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b08      	cmp	r3, #8
 800840e:	d108      	bne.n	8008422 <HAL_TIMEx_PWMN_Start+0x52>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2246      	movs	r2, #70	; 0x46
 8008414:	5c9b      	ldrb	r3, [r3, r2]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	1e5a      	subs	r2, r3, #1
 800841c:	4193      	sbcs	r3, r2
 800841e:	b2db      	uxtb	r3, r3
 8008420:	e007      	b.n	8008432 <HAL_TIMEx_PWMN_Start+0x62>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2247      	movs	r2, #71	; 0x47
 8008426:	5c9b      	ldrb	r3, [r3, r2]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	4193      	sbcs	r3, r2
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e05c      	b.n	80084f4 <HAL_TIMEx_PWMN_Start+0x124>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <HAL_TIMEx_PWMN_Start+0x7a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2244      	movs	r2, #68	; 0x44
 8008444:	2102      	movs	r1, #2
 8008446:	5499      	strb	r1, [r3, r2]
 8008448:	e013      	b.n	8008472 <HAL_TIMEx_PWMN_Start+0xa2>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d104      	bne.n	800845a <HAL_TIMEx_PWMN_Start+0x8a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2245      	movs	r2, #69	; 0x45
 8008454:	2102      	movs	r1, #2
 8008456:	5499      	strb	r1, [r3, r2]
 8008458:	e00b      	b.n	8008472 <HAL_TIMEx_PWMN_Start+0xa2>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d104      	bne.n	800846a <HAL_TIMEx_PWMN_Start+0x9a>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2246      	movs	r2, #70	; 0x46
 8008464:	2102      	movs	r1, #2
 8008466:	5499      	strb	r1, [r3, r2]
 8008468:	e003      	b.n	8008472 <HAL_TIMEx_PWMN_Start+0xa2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2247      	movs	r2, #71	; 0x47
 800846e:	2102      	movs	r1, #2
 8008470:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	2204      	movs	r2, #4
 800847a:	0018      	movs	r0, r3
 800847c:	f000 f9b0 	bl	80087e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2180      	movs	r1, #128	; 0x80
 800848c:	0209      	lsls	r1, r1, #8
 800848e:	430a      	orrs	r2, r1
 8008490:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a19      	ldr	r2, [pc, #100]	; (80084fc <HAL_TIMEx_PWMN_Start+0x12c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d009      	beq.n	80084b0 <HAL_TIMEx_PWMN_Start+0xe0>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a17      	ldr	r2, [pc, #92]	; (8008500 <HAL_TIMEx_PWMN_Start+0x130>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <HAL_TIMEx_PWMN_Start+0xe0>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a16      	ldr	r2, [pc, #88]	; (8008504 <HAL_TIMEx_PWMN_Start+0x134>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d116      	bne.n	80084de <HAL_TIMEx_PWMN_Start+0x10e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	4a14      	ldr	r2, [pc, #80]	; (8008508 <HAL_TIMEx_PWMN_Start+0x138>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b06      	cmp	r3, #6
 80084c0:	d016      	beq.n	80084f0 <HAL_TIMEx_PWMN_Start+0x120>
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	025b      	lsls	r3, r3, #9
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d011      	beq.n	80084f0 <HAL_TIMEx_PWMN_Start+0x120>
    {
      __HAL_TIM_ENABLE(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2101      	movs	r1, #1
 80084d8:	430a      	orrs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084dc:	e008      	b.n	80084f0 <HAL_TIMEx_PWMN_Start+0x120>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2101      	movs	r1, #1
 80084ea:	430a      	orrs	r2, r1
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e000      	b.n	80084f2 <HAL_TIMEx_PWMN_Start+0x122>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	0018      	movs	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b004      	add	sp, #16
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	40012c00 	.word	0x40012c00
 8008500:	40000400 	.word	0x40000400
 8008504:	40014000 	.word	0x40014000
 8008508:	00010007 	.word	0x00010007

0800850c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	0018      	movs	r0, r3
 8008520:	f000 f95e 	bl	80087e0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <HAL_TIMEx_PWMN_Stop+0xac>)
 800852c:	4013      	ands	r3, r2
 800852e:	d10d      	bne.n	800854c <HAL_TIMEx_PWMN_Stop+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	4a21      	ldr	r2, [pc, #132]	; (80085bc <HAL_TIMEx_PWMN_Stop+0xb0>)
 8008538:	4013      	ands	r3, r2
 800853a:	d107      	bne.n	800854c <HAL_TIMEx_PWMN_Stop+0x40>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	491e      	ldr	r1, [pc, #120]	; (80085c0 <HAL_TIMEx_PWMN_Stop+0xb4>)
 8008548:	400a      	ands	r2, r1
 800854a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_TIMEx_PWMN_Stop+0xac>)
 8008554:	4013      	ands	r3, r2
 8008556:	d10d      	bne.n	8008574 <HAL_TIMEx_PWMN_Stop+0x68>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	4a17      	ldr	r2, [pc, #92]	; (80085bc <HAL_TIMEx_PWMN_Stop+0xb0>)
 8008560:	4013      	ands	r3, r2
 8008562:	d107      	bne.n	8008574 <HAL_TIMEx_PWMN_Stop+0x68>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2101      	movs	r1, #1
 8008570:	438a      	bics	r2, r1
 8008572:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d104      	bne.n	8008584 <HAL_TIMEx_PWMN_Stop+0x78>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2244      	movs	r2, #68	; 0x44
 800857e:	2101      	movs	r1, #1
 8008580:	5499      	strb	r1, [r3, r2]
 8008582:	e013      	b.n	80085ac <HAL_TIMEx_PWMN_Stop+0xa0>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b04      	cmp	r3, #4
 8008588:	d104      	bne.n	8008594 <HAL_TIMEx_PWMN_Stop+0x88>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2245      	movs	r2, #69	; 0x45
 800858e:	2101      	movs	r1, #1
 8008590:	5499      	strb	r1, [r3, r2]
 8008592:	e00b      	b.n	80085ac <HAL_TIMEx_PWMN_Stop+0xa0>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b08      	cmp	r3, #8
 8008598:	d104      	bne.n	80085a4 <HAL_TIMEx_PWMN_Stop+0x98>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2246      	movs	r2, #70	; 0x46
 800859e:	2101      	movs	r1, #1
 80085a0:	5499      	strb	r1, [r3, r2]
 80085a2:	e003      	b.n	80085ac <HAL_TIMEx_PWMN_Stop+0xa0>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2247      	movs	r2, #71	; 0x47
 80085a8:	2101      	movs	r1, #1
 80085aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	00001111 	.word	0x00001111
 80085bc:	00000444 	.word	0x00000444
 80085c0:	ffff7fff 	.word	0xffff7fff

080085c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	223c      	movs	r2, #60	; 0x3c
 80085d2:	5c9b      	ldrb	r3, [r3, r2]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e04f      	b.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	223c      	movs	r2, #60	; 0x3c
 80085e0:	2101      	movs	r1, #1
 80085e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	223d      	movs	r2, #61	; 0x3d
 80085e8:	2102      	movs	r1, #2
 80085ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a20      	ldr	r2, [pc, #128]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d108      	bne.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800860a:	4013      	ands	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2270      	movs	r2, #112	; 0x70
 800861c:	4393      	bics	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a13      	ldr	r2, [pc, #76]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d009      	beq.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a12      	ldr	r2, [pc, #72]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d004      	beq.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a11      	ldr	r2, [pc, #68]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10c      	bne.n	800866a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2280      	movs	r2, #128	; 0x80
 8008654:	4393      	bics	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	4313      	orrs	r3, r2
 8008660:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	223d      	movs	r2, #61	; 0x3d
 800866e:	2101      	movs	r1, #1
 8008670:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	223c      	movs	r2, #60	; 0x3c
 8008676:	2100      	movs	r1, #0
 8008678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	b004      	add	sp, #16
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40012c00 	.word	0x40012c00
 8008688:	ff0fffff 	.word	0xff0fffff
 800868c:	40000400 	.word	0x40000400
 8008690:	40014000 	.word	0x40014000

08008694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	223c      	movs	r2, #60	; 0x3c
 80086a6:	5c9b      	ldrb	r3, [r3, r2]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e079      	b.n	80087a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	223c      	movs	r2, #60	; 0x3c
 80086b4:	2101      	movs	r1, #1
 80086b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	22ff      	movs	r2, #255	; 0xff
 80086bc:	4393      	bics	r3, r2
 80086be:	001a      	movs	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4a38      	ldr	r2, [pc, #224]	; (80087ac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80086cc:	401a      	ands	r2, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4a35      	ldr	r2, [pc, #212]	; (80087b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80086da:	401a      	ands	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a33      	ldr	r2, [pc, #204]	; (80087b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80086e8:	401a      	ands	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4a30      	ldr	r2, [pc, #192]	; (80087b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80086f6:	401a      	ands	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a2e      	ldr	r2, [pc, #184]	; (80087bc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008704:	401a      	ands	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a2b      	ldr	r2, [pc, #172]	; (80087c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008712:	401a      	ands	r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4a29      	ldr	r2, [pc, #164]	; (80087c4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008720:	401a      	ands	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	041b      	lsls	r3, r3, #16
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a25      	ldr	r2, [pc, #148]	; (80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d106      	bne.n	8008744 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4a24      	ldr	r2, [pc, #144]	; (80087cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800873a:	401a      	ands	r2, r3
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d121      	bne.n	8008792 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008752:	401a      	ands	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008758:	051b      	lsls	r3, r3, #20
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008762:	401a      	ands	r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008770:	401a      	ands	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a12      	ldr	r2, [pc, #72]	; (80087c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d106      	bne.n	8008792 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a15      	ldr	r2, [pc, #84]	; (80087dc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008788:	401a      	ands	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	223c      	movs	r2, #60	; 0x3c
 800879e:	2100      	movs	r1, #0
 80087a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	0018      	movs	r0, r3
 80087a6:	46bd      	mov	sp, r7
 80087a8:	b004      	add	sp, #16
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	fffffcff 	.word	0xfffffcff
 80087b0:	fffffbff 	.word	0xfffffbff
 80087b4:	fffff7ff 	.word	0xfffff7ff
 80087b8:	ffffefff 	.word	0xffffefff
 80087bc:	ffffdfff 	.word	0xffffdfff
 80087c0:	ffffbfff 	.word	0xffffbfff
 80087c4:	fff0ffff 	.word	0xfff0ffff
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	efffffff 	.word	0xefffffff
 80087d0:	ff0fffff 	.word	0xff0fffff
 80087d4:	feffffff 	.word	0xfeffffff
 80087d8:	fdffffff 	.word	0xfdffffff
 80087dc:	dfffffff 	.word	0xdfffffff

080087e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	221f      	movs	r2, #31
 80087f0:	4013      	ands	r3, r2
 80087f2:	2204      	movs	r2, #4
 80087f4:	409a      	lsls	r2, r3
 80087f6:	0013      	movs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	43d2      	mvns	r2, r2
 8008802:	401a      	ands	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a1a      	ldr	r2, [r3, #32]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	211f      	movs	r1, #31
 8008810:	400b      	ands	r3, r1
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4099      	lsls	r1, r3
 8008816:	000b      	movs	r3, r1
 8008818:	431a      	orrs	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	b006      	add	sp, #24
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e046      	b.n	80088c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2288      	movs	r2, #136	; 0x88
 800883e:	589b      	ldr	r3, [r3, r2]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d107      	bne.n	8008854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2284      	movs	r2, #132	; 0x84
 8008848:	2100      	movs	r1, #0
 800884a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	0018      	movs	r0, r3
 8008850:	f7fb fe5e 	bl	8004510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2288      	movs	r2, #136	; 0x88
 8008858:	2124      	movs	r1, #36	; 0x24
 800885a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2101      	movs	r1, #1
 8008868:	438a      	bics	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	0018      	movs	r0, r3
 8008870:	f000 fc6c 	bl	800914c <UART_SetConfig>
 8008874:	0003      	movs	r3, r0
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e024      	b.n	80088c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	0018      	movs	r0, r3
 800888a:	f000 fe03 	bl	8009494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	490d      	ldr	r1, [pc, #52]	; (80088d0 <HAL_UART_Init+0xa8>)
 800889a:	400a      	ands	r2, r1
 800889c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	212a      	movs	r1, #42	; 0x2a
 80088aa:	438a      	bics	r2, r1
 80088ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2101      	movs	r1, #1
 80088ba:	430a      	orrs	r2, r1
 80088bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	0018      	movs	r0, r3
 80088c2:	f000 fe9b 	bl	80095fc <UART_CheckIdleState>
 80088c6:	0003      	movs	r3, r0
}
 80088c8:	0018      	movs	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	b002      	add	sp, #8
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	ffffb7ff 	.word	0xffffb7ff

080088d4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e04e      	b.n	8008984 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2288      	movs	r2, #136	; 0x88
 80088ea:	589b      	ldr	r3, [r3, r2]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d107      	bne.n	8008900 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2284      	movs	r2, #132	; 0x84
 80088f4:	2100      	movs	r1, #0
 80088f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7fb fe08 	bl	8004510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2288      	movs	r2, #136	; 0x88
 8008904:	2124      	movs	r1, #36	; 0x24
 8008906:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2101      	movs	r1, #1
 8008914:	438a      	bics	r2, r1
 8008916:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	0018      	movs	r0, r3
 800891c:	f000 fc16 	bl	800914c <UART_SetConfig>
 8008920:	0003      	movs	r3, r0
 8008922:	2b01      	cmp	r3, #1
 8008924:	d101      	bne.n	800892a <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e02c      	b.n	8008984 <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 fdad 	bl	8009494 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4911      	ldr	r1, [pc, #68]	; (800898c <HAL_HalfDuplex_Init+0xb8>)
 8008946:	400a      	ands	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2122      	movs	r1, #34	; 0x22
 8008956:	438a      	bics	r2, r1
 8008958:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2108      	movs	r1, #8
 8008966:	430a      	orrs	r2, r1
 8008968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2101      	movs	r1, #1
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	0018      	movs	r0, r3
 800897e:	f000 fe3d 	bl	80095fc <UART_CheckIdleState>
 8008982:	0003      	movs	r3, r0
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}
 800898c:	ffffb7ff 	.word	0xffffb7ff

08008990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	1dbb      	adds	r3, r7, #6
 800899e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2288      	movs	r2, #136	; 0x88
 80089a4:	589b      	ldr	r3, [r3, r2]
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d000      	beq.n	80089ac <HAL_UART_Transmit+0x1c>
 80089aa:	e088      	b.n	8008abe <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_UART_Transmit+0x2a>
 80089b2:	1dbb      	adds	r3, r7, #6
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e080      	b.n	8008ac0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	015b      	lsls	r3, r3, #5
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d109      	bne.n	80089de <HAL_UART_Transmit+0x4e>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2201      	movs	r2, #1
 80089d6:	4013      	ands	r3, r2
 80089d8:	d001      	beq.n	80089de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e070      	b.n	8008ac0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2290      	movs	r2, #144	; 0x90
 80089e2:	2100      	movs	r1, #0
 80089e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2288      	movs	r2, #136	; 0x88
 80089ea:	2121      	movs	r1, #33	; 0x21
 80089ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ee:	f7fb fee7 	bl	80047c0 <HAL_GetTick>
 80089f2:	0003      	movs	r3, r0
 80089f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1dba      	adds	r2, r7, #6
 80089fa:	2154      	movs	r1, #84	; 0x54
 80089fc:	8812      	ldrh	r2, [r2, #0]
 80089fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	1dba      	adds	r2, r7, #6
 8008a04:	2156      	movs	r1, #86	; 0x56
 8008a06:	8812      	ldrh	r2, [r2, #0]
 8008a08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	015b      	lsls	r3, r3, #5
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d108      	bne.n	8008a28 <HAL_UART_Transmit+0x98>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	e003      	b.n	8008a30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a30:	e02c      	b.n	8008a8c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	0013      	movs	r3, r2
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2180      	movs	r1, #128	; 0x80
 8008a40:	f000 fe2a 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 8008a44:	1e03      	subs	r3, r0, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e039      	b.n	8008ac0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	001a      	movs	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	05d2      	lsls	r2, r2, #23
 8008a5e:	0dd2      	lsrs	r2, r2, #23
 8008a60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	3302      	adds	r3, #2
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	e007      	b.n	8008a7a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2256      	movs	r2, #86	; 0x56
 8008a7e:	5a9b      	ldrh	r3, [r3, r2]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3b01      	subs	r3, #1
 8008a84:	b299      	uxth	r1, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2256      	movs	r2, #86	; 0x56
 8008a8a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2256      	movs	r2, #86	; 0x56
 8008a90:	5a9b      	ldrh	r3, [r3, r2]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1cc      	bne.n	8008a32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	0013      	movs	r3, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2140      	movs	r1, #64	; 0x40
 8008aa6:	f000 fdf7 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 8008aaa:	1e03      	subs	r3, r0, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e006      	b.n	8008ac0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2288      	movs	r2, #136	; 0x88
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
  }
}
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	b008      	add	sp, #32
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ac8:	b5b0      	push	{r4, r5, r7, lr}
 8008aca:	b0aa      	sub	sp, #168	; 0xa8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	22a4      	movs	r2, #164	; 0xa4
 8008ad8:	18b9      	adds	r1, r7, r2
 8008ada:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	20a0      	movs	r0, #160	; 0xa0
 8008ae4:	1839      	adds	r1, r7, r0
 8008ae6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	249c      	movs	r4, #156	; 0x9c
 8008af0:	1939      	adds	r1, r7, r4
 8008af2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008af4:	0011      	movs	r1, r2
 8008af6:	18bb      	adds	r3, r7, r2
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4aa2      	ldr	r2, [pc, #648]	; (8008d84 <HAL_UART_IRQHandler+0x2bc>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	2298      	movs	r2, #152	; 0x98
 8008b00:	18bd      	adds	r5, r7, r2
 8008b02:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008b04:	18bb      	adds	r3, r7, r2
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11a      	bne.n	8008b42 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2220      	movs	r2, #32
 8008b12:	4013      	ands	r3, r2
 8008b14:	d015      	beq.n	8008b42 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b16:	183b      	adds	r3, r7, r0
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	d105      	bne.n	8008b2c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b20:	193b      	adds	r3, r7, r4
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	055b      	lsls	r3, r3, #21
 8008b28:	4013      	ands	r3, r2
 8008b2a:	d00a      	beq.n	8008b42 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d100      	bne.n	8008b36 <HAL_UART_IRQHandler+0x6e>
 8008b34:	e2dc      	b.n	80090f0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	0010      	movs	r0, r2
 8008b3e:	4798      	blx	r3
      }
      return;
 8008b40:	e2d6      	b.n	80090f0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b42:	2398      	movs	r3, #152	; 0x98
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d100      	bne.n	8008b4e <HAL_UART_IRQHandler+0x86>
 8008b4c:	e122      	b.n	8008d94 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b4e:	239c      	movs	r3, #156	; 0x9c
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a8c      	ldr	r2, [pc, #560]	; (8008d88 <HAL_UART_IRQHandler+0x2c0>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	d106      	bne.n	8008b68 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b5a:	23a0      	movs	r3, #160	; 0xa0
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a8a      	ldr	r2, [pc, #552]	; (8008d8c <HAL_UART_IRQHandler+0x2c4>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	d100      	bne.n	8008b68 <HAL_UART_IRQHandler+0xa0>
 8008b66:	e115      	b.n	8008d94 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b68:	23a4      	movs	r3, #164	; 0xa4
 8008b6a:	18fb      	adds	r3, r7, r3
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	4013      	ands	r3, r2
 8008b72:	d012      	beq.n	8008b9a <HAL_UART_IRQHandler+0xd2>
 8008b74:	23a0      	movs	r3, #160	; 0xa0
 8008b76:	18fb      	adds	r3, r7, r3
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	2380      	movs	r3, #128	; 0x80
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	4013      	ands	r3, r2
 8008b80:	d00b      	beq.n	8008b9a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2201      	movs	r2, #1
 8008b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2290      	movs	r2, #144	; 0x90
 8008b8e:	589b      	ldr	r3, [r3, r2]
 8008b90:	2201      	movs	r2, #1
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2190      	movs	r1, #144	; 0x90
 8008b98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b9a:	23a4      	movs	r3, #164	; 0xa4
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d011      	beq.n	8008bca <HAL_UART_IRQHandler+0x102>
 8008ba6:	239c      	movs	r3, #156	; 0x9c
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2201      	movs	r2, #1
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d00b      	beq.n	8008bca <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2290      	movs	r2, #144	; 0x90
 8008bbe:	589b      	ldr	r3, [r3, r2]
 8008bc0:	2204      	movs	r2, #4
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2190      	movs	r1, #144	; 0x90
 8008bc8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bca:	23a4      	movs	r3, #164	; 0xa4
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	d011      	beq.n	8008bfa <HAL_UART_IRQHandler+0x132>
 8008bd6:	239c      	movs	r3, #156	; 0x9c
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	4013      	ands	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2204      	movs	r2, #4
 8008be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2290      	movs	r2, #144	; 0x90
 8008bee:	589b      	ldr	r3, [r3, r2]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2190      	movs	r1, #144	; 0x90
 8008bf8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bfa:	23a4      	movs	r3, #164	; 0xa4
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2208      	movs	r2, #8
 8008c02:	4013      	ands	r3, r2
 8008c04:	d017      	beq.n	8008c36 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c06:	23a0      	movs	r3, #160	; 0xa0
 8008c08:	18fb      	adds	r3, r7, r3
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d105      	bne.n	8008c1e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c12:	239c      	movs	r3, #156	; 0x9c
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a5b      	ldr	r2, [pc, #364]	; (8008d88 <HAL_UART_IRQHandler+0x2c0>)
 8008c1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c1c:	d00b      	beq.n	8008c36 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2208      	movs	r2, #8
 8008c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2290      	movs	r2, #144	; 0x90
 8008c2a:	589b      	ldr	r3, [r3, r2]
 8008c2c:	2208      	movs	r2, #8
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2190      	movs	r1, #144	; 0x90
 8008c34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c36:	23a4      	movs	r3, #164	; 0xa4
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	2380      	movs	r3, #128	; 0x80
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	4013      	ands	r3, r2
 8008c42:	d013      	beq.n	8008c6c <HAL_UART_IRQHandler+0x1a4>
 8008c44:	23a0      	movs	r3, #160	; 0xa0
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	04db      	lsls	r3, r3, #19
 8008c4e:	4013      	ands	r3, r2
 8008c50:	d00c      	beq.n	8008c6c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2280      	movs	r2, #128	; 0x80
 8008c58:	0112      	lsls	r2, r2, #4
 8008c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2290      	movs	r2, #144	; 0x90
 8008c60:	589b      	ldr	r3, [r3, r2]
 8008c62:	2220      	movs	r2, #32
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2190      	movs	r1, #144	; 0x90
 8008c6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2290      	movs	r2, #144	; 0x90
 8008c70:	589b      	ldr	r3, [r3, r2]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d100      	bne.n	8008c78 <HAL_UART_IRQHandler+0x1b0>
 8008c76:	e23d      	b.n	80090f4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c78:	23a4      	movs	r3, #164	; 0xa4
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	4013      	ands	r3, r2
 8008c82:	d015      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c84:	23a0      	movs	r3, #160	; 0xa0
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	d106      	bne.n	8008c9e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c90:	239c      	movs	r3, #156	; 0x9c
 8008c92:	18fb      	adds	r3, r7, r3
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	2380      	movs	r3, #128	; 0x80
 8008c98:	055b      	lsls	r3, r3, #21
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d008      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	0010      	movs	r0, r2
 8008cae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2290      	movs	r2, #144	; 0x90
 8008cb4:	589b      	ldr	r3, [r3, r2]
 8008cb6:	2194      	movs	r1, #148	; 0x94
 8008cb8:	187a      	adds	r2, r7, r1
 8008cba:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	2240      	movs	r2, #64	; 0x40
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d004      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cca:	187b      	adds	r3, r7, r1
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2228      	movs	r2, #40	; 0x28
 8008cd0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cd2:	d04c      	beq.n	8008d6e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f000 fda6 	bl	8009828 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2240      	movs	r2, #64	; 0x40
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b40      	cmp	r3, #64	; 0x40
 8008ce8:	d13c      	bne.n	8008d64 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cea:	f3ef 8310 	mrs	r3, PRIMASK
 8008cee:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cf2:	2090      	movs	r0, #144	; 0x90
 8008cf4:	183a      	adds	r2, r7, r0
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfe:	f383 8810 	msr	PRIMASK, r3
}
 8008d02:	46c0      	nop			; (mov r8, r8)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689a      	ldr	r2, [r3, #8]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2140      	movs	r1, #64	; 0x40
 8008d10:	438a      	bics	r2, r1
 8008d12:	609a      	str	r2, [r3, #8]
 8008d14:	183b      	adds	r3, r7, r0
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d1c:	f383 8810 	msr	PRIMASK, r3
}
 8008d20:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2280      	movs	r2, #128	; 0x80
 8008d26:	589b      	ldr	r3, [r3, r2]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d016      	beq.n	8008d5a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2280      	movs	r2, #128	; 0x80
 8008d30:	589b      	ldr	r3, [r3, r2]
 8008d32:	4a17      	ldr	r2, [pc, #92]	; (8008d90 <HAL_UART_IRQHandler+0x2c8>)
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2280      	movs	r2, #128	; 0x80
 8008d3a:	589b      	ldr	r3, [r3, r2]
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f7fc fb2b 	bl	8005398 <HAL_DMA_Abort_IT>
 8008d42:	1e03      	subs	r3, r0, #0
 8008d44:	d01c      	beq.n	8008d80 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2280      	movs	r2, #128	; 0x80
 8008d4a:	589b      	ldr	r3, [r3, r2]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	5852      	ldr	r2, [r2, r1]
 8008d54:	0010      	movs	r0, r2
 8008d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d58:	e012      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f000 f9e1 	bl	8009124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d62:	e00d      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	0018      	movs	r0, r3
 8008d68:	f000 f9dc 	bl	8009124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6c:	e008      	b.n	8008d80 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	0018      	movs	r0, r3
 8008d72:	f000 f9d7 	bl	8009124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2290      	movs	r2, #144	; 0x90
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008d7e:	e1b9      	b.n	80090f4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d80:	46c0      	nop			; (mov r8, r8)
    return;
 8008d82:	e1b7      	b.n	80090f4 <HAL_UART_IRQHandler+0x62c>
 8008d84:	0000080f 	.word	0x0000080f
 8008d88:	10000001 	.word	0x10000001
 8008d8c:	04000120 	.word	0x04000120
 8008d90:	080098f5 	.word	0x080098f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d000      	beq.n	8008d9e <HAL_UART_IRQHandler+0x2d6>
 8008d9c:	e13e      	b.n	800901c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d9e:	23a4      	movs	r3, #164	; 0xa4
 8008da0:	18fb      	adds	r3, r7, r3
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2210      	movs	r2, #16
 8008da6:	4013      	ands	r3, r2
 8008da8:	d100      	bne.n	8008dac <HAL_UART_IRQHandler+0x2e4>
 8008daa:	e137      	b.n	800901c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008dac:	23a0      	movs	r3, #160	; 0xa0
 8008dae:	18fb      	adds	r3, r7, r3
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2210      	movs	r2, #16
 8008db4:	4013      	ands	r3, r2
 8008db6:	d100      	bne.n	8008dba <HAL_UART_IRQHandler+0x2f2>
 8008db8:	e130      	b.n	800901c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2240      	movs	r2, #64	; 0x40
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d000      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x30a>
 8008dd0:	e0a4      	b.n	8008f1c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2280      	movs	r2, #128	; 0x80
 8008dd6:	589b      	ldr	r3, [r3, r2]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	217e      	movs	r1, #126	; 0x7e
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008de2:	187b      	adds	r3, r7, r1
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d100      	bne.n	8008dec <HAL_UART_IRQHandler+0x324>
 8008dea:	e185      	b.n	80090f8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	225c      	movs	r2, #92	; 0x5c
 8008df0:	5a9b      	ldrh	r3, [r3, r2]
 8008df2:	187a      	adds	r2, r7, r1
 8008df4:	8812      	ldrh	r2, [r2, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d300      	bcc.n	8008dfc <HAL_UART_IRQHandler+0x334>
 8008dfa:	e17d      	b.n	80090f8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	187a      	adds	r2, r7, r1
 8008e00:	215e      	movs	r1, #94	; 0x5e
 8008e02:	8812      	ldrh	r2, [r2, #0]
 8008e04:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2280      	movs	r2, #128	; 0x80
 8008e0a:	589b      	ldr	r3, [r3, r2]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2220      	movs	r2, #32
 8008e12:	4013      	ands	r3, r2
 8008e14:	d170      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e16:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e20:	2301      	movs	r3, #1
 8008e22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e26:	f383 8810 	msr	PRIMASK, r3
}
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	49b4      	ldr	r1, [pc, #720]	; (8009108 <HAL_UART_IRQHandler+0x640>)
 8008e38:	400a      	ands	r2, r1
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	f383 8810 	msr	PRIMASK, r3
}
 8008e46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e48:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e50:	677b      	str	r3, [r7, #116]	; 0x74
 8008e52:	2301      	movs	r3, #1
 8008e54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	f383 8810 	msr	PRIMASK, r3
}
 8008e5c:	46c0      	nop			; (mov r8, r8)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2101      	movs	r1, #1
 8008e6a:	438a      	bics	r2, r1
 8008e6c:	609a      	str	r2, [r3, #8]
 8008e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e70:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e74:	f383 8810 	msr	PRIMASK, r3
}
 8008e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e82:	673b      	str	r3, [r7, #112]	; 0x70
 8008e84:	2301      	movs	r3, #1
 8008e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8a:	f383 8810 	msr	PRIMASK, r3
}
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2140      	movs	r1, #64	; 0x40
 8008e9c:	438a      	bics	r2, r1
 8008e9e:	609a      	str	r2, [r3, #8]
 8008ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea6:	f383 8810 	msr	PRIMASK, r3
}
 8008eaa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	228c      	movs	r2, #140	; 0x8c
 8008eb0:	2120      	movs	r1, #32
 8008eb2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eba:	f3ef 8310 	mrs	r3, PRIMASK
 8008ebe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eca:	f383 8810 	msr	PRIMASK, r3
}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2110      	movs	r1, #16
 8008edc:	438a      	bics	r2, r1
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee6:	f383 8810 	msr	PRIMASK, r3
}
 8008eea:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2280      	movs	r2, #128	; 0x80
 8008ef0:	589b      	ldr	r3, [r3, r2]
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f7fc f9ee 	bl	80052d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	225c      	movs	r2, #92	; 0x5c
 8008f02:	5a9a      	ldrh	r2, [r3, r2]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	215e      	movs	r1, #94	; 0x5e
 8008f08:	5a5b      	ldrh	r3, [r3, r1]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 f90d 	bl	8009134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f1a:	e0ed      	b.n	80090f8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	225c      	movs	r2, #92	; 0x5c
 8008f20:	5a99      	ldrh	r1, [r3, r2]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	225e      	movs	r2, #94	; 0x5e
 8008f26:	5a9b      	ldrh	r3, [r3, r2]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	208e      	movs	r0, #142	; 0x8e
 8008f2c:	183b      	adds	r3, r7, r0
 8008f2e:	1a8a      	subs	r2, r1, r2
 8008f30:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	225e      	movs	r2, #94	; 0x5e
 8008f36:	5a9b      	ldrh	r3, [r3, r2]
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d100      	bne.n	8008f40 <HAL_UART_IRQHandler+0x478>
 8008f3e:	e0dd      	b.n	80090fc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008f40:	183b      	adds	r3, r7, r0
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d100      	bne.n	8008f4a <HAL_UART_IRQHandler+0x482>
 8008f48:	e0d8      	b.n	80090fc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f50:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f52:	2488      	movs	r4, #136	; 0x88
 8008f54:	193a      	adds	r2, r7, r4
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4967      	ldr	r1, [pc, #412]	; (800910c <HAL_UART_IRQHandler+0x644>)
 8008f70:	400a      	ands	r2, r1
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	193b      	adds	r3, r7, r4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f383 8810 	msr	PRIMASK, r3
}
 8008f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f82:	f3ef 8310 	mrs	r3, PRIMASK
 8008f86:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f88:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f8a:	2484      	movs	r4, #132	; 0x84
 8008f8c:	193a      	adds	r2, r7, r4
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	2301      	movs	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	f383 8810 	msr	PRIMASK, r3
}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	495a      	ldr	r1, [pc, #360]	; (8009110 <HAL_UART_IRQHandler+0x648>)
 8008fa8:	400a      	ands	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	193b      	adds	r3, r7, r4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	f383 8810 	msr	PRIMASK, r3
}
 8008fb8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	228c      	movs	r2, #140	; 0x8c
 8008fbe:	2120      	movs	r1, #32
 8008fc0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fce:	f3ef 8310 	mrs	r3, PRIMASK
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	2480      	movs	r4, #128	; 0x80
 8008fd8:	193a      	adds	r2, r7, r4
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	f383 8810 	msr	PRIMASK, r3
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2110      	movs	r1, #16
 8008ff4:	438a      	bics	r2, r1
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	193b      	adds	r3, r7, r4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	f383 8810 	msr	PRIMASK, r3
}
 8009004:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2202      	movs	r2, #2
 800900a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800900c:	183b      	adds	r3, r7, r0
 800900e:	881a      	ldrh	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	0011      	movs	r1, r2
 8009014:	0018      	movs	r0, r3
 8009016:	f000 f88d 	bl	8009134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800901a:	e06f      	b.n	80090fc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800901c:	23a4      	movs	r3, #164	; 0xa4
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	035b      	lsls	r3, r3, #13
 8009026:	4013      	ands	r3, r2
 8009028:	d010      	beq.n	800904c <HAL_UART_IRQHandler+0x584>
 800902a:	239c      	movs	r3, #156	; 0x9c
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	03db      	lsls	r3, r3, #15
 8009034:	4013      	ands	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2280      	movs	r2, #128	; 0x80
 800903e:	0352      	lsls	r2, r2, #13
 8009040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	0018      	movs	r0, r3
 8009046:	f000 fc98 	bl	800997a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800904a:	e05a      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800904c:	23a4      	movs	r3, #164	; 0xa4
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2280      	movs	r2, #128	; 0x80
 8009054:	4013      	ands	r3, r2
 8009056:	d016      	beq.n	8009086 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009058:	23a0      	movs	r3, #160	; 0xa0
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2280      	movs	r2, #128	; 0x80
 8009060:	4013      	ands	r3, r2
 8009062:	d106      	bne.n	8009072 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009064:	239c      	movs	r3, #156	; 0x9c
 8009066:	18fb      	adds	r3, r7, r3
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	2380      	movs	r3, #128	; 0x80
 800906c:	041b      	lsls	r3, r3, #16
 800906e:	4013      	ands	r3, r2
 8009070:	d009      	beq.n	8009086 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009076:	2b00      	cmp	r3, #0
 8009078:	d042      	beq.n	8009100 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	0010      	movs	r0, r2
 8009082:	4798      	blx	r3
    }
    return;
 8009084:	e03c      	b.n	8009100 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009086:	23a4      	movs	r3, #164	; 0xa4
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2240      	movs	r2, #64	; 0x40
 800908e:	4013      	ands	r3, r2
 8009090:	d00a      	beq.n	80090a8 <HAL_UART_IRQHandler+0x5e0>
 8009092:	23a0      	movs	r3, #160	; 0xa0
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2240      	movs	r2, #64	; 0x40
 800909a:	4013      	ands	r3, r2
 800909c:	d004      	beq.n	80090a8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	0018      	movs	r0, r3
 80090a2:	f000 fc3e 	bl	8009922 <UART_EndTransmit_IT>
    return;
 80090a6:	e02c      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090a8:	23a4      	movs	r3, #164	; 0xa4
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	2380      	movs	r3, #128	; 0x80
 80090b0:	041b      	lsls	r3, r3, #16
 80090b2:	4013      	ands	r3, r2
 80090b4:	d00b      	beq.n	80090ce <HAL_UART_IRQHandler+0x606>
 80090b6:	23a0      	movs	r3, #160	; 0xa0
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	05db      	lsls	r3, r3, #23
 80090c0:	4013      	ands	r3, r2
 80090c2:	d004      	beq.n	80090ce <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f000 fc67 	bl	800999a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090cc:	e019      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090ce:	23a4      	movs	r3, #164	; 0xa4
 80090d0:	18fb      	adds	r3, r7, r3
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	2380      	movs	r3, #128	; 0x80
 80090d6:	045b      	lsls	r3, r3, #17
 80090d8:	4013      	ands	r3, r2
 80090da:	d012      	beq.n	8009102 <HAL_UART_IRQHandler+0x63a>
 80090dc:	23a0      	movs	r3, #160	; 0xa0
 80090de:	18fb      	adds	r3, r7, r3
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da0d      	bge.n	8009102 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	0018      	movs	r0, r3
 80090ea:	f000 fc4e 	bl	800998a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090ee:	e008      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
      return;
 80090f0:	46c0      	nop			; (mov r8, r8)
 80090f2:	e006      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
    return;
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	e004      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
      return;
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	e002      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
      return;
 80090fc:	46c0      	nop			; (mov r8, r8)
 80090fe:	e000      	b.n	8009102 <HAL_UART_IRQHandler+0x63a>
    return;
 8009100:	46c0      	nop			; (mov r8, r8)
  }
}
 8009102:	46bd      	mov	sp, r7
 8009104:	b02a      	add	sp, #168	; 0xa8
 8009106:	bdb0      	pop	{r4, r5, r7, pc}
 8009108:	fffffeff 	.word	0xfffffeff
 800910c:	fffffedf 	.word	0xfffffedf
 8009110:	effffffe 	.word	0xeffffffe

08009114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800911c:	46c0      	nop			; (mov r8, r8)
 800911e:	46bd      	mov	sp, r7
 8009120:	b002      	add	sp, #8
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800912c:	46c0      	nop			; (mov r8, r8)
 800912e:	46bd      	mov	sp, r7
 8009130:	b002      	add	sp, #8
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	000a      	movs	r2, r1
 800913e:	1cbb      	adds	r3, r7, #2
 8009140:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	46bd      	mov	sp, r7
 8009146:	b002      	add	sp, #8
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009154:	231a      	movs	r3, #26
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	4313      	orrs	r3, r2
 8009172:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4abc      	ldr	r2, [pc, #752]	; (800946c <UART_SetConfig+0x320>)
 800917c:	4013      	ands	r3, r2
 800917e:	0019      	movs	r1, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69fa      	ldr	r2, [r7, #28]
 8009186:	430a      	orrs	r2, r1
 8009188:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	4ab7      	ldr	r2, [pc, #732]	; (8009470 <UART_SetConfig+0x324>)
 8009192:	4013      	ands	r3, r2
 8009194:	0019      	movs	r1, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	4aae      	ldr	r2, [pc, #696]	; (8009474 <UART_SetConfig+0x328>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	0019      	movs	r1, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	220f      	movs	r2, #15
 80091d0:	4393      	bics	r3, r2
 80091d2:	0019      	movs	r1, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4aa4      	ldr	r2, [pc, #656]	; (8009478 <UART_SetConfig+0x32c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d127      	bne.n	800923a <UART_SetConfig+0xee>
 80091ea:	4ba4      	ldr	r3, [pc, #656]	; (800947c <UART_SetConfig+0x330>)
 80091ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ee:	2203      	movs	r2, #3
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d017      	beq.n	8009226 <UART_SetConfig+0xda>
 80091f6:	d81b      	bhi.n	8009230 <UART_SetConfig+0xe4>
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d00a      	beq.n	8009212 <UART_SetConfig+0xc6>
 80091fc:	d818      	bhi.n	8009230 <UART_SetConfig+0xe4>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <UART_SetConfig+0xbc>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d00a      	beq.n	800921c <UART_SetConfig+0xd0>
 8009206:	e013      	b.n	8009230 <UART_SetConfig+0xe4>
 8009208:	231b      	movs	r3, #27
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e058      	b.n	80092c4 <UART_SetConfig+0x178>
 8009212:	231b      	movs	r3, #27
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	2202      	movs	r2, #2
 8009218:	701a      	strb	r2, [r3, #0]
 800921a:	e053      	b.n	80092c4 <UART_SetConfig+0x178>
 800921c:	231b      	movs	r3, #27
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	2204      	movs	r2, #4
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e04e      	b.n	80092c4 <UART_SetConfig+0x178>
 8009226:	231b      	movs	r3, #27
 8009228:	18fb      	adds	r3, r7, r3
 800922a:	2208      	movs	r2, #8
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	e049      	b.n	80092c4 <UART_SetConfig+0x178>
 8009230:	231b      	movs	r3, #27
 8009232:	18fb      	adds	r3, r7, r3
 8009234:	2210      	movs	r2, #16
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	e044      	b.n	80092c4 <UART_SetConfig+0x178>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a90      	ldr	r2, [pc, #576]	; (8009480 <UART_SetConfig+0x334>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d127      	bne.n	8009294 <UART_SetConfig+0x148>
 8009244:	4b8d      	ldr	r3, [pc, #564]	; (800947c <UART_SetConfig+0x330>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	220c      	movs	r2, #12
 800924a:	4013      	ands	r3, r2
 800924c:	2b0c      	cmp	r3, #12
 800924e:	d017      	beq.n	8009280 <UART_SetConfig+0x134>
 8009250:	d81b      	bhi.n	800928a <UART_SetConfig+0x13e>
 8009252:	2b08      	cmp	r3, #8
 8009254:	d00a      	beq.n	800926c <UART_SetConfig+0x120>
 8009256:	d818      	bhi.n	800928a <UART_SetConfig+0x13e>
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <UART_SetConfig+0x116>
 800925c:	2b04      	cmp	r3, #4
 800925e:	d00a      	beq.n	8009276 <UART_SetConfig+0x12a>
 8009260:	e013      	b.n	800928a <UART_SetConfig+0x13e>
 8009262:	231b      	movs	r3, #27
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	e02b      	b.n	80092c4 <UART_SetConfig+0x178>
 800926c:	231b      	movs	r3, #27
 800926e:	18fb      	adds	r3, r7, r3
 8009270:	2202      	movs	r2, #2
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e026      	b.n	80092c4 <UART_SetConfig+0x178>
 8009276:	231b      	movs	r3, #27
 8009278:	18fb      	adds	r3, r7, r3
 800927a:	2204      	movs	r2, #4
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	e021      	b.n	80092c4 <UART_SetConfig+0x178>
 8009280:	231b      	movs	r3, #27
 8009282:	18fb      	adds	r3, r7, r3
 8009284:	2208      	movs	r2, #8
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e01c      	b.n	80092c4 <UART_SetConfig+0x178>
 800928a:	231b      	movs	r3, #27
 800928c:	18fb      	adds	r3, r7, r3
 800928e:	2210      	movs	r2, #16
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	e017      	b.n	80092c4 <UART_SetConfig+0x178>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a7a      	ldr	r2, [pc, #488]	; (8009484 <UART_SetConfig+0x338>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d104      	bne.n	80092a8 <UART_SetConfig+0x15c>
 800929e:	231b      	movs	r3, #27
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	e00d      	b.n	80092c4 <UART_SetConfig+0x178>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a76      	ldr	r2, [pc, #472]	; (8009488 <UART_SetConfig+0x33c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d104      	bne.n	80092bc <UART_SetConfig+0x170>
 80092b2:	231b      	movs	r3, #27
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e003      	b.n	80092c4 <UART_SetConfig+0x178>
 80092bc:	231b      	movs	r3, #27
 80092be:	18fb      	adds	r3, r7, r3
 80092c0:	2210      	movs	r2, #16
 80092c2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	69da      	ldr	r2, [r3, #28]
 80092c8:	2380      	movs	r3, #128	; 0x80
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d000      	beq.n	80092d2 <UART_SetConfig+0x186>
 80092d0:	e065      	b.n	800939e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80092d2:	231b      	movs	r3, #27
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d015      	beq.n	8009308 <UART_SetConfig+0x1bc>
 80092dc:	dc18      	bgt.n	8009310 <UART_SetConfig+0x1c4>
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d00d      	beq.n	80092fe <UART_SetConfig+0x1b2>
 80092e2:	dc15      	bgt.n	8009310 <UART_SetConfig+0x1c4>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <UART_SetConfig+0x1a2>
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d005      	beq.n	80092f8 <UART_SetConfig+0x1ac>
 80092ec:	e010      	b.n	8009310 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ee:	f7fd fd2f 	bl	8006d50 <HAL_RCC_GetPCLK1Freq>
 80092f2:	0003      	movs	r3, r0
 80092f4:	617b      	str	r3, [r7, #20]
        break;
 80092f6:	e012      	b.n	800931e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092f8:	4b64      	ldr	r3, [pc, #400]	; (800948c <UART_SetConfig+0x340>)
 80092fa:	617b      	str	r3, [r7, #20]
        break;
 80092fc:	e00f      	b.n	800931e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092fe:	f7fd fc9d 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8009302:	0003      	movs	r3, r0
 8009304:	617b      	str	r3, [r7, #20]
        break;
 8009306:	e00a      	b.n	800931e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009308:	2380      	movs	r3, #128	; 0x80
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	617b      	str	r3, [r7, #20]
        break;
 800930e:	e006      	b.n	800931e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009314:	231a      	movs	r3, #26
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	2201      	movs	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
        break;
 800931c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d100      	bne.n	8009326 <UART_SetConfig+0x1da>
 8009324:	e08d      	b.n	8009442 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800932a:	4b59      	ldr	r3, [pc, #356]	; (8009490 <UART_SetConfig+0x344>)
 800932c:	0052      	lsls	r2, r2, #1
 800932e:	5ad3      	ldrh	r3, [r2, r3]
 8009330:	0019      	movs	r1, r3
 8009332:	6978      	ldr	r0, [r7, #20]
 8009334:	f7f6 ff04 	bl	8000140 <__udivsi3>
 8009338:	0003      	movs	r3, r0
 800933a:	005a      	lsls	r2, r3, #1
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	085b      	lsrs	r3, r3, #1
 8009342:	18d2      	adds	r2, r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	0019      	movs	r1, r3
 800934a:	0010      	movs	r0, r2
 800934c:	f7f6 fef8 	bl	8000140 <__udivsi3>
 8009350:	0003      	movs	r3, r0
 8009352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	2b0f      	cmp	r3, #15
 8009358:	d91c      	bls.n	8009394 <UART_SetConfig+0x248>
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	2380      	movs	r3, #128	; 0x80
 800935e:	025b      	lsls	r3, r3, #9
 8009360:	429a      	cmp	r2, r3
 8009362:	d217      	bcs.n	8009394 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	b29a      	uxth	r2, r3
 8009368:	200e      	movs	r0, #14
 800936a:	183b      	adds	r3, r7, r0
 800936c:	210f      	movs	r1, #15
 800936e:	438a      	bics	r2, r1
 8009370:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	085b      	lsrs	r3, r3, #1
 8009376:	b29b      	uxth	r3, r3
 8009378:	2207      	movs	r2, #7
 800937a:	4013      	ands	r3, r2
 800937c:	b299      	uxth	r1, r3
 800937e:	183b      	adds	r3, r7, r0
 8009380:	183a      	adds	r2, r7, r0
 8009382:	8812      	ldrh	r2, [r2, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	183a      	adds	r2, r7, r0
 800938e:	8812      	ldrh	r2, [r2, #0]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	e056      	b.n	8009442 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8009394:	231a      	movs	r3, #26
 8009396:	18fb      	adds	r3, r7, r3
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	e051      	b.n	8009442 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800939e:	231b      	movs	r3, #27
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d015      	beq.n	80093d4 <UART_SetConfig+0x288>
 80093a8:	dc18      	bgt.n	80093dc <UART_SetConfig+0x290>
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	d00d      	beq.n	80093ca <UART_SetConfig+0x27e>
 80093ae:	dc15      	bgt.n	80093dc <UART_SetConfig+0x290>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <UART_SetConfig+0x26e>
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d005      	beq.n	80093c4 <UART_SetConfig+0x278>
 80093b8:	e010      	b.n	80093dc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ba:	f7fd fcc9 	bl	8006d50 <HAL_RCC_GetPCLK1Freq>
 80093be:	0003      	movs	r3, r0
 80093c0:	617b      	str	r3, [r7, #20]
        break;
 80093c2:	e012      	b.n	80093ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093c4:	4b31      	ldr	r3, [pc, #196]	; (800948c <UART_SetConfig+0x340>)
 80093c6:	617b      	str	r3, [r7, #20]
        break;
 80093c8:	e00f      	b.n	80093ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ca:	f7fd fc37 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 80093ce:	0003      	movs	r3, r0
 80093d0:	617b      	str	r3, [r7, #20]
        break;
 80093d2:	e00a      	b.n	80093ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d4:	2380      	movs	r3, #128	; 0x80
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	617b      	str	r3, [r7, #20]
        break;
 80093da:	e006      	b.n	80093ea <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80093e0:	231a      	movs	r3, #26
 80093e2:	18fb      	adds	r3, r7, r3
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
        break;
 80093e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d028      	beq.n	8009442 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f4:	4b26      	ldr	r3, [pc, #152]	; (8009490 <UART_SetConfig+0x344>)
 80093f6:	0052      	lsls	r2, r2, #1
 80093f8:	5ad3      	ldrh	r3, [r2, r3]
 80093fa:	0019      	movs	r1, r3
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	f7f6 fe9f 	bl	8000140 <__udivsi3>
 8009402:	0003      	movs	r3, r0
 8009404:	001a      	movs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	18d2      	adds	r2, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	0019      	movs	r1, r3
 8009414:	0010      	movs	r0, r2
 8009416:	f7f6 fe93 	bl	8000140 <__udivsi3>
 800941a:	0003      	movs	r3, r0
 800941c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d90a      	bls.n	800943a <UART_SetConfig+0x2ee>
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	2380      	movs	r3, #128	; 0x80
 8009428:	025b      	lsls	r3, r3, #9
 800942a:	429a      	cmp	r2, r3
 800942c:	d205      	bcs.n	800943a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	e003      	b.n	8009442 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800943a:	231a      	movs	r3, #26
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2201      	movs	r2, #1
 8009440:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	226a      	movs	r2, #106	; 0x6a
 8009446:	2101      	movs	r1, #1
 8009448:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2268      	movs	r2, #104	; 0x68
 800944e:	2101      	movs	r1, #1
 8009450:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800945e:	231a      	movs	r3, #26
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	781b      	ldrb	r3, [r3, #0]
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b008      	add	sp, #32
 800946a:	bd80      	pop	{r7, pc}
 800946c:	cfff69f3 	.word	0xcfff69f3
 8009470:	ffffcfff 	.word	0xffffcfff
 8009474:	11fff4ff 	.word	0x11fff4ff
 8009478:	40013800 	.word	0x40013800
 800947c:	40021000 	.word	0x40021000
 8009480:	40004400 	.word	0x40004400
 8009484:	40004800 	.word	0x40004800
 8009488:	40004c00 	.word	0x40004c00
 800948c:	00f42400 	.word	0x00f42400
 8009490:	08014dd4 	.word	0x08014dd4

08009494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a0:	2201      	movs	r2, #1
 80094a2:	4013      	ands	r3, r2
 80094a4:	d00b      	beq.n	80094be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4a4a      	ldr	r2, [pc, #296]	; (80095d8 <UART_AdvFeatureConfig+0x144>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	0019      	movs	r1, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c2:	2202      	movs	r2, #2
 80094c4:	4013      	ands	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	4a43      	ldr	r2, [pc, #268]	; (80095dc <UART_AdvFeatureConfig+0x148>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	2204      	movs	r2, #4
 80094e6:	4013      	ands	r3, r2
 80094e8:	d00b      	beq.n	8009502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4a3b      	ldr	r2, [pc, #236]	; (80095e0 <UART_AdvFeatureConfig+0x14c>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	0019      	movs	r1, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	430a      	orrs	r2, r1
 8009500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	2208      	movs	r2, #8
 8009508:	4013      	ands	r3, r2
 800950a:	d00b      	beq.n	8009524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4a34      	ldr	r2, [pc, #208]	; (80095e4 <UART_AdvFeatureConfig+0x150>)
 8009514:	4013      	ands	r3, r2
 8009516:	0019      	movs	r1, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	2210      	movs	r2, #16
 800952a:	4013      	ands	r3, r2
 800952c:	d00b      	beq.n	8009546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4a2c      	ldr	r2, [pc, #176]	; (80095e8 <UART_AdvFeatureConfig+0x154>)
 8009536:	4013      	ands	r3, r2
 8009538:	0019      	movs	r1, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954a:	2220      	movs	r2, #32
 800954c:	4013      	ands	r3, r2
 800954e:	d00b      	beq.n	8009568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	4a25      	ldr	r2, [pc, #148]	; (80095ec <UART_AdvFeatureConfig+0x158>)
 8009558:	4013      	ands	r3, r2
 800955a:	0019      	movs	r1, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	2240      	movs	r2, #64	; 0x40
 800956e:	4013      	ands	r3, r2
 8009570:	d01d      	beq.n	80095ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <UART_AdvFeatureConfig+0x15c>)
 800957a:	4013      	ands	r3, r2
 800957c:	0019      	movs	r1, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800958e:	2380      	movs	r3, #128	; 0x80
 8009590:	035b      	lsls	r3, r3, #13
 8009592:	429a      	cmp	r2, r3
 8009594:	d10b      	bne.n	80095ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <UART_AdvFeatureConfig+0x160>)
 800959e:	4013      	ands	r3, r2
 80095a0:	0019      	movs	r1, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b2:	2280      	movs	r2, #128	; 0x80
 80095b4:	4013      	ands	r3, r2
 80095b6:	d00b      	beq.n	80095d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	4a0e      	ldr	r2, [pc, #56]	; (80095f8 <UART_AdvFeatureConfig+0x164>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	0019      	movs	r1, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	605a      	str	r2, [r3, #4]
  }
}
 80095d0:	46c0      	nop			; (mov r8, r8)
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b002      	add	sp, #8
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	fffdffff 	.word	0xfffdffff
 80095dc:	fffeffff 	.word	0xfffeffff
 80095e0:	fffbffff 	.word	0xfffbffff
 80095e4:	ffff7fff 	.word	0xffff7fff
 80095e8:	ffffefff 	.word	0xffffefff
 80095ec:	ffffdfff 	.word	0xffffdfff
 80095f0:	ffefffff 	.word	0xffefffff
 80095f4:	ff9fffff 	.word	0xff9fffff
 80095f8:	fff7ffff 	.word	0xfff7ffff

080095fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af02      	add	r7, sp, #8
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2290      	movs	r2, #144	; 0x90
 8009608:	2100      	movs	r1, #0
 800960a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800960c:	f7fb f8d8 	bl	80047c0 <HAL_GetTick>
 8009610:	0003      	movs	r3, r0
 8009612:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2208      	movs	r2, #8
 800961c:	4013      	ands	r3, r2
 800961e:	2b08      	cmp	r3, #8
 8009620:	d10c      	bne.n	800963c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2280      	movs	r2, #128	; 0x80
 8009626:	0391      	lsls	r1, r2, #14
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	4a1a      	ldr	r2, [pc, #104]	; (8009694 <UART_CheckIdleState+0x98>)
 800962c:	9200      	str	r2, [sp, #0]
 800962e:	2200      	movs	r2, #0
 8009630:	f000 f832 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 8009634:	1e03      	subs	r3, r0, #0
 8009636:	d001      	beq.n	800963c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e026      	b.n	800968a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2204      	movs	r2, #4
 8009644:	4013      	ands	r3, r2
 8009646:	2b04      	cmp	r3, #4
 8009648:	d10c      	bne.n	8009664 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2280      	movs	r2, #128	; 0x80
 800964e:	03d1      	lsls	r1, r2, #15
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <UART_CheckIdleState+0x98>)
 8009654:	9200      	str	r2, [sp, #0]
 8009656:	2200      	movs	r2, #0
 8009658:	f000 f81e 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 800965c:	1e03      	subs	r3, r0, #0
 800965e:	d001      	beq.n	8009664 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e012      	b.n	800968a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2288      	movs	r2, #136	; 0x88
 8009668:	2120      	movs	r1, #32
 800966a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	228c      	movs	r2, #140	; 0x8c
 8009670:	2120      	movs	r1, #32
 8009672:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2284      	movs	r2, #132	; 0x84
 8009684:	2100      	movs	r1, #0
 8009686:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	0018      	movs	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	b004      	add	sp, #16
 8009690:	bd80      	pop	{r7, pc}
 8009692:	46c0      	nop			; (mov r8, r8)
 8009694:	01ffffff 	.word	0x01ffffff

08009698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b094      	sub	sp, #80	; 0x50
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	1dfb      	adds	r3, r7, #7
 80096a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a8:	e0a7      	b.n	80097fa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ac:	3301      	adds	r3, #1
 80096ae:	d100      	bne.n	80096b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80096b0:	e0a3      	b.n	80097fa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b2:	f7fb f885 	bl	80047c0 <HAL_GetTick>
 80096b6:	0002      	movs	r2, r0
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d13f      	bne.n	8009748 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c8:	f3ef 8310 	mrs	r3, PRIMASK
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80096d0:	647b      	str	r3, [r7, #68]	; 0x44
 80096d2:	2301      	movs	r3, #1
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d8:	f383 8810 	msr	PRIMASK, r3
}
 80096dc:	46c0      	nop			; (mov r8, r8)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	494e      	ldr	r1, [pc, #312]	; (8009824 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80096ea:	400a      	ands	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	f383 8810 	msr	PRIMASK, r3
}
 80096f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096fa:	f3ef 8310 	mrs	r3, PRIMASK
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009702:	643b      	str	r3, [r7, #64]	; 0x40
 8009704:	2301      	movs	r3, #1
 8009706:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	f383 8810 	msr	PRIMASK, r3
}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2101      	movs	r1, #1
 800971c:	438a      	bics	r2, r1
 800971e:	609a      	str	r2, [r3, #8]
 8009720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009726:	f383 8810 	msr	PRIMASK, r3
}
 800972a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2288      	movs	r2, #136	; 0x88
 8009730:	2120      	movs	r1, #32
 8009732:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	228c      	movs	r2, #140	; 0x8c
 8009738:	2120      	movs	r1, #32
 800973a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2284      	movs	r2, #132	; 0x84
 8009740:	2100      	movs	r1, #0
 8009742:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e069      	b.n	800981c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2204      	movs	r2, #4
 8009750:	4013      	ands	r3, r2
 8009752:	d052      	beq.n	80097fa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69da      	ldr	r2, [r3, #28]
 800975a:	2380      	movs	r3, #128	; 0x80
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	401a      	ands	r2, r3
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	429a      	cmp	r2, r3
 8009766:	d148      	bne.n	80097fa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2280      	movs	r2, #128	; 0x80
 800976e:	0112      	lsls	r2, r2, #4
 8009770:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009772:	f3ef 8310 	mrs	r3, PRIMASK
 8009776:	613b      	str	r3, [r7, #16]
  return(result);
 8009778:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800977a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800977c:	2301      	movs	r3, #1
 800977e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f383 8810 	msr	PRIMASK, r3
}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4924      	ldr	r1, [pc, #144]	; (8009824 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009794:	400a      	ands	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f383 8810 	msr	PRIMASK, r3
}
 80097a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a4:	f3ef 8310 	mrs	r3, PRIMASK
 80097a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80097aa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ae:	2301      	movs	r3, #1
 80097b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	f383 8810 	msr	PRIMASK, r3
}
 80097b8:	46c0      	nop			; (mov r8, r8)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689a      	ldr	r2, [r3, #8]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2101      	movs	r1, #1
 80097c6:	438a      	bics	r2, r1
 80097c8:	609a      	str	r2, [r3, #8]
 80097ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	f383 8810 	msr	PRIMASK, r3
}
 80097d4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2288      	movs	r2, #136	; 0x88
 80097da:	2120      	movs	r1, #32
 80097dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	228c      	movs	r2, #140	; 0x8c
 80097e2:	2120      	movs	r1, #32
 80097e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2290      	movs	r2, #144	; 0x90
 80097ea:	2120      	movs	r1, #32
 80097ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2284      	movs	r2, #132	; 0x84
 80097f2:	2100      	movs	r1, #0
 80097f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e010      	b.n	800981c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4013      	ands	r3, r2
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	425a      	negs	r2, r3
 800980a:	4153      	adcs	r3, r2
 800980c:	b2db      	uxtb	r3, r3
 800980e:	001a      	movs	r2, r3
 8009810:	1dfb      	adds	r3, r7, #7
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d100      	bne.n	800981a <UART_WaitOnFlagUntilTimeout+0x182>
 8009818:	e747      	b.n	80096aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	0018      	movs	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	b014      	add	sp, #80	; 0x50
 8009822:	bd80      	pop	{r7, pc}
 8009824:	fffffe5f 	.word	0xfffffe5f

08009828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08e      	sub	sp, #56	; 0x38
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009830:	f3ef 8310 	mrs	r3, PRIMASK
 8009834:	617b      	str	r3, [r7, #20]
  return(result);
 8009836:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009838:	637b      	str	r3, [r7, #52]	; 0x34
 800983a:	2301      	movs	r3, #1
 800983c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	f383 8810 	msr	PRIMASK, r3
}
 8009844:	46c0      	nop			; (mov r8, r8)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4926      	ldr	r1, [pc, #152]	; (80098ec <UART_EndRxTransfer+0xc4>)
 8009852:	400a      	ands	r2, r1
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009858:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f383 8810 	msr	PRIMASK, r3
}
 8009860:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009862:	f3ef 8310 	mrs	r3, PRIMASK
 8009866:	623b      	str	r3, [r7, #32]
  return(result);
 8009868:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800986a:	633b      	str	r3, [r7, #48]	; 0x30
 800986c:	2301      	movs	r3, #1
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	f383 8810 	msr	PRIMASK, r3
}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	491b      	ldr	r1, [pc, #108]	; (80098f0 <UART_EndRxTransfer+0xc8>)
 8009884:	400a      	ands	r2, r1
 8009886:	609a      	str	r2, [r3, #8]
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f383 8810 	msr	PRIMASK, r3
}
 8009892:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d118      	bne.n	80098ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989c:	f3ef 8310 	mrs	r3, PRIMASK
 80098a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80098a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098a6:	2301      	movs	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f383 8810 	msr	PRIMASK, r3
}
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2110      	movs	r1, #16
 80098be:	438a      	bics	r2, r1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	228c      	movs	r2, #140	; 0x8c
 80098d2:	2120      	movs	r1, #32
 80098d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	46bd      	mov	sp, r7
 80098e6:	b00e      	add	sp, #56	; 0x38
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	fffffedf 	.word	0xfffffedf
 80098f0:	effffffe 	.word	0xeffffffe

080098f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	225e      	movs	r2, #94	; 0x5e
 8009906:	2100      	movs	r1, #0
 8009908:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2256      	movs	r2, #86	; 0x56
 800990e:	2100      	movs	r1, #0
 8009910:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	0018      	movs	r0, r3
 8009916:	f7ff fc05 	bl	8009124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	46bd      	mov	sp, r7
 800991e:	b004      	add	sp, #16
 8009920:	bd80      	pop	{r7, pc}

08009922 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800992a:	f3ef 8310 	mrs	r3, PRIMASK
 800992e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009930:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	2301      	movs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f383 8810 	msr	PRIMASK, r3
}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2140      	movs	r1, #64	; 0x40
 800994c:	438a      	bics	r2, r1
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f383 8810 	msr	PRIMASK, r3
}
 800995a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2288      	movs	r2, #136	; 0x88
 8009960:	2120      	movs	r1, #32
 8009962:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	0018      	movs	r0, r3
 800996e:	f7ff fbd1 	bl	8009114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	46bd      	mov	sp, r7
 8009976:	b006      	add	sp, #24
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	46bd      	mov	sp, r7
 8009986:	b002      	add	sp, #8
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	46bd      	mov	sp, r7
 8009996:	b002      	add	sp, #8
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b002      	add	sp, #8
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2284      	movs	r2, #132	; 0x84
 80099b8:	5c9b      	ldrb	r3, [r3, r2]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80099be:	2302      	movs	r3, #2
 80099c0:	e027      	b.n	8009a12 <HAL_UARTEx_DisableFifoMode+0x66>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2284      	movs	r2, #132	; 0x84
 80099c6:	2101      	movs	r1, #1
 80099c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2288      	movs	r2, #136	; 0x88
 80099ce:	2124      	movs	r1, #36	; 0x24
 80099d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2101      	movs	r1, #1
 80099e6:	438a      	bics	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4a0b      	ldr	r2, [pc, #44]	; (8009a1c <HAL_UARTEx_DisableFifoMode+0x70>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2288      	movs	r2, #136	; 0x88
 8009a04:	2120      	movs	r1, #32
 8009a06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2284      	movs	r2, #132	; 0x84
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	0018      	movs	r0, r3
 8009a14:	46bd      	mov	sp, r7
 8009a16:	b004      	add	sp, #16
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	dfffffff 	.word	0xdfffffff

08009a20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2284      	movs	r2, #132	; 0x84
 8009a2e:	5c9b      	ldrb	r3, [r3, r2]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e02e      	b.n	8009a96 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2284      	movs	r2, #132	; 0x84
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2288      	movs	r2, #136	; 0x88
 8009a44:	2124      	movs	r1, #36	; 0x24
 8009a46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	438a      	bics	r2, r1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	08d9      	lsrs	r1, r3, #3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	0018      	movs	r0, r3
 8009a78:	f000 f854 	bl	8009b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2288      	movs	r2, #136	; 0x88
 8009a88:	2120      	movs	r1, #32
 8009a8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2284      	movs	r2, #132	; 0x84
 8009a90:	2100      	movs	r1, #0
 8009a92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	0018      	movs	r0, r3
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	b004      	add	sp, #16
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2284      	movs	r2, #132	; 0x84
 8009aae:	5c9b      	ldrb	r3, [r3, r2]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d101      	bne.n	8009ab8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e02f      	b.n	8009b18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2284      	movs	r2, #132	; 0x84
 8009abc:	2101      	movs	r1, #1
 8009abe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2288      	movs	r2, #136	; 0x88
 8009ac4:	2124      	movs	r1, #36	; 0x24
 8009ac6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2101      	movs	r1, #1
 8009adc:	438a      	bics	r2, r1
 8009ade:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	0019      	movs	r1, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	0018      	movs	r0, r3
 8009afa:	f000 f813 	bl	8009b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2288      	movs	r2, #136	; 0x88
 8009b0a:	2120      	movs	r1, #32
 8009b0c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2284      	movs	r2, #132	; 0x84
 8009b12:	2100      	movs	r1, #0
 8009b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b004      	add	sp, #16
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	f1ffffff 	.word	0xf1ffffff

08009b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d108      	bne.n	8009b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	226a      	movs	r2, #106	; 0x6a
 8009b38:	2101      	movs	r1, #1
 8009b3a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2268      	movs	r2, #104	; 0x68
 8009b40:	2101      	movs	r1, #1
 8009b42:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b44:	e043      	b.n	8009bce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b46:	260f      	movs	r6, #15
 8009b48:	19bb      	adds	r3, r7, r6
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b4e:	200e      	movs	r0, #14
 8009b50:	183b      	adds	r3, r7, r0
 8009b52:	2208      	movs	r2, #8
 8009b54:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	0e5b      	lsrs	r3, r3, #25
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	240d      	movs	r4, #13
 8009b62:	193b      	adds	r3, r7, r4
 8009b64:	2107      	movs	r1, #7
 8009b66:	400a      	ands	r2, r1
 8009b68:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	0f5b      	lsrs	r3, r3, #29
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	250c      	movs	r5, #12
 8009b76:	197b      	adds	r3, r7, r5
 8009b78:	2107      	movs	r1, #7
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b7e:	183b      	adds	r3, r7, r0
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	197a      	adds	r2, r7, r5
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	4914      	ldr	r1, [pc, #80]	; (8009bd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b88:	5c8a      	ldrb	r2, [r1, r2]
 8009b8a:	435a      	muls	r2, r3
 8009b8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b8e:	197b      	adds	r3, r7, r5
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	4a12      	ldr	r2, [pc, #72]	; (8009bdc <UARTEx_SetNbDataToProcess+0xb8>)
 8009b94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b96:	0019      	movs	r1, r3
 8009b98:	f7f6 fb5c 	bl	8000254 <__divsi3>
 8009b9c:	0003      	movs	r3, r0
 8009b9e:	b299      	uxth	r1, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	226a      	movs	r2, #106	; 0x6a
 8009ba4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ba6:	19bb      	adds	r3, r7, r6
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	193a      	adds	r2, r7, r4
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	490a      	ldr	r1, [pc, #40]	; (8009bd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8009bb0:	5c8a      	ldrb	r2, [r1, r2]
 8009bb2:	435a      	muls	r2, r3
 8009bb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bb6:	193b      	adds	r3, r7, r4
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <UARTEx_SetNbDataToProcess+0xb8>)
 8009bbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bbe:	0019      	movs	r1, r3
 8009bc0:	f7f6 fb48 	bl	8000254 <__divsi3>
 8009bc4:	0003      	movs	r3, r0
 8009bc6:	b299      	uxth	r1, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2268      	movs	r2, #104	; 0x68
 8009bcc:	5299      	strh	r1, [r3, r2]
}
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	b005      	add	sp, #20
 8009bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	08014dec 	.word	0x08014dec
 8009bdc:	08014df4 	.word	0x08014df4

08009be0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8009be0:	b5b0      	push	{r4, r5, r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bea:	250f      	movs	r5, #15
 8009bec:	197b      	adds	r3, r7, r5
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8009bf2:	197c      	adds	r4, r7, r5
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	0011      	movs	r1, r2
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f001 ffec 	bl	800bbd8 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009c00:	0003      	movs	r3, r0
 8009c02:	7023      	strb	r3, [r4, #0]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009c04:	197b      	adds	r3, r7, r5
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	b25b      	sxtb	r3, r3
}
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b004      	add	sp, #16
 8009c10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c14 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c16:	b097      	sub	sp, #92	; 0x5c
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c1c:	2157      	movs	r1, #87	; 0x57
 8009c1e:	187b      	adds	r3, r7, r1
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009c24:	000a      	movs	r2, r1
 8009c26:	18bb      	adds	r3, r7, r2
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d108      	bne.n	8009c42 <VL53L0X_DataInit+0x2e>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8009c30:	18bc      	adds	r4, r7, r2
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	2188      	movs	r1, #136	; 0x88
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f005 fe93 	bl	800f964 <VL53L0X_WrByte>
 8009c3e:	0003      	movs	r3, r0
 8009c40:	7023      	strb	r3, [r4, #0]

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	22f0      	movs	r2, #240	; 0xf0
 8009c46:	2100      	movs	r1, #0
 8009c48:	5499      	strb	r1, [r3, r2]
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	23a9      	movs	r3, #169	; 0xa9
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	21fa      	movs	r1, #250	; 0xfa
 8009c52:	0089      	lsls	r1, r1, #2
 8009c54:	52d1      	strh	r1, [r2, r3]

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	23aa      	movs	r3, #170	; 0xaa
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	21c8      	movs	r1, #200	; 0xc8
 8009c5e:	0049      	lsls	r1, r1, #1
 8009c60:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	23ac      	movs	r3, #172	; 0xac
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	49b5      	ldr	r1, [pc, #724]	; (8009f40 <VL53L0X_DataInit+0x32c>)
 8009c6a:	50d1      	str	r1, [r2, r3]
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	22d4      	movs	r2, #212	; 0xd4
 8009c70:	49b4      	ldr	r1, [pc, #720]	; (8009f44 <VL53L0X_DataInit+0x330>)
 8009c72:	5099      	str	r1, [r3, r2]

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009c7a:	2657      	movs	r6, #87	; 0x57
 8009c7c:	19bc      	adds	r4, r7, r6
 8009c7e:	2510      	movs	r5, #16
 8009c80:	197a      	adds	r2, r7, r5
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	0011      	movs	r1, r2
 8009c86:	0018      	movs	r0, r3
 8009c88:	f000 fb3b 	bl	800a302 <VL53L0X_GetDeviceParameters>
 8009c8c:	0003      	movs	r3, r0
 8009c8e:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8009c90:	19bb      	adds	r3, r7, r6
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10d      	bne.n	8009cb6 <VL53L0X_DataInit+0xa2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8009c9a:	197b      	adds	r3, r7, r5
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	701a      	strb	r2, [r3, #0]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8009ca0:	197b      	adds	r3, r7, r5
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	705a      	strb	r2, [r3, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	197a      	adds	r2, r7, r5
 8009caa:	3310      	adds	r3, #16
 8009cac:	0011      	movs	r1, r2
 8009cae:	2240      	movs	r2, #64	; 0x40
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	f007 fb49 	bl	8011348 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	239a      	movs	r3, #154	; 0x9a
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	2164      	movs	r1, #100	; 0x64
 8009cbe:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	239b      	movs	r3, #155	; 0x9b
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	21e1      	movs	r1, #225	; 0xe1
 8009cc8:	0089      	lsls	r1, r1, #2
 8009cca:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	239c      	movs	r3, #156	; 0x9c
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	21fa      	movs	r1, #250	; 0xfa
 8009cd4:	0049      	lsls	r1, r1, #1
 8009cd6:	52d1      	strh	r1, [r2, r3]
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	239e      	movs	r3, #158	; 0x9e
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	21a0      	movs	r1, #160	; 0xa0
 8009ce0:	0109      	lsls	r1, r1, #4
 8009ce2:	52d1      	strh	r1, [r2, r3]

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	23a8      	movs	r3, #168	; 0xa8
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	2101      	movs	r1, #1
 8009cec:	54d1      	strb	r1, [r2, r3]

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	2180      	movs	r1, #128	; 0x80
 8009cf4:	0018      	movs	r0, r3
 8009cf6:	f005 fe35 	bl	800f964 <VL53L0X_WrByte>
 8009cfa:	0003      	movs	r3, r0
 8009cfc:	0019      	movs	r1, r3
 8009cfe:	2457      	movs	r4, #87	; 0x57
 8009d00:	193b      	adds	r3, r7, r4
 8009d02:	193a      	adds	r2, r7, r4
 8009d04:	7812      	ldrb	r2, [r2, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	21ff      	movs	r1, #255	; 0xff
 8009d10:	0018      	movs	r0, r3
 8009d12:	f005 fe27 	bl	800f964 <VL53L0X_WrByte>
 8009d16:	0003      	movs	r3, r0
 8009d18:	0019      	movs	r1, r3
 8009d1a:	193b      	adds	r3, r7, r4
 8009d1c:	193a      	adds	r2, r7, r4
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f005 fe1a 	bl	800f964 <VL53L0X_WrByte>
 8009d30:	0003      	movs	r3, r0
 8009d32:	0019      	movs	r1, r3
 8009d34:	193b      	adds	r3, r7, r4
 8009d36:	193a      	adds	r2, r7, r4
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009d3e:	250f      	movs	r5, #15
 8009d40:	197a      	adds	r2, r7, r5
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2191      	movs	r1, #145	; 0x91
 8009d46:	0018      	movs	r0, r3
 8009d48:	f005 febb 	bl	800fac2 <VL53L0X_RdByte>
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	0019      	movs	r1, r3
 8009d50:	193b      	adds	r3, r7, r4
 8009d52:	193a      	adds	r2, r7, r4
 8009d54:	7812      	ldrb	r2, [r2, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	701a      	strb	r2, [r3, #0]
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009d5a:	197b      	adds	r3, r7, r5
 8009d5c:	7819      	ldrb	r1, [r3, #0]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	239d      	movs	r3, #157	; 0x9d
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	54d1      	strb	r1, [r2, r3]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f005 fdf9 	bl	800f964 <VL53L0X_WrByte>
 8009d72:	0003      	movs	r3, r0
 8009d74:	0019      	movs	r1, r3
 8009d76:	193b      	adds	r3, r7, r4
 8009d78:	193a      	adds	r2, r7, r4
 8009d7a:	7812      	ldrb	r2, [r2, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	21ff      	movs	r1, #255	; 0xff
 8009d86:	0018      	movs	r0, r3
 8009d88:	f005 fdec 	bl	800f964 <VL53L0X_WrByte>
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	0019      	movs	r1, r3
 8009d90:	193b      	adds	r3, r7, r4
 8009d92:	193a      	adds	r2, r7, r4
 8009d94:	7812      	ldrb	r2, [r2, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2180      	movs	r1, #128	; 0x80
 8009da0:	0018      	movs	r0, r3
 8009da2:	f005 fddf 	bl	800f964 <VL53L0X_WrByte>
 8009da6:	0003      	movs	r3, r0
 8009da8:	0019      	movs	r1, r3
 8009daa:	193b      	adds	r3, r7, r4
 8009dac:	193a      	adds	r2, r7, r4
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	701a      	strb	r2, [r3, #0]

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009db4:	2300      	movs	r3, #0
 8009db6:	653b      	str	r3, [r7, #80]	; 0x50
 8009db8:	e016      	b.n	8009de8 <VL53L0X_DataInit+0x1d4>
		if (Status == VL53L0X_ERROR_NONE)
 8009dba:	2457      	movs	r4, #87	; 0x57
 8009dbc:	193b      	adds	r3, r7, r4
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d114      	bne.n	8009df0 <VL53L0X_DataInit+0x1dc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8009dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc8:	b299      	uxth	r1, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	0018      	movs	r0, r3
 8009dd0:	f000 fe7e 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
 8009dd4:	0003      	movs	r3, r0
 8009dd6:	0019      	movs	r1, r3
 8009dd8:	193b      	adds	r3, r7, r4
 8009dda:	193a      	adds	r2, r7, r4
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de4:	3301      	adds	r3, #1
 8009de6:	653b      	str	r3, [r7, #80]	; 0x50
 8009de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	dde5      	ble.n	8009dba <VL53L0X_DataInit+0x1a6>
 8009dee:	e000      	b.n	8009df2 <VL53L0X_DataInit+0x1de>
		else
			break;
 8009df0:	46c0      	nop			; (mov r8, r8)

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009df2:	2257      	movs	r2, #87	; 0x57
 8009df4:	18bb      	adds	r3, r7, r2
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d108      	bne.n	8009e10 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009dfe:	18bc      	adds	r4, r7, r2
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	2102      	movs	r1, #2
 8009e06:	0018      	movs	r0, r3
 8009e08:	f000 fe62 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
 8009e0c:	0003      	movs	r3, r0
 8009e0e:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009e10:	2257      	movs	r2, #87	; 0x57
 8009e12:	18bb      	adds	r3, r7, r2
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b25b      	sxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <VL53L0X_DataInit+0x21a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009e1c:	18bc      	adds	r4, r7, r2
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	2103      	movs	r1, #3
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 fe53 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
 8009e2a:	0003      	movs	r3, r0
 8009e2c:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009e2e:	2257      	movs	r2, #87	; 0x57
 8009e30:	18bb      	adds	r3, r7, r2
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	b25b      	sxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d108      	bne.n	8009e4c <VL53L0X_DataInit+0x238>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009e3a:	18bc      	adds	r4, r7, r2
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2104      	movs	r1, #4
 8009e42:	0018      	movs	r0, r3
 8009e44:	f000 fe44 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
 8009e48:	0003      	movs	r3, r0
 8009e4a:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009e4c:	2257      	movs	r2, #87	; 0x57
 8009e4e:	18bb      	adds	r3, r7, r2
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b25b      	sxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d108      	bne.n	8009e6a <VL53L0X_DataInit+0x256>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009e58:	18bc      	adds	r4, r7, r2
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2105      	movs	r1, #5
 8009e60:	0018      	movs	r0, r3
 8009e62:	f000 fe35 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
 8009e66:	0003      	movs	r3, r0
 8009e68:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009e6a:	2257      	movs	r2, #87	; 0x57
 8009e6c:	18bb      	adds	r3, r7, r2
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	b25b      	sxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d109      	bne.n	8009e8a <VL53L0X_DataInit+0x276>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e76:	18bc      	adds	r4, r7, r2
 8009e78:	2390      	movs	r3, #144	; 0x90
 8009e7a:	035a      	lsls	r2, r3, #13
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2100      	movs	r1, #0
 8009e80:	0018      	movs	r0, r3
 8009e82:	f000 ff11 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
 8009e86:	0003      	movs	r3, r0
 8009e88:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009e8a:	2257      	movs	r2, #87	; 0x57
 8009e8c:	18bb      	adds	r3, r7, r2
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	b25b      	sxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d109      	bne.n	8009eaa <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009e96:	18bc      	adds	r4, r7, r2
 8009e98:	2380      	movs	r3, #128	; 0x80
 8009e9a:	01da      	lsls	r2, r3, #7
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f000 ff01 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
 8009ea6:	0003      	movs	r3, r0
 8009ea8:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009eaa:	2257      	movs	r2, #87	; 0x57
 8009eac:	18bb      	adds	r3, r7, r2
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d109      	bne.n	8009eca <VL53L0X_DataInit+0x2b6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009eb6:	18bc      	adds	r4, r7, r2
 8009eb8:	238c      	movs	r3, #140	; 0x8c
 8009eba:	039a      	lsls	r2, r3, #14
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2102      	movs	r1, #2
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f000 fef1 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
 8009ec6:	0003      	movs	r3, r0
 8009ec8:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009eca:	2257      	movs	r2, #87	; 0x57
 8009ecc:	18bb      	adds	r3, r7, r2
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	b25b      	sxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d108      	bne.n	8009ee8 <VL53L0X_DataInit+0x2d4>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009ed6:	18bc      	adds	r4, r7, r2
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	2103      	movs	r1, #3
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f000 fee2 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
 8009ee4:	0003      	movs	r3, r0
 8009ee6:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ee8:	2057      	movs	r0, #87	; 0x57
 8009eea:	183b      	adds	r3, r7, r0
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d112      	bne.n	8009f1a <VL53L0X_DataInit+0x306>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	2398      	movs	r3, #152	; 0x98
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	21ff      	movs	r1, #255	; 0xff
 8009efc:	54d1      	strb	r1, [r2, r3]
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009efe:	183c      	adds	r4, r7, r0
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	22ff      	movs	r2, #255	; 0xff
 8009f04:	2101      	movs	r1, #1
 8009f06:	0018      	movs	r0, r3
 8009f08:	f005 fd2c 	bl	800f964 <VL53L0X_WrByte>
 8009f0c:	0003      	movs	r3, r0
 8009f0e:	7023      	strb	r3, [r4, #0]
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	2399      	movs	r3, #153	; 0x99
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	2101      	movs	r1, #1
 8009f18:	54d1      	strb	r1, [r2, r3]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009f1a:	2357      	movs	r3, #87	; 0x57
 8009f1c:	18fb      	adds	r3, r7, r3
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <VL53L0X_DataInit+0x31c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	2316      	movs	r3, #22
 8009f2a:	33ff      	adds	r3, #255	; 0xff
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 8009f30:	2357      	movs	r3, #87	; 0x57
 8009f32:	18fb      	adds	r3, r7, r3
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b25b      	sxtb	r3, r3
}
 8009f38:	0018      	movs	r0, r3
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b017      	add	sp, #92	; 0x5c
 8009f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f40:	00016b85 	.word	0x00016b85
 8009f44:	000970a4 	.word	0x000970a4

08009f48 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	b09f      	sub	sp, #124	; 0x7c
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f50:	246f      	movs	r4, #111	; 0x6f
 8009f52:	193b      	adds	r3, r7, r4
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8009f58:	231c      	movs	r3, #28
 8009f5a:	18fb      	adds	r3, r7, r3
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	2340      	movs	r3, #64	; 0x40
 8009f60:	001a      	movs	r2, r3
 8009f62:	2100      	movs	r1, #0
 8009f64:	f007 f9f9 	bl	801135a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009f68:	231a      	movs	r3, #26
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	801a      	strh	r2, [r3, #0]
	uint8_t tempbyte = 0;
 8009f70:	2319      	movs	r3, #25
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]
	uint8_t UseInternalTuningSettings = 0;
 8009f78:	2367      	movs	r3, #103	; 0x67
 8009f7a:	18fb      	adds	r3, r7, r3
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]
	uint32_t count = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8009f84:	2318      	movs	r3, #24
 8009f86:	18fb      	adds	r3, r7, r3
 8009f88:	2200      	movs	r2, #0
 8009f8a:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009f90:	255f      	movs	r5, #95	; 0x5f
 8009f92:	197b      	adds	r3, r7, r5
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009f98:	193c      	adds	r4, r7, r4
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	f002 ff14 	bl	800cdcc <VL53L0X_get_info_from_device>
 8009fa4:	0003      	movs	r3, r0
 8009fa6:	7023      	strb	r3, [r4, #0]

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	2314      	movs	r3, #20
 8009fac:	33ff      	adds	r3, #255	; 0xff
 8009fae:	5cd3      	ldrb	r3, [r2, r3]
 8009fb0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009fb2:	197b      	adds	r3, r7, r5
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	228a      	movs	r2, #138	; 0x8a
 8009fb8:	0052      	lsls	r2, r2, #1
 8009fba:	5c8a      	ldrb	r2, [r1, r2]
 8009fbc:	701a      	strb	r2, [r3, #0]
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009fbe:	197b      	adds	r3, r7, r5
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d80e      	bhi.n	8009fe4 <VL53L0X_StaticInit+0x9c>
 8009fc6:	197b      	adds	r3, r7, r5
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d102      	bne.n	8009fd4 <VL53L0X_StaticInit+0x8c>
		((ApertureSpads == 1) && (count > 32)) ||
 8009fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	d807      	bhi.n	8009fe4 <VL53L0X_StaticInit+0x9c>
 8009fd4:	235f      	movs	r3, #95	; 0x5f
 8009fd6:	18fb      	adds	r3, r7, r3
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10f      	bne.n	8009ffe <VL53L0X_StaticInit+0xb6>
		((ApertureSpads == 0) && (count > 12)))
 8009fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fe0:	2b0c      	cmp	r3, #12
 8009fe2:	d90c      	bls.n	8009ffe <VL53L0X_StaticInit+0xb6>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009fe4:	236f      	movs	r3, #111	; 0x6f
 8009fe6:	18fc      	adds	r4, r7, r3
 8009fe8:	2318      	movs	r3, #24
 8009fea:	18fa      	adds	r2, r7, r3
 8009fec:	2314      	movs	r3, #20
 8009fee:	18f9      	adds	r1, r7, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f002 f83f 	bl	800c076 <VL53L0X_perform_ref_spad_management>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	7023      	strb	r3, [r4, #0]
 8009ffc:	e00b      	b.n	800a016 <VL53L0X_StaticInit+0xce>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009ffe:	236f      	movs	r3, #111	; 0x6f
 800a000:	18fc      	adds	r4, r7, r3
 800a002:	235f      	movs	r3, #95	; 0x5f
 800a004:	18fb      	adds	r3, r7, r3
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	0018      	movs	r0, r3
 800a00e:	f002 faa1 	bl	800c554 <VL53L0X_set_reference_spads>
 800a012:	0003      	movs	r3, r0
 800a014:	7023      	strb	r3, [r4, #0]


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a016:	4bb2      	ldr	r3, [pc, #712]	; (800a2e0 <VL53L0X_StaticInit+0x398>)
 800a018:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a01a:	236f      	movs	r3, #111	; 0x6f
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	b25b      	sxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d112      	bne.n	800a04c <VL53L0X_StaticInit+0x104>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a026:	2067      	movs	r0, #103	; 0x67
 800a028:	183b      	adds	r3, r7, r0
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	22a8      	movs	r2, #168	; 0xa8
 800a02e:	0052      	lsls	r2, r2, #1
 800a030:	5c8a      	ldrb	r2, [r1, r2]
 800a032:	701a      	strb	r2, [r3, #0]
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a034:	183b      	adds	r3, r7, r0
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d105      	bne.n	800a048 <VL53L0X_StaticInit+0x100>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	23a6      	movs	r3, #166	; 0xa6
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	58d3      	ldr	r3, [r2, r3]
 800a044:	66bb      	str	r3, [r7, #104]	; 0x68
 800a046:	e001      	b.n	800a04c <VL53L0X_StaticInit+0x104>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a048:	4ba5      	ldr	r3, [pc, #660]	; (800a2e0 <VL53L0X_StaticInit+0x398>)
 800a04a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a04c:	226f      	movs	r2, #111	; 0x6f
 800a04e:	18bb      	adds	r3, r7, r2
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	b25b      	sxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <VL53L0X_StaticInit+0x122>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a058:	18bc      	adds	r4, r7, r2
 800a05a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0011      	movs	r1, r2
 800a060:	0018      	movs	r0, r3
 800a062:	f004 fc2d 	bl	800e8c0 <VL53L0X_load_tuning_settings>
 800a066:	0003      	movs	r3, r0
 800a068:	7023      	strb	r3, [r4, #0]


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a06a:	226f      	movs	r2, #111	; 0x6f
 800a06c:	18bb      	adds	r3, r7, r2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b25b      	sxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <VL53L0X_StaticInit+0x144>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a076:	18bc      	adds	r4, r7, r2
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	2304      	movs	r3, #4
 800a080:	2200      	movs	r2, #0
 800a082:	2100      	movs	r1, #0
 800a084:	f001 fb3e 	bl	800b704 <VL53L0X_SetGpioConfig>
 800a088:	0003      	movs	r3, r0
 800a08a:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a08c:	256f      	movs	r5, #111	; 0x6f
 800a08e:	197b      	adds	r3, r7, r5
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b25b      	sxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d123      	bne.n	800a0e0 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a098:	197c      	adds	r4, r7, r5
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	21ff      	movs	r1, #255	; 0xff
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f005 fc5f 	bl	800f964 <VL53L0X_WrByte>
 800a0a6:	0003      	movs	r3, r0
 800a0a8:	7023      	strb	r3, [r4, #0]
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a0aa:	231a      	movs	r3, #26
 800a0ac:	18fa      	adds	r2, r7, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2184      	movs	r1, #132	; 0x84
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f005 fd3a 	bl	800fb2c <VL53L0X_RdWord>
 800a0b8:	0003      	movs	r3, r0
 800a0ba:	0019      	movs	r1, r3
 800a0bc:	197b      	adds	r3, r7, r5
 800a0be:	197a      	adds	r2, r7, r5
 800a0c0:	7812      	ldrb	r2, [r2, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	21ff      	movs	r1, #255	; 0xff
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f005 fc49 	bl	800f964 <VL53L0X_WrByte>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	0019      	movs	r1, r3
 800a0d6:	197b      	adds	r3, r7, r5
 800a0d8:	197a      	adds	r2, r7, r5
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a0e0:	236f      	movs	r3, #111	; 0x6f
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <VL53L0X_StaticInit+0x1b4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a0ec:	231a      	movs	r3, #26
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	011b      	lsls	r3, r3, #4
 800a0f4:	0019      	movs	r1, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	22d4      	movs	r2, #212	; 0xd4
 800a0fa:	5099      	str	r1, [r3, r2]
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a0fc:	226f      	movs	r2, #111	; 0x6f
 800a0fe:	18bb      	adds	r3, r7, r2
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	b25b      	sxtb	r3, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <VL53L0X_StaticInit+0x1d4>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a108:	18bc      	adds	r4, r7, r2
 800a10a:	231c      	movs	r3, #28
 800a10c:	18fa      	adds	r2, r7, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0011      	movs	r1, r2
 800a112:	0018      	movs	r0, r3
 800a114:	f000 f8f5 	bl	800a302 <VL53L0X_GetDeviceParameters>
 800a118:	0003      	movs	r3, r0
 800a11a:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE) {
 800a11c:	256f      	movs	r5, #111	; 0x6f
 800a11e:	197b      	adds	r3, r7, r5
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b25b      	sxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d114      	bne.n	800a152 <VL53L0X_StaticInit+0x20a>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a128:	197c      	adds	r4, r7, r5
 800a12a:	2619      	movs	r6, #25
 800a12c:	19ba      	adds	r2, r7, r6
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	0011      	movs	r1, r2
 800a132:	0018      	movs	r0, r3
 800a134:	f000 f9e4 	bl	800a500 <VL53L0X_GetFractionEnable>
 800a138:	0003      	movs	r3, r0
 800a13a:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE)
 800a13c:	197b      	adds	r3, r7, r5
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	b25b      	sxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <VL53L0X_StaticInit+0x20a>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a146:	19bb      	adds	r3, r7, r6
 800a148:	7819      	ldrb	r1, [r3, #0]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	2332      	movs	r3, #50	; 0x32
 800a14e:	33ff      	adds	r3, #255	; 0xff
 800a150:	54d1      	strb	r1, [r2, r3]

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a152:	236f      	movs	r3, #111	; 0x6f
 800a154:	18fb      	adds	r3, r7, r3
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d108      	bne.n	800a170 <VL53L0X_StaticInit+0x228>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	221c      	movs	r2, #28
 800a162:	18ba      	adds	r2, r7, r2
 800a164:	3310      	adds	r3, #16
 800a166:	0011      	movs	r1, r2
 800a168:	2240      	movs	r2, #64	; 0x40
 800a16a:	0018      	movs	r0, r3
 800a16c:	f007 f8ec 	bl	8011348 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a170:	256f      	movs	r5, #111	; 0x6f
 800a172:	197b      	adds	r3, r7, r5
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	b25b      	sxtb	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d114      	bne.n	800a1a6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_RdByte(Dev,
 800a17c:	197c      	adds	r4, r7, r5
 800a17e:	2619      	movs	r6, #25
 800a180:	19ba      	adds	r2, r7, r6
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2101      	movs	r1, #1
 800a186:	0018      	movs	r0, r3
 800a188:	f005 fc9b 	bl	800fac2 <VL53L0X_RdByte>
 800a18c:	0003      	movs	r3, r0
 800a18e:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a190:	197b      	adds	r3, r7, r5
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	b25b      	sxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d105      	bne.n	800a1a6 <VL53L0X_StaticInit+0x25e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a19a:	19bb      	adds	r3, r7, r6
 800a19c:	7819      	ldrb	r1, [r3, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	2398      	movs	r3, #152	; 0x98
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	54d1      	strb	r1, [r2, r3]

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a1a6:	226f      	movs	r2, #111	; 0x6f
 800a1a8:	18bb      	adds	r3, r7, r2
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b25b      	sxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d108      	bne.n	800a1c4 <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a1b2:	18bc      	adds	r4, r7, r2
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f000 fa38 	bl	800a630 <VL53L0X_SetSequenceStepEnable>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a1c4:	226f      	movs	r2, #111	; 0x6f
 800a1c6:	18bb      	adds	r3, r7, r2
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	b25b      	sxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d108      	bne.n	800a1e2 <VL53L0X_StaticInit+0x29a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a1d0:	18bc      	adds	r4, r7, r2
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2102      	movs	r1, #2
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f000 fa29 	bl	800a630 <VL53L0X_SetSequenceStepEnable>
 800a1de:	0003      	movs	r3, r0
 800a1e0:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a1e2:	236f      	movs	r3, #111	; 0x6f
 800a1e4:	18fb      	adds	r3, r7, r3
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b25b      	sxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <VL53L0X_StaticInit+0x2b0>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	2399      	movs	r3, #153	; 0x99
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	2103      	movs	r1, #3
 800a1f6:	54d1      	strb	r1, [r2, r3]



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a1f8:	226f      	movs	r2, #111	; 0x6f
 800a1fa:	18bb      	adds	r3, r7, r2
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b25b      	sxtb	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <VL53L0X_StaticInit+0x2d0>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a204:	18bc      	adds	r4, r7, r2
 800a206:	2313      	movs	r3, #19
 800a208:	18fa      	adds	r2, r7, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2100      	movs	r1, #0
 800a20e:	0018      	movs	r0, r3
 800a210:	f000 f9f0 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800a214:	0003      	movs	r3, r0
 800a216:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a218:	236f      	movs	r3, #111	; 0x6f
 800a21a:	18fb      	adds	r3, r7, r3
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	b25b      	sxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d105      	bne.n	800a230 <VL53L0X_StaticInit+0x2e8>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a224:	2313      	movs	r3, #19
 800a226:	18fb      	adds	r3, r7, r3
 800a228:	7819      	ldrb	r1, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	22e8      	movs	r2, #232	; 0xe8
 800a22e:	5499      	strb	r1, [r3, r2]
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a230:	226f      	movs	r2, #111	; 0x6f
 800a232:	18bb      	adds	r3, r7, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b25b      	sxtb	r3, r3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d109      	bne.n	800a250 <VL53L0X_StaticInit+0x308>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a23c:	18bc      	adds	r4, r7, r2
 800a23e:	2313      	movs	r3, #19
 800a240:	18fa      	adds	r2, r7, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2101      	movs	r1, #1
 800a246:	0018      	movs	r0, r3
 800a248:	f000 f9d4 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800a24c:	0003      	movs	r3, r0
 800a24e:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a250:	236f      	movs	r3, #111	; 0x6f
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	b25b      	sxtb	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <VL53L0X_StaticInit+0x320>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a25c:	2313      	movs	r3, #19
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	7819      	ldrb	r1, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	22e0      	movs	r2, #224	; 0xe0
 800a266:	5499      	strb	r1, [r3, r2]
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a268:	226f      	movs	r2, #111	; 0x6f
 800a26a:	18bb      	adds	r3, r7, r2
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <VL53L0X_StaticInit+0x340>
		Status = get_sequence_step_timeout(
 800a274:	18bc      	adds	r4, r7, r2
 800a276:	230c      	movs	r3, #12
 800a278:	18fa      	adds	r2, r7, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2103      	movs	r1, #3
 800a27e:	0018      	movs	r0, r3
 800a280:	f003 fba8 	bl	800d9d4 <get_sequence_step_timeout>
 800a284:	0003      	movs	r3, r0
 800a286:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a288:	236f      	movs	r3, #111	; 0x6f
 800a28a:	18fb      	adds	r3, r7, r3
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	d103      	bne.n	800a29c <VL53L0X_StaticInit+0x354>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	21e4      	movs	r1, #228	; 0xe4
 800a29a:	505a      	str	r2, [r3, r1]
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a29c:	226f      	movs	r2, #111	; 0x6f
 800a29e:	18bb      	adds	r3, r7, r2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	b25b      	sxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d109      	bne.n	800a2bc <VL53L0X_StaticInit+0x374>
		Status = get_sequence_step_timeout(
 800a2a8:	18bc      	adds	r4, r7, r2
 800a2aa:	230c      	movs	r3, #12
 800a2ac:	18fa      	adds	r2, r7, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2104      	movs	r1, #4
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	f003 fb8e 	bl	800d9d4 <get_sequence_step_timeout>
 800a2b8:	0003      	movs	r3, r0
 800a2ba:	7023      	strb	r3, [r4, #0]
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2bc:	236f      	movs	r3, #111	; 0x6f
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b25b      	sxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d103      	bne.n	800a2d0 <VL53L0X_StaticInit+0x388>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	21dc      	movs	r1, #220	; 0xdc
 800a2ce:	505a      	str	r2, [r3, r1]
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2d0:	236f      	movs	r3, #111	; 0x6f
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	b25b      	sxtb	r3, r3
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b01d      	add	sp, #116	; 0x74
 800a2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e0:	2000000c 	.word	0x2000000c

0800a2e4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800a2ec:	210f      	movs	r1, #15
 800a2ee:	187b      	adds	r3, r7, r1
 800a2f0:	229d      	movs	r2, #157	; 0x9d
 800a2f2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800a2f4:	187b      	adds	r3, r7, r1
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	b25b      	sxtb	r3, r3
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b004      	add	sp, #16
 800a300:	bd80      	pop	{r7, pc}

0800a302 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800a302:	b5b0      	push	{r4, r5, r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a30c:	250f      	movs	r5, #15
 800a30e:	197b      	adds	r3, r7, r5
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	197c      	adds	r4, r7, r5
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0011      	movs	r1, r2
 800a31c:	0018      	movs	r0, r3
 800a31e:	f000 f8db 	bl	800a4d8 <VL53L0X_GetDeviceMode>
 800a322:	0003      	movs	r3, r0
 800a324:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800a326:	0029      	movs	r1, r5
 800a328:	187b      	adds	r3, r7, r1
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b25b      	sxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <VL53L0X_GetDeviceParameters+0x46>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	001a      	movs	r2, r3
 800a338:	187c      	adds	r4, r7, r1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	0011      	movs	r1, r2
 800a33e:	0018      	movs	r0, r3
 800a340:	f000 fb2d 	bl	800a99e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800a344:	0003      	movs	r3, r0
 800a346:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800a348:	230f      	movs	r3, #15
 800a34a:	18fb      	adds	r3, r7, r3
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <VL53L0X_GetDeviceParameters+0x58>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2200      	movs	r2, #0
 800a358:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800a35a:	210f      	movs	r1, #15
 800a35c:	187b      	adds	r3, r7, r1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b25b      	sxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	3310      	adds	r3, #16
 800a36a:	001a      	movs	r2, r3
 800a36c:	187c      	adds	r4, r7, r1
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	0011      	movs	r1, r2
 800a372:	0018      	movs	r0, r3
 800a374:	f000 fb70 	bl	800aa58 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800a378:	0003      	movs	r3, r0
 800a37a:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800a37c:	210f      	movs	r1, #15
 800a37e:	187b      	adds	r3, r7, r1
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b25b      	sxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <VL53L0X_GetDeviceParameters+0x9c>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	3314      	adds	r3, #20
 800a38c:	001a      	movs	r2, r3
 800a38e:	187c      	adds	r4, r7, r1
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0011      	movs	r1, r2
 800a394:	0018      	movs	r0, r3
 800a396:	f7ff fc23 	bl	8009be0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800a39a:	0003      	movs	r3, r0
 800a39c:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800a39e:	230f      	movs	r3, #15
 800a3a0:	18fb      	adds	r3, r7, r3
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d13b      	bne.n	800a422 <VL53L0X_GetDeviceParameters+0x120>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]
 800a3ae:	e031      	b.n	800a414 <VL53L0X_GetDeviceParameters+0x112>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a3b0:	240f      	movs	r4, #15
 800a3b2:	193b      	adds	r3, r7, r4
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b25b      	sxtb	r3, r3
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d12f      	bne.n	800a41c <VL53L0X_GetDeviceParameters+0x11a>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	18d3      	adds	r3, r2, r3
 800a3ca:	1d1a      	adds	r2, r3, #4
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f000 fcde 	bl	800ad90 <VL53L0X_GetLimitCheckValue>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	0019      	movs	r1, r3
 800a3d8:	193b      	adds	r3, r7, r4
 800a3da:	193a      	adds	r2, r7, r4
 800a3dc:	7812      	ldrb	r2, [r2, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	701a      	strb	r2, [r3, #0]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a3e2:	193b      	adds	r3, r7, r4
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	b25b      	sxtb	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d119      	bne.n	800a420 <VL53L0X_GetDeviceParameters+0x11e>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	b299      	uxth	r1, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	3318      	adds	r3, #24
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	18d2      	adds	r2, r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f000 fc24 	bl	800ac48 <VL53L0X_GetLimitCheckEnable>
 800a400:	0003      	movs	r3, r0
 800a402:	0019      	movs	r1, r3
 800a404:	193b      	adds	r3, r7, r4
 800a406:	193a      	adds	r2, r7, r4
 800a408:	7812      	ldrb	r2, [r2, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	3301      	adds	r3, #1
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b05      	cmp	r3, #5
 800a418:	ddca      	ble.n	800a3b0 <VL53L0X_GetDeviceParameters+0xae>
 800a41a:	e002      	b.n	800a422 <VL53L0X_GetDeviceParameters+0x120>
				break;
 800a41c:	46c0      	nop			; (mov r8, r8)
 800a41e:	e000      	b.n	800a422 <VL53L0X_GetDeviceParameters+0x120>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800a420:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a422:	210f      	movs	r1, #15
 800a424:	187b      	adds	r3, r7, r1
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	b25b      	sxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10a      	bne.n	800a444 <VL53L0X_GetDeviceParameters+0x142>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	333c      	adds	r3, #60	; 0x3c
 800a432:	001a      	movs	r2, r3
 800a434:	187c      	adds	r4, r7, r1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	0011      	movs	r1, r2
 800a43a:	0018      	movs	r0, r3
 800a43c:	f000 fd58 	bl	800aef0 <VL53L0X_GetWrapAroundCheckEnable>
 800a440:	0003      	movs	r3, r0
 800a442:	7023      	strb	r3, [r4, #0]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800a444:	210f      	movs	r1, #15
 800a446:	187b      	adds	r3, r7, r1
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <VL53L0X_GetDeviceParameters+0x162>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1d1a      	adds	r2, r3, #4
 800a454:	187c      	adds	r4, r7, r1
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	0011      	movs	r1, r2
 800a45a:	0018      	movs	r0, r3
 800a45c:	f000 f88f 	bl	800a57e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800a460:	0003      	movs	r3, r0
 800a462:	7023      	strb	r3, [r4, #0]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a464:	230f      	movs	r3, #15
 800a466:	18fb      	adds	r3, r7, r3
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b25b      	sxtb	r3, r3
}
 800a46c:	0018      	movs	r0, r3
 800a46e:	46bd      	mov	sp, r7
 800a470:	b004      	add	sp, #16
 800a472:	bdb0      	pop	{r4, r5, r7, pc}

0800a474 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	000a      	movs	r2, r1
 800a47e:	1cfb      	adds	r3, r7, #3
 800a480:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a482:	230f      	movs	r3, #15
 800a484:	18fb      	adds	r3, r7, r3
 800a486:	2200      	movs	r2, #0
 800a488:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800a48a:	1cfb      	adds	r3, r7, #3
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2215      	movs	r2, #21
 800a490:	429a      	cmp	r2, r3
 800a492:	4192      	sbcs	r2, r2
 800a494:	4252      	negs	r2, r2
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	2a00      	cmp	r2, #0
 800a49a:	d10e      	bne.n	800a4ba <VL53L0X_SetDeviceMode+0x46>
 800a49c:	2201      	movs	r2, #1
 800a49e:	409a      	lsls	r2, r3
 800a4a0:	0013      	movs	r3, r2
 800a4a2:	4a0c      	ldr	r2, [pc, #48]	; (800a4d4 <VL53L0X_SetDeviceMode+0x60>)
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	1e5a      	subs	r2, r3, #1
 800a4a8:	4193      	sbcs	r3, r2
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <VL53L0X_SetDeviceMode+0x46>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	1cfa      	adds	r2, r7, #3
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	741a      	strb	r2, [r3, #16]
		break;
 800a4b8:	e003      	b.n	800a4c2 <VL53L0X_SetDeviceMode+0x4e>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a4ba:	230f      	movs	r3, #15
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	22f8      	movs	r2, #248	; 0xf8
 800a4c0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4c2:	230f      	movs	r3, #15
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b25b      	sxtb	r3, r3
}
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b004      	add	sp, #16
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	0030000b 	.word	0x0030000b

0800a4d8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4e2:	210f      	movs	r1, #15
 800a4e4:	187b      	adds	r3, r7, r1
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	7c1a      	ldrb	r2, [r3, #16]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	b25b      	sxtb	r3, r3
}
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	b004      	add	sp, #16
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800a500:	b5b0      	push	{r4, r5, r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a50a:	250f      	movs	r5, #15
 800a50c:	197b      	adds	r3, r7, r5
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800a512:	197c      	adds	r4, r7, r5
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2109      	movs	r1, #9
 800a51a:	0018      	movs	r0, r3
 800a51c:	f005 fad1 	bl	800fac2 <VL53L0X_RdByte>
 800a520:	0003      	movs	r3, r0
 800a522:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800a524:	197b      	adds	r3, r7, r5
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <VL53L0X_GetFractionEnable+0x3c>
		*pEnabled = (*pEnabled & 1);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2201      	movs	r2, #1
 800a534:	4013      	ands	r3, r2
 800a536:	b2da      	uxtb	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800a53c:	230f      	movs	r3, #15
 800a53e:	18fb      	adds	r3, r7, r3
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
}
 800a544:	0018      	movs	r0, r3
 800a546:	46bd      	mov	sp, r7
 800a548:	b004      	add	sp, #16
 800a54a:	bdb0      	pop	{r4, r5, r7, pc}

0800a54c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a54c:	b5b0      	push	{r4, r5, r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a556:	250f      	movs	r5, #15
 800a558:	197b      	adds	r3, r7, r5
 800a55a:	2200      	movs	r2, #0
 800a55c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a55e:	197c      	adds	r4, r7, r5
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	0011      	movs	r1, r2
 800a566:	0018      	movs	r0, r3
 800a568:	f003 ffcc 	bl	800e504 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a56c:	0003      	movs	r3, r0
 800a56e:	7023      	strb	r3, [r4, #0]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a570:	197b      	adds	r3, r7, r5
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b25b      	sxtb	r3, r3
}
 800a576:	0018      	movs	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	b004      	add	sp, #16
 800a57c:	bdb0      	pop	{r4, r5, r7, pc}

0800a57e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a57e:	b5b0      	push	{r4, r5, r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a588:	250f      	movs	r5, #15
 800a58a:	197b      	adds	r3, r7, r5
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800a590:	197c      	adds	r4, r7, r5
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	0011      	movs	r1, r2
 800a598:	0018      	movs	r0, r3
 800a59a:	f004 f8bf 	bl	800e71c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	7023      	strb	r3, [r4, #0]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800a5a2:	197b      	adds	r3, r7, r5
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b25b      	sxtb	r3, r3
}
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	b004      	add	sp, #16
 800a5ae:	bdb0      	pop	{r4, r5, r7, pc}

0800a5b0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a5b0:	b5b0      	push	{r4, r5, r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	0008      	movs	r0, r1
 800a5ba:	0011      	movs	r1, r2
 800a5bc:	1cfb      	adds	r3, r7, #3
 800a5be:	1c02      	adds	r2, r0, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	1cbb      	adds	r3, r7, #2
 800a5c4:	1c0a      	adds	r2, r1, #0
 800a5c6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5c8:	250f      	movs	r5, #15
 800a5ca:	197b      	adds	r3, r7, r5
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800a5d0:	197c      	adds	r4, r7, r5
 800a5d2:	1cbb      	adds	r3, r7, #2
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	1cfb      	adds	r3, r7, #3
 800a5d8:	7819      	ldrb	r1, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f003 fc4b 	bl	800de78 <VL53L0X_set_vcsel_pulse_period>
 800a5e2:	0003      	movs	r3, r0
 800a5e4:	7023      	strb	r3, [r4, #0]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a5e6:	197b      	adds	r3, r7, r5
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	b25b      	sxtb	r3, r3
}
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	b004      	add	sp, #16
 800a5f2:	bdb0      	pop	{r4, r5, r7, pc}

0800a5f4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a5f4:	b5b0      	push	{r4, r5, r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	607a      	str	r2, [r7, #4]
 800a5fe:	200b      	movs	r0, #11
 800a600:	183b      	adds	r3, r7, r0
 800a602:	1c0a      	adds	r2, r1, #0
 800a604:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a606:	2517      	movs	r5, #23
 800a608:	197b      	adds	r3, r7, r5
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800a60e:	197c      	adds	r4, r7, r5
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	183b      	adds	r3, r7, r0
 800a614:	7819      	ldrb	r1, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	0018      	movs	r0, r3
 800a61a:	f003 ff2a 	bl	800e472 <VL53L0X_get_vcsel_pulse_period>
 800a61e:	0003      	movs	r3, r0
 800a620:	7023      	strb	r3, [r4, #0]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800a622:	197b      	adds	r3, r7, r5
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	b25b      	sxtb	r3, r3
}
 800a628:	0018      	movs	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b006      	add	sp, #24
 800a62e:	bdb0      	pop	{r4, r5, r7, pc}

0800a630 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	0008      	movs	r0, r1
 800a63a:	0011      	movs	r1, r2
 800a63c:	1cfb      	adds	r3, r7, #3
 800a63e:	1c02      	adds	r2, r0, #0
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	1cbb      	adds	r3, r7, #2
 800a644:	1c0a      	adds	r2, r1, #0
 800a646:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a648:	2517      	movs	r5, #23
 800a64a:	197b      	adds	r3, r7, r5
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800a650:	210f      	movs	r1, #15
 800a652:	187b      	adds	r3, r7, r1
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfigNew = 0;
 800a658:	2316      	movs	r3, #22
 800a65a:	18fb      	adds	r3, r7, r3
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a660:	197c      	adds	r4, r7, r5
 800a662:	000e      	movs	r6, r1
 800a664:	187a      	adds	r2, r7, r1
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2101      	movs	r1, #1
 800a66a:	0018      	movs	r0, r3
 800a66c:	f005 fa29 	bl	800fac2 <VL53L0X_RdByte>
 800a670:	0003      	movs	r3, r0
 800a672:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a674:	2316      	movs	r3, #22
 800a676:	18fb      	adds	r3, r7, r3
 800a678:	19ba      	adds	r2, r7, r6
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a67e:	197b      	adds	r3, r7, r5
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	b25b      	sxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d000      	beq.n	800a68a <VL53L0X_SetSequenceStepEnable+0x5a>
 800a688:	e070      	b.n	800a76c <VL53L0X_SetSequenceStepEnable+0x13c>
		if (SequenceStepEnabled == 1) {
 800a68a:	1cbb      	adds	r3, r7, #2
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d136      	bne.n	800a700 <VL53L0X_SetSequenceStepEnable+0xd0>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a692:	1cfb      	adds	r3, r7, #3
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b04      	cmp	r3, #4
 800a698:	d82d      	bhi.n	800a6f6 <VL53L0X_SetSequenceStepEnable+0xc6>
 800a69a:	009a      	lsls	r2, r3, #2
 800a69c:	4b52      	ldr	r3, [pc, #328]	; (800a7e8 <VL53L0X_SetSequenceStepEnable+0x1b8>)
 800a69e:	18d3      	adds	r3, r2, r3
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a6a4:	2216      	movs	r2, #22
 800a6a6:	18bb      	adds	r3, r7, r2
 800a6a8:	18ba      	adds	r2, r7, r2
 800a6aa:	7812      	ldrb	r2, [r2, #0]
 800a6ac:	2110      	movs	r1, #16
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	701a      	strb	r2, [r3, #0]
				break;
 800a6b2:	e05c      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a6b4:	2216      	movs	r2, #22
 800a6b6:	18bb      	adds	r3, r7, r2
 800a6b8:	18ba      	adds	r2, r7, r2
 800a6ba:	7812      	ldrb	r2, [r2, #0]
 800a6bc:	2128      	movs	r1, #40	; 0x28
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	701a      	strb	r2, [r3, #0]
				break;
 800a6c2:	e054      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a6c4:	2216      	movs	r2, #22
 800a6c6:	18bb      	adds	r3, r7, r2
 800a6c8:	18ba      	adds	r2, r7, r2
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	2104      	movs	r1, #4
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	701a      	strb	r2, [r3, #0]
				break;
 800a6d2:	e04c      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a6d4:	2216      	movs	r2, #22
 800a6d6:	18bb      	adds	r3, r7, r2
 800a6d8:	18ba      	adds	r2, r7, r2
 800a6da:	7812      	ldrb	r2, [r2, #0]
 800a6dc:	2140      	movs	r1, #64	; 0x40
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	701a      	strb	r2, [r3, #0]
				break;
 800a6e2:	e044      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a6e4:	2216      	movs	r2, #22
 800a6e6:	18bb      	adds	r3, r7, r2
 800a6e8:	18ba      	adds	r2, r7, r2
 800a6ea:	7812      	ldrb	r2, [r2, #0]
 800a6ec:	2180      	movs	r1, #128	; 0x80
 800a6ee:	4249      	negs	r1, r1
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	701a      	strb	r2, [r3, #0]
				break;
 800a6f4:	e03b      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6f6:	2317      	movs	r3, #23
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	22fc      	movs	r2, #252	; 0xfc
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	e036      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a700:	1cfb      	adds	r3, r7, #3
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b04      	cmp	r3, #4
 800a706:	d82c      	bhi.n	800a762 <VL53L0X_SetSequenceStepEnable+0x132>
 800a708:	009a      	lsls	r2, r3, #2
 800a70a:	4b38      	ldr	r3, [pc, #224]	; (800a7ec <VL53L0X_SetSequenceStepEnable+0x1bc>)
 800a70c:	18d3      	adds	r3, r2, r3
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	469f      	mov	pc, r3
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a712:	2216      	movs	r2, #22
 800a714:	18bb      	adds	r3, r7, r2
 800a716:	18ba      	adds	r2, r7, r2
 800a718:	7812      	ldrb	r2, [r2, #0]
 800a71a:	2110      	movs	r1, #16
 800a71c:	438a      	bics	r2, r1
 800a71e:	701a      	strb	r2, [r3, #0]
				break;
 800a720:	e025      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a722:	2216      	movs	r2, #22
 800a724:	18bb      	adds	r3, r7, r2
 800a726:	18ba      	adds	r2, r7, r2
 800a728:	7812      	ldrb	r2, [r2, #0]
 800a72a:	2128      	movs	r1, #40	; 0x28
 800a72c:	438a      	bics	r2, r1
 800a72e:	701a      	strb	r2, [r3, #0]
				break;
 800a730:	e01d      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a732:	2216      	movs	r2, #22
 800a734:	18bb      	adds	r3, r7, r2
 800a736:	18ba      	adds	r2, r7, r2
 800a738:	7812      	ldrb	r2, [r2, #0]
 800a73a:	2104      	movs	r1, #4
 800a73c:	438a      	bics	r2, r1
 800a73e:	701a      	strb	r2, [r3, #0]
				break;
 800a740:	e015      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a742:	2216      	movs	r2, #22
 800a744:	18bb      	adds	r3, r7, r2
 800a746:	18ba      	adds	r2, r7, r2
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	2140      	movs	r1, #64	; 0x40
 800a74c:	438a      	bics	r2, r1
 800a74e:	701a      	strb	r2, [r3, #0]
				break;
 800a750:	e00d      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a752:	2216      	movs	r2, #22
 800a754:	18bb      	adds	r3, r7, r2
 800a756:	18ba      	adds	r2, r7, r2
 800a758:	7812      	ldrb	r2, [r2, #0]
 800a75a:	217f      	movs	r1, #127	; 0x7f
 800a75c:	400a      	ands	r2, r1
 800a75e:	701a      	strb	r2, [r3, #0]
				break;
 800a760:	e005      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a762:	2317      	movs	r3, #23
 800a764:	18fb      	adds	r3, r7, r3
 800a766:	22fc      	movs	r2, #252	; 0xfc
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	e000      	b.n	800a76e <VL53L0X_SetSequenceStepEnable+0x13e>
			}
		}
 800a76c:	46c0      	nop			; (mov r8, r8)
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a76e:	230f      	movs	r3, #15
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2116      	movs	r1, #22
 800a776:	187a      	adds	r2, r7, r1
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d02b      	beq.n	800a7d6 <VL53L0X_SetSequenceStepEnable+0x1a6>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a77e:	2217      	movs	r2, #23
 800a780:	18bb      	adds	r3, r7, r2
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	b25b      	sxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d109      	bne.n	800a79e <VL53L0X_SetSequenceStepEnable+0x16e>
			Status = VL53L0X_WrByte(Dev,
 800a78a:	18bc      	adds	r4, r7, r2
 800a78c:	187b      	adds	r3, r7, r1
 800a78e:	781a      	ldrb	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2101      	movs	r1, #1
 800a794:	0018      	movs	r0, r3
 800a796:	f005 f8e5 	bl	800f964 <VL53L0X_WrByte>
 800a79a:	0003      	movs	r3, r0
 800a79c:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a79e:	2317      	movs	r3, #23
 800a7a0:	18fb      	adds	r3, r7, r3
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <VL53L0X_SetSequenceStepEnable+0x188>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	2316      	movs	r3, #22
 800a7ae:	18f9      	adds	r1, r7, r3
 800a7b0:	2398      	movs	r3, #152	; 0x98
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	7809      	ldrb	r1, [r1, #0]
 800a7b6:	54d1      	strb	r1, [r2, r3]


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a7b8:	2317      	movs	r3, #23
 800a7ba:	18fb      	adds	r3, r7, r3
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	b25b      	sxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d108      	bne.n	800a7d6 <VL53L0X_SetSequenceStepEnable+0x1a6>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	0011      	movs	r1, r2
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f7ff febb 	bl	800a54c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a7d6:	2317      	movs	r3, #23
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	b25b      	sxtb	r3, r3
}
 800a7de:	0018      	movs	r0, r3
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	b007      	add	sp, #28
 800a7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	08014dfc 	.word	0x08014dfc
 800a7ec:	08014e10 	.word	0x08014e10

0800a7f0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	0008      	movs	r0, r1
 800a7fa:	0011      	movs	r1, r2
 800a7fc:	607b      	str	r3, [r7, #4]
 800a7fe:	240b      	movs	r4, #11
 800a800:	193b      	adds	r3, r7, r4
 800a802:	1c02      	adds	r2, r0, #0
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	230a      	movs	r3, #10
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	1c0a      	adds	r2, r1, #0
 800a80c:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a80e:	2317      	movs	r3, #23
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
	*pSequenceStepEnabled = 0;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800a81c:	193b      	adds	r3, r7, r4
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b04      	cmp	r3, #4
 800a822:	d838      	bhi.n	800a896 <sequence_step_enabled+0xa6>
 800a824:	009a      	lsls	r2, r3, #2
 800a826:	4b22      	ldr	r3, [pc, #136]	; (800a8b0 <sequence_step_enabled+0xc0>)
 800a828:	18d3      	adds	r3, r2, r3
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	469f      	mov	pc, r3
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800a82e:	230a      	movs	r3, #10
 800a830:	18fb      	adds	r3, r7, r3
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	111b      	asrs	r3, r3, #4
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2201      	movs	r2, #1
 800a83a:	4013      	ands	r3, r2
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	701a      	strb	r2, [r3, #0]
		break;
 800a842:	e02c      	b.n	800a89e <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800a844:	230a      	movs	r3, #10
 800a846:	18fb      	adds	r3, r7, r3
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	10db      	asrs	r3, r3, #3
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2201      	movs	r2, #1
 800a850:	4013      	ands	r3, r2
 800a852:	b2da      	uxtb	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	701a      	strb	r2, [r3, #0]
		break;
 800a858:	e021      	b.n	800a89e <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800a85a:	230a      	movs	r3, #10
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	109b      	asrs	r3, r3, #2
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2201      	movs	r2, #1
 800a866:	4013      	ands	r3, r2
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	701a      	strb	r2, [r3, #0]
		break;
 800a86e:	e016      	b.n	800a89e <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800a870:	230a      	movs	r3, #10
 800a872:	18fb      	adds	r3, r7, r3
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	119b      	asrs	r3, r3, #6
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2201      	movs	r2, #1
 800a87c:	4013      	ands	r3, r2
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	701a      	strb	r2, [r3, #0]
		break;
 800a884:	e00b      	b.n	800a89e <sequence_step_enabled+0xae>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800a886:	230a      	movs	r3, #10
 800a888:	18fb      	adds	r3, r7, r3
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	09db      	lsrs	r3, r3, #7
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	701a      	strb	r2, [r3, #0]
		break;
 800a894:	e003      	b.n	800a89e <sequence_step_enabled+0xae>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a896:	2317      	movs	r3, #23
 800a898:	18fb      	adds	r3, r7, r3
 800a89a:	22fc      	movs	r2, #252	; 0xfc
 800a89c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a89e:	2317      	movs	r3, #23
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	b25b      	sxtb	r3, r3
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b007      	add	sp, #28
 800a8ac:	bd90      	pop	{r4, r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	08014e24 	.word	0x08014e24

0800a8b4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8be:	250f      	movs	r5, #15
 800a8c0:	197b      	adds	r3, r7, r5
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800a8c6:	260e      	movs	r6, #14
 800a8c8:	19bb      	adds	r3, r7, r6
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a8ce:	197c      	adds	r4, r7, r5
 800a8d0:	19ba      	adds	r2, r7, r6
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f005 f8f3 	bl	800fac2 <VL53L0X_RdByte>
 800a8dc:	0003      	movs	r3, r0
 800a8de:	7023      	strb	r3, [r4, #0]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800a8e0:	197b      	adds	r3, r7, r5
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	b25b      	sxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <VL53L0X_GetSequenceStepEnables+0x4a>
		Status = sequence_step_enabled(Dev,
 800a8ea:	19bb      	adds	r3, r7, r6
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	197c      	adds	r4, r7, r5
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	f7ff ff7b 	bl	800a7f0 <sequence_step_enabled>
 800a8fa:	0003      	movs	r3, r0
 800a8fc:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a8fe:	210f      	movs	r1, #15
 800a900:	187b      	adds	r3, r7, r1
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b25b      	sxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10b      	bne.n	800a922 <VL53L0X_GetSequenceStepEnables+0x6e>
		Status = sequence_step_enabled(Dev,
 800a90a:	230e      	movs	r3, #14
 800a90c:	18fb      	adds	r3, r7, r3
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	3302      	adds	r3, #2
 800a914:	187c      	adds	r4, r7, r1
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	2101      	movs	r1, #1
 800a91a:	f7ff ff69 	bl	800a7f0 <sequence_step_enabled>
 800a91e:	0003      	movs	r3, r0
 800a920:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a922:	210f      	movs	r1, #15
 800a924:	187b      	adds	r3, r7, r1
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <VL53L0X_GetSequenceStepEnables+0x92>
		Status = sequence_step_enabled(Dev,
 800a92e:	230e      	movs	r3, #14
 800a930:	18fb      	adds	r3, r7, r3
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	187c      	adds	r4, r7, r1
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	2102      	movs	r1, #2
 800a93e:	f7ff ff57 	bl	800a7f0 <sequence_step_enabled>
 800a942:	0003      	movs	r3, r0
 800a944:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a946:	210f      	movs	r1, #15
 800a948:	187b      	adds	r3, r7, r1
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	b25b      	sxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <VL53L0X_GetSequenceStepEnables+0xb6>
		Status = sequence_step_enabled(Dev,
 800a952:	230e      	movs	r3, #14
 800a954:	18fb      	adds	r3, r7, r3
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	3303      	adds	r3, #3
 800a95c:	187c      	adds	r4, r7, r1
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	2103      	movs	r1, #3
 800a962:	f7ff ff45 	bl	800a7f0 <sequence_step_enabled>
 800a966:	0003      	movs	r3, r0
 800a968:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a96a:	210f      	movs	r1, #15
 800a96c:	187b      	adds	r3, r7, r1
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	b25b      	sxtb	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <VL53L0X_GetSequenceStepEnables+0xda>
		Status = sequence_step_enabled(Dev,
 800a976:	230e      	movs	r3, #14
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	3304      	adds	r3, #4
 800a980:	187c      	adds	r4, r7, r1
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	2104      	movs	r1, #4
 800a986:	f7ff ff33 	bl	800a7f0 <sequence_step_enabled>
 800a98a:	0003      	movs	r3, r0
 800a98c:	7023      	strb	r3, [r4, #0]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a98e:	230f      	movs	r3, #15
 800a990:	18fb      	adds	r3, r7, r3
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b25b      	sxtb	r3, r3
}
 800a996:	0018      	movs	r0, r3
 800a998:	46bd      	mov	sp, r7
 800a99a:	b005      	add	sp, #20
 800a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a99e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800a99e:	b5b0      	push	{r4, r5, r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9a8:	250f      	movs	r5, #15
 800a9aa:	197b      	adds	r3, r7, r5
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800a9b0:	197c      	adds	r4, r7, r5
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	18fa      	adds	r2, r7, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	21f8      	movs	r1, #248	; 0xf8
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f005 f8b6 	bl	800fb2c <VL53L0X_RdWord>
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	7023      	strb	r3, [r4, #0]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9c4:	197b      	adds	r3, r7, r5
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	b25b      	sxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d109      	bne.n	800a9e2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x44>
		Status = VL53L0X_RdDWord(Dev,
 800a9ce:	197c      	adds	r4, r7, r5
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	18fa      	adds	r2, r7, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2104      	movs	r1, #4
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f005 f8e9 	bl	800fbb0 <VL53L0X_RdDWord>
 800a9de:	0003      	movs	r3, r0
 800a9e0:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a9e2:	230f      	movs	r3, #15
 800a9e4:	18fb      	adds	r3, r7, r3
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d113      	bne.n	800aa16 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x78>
		if (osc_calibrate_val != 0) {
 800a9ee:	210c      	movs	r1, #12
 800a9f0:	187b      	adds	r3, r7, r1
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x70>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	187b      	adds	r3, r7, r1
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	0019      	movs	r1, r3
 800aa00:	0010      	movs	r0, r2
 800aa02:	f7f5 fb9d 	bl	8000140 <__udivsi3>
 800aa06:	0003      	movs	r3, r0
 800aa08:	001a      	movs	r2, r3
			*pInterMeasurementPeriodMilliSeconds =
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa16:	230f      	movs	r3, #15
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b25b      	sxtb	r3, r3
}
 800aa1e:	0018      	movs	r0, r3
 800aa20:	46bd      	mov	sp, r7
 800aa22:	b004      	add	sp, #16
 800aa24:	bdb0      	pop	{r4, r5, r7, pc}

0800aa26 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa30:	210f      	movs	r1, #15
 800aa32:	187b      	adds	r3, r7, r1
 800aa34:	2200      	movs	r2, #0
 800aa36:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800aa38:	200e      	movs	r0, #14
 800aa3a:	183b      	adds	r3, r7, r0
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7f12      	ldrb	r2, [r2, #28]
 800aa40:	701a      	strb	r2, [r3, #0]
	*pXTalkCompensationEnable = Temp8;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	183a      	adds	r2, r7, r0
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	b25b      	sxtb	r3, r3
}
 800aa50:	0018      	movs	r0, r3
 800aa52:	46bd      	mov	sp, r7
 800aa54:	b004      	add	sp, #16
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800aa58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa62:	2517      	movs	r5, #23
 800aa64:	197b      	adds	r3, r7, r5
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800aa6a:	197c      	adds	r4, r7, r5
 800aa6c:	260e      	movs	r6, #14
 800aa6e:	19ba      	adds	r2, r7, r6
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2120      	movs	r1, #32
 800aa74:	0018      	movs	r0, r3
 800aa76:	f005 f859 	bl	800fb2c <VL53L0X_RdWord>
 800aa7a:	0003      	movs	r3, r0
 800aa7c:	7023      	strb	r3, [r4, #0]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800aa7e:	197b      	adds	r3, r7, r5
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b25b      	sxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11b      	bne.n	800aac0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
		if (Value == 0) {
 800aa88:	19bb      	adds	r3, r7, r6
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4c>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	771a      	strb	r2, [r3, #28]
 800aaa2:	e00d      	b.n	800aac0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x68>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800aaa4:	230e      	movs	r3, #14
 800aaa6:	18fb      	adds	r3, r7, r3
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aac0:	2317      	movs	r3, #23
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b25b      	sxtb	r3, r3
}
 800aac8:	0018      	movs	r0, r3
 800aaca:	46bd      	mov	sp, r7
 800aacc:	b007      	add	sp, #28
 800aace:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aad0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800aad0:	b590      	push	{r4, r7, lr}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	0008      	movs	r0, r1
 800aada:	0011      	movs	r1, r2
 800aadc:	1cbb      	adds	r3, r7, #2
 800aade:	1c02      	adds	r2, r0, #0
 800aae0:	801a      	strh	r2, [r3, #0]
 800aae2:	1c7b      	adds	r3, r7, #1
 800aae4:	1c0a      	adds	r2, r1, #0
 800aae6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae8:	2117      	movs	r1, #23
 800aaea:	187b      	adds	r3, r7, r1
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t TempFix1616 = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800aaf4:	230f      	movs	r3, #15
 800aaf6:	18fb      	adds	r3, r7, r3
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
	uint8_t LimitCheckDisable = 0;
 800aafc:	230e      	movs	r3, #14
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ab04:	1cbb      	adds	r3, r7, #2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	2b05      	cmp	r3, #5
 800ab0a:	d903      	bls.n	800ab14 <VL53L0X_SetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	22fc      	movs	r2, #252	; 0xfc
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	e074      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>
	} else {
		if (LimitCheckEnable == 0) {
 800ab14:	1c7b      	adds	r3, r7, #1
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <VL53L0X_SetLimitCheckEnable+0x62>
			TempFix1616 = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800ab20:	230f      	movs	r3, #15
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	2200      	movs	r2, #0
 800ab26:	701a      	strb	r2, [r3, #0]
			LimitCheckDisable = 1;
 800ab28:	230e      	movs	r3, #14
 800ab2a:	18fb      	adds	r3, r7, r3
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	e010      	b.n	800ab54 <VL53L0X_SetLimitCheckEnable+0x84>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ab32:	1cbb      	adds	r3, r7, #2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	330c      	adds	r3, #12
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	18d3      	adds	r3, r2, r3
 800ab3e:	3304      	adds	r3, #4
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800ab44:	230e      	movs	r3, #14
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800ab4c:	230f      	movs	r3, #15
 800ab4e:	18fb      	adds	r3, r7, r3
 800ab50:	2201      	movs	r2, #1
 800ab52:	701a      	strb	r2, [r3, #0]
		}

		switch (LimitCheckId) {
 800ab54:	1cbb      	adds	r3, r7, #2
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	2b05      	cmp	r3, #5
 800ab5a:	d84c      	bhi.n	800abf6 <VL53L0X_SetLimitCheckEnable+0x126>
 800ab5c:	009a      	lsls	r2, r3, #2
 800ab5e:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <VL53L0X_SetLimitCheckEnable+0x174>)
 800ab60:	18d3      	adds	r3, r2, r3
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	220f      	movs	r2, #15
 800ab6a:	18ba      	adds	r2, r7, r2
 800ab6c:	2128      	movs	r1, #40	; 0x28
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800ab72:	e044      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	2317      	movs	r3, #23
 800ab7c:	18fc      	adds	r4, r7, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2144      	movs	r1, #68	; 0x44
 800ab82:	0018      	movs	r0, r3
 800ab84:	f004 ff1e 	bl	800f9c4 <VL53L0X_WrWord>
 800ab88:	0003      	movs	r3, r0
 800ab8a:	7023      	strb	r3, [r4, #0]

			break;
 800ab8c:	e037      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	220f      	movs	r2, #15
 800ab92:	18ba      	adds	r2, r7, r2
 800ab94:	212a      	movs	r1, #42	; 0x2a
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800ab9a:	e030      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	220f      	movs	r2, #15
 800aba0:	18ba      	adds	r2, r7, r2
 800aba2:	212b      	movs	r1, #43	; 0x2b
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800aba8:	e029      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800abaa:	210d      	movs	r1, #13
 800abac:	187a      	adds	r2, r7, r1
 800abae:	230e      	movs	r3, #14
 800abb0:	18fb      	adds	r3, r7, r3
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	18db      	adds	r3, r3, r3
 800abb6:	7013      	strb	r3, [r2, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800abb8:	2317      	movs	r3, #23
 800abba:	18fc      	adds	r4, r7, r3
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	22fe      	movs	r2, #254	; 0xfe
 800abc4:	2160      	movs	r1, #96	; 0x60
 800abc6:	f004 ff35 	bl	800fa34 <VL53L0X_UpdateByte>
 800abca:	0003      	movs	r3, r0
 800abcc:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800abce:	e016      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800abd0:	210d      	movs	r1, #13
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	220e      	movs	r2, #14
 800abd6:	18ba      	adds	r2, r7, r2
 800abd8:	7812      	ldrb	r2, [r2, #0]
 800abda:	0112      	lsls	r2, r2, #4
 800abdc:	701a      	strb	r2, [r3, #0]
			Status = VL53L0X_UpdateByte(Dev,
 800abde:	2317      	movs	r3, #23
 800abe0:	18fc      	adds	r4, r7, r3
 800abe2:	187b      	adds	r3, r7, r1
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	22ef      	movs	r2, #239	; 0xef
 800abea:	2160      	movs	r1, #96	; 0x60
 800abec:	f004 ff22 	bl	800fa34 <VL53L0X_UpdateByte>
 800abf0:	0003      	movs	r3, r0
 800abf2:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800abf4:	e003      	b.n	800abfe <VL53L0X_SetLimitCheckEnable+0x12e>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abf6:	2317      	movs	r3, #23
 800abf8:	18fb      	adds	r3, r7, r3
 800abfa:	22fc      	movs	r2, #252	; 0xfc
 800abfc:	701a      	strb	r2, [r3, #0]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800abfe:	2317      	movs	r3, #23
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d114      	bne.n	800ac34 <VL53L0X_SetLimitCheckEnable+0x164>
		if (LimitCheckEnable == 0) {
 800ac0a:	1c7b      	adds	r3, r7, #1
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d108      	bne.n	800ac24 <VL53L0X_SetLimitCheckEnable+0x154>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac12:	1cbb      	adds	r3, r7, #2
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	2128      	movs	r1, #40	; 0x28
 800ac1a:	18d3      	adds	r3, r2, r3
 800ac1c:	185b      	adds	r3, r3, r1
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
 800ac22:	e007      	b.n	800ac34 <VL53L0X_SetLimitCheckEnable+0x164>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac24:	1cbb      	adds	r3, r7, #2
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	2128      	movs	r1, #40	; 0x28
 800ac2c:	18d3      	adds	r3, r2, r3
 800ac2e:	185b      	adds	r3, r3, r1
 800ac30:	2201      	movs	r2, #1
 800ac32:	701a      	strb	r2, [r3, #0]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac34:	2317      	movs	r3, #23
 800ac36:	18fb      	adds	r3, r7, r3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25b      	sxtb	r3, r3
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b007      	add	sp, #28
 800ac42:	bd90      	pop	{r4, r7, pc}
 800ac44:	08014e38 	.word	0x08014e38

0800ac48 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800ac48:	b590      	push	{r4, r7, lr}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	607a      	str	r2, [r7, #4]
 800ac52:	200a      	movs	r0, #10
 800ac54:	183b      	adds	r3, r7, r0
 800ac56:	1c0a      	adds	r2, r1, #0
 800ac58:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac5a:	2117      	movs	r1, #23
 800ac5c:	187b      	adds	r3, r7, r1
 800ac5e:	2200      	movs	r2, #0
 800ac60:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800ac62:	183b      	adds	r3, r7, r0
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	d906      	bls.n	800ac78 <VL53L0X_GetLimitCheckEnable+0x30>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac6a:	187b      	adds	r3, r7, r1
 800ac6c:	22fc      	movs	r2, #252	; 0xfc
 800ac6e:	701a      	strb	r2, [r3, #0]
		*pLimitCheckEnable = 0;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e00e      	b.n	800ac96 <VL53L0X_GetLimitCheckEnable+0x4e>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800ac78:	230a      	movs	r3, #10
 800ac7a:	18fb      	adds	r3, r7, r3
 800ac7c:	881a      	ldrh	r2, [r3, #0]
 800ac7e:	2416      	movs	r4, #22
 800ac80:	193b      	adds	r3, r7, r4
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	2028      	movs	r0, #40	; 0x28
 800ac86:	188a      	adds	r2, r1, r2
 800ac88:	1812      	adds	r2, r2, r0
 800ac8a:	7812      	ldrb	r2, [r2, #0]
 800ac8c:	701a      	strb	r2, [r3, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	193a      	adds	r2, r7, r4
 800ac92:	7812      	ldrb	r2, [r2, #0]
 800ac94:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac96:	2317      	movs	r3, #23
 800ac98:	18fb      	adds	r3, r7, r3
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	b25b      	sxtb	r3, r3
}
 800ac9e:	0018      	movs	r0, r3
 800aca0:	46bd      	mov	sp, r7
 800aca2:	b007      	add	sp, #28
 800aca4:	bd90      	pop	{r4, r7, pc}
	...

0800aca8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800aca8:	b5b0      	push	{r4, r5, r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	240a      	movs	r4, #10
 800acb4:	193b      	adds	r3, r7, r4
 800acb6:	1c0a      	adds	r2, r1, #0
 800acb8:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acba:	2317      	movs	r3, #23
 800acbc:	18fb      	adds	r3, r7, r3
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800acc2:	193b      	adds	r3, r7, r4
 800acc4:	881a      	ldrh	r2, [r3, #0]
 800acc6:	2516      	movs	r5, #22
 800acc8:	197b      	adds	r3, r7, r5
 800acca:	68f9      	ldr	r1, [r7, #12]
 800accc:	2028      	movs	r0, #40	; 0x28
 800acce:	188a      	adds	r2, r1, r2
 800acd0:	1812      	adds	r2, r2, r0
 800acd2:	7812      	ldrb	r2, [r2, #0]
 800acd4:	701a      	strb	r2, [r3, #0]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800acd6:	197b      	adds	r3, r7, r5
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <VL53L0X_SetLimitCheckValue+0x4a>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800acde:	193b      	adds	r3, r7, r4
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	330c      	adds	r3, #12
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	18d3      	adds	r3, r2, r3
 800acea:	3304      	adds	r3, #4
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e043      	b.n	800ad7a <VL53L0X_SetLimitCheckValue+0xd2>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800acf2:	230a      	movs	r3, #10
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	2b05      	cmp	r3, #5
 800acfa:	d82a      	bhi.n	800ad52 <VL53L0X_SetLimitCheckValue+0xaa>
 800acfc:	009a      	lsls	r2, r3, #2
 800acfe:	4b23      	ldr	r3, [pc, #140]	; (800ad8c <VL53L0X_SetLimitCheckValue+0xe4>)
 800ad00:	18d3      	adds	r3, r2, r3
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	469f      	mov	pc, r3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800ad0c:	e025      	b.n	800ad5a <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	2317      	movs	r3, #23
 800ad16:	18fc      	adds	r4, r7, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2144      	movs	r1, #68	; 0x44
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f004 fe51 	bl	800f9c4 <VL53L0X_WrWord>
 800ad22:	0003      	movs	r3, r0
 800ad24:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800ad26:	e018      	b.n	800ad5a <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800ad2e:	e014      	b.n	800ad5a <VL53L0X_SetLimitCheckValue+0xb2>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800ad36:	e010      	b.n	800ad5a <VL53L0X_SetLimitCheckValue+0xb2>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	2317      	movs	r3, #23
 800ad40:	18fc      	adds	r4, r7, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2164      	movs	r1, #100	; 0x64
 800ad46:	0018      	movs	r0, r3
 800ad48:	f004 fe3c 	bl	800f9c4 <VL53L0X_WrWord>
 800ad4c:	0003      	movs	r3, r0
 800ad4e:	7023      	strb	r3, [r4, #0]
					LimitCheckValue));

			break;
 800ad50:	e003      	b.n	800ad5a <VL53L0X_SetLimitCheckValue+0xb2>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad52:	2317      	movs	r3, #23
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	22fc      	movs	r2, #252	; 0xfc
 800ad58:	701a      	strb	r2, [r3, #0]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad5a:	2317      	movs	r3, #23
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b25b      	sxtb	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d109      	bne.n	800ad7a <VL53L0X_SetLimitCheckValue+0xd2>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ad66:	230a      	movs	r3, #10
 800ad68:	18fb      	adds	r3, r7, r3
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	18d3      	adds	r3, r2, r3
 800ad74:	3304      	adds	r3, #4
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	601a      	str	r2, [r3, #0]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad7a:	2317      	movs	r3, #23
 800ad7c:	18fb      	adds	r3, r7, r3
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b25b      	sxtb	r3, r3
}
 800ad82:	0018      	movs	r0, r3
 800ad84:	46bd      	mov	sp, r7
 800ad86:	b006      	add	sp, #24
 800ad88:	bdb0      	pop	{r4, r5, r7, pc}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	08014e50 	.word	0x08014e50

0800ad90 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad92:	b089      	sub	sp, #36	; 0x24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	607a      	str	r2, [r7, #4]
 800ad9a:	200a      	movs	r0, #10
 800ad9c:	183b      	adds	r3, r7, r0
 800ad9e:	1c0a      	adds	r2, r1, #0
 800ada0:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ada2:	231f      	movs	r3, #31
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	2200      	movs	r2, #0
 800ada8:	701a      	strb	r2, [r3, #0]
	uint8_t EnableZeroValue = 0;
 800adaa:	231e      	movs	r3, #30
 800adac:	18fb      	adds	r3, r7, r3
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800adb2:	183b      	adds	r3, r7, r0
 800adb4:	881b      	ldrh	r3, [r3, #0]
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	d84e      	bhi.n	800ae58 <VL53L0X_GetLimitCheckValue+0xc8>
 800adba:	009a      	lsls	r2, r3, #2
 800adbc:	4b4b      	ldr	r3, [pc, #300]	; (800aeec <VL53L0X_GetLimitCheckValue+0x15c>)
 800adbe:	18d3      	adds	r3, r2, r3
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	469f      	mov	pc, r3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800adca:	231e      	movs	r3, #30
 800adcc:	18fb      	adds	r3, r7, r3
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
		break;
 800add2:	e045      	b.n	800ae60 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800add4:	251f      	movs	r5, #31
 800add6:	197c      	adds	r4, r7, r5
 800add8:	2616      	movs	r6, #22
 800adda:	19ba      	adds	r2, r7, r6
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2144      	movs	r1, #68	; 0x44
 800ade0:	0018      	movs	r0, r3
 800ade2:	f004 fea3 	bl	800fb2c <VL53L0X_RdWord>
 800ade6:	0003      	movs	r3, r0
 800ade8:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800adea:	197b      	adds	r3, r7, r5
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	b25b      	sxtb	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d103      	bne.n	800adfc <VL53L0X_GetLimitCheckValue+0x6c>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800adf4:	19bb      	adds	r3, r7, r6
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	025b      	lsls	r3, r3, #9
 800adfa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800adfc:	231e      	movs	r3, #30
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	2201      	movs	r2, #1
 800ae02:	701a      	strb	r2, [r3, #0]
		break;
 800ae04:	e02c      	b.n	800ae60 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800ae0c:	231e      	movs	r3, #30
 800ae0e:	18fb      	adds	r3, r7, r3
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
		break;
 800ae14:	e024      	b.n	800ae60 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800ae1c:	231e      	movs	r3, #30
 800ae1e:	18fb      	adds	r3, r7, r3
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
		break;
 800ae24:	e01c      	b.n	800ae60 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800ae26:	251f      	movs	r5, #31
 800ae28:	197c      	adds	r4, r7, r5
 800ae2a:	2616      	movs	r6, #22
 800ae2c:	19ba      	adds	r2, r7, r6
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2164      	movs	r1, #100	; 0x64
 800ae32:	0018      	movs	r0, r3
 800ae34:	f004 fe7a 	bl	800fb2c <VL53L0X_RdWord>
 800ae38:	0003      	movs	r3, r0
 800ae3a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800ae3c:	197b      	adds	r3, r7, r5
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b25b      	sxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <VL53L0X_GetLimitCheckValue+0xbe>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800ae46:	19bb      	adds	r3, r7, r6
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	025b      	lsls	r3, r3, #9
 800ae4c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800ae4e:	231e      	movs	r3, #30
 800ae50:	18fb      	adds	r3, r7, r3
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
		break;
 800ae56:	e003      	b.n	800ae60 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae58:	231f      	movs	r3, #31
 800ae5a:	18fb      	adds	r3, r7, r3
 800ae5c:	22fc      	movs	r2, #252	; 0xfc
 800ae5e:	701a      	strb	r2, [r3, #0]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae60:	231f      	movs	r3, #31
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d136      	bne.n	800aeda <VL53L0X_GetLimitCheckValue+0x14a>

		if (EnableZeroValue == 1) {
 800ae6c:	231e      	movs	r3, #30
 800ae6e:	18fb      	adds	r3, r7, r3
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d12e      	bne.n	800aed4 <VL53L0X_GetLimitCheckValue+0x144>

			if (TempFix1616 == 0) {
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d115      	bne.n	800aea8 <VL53L0X_GetLimitCheckValue+0x118>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800ae7c:	210a      	movs	r1, #10
 800ae7e:	187b      	adds	r3, r7, r1
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	330c      	adds	r3, #12
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	18d3      	adds	r3, r2, r3
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800ae96:	187b      	adds	r3, r7, r1
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	2128      	movs	r1, #40	; 0x28
 800ae9e:	18d3      	adds	r3, r2, r3
 800aea0:	185b      	adds	r3, r3, r1
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	e018      	b.n	800aeda <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800aeae:	210a      	movs	r1, #10
 800aeb0:	187b      	adds	r3, r7, r1
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	330c      	adds	r3, #12
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	18d3      	adds	r3, r2, r3
 800aebc:	3304      	adds	r3, #4
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	601a      	str	r2, [r3, #0]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800aec2:	187b      	adds	r3, r7, r1
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	2128      	movs	r1, #40	; 0x28
 800aeca:	18d3      	adds	r3, r2, r3
 800aecc:	185b      	adds	r3, r3, r1
 800aece:	2201      	movs	r2, #1
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	e002      	b.n	800aeda <VL53L0X_GetLimitCheckValue+0x14a>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aeda:	231f      	movs	r3, #31
 800aedc:	18fb      	adds	r3, r7, r3
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	b25b      	sxtb	r3, r3

}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b009      	add	sp, #36	; 0x24
 800aee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeea:	46c0      	nop			; (mov r8, r8)
 800aeec:	08014e68 	.word	0x08014e68

0800aef0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aefa:	250f      	movs	r5, #15
 800aefc:	197b      	adds	r3, r7, r5
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800af02:	197c      	adds	r4, r7, r5
 800af04:	260e      	movs	r6, #14
 800af06:	19ba      	adds	r2, r7, r6
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2101      	movs	r1, #1
 800af0c:	0018      	movs	r0, r3
 800af0e:	f004 fdd8 	bl	800fac2 <VL53L0X_RdByte>
 800af12:	0003      	movs	r3, r0
 800af14:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800af16:	197b      	adds	r3, r7, r5
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b25b      	sxtb	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d111      	bne.n	800af44 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		PALDevDataSet(Dev, SequenceConfig, data);
 800af20:	19bb      	adds	r3, r7, r6
 800af22:	7819      	ldrb	r1, [r3, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	2398      	movs	r3, #152	; 0x98
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	54d1      	strb	r1, [r2, r3]
		if (data & (0x01 << 7))
 800af2c:	19bb      	adds	r3, r7, r6
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	b25b      	sxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	da03      	bge.n	800af3e <VL53L0X_GetWrapAroundCheckEnable+0x4e>
			*pWrapAroundCheckEnable = 0x01;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2201      	movs	r2, #1
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	e002      	b.n	800af44 <VL53L0X_GetWrapAroundCheckEnable+0x54>
		else
			*pWrapAroundCheckEnable = 0x00;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2200      	movs	r2, #0
 800af42:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800af44:	230f      	movs	r3, #15
 800af46:	18fb      	adds	r3, r7, r3
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <VL53L0X_GetWrapAroundCheckEnable+0x6a>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	7819      	ldrb	r1, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	224c      	movs	r2, #76	; 0x4c
 800af58:	5499      	strb	r1, [r3, r2]
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af5a:	230f      	movs	r3, #15
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	b25b      	sxtb	r3, r3
}
 800af62:	0018      	movs	r0, r3
 800af64:	46bd      	mov	sp, r7
 800af66:	b005      	add	sp, #20
 800af68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af6a <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800af6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af6c:	b085      	sub	sp, #20
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af72:	250f      	movs	r5, #15
 800af74:	197b      	adds	r3, r7, r5
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800af7a:	197c      	adds	r4, r7, r5
 800af7c:	260e      	movs	r6, #14
 800af7e:	19ba      	adds	r2, r7, r6
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0011      	movs	r1, r2
 800af84:	0018      	movs	r0, r3
 800af86:	f7ff faa7 	bl	800a4d8 <VL53L0X_GetDeviceMode>
 800af8a:	0003      	movs	r3, r0
 800af8c:	7023      	strb	r3, [r4, #0]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800af8e:	002a      	movs	r2, r5
 800af90:	18bb      	adds	r3, r7, r2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b25b      	sxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <VL53L0X_PerformSingleMeasurement+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800af9a:	19bb      	adds	r3, r7, r6
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_StartMeasurement(Dev);
 800afa2:	18bc      	adds	r4, r7, r2
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	0018      	movs	r0, r3
 800afa8:	f000 f8ca 	bl	800b140 <VL53L0X_StartMeasurement>
 800afac:	0003      	movs	r3, r0
 800afae:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800afb0:	220f      	movs	r2, #15
 800afb2:	18bb      	adds	r3, r7, r2
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b25b      	sxtb	r3, r3
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d106      	bne.n	800afca <VL53L0X_PerformSingleMeasurement+0x60>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800afbc:	18bc      	adds	r4, r7, r2
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	0018      	movs	r0, r3
 800afc2:	f001 fe0e 	bl	800cbe2 <VL53L0X_measurement_poll_for_completion>
 800afc6:	0003      	movs	r3, r0
 800afc8:	7023      	strb	r3, [r4, #0]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800afca:	230f      	movs	r3, #15
 800afcc:	18fb      	adds	r3, r7, r3
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	b25b      	sxtb	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d109      	bne.n	800afea <VL53L0X_PerformSingleMeasurement+0x80>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800afd6:	230e      	movs	r3, #14
 800afd8:	18fb      	adds	r3, r7, r3
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <VL53L0X_PerformSingleMeasurement+0x80>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	2399      	movs	r3, #153	; 0x99
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	2103      	movs	r1, #3
 800afe8:	54d1      	strb	r1, [r2, r3]


	LOG_FUNCTION_END(Status);
	return Status;
 800afea:	230f      	movs	r3, #15
 800afec:	18fb      	adds	r3, r7, r3
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b25b      	sxtb	r3, r3
}
 800aff2:	0018      	movs	r0, r3
 800aff4:	46bd      	mov	sp, r7
 800aff6:	b005      	add	sp, #20
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800affa <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800affa:	b5b0      	push	{r4, r5, r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b006:	2517      	movs	r5, #23
 800b008:	197b      	adds	r3, r7, r5
 800b00a:	2200      	movs	r2, #0
 800b00c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800b00e:	197c      	adds	r4, r7, r5
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	2301      	movs	r3, #1
 800b018:	f001 fd8e 	bl	800cb38 <VL53L0X_perform_ref_calibration>
 800b01c:	0003      	movs	r3, r0
 800b01e:	7023      	strb	r3, [r4, #0]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800b020:	197b      	adds	r3, r7, r5
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	b25b      	sxtb	r3, r3
}
 800b026:	0018      	movs	r0, r3
 800b028:	46bd      	mov	sp, r7
 800b02a:	b006      	add	sp, #24
 800b02c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b030 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	000a      	movs	r2, r1
 800b03a:	1cfb      	adds	r3, r7, #3
 800b03c:	701a      	strb	r2, [r3, #0]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b03e:	2317      	movs	r3, #23
 800b040:	18fb      	adds	r3, r7, r3
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b046:	2016      	movs	r0, #22
 800b048:	183b      	adds	r3, r7, r0
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	21da      	movs	r1, #218	; 0xda
 800b04e:	5c52      	ldrb	r2, [r2, r1]
 800b050:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800b052:	0002      	movs	r2, r0
 800b054:	18bb      	adds	r3, r7, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d007      	beq.n	800b06c <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800b05c:	18bb      	adds	r3, r7, r2
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d003      	beq.n	800b06c <VL53L0X_CheckAndLoadInterruptSettings+0x3c>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800b064:	18bb      	adds	r3, r7, r2
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	2b03      	cmp	r3, #3
 800b06a:	d15e      	bne.n	800b12a <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800b06c:	2317      	movs	r3, #23
 800b06e:	18fc      	adds	r4, r7, r3
 800b070:	230c      	movs	r3, #12
 800b072:	18fb      	adds	r3, r7, r3
 800b074:	2210      	movs	r2, #16
 800b076:	18ba      	adds	r2, r7, r2
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	2101      	movs	r1, #1
 800b07c:	f000 fcca 	bl	800ba14 <VL53L0X_GetInterruptThresholds>
 800b080:	0003      	movs	r3, r0
 800b082:	7023      	strb	r3, [r4, #0]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	23ff      	movs	r3, #255	; 0xff
 800b088:	041b      	lsls	r3, r3, #16
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d804      	bhi.n	800b098 <VL53L0X_CheckAndLoadInterruptSettings+0x68>
			(ThresholdHigh > 255*65536)) &&
 800b08e:	68fa      	ldr	r2, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800b090:	23ff      	movs	r3, #255	; 0xff
 800b092:	041b      	lsls	r3, r3, #16
 800b094:	429a      	cmp	r2, r3
 800b096:	d948      	bls.n	800b12a <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(ThresholdHigh > 255*65536)) &&
 800b098:	2217      	movs	r2, #23
 800b09a:	18bb      	adds	r3, r7, r2
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b25b      	sxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d142      	bne.n	800b12a <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800b0a4:	1cfb      	adds	r3, r7, #3
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d009      	beq.n	800b0c0 <VL53L0X_CheckAndLoadInterruptSettings+0x90>
				Status = VL53L0X_load_tuning_settings(Dev,
 800b0ac:	18bc      	adds	r4, r7, r2
 800b0ae:	4a23      	ldr	r2, [pc, #140]	; (800b13c <VL53L0X_CheckAndLoadInterruptSettings+0x10c>)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	0011      	movs	r1, r2
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f003 fc03 	bl	800e8c0 <VL53L0X_load_tuning_settings>
 800b0ba:	0003      	movs	r3, r0
 800b0bc:	7023      	strb	r3, [r4, #0]
 800b0be:	e034      	b.n	800b12a <VL53L0X_CheckAndLoadInterruptSettings+0xfa>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	21ff      	movs	r1, #255	; 0xff
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f004 fc4c 	bl	800f964 <VL53L0X_WrByte>
 800b0cc:	0003      	movs	r3, r0
 800b0ce:	0019      	movs	r1, r3
 800b0d0:	2417      	movs	r4, #23
 800b0d2:	193b      	adds	r3, r7, r4
 800b0d4:	193a      	adds	r2, r7, r4
 800b0d6:	7812      	ldrb	r2, [r2, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2170      	movs	r1, #112	; 0x70
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f004 fc3e 	bl	800f964 <VL53L0X_WrByte>
 800b0e8:	0003      	movs	r3, r0
 800b0ea:	0019      	movs	r1, r3
 800b0ec:	193b      	adds	r3, r7, r4
 800b0ee:	193a      	adds	r2, r7, r4
 800b0f0:	7812      	ldrb	r2, [r2, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	21ff      	movs	r1, #255	; 0xff
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f004 fc31 	bl	800f964 <VL53L0X_WrByte>
 800b102:	0003      	movs	r3, r0
 800b104:	0019      	movs	r1, r3
 800b106:	193b      	adds	r3, r7, r4
 800b108:	193a      	adds	r2, r7, r4
 800b10a:	7812      	ldrb	r2, [r2, #0]
 800b10c:	430a      	orrs	r2, r1
 800b10e:	701a      	strb	r2, [r3, #0]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	2180      	movs	r1, #128	; 0x80
 800b116:	0018      	movs	r0, r3
 800b118:	f004 fc24 	bl	800f964 <VL53L0X_WrByte>
 800b11c:	0003      	movs	r3, r0
 800b11e:	0019      	movs	r1, r3
 800b120:	193b      	adds	r3, r7, r4
 800b122:	193a      	adds	r2, r7, r4
 800b124:	7812      	ldrb	r2, [r2, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	701a      	strb	r2, [r3, #0]
		}


	}

	return Status;
 800b12a:	2317      	movs	r3, #23
 800b12c:	18fb      	adds	r3, r7, r3
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	b25b      	sxtb	r3, r3

}
 800b132:	0018      	movs	r0, r3
 800b134:	46bd      	mov	sp, r7
 800b136:	b007      	add	sp, #28
 800b138:	bd90      	pop	{r4, r7, pc}
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	20000100 	.word	0x20000100

0800b140 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b148:	2517      	movs	r5, #23
 800b14a:	197b      	adds	r3, r7, r5
 800b14c:	2200      	movs	r2, #0
 800b14e:	701a      	strb	r2, [r3, #0]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800b150:	230f      	movs	r3, #15
 800b152:	18fb      	adds	r3, r7, r3
 800b154:	2201      	movs	r2, #1
 800b156:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800b158:	260e      	movs	r6, #14
 800b15a:	19ba      	adds	r2, r7, r6
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	0011      	movs	r1, r2
 800b160:	0018      	movs	r0, r3
 800b162:	f7ff f9b9 	bl	800a4d8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b166:	197c      	adds	r4, r7, r5
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	2180      	movs	r1, #128	; 0x80
 800b16e:	0018      	movs	r0, r3
 800b170:	f004 fbf8 	bl	800f964 <VL53L0X_WrByte>
 800b174:	0003      	movs	r3, r0
 800b176:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b178:	197c      	adds	r4, r7, r5
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	21ff      	movs	r1, #255	; 0xff
 800b180:	0018      	movs	r0, r3
 800b182:	f004 fbef 	bl	800f964 <VL53L0X_WrByte>
 800b186:	0003      	movs	r3, r0
 800b188:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b18a:	197c      	adds	r4, r7, r5
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	2100      	movs	r1, #0
 800b192:	0018      	movs	r0, r3
 800b194:	f004 fbe6 	bl	800f964 <VL53L0X_WrByte>
 800b198:	0003      	movs	r3, r0
 800b19a:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	239d      	movs	r3, #157	; 0x9d
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	5cd2      	ldrb	r2, [r2, r3]
 800b1a4:	197c      	adds	r4, r7, r5
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2191      	movs	r1, #145	; 0x91
 800b1aa:	0018      	movs	r0, r3
 800b1ac:	f004 fbda 	bl	800f964 <VL53L0X_WrByte>
 800b1b0:	0003      	movs	r3, r0
 800b1b2:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b1b4:	197c      	adds	r4, r7, r5
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f004 fbd1 	bl	800f964 <VL53L0X_WrByte>
 800b1c2:	0003      	movs	r3, r0
 800b1c4:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1c6:	197c      	adds	r4, r7, r5
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	21ff      	movs	r1, #255	; 0xff
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f004 fbc8 	bl	800f964 <VL53L0X_WrByte>
 800b1d4:	0003      	movs	r3, r0
 800b1d6:	7023      	strb	r3, [r4, #0]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b1d8:	197c      	adds	r4, r7, r5
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2180      	movs	r1, #128	; 0x80
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f004 fbbf 	bl	800f964 <VL53L0X_WrByte>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	7023      	strb	r3, [r4, #0]

	switch (DeviceMode) {
 800b1ea:	19bb      	adds	r3, r7, r6
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d100      	bne.n	800b1f4 <VL53L0X_StartMeasurement+0xb4>
 800b1f2:	e073      	b.n	800b2dc <VL53L0X_StartMeasurement+0x19c>
 800b1f4:	dd00      	ble.n	800b1f8 <VL53L0X_StartMeasurement+0xb8>
 800b1f6:	e094      	b.n	800b322 <VL53L0X_StartMeasurement+0x1e2>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <VL53L0X_StartMeasurement+0xc2>
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d04a      	beq.n	800b296 <VL53L0X_StartMeasurement+0x156>
 800b200:	e08f      	b.n	800b322 <VL53L0X_StartMeasurement+0x1e2>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800b202:	2517      	movs	r5, #23
 800b204:	197c      	adds	r4, r7, r5
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	2100      	movs	r1, #0
 800b20c:	0018      	movs	r0, r3
 800b20e:	f004 fba9 	bl	800f964 <VL53L0X_WrByte>
 800b212:	0003      	movs	r3, r0
 800b214:	7023      	strb	r3, [r4, #0]

		Byte = StartStopByte;
 800b216:	230d      	movs	r3, #13
 800b218:	18fb      	adds	r3, r7, r3
 800b21a:	220f      	movs	r2, #15
 800b21c:	18ba      	adds	r2, r7, r2
 800b21e:	7812      	ldrb	r2, [r2, #0]
 800b220:	701a      	strb	r2, [r3, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800b222:	197b      	adds	r3, r7, r5
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d000      	beq.n	800b22e <VL53L0X_StartMeasurement+0xee>
 800b22c:	e07e      	b.n	800b32c <VL53L0X_StartMeasurement+0x1ec>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <VL53L0X_StartMeasurement+0x10e>
					Status = VL53L0X_RdByte(Dev,
 800b238:	2317      	movs	r3, #23
 800b23a:	18fc      	adds	r4, r7, r3
 800b23c:	230d      	movs	r3, #13
 800b23e:	18fa      	adds	r2, r7, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2100      	movs	r1, #0
 800b244:	0018      	movs	r0, r3
 800b246:	f004 fc3c 	bl	800fac2 <VL53L0X_RdByte>
 800b24a:	0003      	movs	r3, r0
 800b24c:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	3301      	adds	r3, #1
 800b252:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800b254:	230d      	movs	r3, #13
 800b256:	18fb      	adds	r3, r7, r3
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	210f      	movs	r1, #15
 800b25c:	187a      	adds	r2, r7, r1
 800b25e:	7812      	ldrb	r2, [r2, #0]
 800b260:	4013      	ands	r3, r2
 800b262:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b264:	187a      	adds	r2, r7, r1
 800b266:	7812      	ldrb	r2, [r2, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d10a      	bne.n	800b282 <VL53L0X_StartMeasurement+0x142>
				&& (Status == VL53L0X_ERROR_NONE)
 800b26c:	2317      	movs	r3, #23
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	b25b      	sxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <VL53L0X_StartMeasurement+0x142>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	23fa      	movs	r3, #250	; 0xfa
 800b27c:	00db      	lsls	r3, r3, #3
 800b27e:	429a      	cmp	r2, r3
 800b280:	d3d7      	bcc.n	800b232 <VL53L0X_StartMeasurement+0xf2>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	23fa      	movs	r3, #250	; 0xfa
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	429a      	cmp	r2, r3
 800b28a:	d34f      	bcc.n	800b32c <VL53L0X_StartMeasurement+0x1ec>
				Status = VL53L0X_ERROR_TIME_OUT;
 800b28c:	2317      	movs	r3, #23
 800b28e:	18fb      	adds	r3, r7, r3
 800b290:	22f9      	movs	r2, #249	; 0xf9
 800b292:	701a      	strb	r2, [r3, #0]

		}

		break;
 800b294:	e04a      	b.n	800b32c <VL53L0X_StartMeasurement+0x1ec>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b296:	2217      	movs	r2, #23
 800b298:	18bb      	adds	r3, r7, r2
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b25b      	sxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d107      	bne.n	800b2b2 <VL53L0X_StartMeasurement+0x172>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b2a2:	18bc      	adds	r4, r7, r2
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f7ff fec1 	bl	800b030 <VL53L0X_CheckAndLoadInterruptSettings>
 800b2ae:	0003      	movs	r3, r0
 800b2b0:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800b2b2:	2517      	movs	r5, #23
 800b2b4:	197c      	adds	r4, r7, r5
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f004 fb51 	bl	800f964 <VL53L0X_WrByte>
 800b2c2:	0003      	movs	r3, r0
 800b2c4:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800b2c6:	197b      	adds	r3, r7, r5
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b25b      	sxtb	r3, r3
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d12f      	bne.n	800b330 <VL53L0X_StartMeasurement+0x1f0>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	2399      	movs	r3, #153	; 0x99
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	2104      	movs	r1, #4
 800b2d8:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800b2da:	e029      	b.n	800b330 <VL53L0X_StartMeasurement+0x1f0>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800b2dc:	2217      	movs	r2, #23
 800b2de:	18bb      	adds	r3, r7, r2
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	b25b      	sxtb	r3, r3
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <VL53L0X_StartMeasurement+0x1b8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800b2e8:	18bc      	adds	r4, r7, r2
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f7ff fe9e 	bl	800b030 <VL53L0X_CheckAndLoadInterruptSettings>
 800b2f4:	0003      	movs	r3, r0
 800b2f6:	7023      	strb	r3, [r4, #0]

		Status = VL53L0X_WrByte(Dev,
 800b2f8:	2517      	movs	r5, #23
 800b2fa:	197c      	adds	r4, r7, r5
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2204      	movs	r2, #4
 800b300:	2100      	movs	r1, #0
 800b302:	0018      	movs	r0, r3
 800b304:	f004 fb2e 	bl	800f964 <VL53L0X_WrByte>
 800b308:	0003      	movs	r3, r0
 800b30a:	7023      	strb	r3, [r4, #0]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800b30c:	197b      	adds	r3, r7, r5
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	b25b      	sxtb	r3, r3
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10e      	bne.n	800b334 <VL53L0X_StartMeasurement+0x1f4>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	2399      	movs	r3, #153	; 0x99
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	2104      	movs	r1, #4
 800b31e:	54d1      	strb	r1, [r2, r3]
		}
		break;
 800b320:	e008      	b.n	800b334 <VL53L0X_StartMeasurement+0x1f4>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b322:	2317      	movs	r3, #23
 800b324:	18fb      	adds	r3, r7, r3
 800b326:	22f8      	movs	r2, #248	; 0xf8
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	e004      	b.n	800b336 <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b32c:	46c0      	nop			; (mov r8, r8)
 800b32e:	e002      	b.n	800b336 <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b330:	46c0      	nop			; (mov r8, r8)
 800b332:	e000      	b.n	800b336 <VL53L0X_StartMeasurement+0x1f6>
		break;
 800b334:	46c0      	nop			; (mov r8, r8)
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800b336:	2317      	movs	r3, #23
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	b25b      	sxtb	r3, r3
}
 800b33e:	0018      	movs	r0, r3
 800b340:	46bd      	mov	sp, r7
 800b342:	b007      	add	sp, #28
 800b344:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b346 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800b346:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b350:	200f      	movs	r0, #15
 800b352:	183b      	adds	r3, r7, r0
 800b354:	2200      	movs	r2, #0
 800b356:	701a      	strb	r2, [r3, #0]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b358:	240e      	movs	r4, #14
 800b35a:	193b      	adds	r3, r7, r4
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	21da      	movs	r1, #218	; 0xda
 800b360:	5c52      	ldrb	r2, [r2, r1]
 800b362:	701a      	strb	r2, [r3, #0]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800b364:	193b      	adds	r3, r7, r4
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b04      	cmp	r3, #4
 800b36a:	d114      	bne.n	800b396 <VL53L0X_GetMeasurementDataReady+0x50>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800b36c:	183c      	adds	r4, r7, r0
 800b36e:	2308      	movs	r3, #8
 800b370:	18fa      	adds	r2, r7, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	0011      	movs	r1, r2
 800b376:	0018      	movs	r0, r3
 800b378:	f000 fbe8 	bl	800bb4c <VL53L0X_GetInterruptMaskStatus>
 800b37c:	0003      	movs	r3, r0
 800b37e:	7023      	strb	r3, [r4, #0]
		if (InterruptMask ==
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b04      	cmp	r3, #4
 800b384:	d103      	bne.n	800b38e <VL53L0X_GetMeasurementDataReady+0x48>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2201      	movs	r2, #1
 800b38a:	701a      	strb	r2, [r3, #0]
 800b38c:	e020      	b.n	800b3d0 <VL53L0X_GetMeasurementDataReady+0x8a>
		else
			*pMeasurementDataReady = 0;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2200      	movs	r2, #0
 800b392:	701a      	strb	r2, [r3, #0]
 800b394:	e01c      	b.n	800b3d0 <VL53L0X_GetMeasurementDataReady+0x8a>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800b396:	250f      	movs	r5, #15
 800b398:	197c      	adds	r4, r7, r5
 800b39a:	260d      	movs	r6, #13
 800b39c:	19ba      	adds	r2, r7, r6
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2114      	movs	r1, #20
 800b3a2:	0018      	movs	r0, r3
 800b3a4:	f004 fb8d 	bl	800fac2 <VL53L0X_RdByte>
 800b3a8:	0003      	movs	r3, r0
 800b3aa:	7023      	strb	r3, [r4, #0]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800b3ac:	197b      	adds	r3, r7, r5
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b25b      	sxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10c      	bne.n	800b3d0 <VL53L0X_GetMeasurementDataReady+0x8a>
			if (SysRangeStatusRegister & 0x01)
 800b3b6:	19bb      	adds	r3, r7, r6
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	001a      	movs	r2, r3
 800b3bc:	2301      	movs	r3, #1
 800b3be:	4013      	ands	r3, r2
 800b3c0:	d003      	beq.n	800b3ca <VL53L0X_GetMeasurementDataReady+0x84>
				*pMeasurementDataReady = 1;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	701a      	strb	r2, [r3, #0]
 800b3c8:	e002      	b.n	800b3d0 <VL53L0X_GetMeasurementDataReady+0x8a>
			else
				*pMeasurementDataReady = 0;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b3d0:	230f      	movs	r3, #15
 800b3d2:	18fb      	adds	r3, r7, r3
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	b25b      	sxtb	r3, r3
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b005      	add	sp, #20
 800b3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3e0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e2:	b097      	sub	sp, #92	; 0x5c
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3ea:	264f      	movs	r6, #79	; 0x4f
 800b3ec:	19bb      	adds	r3, r7, r6
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	701a      	strb	r2, [r3, #0]
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800b3f2:	19bc      	adds	r4, r7, r6
 800b3f4:	2528      	movs	r5, #40	; 0x28
 800b3f6:	197a      	adds	r2, r7, r5
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	2114      	movs	r1, #20
 800b3fe:	f004 fa7b 	bl	800f8f8 <VL53L0X_ReadMulti>
 800b402:	0003      	movs	r3, r0
 800b404:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800b406:	19bb      	adds	r3, r7, r6
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d000      	beq.n	800b412 <VL53L0X_GetRangingMeasurementData+0x32>
 800b410:	e0f0      	b.n	800b5f4 <VL53L0X_GetRangingMeasurementData+0x214>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2200      	movs	r2, #0
 800b416:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800b41e:	0028      	movs	r0, r5
 800b420:	183b      	adds	r3, r7, r0
 800b422:	7a9b      	ldrb	r3, [r3, #10]
 800b424:	b29b      	uxth	r3, r3
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	b299      	uxth	r1, r3
 800b42a:	183b      	adds	r3, r7, r0
 800b42c:	7adb      	ldrb	r3, [r3, #11]
 800b42e:	b29a      	uxth	r2, r3
 800b430:	244c      	movs	r4, #76	; 0x4c
 800b432:	193b      	adds	r3, r7, r4
 800b434:	188a      	adds	r2, r1, r2
 800b436:	801a      	strh	r2, [r3, #0]
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2200      	movs	r2, #0
 800b43c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800b43e:	183b      	adds	r3, r7, r0
 800b440:	799b      	ldrb	r3, [r3, #6]
 800b442:	b29b      	uxth	r3, r3
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	b29a      	uxth	r2, r3
 800b448:	183b      	adds	r3, r7, r0
 800b44a:	79db      	ldrb	r3, [r3, #7]
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	18d3      	adds	r3, r2, r3
 800b450:	b29b      	uxth	r3, r3
 800b452:	025b      	lsls	r3, r3, #9
 800b454:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b45a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800b45c:	183b      	adds	r3, r7, r0
 800b45e:	7a1b      	ldrb	r3, [r3, #8]
 800b460:	b29b      	uxth	r3, r3
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	b299      	uxth	r1, r3
 800b466:	183b      	adds	r3, r7, r0
 800b468:	7a5b      	ldrb	r3, [r3, #9]
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	2542      	movs	r5, #66	; 0x42
 800b46e:	197b      	adds	r3, r7, r5
 800b470:	188a      	adds	r2, r1, r2
 800b472:	801a      	strh	r2, [r3, #0]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800b474:	197b      	adds	r3, r7, r5
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	025b      	lsls	r3, r3, #9
 800b47a:	001a      	movs	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800b480:	183b      	adds	r3, r7, r0
 800b482:	789b      	ldrb	r3, [r3, #2]
 800b484:	b29b      	uxth	r3, r3
 800b486:	021b      	lsls	r3, r3, #8
 800b488:	b299      	uxth	r1, r3
 800b48a:	183b      	adds	r3, r7, r0
 800b48c:	78db      	ldrb	r3, [r3, #3]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	2540      	movs	r5, #64	; 0x40
 800b492:	197b      	adds	r3, r7, r5
 800b494:	188a      	adds	r2, r1, r2
 800b496:	801a      	strh	r2, [r3, #0]
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	197a      	adds	r2, r7, r5
 800b49c:	8812      	ldrh	r2, [r2, #0]
 800b49e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800b4a0:	233f      	movs	r3, #63	; 0x3f
 800b4a2:	18fb      	adds	r3, r7, r3
 800b4a4:	183a      	adds	r2, r7, r0
 800b4a6:	7812      	ldrb	r2, [r2, #0]
 800b4a8:	701a      	strb	r2, [r3, #0]

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800b4aa:	203c      	movs	r0, #60	; 0x3c
 800b4ac:	183b      	adds	r3, r7, r0
 800b4ae:	6879      	ldr	r1, [r7, #4]
 800b4b0:	22a9      	movs	r2, #169	; 0xa9
 800b4b2:	0052      	lsls	r2, r2, #1
 800b4b4:	5a8a      	ldrh	r2, [r1, r2]
 800b4b6:	801a      	strh	r2, [r3, #0]
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800b4b8:	263b      	movs	r6, #59	; 0x3b
 800b4ba:	19bb      	adds	r3, r7, r6
 800b4bc:	6879      	ldr	r1, [r7, #4]
 800b4be:	2232      	movs	r2, #50	; 0x32
 800b4c0:	32ff      	adds	r2, #255	; 0xff
 800b4c2:	5c8a      	ldrb	r2, [r1, r2]
 800b4c4:	701a      	strb	r2, [r3, #0]
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800b4c6:	183b      	adds	r3, r7, r0
 800b4c8:	881a      	ldrh	r2, [r3, #0]
 800b4ca:	23fa      	movs	r3, #250	; 0xfa
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d053      	beq.n	800b57a <VL53L0X_GetRangingMeasurementData+0x19a>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800b4d2:	183b      	adds	r3, r7, r0
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	193a      	adds	r2, r7, r4
 800b4d8:	8812      	ldrh	r2, [r2, #0]
 800b4da:	4353      	muls	r3, r2
 800b4dc:	33f5      	adds	r3, #245	; 0xf5
 800b4de:	33ff      	adds	r3, #255	; 0xff
 800b4e0:	22fa      	movs	r2, #250	; 0xfa
 800b4e2:	0091      	lsls	r1, r2, #2
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f7f4 feb5 	bl	8000254 <__divsi3>
 800b4ea:	0003      	movs	r3, r0
 800b4ec:	001a      	movs	r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800b4ee:	193b      	adds	r3, r7, r4
 800b4f0:	801a      	strh	r2, [r3, #0]

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1a      	ldr	r2, [r3, #32]
 800b4f6:	2138      	movs	r1, #56	; 0x38
 800b4f8:	187b      	adds	r3, r7, r1
 800b4fa:	801a      	strh	r2, [r3, #0]
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800b4fc:	2037      	movs	r0, #55	; 0x37
 800b4fe:	183b      	adds	r3, r7, r0
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7f12      	ldrb	r2, [r2, #28]
 800b504:	701a      	strb	r2, [r3, #0]
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800b506:	183b      	adds	r3, r7, r0
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d035      	beq.n	800b57a <VL53L0X_GetRangingMeasurementData+0x19a>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800b50e:	187b      	adds	r3, r7, r1
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	197a      	adds	r2, r7, r5
 800b514:	8812      	ldrh	r2, [r2, #0]
 800b516:	4353      	muls	r3, r2
 800b518:	121a      	asrs	r2, r3, #8
					<= 0) {
 800b51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d10d      	bne.n	800b53c <VL53L0X_GetRangingMeasurementData+0x15c>
					if (RangeFractionalEnable)
 800b520:	19bb      	adds	r3, r7, r6
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <VL53L0X_GetRangingMeasurementData+0x152>
						XtalkRangeMilliMeter = 8888;
 800b528:	234a      	movs	r3, #74	; 0x4a
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	4a52      	ldr	r2, [pc, #328]	; (800b678 <VL53L0X_GetRangingMeasurementData+0x298>)
 800b52e:	801a      	strh	r2, [r3, #0]
 800b530:	e01d      	b.n	800b56e <VL53L0X_GetRangingMeasurementData+0x18e>
					else
						XtalkRangeMilliMeter = 8888
 800b532:	234a      	movs	r3, #74	; 0x4a
 800b534:	18fb      	adds	r3, r7, r3
 800b536:	4a51      	ldr	r2, [pc, #324]	; (800b67c <VL53L0X_GetRangingMeasurementData+0x29c>)
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e018      	b.n	800b56e <VL53L0X_GetRangingMeasurementData+0x18e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800b53c:	234c      	movs	r3, #76	; 0x4c
 800b53e:	18fb      	adds	r3, r7, r3
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b544:	435a      	muls	r2, r3
 800b546:	0010      	movs	r0, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800b548:	2338      	movs	r3, #56	; 0x38
 800b54a:	18fb      	adds	r3, r7, r3
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	2240      	movs	r2, #64	; 0x40
 800b550:	18ba      	adds	r2, r7, r2
 800b552:	8812      	ldrh	r2, [r2, #0]
 800b554:	4353      	muls	r3, r2
						>> 8));
 800b556:	121b      	asrs	r3, r3, #8
 800b558:	001a      	movs	r2, r3
						- ((XTalkCompensationRateMegaCps
 800b55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b55c:	1a9b      	subs	r3, r3, r2
						/ (SignalRate
 800b55e:	0019      	movs	r1, r3
 800b560:	f7f4 fdee 	bl	8000140 <__udivsi3>
 800b564:	0003      	movs	r3, r0
 800b566:	001a      	movs	r2, r3
					XtalkRangeMilliMeter =
 800b568:	234a      	movs	r3, #74	; 0x4a
 800b56a:	18fb      	adds	r3, r7, r3
 800b56c:	801a      	strh	r2, [r3, #0]
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800b56e:	234c      	movs	r3, #76	; 0x4c
 800b570:	18fb      	adds	r3, r7, r3
 800b572:	224a      	movs	r2, #74	; 0x4a
 800b574:	18ba      	adds	r2, r7, r2
 800b576:	8812      	ldrh	r2, [r2, #0]
 800b578:	801a      	strh	r2, [r3, #0]
			}

		}

		if (RangeFractionalEnable) {
 800b57a:	233b      	movs	r3, #59	; 0x3b
 800b57c:	18fb      	adds	r3, r7, r3
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00e      	beq.n	800b5a2 <VL53L0X_GetRangingMeasurementData+0x1c2>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800b584:	214c      	movs	r1, #76	; 0x4c
 800b586:	187b      	adds	r3, r7, r1
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	089b      	lsrs	r3, r3, #2
 800b58c:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800b592:	187b      	adds	r3, r7, r1
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	019b      	lsls	r3, r3, #6
 800b59a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	75da      	strb	r2, [r3, #23]
 800b5a0:	e007      	b.n	800b5b2 <VL53L0X_GetRangingMeasurementData+0x1d2>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	224c      	movs	r2, #76	; 0x4c
 800b5a6:	18ba      	adds	r2, r7, r2
 800b5a8:	8812      	ldrh	r2, [r2, #0]
 800b5aa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800b5b2:	2340      	movs	r3, #64	; 0x40
 800b5b4:	18fb      	adds	r3, r7, r3
 800b5b6:	881c      	ldrh	r4, [r3, #0]
 800b5b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5ba:	233f      	movs	r3, #63	; 0x3f
 800b5bc:	18fb      	adds	r3, r7, r3
 800b5be:	7819      	ldrb	r1, [r3, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	2536      	movs	r5, #54	; 0x36
 800b5c4:	197b      	adds	r3, r7, r5
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	0023      	movs	r3, r4
 800b5ce:	f003 fed9 	bl	800f384 <VL53L0X_get_pal_range_status>
 800b5d2:	0003      	movs	r3, r0
 800b5d4:	0019      	movs	r1, r3
 800b5d6:	204f      	movs	r0, #79	; 0x4f
 800b5d8:	183b      	adds	r3, r7, r0
 800b5da:	183a      	adds	r2, r7, r0
 800b5dc:	7812      	ldrb	r2, [r2, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	701a      	strb	r2, [r3, #0]
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800b5e2:	183b      	adds	r3, r7, r0
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	b25b      	sxtb	r3, r3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <VL53L0X_GetRangingMeasurementData+0x214>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800b5ec:	197b      	adds	r3, r7, r5
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5f4:	234f      	movs	r3, #79	; 0x4f
 800b5f6:	18fb      	adds	r3, r7, r3
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d132      	bne.n	800b666 <VL53L0X_GetRangingMeasurementData+0x286>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800b600:	210c      	movs	r1, #12
 800b602:	187a      	adds	r2, r7, r1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3350      	adds	r3, #80	; 0x50
 800b608:	cb31      	ldmia	r3!, {r0, r4, r5}
 800b60a:	c231      	stmia	r2!, {r0, r4, r5}
 800b60c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800b60e:	c231      	stmia	r2!, {r0, r4, r5}
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6013      	str	r3, [r2, #0]

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	891a      	ldrh	r2, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800b618:	187b      	adds	r3, r7, r1
 800b61a:	811a      	strh	r2, [r3, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	7dda      	ldrb	r2, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800b620:	187b      	adds	r3, r7, r1
 800b622:	75da      	strb	r2, [r3, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	895a      	ldrh	r2, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800b628:	187b      	adds	r3, r7, r1
 800b62a:	815a      	strh	r2, [r3, #10]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685a      	ldr	r2, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800b630:	187b      	adds	r3, r7, r1
 800b632:	605a      	str	r2, [r3, #4]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	68da      	ldr	r2, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800b638:	187b      	adds	r3, r7, r1
 800b63a:	60da      	str	r2, [r3, #12]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	691a      	ldr	r2, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800b640:	187b      	adds	r3, r7, r1
 800b642:	611a      	str	r2, [r3, #16]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	8a9a      	ldrh	r2, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800b648:	187b      	adds	r3, r7, r1
 800b64a:	829a      	strh	r2, [r3, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	7e1a      	ldrb	r2, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800b650:	187b      	adds	r3, r7, r1
 800b652:	761a      	strb	r2, [r3, #24]

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	187a      	adds	r2, r7, r1
 800b658:	3350      	adds	r3, #80	; 0x50
 800b65a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b65c:	c313      	stmia	r3!, {r0, r1, r4}
 800b65e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b660:	c313      	stmia	r3!, {r0, r1, r4}
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b666:	234f      	movs	r3, #79	; 0x4f
 800b668:	18fb      	adds	r3, r7, r3
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	b25b      	sxtb	r3, r3
}
 800b66e:	0018      	movs	r0, r3
 800b670:	46bd      	mov	sp, r7
 800b672:	b015      	add	sp, #84	; 0x54
 800b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b676:	46c0      	nop			; (mov r8, r8)
 800b678:	000022b8 	.word	0x000022b8
 800b67c:	ffff8ae0 	.word	0xffff8ae0

0800b680 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800b680:	b5b0      	push	{r4, r5, r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b68a:	250f      	movs	r5, #15
 800b68c:	197b      	adds	r3, r7, r5
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800b692:	197c      	adds	r4, r7, r5
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2100      	movs	r1, #0
 800b698:	0018      	movs	r0, r3
 800b69a:	f7fe feeb 	bl	800a474 <VL53L0X_SetDeviceMode>
 800b69e:	0003      	movs	r3, r0
 800b6a0:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800b6a2:	197b      	adds	r3, r7, r5
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <VL53L0X_PerformSingleRangingMeasurement+0x3a>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800b6ac:	197c      	adds	r4, r7, r5
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f7ff fc5a 	bl	800af6a <VL53L0X_PerformSingleMeasurement>
 800b6b6:	0003      	movs	r3, r0
 800b6b8:	7023      	strb	r3, [r4, #0]


	if (Status == VL53L0X_ERROR_NONE)
 800b6ba:	220f      	movs	r2, #15
 800b6bc:	18bb      	adds	r3, r7, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	b25b      	sxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d108      	bne.n	800b6d8 <VL53L0X_PerformSingleRangingMeasurement+0x58>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800b6c6:	18bc      	adds	r4, r7, r2
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0011      	movs	r1, r2
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f7ff fe86 	bl	800b3e0 <VL53L0X_GetRangingMeasurementData>
 800b6d4:	0003      	movs	r3, r0
 800b6d6:	7023      	strb	r3, [r4, #0]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800b6d8:	220f      	movs	r2, #15
 800b6da:	18bb      	adds	r3, r7, r2
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b25b      	sxtb	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d107      	bne.n	800b6f4 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b6e4:	18bc      	adds	r4, r7, r2
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f000 f9d4 	bl	800ba98 <VL53L0X_ClearInterruptMask>
 800b6f0:	0003      	movs	r3, r0
 800b6f2:	7023      	strb	r3, [r4, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800b6f4:	230f      	movs	r3, #15
 800b6f6:	18fb      	adds	r3, r7, r3
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b25b      	sxtb	r3, r3
}
 800b6fc:	0018      	movs	r0, r3
 800b6fe:	46bd      	mov	sp, r7
 800b700:	b004      	add	sp, #16
 800b702:	bdb0      	pop	{r4, r5, r7, pc}

0800b704 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	000c      	movs	r4, r1
 800b70e:	0010      	movs	r0, r2
 800b710:	0019      	movs	r1, r3
 800b712:	1cfb      	adds	r3, r7, #3
 800b714:	1c22      	adds	r2, r4, #0
 800b716:	701a      	strb	r2, [r3, #0]
 800b718:	1cbb      	adds	r3, r7, #2
 800b71a:	1c02      	adds	r2, r0, #0
 800b71c:	701a      	strb	r2, [r3, #0]
 800b71e:	1c7b      	adds	r3, r7, #1
 800b720:	1c0a      	adds	r2, r1, #0
 800b722:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b724:	210f      	movs	r1, #15
 800b726:	187b      	adds	r3, r7, r1
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800b72c:	1cfb      	adds	r3, r7, #3
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <VL53L0X_SetGpioConfig+0x38>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800b734:	187b      	adds	r3, r7, r1
 800b736:	22f6      	movs	r2, #246	; 0xf6
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e160      	b.n	800b9fe <VL53L0X_SetGpioConfig+0x2fa>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800b73c:	1cbb      	adds	r3, r7, #2
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b14      	cmp	r3, #20
 800b742:	d11a      	bne.n	800b77a <VL53L0X_SetGpioConfig+0x76>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b744:	2320      	movs	r3, #32
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <VL53L0X_SetGpioConfig+0x54>
			data = 0x10;
 800b74e:	230e      	movs	r3, #14
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	2210      	movs	r2, #16
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	e003      	b.n	800b760 <VL53L0X_SetGpioConfig+0x5c>
		else
			data = 1;
 800b758:	230e      	movs	r3, #14
 800b75a:	18fb      	adds	r3, r7, r3
 800b75c:	2201      	movs	r2, #1
 800b75e:	701a      	strb	r2, [r3, #0]

		Status = VL53L0X_WrByte(Dev,
 800b760:	230f      	movs	r3, #15
 800b762:	18fc      	adds	r4, r7, r3
 800b764:	230e      	movs	r3, #14
 800b766:	18fb      	adds	r3, r7, r3
 800b768:	781a      	ldrb	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2184      	movs	r1, #132	; 0x84
 800b76e:	0018      	movs	r0, r3
 800b770:	f004 f8f8 	bl	800f964 <VL53L0X_WrByte>
 800b774:	0003      	movs	r3, r0
 800b776:	7023      	strb	r3, [r4, #0]
 800b778:	e141      	b.n	800b9fe <VL53L0X_SetGpioConfig+0x2fa>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800b77a:	1cbb      	adds	r3, r7, #2
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b15      	cmp	r3, #21
 800b780:	d000      	beq.n	800b784 <VL53L0X_SetGpioConfig+0x80>
 800b782:	e0c4      	b.n	800b90e <VL53L0X_SetGpioConfig+0x20a>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	21ff      	movs	r1, #255	; 0xff
 800b78a:	0018      	movs	r0, r3
 800b78c:	f004 f8ea 	bl	800f964 <VL53L0X_WrByte>
 800b790:	0003      	movs	r3, r0
 800b792:	0019      	movs	r1, r3
 800b794:	240f      	movs	r4, #15
 800b796:	193b      	adds	r3, r7, r4
 800b798:	193a      	adds	r2, r7, r4
 800b79a:	7812      	ldrb	r2, [r2, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f004 f8dc 	bl	800f964 <VL53L0X_WrByte>
 800b7ac:	0003      	movs	r3, r0
 800b7ae:	0019      	movs	r1, r3
 800b7b0:	193b      	adds	r3, r7, r4
 800b7b2:	193a      	adds	r2, r7, r4
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	21ff      	movs	r1, #255	; 0xff
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f004 f8cf 	bl	800f964 <VL53L0X_WrByte>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	0019      	movs	r1, r3
 800b7ca:	193b      	adds	r3, r7, r4
 800b7cc:	193a      	adds	r2, r7, r4
 800b7ce:	7812      	ldrb	r2, [r2, #0]
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2180      	movs	r1, #128	; 0x80
 800b7da:	0018      	movs	r0, r3
 800b7dc:	f004 f8c2 	bl	800f964 <VL53L0X_WrByte>
 800b7e0:	0003      	movs	r3, r0
 800b7e2:	0019      	movs	r1, r3
 800b7e4:	193b      	adds	r3, r7, r4
 800b7e6:	193a      	adds	r2, r7, r4
 800b7e8:	7812      	ldrb	r2, [r2, #0]
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	2185      	movs	r1, #133	; 0x85
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f004 f8b5 	bl	800f964 <VL53L0X_WrByte>
 800b7fa:	0003      	movs	r3, r0
 800b7fc:	0019      	movs	r1, r3
 800b7fe:	193b      	adds	r3, r7, r4
 800b800:	193a      	adds	r2, r7, r4
 800b802:	7812      	ldrb	r2, [r2, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2204      	movs	r2, #4
 800b80c:	21ff      	movs	r1, #255	; 0xff
 800b80e:	0018      	movs	r0, r3
 800b810:	f004 f8a8 	bl	800f964 <VL53L0X_WrByte>
 800b814:	0003      	movs	r3, r0
 800b816:	0019      	movs	r1, r3
 800b818:	193b      	adds	r3, r7, r4
 800b81a:	193a      	adds	r2, r7, r4
 800b81c:	7812      	ldrb	r2, [r2, #0]
 800b81e:	430a      	orrs	r2, r1
 800b820:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	21cd      	movs	r1, #205	; 0xcd
 800b828:	0018      	movs	r0, r3
 800b82a:	f004 f89b 	bl	800f964 <VL53L0X_WrByte>
 800b82e:	0003      	movs	r3, r0
 800b830:	0019      	movs	r1, r3
 800b832:	193b      	adds	r3, r7, r4
 800b834:	193a      	adds	r2, r7, r4
 800b836:	7812      	ldrb	r2, [r2, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2211      	movs	r2, #17
 800b840:	21cc      	movs	r1, #204	; 0xcc
 800b842:	0018      	movs	r0, r3
 800b844:	f004 f88e 	bl	800f964 <VL53L0X_WrByte>
 800b848:	0003      	movs	r3, r0
 800b84a:	0019      	movs	r1, r3
 800b84c:	193b      	adds	r3, r7, r4
 800b84e:	193a      	adds	r2, r7, r4
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2207      	movs	r2, #7
 800b85a:	21ff      	movs	r1, #255	; 0xff
 800b85c:	0018      	movs	r0, r3
 800b85e:	f004 f881 	bl	800f964 <VL53L0X_WrByte>
 800b862:	0003      	movs	r3, r0
 800b864:	0019      	movs	r1, r3
 800b866:	193b      	adds	r3, r7, r4
 800b868:	193a      	adds	r2, r7, r4
 800b86a:	7812      	ldrb	r2, [r2, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	21be      	movs	r1, #190	; 0xbe
 800b876:	0018      	movs	r0, r3
 800b878:	f004 f874 	bl	800f964 <VL53L0X_WrByte>
 800b87c:	0003      	movs	r3, r0
 800b87e:	0019      	movs	r1, r3
 800b880:	193b      	adds	r3, r7, r4
 800b882:	193a      	adds	r2, r7, r4
 800b884:	7812      	ldrb	r2, [r2, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2206      	movs	r2, #6
 800b88e:	21ff      	movs	r1, #255	; 0xff
 800b890:	0018      	movs	r0, r3
 800b892:	f004 f867 	bl	800f964 <VL53L0X_WrByte>
 800b896:	0003      	movs	r3, r0
 800b898:	0019      	movs	r1, r3
 800b89a:	193b      	adds	r3, r7, r4
 800b89c:	193a      	adds	r2, r7, r4
 800b89e:	7812      	ldrb	r2, [r2, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2209      	movs	r2, #9
 800b8a8:	21cc      	movs	r1, #204	; 0xcc
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	f004 f85a 	bl	800f964 <VL53L0X_WrByte>
 800b8b0:	0003      	movs	r3, r0
 800b8b2:	0019      	movs	r1, r3
 800b8b4:	193b      	adds	r3, r7, r4
 800b8b6:	193a      	adds	r2, r7, r4
 800b8b8:	7812      	ldrb	r2, [r2, #0]
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	21ff      	movs	r1, #255	; 0xff
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f004 f84d 	bl	800f964 <VL53L0X_WrByte>
 800b8ca:	0003      	movs	r3, r0
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	193b      	adds	r3, r7, r4
 800b8d0:	193a      	adds	r2, r7, r4
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	21ff      	movs	r1, #255	; 0xff
 800b8de:	0018      	movs	r0, r3
 800b8e0:	f004 f840 	bl	800f964 <VL53L0X_WrByte>
 800b8e4:	0003      	movs	r3, r0
 800b8e6:	0019      	movs	r1, r3
 800b8e8:	193b      	adds	r3, r7, r4
 800b8ea:	193a      	adds	r2, r7, r4
 800b8ec:	7812      	ldrb	r2, [r2, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f004 f833 	bl	800f964 <VL53L0X_WrByte>
 800b8fe:	0003      	movs	r3, r0
 800b900:	0019      	movs	r1, r3
 800b902:	193b      	adds	r3, r7, r4
 800b904:	193a      	adds	r2, r7, r4
 800b906:	7812      	ldrb	r2, [r2, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	e077      	b.n	800b9fe <VL53L0X_SetGpioConfig+0x2fa>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800b90e:	230f      	movs	r3, #15
 800b910:	18fb      	adds	r3, r7, r3
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	b25b      	sxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d126      	bne.n	800b968 <VL53L0X_SetGpioConfig+0x264>
			switch (Functionality) {
 800b91a:	1c7b      	adds	r3, r7, #1
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d81d      	bhi.n	800b95e <VL53L0X_SetGpioConfig+0x25a>
 800b922:	009a      	lsls	r2, r3, #2
 800b924:	4b3a      	ldr	r3, [pc, #232]	; (800ba10 <VL53L0X_SetGpioConfig+0x30c>)
 800b926:	18d3      	adds	r3, r2, r3
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	469f      	mov	pc, r3
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800b92c:	230e      	movs	r3, #14
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
				break;
 800b934:	e019      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800b936:	230e      	movs	r3, #14
 800b938:	18fb      	adds	r3, r7, r3
 800b93a:	2201      	movs	r2, #1
 800b93c:	701a      	strb	r2, [r3, #0]
				break;
 800b93e:	e014      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800b940:	230e      	movs	r3, #14
 800b942:	18fb      	adds	r3, r7, r3
 800b944:	2202      	movs	r2, #2
 800b946:	701a      	strb	r2, [r3, #0]
				break;
 800b948:	e00f      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800b94a:	230e      	movs	r3, #14
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	2203      	movs	r2, #3
 800b950:	701a      	strb	r2, [r3, #0]
				break;
 800b952:	e00a      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800b954:	230e      	movs	r3, #14
 800b956:	18fb      	adds	r3, r7, r3
 800b958:	2204      	movs	r2, #4
 800b95a:	701a      	strb	r2, [r3, #0]
				break;
 800b95c:	e005      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
			default:
				Status =
 800b95e:	230f      	movs	r3, #15
 800b960:	18fb      	adds	r3, r7, r3
 800b962:	22f5      	movs	r2, #245	; 0xf5
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e000      	b.n	800b96a <VL53L0X_SetGpioConfig+0x266>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800b968:	46c0      	nop			; (mov r8, r8)

		if (Status == VL53L0X_ERROR_NONE)
 800b96a:	220f      	movs	r2, #15
 800b96c:	18bb      	adds	r3, r7, r2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b25b      	sxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <VL53L0X_SetGpioConfig+0x288>
			Status = VL53L0X_WrByte(Dev,
 800b976:	18bc      	adds	r4, r7, r2
 800b978:	230e      	movs	r3, #14
 800b97a:	18fb      	adds	r3, r7, r3
 800b97c:	781a      	ldrb	r2, [r3, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	210a      	movs	r1, #10
 800b982:	0018      	movs	r0, r3
 800b984:	f003 ffee 	bl	800f964 <VL53L0X_WrByte>
 800b988:	0003      	movs	r3, r0
 800b98a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800b98c:	230f      	movs	r3, #15
 800b98e:	18fb      	adds	r3, r7, r3
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	b25b      	sxtb	r3, r3
 800b994:	2b00      	cmp	r3, #0
 800b996:	d119      	bne.n	800b9cc <VL53L0X_SetGpioConfig+0x2c8>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800b998:	2320      	movs	r3, #32
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d104      	bne.n	800b9ac <VL53L0X_SetGpioConfig+0x2a8>
				data = 0;
 800b9a2:	230e      	movs	r3, #14
 800b9a4:	18fb      	adds	r3, r7, r3
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	e003      	b.n	800b9b4 <VL53L0X_SetGpioConfig+0x2b0>
			else
				data = (uint8_t)(1 << 4);
 800b9ac:	230e      	movs	r3, #14
 800b9ae:	18fb      	adds	r3, r7, r3
 800b9b0:	2210      	movs	r2, #16
 800b9b2:	701a      	strb	r2, [r3, #0]

			Status = VL53L0X_UpdateByte(Dev,
 800b9b4:	230f      	movs	r3, #15
 800b9b6:	18fc      	adds	r4, r7, r3
 800b9b8:	230e      	movs	r3, #14
 800b9ba:	18fb      	adds	r3, r7, r3
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	22ef      	movs	r2, #239	; 0xef
 800b9c2:	2184      	movs	r1, #132	; 0x84
 800b9c4:	f004 f836 	bl	800fa34 <VL53L0X_UpdateByte>
 800b9c8:	0003      	movs	r3, r0
 800b9ca:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800b9cc:	230f      	movs	r3, #15
 800b9ce:	18fb      	adds	r3, r7, r3
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	b25b      	sxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d104      	bne.n	800b9e2 <VL53L0X_SetGpioConfig+0x2de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	1c7a      	adds	r2, r7, #1
 800b9dc:	21da      	movs	r1, #218	; 0xda
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	545a      	strb	r2, [r3, r1]
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800b9e2:	220f      	movs	r2, #15
 800b9e4:	18bb      	adds	r3, r7, r2
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b25b      	sxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <VL53L0X_SetGpioConfig+0x2fa>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b9ee:	18bc      	adds	r4, r7, r2
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	0018      	movs	r0, r3
 800b9f6:	f000 f84f 	bl	800ba98 <VL53L0X_ClearInterruptMask>
 800b9fa:	0003      	movs	r3, r0
 800b9fc:	7023      	strb	r3, [r4, #0]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9fe:	230f      	movs	r3, #15
 800ba00:	18fb      	adds	r3, r7, r3
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	b25b      	sxtb	r3, r3
}
 800ba06:	0018      	movs	r0, r3
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	b005      	add	sp, #20
 800ba0c:	bd90      	pop	{r4, r7, pc}
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	08014e80 	.word	0x08014e80

0800ba14 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800ba14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	607a      	str	r2, [r7, #4]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	230b      	movs	r3, #11
 800ba22:	18fb      	adds	r3, r7, r3
 800ba24:	1c0a      	adds	r2, r1, #0
 800ba26:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba28:	2517      	movs	r5, #23
 800ba2a:	197b      	adds	r3, r7, r5
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800ba30:	197c      	adds	r4, r7, r5
 800ba32:	2614      	movs	r6, #20
 800ba34:	19ba      	adds	r2, r7, r6
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	210e      	movs	r1, #14
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f004 f876 	bl	800fb2c <VL53L0X_RdWord>
 800ba40:	0003      	movs	r3, r0
 800ba42:	7023      	strb	r3, [r4, #0]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ba44:	0031      	movs	r1, r6
 800ba46:	187b      	adds	r3, r7, r1
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	045b      	lsls	r3, r3, #17
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	4b11      	ldr	r3, [pc, #68]	; (800ba94 <VL53L0X_GetInterruptThresholds+0x80>)
 800ba50:	401a      	ands	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	601a      	str	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800ba56:	197b      	adds	r3, r7, r5
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	b25b      	sxtb	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d111      	bne.n	800ba84 <VL53L0X_GetInterruptThresholds+0x70>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800ba60:	197c      	adds	r4, r7, r5
 800ba62:	000d      	movs	r5, r1
 800ba64:	187a      	adds	r2, r7, r1
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	210c      	movs	r1, #12
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f004 f85e 	bl	800fb2c <VL53L0X_RdWord>
 800ba70:	0003      	movs	r3, r0
 800ba72:	7023      	strb	r3, [r4, #0]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ba74:	197b      	adds	r3, r7, r5
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	045b      	lsls	r3, r3, #17
 800ba7a:	001a      	movs	r2, r3
 800ba7c:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <VL53L0X_GetInterruptThresholds+0x80>)
 800ba7e:	401a      	ands	r2, r3
		*pThresholdHigh =
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba84:	2317      	movs	r3, #23
 800ba86:	18fb      	adds	r3, r7, r3
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	b25b      	sxtb	r3, r3
}
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	b007      	add	sp, #28
 800ba92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba94:	1ffe0000 	.word	0x1ffe0000

0800ba98 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800ba98:	b5b0      	push	{r4, r5, r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baa2:	230f      	movs	r3, #15
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	2200      	movs	r2, #0
 800baa8:	701a      	strb	r2, [r3, #0]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800baaa:	230e      	movs	r3, #14
 800baac:	18fb      	adds	r3, r7, r3
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
	do {
		Status = VL53L0X_WrByte(Dev,
 800bab2:	250f      	movs	r5, #15
 800bab4:	197c      	adds	r4, r7, r5
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	210b      	movs	r1, #11
 800babc:	0018      	movs	r0, r3
 800babe:	f003 ff51 	bl	800f964 <VL53L0X_WrByte>
 800bac2:	0003      	movs	r3, r0
 800bac4:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	210b      	movs	r1, #11
 800bacc:	0018      	movs	r0, r3
 800bace:	f003 ff49 	bl	800f964 <VL53L0X_WrByte>
 800bad2:	0003      	movs	r3, r0
 800bad4:	0019      	movs	r1, r3
 800bad6:	002c      	movs	r4, r5
 800bad8:	193b      	adds	r3, r7, r4
 800bada:	193a      	adds	r2, r7, r4
 800badc:	7812      	ldrb	r2, [r2, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800bae2:	250d      	movs	r5, #13
 800bae4:	197a      	adds	r2, r7, r5
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2113      	movs	r1, #19
 800baea:	0018      	movs	r0, r3
 800baec:	f003 ffe9 	bl	800fac2 <VL53L0X_RdByte>
 800baf0:	0003      	movs	r3, r0
 800baf2:	0019      	movs	r1, r3
 800baf4:	0020      	movs	r0, r4
 800baf6:	183b      	adds	r3, r7, r0
 800baf8:	183a      	adds	r2, r7, r0
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	701a      	strb	r2, [r3, #0]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800bb00:	210e      	movs	r1, #14
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	187b      	adds	r3, r7, r1
 800bb08:	3201      	adds	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]
	} while (((Byte & 0x07) != 0x00)
 800bb0c:	197b      	adds	r3, r7, r5
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	001a      	movs	r2, r3
 800bb12:	2307      	movs	r3, #7
 800bb14:	4013      	ands	r3, r2
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800bb16:	d008      	beq.n	800bb2a <VL53L0X_ClearInterruptMask+0x92>
			&& (LoopCount < 3)
 800bb18:	187b      	adds	r3, r7, r1
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d804      	bhi.n	800bb2a <VL53L0X_ClearInterruptMask+0x92>
			&& (Status == VL53L0X_ERROR_NONE));
 800bb20:	183b      	adds	r3, r7, r0
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	b25b      	sxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0c3      	beq.n	800bab2 <VL53L0X_ClearInterruptMask+0x1a>


	if (LoopCount >= 3)
 800bb2a:	230e      	movs	r3, #14
 800bb2c:	18fb      	adds	r3, r7, r3
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d903      	bls.n	800bb3c <VL53L0X_ClearInterruptMask+0xa4>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800bb34:	230f      	movs	r3, #15
 800bb36:	18fb      	adds	r3, r7, r3
 800bb38:	22f4      	movs	r2, #244	; 0xf4
 800bb3a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bb3c:	230f      	movs	r3, #15
 800bb3e:	18fb      	adds	r3, r7, r3
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	b25b      	sxtb	r3, r3
}
 800bb44:	0018      	movs	r0, r3
 800bb46:	46bd      	mov	sp, r7
 800bb48:	b004      	add	sp, #16
 800bb4a:	bdb0      	pop	{r4, r5, r7, pc}

0800bb4c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb56:	250f      	movs	r5, #15
 800bb58:	197b      	adds	r3, r7, r5
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	701a      	strb	r2, [r3, #0]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800bb5e:	197c      	adds	r4, r7, r5
 800bb60:	260e      	movs	r6, #14
 800bb62:	19ba      	adds	r2, r7, r6
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2113      	movs	r1, #19
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f003 ffaa 	bl	800fac2 <VL53L0X_RdByte>
 800bb6e:	0003      	movs	r3, r0
 800bb70:	7023      	strb	r3, [r4, #0]
	*pInterruptMaskStatus = Byte & 0x07;
 800bb72:	0031      	movs	r1, r6
 800bb74:	187b      	adds	r3, r7, r1
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	001a      	movs	r2, r3
 800bb7a:	2307      	movs	r3, #7
 800bb7c:	401a      	ands	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800bb82:	187b      	adds	r3, r7, r1
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	001a      	movs	r2, r3
 800bb88:	2318      	movs	r3, #24
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	d002      	beq.n	800bb94 <VL53L0X_GetInterruptMaskStatus+0x48>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800bb8e:	197b      	adds	r3, r7, r5
 800bb90:	22fa      	movs	r2, #250	; 0xfa
 800bb92:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bb94:	230f      	movs	r3, #15
 800bb96:	18fb      	adds	r3, r7, r3
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	b25b      	sxtb	r3, r3
}
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b005      	add	sp, #20
 800bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bba4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800bba4:	b5b0      	push	{r4, r5, r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbb0:	2517      	movs	r5, #23
 800bbb2:	197b      	adds	r3, r7, r5
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800bbb8:	197c      	adds	r4, r7, r5
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	68b9      	ldr	r1, [r7, #8]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f000 fa58 	bl	800c076 <VL53L0X_perform_ref_spad_management>
 800bbc6:	0003      	movs	r3, r0
 800bbc8:	7023      	strb	r3, [r4, #0]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800bbca:	197b      	adds	r3, r7, r5
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	b25b      	sxtb	r3, r3
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b006      	add	sp, #24
 800bbd6:	bdb0      	pop	{r4, r5, r7, pc}

0800bbd8 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbe2:	210f      	movs	r1, #15
 800bbe4:	187b      	adds	r3, r7, r1
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800bbea:	230c      	movs	r3, #12
 800bbec:	18fb      	adds	r3, r7, r3
 800bbee:	4a23      	ldr	r2, [pc, #140]	; (800bc7c <VL53L0X_get_offset_calibration_data_micro_meter+0xa4>)
 800bbf0:	801a      	strh	r2, [r3, #0]
	int16_t cOffsetRange = 4096;
 800bbf2:	220a      	movs	r2, #10
 800bbf4:	18bb      	adds	r3, r7, r2
 800bbf6:	2280      	movs	r2, #128	; 0x80
 800bbf8:	0152      	lsls	r2, r2, #5
 800bbfa:	801a      	strh	r2, [r3, #0]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800bbfc:	000e      	movs	r6, r1
 800bbfe:	187c      	adds	r4, r7, r1
 800bc00:	2508      	movs	r5, #8
 800bc02:	197a      	adds	r2, r7, r5
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2128      	movs	r1, #40	; 0x28
 800bc08:	0018      	movs	r0, r3
 800bc0a:	f003 ff8f 	bl	800fb2c <VL53L0X_RdWord>
 800bc0e:	0003      	movs	r3, r0
 800bc10:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc12:	19bb      	adds	r3, r7, r6
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d127      	bne.n	800bc6c <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800bc1c:	197b      	adds	r3, r7, r5
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	051b      	lsls	r3, r3, #20
 800bc22:	0d1b      	lsrs	r3, r3, #20
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	197b      	adds	r3, r7, r5
 800bc28:	801a      	strh	r2, [r3, #0]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800bc2a:	0029      	movs	r1, r5
 800bc2c:	197b      	adds	r3, r7, r5
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	001a      	movs	r2, r3
 800bc32:	230c      	movs	r3, #12
 800bc34:	18fb      	adds	r3, r7, r3
 800bc36:	2000      	movs	r0, #0
 800bc38:	5e1b      	ldrsh	r3, [r3, r0]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	dd0d      	ble.n	800bc5a <VL53L0X_get_offset_calibration_data_micro_meter+0x82>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800bc3e:	187b      	adds	r3, r7, r1
 800bc40:	881a      	ldrh	r2, [r3, #0]
 800bc42:	230a      	movs	r3, #10
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	b21b      	sxth	r3, r3
 800bc4e:	001a      	movs	r2, r3
					* 250;
 800bc50:	23fa      	movs	r3, #250	; 0xfa
 800bc52:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e008      	b.n	800bc6c <VL53L0X_get_offset_calibration_data_micro_meter+0x94>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	18fb      	adds	r3, r7, r3
 800bc5e:	881b      	ldrh	r3, [r3, #0]
 800bc60:	b21b      	sxth	r3, r3
 800bc62:	001a      	movs	r2, r3
 800bc64:	23fa      	movs	r3, #250	; 0xfa
 800bc66:	435a      	muls	r2, r3
			*pOffsetCalibrationDataMicroMeter =
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800bc6c:	230f      	movs	r3, #15
 800bc6e:	18fb      	adds	r3, r7, r3
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b25b      	sxtb	r3, r3
}
 800bc74:	0018      	movs	r0, r3
 800bc76:	46bd      	mov	sp, r7
 800bc78:	b005      	add	sp, #20
 800bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7c:	000007ff 	.word	0x000007ff

0800bc80 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08a      	sub	sp, #40	; 0x28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800bc8e:	2308      	movs	r3, #8
 800bc90:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800bc92:	231e      	movs	r3, #30
 800bc94:	18fb      	adds	r3, r7, r3
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	4252      	negs	r2, r2
 800bca0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800bca2:	69b9      	ldr	r1, [r7, #24]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7f4 fa4b 	bl	8000140 <__udivsi3>
 800bcaa:	0003      	movs	r3, r0
 800bcac:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69b9      	ldr	r1, [r7, #24]
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f7f4 faca 	bl	800024c <__aeabi_uidivmod>
 800bcb8:	000b      	movs	r3, r1
 800bcba:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc0:	e038      	b.n	800bd34 <get_next_good_spad+0xb4>
				coarseIndex++) {
		fineIndex = 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	18d2      	adds	r2, r2, r3
 800bccc:	211f      	movs	r1, #31
 800bcce:	187b      	adds	r3, r7, r1
 800bcd0:	7812      	ldrb	r2, [r2, #0]
 800bcd2:	701a      	strb	r2, [r3, #0]

		if (coarseIndex == startIndex) {
 800bcd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d124      	bne.n	800bd26 <get_next_good_spad+0xa6>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800bcdc:	187b      	adds	r3, r7, r1
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	411a      	asrs	r2, r3
 800bce4:	187b      	adds	r3, r7, r1
 800bce6:	701a      	strb	r2, [r3, #0]
			fineIndex = fineOffset;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800bcec:	e01b      	b.n	800bd26 <get_next_good_spad+0xa6>
			if ((dataByte & 0x1) == 1) {
 800bcee:	231f      	movs	r3, #31
 800bcf0:	18fb      	adds	r3, r7, r3
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	d00c      	beq.n	800bd14 <get_next_good_spad+0x94>
				success = 1;
 800bcfa:	231e      	movs	r3, #30
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	2201      	movs	r2, #1
 800bd00:	701a      	strb	r2, [r3, #0]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	435a      	muls	r2, r3
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	18d3      	adds	r3, r2, r3
 800bd0c:	001a      	movs	r2, r3
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	601a      	str	r2, [r3, #0]
				break;
 800bd12:	e00c      	b.n	800bd2e <get_next_good_spad+0xae>
			}
			dataByte >>= 1;
 800bd14:	221f      	movs	r2, #31
 800bd16:	18bb      	adds	r3, r7, r2
 800bd18:	18ba      	adds	r2, r7, r2
 800bd1a:	7812      	ldrb	r2, [r2, #0]
 800bd1c:	0852      	lsrs	r2, r2, #1
 800bd1e:	701a      	strb	r2, [r3, #0]
			fineIndex++;
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	3301      	adds	r3, #1
 800bd24:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800bd26:	6a3a      	ldr	r2, [r7, #32]
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d3df      	bcc.n	800bcee <get_next_good_spad+0x6e>
				coarseIndex++) {
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	3301      	adds	r3, #1
 800bd32:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800bd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d204      	bcs.n	800bd46 <get_next_good_spad+0xc6>
 800bd3c:	231e      	movs	r3, #30
 800bd3e:	18fb      	adds	r3, r7, r3
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0bd      	beq.n	800bcc2 <get_next_good_spad+0x42>
		}
	}
}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b00a      	add	sp, #40	; 0x28
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800bd58:	210f      	movs	r1, #15
 800bd5a:	187b      	adds	r3, r7, r1
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	701a      	strb	r2, [r3, #0]
	quadrant = spadIndex >> 6;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	099b      	lsrs	r3, r3, #6
 800bd64:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <is_aperture+0x38>)
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	0092      	lsls	r2, r2, #2
 800bd6c:	58d3      	ldr	r3, [r2, r3]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d102      	bne.n	800bd78 <is_aperture+0x28>
		isAperture = 0;
 800bd72:	187b      	adds	r3, r7, r1
 800bd74:	2200      	movs	r2, #0
 800bd76:	701a      	strb	r2, [r3, #0]

	return isAperture;
 800bd78:	230f      	movs	r3, #15
 800bd7a:	18fb      	adds	r3, r7, r3
 800bd7c:	781b      	ldrb	r3, [r3, #0]
}
 800bd7e:	0018      	movs	r0, r3
 800bd80:	46bd      	mov	sp, r7
 800bd82:	b004      	add	sp, #16
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	200002b8 	.word	0x200002b8

0800bd8c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800bd8c:	b590      	push	{r4, r7, lr}
 800bd8e:	b089      	sub	sp, #36	; 0x24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bd98:	241f      	movs	r4, #31
 800bd9a:	193b      	adds	r3, r7, r4
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
	uint32_t cSpadsPerByte = 8;
 800bda0:	2308      	movs	r3, #8
 800bda2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800bda4:	69b9      	ldr	r1, [r7, #24]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7f4 f9ca 	bl	8000140 <__udivsi3>
 800bdac:	0003      	movs	r3, r0
 800bdae:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	69b9      	ldr	r1, [r7, #24]
 800bdb4:	0018      	movs	r0, r3
 800bdb6:	f7f4 fa49 	bl	800024c <__aeabi_uidivmod>
 800bdba:	000b      	movs	r3, r1
 800bdbc:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d303      	bcc.n	800bdce <enable_spad_bit+0x42>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bdc6:	193b      	adds	r3, r7, r4
 800bdc8:	22ce      	movs	r2, #206	; 0xce
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	e010      	b.n	800bdf0 <enable_spad_bit+0x64>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	18d3      	adds	r3, r2, r3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	b25a      	sxtb	r2, r3
 800bdd8:	2101      	movs	r1, #1
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	4099      	lsls	r1, r3
 800bdde:	000b      	movs	r3, r1
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	4313      	orrs	r3, r2
 800bde4:	b259      	sxtb	r1, r3
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	18d3      	adds	r3, r2, r3
 800bdec:	b2ca      	uxtb	r2, r1
 800bdee:	701a      	strb	r2, [r3, #0]

	return status;
 800bdf0:	231f      	movs	r3, #31
 800bdf2:	18fb      	adds	r3, r7, r3
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	b25b      	sxtb	r3, r3
}
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	b009      	add	sp, #36	; 0x24
 800bdfe:	bd90      	pop	{r4, r7, pc}

0800be00 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800be00:	b5b0      	push	{r4, r5, r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800be0a:	250f      	movs	r5, #15
 800be0c:	197c      	adds	r4, r7, r5
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	2306      	movs	r3, #6
 800be14:	21b0      	movs	r1, #176	; 0xb0
 800be16:	f003 fd33 	bl	800f880 <VL53L0X_WriteMulti>
 800be1a:	0003      	movs	r3, r0
 800be1c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800be1e:	197b      	adds	r3, r7, r5
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b25b      	sxtb	r3, r3
}
 800be24:	0018      	movs	r0, r3
 800be26:	46bd      	mov	sp, r7
 800be28:	b004      	add	sp, #16
 800be2a:	bdb0      	pop	{r4, r5, r7, pc}

0800be2c <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800be2c:	b5b0      	push	{r4, r5, r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800be36:	250f      	movs	r5, #15
 800be38:	197c      	adds	r4, r7, r5
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	2306      	movs	r3, #6
 800be40:	21b0      	movs	r1, #176	; 0xb0
 800be42:	f003 fd59 	bl	800f8f8 <VL53L0X_ReadMulti>
 800be46:	0003      	movs	r3, r0
 800be48:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800be4a:	197b      	adds	r3, r7, r5
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	b25b      	sxtb	r3, r3
}
 800be50:	0018      	movs	r0, r3
 800be52:	46bd      	mov	sp, r7
 800be54:	b004      	add	sp, #16
 800be56:	bdb0      	pop	{r4, r5, r7, pc}

0800be58 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800be58:	b590      	push	{r4, r7, lr}
 800be5a:	b08d      	sub	sp, #52	; 0x34
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	230b      	movs	r3, #11
 800be66:	18fb      	adds	r3, r7, r3
 800be68:	1c0a      	adds	r2, r1, #0
 800be6a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800be6c:	232f      	movs	r3, #47	; 0x2f
 800be6e:	18fb      	adds	r3, r7, r3
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800be74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be76:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800be78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be7a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800be7c:	2300      	movs	r3, #0
 800be7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be80:	e02f      	b.n	800bee2 <enable_ref_spads+0x8a>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800be82:	231c      	movs	r3, #28
 800be84:	18fb      	adds	r3, r7, r3
 800be86:	6a3a      	ldr	r2, [r7, #32]
 800be88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff fef8 	bl	800bc80 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	3301      	adds	r3, #1
 800be94:	d104      	bne.n	800bea0 <enable_ref_spads+0x48>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800be96:	232f      	movs	r3, #47	; 0x2f
 800be98:	18fb      	adds	r3, r7, r3
 800be9a:	22ce      	movs	r2, #206	; 0xce
 800be9c:	701a      	strb	r2, [r3, #0]
			break;
 800be9e:	e024      	b.n	800beea <enable_ref_spads+0x92>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	001a      	movs	r2, r3
 800bea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea6:	18d3      	adds	r3, r2, r3
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7ff ff51 	bl	800bd50 <is_aperture>
 800beae:	0003      	movs	r3, r0
 800beb0:	001a      	movs	r2, r3
 800beb2:	230b      	movs	r3, #11
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	4293      	cmp	r3, r2
 800beba:	d004      	beq.n	800bec6 <enable_ref_spads+0x6e>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bebc:	232f      	movs	r3, #47	; 0x2f
 800bebe:	18fb      	adds	r3, r7, r3
 800bec0:	22ce      	movs	r2, #206	; 0xce
 800bec2:	701a      	strb	r2, [r3, #0]
			break;
 800bec4:	e011      	b.n	800beea <enable_ref_spads+0x92>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800beca:	6a3a      	ldr	r2, [r7, #32]
 800becc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	0018      	movs	r0, r3
 800bed2:	f7ff ff5b 	bl	800bd8c <enable_spad_bit>
		currentSpad++;
 800bed6:	6a3b      	ldr	r3, [r7, #32]
 800bed8:	3301      	adds	r3, #1
 800beda:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bede:	3301      	adds	r3, #1
 800bee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d3cb      	bcc.n	800be82 <enable_ref_spads+0x2a>
	}
	*lastSpad = currentSpad;
 800beea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bef0:	222f      	movs	r2, #47	; 0x2f
 800bef2:	18bb      	adds	r3, r7, r2
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	b25b      	sxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d108      	bne.n	800bf0e <enable_ref_spads+0xb6>
		status = set_ref_spad_map(Dev, spadArray);
 800befc:	18bc      	adds	r4, r7, r2
 800befe:	683a      	ldr	r2, [r7, #0]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	0011      	movs	r1, r2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f7ff ff7b 	bl	800be00 <set_ref_spad_map>
 800bf0a:	0003      	movs	r3, r0
 800bf0c:	7023      	strb	r3, [r4, #0]


	if (status == VL53L0X_ERROR_NONE) {
 800bf0e:	222f      	movs	r2, #47	; 0x2f
 800bf10:	18bb      	adds	r3, r7, r2
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d123      	bne.n	800bf62 <enable_ref_spads+0x10a>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800bf1a:	18bc      	adds	r4, r7, r2
 800bf1c:	2314      	movs	r3, #20
 800bf1e:	18fa      	adds	r2, r7, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	0011      	movs	r1, r2
 800bf24:	0018      	movs	r0, r3
 800bf26:	f7ff ff81 	bl	800be2c <get_ref_spad_map>
 800bf2a:	0003      	movs	r3, r0
 800bf2c:	7023      	strb	r3, [r4, #0]

		i = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800bf32:	e012      	b.n	800bf5a <enable_ref_spads+0x102>
			if (spadArray[i] != checkSpadArray[i]) {
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	18d3      	adds	r3, r2, r3
 800bf3a:	781a      	ldrb	r2, [r3, #0]
 800bf3c:	2314      	movs	r3, #20
 800bf3e:	18f9      	adds	r1, r7, r3
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	18cb      	adds	r3, r1, r3
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d004      	beq.n	800bf54 <enable_ref_spads+0xfc>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800bf4a:	232f      	movs	r3, #47	; 0x2f
 800bf4c:	18fb      	adds	r3, r7, r3
 800bf4e:	22ce      	movs	r2, #206	; 0xce
 800bf50:	701a      	strb	r2, [r3, #0]
				break;
 800bf52:	e006      	b.n	800bf62 <enable_ref_spads+0x10a>
			}
			i++;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	3301      	adds	r3, #1
 800bf58:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800bf5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d3e8      	bcc.n	800bf34 <enable_ref_spads+0xdc>
		}
	}
	return status;
 800bf62:	232f      	movs	r3, #47	; 0x2f
 800bf64:	18fb      	adds	r3, r7, r3
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	b25b      	sxtb	r3, r3
}
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	b00d      	add	sp, #52	; 0x34
 800bf70:	bd90      	pop	{r4, r7, pc}

0800bf72 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800bf72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf74:	b08b      	sub	sp, #44	; 0x2c
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bf7c:	2027      	movs	r0, #39	; 0x27
 800bf7e:	183b      	adds	r3, r7, r0
 800bf80:	2200      	movs	r2, #0
 800bf82:	701a      	strb	r2, [r3, #0]
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800bf84:	2126      	movs	r1, #38	; 0x26
 800bf86:	187b      	adds	r3, r7, r1
 800bf88:	2200      	movs	r2, #0
 800bf8a:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800bf8c:	187b      	adds	r3, r7, r1
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	2298      	movs	r2, #152	; 0x98
 800bf92:	0052      	lsls	r2, r2, #1
 800bf94:	5c8a      	ldrb	r2, [r1, r2]
 800bf96:	701a      	strb	r2, [r3, #0]

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800bf98:	183b      	adds	r3, r7, r0
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	b25b      	sxtb	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d108      	bne.n	800bfb4 <perform_ref_signal_measurement+0x42>
		status = VL53L0X_WrByte(Dev,
 800bfa2:	183c      	adds	r4, r7, r0
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	22c0      	movs	r2, #192	; 0xc0
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	0018      	movs	r0, r3
 800bfac:	f003 fcda 	bl	800f964 <VL53L0X_WrByte>
 800bfb0:	0003      	movs	r3, r0
 800bfb2:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800bfb4:	2227      	movs	r2, #39	; 0x27
 800bfb6:	18bb      	adds	r3, r7, r2
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	b25b      	sxtb	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <perform_ref_signal_measurement+0x62>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800bfc0:	18bc      	adds	r4, r7, r2
 800bfc2:	2308      	movs	r3, #8
 800bfc4:	18fa      	adds	r2, r7, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	0011      	movs	r1, r2
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f7ff fb58 	bl	800b680 <VL53L0X_PerformSingleRangingMeasurement>
 800bfd0:	0003      	movs	r3, r0
 800bfd2:	7023      	strb	r3, [r4, #0]
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800bfd4:	2227      	movs	r2, #39	; 0x27
 800bfd6:	18bb      	adds	r3, r7, r2
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	b25b      	sxtb	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d108      	bne.n	800bff2 <perform_ref_signal_measurement+0x80>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bfe0:	18bc      	adds	r4, r7, r2
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	21ff      	movs	r1, #255	; 0xff
 800bfe8:	0018      	movs	r0, r3
 800bfea:	f003 fcbb 	bl	800f964 <VL53L0X_WrByte>
 800bfee:	0003      	movs	r3, r0
 800bff0:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE)
 800bff2:	2227      	movs	r2, #39	; 0x27
 800bff4:	18bb      	adds	r3, r7, r2
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	b25b      	sxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d108      	bne.n	800c010 <perform_ref_signal_measurement+0x9e>
		status = VL53L0X_RdWord(Dev,
 800bffe:	18bc      	adds	r4, r7, r2
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	21b6      	movs	r1, #182	; 0xb6
 800c006:	0018      	movs	r0, r3
 800c008:	f003 fd90 	bl	800fb2c <VL53L0X_RdWord>
 800c00c:	0003      	movs	r3, r0
 800c00e:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800c010:	2227      	movs	r2, #39	; 0x27
 800c012:	18bb      	adds	r3, r7, r2
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b25b      	sxtb	r3, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d108      	bne.n	800c02e <perform_ref_signal_measurement+0xbc>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c01c:	18bc      	adds	r4, r7, r2
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	21ff      	movs	r1, #255	; 0xff
 800c024:	0018      	movs	r0, r3
 800c026:	f003 fc9d 	bl	800f964 <VL53L0X_WrByte>
 800c02a:	0003      	movs	r3, r0
 800c02c:	7023      	strb	r3, [r4, #0]

	if (status == VL53L0X_ERROR_NONE) {
 800c02e:	2527      	movs	r5, #39	; 0x27
 800c030:	197b      	adds	r3, r7, r5
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	b25b      	sxtb	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d115      	bne.n	800c066 <perform_ref_signal_measurement+0xf4>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c03a:	197c      	adds	r4, r7, r5
 800c03c:	2626      	movs	r6, #38	; 0x26
 800c03e:	19bb      	adds	r3, r7, r6
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2101      	movs	r1, #1
 800c046:	0018      	movs	r0, r3
 800c048:	f003 fc8c 	bl	800f964 <VL53L0X_WrByte>
 800c04c:	0003      	movs	r3, r0
 800c04e:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800c050:	197b      	adds	r3, r7, r5
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	b25b      	sxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <perform_ref_signal_measurement+0xf4>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	19b9      	adds	r1, r7, r6
 800c05e:	2398      	movs	r3, #152	; 0x98
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	7809      	ldrb	r1, [r1, #0]
 800c064:	54d1      	strb	r1, [r2, r3]
	}

	return status;
 800c066:	2327      	movs	r3, #39	; 0x27
 800c068:	18fb      	adds	r3, r7, r3
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	b25b      	sxtb	r3, r3
}
 800c06e:	0018      	movs	r0, r3
 800c070:	46bd      	mov	sp, r7
 800c072:	b00b      	add	sp, #44	; 0x2c
 800c074:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c076 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800c076:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c078:	b09d      	sub	sp, #116	; 0x74
 800c07a:	af06      	add	r7, sp, #24
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c082:	2357      	movs	r3, #87	; 0x57
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	2200      	movs	r2, #0
 800c088:	701a      	strb	r2, [r3, #0]
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800c08a:	233a      	movs	r3, #58	; 0x3a
 800c08c:	18fb      	adds	r3, r7, r3
 800c08e:	22b4      	movs	r2, #180	; 0xb4
 800c090:	701a      	strb	r2, [r3, #0]
	uint32_t minimumSpadCount = 3;
 800c092:	2303      	movs	r3, #3
 800c094:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800c096:	232c      	movs	r3, #44	; 0x2c
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800c0a6:	212e      	movs	r1, #46	; 0x2e
 800c0a8:	187b      	adds	r3, r7, r1
 800c0aa:	22a0      	movs	r2, #160	; 0xa0
 800c0ac:	0112      	lsls	r2, r2, #4
 800c0ae:	801a      	strh	r2, [r3, #0]
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800c0b8:	2306      	movs	r3, #6
 800c0ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800c0c4:	2343      	movs	r3, #67	; 0x43
 800c0c6:	18fb      	adds	r3, r7, r3
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800c0cc:	2311      	movs	r3, #17
 800c0ce:	18fb      	adds	r3, r7, r3
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	18fb      	adds	r3, r7, r3
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
	uint32_t refSpadCount_int = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800c0e0:	233b      	movs	r3, #59	; 0x3b
 800c0e2:	18fb      	adds	r3, r7, r3
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	701a      	strb	r2, [r3, #0]
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800c0e8:	187b      	adds	r3, r7, r1
 800c0ea:	68f9      	ldr	r1, [r7, #12]
 800c0ec:	229e      	movs	r2, #158	; 0x9e
 800c0ee:	0052      	lsls	r2, r2, #1
 800c0f0:	5a8a      	ldrh	r2, [r1, r2]
 800c0f2:	801a      	strh	r2, [r3, #0]
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0f8:	e00a      	b.n	800c110 <VL53L0X_perform_ref_spad_management+0x9a>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c0fa:	68f9      	ldr	r1, [r7, #12]
 800c0fc:	2392      	movs	r3, #146	; 0x92
 800c0fe:	005b      	lsls	r3, r3, #1
 800c100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c102:	188a      	adds	r2, r1, r2
 800c104:	18d3      	adds	r3, r2, r3
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c10a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c10c:	3301      	adds	r3, #1
 800c10e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	429a      	cmp	r2, r3
 800c116:	d3f0      	bcc.n	800c0fa <VL53L0X_perform_ref_spad_management+0x84>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c118:	2557      	movs	r5, #87	; 0x57
 800c11a:	197c      	adds	r4, r7, r5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2201      	movs	r2, #1
 800c120:	21ff      	movs	r1, #255	; 0xff
 800c122:	0018      	movs	r0, r3
 800c124:	f003 fc1e 	bl	800f964 <VL53L0X_WrByte>
 800c128:	0003      	movs	r3, r0
 800c12a:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c12c:	197b      	adds	r3, r7, r5
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	b25b      	sxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d108      	bne.n	800c148 <VL53L0X_perform_ref_spad_management+0xd2>
		Status = VL53L0X_WrByte(Dev,
 800c136:	197c      	adds	r4, r7, r5
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	214f      	movs	r1, #79	; 0x4f
 800c13e:	0018      	movs	r0, r3
 800c140:	f003 fc10 	bl	800f964 <VL53L0X_WrByte>
 800c144:	0003      	movs	r3, r0
 800c146:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c148:	2257      	movs	r2, #87	; 0x57
 800c14a:	18bb      	adds	r3, r7, r2
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b25b      	sxtb	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d108      	bne.n	800c166 <VL53L0X_perform_ref_spad_management+0xf0>
		Status = VL53L0X_WrByte(Dev,
 800c154:	18bc      	adds	r4, r7, r2
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	222c      	movs	r2, #44	; 0x2c
 800c15a:	214e      	movs	r1, #78	; 0x4e
 800c15c:	0018      	movs	r0, r3
 800c15e:	f003 fc01 	bl	800f964 <VL53L0X_WrByte>
 800c162:	0003      	movs	r3, r0
 800c164:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c166:	2257      	movs	r2, #87	; 0x57
 800c168:	18bb      	adds	r3, r7, r2
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	b25b      	sxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d108      	bne.n	800c184 <VL53L0X_perform_ref_spad_management+0x10e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c172:	18bc      	adds	r4, r7, r2
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	21ff      	movs	r1, #255	; 0xff
 800c17a:	0018      	movs	r0, r3
 800c17c:	f003 fbf2 	bl	800f964 <VL53L0X_WrByte>
 800c180:	0003      	movs	r3, r0
 800c182:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c184:	2257      	movs	r2, #87	; 0x57
 800c186:	18bb      	adds	r3, r7, r2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	b25b      	sxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <VL53L0X_perform_ref_spad_management+0x130>
		Status = VL53L0X_WrByte(Dev,
 800c190:	18bc      	adds	r4, r7, r2
 800c192:	233a      	movs	r3, #58	; 0x3a
 800c194:	18fb      	adds	r3, r7, r3
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	21b6      	movs	r1, #182	; 0xb6
 800c19c:	0018      	movs	r0, r3
 800c19e:	f003 fbe1 	bl	800f964 <VL53L0X_WrByte>
 800c1a2:	0003      	movs	r3, r0
 800c1a4:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800c1a6:	2257      	movs	r2, #87	; 0x57
 800c1a8:	18bb      	adds	r3, r7, r2
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b25b      	sxtb	r3, r3
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d108      	bne.n	800c1c4 <VL53L0X_perform_ref_spad_management+0x14e>
		Status = VL53L0X_WrByte(Dev,
 800c1b2:	18bc      	adds	r4, r7, r2
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2180      	movs	r1, #128	; 0x80
 800c1ba:	0018      	movs	r0, r3
 800c1bc:	f003 fbd2 	bl	800f964 <VL53L0X_WrByte>
 800c1c0:	0003      	movs	r3, r0
 800c1c2:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800c1c4:	2257      	movs	r2, #87	; 0x57
 800c1c6:	18bb      	adds	r3, r7, r2
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b25b      	sxtb	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10a      	bne.n	800c1e6 <VL53L0X_perform_ref_spad_management+0x170>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800c1d0:	18bc      	adds	r4, r7, r2
 800c1d2:	2310      	movs	r3, #16
 800c1d4:	18fa      	adds	r2, r7, r3
 800c1d6:	2311      	movs	r3, #17
 800c1d8:	18f9      	adds	r1, r7, r3
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f000 fcab 	bl	800cb38 <VL53L0X_perform_ref_calibration>
 800c1e2:	0003      	movs	r3, r0
 800c1e4:	7023      	strb	r3, [r4, #0]
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800c1e6:	2257      	movs	r2, #87	; 0x57
 800c1e8:	18bb      	adds	r3, r7, r2
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b25b      	sxtb	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d124      	bne.n	800c23c <VL53L0X_perform_ref_spad_management+0x1c6>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800c1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c200:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	332b      	adds	r3, #43	; 0x2b
 800c206:	33ff      	adds	r3, #255	; 0xff
 800c208:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3325      	adds	r3, #37	; 0x25
 800c20e:	33ff      	adds	r3, #255	; 0xff
 800c210:	001e      	movs	r6, r3
		Status = enable_ref_spads(Dev,
 800c212:	233a      	movs	r3, #58	; 0x3a
 800c214:	18fb      	adds	r3, r7, r3
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	18bc      	adds	r4, r7, r2
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	2218      	movs	r2, #24
 800c21e:	18ba      	adds	r2, r7, r2
 800c220:	9204      	str	r2, [sp, #16]
 800c222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c224:	9203      	str	r2, [sp, #12]
 800c226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c228:	9202      	str	r2, [sp, #8]
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	0033      	movs	r3, r6
 800c232:	002a      	movs	r2, r5
 800c234:	f7ff fe10 	bl	800be58 <enable_ref_spads>
 800c238:	0003      	movs	r3, r0
 800c23a:	7023      	strb	r3, [r4, #0]
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c23c:	2557      	movs	r5, #87	; 0x57
 800c23e:	197b      	adds	r3, r7, r5
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b25b      	sxtb	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	d000      	beq.n	800c24a <VL53L0X_perform_ref_spad_management+0x1d4>
 800c248:	e087      	b.n	800c35a <VL53L0X_perform_ref_spad_management+0x2e4>
		currentSpadIndex = lastSpadIndex;
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800c24e:	197c      	adds	r4, r7, r5
 800c250:	2612      	movs	r6, #18
 800c252:	19ba      	adds	r2, r7, r6
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	0011      	movs	r1, r2
 800c258:	0018      	movs	r0, r3
 800c25a:	f7ff fe8a 	bl	800bf72 <perform_ref_signal_measurement>
 800c25e:	0003      	movs	r3, r0
 800c260:	7023      	strb	r3, [r4, #0]
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c262:	197b      	adds	r3, r7, r5
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	b25b      	sxtb	r3, r3
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d000      	beq.n	800c26e <VL53L0X_perform_ref_spad_management+0x1f8>
 800c26c:	e071      	b.n	800c352 <VL53L0X_perform_ref_spad_management+0x2dc>
			(peakSignalRateRef > targetRefRate)) {
 800c26e:	19bb      	adds	r3, r7, r6
 800c270:	881b      	ldrh	r3, [r3, #0]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800c272:	222e      	movs	r2, #46	; 0x2e
 800c274:	18ba      	adds	r2, r7, r2
 800c276:	8812      	ldrh	r2, [r2, #0]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d26a      	bcs.n	800c352 <VL53L0X_perform_ref_spad_management+0x2dc>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800c27c:	2300      	movs	r3, #0
 800c27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c280:	e00a      	b.n	800c298 <VL53L0X_perform_ref_spad_management+0x222>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c282:	68f9      	ldr	r1, [r7, #12]
 800c284:	2392      	movs	r3, #146	; 0x92
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c28a:	188a      	adds	r2, r1, r2
 800c28c:	18d3      	adds	r3, r2, r3
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800c292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c294:	3301      	adds	r3, #1
 800c296:	64bb      	str	r3, [r7, #72]	; 0x48
 800c298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d3f0      	bcc.n	800c282 <VL53L0X_perform_ref_spad_management+0x20c>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800c2a0:	e002      	b.n	800c2a8 <VL53L0X_perform_ref_spad_management+0x232>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800c2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800c2a8:	233a      	movs	r3, #58	; 0x3a
 800c2aa:	18fb      	adds	r3, r7, r3
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b0:	18d3      	adds	r3, r2, r3
 800c2b2:	0018      	movs	r0, r3
 800c2b4:	f7ff fd4c 	bl	800bd50 <is_aperture>
 800c2b8:	1e03      	subs	r3, r0, #0
 800c2ba:	d103      	bne.n	800c2c4 <VL53L0X_perform_ref_spad_management+0x24e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800c2bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d3ee      	bcc.n	800c2a2 <VL53L0X_perform_ref_spad_management+0x22c>
			}

			needAptSpads = 1;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800c2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2ca:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	332b      	adds	r3, #43	; 0x2b
 800c2d0:	33ff      	adds	r3, #255	; 0xff
 800c2d2:	001d      	movs	r5, r3
					Dev->Data.SpadData.RefSpadEnables,
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3325      	adds	r3, #37	; 0x25
 800c2d8:	33ff      	adds	r3, #255	; 0xff
 800c2da:	001e      	movs	r6, r3
			Status = enable_ref_spads(Dev,
 800c2dc:	233a      	movs	r3, #58	; 0x3a
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2257      	movs	r2, #87	; 0x57
 800c2e4:	18bc      	adds	r4, r7, r2
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	2218      	movs	r2, #24
 800c2ea:	18ba      	adds	r2, r7, r2
 800c2ec:	9204      	str	r2, [sp, #16]
 800c2ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2f0:	9203      	str	r2, [sp, #12]
 800c2f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2f4:	9202      	str	r2, [sp, #8]
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	0033      	movs	r3, r6
 800c2fe:	002a      	movs	r2, r5
 800c300:	f7ff fdaa 	bl	800be58 <enable_ref_spads>
 800c304:	0003      	movs	r3, r0
 800c306:	7023      	strb	r3, [r4, #0]
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c308:	2557      	movs	r5, #87	; 0x57
 800c30a:	197b      	adds	r3, r7, r5
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	b25b      	sxtb	r3, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d121      	bne.n	800c358 <VL53L0X_perform_ref_spad_management+0x2e2>
				currentSpadIndex = lastSpadIndex;
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800c318:	197c      	adds	r4, r7, r5
 800c31a:	2612      	movs	r6, #18
 800c31c:	19ba      	adds	r2, r7, r6
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	0011      	movs	r1, r2
 800c322:	0018      	movs	r0, r3
 800c324:	f7ff fe25 	bl	800bf72 <perform_ref_signal_measurement>
 800c328:	0003      	movs	r3, r0
 800c32a:	7023      	strb	r3, [r4, #0]
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800c32c:	197b      	adds	r3, r7, r5
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	b25b      	sxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d110      	bne.n	800c358 <VL53L0X_perform_ref_spad_management+0x2e2>
					(peakSignalRateRef > targetRefRate)) {
 800c336:	19bb      	adds	r3, r7, r6
 800c338:	881b      	ldrh	r3, [r3, #0]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800c33a:	222e      	movs	r2, #46	; 0x2e
 800c33c:	18ba      	adds	r2, r7, r2
 800c33e:	8812      	ldrh	r2, [r2, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d209      	bcs.n	800c358 <VL53L0X_perform_ref_spad_management+0x2e2>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800c344:	233b      	movs	r3, #59	; 0x3b
 800c346:	18fb      	adds	r3, r7, r3
 800c348:	2201      	movs	r2, #1
 800c34a:	701a      	strb	r2, [r3, #0]
					refSpadCount_int = minimumSpadCount;
 800c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800c350:	e002      	b.n	800c358 <VL53L0X_perform_ref_spad_management+0x2e2>
				}
			}
		} else {
			needAptSpads = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c356:	e000      	b.n	800c35a <VL53L0X_perform_ref_spad_management+0x2e4>
			if (Status == VL53L0X_ERROR_NONE) {
 800c358:	46c0      	nop			; (mov r8, r8)
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c35a:	2357      	movs	r3, #87	; 0x57
 800c35c:	18fb      	adds	r3, r7, r3
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	b25b      	sxtb	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	d000      	beq.n	800c368 <VL53L0X_perform_ref_spad_management+0x2f2>
 800c366:	e0cd      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
		(peakSignalRateRef < targetRefRate)) {
 800c368:	2412      	movs	r4, #18
 800c36a:	193b      	adds	r3, r7, r4
 800c36c:	881b      	ldrh	r3, [r3, #0]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800c36e:	252e      	movs	r5, #46	; 0x2e
 800c370:	197a      	adds	r2, r7, r5
 800c372:	8812      	ldrh	r2, [r2, #0]
 800c374:	429a      	cmp	r2, r3
 800c376:	d800      	bhi.n	800c37a <VL53L0X_perform_ref_spad_management+0x304>
 800c378:	e0c4      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800c37a:	233b      	movs	r3, #59	; 0x3b
 800c37c:	18fb      	adds	r3, r7, r3
 800c37e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c380:	701a      	strb	r2, [r3, #0]
		refSpadCount_int	= minimumSpadCount;
 800c382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3325      	adds	r3, #37	; 0x25
 800c38a:	33ff      	adds	r3, #255	; 0xff
 800c38c:	0019      	movs	r1, r3
 800c38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c390:	231c      	movs	r3, #28
 800c392:	18fb      	adds	r3, r7, r3
 800c394:	0018      	movs	r0, r3
 800c396:	f004 ffd7 	bl	8011348 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800c39a:	193b      	adds	r3, r7, r4
 800c39c:	881b      	ldrh	r3, [r3, #0]
 800c39e:	001a      	movs	r2, r3
 800c3a0:	197b      	adds	r3, r7, r5
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	17da      	asrs	r2, r3, #31
 800c3a8:	189b      	adds	r3, r3, r2
 800c3aa:	4053      	eors	r3, r2
 800c3ac:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800c3ae:	2343      	movs	r3, #67	; 0x43
 800c3b0:	18fb      	adds	r3, r7, r3
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	701a      	strb	r2, [r3, #0]

		while (!complete) {
 800c3b6:	e09b      	b.n	800c4f0 <VL53L0X_perform_ref_spad_management+0x47a>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	332b      	adds	r3, #43	; 0x2b
 800c3bc:	33ff      	adds	r3, #255	; 0xff
 800c3be:	0018      	movs	r0, r3
			get_next_good_spad(
 800c3c0:	2314      	movs	r3, #20
 800c3c2:	18fb      	adds	r3, r7, r3
 800c3c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c8:	f7ff fc5a 	bl	800bc80 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	d104      	bne.n	800c3dc <VL53L0X_perform_ref_spad_management+0x366>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800c3d2:	2357      	movs	r3, #87	; 0x57
 800c3d4:	18fb      	adds	r3, r7, r3
 800c3d6:	22ce      	movs	r2, #206	; 0xce
 800c3d8:	701a      	strb	r2, [r3, #0]
				break;
 800c3da:	e093      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800c3dc:	233a      	movs	r3, #58	; 0x3a
 800c3de:	18fb      	adds	r3, r7, r3
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	189b      	adds	r3, r3, r2
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f7ff fcb2 	bl	800bd50 <is_aperture>
 800c3ec:	0003      	movs	r3, r0
 800c3ee:	001a      	movs	r2, r3
 800c3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d004      	beq.n	800c400 <VL53L0X_perform_ref_spad_management+0x38a>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800c3f6:	2343      	movs	r3, #67	; 0x43
 800c3f8:	18fb      	adds	r3, r7, r3
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	701a      	strb	r2, [r3, #0]
				break;
 800c3fe:	e081      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
			}

			(refSpadCount_int)++;
 800c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c402:	3301      	adds	r3, #1
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3325      	adds	r3, #37	; 0x25
 800c40e:	33ff      	adds	r3, #255	; 0xff
			Status = enable_spad_bit(
 800c410:	2557      	movs	r5, #87	; 0x57
 800c412:	197c      	adds	r4, r7, r5
 800c414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c418:	0018      	movs	r0, r3
 800c41a:	f7ff fcb7 	bl	800bd8c <enable_spad_bit>
 800c41e:	0003      	movs	r3, r0
 800c420:	7023      	strb	r3, [r4, #0]
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800c422:	0029      	movs	r1, r5
 800c424:	187b      	adds	r3, r7, r1
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	b25b      	sxtb	r3, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10e      	bne.n	800c44c <VL53L0X_perform_ref_spad_management+0x3d6>
				currentSpadIndex++;
 800c42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c430:	3301      	adds	r3, #1
 800c432:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3325      	adds	r3, #37	; 0x25
 800c438:	33ff      	adds	r3, #255	; 0xff
 800c43a:	001a      	movs	r2, r3
				Status = set_ref_spad_map(Dev,
 800c43c:	187c      	adds	r4, r7, r1
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	0011      	movs	r1, r2
 800c442:	0018      	movs	r0, r3
 800c444:	f7ff fcdc 	bl	800be00 <set_ref_spad_map>
 800c448:	0003      	movs	r3, r0
 800c44a:	7023      	strb	r3, [r4, #0]
			}

			if (Status != VL53L0X_ERROR_NONE)
 800c44c:	2557      	movs	r5, #87	; 0x57
 800c44e:	197b      	adds	r3, r7, r5
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b25b      	sxtb	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	d152      	bne.n	800c4fe <VL53L0X_perform_ref_spad_management+0x488>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800c458:	197c      	adds	r4, r7, r5
 800c45a:	2612      	movs	r6, #18
 800c45c:	19ba      	adds	r2, r7, r6
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	0011      	movs	r1, r2
 800c462:	0018      	movs	r0, r3
 800c464:	f7ff fd85 	bl	800bf72 <perform_ref_signal_measurement>
 800c468:	0003      	movs	r3, r0
 800c46a:	7023      	strb	r3, [r4, #0]
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800c46c:	0029      	movs	r1, r5
 800c46e:	187b      	adds	r3, r7, r1
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b25b      	sxtb	r3, r3
 800c474:	2b00      	cmp	r3, #0
 800c476:	d144      	bne.n	800c502 <VL53L0X_perform_ref_spad_management+0x48c>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800c478:	0030      	movs	r0, r6
 800c47a:	183b      	adds	r3, r7, r0
 800c47c:	881b      	ldrh	r3, [r3, #0]
 800c47e:	001a      	movs	r2, r3
 800c480:	242e      	movs	r4, #46	; 0x2e
 800c482:	193b      	adds	r3, r7, r4
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	17da      	asrs	r2, r3, #31
 800c48a:	189b      	adds	r3, r3, r2
 800c48c:	4053      	eors	r3, r2
 800c48e:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800c490:	183b      	adds	r3, r7, r0
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	193a      	adds	r2, r7, r4
 800c496:	8812      	ldrh	r2, [r2, #0]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d21d      	bcs.n	800c4d8 <VL53L0X_perform_ref_spad_management+0x462>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800c49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d914      	bls.n	800c4ce <VL53L0X_perform_ref_spad_management+0x458>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800c4a4:	187c      	adds	r4, r7, r1
 800c4a6:	251c      	movs	r5, #28
 800c4a8:	197a      	adds	r2, r7, r5
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	0011      	movs	r1, r2
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f7ff fca6 	bl	800be00 <set_ref_spad_map>
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	7023      	strb	r3, [r4, #0]
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	3325      	adds	r3, #37	; 0x25
 800c4bc:	33ff      	adds	r3, #255	; 0xff
					memcpy(
 800c4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4c0:	1979      	adds	r1, r7, r5
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f004 ff40 	bl	8011348 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800c4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800c4ce:	2343      	movs	r3, #67	; 0x43
 800c4d0:	18fb      	adds	r3, r7, r3
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	e00b      	b.n	800c4f0 <VL53L0X_perform_ref_spad_management+0x47a>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	3325      	adds	r3, #37	; 0x25
 800c4e0:	33ff      	adds	r3, #255	; 0xff
 800c4e2:	0019      	movs	r1, r3
				memcpy(lastSpadArray,
 800c4e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e6:	231c      	movs	r3, #28
 800c4e8:	18fb      	adds	r3, r7, r3
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f004 ff2c 	bl	8011348 <memcpy>
		while (!complete) {
 800c4f0:	2343      	movs	r3, #67	; 0x43
 800c4f2:	18fb      	adds	r3, r7, r3
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d100      	bne.n	800c4fc <VL53L0X_perform_ref_spad_management+0x486>
 800c4fa:	e75d      	b.n	800c3b8 <VL53L0X_perform_ref_spad_management+0x342>
 800c4fc:	e002      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	e000      	b.n	800c504 <VL53L0X_perform_ref_spad_management+0x48e>
				break;
 800c502:	46c0      	nop			; (mov r8, r8)
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c504:	2357      	movs	r3, #87	; 0x57
 800c506:	18fb      	adds	r3, r7, r3
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	b25b      	sxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d119      	bne.n	800c544 <VL53L0X_perform_ref_spad_management+0x4ce>
		*refSpadCount = refSpadCount_int;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c514:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	223b      	movs	r2, #59	; 0x3b
 800c51a:	18ba      	adds	r2, r7, r2
 800c51c:	7812      	ldrb	r2, [r2, #0]
 800c51e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	2316      	movs	r3, #22
 800c524:	33ff      	adds	r3, #255	; 0xff
 800c526:	2101      	movs	r1, #1
 800c528:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	b2d9      	uxtb	r1, r3
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	2314      	movs	r3, #20
 800c534:	33ff      	adds	r3, #255	; 0xff
 800c536:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7819      	ldrb	r1, [r3, #0]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	238a      	movs	r3, #138	; 0x8a
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800c544:	2357      	movs	r3, #87	; 0x57
 800c546:	18fb      	adds	r3, r7, r3
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	b25b      	sxtb	r3, r3
}
 800c54c:	0018      	movs	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	b017      	add	sp, #92	; 0x5c
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c554 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800c554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c556:	b093      	sub	sp, #76	; 0x4c
 800c558:	af06      	add	r7, sp, #24
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	1dfb      	adds	r3, r7, #7
 800c560:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c562:	212f      	movs	r1, #47	; 0x2f
 800c564:	187b      	adds	r3, r7, r1
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
	uint32_t currentSpadIndex = 0;
 800c56a:	2300      	movs	r3, #0
 800c56c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800c56e:	2323      	movs	r3, #35	; 0x23
 800c570:	18fb      	adds	r3, r7, r3
 800c572:	22b4      	movs	r2, #180	; 0xb4
 800c574:	701a      	strb	r2, [r3, #0]
	uint32_t spadArraySize = 6;
 800c576:	2306      	movs	r3, #6
 800c578:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800c57a:	232c      	movs	r3, #44	; 0x2c
 800c57c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c57e:	000d      	movs	r5, r1
 800c580:	187c      	adds	r4, r7, r1
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2201      	movs	r2, #1
 800c586:	21ff      	movs	r1, #255	; 0xff
 800c588:	0018      	movs	r0, r3
 800c58a:	f003 f9eb 	bl	800f964 <VL53L0X_WrByte>
 800c58e:	0003      	movs	r3, r0
 800c590:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c592:	197b      	adds	r3, r7, r5
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	b25b      	sxtb	r3, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d108      	bne.n	800c5ae <VL53L0X_set_reference_spads+0x5a>
		Status = VL53L0X_WrByte(Dev,
 800c59c:	197c      	adds	r4, r7, r5
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	214f      	movs	r1, #79	; 0x4f
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f003 f9dd 	bl	800f964 <VL53L0X_WrByte>
 800c5aa:	0003      	movs	r3, r0
 800c5ac:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800c5ae:	222f      	movs	r2, #47	; 0x2f
 800c5b0:	18bb      	adds	r3, r7, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d108      	bne.n	800c5cc <VL53L0X_set_reference_spads+0x78>
		Status = VL53L0X_WrByte(Dev,
 800c5ba:	18bc      	adds	r4, r7, r2
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	222c      	movs	r2, #44	; 0x2c
 800c5c0:	214e      	movs	r1, #78	; 0x4e
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f003 f9ce 	bl	800f964 <VL53L0X_WrByte>
 800c5c8:	0003      	movs	r3, r0
 800c5ca:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800c5cc:	222f      	movs	r2, #47	; 0x2f
 800c5ce:	18bb      	adds	r3, r7, r2
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	b25b      	sxtb	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d108      	bne.n	800c5ea <VL53L0X_set_reference_spads+0x96>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c5d8:	18bc      	adds	r4, r7, r2
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	21ff      	movs	r1, #255	; 0xff
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f003 f9bf 	bl	800f964 <VL53L0X_WrByte>
 800c5e6:	0003      	movs	r3, r0
 800c5e8:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c5ea:	222f      	movs	r2, #47	; 0x2f
 800c5ec:	18bb      	adds	r3, r7, r2
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	b25b      	sxtb	r3, r3
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10a      	bne.n	800c60c <VL53L0X_set_reference_spads+0xb8>
		Status = VL53L0X_WrByte(Dev,
 800c5f6:	18bc      	adds	r4, r7, r2
 800c5f8:	2323      	movs	r3, #35	; 0x23
 800c5fa:	18fb      	adds	r3, r7, r3
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	21b6      	movs	r1, #182	; 0xb6
 800c602:	0018      	movs	r0, r3
 800c604:	f003 f9ae 	bl	800f964 <VL53L0X_WrByte>
 800c608:	0003      	movs	r3, r0
 800c60a:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800c60c:	2300      	movs	r3, #0
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
 800c610:	e00a      	b.n	800c628 <VL53L0X_set_reference_spads+0xd4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	2392      	movs	r3, #146	; 0x92
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c61a:	188a      	adds	r2, r1, r2
 800c61c:	18d3      	adds	r3, r2, r3
 800c61e:	2200      	movs	r2, #0
 800c620:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	3301      	adds	r3, #1
 800c626:	627b      	str	r3, [r7, #36]	; 0x24
 800c628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d3f0      	bcc.n	800c612 <VL53L0X_set_reference_spads+0xbe>

	if (isApertureSpads) {
 800c630:	1dfb      	adds	r3, r7, #7
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d011      	beq.n	800c65c <VL53L0X_set_reference_spads+0x108>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c638:	e002      	b.n	800c640 <VL53L0X_set_reference_spads+0xec>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	3301      	adds	r3, #1
 800c63e:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800c640:	2323      	movs	r3, #35	; 0x23
 800c642:	18fb      	adds	r3, r7, r3
 800c644:	781a      	ldrb	r2, [r3, #0]
 800c646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c648:	18d3      	adds	r3, r2, r3
 800c64a:	0018      	movs	r0, r3
 800c64c:	f7ff fb80 	bl	800bd50 <is_aperture>
 800c650:	1e03      	subs	r3, r0, #0
 800c652:	d103      	bne.n	800c65c <VL53L0X_set_reference_spads+0x108>
 800c654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d3ee      	bcc.n	800c63a <VL53L0X_set_reference_spads+0xe6>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	332b      	adds	r3, #43	; 0x2b
 800c660:	33ff      	adds	r3, #255	; 0xff
 800c662:	001d      	movs	r5, r3
				Dev->Data.SpadData.RefSpadEnables,
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	3325      	adds	r3, #37	; 0x25
 800c668:	33ff      	adds	r3, #255	; 0xff
 800c66a:	001e      	movs	r6, r3
	Status = enable_ref_spads(Dev,
 800c66c:	2323      	movs	r3, #35	; 0x23
 800c66e:	18fb      	adds	r3, r7, r3
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	222f      	movs	r2, #47	; 0x2f
 800c674:	18bc      	adds	r4, r7, r2
 800c676:	1dfa      	adds	r2, r7, #7
 800c678:	7811      	ldrb	r1, [r2, #0]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	2214      	movs	r2, #20
 800c67e:	18ba      	adds	r2, r7, r2
 800c680:	9204      	str	r2, [sp, #16]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	9203      	str	r2, [sp, #12]
 800c686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c688:	9202      	str	r2, [sp, #8]
 800c68a:	9301      	str	r3, [sp, #4]
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	0033      	movs	r3, r6
 800c692:	002a      	movs	r2, r5
 800c694:	f7ff fbe0 	bl	800be58 <enable_ref_spads>
 800c698:	0003      	movs	r3, r0
 800c69a:	7023      	strb	r3, [r4, #0]
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800c69c:	222f      	movs	r2, #47	; 0x2f
 800c69e:	18bb      	adds	r3, r7, r2
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	b25b      	sxtb	r3, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d110      	bne.n	800c6ca <VL53L0X_set_reference_spads+0x176>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	2316      	movs	r3, #22
 800c6ac:	33ff      	adds	r3, #255	; 0xff
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	54d1      	strb	r1, [r2, r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	b2d9      	uxtb	r1, r3
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	2314      	movs	r3, #20
 800c6ba:	33ff      	adds	r3, #255	; 0xff
 800c6bc:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	1df9      	adds	r1, r7, #7
 800c6c2:	238a      	movs	r3, #138	; 0x8a
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	7809      	ldrb	r1, [r1, #0]
 800c6c8:	54d1      	strb	r1, [r2, r3]
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800c6ca:	232f      	movs	r3, #47	; 0x2f
 800c6cc:	18fb      	adds	r3, r7, r3
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	b25b      	sxtb	r3, r3
}
 800c6d2:	0018      	movs	r0, r3
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	b00d      	add	sp, #52	; 0x34
 800c6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6da <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800c6da:	b590      	push	{r4, r7, lr}
 800c6dc:	b085      	sub	sp, #20
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	000a      	movs	r2, r1
 800c6e4:	1cfb      	adds	r3, r7, #3
 800c6e6:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6e8:	210f      	movs	r1, #15
 800c6ea:	187b      	adds	r3, r7, r1
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c6f0:	187b      	adds	r3, r7, r1
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	b25b      	sxtb	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10c      	bne.n	800c714 <VL53L0X_perform_single_ref_calibration+0x3a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800c6fa:	1cfb      	adds	r3, r7, #3
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2201      	movs	r2, #1
 800c700:	4313      	orrs	r3, r2
 800c702:	b2da      	uxtb	r2, r3
 800c704:	187c      	adds	r4, r7, r1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2100      	movs	r1, #0
 800c70a:	0018      	movs	r0, r3
 800c70c:	f003 f92a 	bl	800f964 <VL53L0X_WrByte>
 800c710:	0003      	movs	r3, r0
 800c712:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800c714:	220f      	movs	r2, #15
 800c716:	18bb      	adds	r3, r7, r2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	b25b      	sxtb	r3, r3
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d106      	bne.n	800c72e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c720:	18bc      	adds	r4, r7, r2
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	0018      	movs	r0, r3
 800c726:	f000 fa5c 	bl	800cbe2 <VL53L0X_measurement_poll_for_completion>
 800c72a:	0003      	movs	r3, r0
 800c72c:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c72e:	220f      	movs	r2, #15
 800c730:	18bb      	adds	r3, r7, r2
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	b25b      	sxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d107      	bne.n	800c74a <VL53L0X_perform_single_ref_calibration+0x70>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c73a:	18bc      	adds	r4, r7, r2
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2100      	movs	r1, #0
 800c740:	0018      	movs	r0, r3
 800c742:	f7ff f9a9 	bl	800ba98 <VL53L0X_ClearInterruptMask>
 800c746:	0003      	movs	r3, r0
 800c748:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c74a:	220f      	movs	r2, #15
 800c74c:	18bb      	adds	r3, r7, r2
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	b25b      	sxtb	r3, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	d108      	bne.n	800c768 <VL53L0X_perform_single_ref_calibration+0x8e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800c756:	18bc      	adds	r4, r7, r2
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	2100      	movs	r1, #0
 800c75e:	0018      	movs	r0, r3
 800c760:	f003 f900 	bl	800f964 <VL53L0X_WrByte>
 800c764:	0003      	movs	r3, r0
 800c766:	7023      	strb	r3, [r4, #0]

	return Status;
 800c768:	230f      	movs	r3, #15
 800c76a:	18fb      	adds	r3, r7, r3
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b25b      	sxtb	r3, r3
}
 800c770:	0018      	movs	r0, r3
 800c772:	46bd      	mov	sp, r7
 800c774:	b005      	add	sp, #20
 800c776:	bd90      	pop	{r4, r7, pc}

0800c778 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	000c      	movs	r4, r1
 800c782:	0010      	movs	r0, r2
 800c784:	0019      	movs	r1, r3
 800c786:	1cfb      	adds	r3, r7, #3
 800c788:	1c22      	adds	r2, r4, #0
 800c78a:	701a      	strb	r2, [r3, #0]
 800c78c:	1cbb      	adds	r3, r7, #2
 800c78e:	1c02      	adds	r2, r0, #0
 800c790:	701a      	strb	r2, [r3, #0]
 800c792:	1c7b      	adds	r3, r7, #1
 800c794:	1c0a      	adds	r2, r1, #0
 800c796:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c798:	240f      	movs	r4, #15
 800c79a:	193b      	adds	r3, r7, r4
 800c79c:	2200      	movs	r2, #0
 800c79e:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalint = 0;
 800c7a0:	230e      	movs	r3, #14
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	21ff      	movs	r1, #255	; 0xff
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	f003 f8d8 	bl	800f964 <VL53L0X_WrByte>
 800c7b4:	0003      	movs	r3, r0
 800c7b6:	0019      	movs	r1, r3
 800c7b8:	193b      	adds	r3, r7, r4
 800c7ba:	193a      	adds	r2, r7, r4
 800c7bc:	7812      	ldrb	r2, [r2, #0]
 800c7be:	430a      	orrs	r2, r1
 800c7c0:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	0018      	movs	r0, r3
 800c7ca:	f003 f8cb 	bl	800f964 <VL53L0X_WrByte>
 800c7ce:	0003      	movs	r3, r0
 800c7d0:	0019      	movs	r1, r3
 800c7d2:	193b      	adds	r3, r7, r4
 800c7d4:	193a      	adds	r2, r7, r4
 800c7d6:	7812      	ldrb	r2, [r2, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	21ff      	movs	r1, #255	; 0xff
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	f003 f8be 	bl	800f964 <VL53L0X_WrByte>
 800c7e8:	0003      	movs	r3, r0
 800c7ea:	0019      	movs	r1, r3
 800c7ec:	193b      	adds	r3, r7, r4
 800c7ee:	193a      	adds	r2, r7, r4
 800c7f0:	7812      	ldrb	r2, [r2, #0]
 800c7f2:	430a      	orrs	r2, r1
 800c7f4:	701a      	strb	r2, [r3, #0]

	if (read_not_write) {
 800c7f6:	1cfb      	adds	r3, r7, #3
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d026      	beq.n	800c84c <VL53L0X_ref_calibration_io+0xd4>
		if (vhv_enable)
 800c7fe:	2328      	movs	r3, #40	; 0x28
 800c800:	18fb      	adds	r3, r7, r3
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00c      	beq.n	800c822 <VL53L0X_ref_calibration_io+0xaa>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800c808:	6a3a      	ldr	r2, [r7, #32]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	21cb      	movs	r1, #203	; 0xcb
 800c80e:	0018      	movs	r0, r3
 800c810:	f003 f957 	bl	800fac2 <VL53L0X_RdByte>
 800c814:	0003      	movs	r3, r0
 800c816:	0019      	movs	r1, r3
 800c818:	193b      	adds	r3, r7, r4
 800c81a:	193a      	adds	r2, r7, r4
 800c81c:	7812      	ldrb	r2, [r2, #0]
 800c81e:	430a      	orrs	r2, r1
 800c820:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800c822:	232c      	movs	r3, #44	; 0x2c
 800c824:	18fb      	adds	r3, r7, r3
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d037      	beq.n	800c89c <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800c82c:	230e      	movs	r3, #14
 800c82e:	18fa      	adds	r2, r7, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	21ee      	movs	r1, #238	; 0xee
 800c834:	0018      	movs	r0, r3
 800c836:	f003 f944 	bl	800fac2 <VL53L0X_RdByte>
 800c83a:	0003      	movs	r3, r0
 800c83c:	0019      	movs	r1, r3
 800c83e:	220f      	movs	r2, #15
 800c840:	18bb      	adds	r3, r7, r2
 800c842:	18ba      	adds	r2, r7, r2
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	430a      	orrs	r2, r1
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	e027      	b.n	800c89c <VL53L0X_ref_calibration_io+0x124>
	} else {
		if (vhv_enable)
 800c84c:	2328      	movs	r3, #40	; 0x28
 800c84e:	18fb      	adds	r3, r7, r3
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00e      	beq.n	800c874 <VL53L0X_ref_calibration_io+0xfc>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800c856:	1cbb      	adds	r3, r7, #2
 800c858:	781a      	ldrb	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	21cb      	movs	r1, #203	; 0xcb
 800c85e:	0018      	movs	r0, r3
 800c860:	f003 f880 	bl	800f964 <VL53L0X_WrByte>
 800c864:	0003      	movs	r3, r0
 800c866:	0019      	movs	r1, r3
 800c868:	220f      	movs	r2, #15
 800c86a:	18bb      	adds	r3, r7, r2
 800c86c:	18ba      	adds	r2, r7, r2
 800c86e:	7812      	ldrb	r2, [r2, #0]
 800c870:	430a      	orrs	r2, r1
 800c872:	701a      	strb	r2, [r3, #0]
		if (phase_enable)
 800c874:	232c      	movs	r3, #44	; 0x2c
 800c876:	18fb      	adds	r3, r7, r3
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00e      	beq.n	800c89c <VL53L0X_ref_calibration_io+0x124>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800c87e:	1c7b      	adds	r3, r7, #1
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	2280      	movs	r2, #128	; 0x80
 800c886:	21ee      	movs	r1, #238	; 0xee
 800c888:	f003 f8d4 	bl	800fa34 <VL53L0X_UpdateByte>
 800c88c:	0003      	movs	r3, r0
 800c88e:	0019      	movs	r1, r3
 800c890:	220f      	movs	r2, #15
 800c892:	18bb      	adds	r3, r7, r2
 800c894:	18ba      	adds	r2, r7, r2
 800c896:	7812      	ldrb	r2, [r2, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	701a      	strb	r2, [r3, #0]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	21ff      	movs	r1, #255	; 0xff
 800c8a2:	0018      	movs	r0, r3
 800c8a4:	f003 f85e 	bl	800f964 <VL53L0X_WrByte>
 800c8a8:	0003      	movs	r3, r0
 800c8aa:	0019      	movs	r1, r3
 800c8ac:	240f      	movs	r4, #15
 800c8ae:	193b      	adds	r3, r7, r4
 800c8b0:	193a      	adds	r2, r7, r4
 800c8b2:	7812      	ldrb	r2, [r2, #0]
 800c8b4:	430a      	orrs	r2, r1
 800c8b6:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	2100      	movs	r1, #0
 800c8be:	0018      	movs	r0, r3
 800c8c0:	f003 f850 	bl	800f964 <VL53L0X_WrByte>
 800c8c4:	0003      	movs	r3, r0
 800c8c6:	0019      	movs	r1, r3
 800c8c8:	193b      	adds	r3, r7, r4
 800c8ca:	193a      	adds	r2, r7, r4
 800c8cc:	7812      	ldrb	r2, [r2, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	701a      	strb	r2, [r3, #0]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	21ff      	movs	r1, #255	; 0xff
 800c8d8:	0018      	movs	r0, r3
 800c8da:	f003 f843 	bl	800f964 <VL53L0X_WrByte>
 800c8de:	0003      	movs	r3, r0
 800c8e0:	0019      	movs	r1, r3
 800c8e2:	0020      	movs	r0, r4
 800c8e4:	183b      	adds	r3, r7, r0
 800c8e6:	183a      	adds	r2, r7, r0
 800c8e8:	7812      	ldrb	r2, [r2, #0]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	701a      	strb	r2, [r3, #0]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800c8ee:	230e      	movs	r3, #14
 800c8f0:	18fb      	adds	r3, r7, r3
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2210      	movs	r2, #16
 800c8f6:	4393      	bics	r3, r2
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	701a      	strb	r2, [r3, #0]

	return Status;
 800c8fe:	183b      	adds	r3, r7, r0
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b25b      	sxtb	r3, r3
}
 800c904:	0018      	movs	r0, r3
 800c906:	46bd      	mov	sp, r7
 800c908:	b005      	add	sp, #20
 800c90a:	bd90      	pop	{r4, r7, pc}

0800c90c <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800c90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c90e:	b08b      	sub	sp, #44	; 0x2c
 800c910:	af04      	add	r7, sp, #16
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	0019      	movs	r1, r3
 800c918:	1dfb      	adds	r3, r7, #7
 800c91a:	701a      	strb	r2, [r3, #0]
 800c91c:	1dbb      	adds	r3, r7, #6
 800c91e:	1c0a      	adds	r2, r1, #0
 800c920:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c922:	2317      	movs	r3, #23
 800c924:	18fb      	adds	r3, r7, r3
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800c92a:	2116      	movs	r1, #22
 800c92c:	187b      	adds	r3, r7, r1
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800c932:	2315      	movs	r3, #21
 800c934:	18fb      	adds	r3, r7, r3
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800c93a:	2314      	movs	r3, #20
 800c93c:	18fb      	adds	r3, r7, r3
 800c93e:	2200      	movs	r2, #0
 800c940:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCalInt = 0;
 800c942:	2313      	movs	r3, #19
 800c944:	18fb      	adds	r3, r7, r3
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800c94a:	1dbb      	adds	r3, r7, #6
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d005      	beq.n	800c95e <VL53L0X_perform_vhv_calibration+0x52>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800c952:	187b      	adds	r3, r7, r1
 800c954:	68f9      	ldr	r1, [r7, #12]
 800c956:	2298      	movs	r2, #152	; 0x98
 800c958:	0052      	lsls	r2, r2, #1
 800c95a:	5c8a      	ldrb	r2, [r1, r2]
 800c95c:	701a      	strb	r2, [r3, #0]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800c95e:	2517      	movs	r5, #23
 800c960:	197c      	adds	r4, r7, r5
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2201      	movs	r2, #1
 800c966:	2101      	movs	r1, #1
 800c968:	0018      	movs	r0, r3
 800c96a:	f002 fffb 	bl	800f964 <VL53L0X_WrByte>
 800c96e:	0003      	movs	r3, r0
 800c970:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800c972:	197b      	adds	r3, r7, r5
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	b25b      	sxtb	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d107      	bne.n	800c98c <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800c97c:	197c      	adds	r4, r7, r5
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2140      	movs	r1, #64	; 0x40
 800c982:	0018      	movs	r0, r3
 800c984:	f7ff fea9 	bl	800c6da <VL53L0X_perform_single_ref_calibration>
 800c988:	0003      	movs	r3, r0
 800c98a:	7023      	strb	r3, [r4, #0]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800c98c:	2217      	movs	r2, #23
 800c98e:	18bb      	adds	r3, r7, r2
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b25b      	sxtb	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11b      	bne.n	800c9d0 <VL53L0X_perform_vhv_calibration+0xc4>
 800c998:	1dfb      	adds	r3, r7, #7
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d117      	bne.n	800c9d0 <VL53L0X_perform_vhv_calibration+0xc4>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800c9a0:	18bc      	adds	r4, r7, r2
 800c9a2:	2314      	movs	r3, #20
 800c9a4:	18fb      	adds	r3, r7, r3
 800c9a6:	7819      	ldrb	r1, [r3, #0]
 800c9a8:	2315      	movs	r3, #21
 800c9aa:	18fb      	adds	r3, r7, r3
 800c9ac:	781a      	ldrb	r2, [r3, #0]
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	2313      	movs	r3, #19
 800c9ba:	18fb      	adds	r3, r7, r3
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	000b      	movs	r3, r1
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	f7ff fed7 	bl	800c778 <VL53L0X_ref_calibration_io>
 800c9ca:	0003      	movs	r3, r0
 800c9cc:	7023      	strb	r3, [r4, #0]
 800c9ce:	e002      	b.n	800c9d6 <VL53L0X_perform_vhv_calibration+0xca>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800c9d6:	2517      	movs	r5, #23
 800c9d8:	197b      	adds	r3, r7, r5
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d119      	bne.n	800ca16 <VL53L0X_perform_vhv_calibration+0x10a>
 800c9e2:	1dbb      	adds	r3, r7, #6
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d015      	beq.n	800ca16 <VL53L0X_perform_vhv_calibration+0x10a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800c9ea:	197c      	adds	r4, r7, r5
 800c9ec:	2616      	movs	r6, #22
 800c9ee:	19bb      	adds	r3, r7, r6
 800c9f0:	781a      	ldrb	r2, [r3, #0]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	0018      	movs	r0, r3
 800c9f8:	f002 ffb4 	bl	800f964 <VL53L0X_WrByte>
 800c9fc:	0003      	movs	r3, r0
 800c9fe:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800ca00:	197b      	adds	r3, r7, r5
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	b25b      	sxtb	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d105      	bne.n	800ca16 <VL53L0X_perform_vhv_calibration+0x10a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	19b9      	adds	r1, r7, r6
 800ca0e:	2398      	movs	r3, #152	; 0x98
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	7809      	ldrb	r1, [r1, #0]
 800ca14:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800ca16:	2317      	movs	r3, #23
 800ca18:	18fb      	adds	r3, r7, r3
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	b25b      	sxtb	r3, r3
}
 800ca1e:	0018      	movs	r0, r3
 800ca20:	46bd      	mov	sp, r7
 800ca22:	b007      	add	sp, #28
 800ca24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca26 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800ca26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca28:	b08b      	sub	sp, #44	; 0x2c
 800ca2a:	af04      	add	r7, sp, #16
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	0019      	movs	r1, r3
 800ca32:	1dfb      	adds	r3, r7, #7
 800ca34:	701a      	strb	r2, [r3, #0]
 800ca36:	1dbb      	adds	r3, r7, #6
 800ca38:	1c0a      	adds	r2, r1, #0
 800ca3a:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca3c:	2317      	movs	r3, #23
 800ca3e:	18fb      	adds	r3, r7, r3
 800ca40:	2200      	movs	r2, #0
 800ca42:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800ca44:	2116      	movs	r1, #22
 800ca46:	187b      	adds	r3, r7, r1
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
	uint8_t VhvSettings = 0;
 800ca4c:	2315      	movs	r3, #21
 800ca4e:	18fb      	adds	r3, r7, r3
 800ca50:	2200      	movs	r2, #0
 800ca52:	701a      	strb	r2, [r3, #0]
	uint8_t PhaseCal = 0;
 800ca54:	2314      	movs	r3, #20
 800ca56:	18fb      	adds	r3, r7, r3
 800ca58:	2200      	movs	r2, #0
 800ca5a:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800ca5c:	1dbb      	adds	r3, r7, #6
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d005      	beq.n	800ca70 <VL53L0X_perform_phase_calibration+0x4a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ca64:	187b      	adds	r3, r7, r1
 800ca66:	68f9      	ldr	r1, [r7, #12]
 800ca68:	2298      	movs	r2, #152	; 0x98
 800ca6a:	0052      	lsls	r2, r2, #1
 800ca6c:	5c8a      	ldrb	r2, [r1, r2]
 800ca6e:	701a      	strb	r2, [r3, #0]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800ca70:	2517      	movs	r5, #23
 800ca72:	197c      	adds	r4, r7, r5
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2202      	movs	r2, #2
 800ca78:	2101      	movs	r1, #1
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f002 ff72 	bl	800f964 <VL53L0X_WrByte>
 800ca80:	0003      	movs	r3, r0
 800ca82:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE)
 800ca84:	197b      	adds	r3, r7, r5
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	b25b      	sxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d107      	bne.n	800ca9e <VL53L0X_perform_phase_calibration+0x78>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800ca8e:	197c      	adds	r4, r7, r5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2100      	movs	r1, #0
 800ca94:	0018      	movs	r0, r3
 800ca96:	f7ff fe20 	bl	800c6da <VL53L0X_perform_single_ref_calibration>
 800ca9a:	0003      	movs	r3, r0
 800ca9c:	7023      	strb	r3, [r4, #0]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800ca9e:	2217      	movs	r2, #23
 800caa0:	18bb      	adds	r3, r7, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	b25b      	sxtb	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d11b      	bne.n	800cae2 <VL53L0X_perform_phase_calibration+0xbc>
 800caaa:	1dfb      	adds	r3, r7, #7
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d117      	bne.n	800cae2 <VL53L0X_perform_phase_calibration+0xbc>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800cab2:	18bc      	adds	r4, r7, r2
 800cab4:	2314      	movs	r3, #20
 800cab6:	18fb      	adds	r3, r7, r3
 800cab8:	7819      	ldrb	r1, [r3, #0]
 800caba:	2315      	movs	r3, #21
 800cabc:	18fb      	adds	r3, r7, r3
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	2301      	movs	r3, #1
 800cac4:	9303      	str	r3, [sp, #12]
 800cac6:	2300      	movs	r3, #0
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	2313      	movs	r3, #19
 800cad0:	18fb      	adds	r3, r7, r3
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	000b      	movs	r3, r1
 800cad6:	2101      	movs	r1, #1
 800cad8:	f7ff fe4e 	bl	800c778 <VL53L0X_ref_calibration_io>
 800cadc:	0003      	movs	r3, r0
 800cade:	7023      	strb	r3, [r4, #0]
 800cae0:	e002      	b.n	800cae8 <VL53L0X_perform_phase_calibration+0xc2>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2200      	movs	r2, #0
 800cae6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800cae8:	2517      	movs	r5, #23
 800caea:	197b      	adds	r3, r7, r5
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	b25b      	sxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d119      	bne.n	800cb28 <VL53L0X_perform_phase_calibration+0x102>
 800caf4:	1dbb      	adds	r3, r7, #6
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d015      	beq.n	800cb28 <VL53L0X_perform_phase_calibration+0x102>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cafc:	197c      	adds	r4, r7, r5
 800cafe:	2616      	movs	r6, #22
 800cb00:	19bb      	adds	r3, r7, r6
 800cb02:	781a      	ldrb	r2, [r3, #0]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2101      	movs	r1, #1
 800cb08:	0018      	movs	r0, r3
 800cb0a:	f002 ff2b 	bl	800f964 <VL53L0X_WrByte>
 800cb0e:	0003      	movs	r3, r0
 800cb10:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cb12:	197b      	adds	r3, r7, r5
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	b25b      	sxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d105      	bne.n	800cb28 <VL53L0X_perform_phase_calibration+0x102>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	19b9      	adds	r1, r7, r6
 800cb20:	2398      	movs	r3, #152	; 0x98
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	7809      	ldrb	r1, [r1, #0]
 800cb26:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800cb28:	2317      	movs	r3, #23
 800cb2a:	18fb      	adds	r3, r7, r3
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	b25b      	sxtb	r3, r3
}
 800cb30:	0018      	movs	r0, r3
 800cb32:	46bd      	mov	sp, r7
 800cb34:	b007      	add	sp, #28
 800cb36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb38 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800cb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb3a:	b087      	sub	sp, #28
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	001a      	movs	r2, r3
 800cb46:	1cfb      	adds	r3, r7, #3
 800cb48:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb4a:	2017      	movs	r0, #23
 800cb4c:	183b      	adds	r3, r7, r0
 800cb4e:	2200      	movs	r2, #0
 800cb50:	701a      	strb	r2, [r3, #0]
	uint8_t SequenceConfig = 0;
 800cb52:	2116      	movs	r1, #22
 800cb54:	187b      	adds	r3, r7, r1
 800cb56:	2200      	movs	r2, #0
 800cb58:	701a      	strb	r2, [r3, #0]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cb5a:	187b      	adds	r3, r7, r1
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	2298      	movs	r2, #152	; 0x98
 800cb60:	0052      	lsls	r2, r2, #1
 800cb62:	5c8a      	ldrb	r2, [r1, r2]
 800cb64:	701a      	strb	r2, [r3, #0]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800cb66:	0005      	movs	r5, r0
 800cb68:	183c      	adds	r4, r7, r0
 800cb6a:	1cfb      	adds	r3, r7, #3
 800cb6c:	781a      	ldrb	r2, [r3, #0]
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	2300      	movs	r3, #0
 800cb74:	f7ff feca 	bl	800c90c <VL53L0X_perform_vhv_calibration>
 800cb78:	0003      	movs	r3, r0
 800cb7a:	7023      	strb	r3, [r4, #0]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800cb7c:	197b      	adds	r3, r7, r5
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	b25b      	sxtb	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <VL53L0X_perform_ref_calibration+0x62>
		Status = VL53L0X_perform_phase_calibration(
 800cb86:	197c      	adds	r4, r7, r5
 800cb88:	1cfb      	adds	r3, r7, #3
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	2300      	movs	r3, #0
 800cb92:	f7ff ff48 	bl	800ca26 <VL53L0X_perform_phase_calibration>
 800cb96:	0003      	movs	r3, r0
 800cb98:	7023      	strb	r3, [r4, #0]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800cb9a:	2517      	movs	r5, #23
 800cb9c:	197b      	adds	r3, r7, r5
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	b25b      	sxtb	r3, r3
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d115      	bne.n	800cbd2 <VL53L0X_perform_ref_calibration+0x9a>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cba6:	197c      	adds	r4, r7, r5
 800cba8:	2616      	movs	r6, #22
 800cbaa:	19bb      	adds	r3, r7, r6
 800cbac:	781a      	ldrb	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	0018      	movs	r0, r3
 800cbb4:	f002 fed6 	bl	800f964 <VL53L0X_WrByte>
 800cbb8:	0003      	movs	r3, r0
 800cbba:	7023      	strb	r3, [r4, #0]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800cbbc:	197b      	adds	r3, r7, r5
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	b25b      	sxtb	r3, r3
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d105      	bne.n	800cbd2 <VL53L0X_perform_ref_calibration+0x9a>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	19b9      	adds	r1, r7, r6
 800cbca:	2398      	movs	r3, #152	; 0x98
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	7809      	ldrb	r1, [r1, #0]
 800cbd0:	54d1      	strb	r1, [r2, r3]

	}

	return Status;
 800cbd2:	2317      	movs	r3, #23
 800cbd4:	18fb      	adds	r3, r7, r3
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	b25b      	sxtb	r3, r3
}
 800cbda:	0018      	movs	r0, r3
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	b007      	add	sp, #28
 800cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbe2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800cbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe4:	b087      	sub	sp, #28
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbea:	2317      	movs	r3, #23
 800cbec:	18fb      	adds	r3, r7, r3
 800cbee:	2200      	movs	r2, #0
 800cbf0:	701a      	strb	r2, [r3, #0]
	uint8_t NewDataReady = 0;
 800cbf2:	230f      	movs	r3, #15
 800cbf4:	18fb      	adds	r3, r7, r3
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	701a      	strb	r2, [r3, #0]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800cbfe:	2517      	movs	r5, #23
 800cc00:	197c      	adds	r4, r7, r5
 800cc02:	260f      	movs	r6, #15
 800cc04:	19ba      	adds	r2, r7, r6
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	0011      	movs	r1, r2
 800cc0a:	0018      	movs	r0, r3
 800cc0c:	f7fe fb9b 	bl	800b346 <VL53L0X_GetMeasurementDataReady>
 800cc10:	0003      	movs	r3, r0
 800cc12:	7023      	strb	r3, [r4, #0]
		if (Status != 0)
 800cc14:	0029      	movs	r1, r5
 800cc16:	187b      	adds	r3, r7, r1
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b25b      	sxtb	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d114      	bne.n	800cc4a <VL53L0X_measurement_poll_for_completion+0x68>
			break; /* the error is set */

		if (NewDataReady == 1)
 800cc20:	19bb      	adds	r3, r7, r6
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d012      	beq.n	800cc4e <VL53L0X_measurement_poll_for_completion+0x6c>
			break; /* done note that status == 0 */

		LoopNb++;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800cc2e:	693a      	ldr	r2, [r7, #16]
 800cc30:	23fa      	movs	r3, #250	; 0xfa
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d303      	bcc.n	800cc40 <VL53L0X_measurement_poll_for_completion+0x5e>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cc38:	187b      	adds	r3, r7, r1
 800cc3a:	22f9      	movs	r2, #249	; 0xf9
 800cc3c:	701a      	strb	r2, [r3, #0]
			break;
 800cc3e:	e007      	b.n	800cc50 <VL53L0X_measurement_poll_for_completion+0x6e>
		}

		VL53L0X_PollingDelay(Dev);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	0018      	movs	r0, r3
 800cc44:	f002 fffa 	bl	800fc3c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800cc48:	e7d9      	b.n	800cbfe <VL53L0X_measurement_poll_for_completion+0x1c>
			break; /* the error is set */
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	e000      	b.n	800cc50 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* done note that status == 0 */
 800cc4e:	46c0      	nop			; (mov r8, r8)
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800cc50:	2317      	movs	r3, #23
 800cc52:	18fb      	adds	r3, r7, r3
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	b25b      	sxtb	r3, r3
}
 800cc58:	0018      	movs	r0, r3
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	b007      	add	sp, #28
 800cc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc60 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	0002      	movs	r2, r0
 800cc68:	1dfb      	adds	r3, r7, #7
 800cc6a:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cc6c:	210f      	movs	r1, #15
 800cc6e:	187b      	adds	r3, r7, r1
 800cc70:	2200      	movs	r2, #0
 800cc72:	701a      	strb	r2, [r3, #0]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cc74:	1dfb      	adds	r3, r7, #7
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	187a      	adds	r2, r7, r1
 800cc7e:	18db      	adds	r3, r3, r3
 800cc80:	7013      	strb	r3, [r2, #0]

	return vcsel_period_pclks;
 800cc82:	187b      	adds	r3, r7, r1
 800cc84:	781b      	ldrb	r3, [r3, #0]
}
 800cc86:	0018      	movs	r0, r3
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	b004      	add	sp, #16
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	0002      	movs	r2, r0
 800cc96:	1dfb      	adds	r3, r7, #7
 800cc98:	701a      	strb	r2, [r3, #0]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800cc9a:	210f      	movs	r1, #15
 800cc9c:	187b      	adds	r3, r7, r1
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800cca2:	1dfb      	adds	r3, r7, #7
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	085b      	lsrs	r3, r3, #1
 800cca8:	b2da      	uxtb	r2, r3
 800ccaa:	187b      	adds	r3, r7, r1
 800ccac:	3a01      	subs	r2, #1
 800ccae:	701a      	strb	r2, [r3, #0]

	return vcsel_period_reg;
 800ccb0:	187b      	adds	r3, r7, r1
 800ccb2:	781b      	ldrb	r3, [r3, #0]
}
 800ccb4:	0018      	movs	r0, r3
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	b004      	add	sp, #16
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800ccc8:	2380      	movs	r3, #128	; 0x80
 800ccca:	05db      	lsls	r3, r3, #23
 800cccc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800ccce:	e002      	b.n	800ccd6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	089b      	lsrs	r3, r3, #2
 800ccd4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d8f8      	bhi.n	800ccd0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800ccde:	e017      	b.n	800cd10 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	18d3      	adds	r3, r2, r3
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d30b      	bcc.n	800cd04 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	18d3      	adds	r3, r2, r3
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	085b      	lsrs	r3, r3, #1
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	18d3      	adds	r3, r2, r3
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	e002      	b.n	800cd0a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	085b      	lsrs	r3, r3, #1
 800cd08:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	089b      	lsrs	r3, r3, #2
 800cd0e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e4      	bne.n	800cce0 <VL53L0X_isqrt+0x24>
	}

	return res;
 800cd16:	68fb      	ldr	r3, [r7, #12]
}
 800cd18:	0018      	movs	r0, r3
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	b004      	add	sp, #16
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd28:	2417      	movs	r4, #23
 800cd2a:	193b      	adds	r3, r7, r4
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	2183      	movs	r1, #131	; 0x83
 800cd36:	0018      	movs	r0, r3
 800cd38:	f002 fe14 	bl	800f964 <VL53L0X_WrByte>
 800cd3c:	0003      	movs	r3, r0
 800cd3e:	0019      	movs	r1, r3
 800cd40:	193b      	adds	r3, r7, r4
 800cd42:	193a      	adds	r2, r7, r4
 800cd44:	7812      	ldrb	r2, [r2, #0]
 800cd46:	430a      	orrs	r2, r1
 800cd48:	701a      	strb	r2, [r3, #0]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800cd4a:	193b      	adds	r3, r7, r4
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	b25b      	sxtb	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d126      	bne.n	800cda2 <VL53L0X_device_read_strobe+0x82>
		LoopNb = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800cd58:	2617      	movs	r6, #23
 800cd5a:	19bc      	adds	r4, r7, r6
 800cd5c:	250f      	movs	r5, #15
 800cd5e:	197a      	adds	r2, r7, r5
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2183      	movs	r1, #131	; 0x83
 800cd64:	0018      	movs	r0, r3
 800cd66:	f002 feac 	bl	800fac2 <VL53L0X_RdByte>
 800cd6a:	0003      	movs	r3, r0
 800cd6c:	7023      	strb	r3, [r4, #0]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800cd6e:	197b      	adds	r3, r7, r5
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10c      	bne.n	800cd90 <VL53L0X_device_read_strobe+0x70>
 800cd76:	19bb      	adds	r3, r7, r6
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	b25b      	sxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d107      	bne.n	800cd90 <VL53L0X_device_read_strobe+0x70>
					break;

			LoopNb = LoopNb + 1;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	3301      	adds	r3, #1
 800cd84:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	23fa      	movs	r3, #250	; 0xfa
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d3e3      	bcc.n	800cd58 <VL53L0X_device_read_strobe+0x38>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	23fa      	movs	r3, #250	; 0xfa
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d303      	bcc.n	800cda2 <VL53L0X_device_read_strobe+0x82>
			Status = VL53L0X_ERROR_TIME_OUT;
 800cd9a:	2317      	movs	r3, #23
 800cd9c:	18fb      	adds	r3, r7, r3
 800cd9e:	22f9      	movs	r2, #249	; 0xf9
 800cda0:	701a      	strb	r2, [r3, #0]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	2183      	movs	r1, #131	; 0x83
 800cda8:	0018      	movs	r0, r3
 800cdaa:	f002 fddb 	bl	800f964 <VL53L0X_WrByte>
 800cdae:	0003      	movs	r3, r0
 800cdb0:	0019      	movs	r1, r3
 800cdb2:	2017      	movs	r0, #23
 800cdb4:	183b      	adds	r3, r7, r0
 800cdb6:	183a      	adds	r2, r7, r0
 800cdb8:	7812      	ldrb	r2, [r2, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800cdbe:	183b      	adds	r3, r7, r0
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	b25b      	sxtb	r3, r3

}
 800cdc4:	0018      	movs	r0, r3
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	b007      	add	sp, #28
 800cdca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdcc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800cdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdce:	b099      	sub	sp, #100	; 0x64
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	000a      	movs	r2, r1
 800cdd6:	1cfb      	adds	r3, r7, #3
 800cdd8:	701a      	strb	r2, [r3, #0]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdda:	245f      	movs	r4, #95	; 0x5f
 800cddc:	193b      	adds	r3, r7, r4
 800cdde:	2200      	movs	r2, #0
 800cde0:	701a      	strb	r2, [r3, #0]
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800cde2:	235e      	movs	r3, #94	; 0x5e
 800cde4:	18fb      	adds	r3, r7, r3
 800cde6:	2200      	movs	r2, #0
 800cde8:	701a      	strb	r2, [r3, #0]
	uint8_t ReferenceSpadType = 0;
 800cdea:	225d      	movs	r2, #93	; 0x5d
 800cdec:	18bb      	adds	r3, r7, r2
 800cdee:	2200      	movs	r2, #0
 800cdf0:	701a      	strb	r2, [r3, #0]
	uint32_t PartUIDUpper = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800cdfe:	215a      	movs	r1, #90	; 0x5a
 800ce00:	187b      	adds	r3, r7, r1
 800ce02:	2200      	movs	r2, #0
 800ce04:	801a      	strh	r2, [r3, #0]
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ce06:	23c8      	movs	r3, #200	; 0xc8
 800ce08:	015b      	lsls	r3, r3, #5
 800ce0a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ce10:	2300      	movs	r3, #0
 800ce12:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ce18:	253f      	movs	r5, #63	; 0x3f
 800ce1a:	197b      	adds	r3, r7, r5
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	21f0      	movs	r1, #240	; 0xf0
 800ce20:	5c52      	ldrb	r2, [r2, r1]
 800ce22:	701a      	strb	r2, [r3, #0]
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ce24:	197b      	adds	r3, r7, r5
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b07      	cmp	r3, #7
 800ce2a:	d101      	bne.n	800ce30 <VL53L0X_get_info_from_device+0x64>
 800ce2c:	f000 fc51 	bl	800d6d2 <VL53L0X_get_info_from_device+0x906>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	2180      	movs	r1, #128	; 0x80
 800ce36:	0018      	movs	r0, r3
 800ce38:	f002 fd94 	bl	800f964 <VL53L0X_WrByte>
 800ce3c:	0003      	movs	r3, r0
 800ce3e:	0019      	movs	r1, r3
 800ce40:	193b      	adds	r3, r7, r4
 800ce42:	193a      	adds	r2, r7, r4
 800ce44:	7812      	ldrb	r2, [r2, #0]
 800ce46:	430a      	orrs	r2, r1
 800ce48:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	21ff      	movs	r1, #255	; 0xff
 800ce50:	0018      	movs	r0, r3
 800ce52:	f002 fd87 	bl	800f964 <VL53L0X_WrByte>
 800ce56:	0003      	movs	r3, r0
 800ce58:	0019      	movs	r1, r3
 800ce5a:	193b      	adds	r3, r7, r4
 800ce5c:	193a      	adds	r2, r7, r4
 800ce5e:	7812      	ldrb	r2, [r2, #0]
 800ce60:	430a      	orrs	r2, r1
 800ce62:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	2100      	movs	r1, #0
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	f002 fd7a 	bl	800f964 <VL53L0X_WrByte>
 800ce70:	0003      	movs	r3, r0
 800ce72:	0019      	movs	r1, r3
 800ce74:	193b      	adds	r3, r7, r4
 800ce76:	193a      	adds	r2, r7, r4
 800ce78:	7812      	ldrb	r2, [r2, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2206      	movs	r2, #6
 800ce82:	21ff      	movs	r1, #255	; 0xff
 800ce84:	0018      	movs	r0, r3
 800ce86:	f002 fd6d 	bl	800f964 <VL53L0X_WrByte>
 800ce8a:	0003      	movs	r3, r0
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	193b      	adds	r3, r7, r4
 800ce90:	193a      	adds	r2, r7, r4
 800ce92:	7812      	ldrb	r2, [r2, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800ce98:	2637      	movs	r6, #55	; 0x37
 800ce9a:	19ba      	adds	r2, r7, r6
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2183      	movs	r1, #131	; 0x83
 800cea0:	0018      	movs	r0, r3
 800cea2:	f002 fe0e 	bl	800fac2 <VL53L0X_RdByte>
 800cea6:	0003      	movs	r3, r0
 800cea8:	0019      	movs	r1, r3
 800ceaa:	193b      	adds	r3, r7, r4
 800ceac:	193a      	adds	r2, r7, r4
 800ceae:	7812      	ldrb	r2, [r2, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800ceb4:	19bb      	adds	r3, r7, r6
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	2204      	movs	r2, #4
 800ceba:	4313      	orrs	r3, r2
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2183      	movs	r1, #131	; 0x83
 800cec2:	0018      	movs	r0, r3
 800cec4:	f002 fd4e 	bl	800f964 <VL53L0X_WrByte>
 800cec8:	0003      	movs	r3, r0
 800ceca:	0019      	movs	r1, r3
 800cecc:	193b      	adds	r3, r7, r4
 800cece:	193a      	adds	r2, r7, r4
 800ced0:	7812      	ldrb	r2, [r2, #0]
 800ced2:	430a      	orrs	r2, r1
 800ced4:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2207      	movs	r2, #7
 800ceda:	21ff      	movs	r1, #255	; 0xff
 800cedc:	0018      	movs	r0, r3
 800cede:	f002 fd41 	bl	800f964 <VL53L0X_WrByte>
 800cee2:	0003      	movs	r3, r0
 800cee4:	0019      	movs	r1, r3
 800cee6:	193b      	adds	r3, r7, r4
 800cee8:	193a      	adds	r2, r7, r4
 800ceea:	7812      	ldrb	r2, [r2, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	2181      	movs	r1, #129	; 0x81
 800cef6:	0018      	movs	r0, r3
 800cef8:	f002 fd34 	bl	800f964 <VL53L0X_WrByte>
 800cefc:	0003      	movs	r3, r0
 800cefe:	0019      	movs	r1, r3
 800cf00:	193b      	adds	r3, r7, r4
 800cf02:	193a      	adds	r2, r7, r4
 800cf04:	7812      	ldrb	r2, [r2, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_PollingDelay(Dev);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f002 fe95 	bl	800fc3c <VL53L0X_PollingDelay>
 800cf12:	0003      	movs	r3, r0
 800cf14:	0019      	movs	r1, r3
 800cf16:	193b      	adds	r3, r7, r4
 800cf18:	193a      	adds	r2, r7, r4
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	2180      	movs	r1, #128	; 0x80
 800cf26:	0018      	movs	r0, r3
 800cf28:	f002 fd1c 	bl	800f964 <VL53L0X_WrByte>
 800cf2c:	0003      	movs	r3, r0
 800cf2e:	0019      	movs	r1, r3
 800cf30:	193b      	adds	r3, r7, r4
 800cf32:	193a      	adds	r2, r7, r4
 800cf34:	7812      	ldrb	r2, [r2, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	701a      	strb	r2, [r3, #0]

		if (((option & 1) == 1) &&
 800cf3a:	1cfb      	adds	r3, r7, #3
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4013      	ands	r3, r2
 800cf42:	d100      	bne.n	800cf46 <VL53L0X_get_info_from_device+0x17a>
 800cf44:	e0a3      	b.n	800d08e <VL53L0X_get_info_from_device+0x2c2>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800cf46:	197b      	adds	r3, r7, r5
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800cf4e:	d000      	beq.n	800cf52 <VL53L0X_get_info_from_device+0x186>
 800cf50:	e09d      	b.n	800d08e <VL53L0X_get_info_from_device+0x2c2>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	226b      	movs	r2, #107	; 0x6b
 800cf56:	2194      	movs	r1, #148	; 0x94
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f002 fd03 	bl	800f964 <VL53L0X_WrByte>
 800cf5e:	0003      	movs	r3, r0
 800cf60:	0019      	movs	r1, r3
 800cf62:	193b      	adds	r3, r7, r4
 800cf64:	193a      	adds	r2, r7, r4
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f7ff fed6 	bl	800cd20 <VL53L0X_device_read_strobe>
 800cf74:	0003      	movs	r3, r0
 800cf76:	0019      	movs	r1, r3
 800cf78:	193b      	adds	r3, r7, r4
 800cf7a:	193a      	adds	r2, r7, r4
 800cf7c:	7812      	ldrb	r2, [r2, #0]
 800cf7e:	430a      	orrs	r2, r1
 800cf80:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cf82:	2630      	movs	r6, #48	; 0x30
 800cf84:	19ba      	adds	r2, r7, r6
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2190      	movs	r1, #144	; 0x90
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	f002 fe10 	bl	800fbb0 <VL53L0X_RdDWord>
 800cf90:	0003      	movs	r3, r0
 800cf92:	0019      	movs	r1, r3
 800cf94:	193b      	adds	r3, r7, r4
 800cf96:	193a      	adds	r2, r7, r4
 800cf98:	7812      	ldrb	r2, [r2, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	701a      	strb	r2, [r3, #0]

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	0a1b      	lsrs	r3, r3, #8
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	235e      	movs	r3, #94	; 0x5e
 800cfa6:	18fb      	adds	r3, r7, r3
 800cfa8:	217f      	movs	r1, #127	; 0x7f
 800cfaa:	400a      	ands	r2, r1
 800cfac:	701a      	strb	r2, [r3, #0]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	0bdb      	lsrs	r3, r3, #15
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	235d      	movs	r3, #93	; 0x5d
 800cfb6:	18fb      	adds	r3, r7, r3
 800cfb8:	2101      	movs	r1, #1
 800cfba:	400a      	ands	r2, r1
 800cfbc:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2224      	movs	r2, #36	; 0x24
 800cfc2:	2194      	movs	r1, #148	; 0x94
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f002 fccd 	bl	800f964 <VL53L0X_WrByte>
 800cfca:	0003      	movs	r3, r0
 800cfcc:	0019      	movs	r1, r3
 800cfce:	193b      	adds	r3, r7, r4
 800cfd0:	193a      	adds	r2, r7, r4
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	430a      	orrs	r2, r1
 800cfd6:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	0018      	movs	r0, r3
 800cfdc:	f7ff fea0 	bl	800cd20 <VL53L0X_device_read_strobe>
 800cfe0:	0003      	movs	r3, r0
 800cfe2:	0019      	movs	r1, r3
 800cfe4:	193b      	adds	r3, r7, r4
 800cfe6:	193a      	adds	r2, r7, r4
 800cfe8:	7812      	ldrb	r2, [r2, #0]
 800cfea:	430a      	orrs	r2, r1
 800cfec:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800cfee:	19ba      	adds	r2, r7, r6
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2190      	movs	r1, #144	; 0x90
 800cff4:	0018      	movs	r0, r3
 800cff6:	f002 fddb 	bl	800fbb0 <VL53L0X_RdDWord>
 800cffa:	0003      	movs	r3, r0
 800cffc:	0019      	movs	r1, r3
 800cffe:	193b      	adds	r3, r7, r4
 800d000:	193a      	adds	r2, r7, r4
 800d002:	7812      	ldrb	r2, [r2, #0]
 800d004:	430a      	orrs	r2, r1
 800d006:	701a      	strb	r2, [r3, #0]


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	0e1b      	lsrs	r3, r3, #24
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	2508      	movs	r5, #8
 800d010:	197b      	adds	r3, r7, r5
 800d012:	701a      	strb	r2, [r3, #0]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800d014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d016:	0c1b      	lsrs	r3, r3, #16
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	197b      	adds	r3, r7, r5
 800d01c:	705a      	strb	r2, [r3, #1]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	0a1b      	lsrs	r3, r3, #8
 800d022:	b2da      	uxtb	r2, r3
 800d024:	197b      	adds	r3, r7, r5
 800d026:	709a      	strb	r2, [r3, #2]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	197b      	adds	r3, r7, r5
 800d02e:	70da      	strb	r2, [r3, #3]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2225      	movs	r2, #37	; 0x25
 800d034:	2194      	movs	r1, #148	; 0x94
 800d036:	0018      	movs	r0, r3
 800d038:	f002 fc94 	bl	800f964 <VL53L0X_WrByte>
 800d03c:	0003      	movs	r3, r0
 800d03e:	0019      	movs	r1, r3
 800d040:	193b      	adds	r3, r7, r4
 800d042:	193a      	adds	r2, r7, r4
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	430a      	orrs	r2, r1
 800d048:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	0018      	movs	r0, r3
 800d04e:	f7ff fe67 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d052:	0003      	movs	r3, r0
 800d054:	0019      	movs	r1, r3
 800d056:	193b      	adds	r3, r7, r4
 800d058:	193a      	adds	r2, r7, r4
 800d05a:	7812      	ldrb	r2, [r2, #0]
 800d05c:	430a      	orrs	r2, r1
 800d05e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d060:	19ba      	adds	r2, r7, r6
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2190      	movs	r1, #144	; 0x90
 800d066:	0018      	movs	r0, r3
 800d068:	f002 fda2 	bl	800fbb0 <VL53L0X_RdDWord>
 800d06c:	0003      	movs	r3, r0
 800d06e:	0019      	movs	r1, r3
 800d070:	193b      	adds	r3, r7, r4
 800d072:	193a      	adds	r2, r7, r4
 800d074:	7812      	ldrb	r2, [r2, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	701a      	strb	r2, [r3, #0]

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	0e1b      	lsrs	r3, r3, #24
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	197b      	adds	r3, r7, r5
 800d082:	711a      	strb	r2, [r3, #4]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	0c1b      	lsrs	r3, r3, #16
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	197b      	adds	r3, r7, r5
 800d08c:	715a      	strb	r2, [r3, #5]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800d08e:	1cfb      	adds	r3, r7, #3
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2202      	movs	r2, #2
 800d094:	4013      	ands	r3, r2
 800d096:	d100      	bne.n	800d09a <VL53L0X_get_info_from_device+0x2ce>
 800d098:	e1aa      	b.n	800d3f0 <VL53L0X_get_info_from_device+0x624>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d09a:	233f      	movs	r3, #63	; 0x3f
 800d09c:	18fb      	adds	r3, r7, r3
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800d0a4:	d000      	beq.n	800d0a8 <VL53L0X_get_info_from_device+0x2dc>
 800d0a6:	e1a3      	b.n	800d3f0 <VL53L0X_get_info_from_device+0x624>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	2194      	movs	r1, #148	; 0x94
 800d0ae:	0018      	movs	r0, r3
 800d0b0:	f002 fc58 	bl	800f964 <VL53L0X_WrByte>
 800d0b4:	0003      	movs	r3, r0
 800d0b6:	0019      	movs	r1, r3
 800d0b8:	245f      	movs	r4, #95	; 0x5f
 800d0ba:	193b      	adds	r3, r7, r4
 800d0bc:	193a      	adds	r2, r7, r4
 800d0be:	7812      	ldrb	r2, [r2, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	0018      	movs	r0, r3
 800d0c8:	f7ff fe2a 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d0cc:	0003      	movs	r3, r0
 800d0ce:	0019      	movs	r1, r3
 800d0d0:	193b      	adds	r3, r7, r4
 800d0d2:	193a      	adds	r2, r7, r4
 800d0d4:	7812      	ldrb	r2, [r2, #0]
 800d0d6:	430a      	orrs	r2, r1
 800d0d8:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800d0da:	232f      	movs	r3, #47	; 0x2f
 800d0dc:	18fa      	adds	r2, r7, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2190      	movs	r1, #144	; 0x90
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	f002 fced 	bl	800fac2 <VL53L0X_RdByte>
 800d0e8:	0003      	movs	r3, r0
 800d0ea:	0019      	movs	r1, r3
 800d0ec:	193b      	adds	r3, r7, r4
 800d0ee:	193a      	adds	r2, r7, r4
 800d0f0:	7812      	ldrb	r2, [r2, #0]
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	227b      	movs	r2, #123	; 0x7b
 800d0fa:	2194      	movs	r1, #148	; 0x94
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f002 fc31 	bl	800f964 <VL53L0X_WrByte>
 800d102:	0003      	movs	r3, r0
 800d104:	0019      	movs	r1, r3
 800d106:	193b      	adds	r3, r7, r4
 800d108:	193a      	adds	r2, r7, r4
 800d10a:	7812      	ldrb	r2, [r2, #0]
 800d10c:	430a      	orrs	r2, r1
 800d10e:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	0018      	movs	r0, r3
 800d114:	f7ff fe04 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d118:	0003      	movs	r3, r0
 800d11a:	0019      	movs	r1, r3
 800d11c:	193b      	adds	r3, r7, r4
 800d11e:	193a      	adds	r2, r7, r4
 800d120:	7812      	ldrb	r2, [r2, #0]
 800d122:	430a      	orrs	r2, r1
 800d124:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800d126:	232e      	movs	r3, #46	; 0x2e
 800d128:	18fa      	adds	r2, r7, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2190      	movs	r1, #144	; 0x90
 800d12e:	0018      	movs	r0, r3
 800d130:	f002 fcc7 	bl	800fac2 <VL53L0X_RdByte>
 800d134:	0003      	movs	r3, r0
 800d136:	0019      	movs	r1, r3
 800d138:	193b      	adds	r3, r7, r4
 800d13a:	193a      	adds	r2, r7, r4
 800d13c:	7812      	ldrb	r2, [r2, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2277      	movs	r2, #119	; 0x77
 800d146:	2194      	movs	r1, #148	; 0x94
 800d148:	0018      	movs	r0, r3
 800d14a:	f002 fc0b 	bl	800f964 <VL53L0X_WrByte>
 800d14e:	0003      	movs	r3, r0
 800d150:	0019      	movs	r1, r3
 800d152:	193b      	adds	r3, r7, r4
 800d154:	193a      	adds	r2, r7, r4
 800d156:	7812      	ldrb	r2, [r2, #0]
 800d158:	430a      	orrs	r2, r1
 800d15a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	0018      	movs	r0, r3
 800d160:	f7ff fdde 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d164:	0003      	movs	r3, r0
 800d166:	0019      	movs	r1, r3
 800d168:	193b      	adds	r3, r7, r4
 800d16a:	193a      	adds	r2, r7, r4
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d172:	2330      	movs	r3, #48	; 0x30
 800d174:	18fa      	adds	r2, r7, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2190      	movs	r1, #144	; 0x90
 800d17a:	0018      	movs	r0, r3
 800d17c:	f002 fd18 	bl	800fbb0 <VL53L0X_RdDWord>
 800d180:	0003      	movs	r3, r0
 800d182:	0019      	movs	r1, r3
 800d184:	193b      	adds	r3, r7, r4
 800d186:	193a      	adds	r2, r7, r4
 800d188:	7812      	ldrb	r2, [r2, #0]
 800d18a:	430a      	orrs	r2, r1
 800d18c:	701a      	strb	r2, [r3, #0]

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	0e5b      	lsrs	r3, r3, #25
 800d192:	b2db      	uxtb	r3, r3
 800d194:	227f      	movs	r2, #127	; 0x7f
 800d196:	4013      	ands	r3, r2
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	2510      	movs	r5, #16
 800d19c:	197b      	adds	r3, r7, r5
 800d19e:	701a      	strb	r2, [r3, #0]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	0c9b      	lsrs	r3, r3, #18
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	227f      	movs	r2, #127	; 0x7f
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	197b      	adds	r3, r7, r5
 800d1ae:	705a      	strb	r2, [r3, #1]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	0adb      	lsrs	r3, r3, #11
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	227f      	movs	r2, #127	; 0x7f
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	197b      	adds	r3, r7, r5
 800d1be:	709a      	strb	r2, [r3, #2]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c2:	091b      	lsrs	r3, r3, #4
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	227f      	movs	r2, #127	; 0x7f
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	197b      	adds	r3, r7, r5
 800d1ce:	70da      	strb	r2, [r3, #3]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	2278      	movs	r2, #120	; 0x78
 800d1da:	4013      	ands	r3, r2
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	2637      	movs	r6, #55	; 0x37
 800d1e0:	19bb      	adds	r3, r7, r6
 800d1e2:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2278      	movs	r2, #120	; 0x78
 800d1e8:	2194      	movs	r1, #148	; 0x94
 800d1ea:	0018      	movs	r0, r3
 800d1ec:	f002 fbba 	bl	800f964 <VL53L0X_WrByte>
 800d1f0:	0003      	movs	r3, r0
 800d1f2:	0019      	movs	r1, r3
 800d1f4:	193b      	adds	r3, r7, r4
 800d1f6:	193a      	adds	r2, r7, r4
 800d1f8:	7812      	ldrb	r2, [r2, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	0018      	movs	r0, r3
 800d202:	f7ff fd8d 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d206:	0003      	movs	r3, r0
 800d208:	0019      	movs	r1, r3
 800d20a:	193b      	adds	r3, r7, r4
 800d20c:	193a      	adds	r2, r7, r4
 800d20e:	7812      	ldrb	r2, [r2, #0]
 800d210:	430a      	orrs	r2, r1
 800d212:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d214:	2330      	movs	r3, #48	; 0x30
 800d216:	18fa      	adds	r2, r7, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2190      	movs	r1, #144	; 0x90
 800d21c:	0018      	movs	r0, r3
 800d21e:	f002 fcc7 	bl	800fbb0 <VL53L0X_RdDWord>
 800d222:	0003      	movs	r3, r0
 800d224:	0019      	movs	r1, r3
 800d226:	193b      	adds	r3, r7, r4
 800d228:	193a      	adds	r2, r7, r4
 800d22a:	7812      	ldrb	r2, [r2, #0]
 800d22c:	430a      	orrs	r2, r1
 800d22e:	701a      	strb	r2, [r3, #0]

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	0f5b      	lsrs	r3, r3, #29
 800d234:	b2db      	uxtb	r3, r3
 800d236:	227f      	movs	r2, #127	; 0x7f
 800d238:	4013      	ands	r3, r2
 800d23a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800d23c:	0031      	movs	r1, r6
 800d23e:	187b      	adds	r3, r7, r1
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	18d3      	adds	r3, r2, r3
 800d244:	b2da      	uxtb	r2, r3
 800d246:	197b      	adds	r3, r7, r5
 800d248:	711a      	strb	r2, [r3, #4]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	0d9b      	lsrs	r3, r3, #22
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	227f      	movs	r2, #127	; 0x7f
 800d252:	4013      	ands	r3, r2
 800d254:	b2da      	uxtb	r2, r3
 800d256:	197b      	adds	r3, r7, r5
 800d258:	715a      	strb	r2, [r3, #5]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	0bdb      	lsrs	r3, r3, #15
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	227f      	movs	r2, #127	; 0x7f
 800d262:	4013      	ands	r3, r2
 800d264:	b2da      	uxtb	r2, r3
 800d266:	197b      	adds	r3, r7, r5
 800d268:	719a      	strb	r2, [r3, #6]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	0a1b      	lsrs	r3, r3, #8
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	227f      	movs	r2, #127	; 0x7f
 800d272:	4013      	ands	r3, r2
 800d274:	b2da      	uxtb	r2, r3
 800d276:	197b      	adds	r3, r7, r5
 800d278:	71da      	strb	r2, [r3, #7]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27c:	085b      	lsrs	r3, r3, #1
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	227f      	movs	r2, #127	; 0x7f
 800d282:	4013      	ands	r3, r2
 800d284:	b2da      	uxtb	r2, r3
 800d286:	197b      	adds	r3, r7, r5
 800d288:	721a      	strb	r2, [r3, #8]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	019b      	lsls	r3, r3, #6
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2240      	movs	r2, #64	; 0x40
 800d294:	4013      	ands	r3, r2
 800d296:	b2da      	uxtb	r2, r3
 800d298:	000e      	movs	r6, r1
 800d29a:	19bb      	adds	r3, r7, r6
 800d29c:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2279      	movs	r2, #121	; 0x79
 800d2a2:	2194      	movs	r1, #148	; 0x94
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f002 fb5d 	bl	800f964 <VL53L0X_WrByte>
 800d2aa:	0003      	movs	r3, r0
 800d2ac:	0019      	movs	r1, r3
 800d2ae:	193b      	adds	r3, r7, r4
 800d2b0:	193a      	adds	r2, r7, r4
 800d2b2:	7812      	ldrb	r2, [r2, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	f7ff fd30 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d2c0:	0003      	movs	r3, r0
 800d2c2:	0019      	movs	r1, r3
 800d2c4:	193b      	adds	r3, r7, r4
 800d2c6:	193a      	adds	r2, r7, r4
 800d2c8:	7812      	ldrb	r2, [r2, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d2ce:	2330      	movs	r3, #48	; 0x30
 800d2d0:	18fa      	adds	r2, r7, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2190      	movs	r1, #144	; 0x90
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f002 fc6a 	bl	800fbb0 <VL53L0X_RdDWord>
 800d2dc:	0003      	movs	r3, r0
 800d2de:	0019      	movs	r1, r3
 800d2e0:	193b      	adds	r3, r7, r4
 800d2e2:	193a      	adds	r2, r7, r4
 800d2e4:	7812      	ldrb	r2, [r2, #0]
 800d2e6:	430a      	orrs	r2, r1
 800d2e8:	701a      	strb	r2, [r3, #0]

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	0e9b      	lsrs	r3, r3, #26
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	227f      	movs	r2, #127	; 0x7f
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800d2f6:	19bb      	adds	r3, r7, r6
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	18d3      	adds	r3, r2, r3
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	197b      	adds	r3, r7, r5
 800d300:	725a      	strb	r2, [r3, #9]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	0cdb      	lsrs	r3, r3, #19
 800d306:	b2db      	uxtb	r3, r3
 800d308:	227f      	movs	r2, #127	; 0x7f
 800d30a:	4013      	ands	r3, r2
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	197b      	adds	r3, r7, r5
 800d310:	729a      	strb	r2, [r3, #10]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	0b1b      	lsrs	r3, r3, #12
 800d316:	b2db      	uxtb	r3, r3
 800d318:	227f      	movs	r2, #127	; 0x7f
 800d31a:	4013      	ands	r3, r2
 800d31c:	b2da      	uxtb	r2, r3
 800d31e:	197b      	adds	r3, r7, r5
 800d320:	72da      	strb	r2, [r3, #11]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	095b      	lsrs	r3, r3, #5
 800d326:	b2db      	uxtb	r3, r3
 800d328:	227f      	movs	r2, #127	; 0x7f
 800d32a:	4013      	ands	r3, r2
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	197b      	adds	r3, r7, r5
 800d330:	731a      	strb	r2, [r3, #12]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	b2db      	uxtb	r3, r3
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	227c      	movs	r2, #124	; 0x7c
 800d33c:	4013      	ands	r3, r2
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	19bb      	adds	r3, r7, r6
 800d342:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	227a      	movs	r2, #122	; 0x7a
 800d348:	2194      	movs	r1, #148	; 0x94
 800d34a:	0018      	movs	r0, r3
 800d34c:	f002 fb0a 	bl	800f964 <VL53L0X_WrByte>
 800d350:	0003      	movs	r3, r0
 800d352:	0019      	movs	r1, r3
 800d354:	193b      	adds	r3, r7, r4
 800d356:	193a      	adds	r2, r7, r4
 800d358:	7812      	ldrb	r2, [r2, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_device_read_strobe(Dev);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	0018      	movs	r0, r3
 800d362:	f7ff fcdd 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d366:	0003      	movs	r3, r0
 800d368:	0019      	movs	r1, r3
 800d36a:	193b      	adds	r3, r7, r4
 800d36c:	193a      	adds	r2, r7, r4
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d374:	2330      	movs	r3, #48	; 0x30
 800d376:	18fa      	adds	r2, r7, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2190      	movs	r1, #144	; 0x90
 800d37c:	0018      	movs	r0, r3
 800d37e:	f002 fc17 	bl	800fbb0 <VL53L0X_RdDWord>
 800d382:	0003      	movs	r3, r0
 800d384:	0019      	movs	r1, r3
 800d386:	193b      	adds	r3, r7, r4
 800d388:	193a      	adds	r2, r7, r4
 800d38a:	7812      	ldrb	r2, [r2, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	701a      	strb	r2, [r3, #0]

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	0f9b      	lsrs	r3, r3, #30
 800d394:	b2db      	uxtb	r3, r3
 800d396:	227f      	movs	r2, #127	; 0x7f
 800d398:	4013      	ands	r3, r2
 800d39a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800d39c:	19bb      	adds	r3, r7, r6
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	18d3      	adds	r3, r2, r3
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	0029      	movs	r1, r5
 800d3a6:	187b      	adds	r3, r7, r1
 800d3a8:	735a      	strb	r2, [r3, #13]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	0ddb      	lsrs	r3, r3, #23
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	227f      	movs	r2, #127	; 0x7f
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	187b      	adds	r3, r7, r1
 800d3b8:	739a      	strb	r2, [r3, #14]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	0c1b      	lsrs	r3, r3, #16
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	227f      	movs	r2, #127	; 0x7f
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	187b      	adds	r3, r7, r1
 800d3c8:	73da      	strb	r2, [r3, #15]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	0a5b      	lsrs	r3, r3, #9
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	227f      	movs	r2, #127	; 0x7f
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	187b      	adds	r3, r7, r1
 800d3d8:	741a      	strb	r2, [r3, #16]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3dc:	089b      	lsrs	r3, r3, #2
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	227f      	movs	r2, #127	; 0x7f
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	187b      	adds	r3, r7, r1
 800d3e8:	745a      	strb	r2, [r3, #17]
			ProductId[18] = '\0';
 800d3ea:	187b      	adds	r3, r7, r1
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	749a      	strb	r2, [r3, #18]

		}

		if (((option & 4) == 4) &&
 800d3f0:	1cfb      	adds	r3, r7, #3
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2204      	movs	r2, #4
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	d100      	bne.n	800d3fc <VL53L0X_get_info_from_device+0x630>
 800d3fa:	e0fc      	b.n	800d5f6 <VL53L0X_get_info_from_device+0x82a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d3fc:	233f      	movs	r3, #63	; 0x3f
 800d3fe:	18fb      	adds	r3, r7, r3
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2204      	movs	r2, #4
 800d404:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800d406:	d000      	beq.n	800d40a <VL53L0X_get_info_from_device+0x63e>
 800d408:	e0f5      	b.n	800d5f6 <VL53L0X_get_info_from_device+0x82a>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	227b      	movs	r2, #123	; 0x7b
 800d40e:	2194      	movs	r1, #148	; 0x94
 800d410:	0018      	movs	r0, r3
 800d412:	f002 faa7 	bl	800f964 <VL53L0X_WrByte>
 800d416:	0003      	movs	r3, r0
 800d418:	0019      	movs	r1, r3
 800d41a:	245f      	movs	r4, #95	; 0x5f
 800d41c:	193b      	adds	r3, r7, r4
 800d41e:	193a      	adds	r2, r7, r4
 800d420:	7812      	ldrb	r2, [r2, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	0018      	movs	r0, r3
 800d42a:	f7ff fc79 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d42e:	0003      	movs	r3, r0
 800d430:	0019      	movs	r1, r3
 800d432:	193b      	adds	r3, r7, r4
 800d434:	193a      	adds	r2, r7, r4
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800d43c:	2328      	movs	r3, #40	; 0x28
 800d43e:	18fa      	adds	r2, r7, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2190      	movs	r1, #144	; 0x90
 800d444:	0018      	movs	r0, r3
 800d446:	f002 fbb3 	bl	800fbb0 <VL53L0X_RdDWord>
 800d44a:	0003      	movs	r3, r0
 800d44c:	0019      	movs	r1, r3
 800d44e:	193b      	adds	r3, r7, r4
 800d450:	193a      	adds	r2, r7, r4
 800d452:	7812      	ldrb	r2, [r2, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	227c      	movs	r2, #124	; 0x7c
 800d45c:	2194      	movs	r1, #148	; 0x94
 800d45e:	0018      	movs	r0, r3
 800d460:	f002 fa80 	bl	800f964 <VL53L0X_WrByte>
 800d464:	0003      	movs	r3, r0
 800d466:	0019      	movs	r1, r3
 800d468:	193b      	adds	r3, r7, r4
 800d46a:	193a      	adds	r2, r7, r4
 800d46c:	7812      	ldrb	r2, [r2, #0]
 800d46e:	430a      	orrs	r2, r1
 800d470:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	0018      	movs	r0, r3
 800d476:	f7ff fc53 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d47a:	0003      	movs	r3, r0
 800d47c:	0019      	movs	r1, r3
 800d47e:	193b      	adds	r3, r7, r4
 800d480:	193a      	adds	r2, r7, r4
 800d482:	7812      	ldrb	r2, [r2, #0]
 800d484:	430a      	orrs	r2, r1
 800d486:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800d488:	2324      	movs	r3, #36	; 0x24
 800d48a:	18fa      	adds	r2, r7, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2190      	movs	r1, #144	; 0x90
 800d490:	0018      	movs	r0, r3
 800d492:	f002 fb8d 	bl	800fbb0 <VL53L0X_RdDWord>
 800d496:	0003      	movs	r3, r0
 800d498:	0019      	movs	r1, r3
 800d49a:	193b      	adds	r3, r7, r4
 800d49c:	193a      	adds	r2, r7, r4
 800d49e:	7812      	ldrb	r2, [r2, #0]
 800d4a0:	430a      	orrs	r2, r1
 800d4a2:	701a      	strb	r2, [r3, #0]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2273      	movs	r2, #115	; 0x73
 800d4a8:	2194      	movs	r1, #148	; 0x94
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f002 fa5a 	bl	800f964 <VL53L0X_WrByte>
 800d4b0:	0003      	movs	r3, r0
 800d4b2:	0019      	movs	r1, r3
 800d4b4:	193b      	adds	r3, r7, r4
 800d4b6:	193a      	adds	r2, r7, r4
 800d4b8:	7812      	ldrb	r2, [r2, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f7ff fc2d 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d4c6:	0003      	movs	r3, r0
 800d4c8:	0019      	movs	r1, r3
 800d4ca:	193b      	adds	r3, r7, r4
 800d4cc:	193a      	adds	r2, r7, r4
 800d4ce:	7812      	ldrb	r2, [r2, #0]
 800d4d0:	430a      	orrs	r2, r1
 800d4d2:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d4d4:	2530      	movs	r5, #48	; 0x30
 800d4d6:	197a      	adds	r2, r7, r5
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2190      	movs	r1, #144	; 0x90
 800d4dc:	0018      	movs	r0, r3
 800d4de:	f002 fb67 	bl	800fbb0 <VL53L0X_RdDWord>
 800d4e2:	0003      	movs	r3, r0
 800d4e4:	0019      	movs	r1, r3
 800d4e6:	193b      	adds	r3, r7, r4
 800d4e8:	193a      	adds	r2, r7, r4
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	430a      	orrs	r2, r1
 800d4ee:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800d4f4:	041b      	lsls	r3, r3, #16
 800d4f6:	0c1b      	lsrs	r3, r3, #16
 800d4f8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2274      	movs	r2, #116	; 0x74
 800d4fe:	2194      	movs	r1, #148	; 0x94
 800d500:	0018      	movs	r0, r3
 800d502:	f002 fa2f 	bl	800f964 <VL53L0X_WrByte>
 800d506:	0003      	movs	r3, r0
 800d508:	0019      	movs	r1, r3
 800d50a:	193b      	adds	r3, r7, r4
 800d50c:	193a      	adds	r2, r7, r4
 800d50e:	7812      	ldrb	r2, [r2, #0]
 800d510:	430a      	orrs	r2, r1
 800d512:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	0018      	movs	r0, r3
 800d518:	f7ff fc02 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d51c:	0003      	movs	r3, r0
 800d51e:	0019      	movs	r1, r3
 800d520:	193b      	adds	r3, r7, r4
 800d522:	193a      	adds	r2, r7, r4
 800d524:	7812      	ldrb	r2, [r2, #0]
 800d526:	430a      	orrs	r2, r1
 800d528:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d52a:	197a      	adds	r2, r7, r5
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2190      	movs	r1, #144	; 0x90
 800d530:	0018      	movs	r0, r3
 800d532:	f002 fb3d 	bl	800fbb0 <VL53L0X_RdDWord>
 800d536:	0003      	movs	r3, r0
 800d538:	0019      	movs	r1, r3
 800d53a:	193b      	adds	r3, r7, r4
 800d53c:	193a      	adds	r2, r7, r4
 800d53e:	7812      	ldrb	r2, [r2, #0]
 800d540:	430a      	orrs	r2, r1
 800d542:	701a      	strb	r2, [r3, #0]

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800d548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d54a:	4313      	orrs	r3, r2
 800d54c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2275      	movs	r2, #117	; 0x75
 800d552:	2194      	movs	r1, #148	; 0x94
 800d554:	0018      	movs	r0, r3
 800d556:	f002 fa05 	bl	800f964 <VL53L0X_WrByte>
 800d55a:	0003      	movs	r3, r0
 800d55c:	0019      	movs	r1, r3
 800d55e:	193b      	adds	r3, r7, r4
 800d560:	193a      	adds	r2, r7, r4
 800d562:	7812      	ldrb	r2, [r2, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	0018      	movs	r0, r3
 800d56c:	f7ff fbd8 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d570:	0003      	movs	r3, r0
 800d572:	0019      	movs	r1, r3
 800d574:	193b      	adds	r3, r7, r4
 800d576:	193a      	adds	r2, r7, r4
 800d578:	7812      	ldrb	r2, [r2, #0]
 800d57a:	430a      	orrs	r2, r1
 800d57c:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d57e:	197a      	adds	r2, r7, r5
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2190      	movs	r1, #144	; 0x90
 800d584:	0018      	movs	r0, r3
 800d586:	f002 fb13 	bl	800fbb0 <VL53L0X_RdDWord>
 800d58a:	0003      	movs	r3, r0
 800d58c:	0019      	movs	r1, r3
 800d58e:	193b      	adds	r3, r7, r4
 800d590:	193a      	adds	r2, r7, r4
 800d592:	7812      	ldrb	r2, [r2, #0]
 800d594:	430a      	orrs	r2, r1
 800d596:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800d598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800d59c:	041b      	lsls	r3, r3, #16
 800d59e:	0c1b      	lsrs	r3, r3, #16
 800d5a0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2276      	movs	r2, #118	; 0x76
 800d5a6:	2194      	movs	r1, #148	; 0x94
 800d5a8:	0018      	movs	r0, r3
 800d5aa:	f002 f9db 	bl	800f964 <VL53L0X_WrByte>
 800d5ae:	0003      	movs	r3, r0
 800d5b0:	0019      	movs	r1, r3
 800d5b2:	193b      	adds	r3, r7, r4
 800d5b4:	193a      	adds	r2, r7, r4
 800d5b6:	7812      	ldrb	r2, [r2, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_device_read_strobe(Dev);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	0018      	movs	r0, r3
 800d5c0:	f7ff fbae 	bl	800cd20 <VL53L0X_device_read_strobe>
 800d5c4:	0003      	movs	r3, r0
 800d5c6:	0019      	movs	r1, r3
 800d5c8:	193b      	adds	r3, r7, r4
 800d5ca:	193a      	adds	r2, r7, r4
 800d5cc:	7812      	ldrb	r2, [r2, #0]
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800d5d2:	197a      	adds	r2, r7, r5
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2190      	movs	r1, #144	; 0x90
 800d5d8:	0018      	movs	r0, r3
 800d5da:	f002 fae9 	bl	800fbb0 <VL53L0X_RdDWord>
 800d5de:	0003      	movs	r3, r0
 800d5e0:	0019      	movs	r1, r3
 800d5e2:	193b      	adds	r3, r7, r4
 800d5e4:	193a      	adds	r2, r7, r4
 800d5e6:	7812      	ldrb	r2, [r2, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	701a      	strb	r2, [r3, #0]

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ee:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800d5f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2181      	movs	r1, #129	; 0x81
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f002 f9b1 	bl	800f964 <VL53L0X_WrByte>
 800d602:	0003      	movs	r3, r0
 800d604:	0019      	movs	r1, r3
 800d606:	245f      	movs	r4, #95	; 0x5f
 800d608:	193b      	adds	r3, r7, r4
 800d60a:	193a      	adds	r2, r7, r4
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2206      	movs	r2, #6
 800d616:	21ff      	movs	r1, #255	; 0xff
 800d618:	0018      	movs	r0, r3
 800d61a:	f002 f9a3 	bl	800f964 <VL53L0X_WrByte>
 800d61e:	0003      	movs	r3, r0
 800d620:	0019      	movs	r1, r3
 800d622:	193b      	adds	r3, r7, r4
 800d624:	193a      	adds	r2, r7, r4
 800d626:	7812      	ldrb	r2, [r2, #0]
 800d628:	430a      	orrs	r2, r1
 800d62a:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800d62c:	2537      	movs	r5, #55	; 0x37
 800d62e:	197a      	adds	r2, r7, r5
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2183      	movs	r1, #131	; 0x83
 800d634:	0018      	movs	r0, r3
 800d636:	f002 fa44 	bl	800fac2 <VL53L0X_RdByte>
 800d63a:	0003      	movs	r3, r0
 800d63c:	0019      	movs	r1, r3
 800d63e:	193b      	adds	r3, r7, r4
 800d640:	193a      	adds	r2, r7, r4
 800d642:	7812      	ldrb	r2, [r2, #0]
 800d644:	430a      	orrs	r2, r1
 800d646:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800d648:	197b      	adds	r3, r7, r5
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2204      	movs	r2, #4
 800d64e:	4393      	bics	r3, r2
 800d650:	b2da      	uxtb	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2183      	movs	r1, #131	; 0x83
 800d656:	0018      	movs	r0, r3
 800d658:	f002 f984 	bl	800f964 <VL53L0X_WrByte>
 800d65c:	0003      	movs	r3, r0
 800d65e:	0019      	movs	r1, r3
 800d660:	193b      	adds	r3, r7, r4
 800d662:	193a      	adds	r2, r7, r4
 800d664:	7812      	ldrb	r2, [r2, #0]
 800d666:	430a      	orrs	r2, r1
 800d668:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	21ff      	movs	r1, #255	; 0xff
 800d670:	0018      	movs	r0, r3
 800d672:	f002 f977 	bl	800f964 <VL53L0X_WrByte>
 800d676:	0003      	movs	r3, r0
 800d678:	0019      	movs	r1, r3
 800d67a:	193b      	adds	r3, r7, r4
 800d67c:	193a      	adds	r2, r7, r4
 800d67e:	7812      	ldrb	r2, [r2, #0]
 800d680:	430a      	orrs	r2, r1
 800d682:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2201      	movs	r2, #1
 800d688:	2100      	movs	r1, #0
 800d68a:	0018      	movs	r0, r3
 800d68c:	f002 f96a 	bl	800f964 <VL53L0X_WrByte>
 800d690:	0003      	movs	r3, r0
 800d692:	0019      	movs	r1, r3
 800d694:	193b      	adds	r3, r7, r4
 800d696:	193a      	adds	r2, r7, r4
 800d698:	7812      	ldrb	r2, [r2, #0]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	701a      	strb	r2, [r3, #0]

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	21ff      	movs	r1, #255	; 0xff
 800d6a4:	0018      	movs	r0, r3
 800d6a6:	f002 f95d 	bl	800f964 <VL53L0X_WrByte>
 800d6aa:	0003      	movs	r3, r0
 800d6ac:	0019      	movs	r1, r3
 800d6ae:	193b      	adds	r3, r7, r4
 800d6b0:	193a      	adds	r2, r7, r4
 800d6b2:	7812      	ldrb	r2, [r2, #0]
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	701a      	strb	r2, [r3, #0]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	2180      	movs	r1, #128	; 0x80
 800d6be:	0018      	movs	r0, r3
 800d6c0:	f002 f950 	bl	800f964 <VL53L0X_WrByte>
 800d6c4:	0003      	movs	r3, r0
 800d6c6:	0019      	movs	r1, r3
 800d6c8:	193b      	adds	r3, r7, r4
 800d6ca:	193a      	adds	r2, r7, r4
 800d6cc:	7812      	ldrb	r2, [r2, #0]
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	701a      	strb	r2, [r3, #0]
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d6d2:	235f      	movs	r3, #95	; 0x5f
 800d6d4:	18fb      	adds	r3, r7, r3
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	b25b      	sxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d000      	beq.n	800d6e0 <VL53L0X_get_info_from_device+0x914>
 800d6de:	e0a1      	b.n	800d824 <VL53L0X_get_info_from_device+0xa58>
 800d6e0:	213f      	movs	r1, #63	; 0x3f
 800d6e2:	187b      	adds	r3, r7, r1
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b07      	cmp	r3, #7
 800d6e8:	d100      	bne.n	800d6ec <VL53L0X_get_info_from_device+0x920>
 800d6ea:	e09b      	b.n	800d824 <VL53L0X_get_info_from_device+0xa58>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800d6ec:	1cfb      	adds	r3, r7, #3
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	d028      	beq.n	800d748 <VL53L0X_get_info_from_device+0x97c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800d6f6:	187b      	adds	r3, r7, r1
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	4013      	ands	r3, r2
		if (((option & 1) == 1) &&
 800d6fe:	d123      	bne.n	800d748 <VL53L0X_get_info_from_device+0x97c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	235e      	movs	r3, #94	; 0x5e
 800d704:	18f9      	adds	r1, r7, r3
 800d706:	2314      	movs	r3, #20
 800d708:	33ff      	adds	r3, #255	; 0xff
 800d70a:	7809      	ldrb	r1, [r1, #0]
 800d70c:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	235d      	movs	r3, #93	; 0x5d
 800d712:	18f9      	adds	r1, r7, r3
 800d714:	238a      	movs	r3, #138	; 0x8a
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	7809      	ldrb	r1, [r1, #0]
 800d71a:	54d1      	strb	r1, [r2, r3]
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d71c:	2300      	movs	r3, #0
 800d71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d720:	e00f      	b.n	800d742 <VL53L0X_get_info_from_device+0x976>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800d722:	2308      	movs	r3, #8
 800d724:	18fa      	adds	r2, r7, r3
 800d726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d728:	18d3      	adds	r3, r2, r3
 800d72a:	7818      	ldrb	r0, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	2395      	movs	r3, #149	; 0x95
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d734:	188a      	adds	r2, r1, r2
 800d736:	18d3      	adds	r3, r2, r3
 800d738:	1c02      	adds	r2, r0, #0
 800d73a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800d73c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d73e:	3301      	adds	r3, #1
 800d740:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d744:	2b05      	cmp	r3, #5
 800d746:	ddec      	ble.n	800d722 <VL53L0X_get_info_from_device+0x956>
			}
		}

		if (((option & 2) == 2) &&
 800d748:	1cfb      	adds	r3, r7, #3
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2202      	movs	r2, #2
 800d74e:	4013      	ands	r3, r2
 800d750:	d01b      	beq.n	800d78a <VL53L0X_get_info_from_device+0x9be>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800d752:	233f      	movs	r3, #63	; 0x3f
 800d754:	18fb      	adds	r3, r7, r3
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2202      	movs	r2, #2
 800d75a:	4013      	ands	r3, r2
		if (((option & 2) == 2) &&
 800d75c:	d115      	bne.n	800d78a <VL53L0X_get_info_from_device+0x9be>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d75e:	232f      	movs	r3, #47	; 0x2f
 800d760:	18fb      	adds	r3, r7, r3
 800d762:	7819      	ldrb	r1, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	22f1      	movs	r2, #241	; 0xf1
 800d768:	5499      	strb	r1, [r3, r2]
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d76a:	232e      	movs	r3, #46	; 0x2e
 800d76c:	18fb      	adds	r3, r7, r3
 800d76e:	7819      	ldrb	r1, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	22f2      	movs	r2, #242	; 0xf2
 800d774:	5499      	strb	r1, [r3, r2]
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	33f3      	adds	r3, #243	; 0xf3
 800d77a:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800d77c:	2310      	movs	r3, #16
 800d77e:	18fa      	adds	r2, r7, r3
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	0011      	movs	r1, r2
 800d784:	0018      	movs	r0, r3
 800d786:	f004 fb15 	bl	8011db4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800d78a:	1cfb      	adds	r3, r7, #3
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2204      	movs	r2, #4
 800d790:	4013      	ands	r3, r2
 800d792:	d038      	beq.n	800d806 <VL53L0X_get_info_from_device+0xa3a>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800d794:	233f      	movs	r3, #63	; 0x3f
 800d796:	18fb      	adds	r3, r7, r3
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2204      	movs	r2, #4
 800d79c:	4013      	ands	r3, r2
		if (((option & 4) == 4) &&
 800d79e:	d132      	bne.n	800d806 <VL53L0X_get_info_from_device+0xa3a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	238c      	movs	r3, #140	; 0x8c
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	50d1      	str	r1, [r2, r3]
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	238e      	movs	r3, #142	; 0x8e
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	50d1      	str	r1, [r2, r3]
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800d7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7b6:	025b      	lsls	r3, r3, #9
 800d7b8:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	2390      	movs	r3, #144	; 0x90
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7c2:	50d1      	str	r1, [r2, r3]
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800d7c4:	215a      	movs	r1, #90	; 0x5a
 800d7c6:	187b      	adds	r3, r7, r1
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	801a      	strh	r2, [r3, #0]
			if (DistMeasFixed1104_400_mm != 0) {
 800d7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d013      	beq.n	800d7fa <VL53L0X_get_info_from_device+0xa2e>
					OffsetFixed1104_mm =
 800d7d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800d7da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7dc:	0013      	movs	r3, r2
 800d7de:	015b      	lsls	r3, r3, #5
 800d7e0:	1a9b      	subs	r3, r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	189b      	adds	r3, r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	091a      	lsrs	r2, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800d7ea:	187b      	adds	r3, r7, r1
 800d7ec:	801a      	strh	r2, [r3, #0]
					OffsetMicroMeters *= -1;
 800d7ee:	187b      	adds	r3, r7, r1
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	425b      	negs	r3, r3
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	187b      	adds	r3, r7, r1
 800d7f8:	801a      	strh	r2, [r3, #0]
			}

			PALDevDataSet(Dev,
 800d7fa:	235a      	movs	r3, #90	; 0x5a
 800d7fc:	18fb      	adds	r3, r7, r3
 800d7fe:	2200      	movs	r2, #0
 800d800:	5e9a      	ldrsh	r2, [r3, r2]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800d806:	233f      	movs	r3, #63	; 0x3f
 800d808:	18fa      	adds	r2, r7, r3
 800d80a:	1cfb      	adds	r3, r7, #3
 800d80c:	7812      	ldrb	r2, [r2, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	4313      	orrs	r3, r2
 800d812:	b2da      	uxtb	r2, r3
 800d814:	2137      	movs	r1, #55	; 0x37
 800d816:	187b      	adds	r3, r7, r1
 800d818:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800d81a:	187b      	adds	r3, r7, r1
 800d81c:	7819      	ldrb	r1, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	22f0      	movs	r2, #240	; 0xf0
 800d822:	5499      	strb	r1, [r3, r2]
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d824:	235f      	movs	r3, #95	; 0x5f
 800d826:	18fb      	adds	r3, r7, r3
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b25b      	sxtb	r3, r3
}
 800d82c:	0018      	movs	r0, r3
 800d82e:	46bd      	mov	sp, r7
 800d830:	b019      	add	sp, #100	; 0x64
 800d832:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d834 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	000a      	movs	r2, r1
 800d83e:	1cfb      	adds	r3, r7, #3
 800d840:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800d842:	4a09      	ldr	r2, [pc, #36]	; (800d868 <VL53L0X_calc_macro_period_ps+0x34>)
 800d844:	2300      	movs	r3, #0
 800d846:	613a      	str	r2, [r7, #16]
 800d848:	617b      	str	r3, [r7, #20]

	macro_period_vclks = 2304;
 800d84a:	2390      	movs	r3, #144	; 0x90
 800d84c:	011b      	lsls	r3, r3, #4
 800d84e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800d850:	1cfb      	adds	r3, r7, #3
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	4353      	muls	r3, r2
	macro_period_ps = (uint32_t)(macro_period_vclks
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	4353      	muls	r3, r2
 800d85c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800d85e:	68bb      	ldr	r3, [r7, #8]
}
 800d860:	0018      	movs	r0, r3
 800d862:	46bd      	mov	sp, r7
 800d864:	b006      	add	sp, #24
 800d866:	bd80      	pop	{r7, pc}
 800d868:	00000677 	.word	0x00000677

0800d86c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800d874:	2316      	movs	r3, #22
 800d876:	18fb      	adds	r3, r7, r3
 800d878:	2200      	movs	r2, #0
 800d87a:	801a      	strh	r2, [r3, #0]
	uint32_t ls_byte = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800d880:	230e      	movs	r3, #14
 800d882:	18fb      	adds	r3, r7, r3
 800d884:	2200      	movs	r2, #0
 800d886:	801a      	strh	r2, [r3, #0]

	if (timeout_macro_clks > 0) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d01e      	beq.n	800d8cc <VL53L0X_encode_timeout+0x60>
		ls_byte = timeout_macro_clks - 1;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	3b01      	subs	r3, #1
 800d892:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d894:	e008      	b.n	800d8a8 <VL53L0X_encode_timeout+0x3c>
			ls_byte = ls_byte >> 1;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	085b      	lsrs	r3, r3, #1
 800d89a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800d89c:	210e      	movs	r1, #14
 800d89e:	187b      	adds	r3, r7, r1
 800d8a0:	881a      	ldrh	r2, [r3, #0]
 800d8a2:	187b      	adds	r3, r7, r1
 800d8a4:	3201      	adds	r2, #1
 800d8a6:	801a      	strh	r2, [r3, #0]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	22ff      	movs	r2, #255	; 0xff
 800d8ac:	4393      	bics	r3, r2
 800d8ae:	d1f2      	bne.n	800d896 <VL53L0X_encode_timeout+0x2a>
		}

		encoded_timeout = (ms_byte << 8)
 800d8b0:	230e      	movs	r3, #14
 800d8b2:	18fb      	adds	r3, r7, r3
 800d8b4:	881b      	ldrh	r3, [r3, #0]
 800d8b6:	021b      	lsls	r3, r3, #8
 800d8b8:	b299      	uxth	r1, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	22ff      	movs	r2, #255	; 0xff
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	b29a      	uxth	r2, r3
		encoded_timeout = (ms_byte << 8)
 800d8c4:	2316      	movs	r3, #22
 800d8c6:	18fb      	adds	r3, r7, r3
 800d8c8:	188a      	adds	r2, r1, r2
 800d8ca:	801a      	strh	r2, [r3, #0]
	}

	return encoded_timeout;
 800d8cc:	2316      	movs	r3, #22
 800d8ce:	18fb      	adds	r3, r7, r3
 800d8d0:	881b      	ldrh	r3, [r3, #0]

}
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	b006      	add	sp, #24
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b084      	sub	sp, #16
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	0002      	movs	r2, r0
 800d8e2:	1dbb      	adds	r3, r7, #6
 800d8e4:	801a      	strh	r2, [r3, #0]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d8ea:	1dbb      	adds	r3, r7, #6
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	22ff      	movs	r2, #255	; 0xff
 800d8f0:	4013      	ands	r3, r2
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800d8f2:	1dba      	adds	r2, r7, #6
 800d8f4:	8812      	ldrh	r2, [r2, #0]
 800d8f6:	0a12      	lsrs	r2, r2, #8
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800d900:	68fb      	ldr	r3, [r7, #12]
}
 800d902:	0018      	movs	r0, r3
 800d904:	46bd      	mov	sp, r7
 800d906:	b004      	add	sp, #16
 800d908:	bd80      	pop	{r7, pc}

0800d90a <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b088      	sub	sp, #32
 800d90e:	af00      	add	r7, sp, #0
 800d910:	60f8      	str	r0, [r7, #12]
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	1dfb      	adds	r3, r7, #7
 800d916:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d91c:	1dfb      	adds	r3, r7, #7
 800d91e:	781a      	ldrb	r2, [r3, #0]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	0011      	movs	r1, r2
 800d924:	0018      	movs	r0, r3
 800d926:	f7ff ff85 	bl	800d834 <VL53L0X_calc_macro_period_ps>
 800d92a:	0003      	movs	r3, r0
 800d92c:	61bb      	str	r3, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	33f5      	adds	r3, #245	; 0xf5
 800d932:	33ff      	adds	r3, #255	; 0xff
 800d934:	22fa      	movs	r2, #250	; 0xfa
 800d936:	0091      	lsls	r1, r2, #2
 800d938:	0018      	movs	r0, r3
 800d93a:	f7f2 fc01 	bl	8000140 <__udivsi3>
 800d93e:	0003      	movs	r3, r0
 800d940:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	0013      	movs	r3, r2
 800d946:	015b      	lsls	r3, r3, #5
 800d948:	1a9b      	subs	r3, r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	189b      	adds	r3, r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	001a      	movs	r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	18d3      	adds	r3, r2, r3
	timeout_period_mclks =
 800d958:	6979      	ldr	r1, [r7, #20]
 800d95a:	0018      	movs	r0, r3
 800d95c:	f7f2 fbf0 	bl	8000140 <__udivsi3>
 800d960:	0003      	movs	r3, r0
 800d962:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800d964:	69fb      	ldr	r3, [r7, #28]
}
 800d966:	0018      	movs	r0, r3
 800d968:	46bd      	mov	sp, r7
 800d96a:	b008      	add	sp, #32
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b086      	sub	sp, #24
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	0008      	movs	r0, r1
 800d978:	0011      	movs	r1, r2
 800d97a:	1cbb      	adds	r3, r7, #2
 800d97c:	1c02      	adds	r2, r0, #0
 800d97e:	801a      	strh	r2, [r3, #0]
 800d980:	1c7b      	adds	r3, r7, #1
 800d982:	1c0a      	adds	r2, r1, #0
 800d984:	701a      	strb	r2, [r3, #0]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800d98a:	1c7b      	adds	r3, r7, #1
 800d98c:	781a      	ldrb	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	0011      	movs	r1, r2
 800d992:	0018      	movs	r0, r3
 800d994:	f7ff ff4e 	bl	800d834 <VL53L0X_calc_macro_period_ps>
 800d998:	0003      	movs	r3, r0
 800d99a:	613b      	str	r3, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	33f5      	adds	r3, #245	; 0xf5
 800d9a0:	33ff      	adds	r3, #255	; 0xff
 800d9a2:	22fa      	movs	r2, #250	; 0xfa
 800d9a4:	0091      	lsls	r1, r2, #2
 800d9a6:	0018      	movs	r0, r3
 800d9a8:	f7f2 fbca 	bl	8000140 <__udivsi3>
 800d9ac:	0003      	movs	r3, r0
 800d9ae:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800d9b0:	1cbb      	adds	r3, r7, #2
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	4353      	muls	r3, r2
 800d9b8:	33f5      	adds	r3, #245	; 0xf5
 800d9ba:	33ff      	adds	r3, #255	; 0xff
	actual_timeout_period_us =
 800d9bc:	22fa      	movs	r2, #250	; 0xfa
 800d9be:	0091      	lsls	r1, r2, #2
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	f7f2 fbbd 	bl	8000140 <__udivsi3>
 800d9c6:	0003      	movs	r3, r0
 800d9c8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800d9ca:	697b      	ldr	r3, [r7, #20]
}
 800d9cc:	0018      	movs	r0, r3
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	b006      	add	sp, #24
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800d9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d6:	b08d      	sub	sp, #52	; 0x34
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	607a      	str	r2, [r7, #4]
 800d9de:	200b      	movs	r0, #11
 800d9e0:	183b      	adds	r3, r7, r0
 800d9e2:	1c0a      	adds	r2, r1, #0
 800d9e4:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9e6:	232f      	movs	r3, #47	; 0x2f
 800d9e8:	18fb      	adds	r3, r7, r3
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800d9ee:	2320      	movs	r3, #32
 800d9f0:	18fb      	adds	r3, r7, r3
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	701a      	strb	r2, [r3, #0]
	uint32_t TimeoutMicroSeconds = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800d9fa:	231e      	movs	r3, #30
 800d9fc:	18fb      	adds	r3, r7, r3
 800d9fe:	2200      	movs	r2, #0
 800da00:	801a      	strh	r2, [r3, #0]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800da02:	2324      	movs	r3, #36	; 0x24
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	2200      	movs	r2, #0
 800da08:	801a      	strh	r2, [r3, #0]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800da0a:	183b      	adds	r3, r7, r0
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d007      	beq.n	800da22 <get_sequence_step_timeout+0x4e>
 800da12:	183b      	adds	r3, r7, r0
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d003      	beq.n	800da22 <get_sequence_step_timeout+0x4e>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800da1a:	183b      	adds	r3, r7, r0
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d130      	bne.n	800da84 <get_sequence_step_timeout+0xb0>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800da22:	252f      	movs	r5, #47	; 0x2f
 800da24:	197c      	adds	r4, r7, r5
 800da26:	2321      	movs	r3, #33	; 0x21
 800da28:	18fa      	adds	r2, r7, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2100      	movs	r1, #0
 800da2e:	0018      	movs	r0, r3
 800da30:	f7fc fde0 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800da34:	0003      	movs	r3, r0
 800da36:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800da38:	197b      	adds	r3, r7, r5
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	b25b      	sxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d109      	bne.n	800da56 <get_sequence_step_timeout+0x82>
			Status = VL53L0X_RdByte(Dev,
 800da42:	197c      	adds	r4, r7, r5
 800da44:	2320      	movs	r3, #32
 800da46:	18fa      	adds	r2, r7, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2146      	movs	r1, #70	; 0x46
 800da4c:	0018      	movs	r0, r3
 800da4e:	f002 f838 	bl	800fac2 <VL53L0X_RdByte>
 800da52:	0003      	movs	r3, r0
 800da54:	7023      	strb	r3, [r4, #0]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800da56:	2320      	movs	r3, #32
 800da58:	18fb      	adds	r3, r7, r3
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	0018      	movs	r0, r3
 800da60:	f7ff ff3b 	bl	800d8da <VL53L0X_decode_timeout>
 800da64:	0002      	movs	r2, r0
 800da66:	2122      	movs	r1, #34	; 0x22
 800da68:	187b      	adds	r3, r7, r1
 800da6a:	801a      	strh	r2, [r3, #0]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800da6c:	2321      	movs	r3, #33	; 0x21
 800da6e:	18fb      	adds	r3, r7, r3
 800da70:	781a      	ldrb	r2, [r3, #0]
 800da72:	187b      	adds	r3, r7, r1
 800da74:	8819      	ldrh	r1, [r3, #0]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	0018      	movs	r0, r3
 800da7a:	f7ff ff78 	bl	800d96e <VL53L0X_calc_timeout_us>
 800da7e:	0003      	movs	r3, r0
 800da80:	62bb      	str	r3, [r7, #40]	; 0x28
 800da82:	e0b6      	b.n	800dbf2 <get_sequence_step_timeout+0x21e>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800da84:	230b      	movs	r3, #11
 800da86:	18fb      	adds	r3, r7, r3
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d13e      	bne.n	800db0c <get_sequence_step_timeout+0x138>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800da8e:	252f      	movs	r5, #47	; 0x2f
 800da90:	197c      	adds	r4, r7, r5
 800da92:	2621      	movs	r6, #33	; 0x21
 800da94:	19ba      	adds	r2, r7, r6
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2100      	movs	r1, #0
 800da9a:	0018      	movs	r0, r3
 800da9c:	f7fc fdaa 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800daa0:	0003      	movs	r3, r0
 800daa2:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800daa4:	197b      	adds	r3, r7, r5
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	b25b      	sxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d000      	beq.n	800dab0 <get_sequence_step_timeout+0xdc>
 800daae:	e0a0      	b.n	800dbf2 <get_sequence_step_timeout+0x21e>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dab0:	197c      	adds	r4, r7, r5
 800dab2:	19ba      	adds	r2, r7, r6
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2100      	movs	r1, #0
 800dab8:	0018      	movs	r0, r3
 800daba:	f7fc fd9b 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800dabe:	0003      	movs	r3, r0
 800dac0:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800dac2:	197b      	adds	r3, r7, r5
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	b25b      	sxtb	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d109      	bne.n	800dae0 <get_sequence_step_timeout+0x10c>
				Status = VL53L0X_RdWord(Dev,
 800dacc:	197c      	adds	r4, r7, r5
 800dace:	231e      	movs	r3, #30
 800dad0:	18fa      	adds	r2, r7, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2151      	movs	r1, #81	; 0x51
 800dad6:	0018      	movs	r0, r3
 800dad8:	f002 f828 	bl	800fb2c <VL53L0X_RdWord>
 800dadc:	0003      	movs	r3, r0
 800dade:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dae0:	231e      	movs	r3, #30
 800dae2:	18fb      	adds	r3, r7, r3
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	0018      	movs	r0, r3
 800dae8:	f7ff fef7 	bl	800d8da <VL53L0X_decode_timeout>
 800daec:	0002      	movs	r2, r0
 800daee:	2126      	movs	r1, #38	; 0x26
 800daf0:	187b      	adds	r3, r7, r1
 800daf2:	801a      	strh	r2, [r3, #0]
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800daf4:	2321      	movs	r3, #33	; 0x21
 800daf6:	18fb      	adds	r3, r7, r3
 800daf8:	781a      	ldrb	r2, [r3, #0]
 800dafa:	187b      	adds	r3, r7, r1
 800dafc:	8819      	ldrh	r1, [r3, #0]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	0018      	movs	r0, r3
 800db02:	f7ff ff34 	bl	800d96e <VL53L0X_calc_timeout_us>
 800db06:	0003      	movs	r3, r0
 800db08:	62bb      	str	r3, [r7, #40]	; 0x28
 800db0a:	e072      	b.n	800dbf2 <get_sequence_step_timeout+0x21e>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800db0c:	230b      	movs	r3, #11
 800db0e:	18fb      	adds	r3, r7, r3
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	2b04      	cmp	r3, #4
 800db14:	d16d      	bne.n	800dbf2 <get_sequence_step_timeout+0x21e>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800db16:	2414      	movs	r4, #20
 800db18:	193a      	adds	r2, r7, r4
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	0011      	movs	r1, r2
 800db1e:	0018      	movs	r0, r3
 800db20:	f7fc fec8 	bl	800a8b4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800db24:	2626      	movs	r6, #38	; 0x26
 800db26:	19bb      	adds	r3, r7, r6
 800db28:	2200      	movs	r2, #0
 800db2a:	801a      	strh	r2, [r3, #0]

		if (SchedulerSequenceSteps.PreRangeOn) {
 800db2c:	193b      	adds	r3, r7, r4
 800db2e:	78db      	ldrb	r3, [r3, #3]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d021      	beq.n	800db78 <get_sequence_step_timeout+0x1a4>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800db34:	252f      	movs	r5, #47	; 0x2f
 800db36:	197c      	adds	r4, r7, r5
 800db38:	2321      	movs	r3, #33	; 0x21
 800db3a:	18fa      	adds	r2, r7, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2100      	movs	r1, #0
 800db40:	0018      	movs	r0, r3
 800db42:	f7fc fd57 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800db46:	0003      	movs	r3, r0
 800db48:	7023      	strb	r3, [r4, #0]
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800db4a:	197b      	adds	r3, r7, r5
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	b25b      	sxtb	r3, r3
 800db50:	2b00      	cmp	r3, #0
 800db52:	d111      	bne.n	800db78 <get_sequence_step_timeout+0x1a4>
				Status = VL53L0X_RdWord(Dev,
 800db54:	197c      	adds	r4, r7, r5
 800db56:	251e      	movs	r5, #30
 800db58:	197a      	adds	r2, r7, r5
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2151      	movs	r1, #81	; 0x51
 800db5e:	0018      	movs	r0, r3
 800db60:	f001 ffe4 	bl	800fb2c <VL53L0X_RdWord>
 800db64:	0003      	movs	r3, r0
 800db66:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800db68:	197b      	adds	r3, r7, r5
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	0018      	movs	r0, r3
 800db6e:	f7ff feb4 	bl	800d8da <VL53L0X_decode_timeout>
 800db72:	0002      	movs	r2, r0
 800db74:	19bb      	adds	r3, r7, r6
 800db76:	801a      	strh	r2, [r3, #0]
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800db78:	222f      	movs	r2, #47	; 0x2f
 800db7a:	18bb      	adds	r3, r7, r2
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b25b      	sxtb	r3, r3
 800db80:	2b00      	cmp	r3, #0
 800db82:	d109      	bne.n	800db98 <get_sequence_step_timeout+0x1c4>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800db84:	18bc      	adds	r4, r7, r2
 800db86:	2321      	movs	r3, #33	; 0x21
 800db88:	18fa      	adds	r2, r7, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2101      	movs	r1, #1
 800db8e:	0018      	movs	r0, r3
 800db90:	f7fc fd30 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800db94:	0003      	movs	r3, r0
 800db96:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800db98:	222f      	movs	r2, #47	; 0x2f
 800db9a:	18bb      	adds	r3, r7, r2
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b25b      	sxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d112      	bne.n	800dbca <get_sequence_step_timeout+0x1f6>
			Status = VL53L0X_RdWord(Dev,
 800dba4:	18bc      	adds	r4, r7, r2
 800dba6:	251c      	movs	r5, #28
 800dba8:	197a      	adds	r2, r7, r5
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2171      	movs	r1, #113	; 0x71
 800dbae:	0018      	movs	r0, r3
 800dbb0:	f001 ffbc 	bl	800fb2c <VL53L0X_RdWord>
 800dbb4:	0003      	movs	r3, r0
 800dbb6:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800dbb8:	197b      	adds	r3, r7, r5
 800dbba:	881b      	ldrh	r3, [r3, #0]
 800dbbc:	0018      	movs	r0, r3
 800dbbe:	f7ff fe8c 	bl	800d8da <VL53L0X_decode_timeout>
 800dbc2:	0002      	movs	r2, r0
 800dbc4:	2324      	movs	r3, #36	; 0x24
 800dbc6:	18fb      	adds	r3, r7, r3
 800dbc8:	801a      	strh	r2, [r3, #0]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800dbca:	2024      	movs	r0, #36	; 0x24
 800dbcc:	183b      	adds	r3, r7, r0
 800dbce:	1839      	adds	r1, r7, r0
 800dbd0:	2226      	movs	r2, #38	; 0x26
 800dbd2:	18ba      	adds	r2, r7, r2
 800dbd4:	8809      	ldrh	r1, [r1, #0]
 800dbd6:	8812      	ldrh	r2, [r2, #0]
 800dbd8:	1a8a      	subs	r2, r1, r2
 800dbda:	801a      	strh	r2, [r3, #0]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800dbdc:	2321      	movs	r3, #33	; 0x21
 800dbde:	18fb      	adds	r3, r7, r3
 800dbe0:	781a      	ldrb	r2, [r3, #0]
 800dbe2:	183b      	adds	r3, r7, r0
 800dbe4:	8819      	ldrh	r1, [r3, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	0018      	movs	r0, r3
 800dbea:	f7ff fec0 	bl	800d96e <VL53L0X_calc_timeout_us>
 800dbee:	0003      	movs	r3, r0
 800dbf0:	62bb      	str	r3, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf6:	601a      	str	r2, [r3, #0]

	return Status;
 800dbf8:	232f      	movs	r3, #47	; 0x2f
 800dbfa:	18fb      	adds	r3, r7, r3
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	b25b      	sxtb	r3, r3
}
 800dc00:	0018      	movs	r0, r3
 800dc02:	46bd      	mov	sp, r7
 800dc04:	b00d      	add	sp, #52	; 0x34
 800dc06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc08 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0a:	b08b      	sub	sp, #44	; 0x2c
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	200b      	movs	r0, #11
 800dc14:	183b      	adds	r3, r7, r0
 800dc16:	1c0a      	adds	r2, r1, #0
 800dc18:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc1a:	2327      	movs	r3, #39	; 0x27
 800dc1c:	18fb      	adds	r3, r7, r3
 800dc1e:	2200      	movs	r2, #0
 800dc20:	701a      	strb	r2, [r3, #0]
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800dc22:	183b      	adds	r3, r7, r0
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d007      	beq.n	800dc3a <set_sequence_step_timeout+0x32>
 800dc2a:	183b      	adds	r3, r7, r0
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d003      	beq.n	800dc3a <set_sequence_step_timeout+0x32>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800dc32:	183b      	adds	r3, r7, r0
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d147      	bne.n	800dcca <set_sequence_step_timeout+0xc2>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dc3a:	2527      	movs	r5, #39	; 0x27
 800dc3c:	197c      	adds	r4, r7, r5
 800dc3e:	261b      	movs	r6, #27
 800dc40:	19ba      	adds	r2, r7, r6
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2100      	movs	r1, #0
 800dc46:	0018      	movs	r0, r3
 800dc48:	f7fc fcd4 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800dc4c:	0003      	movs	r3, r0
 800dc4e:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800dc50:	197b      	adds	r3, r7, r5
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	b25b      	sxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d124      	bne.n	800dca4 <set_sequence_step_timeout+0x9c>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800dc5a:	19bb      	adds	r3, r7, r6
 800dc5c:	781a      	ldrb	r2, [r3, #0]
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	0018      	movs	r0, r3
 800dc64:	f7ff fe51 	bl	800d90a <VL53L0X_calc_timeout_mclks>
 800dc68:	0002      	movs	r2, r0
 800dc6a:	211c      	movs	r1, #28
 800dc6c:	187b      	adds	r3, r7, r1
 800dc6e:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800dc70:	187b      	adds	r3, r7, r1
 800dc72:	881a      	ldrh	r2, [r3, #0]
 800dc74:	2380      	movs	r3, #128	; 0x80
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d904      	bls.n	800dc86 <set_sequence_step_timeout+0x7e>
				MsrcEncodedTimeOut = 255;
 800dc7c:	2326      	movs	r3, #38	; 0x26
 800dc7e:	18fb      	adds	r3, r7, r3
 800dc80:	22ff      	movs	r2, #255	; 0xff
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	e007      	b.n	800dc96 <set_sequence_step_timeout+0x8e>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800dc86:	231c      	movs	r3, #28
 800dc88:	18fb      	adds	r3, r7, r3
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	b2da      	uxtb	r2, r3
				MsrcEncodedTimeOut =
 800dc8e:	2326      	movs	r3, #38	; 0x26
 800dc90:	18fb      	adds	r3, r7, r3
 800dc92:	3a01      	subs	r2, #1
 800dc94:	701a      	strb	r2, [r3, #0]

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dc96:	2326      	movs	r3, #38	; 0x26
 800dc98:	18fb      	adds	r3, r7, r3
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	b299      	uxth	r1, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	22d8      	movs	r2, #216	; 0xd8
 800dca2:	5299      	strh	r1, [r3, r2]
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800dca4:	2227      	movs	r2, #39	; 0x27
 800dca6:	18bb      	adds	r3, r7, r2
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	b25b      	sxtb	r3, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d000      	beq.n	800dcb2 <set_sequence_step_timeout+0xaa>
 800dcb0:	e0da      	b.n	800de68 <set_sequence_step_timeout+0x260>
			Status = VL53L0X_WrByte(Dev,
 800dcb2:	18bc      	adds	r4, r7, r2
 800dcb4:	2326      	movs	r3, #38	; 0x26
 800dcb6:	18fb      	adds	r3, r7, r3
 800dcb8:	781a      	ldrb	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2146      	movs	r1, #70	; 0x46
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f001 fe50 	bl	800f964 <VL53L0X_WrByte>
 800dcc4:	0003      	movs	r3, r0
 800dcc6:	7023      	strb	r3, [r4, #0]
		if (Status == VL53L0X_ERROR_NONE) {
 800dcc8:	e0ce      	b.n	800de68 <set_sequence_step_timeout+0x260>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800dcca:	230b      	movs	r3, #11
 800dccc:	18fb      	adds	r3, r7, r3
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d146      	bne.n	800dd62 <set_sequence_step_timeout+0x15a>

			if (Status == VL53L0X_ERROR_NONE) {
 800dcd4:	2227      	movs	r2, #39	; 0x27
 800dcd6:	18bb      	adds	r3, r7, r2
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	b25b      	sxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d123      	bne.n	800dd28 <set_sequence_step_timeout+0x120>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dce0:	18bc      	adds	r4, r7, r2
 800dce2:	251b      	movs	r5, #27
 800dce4:	197a      	adds	r2, r7, r5
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2100      	movs	r1, #0
 800dcea:	0018      	movs	r0, r3
 800dcec:	f7fc fc82 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800dcf0:	0003      	movs	r3, r0
 800dcf2:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800dcf4:	197b      	adds	r3, r7, r5
 800dcf6:	781a      	ldrb	r2, [r3, #0]
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	f7ff fe04 	bl	800d90a <VL53L0X_calc_timeout_mclks>
 800dd02:	0002      	movs	r2, r0
				PreRangeTimeOutMClks =
 800dd04:	2124      	movs	r1, #36	; 0x24
 800dd06:	187b      	adds	r3, r7, r1
 800dd08:	801a      	strh	r2, [r3, #0]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800dd0a:	187b      	adds	r3, r7, r1
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	0018      	movs	r0, r3
 800dd10:	f7ff fdac 	bl	800d86c <VL53L0X_encode_timeout>
 800dd14:	0003      	movs	r3, r0
 800dd16:	001a      	movs	r2, r3
 800dd18:	2118      	movs	r1, #24
 800dd1a:	187b      	adds	r3, r7, r1
 800dd1c:	801a      	strh	r2, [r3, #0]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800dd1e:	187b      	adds	r3, r7, r1
 800dd20:	8819      	ldrh	r1, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	22d8      	movs	r2, #216	; 0xd8
 800dd26:	5299      	strh	r1, [r3, r2]
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800dd28:	2127      	movs	r1, #39	; 0x27
 800dd2a:	187b      	adds	r3, r7, r1
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	b25b      	sxtb	r3, r3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10a      	bne.n	800dd4a <set_sequence_step_timeout+0x142>
				Status = VL53L0X_WrWord(Dev,
 800dd34:	2318      	movs	r3, #24
 800dd36:	18fb      	adds	r3, r7, r3
 800dd38:	881a      	ldrh	r2, [r3, #0]
 800dd3a:	187c      	adds	r4, r7, r1
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2151      	movs	r1, #81	; 0x51
 800dd40:	0018      	movs	r0, r3
 800dd42:	f001 fe3f 	bl	800f9c4 <VL53L0X_WrWord>
 800dd46:	0003      	movs	r3, r0
 800dd48:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800dd4a:	2327      	movs	r3, #39	; 0x27
 800dd4c:	18fb      	adds	r3, r7, r3
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	b25b      	sxtb	r3, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d000      	beq.n	800dd58 <set_sequence_step_timeout+0x150>
 800dd56:	e087      	b.n	800de68 <set_sequence_step_timeout+0x260>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	21e4      	movs	r1, #228	; 0xe4
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	505a      	str	r2, [r3, r1]
 800dd60:	e082      	b.n	800de68 <set_sequence_step_timeout+0x260>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800dd62:	230b      	movs	r3, #11
 800dd64:	18fb      	adds	r3, r7, r3
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	d000      	beq.n	800dd6e <set_sequence_step_timeout+0x166>
 800dd6c:	e078      	b.n	800de60 <set_sequence_step_timeout+0x258>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800dd6e:	2410      	movs	r4, #16
 800dd70:	193a      	adds	r2, r7, r4
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	0011      	movs	r1, r2
 800dd76:	0018      	movs	r0, r3
 800dd78:	f7fc fd9c 	bl	800a8b4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800dd7c:	2624      	movs	r6, #36	; 0x24
 800dd7e:	19bb      	adds	r3, r7, r6
 800dd80:	2200      	movs	r2, #0
 800dd82:	801a      	strh	r2, [r3, #0]
			if (SchedulerSequenceSteps.PreRangeOn) {
 800dd84:	193b      	adds	r3, r7, r4
 800dd86:	78db      	ldrb	r3, [r3, #3]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d021      	beq.n	800ddd0 <set_sequence_step_timeout+0x1c8>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dd8c:	2527      	movs	r5, #39	; 0x27
 800dd8e:	197c      	adds	r4, r7, r5
 800dd90:	231b      	movs	r3, #27
 800dd92:	18fa      	adds	r2, r7, r3
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2100      	movs	r1, #0
 800dd98:	0018      	movs	r0, r3
 800dd9a:	f7fc fc2b 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800dd9e:	0003      	movs	r3, r0
 800dda0:	7023      	strb	r3, [r4, #0]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800dda2:	197b      	adds	r3, r7, r5
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d111      	bne.n	800ddd0 <set_sequence_step_timeout+0x1c8>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ddac:	197c      	adds	r4, r7, r5
 800ddae:	2518      	movs	r5, #24
 800ddb0:	197a      	adds	r2, r7, r5
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2151      	movs	r1, #81	; 0x51
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	f001 feb8 	bl	800fb2c <VL53L0X_RdWord>
 800ddbc:	0003      	movs	r3, r0
 800ddbe:	7023      	strb	r3, [r4, #0]
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ddc0:	197b      	adds	r3, r7, r5
 800ddc2:	881b      	ldrh	r3, [r3, #0]
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f7ff fd88 	bl	800d8da <VL53L0X_decode_timeout>
 800ddca:	0002      	movs	r2, r0
					PreRangeTimeOutMClks =
 800ddcc:	19bb      	adds	r3, r7, r6
 800ddce:	801a      	strh	r2, [r3, #0]
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ddd0:	2227      	movs	r2, #39	; 0x27
 800ddd2:	18bb      	adds	r3, r7, r2
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b25b      	sxtb	r3, r3
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d109      	bne.n	800ddf0 <set_sequence_step_timeout+0x1e8>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800dddc:	18bc      	adds	r4, r7, r2
 800ddde:	231b      	movs	r3, #27
 800dde0:	18fa      	adds	r2, r7, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2101      	movs	r1, #1
 800dde6:	0018      	movs	r0, r3
 800dde8:	f7fc fc04 	bl	800a5f4 <VL53L0X_GetVcselPulsePeriod>
 800ddec:	0003      	movs	r3, r0
 800ddee:	7023      	strb	r3, [r4, #0]
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ddf0:	2527      	movs	r5, #39	; 0x27
 800ddf2:	197b      	adds	r3, r7, r5
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d135      	bne.n	800de68 <set_sequence_step_timeout+0x260>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ddfc:	231b      	movs	r3, #27
 800ddfe:	18fb      	adds	r3, r7, r3
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	0018      	movs	r0, r3
 800de08:	f7ff fd7f 	bl	800d90a <VL53L0X_calc_timeout_mclks>
 800de0c:	0003      	movs	r3, r0
 800de0e:	623b      	str	r3, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800de10:	2324      	movs	r3, #36	; 0x24
 800de12:	18fb      	adds	r3, r7, r3
 800de14:	881b      	ldrh	r3, [r3, #0]
 800de16:	6a3a      	ldr	r2, [r7, #32]
 800de18:	18d3      	adds	r3, r2, r3
 800de1a:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800de1c:	261e      	movs	r6, #30
 800de1e:	19bc      	adds	r4, r7, r6
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	0018      	movs	r0, r3
 800de24:	f7ff fd22 	bl	800d86c <VL53L0X_encode_timeout>
 800de28:	0003      	movs	r3, r0
 800de2a:	8023      	strh	r3, [r4, #0]

				if (Status == VL53L0X_ERROR_NONE) {
 800de2c:	197b      	adds	r3, r7, r5
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	b25b      	sxtb	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d109      	bne.n	800de4a <set_sequence_step_timeout+0x242>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800de36:	197c      	adds	r4, r7, r5
 800de38:	19bb      	adds	r3, r7, r6
 800de3a:	881a      	ldrh	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2171      	movs	r1, #113	; 0x71
 800de40:	0018      	movs	r0, r3
 800de42:	f001 fdbf 	bl	800f9c4 <VL53L0X_WrWord>
 800de46:	0003      	movs	r3, r0
 800de48:	7023      	strb	r3, [r4, #0]
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800de4a:	2327      	movs	r3, #39	; 0x27
 800de4c:	18fb      	adds	r3, r7, r3
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	b25b      	sxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d108      	bne.n	800de68 <set_sequence_step_timeout+0x260>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	21dc      	movs	r1, #220	; 0xdc
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	505a      	str	r2, [r3, r1]
 800de5e:	e003      	b.n	800de68 <set_sequence_step_timeout+0x260>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800de60:	2327      	movs	r3, #39	; 0x27
 800de62:	18fb      	adds	r3, r7, r3
 800de64:	22fc      	movs	r2, #252	; 0xfc
 800de66:	701a      	strb	r2, [r3, #0]

	}
	return Status;
 800de68:	2327      	movs	r3, #39	; 0x27
 800de6a:	18fb      	adds	r3, r7, r3
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	b25b      	sxtb	r3, r3
}
 800de70:	0018      	movs	r0, r3
 800de72:	46bd      	mov	sp, r7
 800de74:	b00b      	add	sp, #44	; 0x2c
 800de76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de78 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b08a      	sub	sp, #40	; 0x28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	0008      	movs	r0, r1
 800de82:	0011      	movs	r1, r2
 800de84:	1cfb      	adds	r3, r7, #3
 800de86:	1c02      	adds	r2, r0, #0
 800de88:	701a      	strb	r2, [r3, #0]
 800de8a:	1cbb      	adds	r3, r7, #2
 800de8c:	1c0a      	adds	r2, r1, #0
 800de8e:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de90:	2127      	movs	r1, #39	; 0x27
 800de92:	187b      	adds	r3, r7, r1
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800de98:	2326      	movs	r3, #38	; 0x26
 800de9a:	18fb      	adds	r3, r7, r3
 800de9c:	220c      	movs	r2, #12
 800de9e:	701a      	strb	r2, [r3, #0]
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800dea0:	2325      	movs	r3, #37	; 0x25
 800dea2:	18fb      	adds	r3, r7, r3
 800dea4:	2212      	movs	r2, #18
 800dea6:	701a      	strb	r2, [r3, #0]
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800dea8:	2324      	movs	r3, #36	; 0x24
 800deaa:	18fb      	adds	r3, r7, r3
 800deac:	2208      	movs	r2, #8
 800deae:	701a      	strb	r2, [r3, #0]
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800deb0:	2323      	movs	r3, #35	; 0x23
 800deb2:	18fb      	adds	r3, r7, r3
 800deb4:	220e      	movs	r2, #14
 800deb6:	701a      	strb	r2, [r3, #0]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800deb8:	230f      	movs	r3, #15
 800deba:	18fb      	adds	r3, r7, r3
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800dec0:	1cbb      	adds	r3, r7, #2
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2201      	movs	r2, #1
 800dec6:	4013      	ands	r3, r2
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <VL53L0X_set_vcsel_pulse_period+0x5e>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dece:	187b      	adds	r3, r7, r1
 800ded0:	22fc      	movs	r2, #252	; 0xfc
 800ded2:	701a      	strb	r2, [r3, #0]
 800ded4:	e02c      	b.n	800df30 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800ded6:	1cfb      	adds	r3, r7, #3
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d112      	bne.n	800df04 <VL53L0X_set_vcsel_pulse_period+0x8c>
 800dede:	1cba      	adds	r2, r7, #2
 800dee0:	2326      	movs	r3, #38	; 0x26
 800dee2:	18fb      	adds	r3, r7, r3
 800dee4:	7812      	ldrb	r2, [r2, #0]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d306      	bcc.n	800defa <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800deec:	1cba      	adds	r2, r7, #2
 800deee:	2325      	movs	r3, #37	; 0x25
 800def0:	18fb      	adds	r3, r7, r3
 800def2:	7812      	ldrb	r2, [r2, #0]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	429a      	cmp	r2, r3
 800def8:	d904      	bls.n	800df04 <VL53L0X_set_vcsel_pulse_period+0x8c>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800defa:	2327      	movs	r3, #39	; 0x27
 800defc:	18fb      	adds	r3, r7, r3
 800defe:	22fc      	movs	r2, #252	; 0xfc
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	e015      	b.n	800df30 <VL53L0X_set_vcsel_pulse_period+0xb8>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800df04:	1cfb      	adds	r3, r7, #3
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d111      	bne.n	800df30 <VL53L0X_set_vcsel_pulse_period+0xb8>
 800df0c:	1cba      	adds	r2, r7, #2
 800df0e:	2324      	movs	r3, #36	; 0x24
 800df10:	18fb      	adds	r3, r7, r3
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	429a      	cmp	r2, r3
 800df18:	d306      	bcc.n	800df28 <VL53L0X_set_vcsel_pulse_period+0xb0>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800df1a:	1cba      	adds	r2, r7, #2
 800df1c:	2323      	movs	r3, #35	; 0x23
 800df1e:	18fb      	adds	r3, r7, r3
 800df20:	7812      	ldrb	r2, [r2, #0]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	429a      	cmp	r2, r3
 800df26:	d903      	bls.n	800df30 <VL53L0X_set_vcsel_pulse_period+0xb8>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800df28:	2327      	movs	r3, #39	; 0x27
 800df2a:	18fb      	adds	r3, r7, r3
 800df2c:	22fc      	movs	r2, #252	; 0xfc
 800df2e:	701a      	strb	r2, [r3, #0]
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800df30:	2227      	movs	r2, #39	; 0x27
 800df32:	18bb      	adds	r3, r7, r2
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	b25b      	sxtb	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d003      	beq.n	800df44 <VL53L0X_set_vcsel_pulse_period+0xcc>
		return Status;
 800df3c:	18bb      	adds	r3, r7, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	b25b      	sxtb	r3, r3
 800df42:	e292      	b.n	800e46a <VL53L0X_set_vcsel_pulse_period+0x5f2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800df44:	1cfb      	adds	r3, r7, #3
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d160      	bne.n	800e00e <VL53L0X_set_vcsel_pulse_period+0x196>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800df4c:	1cbb      	adds	r3, r7, #2
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b0c      	cmp	r3, #12
 800df52:	d113      	bne.n	800df7c <VL53L0X_set_vcsel_pulse_period+0x104>

			Status = VL53L0X_WrByte(Dev,
 800df54:	2527      	movs	r5, #39	; 0x27
 800df56:	197c      	adds	r4, r7, r5
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2218      	movs	r2, #24
 800df5c:	2157      	movs	r1, #87	; 0x57
 800df5e:	0018      	movs	r0, r3
 800df60:	f001 fd00 	bl	800f964 <VL53L0X_WrByte>
 800df64:	0003      	movs	r3, r0
 800df66:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800df68:	197c      	adds	r4, r7, r5
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2208      	movs	r2, #8
 800df6e:	2156      	movs	r1, #86	; 0x56
 800df70:	0018      	movs	r0, r3
 800df72:	f001 fcf7 	bl	800f964 <VL53L0X_WrByte>
 800df76:	0003      	movs	r3, r0
 800df78:	7023      	strb	r3, [r4, #0]
 800df7a:	e1b4      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800df7c:	1cbb      	adds	r3, r7, #2
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b0e      	cmp	r3, #14
 800df82:	d113      	bne.n	800dfac <VL53L0X_set_vcsel_pulse_period+0x134>

			Status = VL53L0X_WrByte(Dev,
 800df84:	2527      	movs	r5, #39	; 0x27
 800df86:	197c      	adds	r4, r7, r5
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2230      	movs	r2, #48	; 0x30
 800df8c:	2157      	movs	r1, #87	; 0x57
 800df8e:	0018      	movs	r0, r3
 800df90:	f001 fce8 	bl	800f964 <VL53L0X_WrByte>
 800df94:	0003      	movs	r3, r0
 800df96:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800df98:	197c      	adds	r4, r7, r5
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2208      	movs	r2, #8
 800df9e:	2156      	movs	r1, #86	; 0x56
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	f001 fcdf 	bl	800f964 <VL53L0X_WrByte>
 800dfa6:	0003      	movs	r3, r0
 800dfa8:	7023      	strb	r3, [r4, #0]
 800dfaa:	e19c      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800dfac:	1cbb      	adds	r3, r7, #2
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	2b10      	cmp	r3, #16
 800dfb2:	d113      	bne.n	800dfdc <VL53L0X_set_vcsel_pulse_period+0x164>

			Status = VL53L0X_WrByte(Dev,
 800dfb4:	2527      	movs	r5, #39	; 0x27
 800dfb6:	197c      	adds	r4, r7, r5
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2240      	movs	r2, #64	; 0x40
 800dfbc:	2157      	movs	r1, #87	; 0x57
 800dfbe:	0018      	movs	r0, r3
 800dfc0:	f001 fcd0 	bl	800f964 <VL53L0X_WrByte>
 800dfc4:	0003      	movs	r3, r0
 800dfc6:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800dfc8:	197c      	adds	r4, r7, r5
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2208      	movs	r2, #8
 800dfce:	2156      	movs	r1, #86	; 0x56
 800dfd0:	0018      	movs	r0, r3
 800dfd2:	f001 fcc7 	bl	800f964 <VL53L0X_WrByte>
 800dfd6:	0003      	movs	r3, r0
 800dfd8:	7023      	strb	r3, [r4, #0]
 800dfda:	e184      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800dfdc:	1cbb      	adds	r3, r7, #2
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b12      	cmp	r3, #18
 800dfe2:	d000      	beq.n	800dfe6 <VL53L0X_set_vcsel_pulse_period+0x16e>
 800dfe4:	e17f      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800dfe6:	2527      	movs	r5, #39	; 0x27
 800dfe8:	197c      	adds	r4, r7, r5
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2250      	movs	r2, #80	; 0x50
 800dfee:	2157      	movs	r1, #87	; 0x57
 800dff0:	0018      	movs	r0, r3
 800dff2:	f001 fcb7 	bl	800f964 <VL53L0X_WrByte>
 800dff6:	0003      	movs	r3, r0
 800dff8:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800dffa:	197c      	adds	r4, r7, r5
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2208      	movs	r2, #8
 800e000:	2156      	movs	r1, #86	; 0x56
 800e002:	0018      	movs	r0, r3
 800e004:	f001 fcae 	bl	800f964 <VL53L0X_WrByte>
 800e008:	0003      	movs	r3, r0
 800e00a:	7023      	strb	r3, [r4, #0]
 800e00c:	e16b      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800e00e:	1cfb      	adds	r3, r7, #3
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d000      	beq.n	800e018 <VL53L0X_set_vcsel_pulse_period+0x1a0>
 800e016:	e166      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>

		if (VCSELPulsePeriodPCLK == 8) {
 800e018:	1cbb      	adds	r3, r7, #2
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b08      	cmp	r3, #8
 800e01e:	d155      	bne.n	800e0cc <VL53L0X_set_vcsel_pulse_period+0x254>

			Status = VL53L0X_WrByte(Dev,
 800e020:	2527      	movs	r5, #39	; 0x27
 800e022:	197c      	adds	r4, r7, r5
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2210      	movs	r2, #16
 800e028:	2148      	movs	r1, #72	; 0x48
 800e02a:	0018      	movs	r0, r3
 800e02c:	f001 fc9a 	bl	800f964 <VL53L0X_WrByte>
 800e030:	0003      	movs	r3, r0
 800e032:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800e034:	197c      	adds	r4, r7, r5
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2208      	movs	r2, #8
 800e03a:	2147      	movs	r1, #71	; 0x47
 800e03c:	0018      	movs	r0, r3
 800e03e:	f001 fc91 	bl	800f964 <VL53L0X_WrByte>
 800e042:	0003      	movs	r3, r0
 800e044:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2202      	movs	r2, #2
 800e04a:	2132      	movs	r1, #50	; 0x32
 800e04c:	0018      	movs	r0, r3
 800e04e:	f001 fc89 	bl	800f964 <VL53L0X_WrByte>
 800e052:	0003      	movs	r3, r0
 800e054:	0019      	movs	r1, r3
 800e056:	002c      	movs	r4, r5
 800e058:	193b      	adds	r3, r7, r4
 800e05a:	193a      	adds	r2, r7, r4
 800e05c:	7812      	ldrb	r2, [r2, #0]
 800e05e:	430a      	orrs	r2, r1
 800e060:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	220c      	movs	r2, #12
 800e066:	2130      	movs	r1, #48	; 0x30
 800e068:	0018      	movs	r0, r3
 800e06a:	f001 fc7b 	bl	800f964 <VL53L0X_WrByte>
 800e06e:	0003      	movs	r3, r0
 800e070:	0019      	movs	r1, r3
 800e072:	193b      	adds	r3, r7, r4
 800e074:	193a      	adds	r2, r7, r4
 800e076:	7812      	ldrb	r2, [r2, #0]
 800e078:	430a      	orrs	r2, r1
 800e07a:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	21ff      	movs	r1, #255	; 0xff
 800e082:	0018      	movs	r0, r3
 800e084:	f001 fc6e 	bl	800f964 <VL53L0X_WrByte>
 800e088:	0003      	movs	r3, r0
 800e08a:	0019      	movs	r1, r3
 800e08c:	193b      	adds	r3, r7, r4
 800e08e:	193a      	adds	r2, r7, r4
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	430a      	orrs	r2, r1
 800e094:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2230      	movs	r2, #48	; 0x30
 800e09a:	2130      	movs	r1, #48	; 0x30
 800e09c:	0018      	movs	r0, r3
 800e09e:	f001 fc61 	bl	800f964 <VL53L0X_WrByte>
 800e0a2:	0003      	movs	r3, r0
 800e0a4:	0019      	movs	r1, r3
 800e0a6:	193b      	adds	r3, r7, r4
 800e0a8:	193a      	adds	r2, r7, r4
 800e0aa:	7812      	ldrb	r2, [r2, #0]
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	21ff      	movs	r1, #255	; 0xff
 800e0b6:	0018      	movs	r0, r3
 800e0b8:	f001 fc54 	bl	800f964 <VL53L0X_WrByte>
 800e0bc:	0003      	movs	r3, r0
 800e0be:	0019      	movs	r1, r3
 800e0c0:	193b      	adds	r3, r7, r4
 800e0c2:	193a      	adds	r2, r7, r4
 800e0c4:	7812      	ldrb	r2, [r2, #0]
 800e0c6:	430a      	orrs	r2, r1
 800e0c8:	701a      	strb	r2, [r3, #0]
 800e0ca:	e10c      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800e0cc:	1cbb      	adds	r3, r7, #2
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	2b0a      	cmp	r3, #10
 800e0d2:	d155      	bne.n	800e180 <VL53L0X_set_vcsel_pulse_period+0x308>

			Status = VL53L0X_WrByte(Dev,
 800e0d4:	2527      	movs	r5, #39	; 0x27
 800e0d6:	197c      	adds	r4, r7, r5
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2228      	movs	r2, #40	; 0x28
 800e0dc:	2148      	movs	r1, #72	; 0x48
 800e0de:	0018      	movs	r0, r3
 800e0e0:	f001 fc40 	bl	800f964 <VL53L0X_WrByte>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800e0e8:	197c      	adds	r4, r7, r5
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2208      	movs	r2, #8
 800e0ee:	2147      	movs	r1, #71	; 0x47
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	f001 fc37 	bl	800f964 <VL53L0X_WrByte>
 800e0f6:	0003      	movs	r3, r0
 800e0f8:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2203      	movs	r2, #3
 800e0fe:	2132      	movs	r1, #50	; 0x32
 800e100:	0018      	movs	r0, r3
 800e102:	f001 fc2f 	bl	800f964 <VL53L0X_WrByte>
 800e106:	0003      	movs	r3, r0
 800e108:	0019      	movs	r1, r3
 800e10a:	002c      	movs	r4, r5
 800e10c:	193b      	adds	r3, r7, r4
 800e10e:	193a      	adds	r2, r7, r4
 800e110:	7812      	ldrb	r2, [r2, #0]
 800e112:	430a      	orrs	r2, r1
 800e114:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2209      	movs	r2, #9
 800e11a:	2130      	movs	r1, #48	; 0x30
 800e11c:	0018      	movs	r0, r3
 800e11e:	f001 fc21 	bl	800f964 <VL53L0X_WrByte>
 800e122:	0003      	movs	r3, r0
 800e124:	0019      	movs	r1, r3
 800e126:	193b      	adds	r3, r7, r4
 800e128:	193a      	adds	r2, r7, r4
 800e12a:	7812      	ldrb	r2, [r2, #0]
 800e12c:	430a      	orrs	r2, r1
 800e12e:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2201      	movs	r2, #1
 800e134:	21ff      	movs	r1, #255	; 0xff
 800e136:	0018      	movs	r0, r3
 800e138:	f001 fc14 	bl	800f964 <VL53L0X_WrByte>
 800e13c:	0003      	movs	r3, r0
 800e13e:	0019      	movs	r1, r3
 800e140:	193b      	adds	r3, r7, r4
 800e142:	193a      	adds	r2, r7, r4
 800e144:	7812      	ldrb	r2, [r2, #0]
 800e146:	430a      	orrs	r2, r1
 800e148:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2220      	movs	r2, #32
 800e14e:	2130      	movs	r1, #48	; 0x30
 800e150:	0018      	movs	r0, r3
 800e152:	f001 fc07 	bl	800f964 <VL53L0X_WrByte>
 800e156:	0003      	movs	r3, r0
 800e158:	0019      	movs	r1, r3
 800e15a:	193b      	adds	r3, r7, r4
 800e15c:	193a      	adds	r2, r7, r4
 800e15e:	7812      	ldrb	r2, [r2, #0]
 800e160:	430a      	orrs	r2, r1
 800e162:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	21ff      	movs	r1, #255	; 0xff
 800e16a:	0018      	movs	r0, r3
 800e16c:	f001 fbfa 	bl	800f964 <VL53L0X_WrByte>
 800e170:	0003      	movs	r3, r0
 800e172:	0019      	movs	r1, r3
 800e174:	193b      	adds	r3, r7, r4
 800e176:	193a      	adds	r2, r7, r4
 800e178:	7812      	ldrb	r2, [r2, #0]
 800e17a:	430a      	orrs	r2, r1
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	e0b2      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800e180:	1cbb      	adds	r3, r7, #2
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	2b0c      	cmp	r3, #12
 800e186:	d155      	bne.n	800e234 <VL53L0X_set_vcsel_pulse_period+0x3bc>

			Status = VL53L0X_WrByte(Dev,
 800e188:	2527      	movs	r5, #39	; 0x27
 800e18a:	197c      	adds	r4, r7, r5
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2238      	movs	r2, #56	; 0x38
 800e190:	2148      	movs	r1, #72	; 0x48
 800e192:	0018      	movs	r0, r3
 800e194:	f001 fbe6 	bl	800f964 <VL53L0X_WrByte>
 800e198:	0003      	movs	r3, r0
 800e19a:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800e19c:	197c      	adds	r4, r7, r5
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2208      	movs	r2, #8
 800e1a2:	2147      	movs	r1, #71	; 0x47
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	f001 fbdd 	bl	800f964 <VL53L0X_WrByte>
 800e1aa:	0003      	movs	r3, r0
 800e1ac:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2203      	movs	r2, #3
 800e1b2:	2132      	movs	r1, #50	; 0x32
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f001 fbd5 	bl	800f964 <VL53L0X_WrByte>
 800e1ba:	0003      	movs	r3, r0
 800e1bc:	0019      	movs	r1, r3
 800e1be:	002c      	movs	r4, r5
 800e1c0:	193b      	adds	r3, r7, r4
 800e1c2:	193a      	adds	r2, r7, r4
 800e1c4:	7812      	ldrb	r2, [r2, #0]
 800e1c6:	430a      	orrs	r2, r1
 800e1c8:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	2130      	movs	r1, #48	; 0x30
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f001 fbc7 	bl	800f964 <VL53L0X_WrByte>
 800e1d6:	0003      	movs	r3, r0
 800e1d8:	0019      	movs	r1, r3
 800e1da:	193b      	adds	r3, r7, r4
 800e1dc:	193a      	adds	r2, r7, r4
 800e1de:	7812      	ldrb	r2, [r2, #0]
 800e1e0:	430a      	orrs	r2, r1
 800e1e2:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	21ff      	movs	r1, #255	; 0xff
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f001 fbba 	bl	800f964 <VL53L0X_WrByte>
 800e1f0:	0003      	movs	r3, r0
 800e1f2:	0019      	movs	r1, r3
 800e1f4:	193b      	adds	r3, r7, r4
 800e1f6:	193a      	adds	r2, r7, r4
 800e1f8:	7812      	ldrb	r2, [r2, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2220      	movs	r2, #32
 800e202:	2130      	movs	r1, #48	; 0x30
 800e204:	0018      	movs	r0, r3
 800e206:	f001 fbad 	bl	800f964 <VL53L0X_WrByte>
 800e20a:	0003      	movs	r3, r0
 800e20c:	0019      	movs	r1, r3
 800e20e:	193b      	adds	r3, r7, r4
 800e210:	193a      	adds	r2, r7, r4
 800e212:	7812      	ldrb	r2, [r2, #0]
 800e214:	430a      	orrs	r2, r1
 800e216:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	21ff      	movs	r1, #255	; 0xff
 800e21e:	0018      	movs	r0, r3
 800e220:	f001 fba0 	bl	800f964 <VL53L0X_WrByte>
 800e224:	0003      	movs	r3, r0
 800e226:	0019      	movs	r1, r3
 800e228:	193b      	adds	r3, r7, r4
 800e22a:	193a      	adds	r2, r7, r4
 800e22c:	7812      	ldrb	r2, [r2, #0]
 800e22e:	430a      	orrs	r2, r1
 800e230:	701a      	strb	r2, [r3, #0]
 800e232:	e058      	b.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e234:	1cbb      	adds	r3, r7, #2
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	2b0e      	cmp	r3, #14
 800e23a:	d154      	bne.n	800e2e6 <VL53L0X_set_vcsel_pulse_period+0x46e>

			Status = VL53L0X_WrByte(Dev,
 800e23c:	2527      	movs	r5, #39	; 0x27
 800e23e:	197c      	adds	r4, r7, r5
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2248      	movs	r2, #72	; 0x48
 800e244:	2148      	movs	r1, #72	; 0x48
 800e246:	0018      	movs	r0, r3
 800e248:	f001 fb8c 	bl	800f964 <VL53L0X_WrByte>
 800e24c:	0003      	movs	r3, r0
 800e24e:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800e250:	197c      	adds	r4, r7, r5
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2208      	movs	r2, #8
 800e256:	2147      	movs	r1, #71	; 0x47
 800e258:	0018      	movs	r0, r3
 800e25a:	f001 fb83 	bl	800f964 <VL53L0X_WrByte>
 800e25e:	0003      	movs	r3, r0
 800e260:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2203      	movs	r2, #3
 800e266:	2132      	movs	r1, #50	; 0x32
 800e268:	0018      	movs	r0, r3
 800e26a:	f001 fb7b 	bl	800f964 <VL53L0X_WrByte>
 800e26e:	0003      	movs	r3, r0
 800e270:	0019      	movs	r1, r3
 800e272:	002c      	movs	r4, r5
 800e274:	193b      	adds	r3, r7, r4
 800e276:	193a      	adds	r2, r7, r4
 800e278:	7812      	ldrb	r2, [r2, #0]
 800e27a:	430a      	orrs	r2, r1
 800e27c:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2207      	movs	r2, #7
 800e282:	2130      	movs	r1, #48	; 0x30
 800e284:	0018      	movs	r0, r3
 800e286:	f001 fb6d 	bl	800f964 <VL53L0X_WrByte>
 800e28a:	0003      	movs	r3, r0
 800e28c:	0019      	movs	r1, r3
 800e28e:	193b      	adds	r3, r7, r4
 800e290:	193a      	adds	r2, r7, r4
 800e292:	7812      	ldrb	r2, [r2, #0]
 800e294:	430a      	orrs	r2, r1
 800e296:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2201      	movs	r2, #1
 800e29c:	21ff      	movs	r1, #255	; 0xff
 800e29e:	0018      	movs	r0, r3
 800e2a0:	f001 fb60 	bl	800f964 <VL53L0X_WrByte>
 800e2a4:	0003      	movs	r3, r0
 800e2a6:	0019      	movs	r1, r3
 800e2a8:	193b      	adds	r3, r7, r4
 800e2aa:	193a      	adds	r2, r7, r4
 800e2ac:	7812      	ldrb	r2, [r2, #0]
 800e2ae:	430a      	orrs	r2, r1
 800e2b0:	701a      	strb	r2, [r3, #0]
			Status |= VL53L0X_WrByte(Dev,
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	2130      	movs	r1, #48	; 0x30
 800e2b8:	0018      	movs	r0, r3
 800e2ba:	f001 fb53 	bl	800f964 <VL53L0X_WrByte>
 800e2be:	0003      	movs	r3, r0
 800e2c0:	0019      	movs	r1, r3
 800e2c2:	193b      	adds	r3, r7, r4
 800e2c4:	193a      	adds	r2, r7, r4
 800e2c6:	7812      	ldrb	r2, [r2, #0]
 800e2c8:	430a      	orrs	r2, r1
 800e2ca:	701a      	strb	r2, [r3, #0]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	21ff      	movs	r1, #255	; 0xff
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f001 fb46 	bl	800f964 <VL53L0X_WrByte>
 800e2d8:	0003      	movs	r3, r0
 800e2da:	0019      	movs	r1, r3
 800e2dc:	193b      	adds	r3, r7, r4
 800e2de:	193a      	adds	r2, r7, r4
 800e2e0:	7812      	ldrb	r2, [r2, #0]
 800e2e2:	430a      	orrs	r2, r1
 800e2e4:	701a      	strb	r2, [r3, #0]
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800e2e6:	2327      	movs	r3, #39	; 0x27
 800e2e8:	18fb      	adds	r3, r7, r3
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	b25b      	sxtb	r3, r3
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d000      	beq.n	800e2f4 <VL53L0X_set_vcsel_pulse_period+0x47c>
 800e2f2:	e093      	b.n	800e41c <VL53L0X_set_vcsel_pulse_period+0x5a4>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800e2f4:	2322      	movs	r3, #34	; 0x22
 800e2f6:	18fc      	adds	r4, r7, r3
 800e2f8:	1cbb      	adds	r3, r7, #2
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f7fe fcc6 	bl	800cc8e <VL53L0X_encode_vcsel_period>
 800e302:	0003      	movs	r3, r0
 800e304:	7023      	strb	r3, [r4, #0]
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800e306:	1cfb      	adds	r3, r7, #3
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <VL53L0X_set_vcsel_pulse_period+0x49c>
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d04f      	beq.n	800e3b2 <VL53L0X_set_vcsel_pulse_period+0x53a>
 800e312:	e07e      	b.n	800e412 <VL53L0X_set_vcsel_pulse_period+0x59a>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e314:	2527      	movs	r5, #39	; 0x27
 800e316:	197c      	adds	r4, r7, r5
 800e318:	2314      	movs	r3, #20
 800e31a:	18fa      	adds	r2, r7, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2103      	movs	r1, #3
 800e320:	0018      	movs	r0, r3
 800e322:	f7ff fb57 	bl	800d9d4 <get_sequence_step_timeout>
 800e326:	0003      	movs	r3, r0
 800e328:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e32a:	197b      	adds	r3, r7, r5
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	b25b      	sxtb	r3, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	d109      	bne.n	800e348 <VL53L0X_set_vcsel_pulse_period+0x4d0>
				Status = get_sequence_step_timeout(Dev,
 800e334:	197c      	adds	r4, r7, r5
 800e336:	2310      	movs	r3, #16
 800e338:	18fa      	adds	r2, r7, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2102      	movs	r1, #2
 800e33e:	0018      	movs	r0, r3
 800e340:	f7ff fb48 	bl	800d9d4 <get_sequence_step_timeout>
 800e344:	0003      	movs	r3, r0
 800e346:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e348:	2227      	movs	r2, #39	; 0x27
 800e34a:	18bb      	adds	r3, r7, r2
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b25b      	sxtb	r3, r3
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <VL53L0X_set_vcsel_pulse_period+0x4f2>
				Status = VL53L0X_WrByte(Dev,
 800e354:	18bc      	adds	r4, r7, r2
 800e356:	2322      	movs	r3, #34	; 0x22
 800e358:	18fb      	adds	r3, r7, r3
 800e35a:	781a      	ldrb	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2150      	movs	r1, #80	; 0x50
 800e360:	0018      	movs	r0, r3
 800e362:	f001 faff 	bl	800f964 <VL53L0X_WrByte>
 800e366:	0003      	movs	r3, r0
 800e368:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e36a:	2127      	movs	r1, #39	; 0x27
 800e36c:	187b      	adds	r3, r7, r1
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	b25b      	sxtb	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d108      	bne.n	800e388 <VL53L0X_set_vcsel_pulse_period+0x510>
				Status = set_sequence_step_timeout(Dev,
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	187c      	adds	r4, r7, r1
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2103      	movs	r1, #3
 800e37e:	0018      	movs	r0, r3
 800e380:	f7ff fc42 	bl	800dc08 <set_sequence_step_timeout>
 800e384:	0003      	movs	r3, r0
 800e386:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800e388:	2127      	movs	r1, #39	; 0x27
 800e38a:	187b      	adds	r3, r7, r1
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b25b      	sxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d108      	bne.n	800e3a6 <VL53L0X_set_vcsel_pulse_period+0x52e>
				Status = set_sequence_step_timeout(Dev,
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	187c      	adds	r4, r7, r1
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2102      	movs	r1, #2
 800e39c:	0018      	movs	r0, r3
 800e39e:	f7ff fc33 	bl	800dc08 <set_sequence_step_timeout>
 800e3a2:	0003      	movs	r3, r0
 800e3a4:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	1cba      	adds	r2, r7, #2
 800e3aa:	21e8      	movs	r1, #232	; 0xe8
 800e3ac:	7812      	ldrb	r2, [r2, #0]
 800e3ae:	545a      	strb	r2, [r3, r1]
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e3b0:	e035      	b.n	800e41e <VL53L0X_set_vcsel_pulse_period+0x5a6>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800e3b2:	2527      	movs	r5, #39	; 0x27
 800e3b4:	197c      	adds	r4, r7, r5
 800e3b6:	2318      	movs	r3, #24
 800e3b8:	18fa      	adds	r2, r7, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2104      	movs	r1, #4
 800e3be:	0018      	movs	r0, r3
 800e3c0:	f7ff fb08 	bl	800d9d4 <get_sequence_step_timeout>
 800e3c4:	0003      	movs	r3, r0
 800e3c6:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800e3c8:	197b      	adds	r3, r7, r5
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	b25b      	sxtb	r3, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10a      	bne.n	800e3e8 <VL53L0X_set_vcsel_pulse_period+0x570>
				Status = VL53L0X_WrByte(Dev,
 800e3d2:	197c      	adds	r4, r7, r5
 800e3d4:	2322      	movs	r3, #34	; 0x22
 800e3d6:	18fb      	adds	r3, r7, r3
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2170      	movs	r1, #112	; 0x70
 800e3de:	0018      	movs	r0, r3
 800e3e0:	f001 fac0 	bl	800f964 <VL53L0X_WrByte>
 800e3e4:	0003      	movs	r3, r0
 800e3e6:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800e3e8:	2127      	movs	r1, #39	; 0x27
 800e3ea:	187b      	adds	r3, r7, r1
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	b25b      	sxtb	r3, r3
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d108      	bne.n	800e406 <VL53L0X_set_vcsel_pulse_period+0x58e>
				Status = set_sequence_step_timeout(Dev,
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	187c      	adds	r4, r7, r1
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2104      	movs	r1, #4
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	f7ff fc03 	bl	800dc08 <set_sequence_step_timeout>
 800e402:	0003      	movs	r3, r0
 800e404:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	1cba      	adds	r2, r7, #2
 800e40a:	21e0      	movs	r1, #224	; 0xe0
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	545a      	strb	r2, [r3, r1]
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800e410:	e005      	b.n	800e41e <VL53L0X_set_vcsel_pulse_period+0x5a6>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e412:	2327      	movs	r3, #39	; 0x27
 800e414:	18fb      	adds	r3, r7, r3
 800e416:	22fc      	movs	r2, #252	; 0xfc
 800e418:	701a      	strb	r2, [r3, #0]
 800e41a:	e000      	b.n	800e41e <VL53L0X_set_vcsel_pulse_period+0x5a6>
		}
	}
 800e41c:	46c0      	nop			; (mov r8, r8)

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800e41e:	2227      	movs	r2, #39	; 0x27
 800e420:	18bb      	adds	r3, r7, r2
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	b25b      	sxtb	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10b      	bne.n	800e442 <VL53L0X_set_vcsel_pulse_period+0x5ca>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800e430:	18bc      	adds	r4, r7, r2
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	0011      	movs	r1, r2
 800e438:	0018      	movs	r0, r3
 800e43a:	f7fc f887 	bl	800a54c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800e43e:	0003      	movs	r3, r0
 800e440:	7023      	strb	r3, [r4, #0]
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800e442:	2227      	movs	r2, #39	; 0x27
 800e444:	18bb      	adds	r3, r7, r2
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	b25b      	sxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d109      	bne.n	800e462 <VL53L0X_set_vcsel_pulse_period+0x5ea>
		Status = VL53L0X_perform_phase_calibration(
 800e44e:	18bc      	adds	r4, r7, r2
 800e450:	230f      	movs	r3, #15
 800e452:	18f9      	adds	r1, r7, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	2301      	movs	r3, #1
 800e458:	2200      	movs	r2, #0
 800e45a:	f7fe fae4 	bl	800ca26 <VL53L0X_perform_phase_calibration>
 800e45e:	0003      	movs	r3, r0
 800e460:	7023      	strb	r3, [r4, #0]
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800e462:	2327      	movs	r3, #39	; 0x27
 800e464:	18fb      	adds	r3, r7, r3
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	b25b      	sxtb	r3, r3
}
 800e46a:	0018      	movs	r0, r3
 800e46c:	46bd      	mov	sp, r7
 800e46e:	b00a      	add	sp, #40	; 0x28
 800e470:	bdb0      	pop	{r4, r5, r7, pc}

0800e472 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800e472:	b590      	push	{r4, r7, lr}
 800e474:	b087      	sub	sp, #28
 800e476:	af00      	add	r7, sp, #0
 800e478:	60f8      	str	r0, [r7, #12]
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	200b      	movs	r0, #11
 800e47e:	183b      	adds	r3, r7, r0
 800e480:	1c0a      	adds	r2, r1, #0
 800e482:	701a      	strb	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e484:	2317      	movs	r3, #23
 800e486:	18fb      	adds	r3, r7, r3
 800e488:	2200      	movs	r2, #0
 800e48a:	701a      	strb	r2, [r3, #0]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800e48c:	183b      	adds	r3, r7, r0
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <VL53L0X_get_vcsel_pulse_period+0x28>
 800e494:	2b01      	cmp	r3, #1
 800e496:	d00c      	beq.n	800e4b2 <VL53L0X_get_vcsel_pulse_period+0x40>
 800e498:	e017      	b.n	800e4ca <VL53L0X_get_vcsel_pulse_period+0x58>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e49a:	2317      	movs	r3, #23
 800e49c:	18fc      	adds	r4, r7, r3
 800e49e:	2316      	movs	r3, #22
 800e4a0:	18fa      	adds	r2, r7, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2150      	movs	r1, #80	; 0x50
 800e4a6:	0018      	movs	r0, r3
 800e4a8:	f001 fb0b 	bl	800fac2 <VL53L0X_RdByte>
 800e4ac:	0003      	movs	r3, r0
 800e4ae:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e4b0:	e00f      	b.n	800e4d2 <VL53L0X_get_vcsel_pulse_period+0x60>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800e4b2:	2317      	movs	r3, #23
 800e4b4:	18fc      	adds	r4, r7, r3
 800e4b6:	2316      	movs	r3, #22
 800e4b8:	18fa      	adds	r2, r7, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2170      	movs	r1, #112	; 0x70
 800e4be:	0018      	movs	r0, r3
 800e4c0:	f001 faff 	bl	800fac2 <VL53L0X_RdByte>
 800e4c4:	0003      	movs	r3, r0
 800e4c6:	7023      	strb	r3, [r4, #0]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800e4c8:	e003      	b.n	800e4d2 <VL53L0X_get_vcsel_pulse_period+0x60>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e4ca:	2317      	movs	r3, #23
 800e4cc:	18fb      	adds	r3, r7, r3
 800e4ce:	22fc      	movs	r2, #252	; 0xfc
 800e4d0:	701a      	strb	r2, [r3, #0]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800e4d2:	2317      	movs	r3, #23
 800e4d4:	18fb      	adds	r3, r7, r3
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	b25b      	sxtb	r3, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d109      	bne.n	800e4f2 <VL53L0X_get_vcsel_pulse_period+0x80>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800e4de:	2316      	movs	r3, #22
 800e4e0:	18fb      	adds	r3, r7, r3
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f7fe fbbb 	bl	800cc60 <VL53L0X_decode_vcsel_period>
 800e4ea:	0003      	movs	r3, r0
 800e4ec:	001a      	movs	r2, r3
		*pVCSELPulsePeriodPCLK =
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	701a      	strb	r2, [r3, #0]

	return Status;
 800e4f2:	2317      	movs	r3, #23
 800e4f4:	18fb      	adds	r3, r7, r3
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	b25b      	sxtb	r3, r3
}
 800e4fa:	0018      	movs	r0, r3
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	b007      	add	sp, #28
 800e500:	bd90      	pop	{r4, r7, pc}
	...

0800e504 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800e504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e506:	b093      	sub	sp, #76	; 0x4c
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e50e:	2147      	movs	r1, #71	; 0x47
 800e510:	187b      	adds	r3, r7, r1
 800e512:	2200      	movs	r2, #0
 800e514:	701a      	strb	r2, [r3, #0]
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e516:	23fa      	movs	r3, #250	; 0xfa
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e51c:	4b7a      	ldr	r3, [pc, #488]	; (800e708 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x204>)
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800e520:	23f0      	movs	r3, #240	; 0xf0
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e526:	23a5      	movs	r3, #165	; 0xa5
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800e52c:	4b77      	ldr	r3, [pc, #476]	; (800e70c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x208>)
 800e52e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800e530:	4b77      	ldr	r3, [pc, #476]	; (800e710 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x20c>)
 800e532:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e534:	23a5      	movs	r3, #165	; 0xa5
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e53a:	4b76      	ldr	r3, [pc, #472]	; (800e714 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x210>)
 800e53c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800e542:	4b75      	ldr	r3, [pc, #468]	; (800e718 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x214>)
 800e544:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800e546:	2300      	movs	r3, #0
 800e548:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	6a3b      	ldr	r3, [r7, #32]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d206      	bcs.n	800e560 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x5c>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e552:	187b      	adds	r3, r7, r1
 800e554:	22fc      	movs	r2, #252	; 0xfc
 800e556:	701a      	strb	r2, [r3, #0]
		return Status;
 800e558:	187b      	adds	r3, r7, r1
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	e0ce      	b.n	800e6fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800e560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	18d3      	adds	r3, r2, r3
	FinalRangeTimingBudgetMicroSeconds =
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e56c:	2647      	movs	r6, #71	; 0x47
 800e56e:	19bc      	adds	r4, r7, r6
 800e570:	2514      	movs	r5, #20
 800e572:	197a      	adds	r2, r7, r5
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	0011      	movs	r1, r2
 800e578:	0018      	movs	r0, r3
 800e57a:	f7fc f99b 	bl	800a8b4 <VL53L0X_GetSequenceStepEnables>
 800e57e:	0003      	movs	r3, r0
 800e580:	7023      	strb	r3, [r4, #0]

	if (Status == VL53L0X_ERROR_NONE &&
 800e582:	19bb      	adds	r3, r7, r6
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	b25b      	sxtb	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d000      	beq.n	800e58e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8a>
 800e58c:	e06d      	b.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
		(SchedulerSequenceSteps.TccOn  ||
 800e58e:	197b      	adds	r3, r7, r5
 800e590:	781b      	ldrb	r3, [r3, #0]
	if (Status == VL53L0X_ERROR_NONE &&
 800e592:	2b00      	cmp	r3, #0
 800e594:	d107      	bne.n	800e5a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.MsrcOn ||
 800e596:	197b      	adds	r3, r7, r5
 800e598:	785b      	ldrb	r3, [r3, #1]
		(SchedulerSequenceSteps.TccOn  ||
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d103      	bne.n	800e5a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
		SchedulerSequenceSteps.DssOn)) {
 800e59e:	197b      	adds	r3, r7, r5
 800e5a0:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d061      	beq.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800e5a6:	2547      	movs	r5, #71	; 0x47
 800e5a8:	197c      	adds	r4, r7, r5
 800e5aa:	2310      	movs	r3, #16
 800e5ac:	18fa      	adds	r2, r7, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2102      	movs	r1, #2
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	f7ff fa0e 	bl	800d9d4 <get_sequence_step_timeout>
 800e5b8:	0003      	movs	r3, r0
 800e5ba:	7023      	strb	r3, [r4, #0]
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800e5bc:	197b      	adds	r3, r7, r5
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	b25b      	sxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d003      	beq.n	800e5ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0xca>
			return Status;
 800e5c6:	197b      	adds	r3, r7, r5
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	b25b      	sxtb	r3, r3
 800e5cc:	e097      	b.n	800e6fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800e5ce:	2314      	movs	r3, #20
 800e5d0:	18fb      	adds	r3, r7, r3
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d010      	beq.n	800e5fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800e5d8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800e5da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5dc:	18d3      	adds	r3, r2, r3
 800e5de:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800e5e0:	69fa      	ldr	r2, [r7, #28]
 800e5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d204      	bcs.n	800e5f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xee>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800e5e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f0:	e003      	b.n	800e5fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e5f2:	2347      	movs	r3, #71	; 0x47
 800e5f4:	18fb      	adds	r3, r7, r3
 800e5f6:	22fc      	movs	r2, #252	; 0xfc
 800e5f8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800e5fa:	2247      	movs	r2, #71	; 0x47
 800e5fc:	18bb      	adds	r3, r7, r2
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	b25b      	sxtb	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d003      	beq.n	800e60e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x10a>
			LOG_FUNCTION_END(Status);
			return Status;
 800e606:	18bb      	adds	r3, r7, r2
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	b25b      	sxtb	r3, r3
 800e60c:	e077      	b.n	800e6fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800e60e:	2314      	movs	r3, #20
 800e610:	18fb      	adds	r3, r7, r3
 800e612:	789b      	ldrb	r3, [r3, #2]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d012      	beq.n	800e63e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	18d3      	adds	r3, r2, r3
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e622:	69fa      	ldr	r2, [r7, #28]
 800e624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e626:	429a      	cmp	r2, r3
 800e628:	d204      	bcs.n	800e634 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x130>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e62a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	643b      	str	r3, [r7, #64]	; 0x40
 800e632:	e01a      	b.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e634:	2347      	movs	r3, #71	; 0x47
 800e636:	18fb      	adds	r3, r7, r3
 800e638:	22fc      	movs	r2, #252	; 0xfc
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	e015      	b.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800e63e:	2314      	movs	r3, #20
 800e640:	18fb      	adds	r3, r7, r3
 800e642:	785b      	ldrb	r3, [r3, #1]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d010      	beq.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e64c:	18d3      	adds	r3, r2, r3
 800e64e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e650:	69fa      	ldr	r2, [r7, #28]
 800e652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e654:	429a      	cmp	r2, r3
 800e656:	d204      	bcs.n	800e662 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800e658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	643b      	str	r3, [r7, #64]	; 0x40
 800e660:	e003      	b.n	800e66a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x166>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e662:	2347      	movs	r3, #71	; 0x47
 800e664:	18fb      	adds	r3, r7, r3
 800e666:	22fc      	movs	r2, #252	; 0xfc
 800e668:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800e66a:	2247      	movs	r2, #71	; 0x47
 800e66c:	18bb      	adds	r3, r7, r2
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	b25b      	sxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17a>
		LOG_FUNCTION_END(Status);
		return Status;
 800e676:	18bb      	adds	r3, r7, r2
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	b25b      	sxtb	r3, r3
 800e67c:	e03f      	b.n	800e6fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1fa>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800e67e:	2314      	movs	r3, #20
 800e680:	18fb      	adds	r3, r7, r3
 800e682:	78db      	ldrb	r3, [r3, #3]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d01b      	beq.n	800e6c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800e688:	2347      	movs	r3, #71	; 0x47
 800e68a:	18fc      	adds	r4, r7, r3
 800e68c:	230c      	movs	r3, #12
 800e68e:	18fa      	adds	r2, r7, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2103      	movs	r1, #3
 800e694:	0018      	movs	r0, r3
 800e696:	f7ff f99d 	bl	800d9d4 <get_sequence_step_timeout>
 800e69a:	0003      	movs	r3, r0
 800e69c:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6a2:	18d3      	adds	r3, r2, r3
 800e6a4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800e6a6:	69fa      	ldr	r2, [r7, #28]
 800e6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d204      	bcs.n	800e6b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800e6ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e6b6:	e003      	b.n	800e6c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1bc>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e6b8:	2347      	movs	r3, #71	; 0x47
 800e6ba:	18fb      	adds	r3, r7, r3
 800e6bc:	22fc      	movs	r2, #252	; 0xfc
 800e6be:	701a      	strb	r2, [r3, #0]
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800e6c0:	2147      	movs	r1, #71	; 0x47
 800e6c2:	187b      	adds	r3, r7, r1
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b25b      	sxtb	r3, r3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d114      	bne.n	800e6f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>
		SchedulerSequenceSteps.FinalRangeOn) {
 800e6cc:	2314      	movs	r3, #20
 800e6ce:	18fb      	adds	r3, r7, r3
 800e6d0:	791b      	ldrb	r3, [r3, #4]
	if (Status == VL53L0X_ERROR_NONE &&
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00f      	beq.n	800e6f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f2>

		FinalRangeTimingBudgetMicroSeconds -=
 800e6d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	1ad3      	subs	r3, r2, r3
 800e6dc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800e6de:	187c      	adds	r4, r7, r1
 800e6e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2104      	movs	r1, #4
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	f7ff fa8e 	bl	800dc08 <set_sequence_step_timeout>
 800e6ec:	0003      	movs	r3, r0
 800e6ee:	7023      	strb	r3, [r4, #0]
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800e6f6:	2347      	movs	r3, #71	; 0x47
 800e6f8:	18fb      	adds	r3, r7, r3
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	b25b      	sxtb	r3, r3
}
 800e6fe:	0018      	movs	r0, r3
 800e700:	46bd      	mov	sp, r7
 800e702:	b013      	add	sp, #76	; 0x4c
 800e704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e706:	46c0      	nop			; (mov r8, r8)
 800e708:	00000776 	.word	0x00000776
 800e70c:	0000024e 	.word	0x0000024e
 800e710:	000002b2 	.word	0x000002b2
 800e714:	00000226 	.word	0x00000226
 800e718:	00004e20 	.word	0x00004e20

0800e71c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800e71c:	b5b0      	push	{r4, r5, r7, lr}
 800e71e:	b090      	sub	sp, #64	; 0x40
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e726:	213f      	movs	r1, #63	; 0x3f
 800e728:	187b      	adds	r3, r7, r1
 800e72a:	2200      	movs	r2, #0
 800e72c:	701a      	strb	r2, [r3, #0]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800e72e:	23fa      	movs	r3, #250	; 0xfa
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800e734:	4b5e      	ldr	r3, [pc, #376]	; (800e8b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x194>)
 800e736:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800e738:	23f0      	movs	r3, #240	; 0xf0
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800e73e:	23a5      	movs	r3, #165	; 0xa5
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800e744:	4b5b      	ldr	r3, [pc, #364]	; (800e8b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x198>)
 800e746:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800e748:	4b5b      	ldr	r3, [pc, #364]	; (800e8b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>)
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800e74c:	23a5      	movs	r3, #165	; 0xa5
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800e752:	4b5a      	ldr	r3, [pc, #360]	; (800e8bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a0>)
 800e754:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800e75a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	18d2      	adds	r2, r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e764:	000d      	movs	r5, r1
 800e766:	187c      	adds	r4, r7, r1
 800e768:	2318      	movs	r3, #24
 800e76a:	18fa      	adds	r2, r7, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	0011      	movs	r1, r2
 800e770:	0018      	movs	r0, r3
 800e772:	f7fc f89f 	bl	800a8b4 <VL53L0X_GetSequenceStepEnables>
 800e776:	0003      	movs	r3, r0
 800e778:	7023      	strb	r3, [r4, #0]

	if (Status != VL53L0X_ERROR_NONE) {
 800e77a:	197b      	adds	r3, r7, r5
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
		LOG_FUNCTION_END(Status);
		return Status;
 800e784:	197b      	adds	r3, r7, r5
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	b25b      	sxtb	r3, r3
 800e78a:	e08d      	b.n	800e8a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800e78c:	2218      	movs	r2, #24
 800e78e:	18bb      	adds	r3, r7, r2
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d107      	bne.n	800e7a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.MsrcOn ||
 800e796:	18bb      	adds	r3, r7, r2
 800e798:	785b      	ldrb	r3, [r3, #1]
	if (SchedulerSequenceSteps.TccOn  ||
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8a>
		SchedulerSequenceSteps.DssOn) {
 800e79e:	18bb      	adds	r3, r7, r2
 800e7a0:	789b      	ldrb	r3, [r3, #2]
		SchedulerSequenceSteps.MsrcOn ||
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d038      	beq.n	800e818 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>

		Status = get_sequence_step_timeout(Dev,
 800e7a6:	253f      	movs	r5, #63	; 0x3f
 800e7a8:	197c      	adds	r4, r7, r5
 800e7aa:	2310      	movs	r3, #16
 800e7ac:	18fa      	adds	r2, r7, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	0018      	movs	r0, r3
 800e7b4:	f7ff f90e 	bl	800d9d4 <get_sequence_step_timeout>
 800e7b8:	0003      	movs	r3, r0
 800e7ba:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800e7bc:	197b      	adds	r3, r7, r5
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	b25b      	sxtb	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d128      	bne.n	800e818 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
			if (SchedulerSequenceSteps.TccOn) {
 800e7c6:	2318      	movs	r3, #24
 800e7c8:	18fb      	adds	r3, r7, r3
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d007      	beq.n	800e7e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc4>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e7d4:	6939      	ldr	r1, [r7, #16]
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800e7da:	18d2      	adds	r2, r2, r3
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800e7e0:	2318      	movs	r3, #24
 800e7e2:	18fb      	adds	r3, r7, r3
 800e7e4:	789b      	ldrb	r3, [r3, #2]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d009      	beq.n	800e7fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800e7ee:	6939      	ldr	r1, [r7, #16]
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	18cb      	adds	r3, r1, r3
 800e7f4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800e7f6:	18d2      	adds	r2, r2, r3
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	601a      	str	r2, [r3, #0]
 800e7fc:	e00c      	b.n	800e818 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800e7fe:	2318      	movs	r3, #24
 800e800:	18fb      	adds	r3, r7, r3
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d007      	beq.n	800e818 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800e80c:	6939      	ldr	r1, [r7, #16]
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	18cb      	adds	r3, r1, r3
				*pMeasurementTimingBudgetMicroSeconds +=
 800e812:	18d2      	adds	r2, r2, r3
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e818:	223f      	movs	r2, #63	; 0x3f
 800e81a:	18bb      	adds	r3, r7, r2
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	b25b      	sxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d116      	bne.n	800e852 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800e824:	2318      	movs	r3, #24
 800e826:	18fb      	adds	r3, r7, r3
 800e828:	78db      	ldrb	r3, [r3, #3]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d011      	beq.n	800e852 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x136>
			Status = get_sequence_step_timeout(Dev,
 800e82e:	18bc      	adds	r4, r7, r2
 800e830:	230c      	movs	r3, #12
 800e832:	18fa      	adds	r2, r7, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2103      	movs	r1, #3
 800e838:	0018      	movs	r0, r3
 800e83a:	f7ff f8cb 	bl	800d9d4 <get_sequence_step_timeout>
 800e83e:	0003      	movs	r3, r0
 800e840:	7023      	strb	r3, [r4, #0]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800e84c:	18d2      	adds	r2, r2, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e852:	223f      	movs	r2, #63	; 0x3f
 800e854:	18bb      	adds	r3, r7, r2
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	b25b      	sxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d116      	bne.n	800e88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800e85e:	2318      	movs	r3, #24
 800e860:	18fb      	adds	r3, r7, r3
 800e862:	791b      	ldrb	r3, [r3, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d011      	beq.n	800e88c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x170>
			Status = get_sequence_step_timeout(Dev,
 800e868:	18bc      	adds	r4, r7, r2
 800e86a:	2314      	movs	r3, #20
 800e86c:	18fa      	adds	r2, r7, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2104      	movs	r1, #4
 800e872:	0018      	movs	r0, r3
 800e874:	f7ff f8ae 	bl	800d9d4 <get_sequence_step_timeout>
 800e878:	0003      	movs	r3, r0
 800e87a:	7023      	strb	r3, [r4, #0]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800e880:	6979      	ldr	r1, [r7, #20]
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	18cb      	adds	r3, r1, r3
			*pMeasurementTimingBudgetMicroSeconds +=
 800e886:	18d2      	adds	r2, r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800e88c:	233f      	movs	r3, #63	; 0x3f
 800e88e:	18fb      	adds	r3, r7, r3
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	b25b      	sxtb	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d103      	bne.n	800e8a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x184>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e8a0:	233f      	movs	r3, #63	; 0x3f
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	b25b      	sxtb	r3, r3
}
 800e8a8:	0018      	movs	r0, r3
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	b010      	add	sp, #64	; 0x40
 800e8ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b0:	00000776 	.word	0x00000776
 800e8b4:	0000024e 	.word	0x0000024e
 800e8b8:	000002b2 	.word	0x000002b2
 800e8bc:	00000226 	.word	0x00000226

0800e8c0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800e8c0:	b5b0      	push	{r4, r5, r7, lr}
 800e8c2:	b088      	sub	sp, #32
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8ca:	231f      	movs	r3, #31
 800e8cc:	18fb      	adds	r3, r7, r3
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	701a      	strb	r2, [r3, #0]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800e8d6:	e105      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	18d2      	adds	r2, r2, r3
 800e8de:	2113      	movs	r1, #19
 800e8e0:	187b      	adds	r3, r7, r1
 800e8e2:	7812      	ldrb	r2, [r2, #0]
 800e8e4:	701a      	strb	r2, [r3, #0]
		Index++;
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800e8ec:	187b      	adds	r3, r7, r1
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	2bff      	cmp	r3, #255	; 0xff
 800e8f2:	d000      	beq.n	800e8f6 <VL53L0X_load_tuning_settings+0x36>
 800e8f4:	e0ba      	b.n	800ea6c <VL53L0X_load_tuning_settings+0x1ac>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	683a      	ldr	r2, [r7, #0]
 800e8fa:	18d2      	adds	r2, r2, r3
 800e8fc:	2111      	movs	r1, #17
 800e8fe:	187b      	adds	r3, r7, r1
 800e900:	7812      	ldrb	r2, [r2, #0]
 800e902:	701a      	strb	r2, [r3, #0]
			Index++;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	3301      	adds	r3, #1
 800e908:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800e90a:	187b      	adds	r3, r7, r1
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b03      	cmp	r3, #3
 800e910:	d100      	bne.n	800e914 <VL53L0X_load_tuning_settings+0x54>
 800e912:	e07f      	b.n	800ea14 <VL53L0X_load_tuning_settings+0x154>
 800e914:	dd00      	ble.n	800e918 <VL53L0X_load_tuning_settings+0x58>
 800e916:	e0a4      	b.n	800ea62 <VL53L0X_load_tuning_settings+0x1a2>
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d054      	beq.n	800e9c6 <VL53L0X_load_tuning_settings+0x106>
 800e91c:	dd00      	ble.n	800e920 <VL53L0X_load_tuning_settings+0x60>
 800e91e:	e0a0      	b.n	800ea62 <VL53L0X_load_tuning_settings+0x1a2>
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <VL53L0X_load_tuning_settings+0x6a>
 800e924:	2b01      	cmp	r3, #1
 800e926:	d027      	beq.n	800e978 <VL53L0X_load_tuning_settings+0xb8>
 800e928:	e09b      	b.n	800ea62 <VL53L0X_load_tuning_settings+0x1a2>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	18d2      	adds	r2, r2, r3
 800e930:	2110      	movs	r1, #16
 800e932:	187b      	adds	r3, r7, r1
 800e934:	7812      	ldrb	r2, [r2, #0]
 800e936:	701a      	strb	r2, [r3, #0]
				Index++;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	3301      	adds	r3, #1
 800e93c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	18d2      	adds	r2, r2, r3
 800e944:	200f      	movs	r0, #15
 800e946:	183b      	adds	r3, r7, r0
 800e948:	7812      	ldrb	r2, [r2, #0]
 800e94a:	701a      	strb	r2, [r3, #0]
				Index++;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	3301      	adds	r3, #1
 800e950:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e952:	187b      	adds	r3, r7, r1
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	b29b      	uxth	r3, r3
 800e958:	021b      	lsls	r3, r3, #8
 800e95a:	b299      	uxth	r1, r3
 800e95c:	183b      	adds	r3, r7, r0
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	b29a      	uxth	r2, r3
 800e962:	200c      	movs	r0, #12
 800e964:	183b      	adds	r3, r7, r0
 800e966:	188a      	adds	r2, r1, r2
 800e968:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	1839      	adds	r1, r7, r0
 800e96e:	239a      	movs	r3, #154	; 0x9a
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	8809      	ldrh	r1, [r1, #0]
 800e974:	52d1      	strh	r1, [r2, r3]
				break;
 800e976:	e0b5      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	18d2      	adds	r2, r2, r3
 800e97e:	2110      	movs	r1, #16
 800e980:	187b      	adds	r3, r7, r1
 800e982:	7812      	ldrb	r2, [r2, #0]
 800e984:	701a      	strb	r2, [r3, #0]
				Index++;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	3301      	adds	r3, #1
 800e98a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	18d2      	adds	r2, r2, r3
 800e992:	200f      	movs	r0, #15
 800e994:	183b      	adds	r3, r7, r0
 800e996:	7812      	ldrb	r2, [r2, #0]
 800e998:	701a      	strb	r2, [r3, #0]
				Index++;
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	3301      	adds	r3, #1
 800e99e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e9a0:	187b      	adds	r3, r7, r1
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	021b      	lsls	r3, r3, #8
 800e9a8:	b299      	uxth	r1, r3
 800e9aa:	183b      	adds	r3, r7, r0
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	200c      	movs	r0, #12
 800e9b2:	183b      	adds	r3, r7, r0
 800e9b4:	188a      	adds	r2, r1, r2
 800e9b6:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	1839      	adds	r1, r7, r0
 800e9bc:	239b      	movs	r3, #155	; 0x9b
 800e9be:	005b      	lsls	r3, r3, #1
 800e9c0:	8809      	ldrh	r1, [r1, #0]
 800e9c2:	52d1      	strh	r1, [r2, r3]
					Temp16);
				break;
 800e9c4:	e08e      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	683a      	ldr	r2, [r7, #0]
 800e9ca:	18d2      	adds	r2, r2, r3
 800e9cc:	2110      	movs	r1, #16
 800e9ce:	187b      	adds	r3, r7, r1
 800e9d0:	7812      	ldrb	r2, [r2, #0]
 800e9d2:	701a      	strb	r2, [r3, #0]
				Index++;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	18d2      	adds	r2, r2, r3
 800e9e0:	200f      	movs	r0, #15
 800e9e2:	183b      	adds	r3, r7, r0
 800e9e4:	7812      	ldrb	r2, [r2, #0]
 800e9e6:	701a      	strb	r2, [r3, #0]
				Index++;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800e9ee:	187b      	adds	r3, r7, r1
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	b299      	uxth	r1, r3
 800e9f8:	183b      	adds	r3, r7, r0
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	200c      	movs	r0, #12
 800ea00:	183b      	adds	r3, r7, r0
 800ea02:	188a      	adds	r2, r1, r2
 800ea04:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	1839      	adds	r1, r7, r0
 800ea0a:	239c      	movs	r3, #156	; 0x9c
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	8809      	ldrh	r1, [r1, #0]
 800ea10:	52d1      	strh	r1, [r2, r3]
				break;
 800ea12:	e067      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	18d2      	adds	r2, r2, r3
 800ea1a:	2110      	movs	r1, #16
 800ea1c:	187b      	adds	r3, r7, r1
 800ea1e:	7812      	ldrb	r2, [r2, #0]
 800ea20:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	3301      	adds	r3, #1
 800ea26:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	683a      	ldr	r2, [r7, #0]
 800ea2c:	18d2      	adds	r2, r2, r3
 800ea2e:	200f      	movs	r0, #15
 800ea30:	183b      	adds	r3, r7, r0
 800ea32:	7812      	ldrb	r2, [r2, #0]
 800ea34:	701a      	strb	r2, [r3, #0]
				Index++;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ea3c:	187b      	adds	r3, r7, r1
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	021b      	lsls	r3, r3, #8
 800ea44:	b299      	uxth	r1, r3
 800ea46:	183b      	adds	r3, r7, r0
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	200c      	movs	r0, #12
 800ea4e:	183b      	adds	r3, r7, r0
 800ea50:	188a      	adds	r2, r1, r2
 800ea52:	801a      	strh	r2, [r3, #0]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	1839      	adds	r1, r7, r0
 800ea58:	239e      	movs	r3, #158	; 0x9e
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	8809      	ldrh	r1, [r1, #0]
 800ea5e:	52d1      	strh	r1, [r2, r3]
				break;
 800ea60:	e040      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ea62:	231f      	movs	r3, #31
 800ea64:	18fb      	adds	r3, r7, r3
 800ea66:	22fc      	movs	r2, #252	; 0xfc
 800ea68:	701a      	strb	r2, [r3, #0]
 800ea6a:	e03b      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
			}

		} else if (NumberOfWrites <= 4) {
 800ea6c:	2313      	movs	r3, #19
 800ea6e:	18fb      	adds	r3, r7, r3
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	d832      	bhi.n	800eadc <VL53L0X_load_tuning_settings+0x21c>
			Address = *(pTuningSettingBuffer + Index);
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	683a      	ldr	r2, [r7, #0]
 800ea7a:	18d2      	adds	r2, r2, r3
 800ea7c:	2312      	movs	r3, #18
 800ea7e:	18fb      	adds	r3, r7, r3
 800ea80:	7812      	ldrb	r2, [r2, #0]
 800ea82:	701a      	strb	r2, [r3, #0]
			Index++;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	3301      	adds	r3, #1
 800ea88:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	61bb      	str	r3, [r7, #24]
 800ea8e:	e00f      	b.n	800eab0 <VL53L0X_load_tuning_settings+0x1f0>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	18d3      	adds	r3, r2, r3
 800ea96:	7819      	ldrb	r1, [r3, #0]
 800ea98:	2308      	movs	r3, #8
 800ea9a:	18fa      	adds	r2, r7, r3
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	18d3      	adds	r3, r2, r3
 800eaa0:	1c0a      	adds	r2, r1, #0
 800eaa2:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	3301      	adds	r3, #1
 800eaae:	61bb      	str	r3, [r7, #24]
 800eab0:	2113      	movs	r1, #19
 800eab2:	187b      	adds	r3, r7, r1
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	dbe9      	blt.n	800ea90 <VL53L0X_load_tuning_settings+0x1d0>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800eabc:	187b      	adds	r3, r7, r1
 800eabe:	781d      	ldrb	r5, [r3, #0]
 800eac0:	231f      	movs	r3, #31
 800eac2:	18fc      	adds	r4, r7, r3
 800eac4:	2308      	movs	r3, #8
 800eac6:	18fa      	adds	r2, r7, r3
 800eac8:	2312      	movs	r3, #18
 800eaca:	18fb      	adds	r3, r7, r3
 800eacc:	7819      	ldrb	r1, [r3, #0]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	002b      	movs	r3, r5
 800ead2:	f000 fed5 	bl	800f880 <VL53L0X_WriteMulti>
 800ead6:	0003      	movs	r3, r0
 800ead8:	7023      	strb	r3, [r4, #0]
 800eada:	e003      	b.n	800eae4 <VL53L0X_load_tuning_settings+0x224>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800eadc:	231f      	movs	r3, #31
 800eade:	18fb      	adds	r3, r7, r3
 800eae0:	22fc      	movs	r2, #252	; 0xfc
 800eae2:	701a      	strb	r2, [r3, #0]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	18d3      	adds	r3, r2, r3
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d006      	beq.n	800eafe <VL53L0X_load_tuning_settings+0x23e>
 800eaf0:	231f      	movs	r3, #31
 800eaf2:	18fb      	adds	r3, r7, r3
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	b25b      	sxtb	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d100      	bne.n	800eafe <VL53L0X_load_tuning_settings+0x23e>
 800eafc:	e6ec      	b.n	800e8d8 <VL53L0X_load_tuning_settings+0x18>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800eafe:	231f      	movs	r3, #31
 800eb00:	18fb      	adds	r3, r7, r3
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	b25b      	sxtb	r3, r3
}
 800eb06:	0018      	movs	r0, r3
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	b008      	add	sp, #32
 800eb0c:	bdb0      	pop	{r4, r5, r7, pc}

0800eb0e <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800eb0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb10:	b089      	sub	sp, #36	; 0x24
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	60f8      	str	r0, [r7, #12]
 800eb16:	60b9      	str	r1, [r7, #8]
 800eb18:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb1a:	251f      	movs	r5, #31
 800eb1c:	197b      	adds	r3, r7, r5
 800eb1e:	2200      	movs	r2, #0
 800eb20:	701a      	strb	r2, [r3, #0]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800eb28:	197c      	adds	r4, r7, r5
 800eb2a:	2613      	movs	r6, #19
 800eb2c:	19ba      	adds	r2, r7, r6
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	0011      	movs	r1, r2
 800eb32:	0018      	movs	r0, r3
 800eb34:	f7fb ff77 	bl	800aa26 <VL53L0X_GetXTalkCompensationEnable>
 800eb38:	0003      	movs	r3, r0
 800eb3a:	7023      	strb	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800eb3c:	197b      	adds	r3, r7, r5
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	b25b      	sxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d111      	bne.n	800eb6a <VL53L0X_get_total_xtalk_rate+0x5c>

		if (xtalkCompEnable) {
 800eb46:	19bb      	adds	r3, r7, r6
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00d      	beq.n	800eb6a <VL53L0X_get_total_xtalk_rate+0x5c>

			VL53L0X_GETPARAMETERFIELD(
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	8a9b      	ldrh	r3, [r3, #20]
 800eb58:	001a      	movs	r2, r3
			totalXtalkMegaCps =
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	4353      	muls	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	3380      	adds	r3, #128	; 0x80
 800eb64:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800eb6a:	231f      	movs	r3, #31
 800eb6c:	18fb      	adds	r3, r7, r3
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	b25b      	sxtb	r3, r3
}
 800eb72:	0018      	movs	r0, r3
 800eb74:	46bd      	mov	sp, r7
 800eb76:	b009      	add	sp, #36	; 0x24
 800eb78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb7a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800eb7a:	b5b0      	push	{r4, r5, r7, lr}
 800eb7c:	b086      	sub	sp, #24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	60f8      	str	r0, [r7, #12]
 800eb82:	60b9      	str	r1, [r7, #8]
 800eb84:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800eb86:	2517      	movs	r5, #23
 800eb88:	197b      	adds	r3, r7, r5
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800eb96:	197c      	adds	r4, r7, r5
 800eb98:	2310      	movs	r3, #16
 800eb9a:	18fa      	adds	r2, r7, r3
 800eb9c:	68b9      	ldr	r1, [r7, #8]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	0018      	movs	r0, r3
 800eba2:	f7ff ffb4 	bl	800eb0e <VL53L0X_get_total_xtalk_rate>
 800eba6:	0003      	movs	r3, r0
 800eba8:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800ebaa:	197b      	adds	r3, r7, r5
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d105      	bne.n	800ebc0 <VL53L0X_get_total_signal_rate+0x46>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	18d2      	adds	r2, r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	601a      	str	r2, [r3, #0]

	return Status;
 800ebc0:	2317      	movs	r3, #23
 800ebc2:	18fb      	adds	r3, r7, r3
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	b25b      	sxtb	r3, r3
}
 800ebc8:	0018      	movs	r0, r3
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	b006      	add	sp, #24
 800ebce:	bdb0      	pop	{r4, r5, r7, pc}

0800ebd0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b09a      	sub	sp, #104	; 0x68
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
 800ebdc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ebde:	2312      	movs	r3, #18
 800ebe0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ebe2:	2380      	movs	r3, #128	; 0x80
 800ebe4:	01db      	lsls	r3, r3, #7
 800ebe6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ebe8:	2342      	movs	r3, #66	; 0x42
 800ebea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ebec:	2306      	movs	r3, #6
 800ebee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ebf0:	2307      	movs	r3, #7
 800ebf2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ebf4:	2343      	movs	r3, #67	; 0x43
 800ebf6:	18fb      	adds	r3, r7, r3
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	23aa      	movs	r3, #170	; 0xaa
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	5ad3      	ldrh	r3, [r2, r3]
	dmaxCalRange_mm =
 800ec04:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	23ac      	movs	r3, #172	; 0xac
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	58d3      	ldr	r3, [r2, r3]
 800ec0e:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ec10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec14:	4353      	muls	r3, r2
 800ec16:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ec18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1a:	3380      	adds	r3, #128	; 0x80
 800ec1c:	0a1b      	lsrs	r3, r3, #8
 800ec1e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ec20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec24:	4353      	muls	r3, r2
 800ec26:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d01c      	beq.n	800ec6c <VL53L0X_calc_dmax+0x9c>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	029b      	lsls	r3, r3, #10
 800ec36:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ec3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec3e:	18d3      	adds	r3, r2, r3
 800ec40:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ec46:	f7f1 fa7b 	bl	8000140 <__udivsi3>
 800ec4a:	0003      	movs	r3, r0
 800ec4c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ec4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec50:	0013      	movs	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	189b      	adds	r3, r3, r2
 800ec56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ec58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec5a:	435b      	muls	r3, r3
 800ec5c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ec5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec60:	2280      	movs	r2, #128	; 0x80
 800ec62:	0212      	lsls	r2, r2, #8
 800ec64:	4694      	mov	ip, r2
 800ec66:	4463      	add	r3, ip
 800ec68:	0c1b      	lsrs	r3, r3, #16
 800ec6a:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec70:	4353      	muls	r3, r2
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ec74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec76:	2280      	movs	r2, #128	; 0x80
 800ec78:	0212      	lsls	r2, r2, #8
 800ec7a:	4694      	mov	ip, r2
 800ec7c:	4463      	add	r3, ip
 800ec7e:	0c1b      	lsrs	r3, r3, #16
 800ec80:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	435b      	muls	r3, r3
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ec88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec8a:	2280      	movs	r2, #128	; 0x80
 800ec8c:	0212      	lsls	r2, r2, #8
 800ec8e:	4694      	mov	ip, r2
 800ec90:	4463      	add	r3, ip
 800ec92:	0c1b      	lsrs	r3, r3, #16
 800ec94:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ec96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec98:	085a      	lsrs	r2, r3, #1
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	18d3      	adds	r3, r2, r3
 800ec9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eca0:	0018      	movs	r0, r3
 800eca2:	f7f1 fa4d 	bl	8000140 <__udivsi3>
 800eca6:	0003      	movs	r3, r0
 800eca8:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecae:	4353      	muls	r3, r2
 800ecb0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ecb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecb4:	2380      	movs	r3, #128	; 0x80
 800ecb6:	025b      	lsls	r3, r3, #9
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d302      	bcc.n	800ecc2 <VL53L0X_calc_dmax+0xf2>
		minSignalNeeded_p3 = 0xfff00000;
 800ecbc:	4b5d      	ldr	r3, [pc, #372]	; (800ee34 <VL53L0X_calc_dmax+0x264>)
 800ecbe:	663b      	str	r3, [r7, #96]	; 0x60
 800ecc0:	e017      	b.n	800ecf2 <VL53L0X_calc_dmax+0x122>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800ecc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecc4:	085a      	lsrs	r2, r3, #1
 800ecc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecc8:	18d3      	adds	r3, r2, r3
 800ecca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eccc:	0018      	movs	r0, r3
 800ecce:	f7f1 fa37 	bl	8000140 <__udivsi3>
 800ecd2:	0003      	movs	r3, r0
 800ecd4:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ecd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecda:	4353      	muls	r3, r2
 800ecdc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ecde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ece0:	2280      	movs	r2, #128	; 0x80
 800ece2:	0212      	lsls	r2, r2, #8
 800ece4:	4694      	mov	ip, r2
 800ece6:	4463      	add	r3, ip
 800ece8:	0c1b      	lsrs	r3, r3, #16
 800ecea:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ecec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecee:	435b      	muls	r3, r3
 800ecf0:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ecf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf4:	039b      	lsls	r3, r3, #14
 800ecf6:	33f5      	adds	r3, #245	; 0xf5
 800ecf8:	33ff      	adds	r3, #255	; 0xff
 800ecfa:	22fa      	movs	r2, #250	; 0xfa
 800ecfc:	0091      	lsls	r1, r2, #2
 800ecfe:	0018      	movs	r0, r3
 800ed00:	f7f1 fa1e 	bl	8000140 <__udivsi3>
 800ed04:	0003      	movs	r3, r0
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	435b      	muls	r3, r3
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800ed0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed10:	435b      	muls	r3, r3
 800ed12:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	3308      	adds	r3, #8
 800ed18:	091b      	lsrs	r3, r3, #4
 800ed1a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800ed1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed1e:	6a3b      	ldr	r3, [r7, #32]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800ed24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed26:	0013      	movs	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	189b      	adds	r3, r3, r2
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ed30:	69fb      	ldr	r3, [r7, #28]
 800ed32:	2280      	movs	r2, #128	; 0x80
 800ed34:	0192      	lsls	r2, r2, #6
 800ed36:	4694      	mov	ip, r2
 800ed38:	4463      	add	r3, ip
 800ed3a:	0b9b      	lsrs	r3, r3, #14
 800ed3c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ed3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed42:	18d3      	adds	r3, r2, r3
 800ed44:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ed46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed48:	085b      	lsrs	r3, r3, #1
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	18d3      	adds	r3, r2, r3
 800ed4e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ed50:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ed52:	69b8      	ldr	r0, [r7, #24]
 800ed54:	f7f1 f9f4 	bl	8000140 <__udivsi3>
 800ed58:	0003      	movs	r3, r0
 800ed5a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	039b      	lsls	r3, r3, #14
 800ed60:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	085b      	lsrs	r3, r3, #1
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	18d3      	adds	r3, r2, r3
 800ed6a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ed6c:	69f9      	ldr	r1, [r7, #28]
 800ed6e:	69b8      	ldr	r0, [r7, #24]
 800ed70:	f7f1 f9e6 	bl	8000140 <__udivsi3>
 800ed74:	0003      	movs	r3, r0
 800ed76:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed7c:	4353      	muls	r3, r2
 800ed7e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	33f5      	adds	r3, #245	; 0xf5
 800ed84:	33ff      	adds	r3, #255	; 0xff
 800ed86:	22fa      	movs	r2, #250	; 0xfa
 800ed88:	0091      	lsls	r1, r2, #2
 800ed8a:	0018      	movs	r0, r3
 800ed8c:	f7f1 f9d8 	bl	8000140 <__udivsi3>
 800ed90:	0003      	movs	r3, r0
 800ed92:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	011b      	lsls	r3, r3, #4
 800ed98:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	33f5      	adds	r3, #245	; 0xf5
 800ed9e:	33ff      	adds	r3, #255	; 0xff
 800eda0:	22fa      	movs	r2, #250	; 0xfa
 800eda2:	0091      	lsls	r1, r2, #2
 800eda4:	0018      	movs	r0, r3
 800eda6:	f7f1 f9cb 	bl	8000140 <__udivsi3>
 800edaa:	0003      	movs	r3, r0
 800edac:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800edae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edb0:	3380      	adds	r3, #128	; 0x80
 800edb2:	0a1b      	lsrs	r3, r3, #8
 800edb4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	085a      	lsrs	r2, r3, #1
 800edc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc2:	18d3      	adds	r3, r2, r3
 800edc4:	6979      	ldr	r1, [r7, #20]
 800edc6:	0018      	movs	r0, r3
 800edc8:	f7f1 f9ba 	bl	8000140 <__udivsi3>
 800edcc:	0003      	movs	r3, r0
 800edce:	65bb      	str	r3, [r7, #88]	; 0x58
 800edd0:	e001      	b.n	800edd6 <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800edd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edd8:	0018      	movs	r0, r3
 800edda:	f7fd ff6f 	bl	800ccbc <VL53L0X_isqrt>
 800edde:	0003      	movs	r3, r0
 800ede0:	613b      	str	r3, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00a      	beq.n	800edfe <VL53L0X_calc_dmax+0x22e>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	085a      	lsrs	r2, r3, #1
 800edec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edee:	18d3      	adds	r3, r2, r3
 800edf0:	69b9      	ldr	r1, [r7, #24]
 800edf2:	0018      	movs	r0, r3
 800edf4:	f7f1 f9a4 	bl	8000140 <__udivsi3>
 800edf8:	0003      	movs	r3, r0
 800edfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edfc:	e001      	b.n	800ee02 <VL53L0X_calc_dmax+0x232>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ee02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee04:	0018      	movs	r0, r3
 800ee06:	f7fd ff59 	bl	800ccbc <VL53L0X_isqrt>
 800ee0a:	0003      	movs	r3, r0
 800ee0c:	65fb      	str	r3, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800ee0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d902      	bls.n	800ee22 <VL53L0X_calc_dmax+0x252>
		*pdmax_mm = dmaxAmbient;
 800ee1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee20:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ee22:	2343      	movs	r3, #67	; 0x43
 800ee24:	18fb      	adds	r3, r7, r3
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	b25b      	sxtb	r3, r3
}
 800ee2a:	0018      	movs	r0, r3
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b01a      	add	sp, #104	; 0x68
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	46c0      	nop			; (mov r8, r8)
 800ee34:	fff00000 	.word	0xfff00000

0800ee38 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ee38:	b5b0      	push	{r4, r5, r7, lr}
 800ee3a:	b0b4      	sub	sp, #208	; 0xd0
 800ee3c:	af04      	add	r7, sp, #16
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
 800ee44:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ee46:	23c8      	movs	r3, #200	; 0xc8
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	2290      	movs	r2, #144	; 0x90
 800ee4c:	18ba      	adds	r2, r7, r2
 800ee4e:	6013      	str	r3, [r2, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ee50:	2396      	movs	r3, #150	; 0x96
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	228c      	movs	r2, #140	; 0x8c
 800ee56:	18b9      	adds	r1, r7, r2
 800ee58:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ee5a:	23c8      	movs	r3, #200	; 0xc8
 800ee5c:	035b      	lsls	r3, r3, #13
 800ee5e:	2188      	movs	r1, #136	; 0x88
 800ee60:	1879      	adds	r1, r7, r1
 800ee62:	600b      	str	r3, [r1, #0]
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ee64:	4bb5      	ldr	r3, [pc, #724]	; (800f13c <VL53L0X_calc_sigma_estimate+0x304>)
 800ee66:	2184      	movs	r1, #132	; 0x84
 800ee68:	1879      	adds	r1, r7, r1
 800ee6a:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ee6c:	4bb4      	ldr	r3, [pc, #720]	; (800f140 <VL53L0X_calc_sigma_estimate+0x308>)
 800ee6e:	2180      	movs	r1, #128	; 0x80
 800ee70:	1879      	adds	r1, r7, r1
 800ee72:	600b      	str	r3, [r1, #0]
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ee74:	23f0      	movs	r3, #240	; 0xf0
 800ee76:	021b      	lsls	r3, r3, #8
 800ee78:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ee7a:	18bb      	adds	r3, r7, r2
 800ee7c:	6819      	ldr	r1, [r3, #0]
 800ee7e:	23f0      	movs	r3, #240	; 0xf0
 800ee80:	0618      	lsls	r0, r3, #24
 800ee82:	f7f1 f95d 	bl	8000140 <__udivsi3>
 800ee86:	0003      	movs	r3, r0
 800ee88:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ee8a:	4bae      	ldr	r3, [pc, #696]	; (800f144 <VL53L0X_calc_sigma_estimate+0x30c>)
 800ee8c:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ee8e:	2380      	movs	r3, #128	; 0x80
 800ee90:	021b      	lsls	r3, r3, #8
 800ee92:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800ee94:	23c8      	movs	r3, #200	; 0xc8
 800ee96:	039b      	lsls	r3, r3, #14
 800ee98:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800ee9a:	4bab      	ldr	r3, [pc, #684]	; (800f148 <VL53L0X_calc_sigma_estimate+0x310>)
 800ee9c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee9e:	219f      	movs	r1, #159	; 0x9f
 800eea0:	187b      	adds	r3, r7, r1
 800eea2:	2200      	movs	r2, #0
 800eea4:	701a      	strb	r2, [r3, #0]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	691a      	ldr	r2, [r3, #16]
 800eeb0:	0013      	movs	r3, r2
 800eeb2:	015b      	lsls	r3, r3, #5
 800eeb4:	1a9b      	subs	r3, r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	189b      	adds	r3, r3, r2
 800eeba:	00db      	lsls	r3, r3, #3
	ambientRate_kcps =
 800eebc:	0c1b      	lsrs	r3, r3, #16
 800eebe:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800eec6:	000d      	movs	r5, r1
 800eec8:	187c      	adds	r4, r7, r1
 800eeca:	2310      	movs	r3, #16
 800eecc:	18fa      	adds	r2, r7, r3
 800eece:	68b9      	ldr	r1, [r7, #8]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	0018      	movs	r0, r3
 800eed4:	f7ff fe51 	bl	800eb7a <VL53L0X_get_total_signal_rate>
 800eed8:	0003      	movs	r3, r0
 800eeda:	7023      	strb	r3, [r4, #0]
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800eedc:	197c      	adds	r4, r7, r5
 800eede:	2314      	movs	r3, #20
 800eee0:	18fa      	adds	r2, r7, r3
 800eee2:	68b9      	ldr	r1, [r7, #8]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	0018      	movs	r0, r3
 800eee8:	f7ff fe11 	bl	800eb0e <VL53L0X_get_total_xtalk_rate>
 800eeec:	0003      	movs	r3, r0
 800eeee:	7023      	strb	r3, [r4, #0]


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800eef0:	693a      	ldr	r2, [r7, #16]
 800eef2:	0013      	movs	r3, r2
 800eef4:	015b      	lsls	r3, r3, #5
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	189b      	adds	r3, r3, r2
 800eefc:	00db      	lsls	r3, r3, #3
 800eefe:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ef00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef02:	2280      	movs	r2, #128	; 0x80
 800ef04:	0212      	lsls	r2, r2, #8
 800ef06:	4694      	mov	ip, r2
 800ef08:	4463      	add	r3, ip
 800ef0a:	0c1b      	lsrs	r3, r3, #16
 800ef0c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	0013      	movs	r3, r2
 800ef12:	015b      	lsls	r3, r3, #5
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	189b      	adds	r3, r3, r2
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	21a0      	movs	r1, #160	; 0xa0
 800ef1e:	187a      	adds	r2, r7, r1
 800ef20:	6013      	str	r3, [r2, #0]

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800ef22:	187b      	adds	r3, r7, r1
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d902      	bls.n	800ef32 <VL53L0X_calc_sigma_estimate+0xfa>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800ef2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef2e:	187a      	adds	r2, r7, r1
 800ef30:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800ef32:	239f      	movs	r3, #159	; 0x9f
 800ef34:	18fb      	adds	r3, r7, r3
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	b25b      	sxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d174      	bne.n	800f028 <VL53L0X_calc_sigma_estimate+0x1f0>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	22dc      	movs	r2, #220	; 0xdc
 800ef42:	589b      	ldr	r3, [r3, r2]
 800ef44:	20b8      	movs	r0, #184	; 0xb8
 800ef46:	183a      	adds	r2, r7, r0
 800ef48:	6013      	str	r3, [r2, #0]
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ef4a:	245b      	movs	r4, #91	; 0x5b
 800ef4c:	193b      	adds	r3, r7, r4
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	21e0      	movs	r1, #224	; 0xe0
 800ef52:	5c52      	ldrb	r2, [r2, r1]
 800ef54:	701a      	strb	r2, [r3, #0]
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ef56:	193b      	adds	r3, r7, r4
 800ef58:	781a      	ldrb	r2, [r3, #0]
 800ef5a:	183b      	adds	r3, r7, r0
 800ef5c:	6819      	ldr	r1, [r3, #0]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	0018      	movs	r0, r3
 800ef62:	f7fe fcd2 	bl	800d90a <VL53L0X_calc_timeout_mclks>
 800ef66:	0003      	movs	r3, r0
 800ef68:	657b      	str	r3, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	22e4      	movs	r2, #228	; 0xe4
 800ef6e:	589b      	ldr	r3, [r3, r2]
 800ef70:	20b4      	movs	r0, #180	; 0xb4
 800ef72:	183a      	adds	r2, r7, r0
 800ef74:	6013      	str	r3, [r2, #0]
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ef76:	2553      	movs	r5, #83	; 0x53
 800ef78:	197b      	adds	r3, r7, r5
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	21e8      	movs	r1, #232	; 0xe8
 800ef7e:	5c52      	ldrb	r2, [r2, r1]
 800ef80:	701a      	strb	r2, [r3, #0]
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ef82:	197b      	adds	r3, r7, r5
 800ef84:	781a      	ldrb	r2, [r3, #0]
 800ef86:	183b      	adds	r3, r7, r0
 800ef88:	6819      	ldr	r1, [r3, #0]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	0018      	movs	r0, r3
 800ef8e:	f7fe fcbc 	bl	800d90a <VL53L0X_calc_timeout_mclks>
 800ef92:	0003      	movs	r3, r0
 800ef94:	64fb      	str	r3, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800ef96:	2303      	movs	r3, #3
 800ef98:	2298      	movs	r2, #152	; 0x98
 800ef9a:	18b9      	adds	r1, r7, r2
 800ef9c:	600b      	str	r3, [r1, #0]
		if (finalRangeVcselPCLKS == 8)
 800ef9e:	193b      	adds	r3, r7, r4
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b08      	cmp	r3, #8
 800efa4:	d102      	bne.n	800efac <VL53L0X_calc_sigma_estimate+0x174>
			vcselWidth = 2;
 800efa6:	2302      	movs	r3, #2
 800efa8:	18ba      	adds	r2, r7, r2
 800efaa:	6013      	str	r3, [r2, #0]


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800efac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efb0:	18d3      	adds	r3, r2, r3
		peakVcselDuration_us = vcselWidth * 2048 *
 800efb2:	2298      	movs	r2, #152	; 0x98
 800efb4:	18ba      	adds	r2, r7, r2
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	4353      	muls	r3, r2
 800efba:	02db      	lsls	r3, r3, #11
 800efbc:	2494      	movs	r4, #148	; 0x94
 800efbe:	193a      	adds	r2, r7, r4
 800efc0:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800efc2:	193b      	adds	r3, r7, r4
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	33f5      	adds	r3, #245	; 0xf5
 800efc8:	33ff      	adds	r3, #255	; 0xff
 800efca:	22fa      	movs	r2, #250	; 0xfa
 800efcc:	0091      	lsls	r1, r2, #2
 800efce:	0018      	movs	r0, r3
 800efd0:	f7f1 f8b6 	bl	8000140 <__udivsi3>
 800efd4:	0003      	movs	r3, r0
 800efd6:	193a      	adds	r2, r7, r4
 800efd8:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us *= cPllPeriod_ps;
 800efda:	193b      	adds	r3, r7, r4
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efe0:	4353      	muls	r3, r2
 800efe2:	193a      	adds	r2, r7, r4
 800efe4:	6013      	str	r3, [r2, #0]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800efe6:	193b      	adds	r3, r7, r4
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	33f5      	adds	r3, #245	; 0xf5
 800efec:	33ff      	adds	r3, #255	; 0xff
 800efee:	22fa      	movs	r2, #250	; 0xfa
 800eff0:	0091      	lsls	r1, r2, #2
 800eff2:	0018      	movs	r0, r3
 800eff4:	f7f1 f8a4 	bl	8000140 <__udivsi3>
 800eff8:	0003      	movs	r3, r0
 800effa:	0021      	movs	r1, r4
 800effc:	187a      	adds	r2, r7, r1
 800effe:	6013      	str	r3, [r2, #0]

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	3380      	adds	r3, #128	; 0x80
 800f004:	0a1b      	lsrs	r3, r3, #8
 800f006:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	187b      	adds	r3, r7, r1
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4353      	muls	r3, r2
 800f010:	22bc      	movs	r2, #188	; 0xbc
 800f012:	18b9      	adds	r1, r7, r2
 800f014:	600b      	str	r3, [r1, #0]
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f016:	18bb      	adds	r3, r7, r2
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3380      	adds	r3, #128	; 0x80
 800f01c:	0a1b      	lsrs	r3, r3, #8
 800f01e:	18ba      	adds	r2, r7, r2
 800f020:	6013      	str	r3, [r2, #0]

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	021b      	lsls	r3, r3, #8
 800f026:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f028:	229f      	movs	r2, #159	; 0x9f
 800f02a:	18bb      	adds	r3, r7, r2
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	b25b      	sxtb	r3, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d003      	beq.n	800f03c <VL53L0X_calc_sigma_estimate+0x204>
		LOG_FUNCTION_END(Status);
		return Status;
 800f034:	18bb      	adds	r3, r7, r2
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	b25b      	sxtb	r3, r3
 800f03a:	e198      	b.n	800f36e <VL53L0X_calc_sigma_estimate+0x536>
	}

	if (peakSignalRate_kcps == 0) {
 800f03c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10e      	bne.n	800f060 <VL53L0X_calc_sigma_estimate+0x228>
		*pSigmaEstimate = cSigmaEstMax;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2180      	movs	r1, #128	; 0x80
 800f046:	187a      	adds	r2, r7, r1
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	23a0      	movs	r3, #160	; 0xa0
 800f050:	005b      	lsls	r3, r3, #1
 800f052:	1879      	adds	r1, r7, r1
 800f054:	6809      	ldr	r1, [r1, #0]
 800f056:	50d1      	str	r1, [r2, r3]
		*pDmax_mm = 0;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2200      	movs	r2, #0
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	e182      	b.n	800f366 <VL53L0X_calc_sigma_estimate+0x52e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f060:	22bc      	movs	r2, #188	; 0xbc
 800f062:	18bb      	adds	r3, r7, r2
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d102      	bne.n	800f070 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800f06a:	2301      	movs	r3, #1
 800f06c:	18ba      	adds	r2, r7, r2
 800f06e:	6013      	str	r3, [r2, #0]

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f070:	2390      	movs	r3, #144	; 0x90
 800f072:	18fb      	adds	r3, r7, r3
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f07a:	041b      	lsls	r3, r3, #16
 800f07c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f07e:	0018      	movs	r0, r3
 800f080:	f7f1 f85e 	bl	8000140 <__udivsi3>
 800f084:	0003      	movs	r3, r0
 800f086:	21b0      	movs	r1, #176	; 0xb0
 800f088:	187a      	adds	r2, r7, r1
 800f08a:	6013      	str	r3, [r2, #0]
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f08c:	187b      	adds	r3, r7, r1
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f092:	429a      	cmp	r2, r3
 800f094:	d902      	bls.n	800f09c <VL53L0X_calc_sigma_estimate+0x264>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f098:	187a      	adds	r2, r7, r1
 800f09a:	6013      	str	r3, [r2, #0]
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f09c:	21b0      	movs	r1, #176	; 0xb0
 800f09e:	187b      	adds	r3, r7, r1
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	228c      	movs	r2, #140	; 0x8c
 800f0a4:	18ba      	adds	r2, r7, r2
 800f0a6:	6812      	ldr	r2, [r2, #0]
 800f0a8:	4353      	muls	r3, r2
 800f0aa:	187a      	adds	r2, r7, r1
 800f0ac:	6013      	str	r3, [r2, #0]

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f0ae:	23bc      	movs	r3, #188	; 0xbc
 800f0b0:	18fb      	adds	r3, r7, r3
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	0013      	movs	r3, r2
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	189b      	adds	r3, r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f7fd fdfd 	bl	800ccbc <VL53L0X_isqrt>
 800f0c2:	0003      	movs	r3, r0
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	891b      	ldrh	r3, [r3, #8]
 800f0cc:	001a      	movs	r2, r3
 800f0ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0d0:	4353      	muls	r3, r2
 800f0d2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f0d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0d6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f0d8:	23a0      	movs	r3, #160	; 0xa0
 800f0da:	18fb      	adds	r3, r7, r3
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f0e0:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f0e2:	33f5      	adds	r3, #245	; 0xf5
 800f0e4:	33ff      	adds	r3, #255	; 0xff
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f0e6:	22fa      	movs	r2, #250	; 0xfa
 800f0e8:	0091      	lsls	r1, r2, #2
 800f0ea:	0018      	movs	r0, r3
 800f0ec:	f7f1 f828 	bl	8000140 <__udivsi3>
 800f0f0:	0003      	movs	r3, r0
 800f0f2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f0f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0f6:	041b      	lsls	r3, r3, #16
 800f0f8:	33f5      	adds	r3, #245	; 0xf5
 800f0fa:	33ff      	adds	r3, #255	; 0xff
 800f0fc:	22fa      	movs	r2, #250	; 0xfa
 800f0fe:	0091      	lsls	r1, r2, #2
 800f100:	0018      	movs	r0, r3
 800f102:	f7f1 f81d 	bl	8000140 <__udivsi3>
 800f106:	0003      	movs	r3, r0
 800f108:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f10c:	021b      	lsls	r3, r3, #8
 800f10e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f112:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f114:	f7f1 f814 	bl	8000140 <__udivsi3>
 800f118:	0003      	movs	r3, r0
 800f11a:	17da      	asrs	r2, r3, #31
 800f11c:	189b      	adds	r3, r3, r2
 800f11e:	4053      	eors	r3, r2
 800f120:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f124:	021b      	lsls	r3, r3, #8
 800f126:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	7e1b      	ldrb	r3, [r3, #24]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00d      	beq.n	800f14c <VL53L0X_calc_sigma_estimate+0x314>
			pwMult = 1 << 16;
 800f130:	2380      	movs	r3, #128	; 0x80
 800f132:	025b      	lsls	r3, r3, #9
 800f134:	22ac      	movs	r2, #172	; 0xac
 800f136:	18ba      	adds	r2, r7, r2
 800f138:	6013      	str	r3, [r2, #0]
 800f13a:	e039      	b.n	800f1b0 <VL53L0X_calc_sigma_estimate+0x378>
 800f13c:	0000125c 	.word	0x0000125c
 800f140:	028f87ae 	.word	0x028f87ae
 800f144:	0006999a 	.word	0x0006999a
 800f148:	00000677 	.word	0x00000677
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f14c:	2384      	movs	r3, #132	; 0x84
 800f14e:	18fb      	adds	r3, r7, r3
 800f150:	6819      	ldr	r1, [r3, #0]
 800f152:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f154:	f7f0 fff4 	bl	8000140 <__udivsi3>
 800f158:	0003      	movs	r3, r0
 800f15a:	21ac      	movs	r1, #172	; 0xac
 800f15c:	187a      	adds	r2, r7, r1
 800f15e:	6013      	str	r3, [r2, #0]
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f162:	2280      	movs	r2, #128	; 0x80
 800f164:	0252      	lsls	r2, r2, #9
 800f166:	1ad2      	subs	r2, r2, r3
 800f168:	187b      	adds	r3, r7, r1
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	4353      	muls	r3, r2
 800f16e:	187a      	adds	r2, r7, r1
 800f170:	6013      	str	r3, [r2, #0]

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f172:	187b      	adds	r3, r7, r1
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f178:	18d3      	adds	r3, r2, r3
 800f17a:	0c1b      	lsrs	r3, r3, #16
 800f17c:	000a      	movs	r2, r1
 800f17e:	18b9      	adds	r1, r7, r2
 800f180:	600b      	str	r3, [r1, #0]

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f182:	18bb      	adds	r3, r7, r2
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2180      	movs	r1, #128	; 0x80
 800f188:	0249      	lsls	r1, r1, #9
 800f18a:	468c      	mov	ip, r1
 800f18c:	4463      	add	r3, ip
 800f18e:	18b9      	adds	r1, r7, r2
 800f190:	600b      	str	r3, [r1, #0]
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f192:	18bb      	adds	r3, r7, r2
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	085b      	lsrs	r3, r3, #1
 800f198:	18b9      	adds	r1, r7, r2
 800f19a:	600b      	str	r3, [r1, #0]
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f19c:	18bb      	adds	r3, r7, r2
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	435b      	muls	r3, r3
 800f1a2:	18b9      	adds	r1, r7, r2
 800f1a4:	600b      	str	r3, [r1, #0]

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f1a6:	18bb      	adds	r3, r7, r2
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	0b9b      	lsrs	r3, r3, #14
 800f1ac:	18ba      	adds	r2, r7, r2
 800f1ae:	6013      	str	r3, [r2, #0]
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f1b0:	23ac      	movs	r3, #172	; 0xac
 800f1b2:	18fb      	adds	r3, r7, r3
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1b8:	4353      	muls	r3, r2
 800f1ba:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	2280      	movs	r2, #128	; 0x80
 800f1c0:	0212      	lsls	r2, r2, #8
 800f1c2:	4694      	mov	ip, r2
 800f1c4:	4463      	add	r3, ip
 800f1c6:	0c1b      	lsrs	r3, r3, #16
 800f1c8:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	435b      	muls	r3, r3
 800f1ce:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f1d0:	23b0      	movs	r3, #176	; 0xb0
 800f1d2:	18fb      	adds	r3, r7, r3
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	2280      	movs	r2, #128	; 0x80
 800f1dc:	0212      	lsls	r2, r2, #8
 800f1de:	4694      	mov	ip, r2
 800f1e0:	4463      	add	r3, ip
 800f1e2:	0c1b      	lsrs	r3, r3, #16
 800f1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	435b      	muls	r3, r3
 800f1ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	18d3      	adds	r3, r2, r3
 800f1f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	0018      	movs	r0, r3
 800f1f8:	f7fd fd60 	bl	800ccbc <VL53L0X_isqrt>
 800f1fc:	0003      	movs	r3, r0
 800f1fe:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	041b      	lsls	r3, r3, #16
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	3332      	adds	r3, #50	; 0x32
 800f20a:	2164      	movs	r1, #100	; 0x64
 800f20c:	0018      	movs	r0, r3
 800f20e:	f7f0 ff97 	bl	8000140 <__udivsi3>
 800f212:	0003      	movs	r3, r0
 800f214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f216:	0018      	movs	r0, r3
 800f218:	f7f0 ff92 	bl	8000140 <__udivsi3>
 800f21c:	0003      	movs	r3, r0
 800f21e:	21a8      	movs	r1, #168	; 0xa8
 800f220:	187a      	adds	r2, r7, r1
 800f222:	6013      	str	r3, [r2, #0]
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f224:	187b      	adds	r3, r7, r1
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a53      	ldr	r2, [pc, #332]	; (800f378 <VL53L0X_calc_sigma_estimate+0x540>)
 800f22a:	4353      	muls	r3, r2
 800f22c:	000a      	movs	r2, r1
 800f22e:	18b9      	adds	r1, r7, r2
 800f230:	600b      	str	r3, [r1, #0]

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f232:	18bb      	adds	r3, r7, r2
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4951      	ldr	r1, [pc, #324]	; (800f37c <VL53L0X_calc_sigma_estimate+0x544>)
 800f238:	468c      	mov	ip, r1
 800f23a:	4463      	add	r3, ip
 800f23c:	18b9      	adds	r1, r7, r2
 800f23e:	600b      	str	r3, [r1, #0]
		sigmaEstRtn		 /= 10000;
 800f240:	0014      	movs	r4, r2
 800f242:	18bb      	adds	r3, r7, r2
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	494e      	ldr	r1, [pc, #312]	; (800f380 <VL53L0X_calc_sigma_estimate+0x548>)
 800f248:	0018      	movs	r0, r3
 800f24a:	f7f0 ff79 	bl	8000140 <__udivsi3>
 800f24e:	0003      	movs	r3, r0
 800f250:	0021      	movs	r1, r4
 800f252:	187a      	adds	r2, r7, r1
 800f254:	6013      	str	r3, [r2, #0]

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f256:	187b      	adds	r3, r7, r1
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d902      	bls.n	800f266 <VL53L0X_calc_sigma_estimate+0x42e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f262:	187a      	adds	r2, r7, r1
 800f264:	6013      	str	r3, [r2, #0]
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f266:	23b8      	movs	r3, #184	; 0xb8
 800f268:	18fb      	adds	r3, r7, r3
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	23b4      	movs	r3, #180	; 0xb4
 800f26e:	18fb      	adds	r3, r7, r3
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	18d3      	adds	r3, r2, r3
 800f274:	33f5      	adds	r3, #245	; 0xf5
 800f276:	33ff      	adds	r3, #255	; 0xff
		finalRangeIntegrationTimeMilliSecs =
 800f278:	22fa      	movs	r2, #250	; 0xfa
 800f27a:	0091      	lsls	r1, r2, #2
 800f27c:	0018      	movs	r0, r3
 800f27e:	f7f0 ff5f 	bl	8000140 <__udivsi3>
 800f282:	0003      	movs	r3, r0
 800f284:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f286:	6a3b      	ldr	r3, [r7, #32]
 800f288:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f28a:	2388      	movs	r3, #136	; 0x88
 800f28c:	18fb      	adds	r3, r7, r3
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	18d3      	adds	r3, r2, r3
 800f292:	6a39      	ldr	r1, [r7, #32]
 800f294:	0018      	movs	r0, r3
 800f296:	f7f0 ff53 	bl	8000140 <__udivsi3>
 800f29a:	0003      	movs	r3, r0
 800f29c:	0018      	movs	r0, r3
 800f29e:	f7fd fd0d 	bl	800ccbc <VL53L0X_isqrt>
 800f2a2:	0003      	movs	r3, r0
 800f2a4:	61fb      	str	r3, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	021b      	lsls	r3, r3, #8
 800f2aa:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	33f5      	adds	r3, #245	; 0xf5
 800f2b0:	33ff      	adds	r3, #255	; 0xff
 800f2b2:	22fa      	movs	r2, #250	; 0xfa
 800f2b4:	0091      	lsls	r1, r2, #2
 800f2b6:	0018      	movs	r0, r3
 800f2b8:	f7f0 ff42 	bl	8000140 <__udivsi3>
 800f2bc:	0003      	movs	r3, r0
 800f2be:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f2c0:	23a8      	movs	r3, #168	; 0xa8
 800f2c2:	18fb      	adds	r3, r7, r3
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	435b      	muls	r3, r3
 800f2c8:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	435b      	muls	r3, r3
 800f2ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800f2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d4:	18d3      	adds	r3, r2, r3
 800f2d6:	0018      	movs	r0, r3
 800f2d8:	f7fd fcf0 	bl	800ccbc <VL53L0X_isqrt>
 800f2dc:	0003      	movs	r3, r0
 800f2de:	61bb      	str	r3, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800f2e0:	69ba      	ldr	r2, [r7, #24]
 800f2e2:	0013      	movs	r3, r2
 800f2e4:	015b      	lsls	r3, r3, #5
 800f2e6:	1a9b      	subs	r3, r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	189b      	adds	r3, r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	22a4      	movs	r2, #164	; 0xa4
 800f2f0:	18b9      	adds	r1, r7, r2
 800f2f2:	600b      	str	r3, [r1, #0]

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800f2f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00b      	beq.n	800f312 <VL53L0X_calc_sigma_estimate+0x4da>
 800f2fa:	23bc      	movs	r3, #188	; 0xbc
 800f2fc:	18fb      	adds	r3, r7, r3
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <VL53L0X_calc_sigma_estimate+0x4da>
 800f304:	18bb      	adds	r3, r7, r2
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	2380      	movs	r3, #128	; 0x80
 800f30a:	18fb      	adds	r3, r7, r3
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d905      	bls.n	800f31e <VL53L0X_calc_sigma_estimate+0x4e6>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800f312:	2380      	movs	r3, #128	; 0x80
 800f314:	18fb      	adds	r3, r7, r3
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	22a4      	movs	r2, #164	; 0xa4
 800f31a:	18ba      	adds	r2, r7, r2
 800f31c:	6013      	str	r3, [r2, #0]
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	22a4      	movs	r2, #164	; 0xa4
 800f322:	18ba      	adds	r2, r7, r2
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6819      	ldr	r1, [r3, #0]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	23a0      	movs	r3, #160	; 0xa0
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	50d1      	str	r1, [r2, r3]
		Status = VL53L0X_calc_dmax(
 800f334:	6939      	ldr	r1, [r7, #16]
 800f336:	239f      	movs	r3, #159	; 0x9f
 800f338:	18fc      	adds	r4, r7, r3
 800f33a:	23ac      	movs	r3, #172	; 0xac
 800f33c:	18fb      	adds	r3, r7, r3
 800f33e:	681d      	ldr	r5, [r3, #0]
 800f340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	9303      	str	r3, [sp, #12]
 800f348:	2394      	movs	r3, #148	; 0x94
 800f34a:	18fb      	adds	r3, r7, r3
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	9302      	str	r3, [sp, #8]
 800f350:	23b0      	movs	r3, #176	; 0xb0
 800f352:	18fb      	adds	r3, r7, r3
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	9301      	str	r3, [sp, #4]
 800f358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	002b      	movs	r3, r5
 800f35e:	f7ff fc37 	bl	800ebd0 <VL53L0X_calc_dmax>
 800f362:	0003      	movs	r3, r0
 800f364:	7023      	strb	r3, [r4, #0]
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f366:	239f      	movs	r3, #159	; 0x9f
 800f368:	18fb      	adds	r3, r7, r3
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	b25b      	sxtb	r3, r3
}
 800f36e:	0018      	movs	r0, r3
 800f370:	46bd      	mov	sp, r7
 800f372:	b030      	add	sp, #192	; 0xc0
 800f374:	bdb0      	pop	{r4, r5, r7, pc}
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	00000bb5 	.word	0x00000bb5
 800f37c:	00001388 	.word	0x00001388
 800f380:	00002710 	.word	0x00002710

0800f384 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800f384:	b5b0      	push	{r4, r5, r7, lr}
 800f386:	b090      	sub	sp, #64	; 0x40
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	0008      	movs	r0, r1
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	0019      	movs	r1, r3
 800f392:	240b      	movs	r4, #11
 800f394:	193b      	adds	r3, r7, r4
 800f396:	1c02      	adds	r2, r0, #0
 800f398:	701a      	strb	r2, [r3, #0]
 800f39a:	2308      	movs	r3, #8
 800f39c:	18fb      	adds	r3, r7, r3
 800f39e:	1c0a      	adds	r2, r1, #0
 800f3a0:	801a      	strh	r2, [r3, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3a2:	233f      	movs	r3, #63	; 0x3f
 800f3a4:	18fb      	adds	r3, r7, r3
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	701a      	strb	r2, [r3, #0]
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800f3aa:	233d      	movs	r3, #61	; 0x3d
 800f3ac:	18fb      	adds	r3, r7, r3
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipflag = 0;
 800f3b2:	233c      	movs	r3, #60	; 0x3c
 800f3b4:	18fb      	adds	r3, r7, r3
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdflag = 0;
 800f3ba:	233b      	movs	r3, #59	; 0x3b
 800f3bc:	18fb      	adds	r3, r7, r3
 800f3be:	2200      	movs	r2, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
	uint8_t SigmaLimitCheckEnable = 0;
 800f3c2:	232b      	movs	r3, #43	; 0x2b
 800f3c4:	18fb      	adds	r3, r7, r3
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800f3ca:	232a      	movs	r3, #42	; 0x2a
 800f3cc:	18fb      	adds	r3, r7, r3
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800f3d2:	2329      	movs	r3, #41	; 0x29
 800f3d4:	18fb      	adds	r3, r7, r3
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800f3da:	2328      	movs	r3, #40	; 0x28
 800f3dc:	18fb      	adds	r3, r7, r3
 800f3de:	2200      	movs	r2, #0
 800f3e0:	701a      	strb	r2, [r3, #0]
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800f3e2:	2132      	movs	r1, #50	; 0x32
 800f3e4:	187b      	adds	r3, r7, r1
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	701a      	strb	r2, [r3, #0]
	uint16_t tmpWord = 0;
 800f3ea:	2316      	movs	r3, #22
 800f3ec:	18fb      	adds	r3, r7, r3
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	801a      	strh	r2, [r3, #0]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800f3f6:	193b      	adds	r3, r7, r4
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	10db      	asrs	r3, r3, #3
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	0008      	movs	r0, r1
 800f400:	187b      	adds	r3, r7, r1
 800f402:	210f      	movs	r1, #15
 800f404:	400a      	ands	r2, r1
 800f406:	701a      	strb	r2, [r3, #0]

	if (DeviceRangeStatusInternal == 0 ||
 800f408:	0002      	movs	r2, r0
 800f40a:	18bb      	adds	r3, r7, r2
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d017      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
 800f412:	18bb      	adds	r3, r7, r2
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2b05      	cmp	r3, #5
 800f418:	d013      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 5 ||
 800f41a:	18bb      	adds	r3, r7, r2
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b07      	cmp	r3, #7
 800f420:	d00f      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 7 ||
 800f422:	18bb      	adds	r3, r7, r2
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b0c      	cmp	r3, #12
 800f428:	d00b      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 12 ||
 800f42a:	18bb      	adds	r3, r7, r2
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2b0d      	cmp	r3, #13
 800f430:	d007      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 13 ||
 800f432:	18bb      	adds	r3, r7, r2
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	2b0e      	cmp	r3, #14
 800f438:	d003      	beq.n	800f442 <VL53L0X_get_pal_range_status+0xbe>
		DeviceRangeStatusInternal == 14 ||
 800f43a:	18bb      	adds	r3, r7, r2
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	2b0f      	cmp	r3, #15
 800f440:	d104      	bne.n	800f44c <VL53L0X_get_pal_range_status+0xc8>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800f442:	233e      	movs	r3, #62	; 0x3e
 800f444:	18fb      	adds	r3, r7, r3
 800f446:	2201      	movs	r2, #1
 800f448:	701a      	strb	r2, [r3, #0]
 800f44a:	e003      	b.n	800f454 <VL53L0X_get_pal_range_status+0xd0>
	} else {
		NoneFlag = 0;
 800f44c:	233e      	movs	r3, #62	; 0x3e
 800f44e:	18fb      	adds	r3, r7, r3
 800f450:	2200      	movs	r2, #0
 800f452:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f454:	223f      	movs	r2, #63	; 0x3f
 800f456:	18bb      	adds	r3, r7, r2
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	b25b      	sxtb	r3, r3
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d109      	bne.n	800f474 <VL53L0X_get_pal_range_status+0xf0>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f460:	18bc      	adds	r4, r7, r2
 800f462:	232b      	movs	r3, #43	; 0x2b
 800f464:	18fa      	adds	r2, r7, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2100      	movs	r1, #0
 800f46a:	0018      	movs	r0, r3
 800f46c:	f7fb fbec 	bl	800ac48 <VL53L0X_GetLimitCheckEnable>
 800f470:	0003      	movs	r3, r0
 800f472:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800f474:	232b      	movs	r3, #43	; 0x2b
 800f476:	18fb      	adds	r3, r7, r3
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d034      	beq.n	800f4e8 <VL53L0X_get_pal_range_status+0x164>
 800f47e:	253f      	movs	r5, #63	; 0x3f
 800f480:	197b      	adds	r3, r7, r5
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	b25b      	sxtb	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d12e      	bne.n	800f4e8 <VL53L0X_get_pal_range_status+0x164>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800f48a:	197c      	adds	r4, r7, r5
 800f48c:	2310      	movs	r3, #16
 800f48e:	18fb      	adds	r3, r7, r3
 800f490:	2224      	movs	r2, #36	; 0x24
 800f492:	18ba      	adds	r2, r7, r2
 800f494:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff fcce 	bl	800ee38 <VL53L0X_calc_sigma_estimate>
 800f49c:	0003      	movs	r3, r0
 800f49e:	7023      	strb	r3, [r4, #0]
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800f4a0:	197b      	adds	r3, r7, r5
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	b25b      	sxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d103      	bne.n	800f4b2 <VL53L0X_get_pal_range_status+0x12e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b0:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800f4b2:	223f      	movs	r2, #63	; 0x3f
 800f4b4:	18bb      	adds	r3, r7, r2
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	b25b      	sxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d114      	bne.n	800f4e8 <VL53L0X_get_pal_range_status+0x164>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800f4be:	18bc      	adds	r4, r7, r2
 800f4c0:	2320      	movs	r3, #32
 800f4c2:	18fa      	adds	r2, r7, r3
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	0018      	movs	r0, r3
 800f4ca:	f7fb fc61 	bl	800ad90 <VL53L0X_GetLimitCheckValue>
 800f4ce:	0003      	movs	r3, r0
 800f4d0:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <VL53L0X_get_pal_range_status+0x164>
				(SigmaEstimate > SigmaLimitValue))
 800f4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4da:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d903      	bls.n	800f4e8 <VL53L0X_get_pal_range_status+0x164>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800f4e0:	233d      	movs	r3, #61	; 0x3d
 800f4e2:	18fb      	adds	r3, r7, r3
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	701a      	strb	r2, [r3, #0]

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f4e8:	223f      	movs	r2, #63	; 0x3f
 800f4ea:	18bb      	adds	r3, r7, r2
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	b25b      	sxtb	r3, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d109      	bne.n	800f508 <VL53L0X_get_pal_range_status+0x184>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f4f4:	18bc      	adds	r4, r7, r2
 800f4f6:	2329      	movs	r3, #41	; 0x29
 800f4f8:	18fa      	adds	r2, r7, r3
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2102      	movs	r1, #2
 800f4fe:	0018      	movs	r0, r3
 800f500:	f7fb fba2 	bl	800ac48 <VL53L0X_GetLimitCheckEnable>
 800f504:	0003      	movs	r3, r0
 800f506:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800f508:	2329      	movs	r3, #41	; 0x29
 800f50a:	18fb      	adds	r3, r7, r3
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d051      	beq.n	800f5b6 <VL53L0X_get_pal_range_status+0x232>
 800f512:	253f      	movs	r5, #63	; 0x3f
 800f514:	197b      	adds	r3, r7, r5
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	b25b      	sxtb	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d14b      	bne.n	800f5b6 <VL53L0X_get_pal_range_status+0x232>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f51e:	197c      	adds	r4, r7, r5
 800f520:	231c      	movs	r3, #28
 800f522:	18fa      	adds	r2, r7, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2102      	movs	r1, #2
 800f528:	0018      	movs	r0, r3
 800f52a:	f7fb fc31 	bl	800ad90 <VL53L0X_GetLimitCheckValue>
 800f52e:	0003      	movs	r3, r0
 800f530:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800f532:	197b      	adds	r3, r7, r5
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	b25b      	sxtb	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d108      	bne.n	800f54e <VL53L0X_get_pal_range_status+0x1ca>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800f53c:	197c      	adds	r4, r7, r5
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2201      	movs	r2, #1
 800f542:	21ff      	movs	r1, #255	; 0xff
 800f544:	0018      	movs	r0, r3
 800f546:	f000 fa0d 	bl	800f964 <VL53L0X_WrByte>
 800f54a:	0003      	movs	r3, r0
 800f54c:	7023      	strb	r3, [r4, #0]

		if (Status == VL53L0X_ERROR_NONE)
 800f54e:	223f      	movs	r2, #63	; 0x3f
 800f550:	18bb      	adds	r3, r7, r2
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	b25b      	sxtb	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d109      	bne.n	800f56e <VL53L0X_get_pal_range_status+0x1ea>
			Status = VL53L0X_RdWord(Dev,
 800f55a:	18bc      	adds	r4, r7, r2
 800f55c:	2316      	movs	r3, #22
 800f55e:	18fa      	adds	r2, r7, r3
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	21b6      	movs	r1, #182	; 0xb6
 800f564:	0018      	movs	r0, r3
 800f566:	f000 fae1 	bl	800fb2c <VL53L0X_RdWord>
 800f56a:	0003      	movs	r3, r0
 800f56c:	7023      	strb	r3, [r4, #0]
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800f56e:	223f      	movs	r2, #63	; 0x3f
 800f570:	18bb      	adds	r3, r7, r2
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	b25b      	sxtb	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d108      	bne.n	800f58c <VL53L0X_get_pal_range_status+0x208>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800f57a:	18bc      	adds	r4, r7, r2
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	21ff      	movs	r1, #255	; 0xff
 800f582:	0018      	movs	r0, r3
 800f584:	f000 f9ee 	bl	800f964 <VL53L0X_WrByte>
 800f588:	0003      	movs	r3, r0
 800f58a:	7023      	strb	r3, [r4, #0]

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800f58c:	2316      	movs	r3, #22
 800f58e:	18fb      	adds	r3, r7, r3
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	025b      	lsls	r3, r3, #9
 800f594:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	23a4      	movs	r3, #164	; 0xa4
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f59e:	50d1      	str	r1, [r2, r3]

		if ((SignalRefClipValue > 0) &&
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d007      	beq.n	800f5b6 <VL53L0X_get_pal_range_status+0x232>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800f5a6:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800f5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d903      	bls.n	800f5b6 <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800f5ae:	233c      	movs	r3, #60	; 0x3c
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	701a      	strb	r2, [r3, #0]
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800f5b6:	223f      	movs	r2, #63	; 0x3f
 800f5b8:	18bb      	adds	r3, r7, r2
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	b25b      	sxtb	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d109      	bne.n	800f5d6 <VL53L0X_get_pal_range_status+0x252>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f5c2:	18bc      	adds	r4, r7, r2
 800f5c4:	2328      	movs	r3, #40	; 0x28
 800f5c6:	18fa      	adds	r2, r7, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2103      	movs	r1, #3
 800f5cc:	0018      	movs	r0, r3
 800f5ce:	f7fb fb3b 	bl	800ac48 <VL53L0X_GetLimitCheckEnable>
 800f5d2:	0003      	movs	r3, r0
 800f5d4:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800f5d6:	2328      	movs	r3, #40	; 0x28
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d02e      	beq.n	800f63e <VL53L0X_get_pal_range_status+0x2ba>
 800f5e0:	233f      	movs	r3, #63	; 0x3f
 800f5e2:	18fb      	adds	r3, r7, r3
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	b25b      	sxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d128      	bne.n	800f63e <VL53L0X_get_pal_range_status+0x2ba>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	18fb      	adds	r3, r7, r3
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d102      	bne.n	800f5fc <VL53L0X_get_pal_range_status+0x278>
			SignalRatePerSpad = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f5fa:	e00a      	b.n	800f612 <VL53L0X_get_pal_range_status+0x28e>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	021a      	lsls	r2, r3, #8
 800f600:	2308      	movs	r3, #8
 800f602:	18fb      	adds	r3, r7, r3
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	0019      	movs	r1, r3
 800f608:	0010      	movs	r0, r2
 800f60a:	f7f0 fd99 	bl	8000140 <__udivsi3>
 800f60e:	0003      	movs	r3, r0
 800f610:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800f612:	233f      	movs	r3, #63	; 0x3f
 800f614:	18fc      	adds	r4, r7, r3
 800f616:	2318      	movs	r3, #24
 800f618:	18fa      	adds	r2, r7, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2103      	movs	r1, #3
 800f61e:	0018      	movs	r0, r3
 800f620:	f7fb fbb6 	bl	800ad90 <VL53L0X_GetLimitCheckValue>
 800f624:	0003      	movs	r3, r0
 800f626:	7023      	strb	r3, [r4, #0]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d007      	beq.n	800f63e <VL53L0X_get_pal_range_status+0x2ba>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800f62e:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800f630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f632:	429a      	cmp	r2, r3
 800f634:	d203      	bcs.n	800f63e <VL53L0X_get_pal_range_status+0x2ba>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800f636:	233b      	movs	r3, #59	; 0x3b
 800f638:	18fb      	adds	r3, r7, r3
 800f63a:	2201      	movs	r2, #1
 800f63c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f63e:	233f      	movs	r3, #63	; 0x3f
 800f640:	18fb      	adds	r3, r7, r3
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	b25b      	sxtb	r3, r3
 800f646:	2b00      	cmp	r3, #0
 800f648:	d152      	bne.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		if (NoneFlag == 1) {
 800f64a:	233e      	movs	r3, #62	; 0x3e
 800f64c:	18fb      	adds	r3, r7, r3
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b01      	cmp	r3, #1
 800f652:	d103      	bne.n	800f65c <VL53L0X_get_pal_range_status+0x2d8>
			*pPalRangeStatus = 255;	 /* NONE */
 800f654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f656:	22ff      	movs	r2, #255	; 0xff
 800f658:	701a      	strb	r2, [r3, #0]
 800f65a:	e049      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 1 ||
 800f65c:	2232      	movs	r2, #50	; 0x32
 800f65e:	18bb      	adds	r3, r7, r2
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d007      	beq.n	800f676 <VL53L0X_get_pal_range_status+0x2f2>
 800f666:	18bb      	adds	r3, r7, r2
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	2b02      	cmp	r3, #2
 800f66c:	d003      	beq.n	800f676 <VL53L0X_get_pal_range_status+0x2f2>
					DeviceRangeStatusInternal == 2 ||
 800f66e:	18bb      	adds	r3, r7, r2
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	2b03      	cmp	r3, #3
 800f674:	d103      	bne.n	800f67e <VL53L0X_get_pal_range_status+0x2fa>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800f676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f678:	2205      	movs	r2, #5
 800f67a:	701a      	strb	r2, [r3, #0]
 800f67c:	e038      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 6 ||
 800f67e:	2232      	movs	r2, #50	; 0x32
 800f680:	18bb      	adds	r3, r7, r2
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b06      	cmp	r3, #6
 800f686:	d003      	beq.n	800f690 <VL53L0X_get_pal_range_status+0x30c>
 800f688:	18bb      	adds	r3, r7, r2
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	2b09      	cmp	r3, #9
 800f68e:	d103      	bne.n	800f698 <VL53L0X_get_pal_range_status+0x314>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800f690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f692:	2204      	movs	r2, #4
 800f694:	701a      	strb	r2, [r3, #0]
 800f696:	e02b      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 8 ||
 800f698:	2232      	movs	r2, #50	; 0x32
 800f69a:	18bb      	adds	r3, r7, r2
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	2b08      	cmp	r3, #8
 800f6a0:	d008      	beq.n	800f6b4 <VL53L0X_get_pal_range_status+0x330>
 800f6a2:	18bb      	adds	r3, r7, r2
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	2b0a      	cmp	r3, #10
 800f6a8:	d004      	beq.n	800f6b4 <VL53L0X_get_pal_range_status+0x330>
					DeviceRangeStatusInternal == 10 ||
 800f6aa:	233c      	movs	r3, #60	; 0x3c
 800f6ac:	18fb      	adds	r3, r7, r3
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d103      	bne.n	800f6bc <VL53L0X_get_pal_range_status+0x338>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800f6b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6b6:	2203      	movs	r2, #3
 800f6b8:	701a      	strb	r2, [r3, #0]
 800f6ba:	e019      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else if (DeviceRangeStatusInternal == 4 ||
 800f6bc:	2332      	movs	r3, #50	; 0x32
 800f6be:	18fb      	adds	r3, r7, r3
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b04      	cmp	r3, #4
 800f6c4:	d004      	beq.n	800f6d0 <VL53L0X_get_pal_range_status+0x34c>
 800f6c6:	233b      	movs	r3, #59	; 0x3b
 800f6c8:	18fb      	adds	r3, r7, r3
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d103      	bne.n	800f6d8 <VL53L0X_get_pal_range_status+0x354>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800f6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6d2:	2202      	movs	r2, #2
 800f6d4:	701a      	strb	r2, [r3, #0]
 800f6d6:	e00b      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else if (SigmaLimitflag == 1) {
 800f6d8:	233d      	movs	r3, #61	; 0x3d
 800f6da:	18fb      	adds	r3, r7, r3
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d103      	bne.n	800f6ea <VL53L0X_get_pal_range_status+0x366>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800f6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	701a      	strb	r2, [r3, #0]
 800f6e8:	e002      	b.n	800f6f0 <VL53L0X_get_pal_range_status+0x36c>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800f6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800f6f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <VL53L0X_get_pal_range_status+0x37a>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800f6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800f6fe:	253f      	movs	r5, #63	; 0x3f
 800f700:	197c      	adds	r4, r7, r5
 800f702:	232a      	movs	r3, #42	; 0x2a
 800f704:	18fa      	adds	r2, r7, r3
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2101      	movs	r1, #1
 800f70a:	0018      	movs	r0, r3
 800f70c:	f7fb fa9c 	bl	800ac48 <VL53L0X_GetLimitCheckEnable>
 800f710:	0003      	movs	r3, r0
 800f712:	7023      	strb	r3, [r4, #0]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800f714:	197b      	adds	r3, r7, r5
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	b25b      	sxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d163      	bne.n	800f7e6 <VL53L0X_get_pal_range_status+0x462>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800f71e:	232b      	movs	r3, #43	; 0x2b
 800f720:	18fb      	adds	r3, r7, r3
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d004      	beq.n	800f732 <VL53L0X_get_pal_range_status+0x3ae>
 800f728:	233d      	movs	r3, #61	; 0x3d
 800f72a:	18fb      	adds	r3, r7, r3
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d104      	bne.n	800f73c <VL53L0X_get_pal_range_status+0x3b8>
			Temp8 = 1;
 800f732:	2333      	movs	r3, #51	; 0x33
 800f734:	18fb      	adds	r3, r7, r3
 800f736:	2201      	movs	r2, #1
 800f738:	701a      	strb	r2, [r3, #0]
 800f73a:	e003      	b.n	800f744 <VL53L0X_get_pal_range_status+0x3c0>
		else
			Temp8 = 0;
 800f73c:	2333      	movs	r3, #51	; 0x33
 800f73e:	18fb      	adds	r3, r7, r3
 800f740:	2200      	movs	r2, #0
 800f742:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2233      	movs	r2, #51	; 0x33
 800f748:	18ba      	adds	r2, r7, r2
 800f74a:	212e      	movs	r1, #46	; 0x2e
 800f74c:	7812      	ldrb	r2, [r2, #0]
 800f74e:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800f750:	2332      	movs	r3, #50	; 0x32
 800f752:	18fb      	adds	r3, r7, r3
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	2b04      	cmp	r3, #4
 800f758:	d004      	beq.n	800f764 <VL53L0X_get_pal_range_status+0x3e0>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800f75a:	232a      	movs	r3, #42	; 0x2a
 800f75c:	18fb      	adds	r3, r7, r3
 800f75e:	781b      	ldrb	r3, [r3, #0]
		if ((DeviceRangeStatusInternal == 4) ||
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <VL53L0X_get_pal_range_status+0x3ea>
			Temp8 = 1;
 800f764:	2333      	movs	r3, #51	; 0x33
 800f766:	18fb      	adds	r3, r7, r3
 800f768:	2201      	movs	r2, #1
 800f76a:	701a      	strb	r2, [r3, #0]
 800f76c:	e003      	b.n	800f776 <VL53L0X_get_pal_range_status+0x3f2>
		else
			Temp8 = 0;
 800f76e:	2333      	movs	r3, #51	; 0x33
 800f770:	18fb      	adds	r3, r7, r3
 800f772:	2200      	movs	r2, #0
 800f774:	701a      	strb	r2, [r3, #0]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2233      	movs	r2, #51	; 0x33
 800f77a:	18ba      	adds	r2, r7, r2
 800f77c:	212f      	movs	r1, #47	; 0x2f
 800f77e:	7812      	ldrb	r2, [r2, #0]
 800f780:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800f782:	2329      	movs	r3, #41	; 0x29
 800f784:	18fb      	adds	r3, r7, r3
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <VL53L0X_get_pal_range_status+0x412>
 800f78c:	233c      	movs	r3, #60	; 0x3c
 800f78e:	18fb      	adds	r3, r7, r3
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d104      	bne.n	800f7a0 <VL53L0X_get_pal_range_status+0x41c>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800f796:	2333      	movs	r3, #51	; 0x33
 800f798:	18fb      	adds	r3, r7, r3
 800f79a:	2201      	movs	r2, #1
 800f79c:	701a      	strb	r2, [r3, #0]
 800f79e:	e003      	b.n	800f7a8 <VL53L0X_get_pal_range_status+0x424>
		else
			Temp8 = 0;
 800f7a0:	2333      	movs	r3, #51	; 0x33
 800f7a2:	18fb      	adds	r3, r7, r3
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2233      	movs	r2, #51	; 0x33
 800f7ac:	18ba      	adds	r2, r7, r2
 800f7ae:	2130      	movs	r1, #48	; 0x30
 800f7b0:	7812      	ldrb	r2, [r2, #0]
 800f7b2:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800f7b4:	2328      	movs	r3, #40	; 0x28
 800f7b6:	18fb      	adds	r3, r7, r3
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d004      	beq.n	800f7c8 <VL53L0X_get_pal_range_status+0x444>
 800f7be:	233b      	movs	r3, #59	; 0x3b
 800f7c0:	18fb      	adds	r3, r7, r3
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d104      	bne.n	800f7d2 <VL53L0X_get_pal_range_status+0x44e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800f7c8:	2333      	movs	r3, #51	; 0x33
 800f7ca:	18fb      	adds	r3, r7, r3
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e003      	b.n	800f7da <VL53L0X_get_pal_range_status+0x456>
		else
			Temp8 = 0;
 800f7d2:	2333      	movs	r3, #51	; 0x33
 800f7d4:	18fb      	adds	r3, r7, r3
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2233      	movs	r2, #51	; 0x33
 800f7de:	18ba      	adds	r2, r7, r2
 800f7e0:	2131      	movs	r1, #49	; 0x31
 800f7e2:	7812      	ldrb	r2, [r2, #0]
 800f7e4:	545a      	strb	r2, [r3, r1]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f7e6:	233f      	movs	r3, #63	; 0x3f
 800f7e8:	18fb      	adds	r3, r7, r3
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	b25b      	sxtb	r3, r3

}
 800f7ee:	0018      	movs	r0, r3
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	b010      	add	sp, #64	; 0x40
 800f7f4:	bdb0      	pop	{r4, r5, r7, pc}

0800f7f6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f7f6:	b590      	push	{r4, r7, lr}
 800f7f8:	b089      	sub	sp, #36	; 0x24
 800f7fa:	af02      	add	r7, sp, #8
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	60b9      	str	r1, [r7, #8]
 800f800:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	330a      	adds	r3, #10
 800f806:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	23ae      	movs	r3, #174	; 0xae
 800f80c:	005b      	lsls	r3, r3, #1
 800f80e:	58d0      	ldr	r0, [r2, r3]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	23b0      	movs	r3, #176	; 0xb0
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	5cd3      	ldrb	r3, [r2, r3]
 800f818:	b299      	uxth	r1, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	b29c      	uxth	r4, r3
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	0023      	movs	r3, r4
 800f826:	f7f6 f86d 	bl	8005904 <HAL_I2C_Master_Transmit>
 800f82a:	0003      	movs	r3, r0
 800f82c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f82e:	693b      	ldr	r3, [r7, #16]
}
 800f830:	0018      	movs	r0, r3
 800f832:	46bd      	mov	sp, r7
 800f834:	b007      	add	sp, #28
 800f836:	bd90      	pop	{r4, r7, pc}

0800f838 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800f838:	b590      	push	{r4, r7, lr}
 800f83a:	b089      	sub	sp, #36	; 0x24
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	330a      	adds	r3, #10
 800f848:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800f84a:	68fa      	ldr	r2, [r7, #12]
 800f84c:	23ae      	movs	r3, #174	; 0xae
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	58d0      	ldr	r0, [r2, r3]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	23b0      	movs	r3, #176	; 0xb0
 800f856:	005b      	lsls	r3, r3, #1
 800f858:	5cd3      	ldrb	r3, [r2, r3]
 800f85a:	2201      	movs	r2, #1
 800f85c:	4313      	orrs	r3, r2
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	b299      	uxth	r1, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	b29c      	uxth	r4, r3
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	0023      	movs	r3, r4
 800f86e:	f7f6 f951 	bl	8005b14 <HAL_I2C_Master_Receive>
 800f872:	0003      	movs	r3, r0
 800f874:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800f876:	693b      	ldr	r3, [r7, #16]
}
 800f878:	0018      	movs	r0, r3
 800f87a:	46bd      	mov	sp, r7
 800f87c:	b007      	add	sp, #28
 800f87e:	bd90      	pop	{r4, r7, pc}

0800f880 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	607a      	str	r2, [r7, #4]
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	230b      	movs	r3, #11
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	1c0a      	adds	r2, r1, #0
 800f892:	701a      	strb	r2, [r3, #0]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f894:	2317      	movs	r3, #23
 800f896:	18fb      	adds	r3, r7, r3
 800f898:	2200      	movs	r2, #0
 800f89a:	701a      	strb	r2, [r3, #0]
    if (count > sizeof(_I2CBuffer) - 1) {
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	2b3f      	cmp	r3, #63	; 0x3f
 800f8a0:	d902      	bls.n	800f8a8 <VL53L0X_WriteMulti+0x28>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800f8a2:	2304      	movs	r3, #4
 800f8a4:	425b      	negs	r3, r3
 800f8a6:	e01e      	b.n	800f8e6 <VL53L0X_WriteMulti+0x66>
    }
    _I2CBuffer[0] = index;
 800f8a8:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <VL53L0X_WriteMulti+0x70>)
 800f8aa:	220b      	movs	r2, #11
 800f8ac:	18ba      	adds	r2, r7, r2
 800f8ae:	7812      	ldrb	r2, [r2, #0]
 800f8b0:	701a      	strb	r2, [r3, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	6879      	ldr	r1, [r7, #4]
 800f8b6:	4b0f      	ldr	r3, [pc, #60]	; (800f8f4 <VL53L0X_WriteMulti+0x74>)
 800f8b8:	0018      	movs	r0, r3
 800f8ba:	f001 fd45 	bl	8011348 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	1c5a      	adds	r2, r3, #1
 800f8c2:	490b      	ldr	r1, [pc, #44]	; (800f8f0 <VL53L0X_WriteMulti+0x70>)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	0018      	movs	r0, r3
 800f8c8:	f7ff ff95 	bl	800f7f6 <_I2CWrite>
 800f8cc:	0003      	movs	r3, r0
 800f8ce:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <VL53L0X_WriteMulti+0x5e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f8d6:	2317      	movs	r3, #23
 800f8d8:	18fb      	adds	r3, r7, r3
 800f8da:	22ec      	movs	r2, #236	; 0xec
 800f8dc:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f8de:	2317      	movs	r3, #23
 800f8e0:	18fb      	adds	r3, r7, r3
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	b25b      	sxtb	r3, r3
}
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b006      	add	sp, #24
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	46c0      	nop			; (mov r8, r8)
 800f8f0:	20000a64 	.word	0x20000a64
 800f8f4:	20000a65 	.word	0x20000a65

0800f8f8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800f8f8:	b590      	push	{r4, r7, lr}
 800f8fa:	b087      	sub	sp, #28
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	607a      	str	r2, [r7, #4]
 800f902:	603b      	str	r3, [r7, #0]
 800f904:	200b      	movs	r0, #11
 800f906:	183b      	adds	r3, r7, r0
 800f908:	1c0a      	adds	r2, r1, #0
 800f90a:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f90c:	2417      	movs	r4, #23
 800f90e:	193b      	adds	r3, r7, r4
 800f910:	2200      	movs	r2, #0
 800f912:	701a      	strb	r2, [r3, #0]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800f914:	1839      	adds	r1, r7, r0
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2201      	movs	r2, #1
 800f91a:	0018      	movs	r0, r3
 800f91c:	f7ff ff6b 	bl	800f7f6 <_I2CWrite>
 800f920:	0003      	movs	r3, r0
 800f922:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d003      	beq.n	800f932 <VL53L0X_ReadMulti+0x3a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f92a:	193b      	adds	r3, r7, r4
 800f92c:	22ec      	movs	r2, #236	; 0xec
 800f92e:	701a      	strb	r2, [r3, #0]
        goto done;
 800f930:	e010      	b.n	800f954 <VL53L0X_ReadMulti+0x5c>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	6879      	ldr	r1, [r7, #4]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	0018      	movs	r0, r3
 800f93a:	f7ff ff7d 	bl	800f838 <_I2CRead>
 800f93e:	0003      	movs	r3, r0
 800f940:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d004      	beq.n	800f952 <VL53L0X_ReadMulti+0x5a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f948:	2317      	movs	r3, #23
 800f94a:	18fb      	adds	r3, r7, r3
 800f94c:	22ec      	movs	r2, #236	; 0xec
 800f94e:	701a      	strb	r2, [r3, #0]
 800f950:	e000      	b.n	800f954 <VL53L0X_ReadMulti+0x5c>
    }
done:
 800f952:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 800f954:	2317      	movs	r3, #23
 800f956:	18fb      	adds	r3, r7, r3
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	b25b      	sxtb	r3, r3
}
 800f95c:	0018      	movs	r0, r3
 800f95e:	46bd      	mov	sp, r7
 800f960:	b007      	add	sp, #28
 800f962:	bd90      	pop	{r4, r7, pc}

0800f964 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800f964:	b590      	push	{r4, r7, lr}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	0008      	movs	r0, r1
 800f96e:	0011      	movs	r1, r2
 800f970:	1cfb      	adds	r3, r7, #3
 800f972:	1c02      	adds	r2, r0, #0
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	1cbb      	adds	r3, r7, #2
 800f978:	1c0a      	adds	r2, r1, #0
 800f97a:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f97c:	240f      	movs	r4, #15
 800f97e:	193b      	adds	r3, r7, r4
 800f980:	2200      	movs	r2, #0
 800f982:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f984:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <VL53L0X_WrByte+0x5c>)
 800f986:	1cfa      	adds	r2, r7, #3
 800f988:	7812      	ldrb	r2, [r2, #0]
 800f98a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data;
 800f98c:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <VL53L0X_WrByte+0x5c>)
 800f98e:	1cba      	adds	r2, r7, #2
 800f990:	7812      	ldrb	r2, [r2, #0]
 800f992:	705a      	strb	r2, [r3, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800f994:	490a      	ldr	r1, [pc, #40]	; (800f9c0 <VL53L0X_WrByte+0x5c>)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2202      	movs	r2, #2
 800f99a:	0018      	movs	r0, r3
 800f99c:	f7ff ff2b 	bl	800f7f6 <_I2CWrite>
 800f9a0:	0003      	movs	r3, r0
 800f9a2:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d002      	beq.n	800f9b0 <VL53L0X_WrByte+0x4c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800f9aa:	193b      	adds	r3, r7, r4
 800f9ac:	22ec      	movs	r2, #236	; 0xec
 800f9ae:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800f9b0:	230f      	movs	r3, #15
 800f9b2:	18fb      	adds	r3, r7, r3
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	b25b      	sxtb	r3, r3
}
 800f9b8:	0018      	movs	r0, r3
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	b005      	add	sp, #20
 800f9be:	bd90      	pop	{r4, r7, pc}
 800f9c0:	20000a64 	.word	0x20000a64

0800f9c4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800f9c4:	b590      	push	{r4, r7, lr}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	0008      	movs	r0, r1
 800f9ce:	0011      	movs	r1, r2
 800f9d0:	1cfb      	adds	r3, r7, #3
 800f9d2:	1c02      	adds	r2, r0, #0
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	003b      	movs	r3, r7
 800f9d8:	1c0a      	adds	r2, r1, #0
 800f9da:	801a      	strh	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9dc:	240f      	movs	r4, #15
 800f9de:	193b      	adds	r3, r7, r4
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800f9e4:	4b12      	ldr	r3, [pc, #72]	; (800fa30 <VL53L0X_WrWord+0x6c>)
 800f9e6:	1cfa      	adds	r2, r7, #3
 800f9e8:	7812      	ldrb	r2, [r2, #0]
 800f9ea:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 800f9ec:	003b      	movs	r3, r7
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	0a1b      	lsrs	r3, r3, #8
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	b2da      	uxtb	r2, r3
 800f9f6:	4b0e      	ldr	r3, [pc, #56]	; (800fa30 <VL53L0X_WrWord+0x6c>)
 800f9f8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800f9fa:	003b      	movs	r3, r7
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <VL53L0X_WrWord+0x6c>)
 800fa02:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800fa04:	490a      	ldr	r1, [pc, #40]	; (800fa30 <VL53L0X_WrWord+0x6c>)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2203      	movs	r2, #3
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	f7ff fef3 	bl	800f7f6 <_I2CWrite>
 800fa10:	0003      	movs	r3, r0
 800fa12:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d002      	beq.n	800fa20 <VL53L0X_WrWord+0x5c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fa1a:	193b      	adds	r3, r7, r4
 800fa1c:	22ec      	movs	r2, #236	; 0xec
 800fa1e:	701a      	strb	r2, [r3, #0]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800fa20:	230f      	movs	r3, #15
 800fa22:	18fb      	adds	r3, r7, r3
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	b25b      	sxtb	r3, r3
}
 800fa28:	0018      	movs	r0, r3
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	b005      	add	sp, #20
 800fa2e:	bd90      	pop	{r4, r7, pc}
 800fa30:	20000a64 	.word	0x20000a64

0800fa34 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	000c      	movs	r4, r1
 800fa3e:	0010      	movs	r0, r2
 800fa40:	0019      	movs	r1, r3
 800fa42:	1cfb      	adds	r3, r7, #3
 800fa44:	1c22      	adds	r2, r4, #0
 800fa46:	701a      	strb	r2, [r3, #0]
 800fa48:	1cbb      	adds	r3, r7, #2
 800fa4a:	1c02      	adds	r2, r0, #0
 800fa4c:	701a      	strb	r2, [r3, #0]
 800fa4e:	1c7b      	adds	r3, r7, #1
 800fa50:	1c0a      	adds	r2, r1, #0
 800fa52:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fa54:	250f      	movs	r5, #15
 800fa56:	197b      	adds	r3, r7, r5
 800fa58:	2200      	movs	r2, #0
 800fa5a:	701a      	strb	r2, [r3, #0]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800fa5c:	197c      	adds	r4, r7, r5
 800fa5e:	260e      	movs	r6, #14
 800fa60:	19ba      	adds	r2, r7, r6
 800fa62:	1cfb      	adds	r3, r7, #3
 800fa64:	7819      	ldrb	r1, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	0018      	movs	r0, r3
 800fa6a:	f000 f82a 	bl	800fac2 <VL53L0X_RdByte>
 800fa6e:	0003      	movs	r3, r0
 800fa70:	7023      	strb	r3, [r4, #0]
    if (Status) {
 800fa72:	0029      	movs	r1, r5
 800fa74:	187b      	adds	r3, r7, r1
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	b25b      	sxtb	r3, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d118      	bne.n	800fab0 <VL53L0X_UpdateByte+0x7c>
        goto done;
    }
    data = (data & AndData) | OrData;
 800fa7e:	0030      	movs	r0, r6
 800fa80:	183b      	adds	r3, r7, r0
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	1cba      	adds	r2, r7, #2
 800fa86:	7812      	ldrb	r2, [r2, #0]
 800fa88:	4013      	ands	r3, r2
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	1c7b      	adds	r3, r7, #1
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	4313      	orrs	r3, r2
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	183b      	adds	r3, r7, r0
 800fa96:	701a      	strb	r2, [r3, #0]
    Status = VL53L0X_WrByte(Dev, index, data);
 800fa98:	183b      	adds	r3, r7, r0
 800fa9a:	781a      	ldrb	r2, [r3, #0]
 800fa9c:	187c      	adds	r4, r7, r1
 800fa9e:	1cfb      	adds	r3, r7, #3
 800faa0:	7819      	ldrb	r1, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	0018      	movs	r0, r3
 800faa6:	f7ff ff5d 	bl	800f964 <VL53L0X_WrByte>
 800faaa:	0003      	movs	r3, r0
 800faac:	7023      	strb	r3, [r4, #0]
 800faae:	e000      	b.n	800fab2 <VL53L0X_UpdateByte+0x7e>
        goto done;
 800fab0:	46c0      	nop			; (mov r8, r8)
done:
    return Status;
 800fab2:	230f      	movs	r3, #15
 800fab4:	18fb      	adds	r3, r7, r3
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	b25b      	sxtb	r3, r3
}
 800faba:	0018      	movs	r0, r3
 800fabc:	46bd      	mov	sp, r7
 800fabe:	b005      	add	sp, #20
 800fac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fac2 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800fac2:	b590      	push	{r4, r7, lr}
 800fac4:	b087      	sub	sp, #28
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	60f8      	str	r0, [r7, #12]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	200b      	movs	r0, #11
 800face:	183b      	adds	r3, r7, r0
 800fad0:	1c0a      	adds	r2, r1, #0
 800fad2:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fad4:	2417      	movs	r4, #23
 800fad6:	193b      	adds	r3, r7, r4
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fadc:	1839      	adds	r1, r7, r0
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2201      	movs	r2, #1
 800fae2:	0018      	movs	r0, r3
 800fae4:	f7ff fe87 	bl	800f7f6 <_I2CWrite>
 800fae8:	0003      	movs	r3, r0
 800faea:	613b      	str	r3, [r7, #16]
    if( status_int ){
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d003      	beq.n	800fafa <VL53L0X_RdByte+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800faf2:	193b      	adds	r3, r7, r4
 800faf4:	22ec      	movs	r2, #236	; 0xec
 800faf6:	701a      	strb	r2, [r3, #0]
        goto done;
 800faf8:	e010      	b.n	800fb1c <VL53L0X_RdByte+0x5a>
    }
    status_int = _I2CRead(Dev, data, 1);
 800fafa:	6879      	ldr	r1, [r7, #4]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2201      	movs	r2, #1
 800fb00:	0018      	movs	r0, r3
 800fb02:	f7ff fe99 	bl	800f838 <_I2CRead>
 800fb06:	0003      	movs	r3, r0
 800fb08:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d004      	beq.n	800fb1a <VL53L0X_RdByte+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb10:	2317      	movs	r3, #23
 800fb12:	18fb      	adds	r3, r7, r3
 800fb14:	22ec      	movs	r2, #236	; 0xec
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	e000      	b.n	800fb1c <VL53L0X_RdByte+0x5a>
    }
done:
 800fb1a:	46c0      	nop			; (mov r8, r8)
    VL53L0X_PutI2cBus();
    return Status;
 800fb1c:	2317      	movs	r3, #23
 800fb1e:	18fb      	adds	r3, r7, r3
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	b25b      	sxtb	r3, r3
}
 800fb24:	0018      	movs	r0, r3
 800fb26:	46bd      	mov	sp, r7
 800fb28:	b007      	add	sp, #28
 800fb2a:	bd90      	pop	{r4, r7, pc}

0800fb2c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800fb2c:	b590      	push	{r4, r7, lr}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	607a      	str	r2, [r7, #4]
 800fb36:	200b      	movs	r0, #11
 800fb38:	183b      	adds	r3, r7, r0
 800fb3a:	1c0a      	adds	r2, r1, #0
 800fb3c:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fb3e:	2417      	movs	r4, #23
 800fb40:	193b      	adds	r3, r7, r4
 800fb42:	2200      	movs	r2, #0
 800fb44:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fb46:	1839      	adds	r1, r7, r0
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	0018      	movs	r0, r3
 800fb4e:	f7ff fe52 	bl	800f7f6 <_I2CWrite>
 800fb52:	0003      	movs	r3, r0
 800fb54:	613b      	str	r3, [r7, #16]

    if( status_int ){
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d003      	beq.n	800fb64 <VL53L0X_RdWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb5c:	193b      	adds	r3, r7, r4
 800fb5e:	22ec      	movs	r2, #236	; 0xec
 800fb60:	701a      	strb	r2, [r3, #0]
        goto done;
 800fb62:	e01b      	b.n	800fb9c <VL53L0X_RdWord+0x70>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800fb64:	4911      	ldr	r1, [pc, #68]	; (800fbac <VL53L0X_RdWord+0x80>)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2202      	movs	r2, #2
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	f7ff fe64 	bl	800f838 <_I2CRead>
 800fb70:	0003      	movs	r3, r0
 800fb72:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d004      	beq.n	800fb84 <VL53L0X_RdWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fb7a:	2317      	movs	r3, #23
 800fb7c:	18fb      	adds	r3, r7, r3
 800fb7e:	22ec      	movs	r2, #236	; 0xec
 800fb80:	701a      	strb	r2, [r3, #0]
        goto done;
 800fb82:	e00b      	b.n	800fb9c <VL53L0X_RdWord+0x70>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800fb84:	4b09      	ldr	r3, [pc, #36]	; (800fbac <VL53L0X_RdWord+0x80>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	021b      	lsls	r3, r3, #8
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	4b07      	ldr	r3, [pc, #28]	; (800fbac <VL53L0X_RdWord+0x80>)
 800fb90:	785b      	ldrb	r3, [r3, #1]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	18d3      	adds	r3, r2, r3
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800fb9c:	2317      	movs	r3, #23
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	b25b      	sxtb	r3, r3
}
 800fba4:	0018      	movs	r0, r3
 800fba6:	46bd      	mov	sp, r7
 800fba8:	b007      	add	sp, #28
 800fbaa:	bd90      	pop	{r4, r7, pc}
 800fbac:	20000a64 	.word	0x20000a64

0800fbb0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800fbb0:	b590      	push	{r4, r7, lr}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	607a      	str	r2, [r7, #4]
 800fbba:	200b      	movs	r0, #11
 800fbbc:	183b      	adds	r3, r7, r0
 800fbbe:	1c0a      	adds	r2, r1, #0
 800fbc0:	701a      	strb	r2, [r3, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fbc2:	2417      	movs	r4, #23
 800fbc4:	193b      	adds	r3, r7, r4
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800fbca:	1839      	adds	r1, r7, r0
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	0018      	movs	r0, r3
 800fbd2:	f7ff fe10 	bl	800f7f6 <_I2CWrite>
 800fbd6:	0003      	movs	r3, r0
 800fbd8:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d003      	beq.n	800fbe8 <VL53L0X_RdDWord+0x38>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbe0:	193b      	adds	r3, r7, r4
 800fbe2:	22ec      	movs	r2, #236	; 0xec
 800fbe4:	701a      	strb	r2, [r3, #0]
        goto done;
 800fbe6:	e01f      	b.n	800fc28 <VL53L0X_RdDWord+0x78>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800fbe8:	4913      	ldr	r1, [pc, #76]	; (800fc38 <VL53L0X_RdDWord+0x88>)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2204      	movs	r2, #4
 800fbee:	0018      	movs	r0, r3
 800fbf0:	f7ff fe22 	bl	800f838 <_I2CRead>
 800fbf4:	0003      	movs	r3, r0
 800fbf6:	613b      	str	r3, [r7, #16]
    if (status_int != 0) {
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d004      	beq.n	800fc08 <VL53L0X_RdDWord+0x58>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800fbfe:	2317      	movs	r3, #23
 800fc00:	18fb      	adds	r3, r7, r3
 800fc02:	22ec      	movs	r2, #236	; 0xec
 800fc04:	701a      	strb	r2, [r3, #0]
        goto done;
 800fc06:	e00f      	b.n	800fc28 <VL53L0X_RdDWord+0x78>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800fc08:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <VL53L0X_RdDWord+0x88>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	061a      	lsls	r2, r3, #24
 800fc0e:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <VL53L0X_RdDWord+0x88>)
 800fc10:	785b      	ldrb	r3, [r3, #1]
 800fc12:	041b      	lsls	r3, r3, #16
 800fc14:	18d2      	adds	r2, r2, r3
 800fc16:	4b08      	ldr	r3, [pc, #32]	; (800fc38 <VL53L0X_RdDWord+0x88>)
 800fc18:	789b      	ldrb	r3, [r3, #2]
 800fc1a:	021b      	lsls	r3, r3, #8
 800fc1c:	18d3      	adds	r3, r2, r3
 800fc1e:	4a06      	ldr	r2, [pc, #24]	; (800fc38 <VL53L0X_RdDWord+0x88>)
 800fc20:	78d2      	ldrb	r2, [r2, #3]
 800fc22:	189a      	adds	r2, r3, r2
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800fc28:	2317      	movs	r3, #23
 800fc2a:	18fb      	adds	r3, r7, r3
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	b25b      	sxtb	r3, r3
}
 800fc30:	0018      	movs	r0, r3
 800fc32:	46bd      	mov	sp, r7
 800fc34:	b007      	add	sp, #28
 800fc36:	bd90      	pop	{r4, r7, pc}
 800fc38:	20000a64 	.word	0x20000a64

0800fc3c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800fc3c:	b590      	push	{r4, r7, lr}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800fc44:	240f      	movs	r4, #15
 800fc46:	193b      	adds	r3, r7, r4
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]

    // do nothing
    VL53L0X_OsDelay();
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f7f4 fdc1 	bl	80047d4 <HAL_Delay>
    return status;
 800fc52:	193b      	adds	r3, r7, r4
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	b25b      	sxtb	r3, r3
}
 800fc58:	0018      	movs	r0, r3
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	b005      	add	sp, #20
 800fc5e:	bd90      	pop	{r4, r7, pc}

0800fc60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	0002      	movs	r2, r0
 800fc68:	1dbb      	adds	r3, r7, #6
 800fc6a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fc70:	1dbb      	adds	r3, r7, #6
 800fc72:	2200      	movs	r2, #0
 800fc74:	5e9b      	ldrsh	r3, [r3, r2]
 800fc76:	2b84      	cmp	r3, #132	; 0x84
 800fc78:	d006      	beq.n	800fc88 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800fc7a:	1dbb      	adds	r3, r7, #6
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	5e9a      	ldrsh	r2, [r3, r2]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	18d3      	adds	r3, r2, r3
 800fc84:	3303      	adds	r3, #3
 800fc86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fc88:	68fb      	ldr	r3, [r7, #12]
}
 800fc8a:	0018      	movs	r0, r3
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	b004      	add	sp, #16
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fc96:	f000 fb17 	bl	80102c8 <vTaskStartScheduler>
  
  return osOK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca4:	b087      	sub	sp, #28
 800fca6:	af02      	add	r7, sp, #8
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	685c      	ldr	r4, [r3, #4]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fcb8:	b29e      	uxth	r6, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2208      	movs	r2, #8
 800fcbe:	5e9b      	ldrsh	r3, [r3, r2]
 800fcc0:	0018      	movs	r0, r3
 800fcc2:	f7ff ffcd 	bl	800fc60 <makeFreeRtosPriority>
 800fcc6:	0001      	movs	r1, r0
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	230c      	movs	r3, #12
 800fccc:	18fb      	adds	r3, r7, r3
 800fcce:	9301      	str	r3, [sp, #4]
 800fcd0:	9100      	str	r1, [sp, #0]
 800fcd2:	0013      	movs	r3, r2
 800fcd4:	0032      	movs	r2, r6
 800fcd6:	0029      	movs	r1, r5
 800fcd8:	0020      	movs	r0, r4
 800fcda:	f000 f8c7 	bl	800fe6c <xTaskCreate>
 800fcde:	0003      	movs	r3, r0
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d001      	beq.n	800fce8 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800fce4:	2300      	movs	r3, #0
 800fce6:	e000      	b.n	800fcea <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800fce8:	68fb      	ldr	r3, [r7, #12]
}
 800fcea:	0018      	movs	r0, r3
 800fcec:	46bd      	mov	sp, r7
 800fcee:	b005      	add	sp, #20
 800fcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcf2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <osDelay+0x16>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	e000      	b.n	800fd0a <osDelay+0x18>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	f000 f9dc 	bl	80100c8 <vTaskDelay>
  
  return osOK;
 800fd10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fd12:	0018      	movs	r0, r3
 800fd14:	46bd      	mov	sp, r7
 800fd16:	b004      	add	sp, #16
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b082      	sub	sp, #8
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3308      	adds	r3, #8
 800fd26:	001a      	movs	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	4252      	negs	r2, r2
 800fd32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3308      	adds	r3, #8
 800fd38:	001a      	movs	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3308      	adds	r3, #8
 800fd42:	001a      	movs	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fd4e:	46c0      	nop			; (mov r8, r8)
 800fd50:	46bd      	mov	sp, r7
 800fd52:	b002      	add	sp, #8
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b082      	sub	sp, #8
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fd64:	46c0      	nop			; (mov r8, r8)
 800fd66:	46bd      	mov	sp, r7
 800fd68:	b002      	add	sp, #8
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	689a      	ldr	r2, [r3, #8]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	689b      	ldr	r3, [r3, #8]
 800fd8e:	683a      	ldr	r2, [r7, #0]
 800fd90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	601a      	str	r2, [r3, #0]
}
 800fda8:	46c0      	nop			; (mov r8, r8)
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	b004      	add	sp, #16
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	d103      	bne.n	800fdce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	60fb      	str	r3, [r7, #12]
 800fdcc:	e00c      	b.n	800fde8 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3308      	adds	r3, #8
 800fdd2:	60fb      	str	r3, [r7, #12]
 800fdd4:	e002      	b.n	800fddc <vListInsert+0x2c>
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d2f6      	bcs.n	800fdd6 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	685a      	ldr	r2, [r3, #4]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	1c5a      	adds	r2, r3, #1
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	601a      	str	r2, [r3, #0]
}
 800fe14:	46c0      	nop			; (mov r8, r8)
 800fe16:	46bd      	mov	sp, r7
 800fe18:	b004      	add	sp, #16
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	6892      	ldr	r2, [r2, #8]
 800fe32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	6852      	ldr	r2, [r2, #4]
 800fe3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d103      	bne.n	800fe50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689a      	ldr	r2, [r3, #8]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	1e5a      	subs	r2, r3, #1
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
}
 800fe64:	0018      	movs	r0, r3
 800fe66:	46bd      	mov	sp, r7
 800fe68:	b004      	add	sp, #16
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b08d      	sub	sp, #52	; 0x34
 800fe70:	af04      	add	r7, sp, #16
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	1dbb      	adds	r3, r7, #6
 800fe7a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fe7c:	1dbb      	adds	r3, r7, #6
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	0018      	movs	r0, r3
 800fe84:	f000 ff1c 	bl	8010cc0 <pvPortMalloc>
 800fe88:	0003      	movs	r3, r0
 800fe8a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d010      	beq.n	800feb4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fe92:	2054      	movs	r0, #84	; 0x54
 800fe94:	f000 ff14 	bl	8010cc0 <pvPortMalloc>
 800fe98:	0003      	movs	r3, r0
 800fe9a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d003      	beq.n	800feaa <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	631a      	str	r2, [r3, #48]	; 0x30
 800fea8:	e006      	b.n	800feb8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	0018      	movs	r0, r3
 800feae:	f000 ffb3 	bl	8010e18 <vPortFree>
 800feb2:	e001      	b.n	800feb8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800feb4:	2300      	movs	r3, #0
 800feb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d016      	beq.n	800feec <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800febe:	1dbb      	adds	r3, r7, #6
 800fec0:	881a      	ldrh	r2, [r3, #0]
 800fec2:	683c      	ldr	r4, [r7, #0]
 800fec4:	68b9      	ldr	r1, [r7, #8]
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	2300      	movs	r3, #0
 800feca:	9303      	str	r3, [sp, #12]
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	9302      	str	r3, [sp, #8]
 800fed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed2:	9301      	str	r3, [sp, #4]
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	9300      	str	r3, [sp, #0]
 800fed8:	0023      	movs	r3, r4
 800feda:	f000 f80f 	bl	800fefc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	0018      	movs	r0, r3
 800fee2:	f000 f88d 	bl	8010000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fee6:	2301      	movs	r3, #1
 800fee8:	61bb      	str	r3, [r7, #24]
 800feea:	e002      	b.n	800fef2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800feec:	2301      	movs	r3, #1
 800feee:	425b      	negs	r3, r3
 800fef0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fef2:	69bb      	ldr	r3, [r7, #24]
	}
 800fef4:	0018      	movs	r0, r3
 800fef6:	46bd      	mov	sp, r7
 800fef8:	b009      	add	sp, #36	; 0x24
 800fefa:	bd90      	pop	{r4, r7, pc}

0800fefc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
 800ff08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ff0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	493a      	ldr	r1, [pc, #232]	; (800fffc <prvInitialiseNewTask+0x100>)
 800ff12:	468c      	mov	ip, r1
 800ff14:	4463      	add	r3, ip
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	18d3      	adds	r3, r2, r3
 800ff1a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2207      	movs	r2, #7
 800ff20:	4393      	bics	r3, r2
 800ff22:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	2207      	movs	r2, #7
 800ff28:	4013      	ands	r3, r2
 800ff2a:	d001      	beq.n	800ff30 <prvInitialiseNewTask+0x34>
 800ff2c:	b672      	cpsid	i
 800ff2e:	e7fe      	b.n	800ff2e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d020      	beq.n	800ff78 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff36:	2300      	movs	r3, #0
 800ff38:	617b      	str	r3, [r7, #20]
 800ff3a:	e013      	b.n	800ff64 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	18d3      	adds	r3, r2, r3
 800ff42:	7818      	ldrb	r0, [r3, #0]
 800ff44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff46:	2134      	movs	r1, #52	; 0x34
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	18d3      	adds	r3, r2, r3
 800ff4c:	185b      	adds	r3, r3, r1
 800ff4e:	1c02      	adds	r2, r0, #0
 800ff50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ff52:	68ba      	ldr	r2, [r7, #8]
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	18d3      	adds	r3, r2, r3
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d006      	beq.n	800ff6c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	3301      	adds	r3, #1
 800ff62:	617b      	str	r3, [r7, #20]
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	2b0f      	cmp	r3, #15
 800ff68:	d9e8      	bls.n	800ff3c <prvInitialiseNewTask+0x40>
 800ff6a:	e000      	b.n	800ff6e <prvInitialiseNewTask+0x72>
			{
				break;
 800ff6c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ff6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff70:	2243      	movs	r2, #67	; 0x43
 800ff72:	2100      	movs	r1, #0
 800ff74:	5499      	strb	r1, [r3, r2]
 800ff76:	e003      	b.n	800ff80 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	2234      	movs	r2, #52	; 0x34
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ff80:	6a3b      	ldr	r3, [r7, #32]
 800ff82:	2b06      	cmp	r3, #6
 800ff84:	d901      	bls.n	800ff8a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ff86:	2306      	movs	r3, #6
 800ff88:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	6a3a      	ldr	r2, [r7, #32]
 800ff8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ff90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff92:	6a3a      	ldr	r2, [r7, #32]
 800ff94:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	2200      	movs	r2, #0
 800ff9a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ff9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	0018      	movs	r0, r3
 800ffa2:	f7ff fed8 	bl	800fd56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ffa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa8:	3318      	adds	r3, #24
 800ffaa:	0018      	movs	r0, r3
 800ffac:	f7ff fed3 	bl	800fd56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ffb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	2207      	movs	r2, #7
 800ffba:	1ad2      	subs	r2, r2, r3
 800ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ffc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	2200      	movs	r2, #0
 800ffca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ffcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffce:	2250      	movs	r2, #80	; 0x50
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	68f9      	ldr	r1, [r7, #12]
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	0018      	movs	r0, r3
 800ffdc:	f000 fd3c 	bl	8010a58 <pxPortInitialiseStack>
 800ffe0:	0002      	movs	r2, r0
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d002      	beq.n	800fff2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ffec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fff2:	46c0      	nop			; (mov r8, r8)
 800fff4:	46bd      	mov	sp, r7
 800fff6:	b006      	add	sp, #24
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	46c0      	nop			; (mov r8, r8)
 800fffc:	3fffffff 	.word	0x3fffffff

08010000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010008:	f000 fdc2 	bl	8010b90 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801000c:	4b28      	ldr	r3, [pc, #160]	; (80100b0 <prvAddNewTaskToReadyList+0xb0>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	1c5a      	adds	r2, r3, #1
 8010012:	4b27      	ldr	r3, [pc, #156]	; (80100b0 <prvAddNewTaskToReadyList+0xb0>)
 8010014:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010016:	4b27      	ldr	r3, [pc, #156]	; (80100b4 <prvAddNewTaskToReadyList+0xb4>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d109      	bne.n	8010032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801001e:	4b25      	ldr	r3, [pc, #148]	; (80100b4 <prvAddNewTaskToReadyList+0xb4>)
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010024:	4b22      	ldr	r3, [pc, #136]	; (80100b0 <prvAddNewTaskToReadyList+0xb0>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d110      	bne.n	801004e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801002c:	f000 fb2c 	bl	8010688 <prvInitialiseTaskLists>
 8010030:	e00d      	b.n	801004e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010032:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <prvAddNewTaskToReadyList+0xb8>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d109      	bne.n	801004e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801003a:	4b1e      	ldr	r3, [pc, #120]	; (80100b4 <prvAddNewTaskToReadyList+0xb4>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010044:	429a      	cmp	r2, r3
 8010046:	d802      	bhi.n	801004e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010048:	4b1a      	ldr	r3, [pc, #104]	; (80100b4 <prvAddNewTaskToReadyList+0xb4>)
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801004e:	4b1b      	ldr	r3, [pc, #108]	; (80100bc <prvAddNewTaskToReadyList+0xbc>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	4b19      	ldr	r3, [pc, #100]	; (80100bc <prvAddNewTaskToReadyList+0xbc>)
 8010056:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005c:	4b18      	ldr	r3, [pc, #96]	; (80100c0 <prvAddNewTaskToReadyList+0xc0>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	429a      	cmp	r2, r3
 8010062:	d903      	bls.n	801006c <prvAddNewTaskToReadyList+0x6c>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010068:	4b15      	ldr	r3, [pc, #84]	; (80100c0 <prvAddNewTaskToReadyList+0xc0>)
 801006a:	601a      	str	r2, [r3, #0]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010070:	0013      	movs	r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	189b      	adds	r3, r3, r2
 8010076:	009b      	lsls	r3, r3, #2
 8010078:	4a12      	ldr	r2, [pc, #72]	; (80100c4 <prvAddNewTaskToReadyList+0xc4>)
 801007a:	189a      	adds	r2, r3, r2
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	3304      	adds	r3, #4
 8010080:	0019      	movs	r1, r3
 8010082:	0010      	movs	r0, r2
 8010084:	f7ff fe72 	bl	800fd6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010088:	f000 fd94 	bl	8010bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801008c:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <prvAddNewTaskToReadyList+0xb8>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d008      	beq.n	80100a6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010094:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <prvAddNewTaskToReadyList+0xb4>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009e:	429a      	cmp	r2, r3
 80100a0:	d201      	bcs.n	80100a6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80100a2:	f000 fd65 	bl	8010b70 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100a6:	46c0      	nop			; (mov r8, r8)
 80100a8:	46bd      	mov	sp, r7
 80100aa:	b002      	add	sp, #8
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	46c0      	nop			; (mov r8, r8)
 80100b0:	20000ba4 	.word	0x20000ba4
 80100b4:	20000aa4 	.word	0x20000aa4
 80100b8:	20000bb0 	.word	0x20000bb0
 80100bc:	20000bc0 	.word	0x20000bc0
 80100c0:	20000bac 	.word	0x20000bac
 80100c4:	20000aa8 	.word	0x20000aa8

080100c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80100d0:	2300      	movs	r3, #0
 80100d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d010      	beq.n	80100fc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80100da:	4b0d      	ldr	r3, [pc, #52]	; (8010110 <vTaskDelay+0x48>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d001      	beq.n	80100e6 <vTaskDelay+0x1e>
 80100e2:	b672      	cpsid	i
 80100e4:	e7fe      	b.n	80100e4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80100e6:	f000 f925 	bl	8010334 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2100      	movs	r1, #0
 80100ee:	0018      	movs	r0, r3
 80100f0:	f000 fc5e 	bl	80109b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80100f4:	f000 f92a 	bl	801034c <xTaskResumeAll>
 80100f8:	0003      	movs	r3, r0
 80100fa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d101      	bne.n	8010106 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8010102:	f000 fd35 	bl	8010b70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010106:	46c0      	nop			; (mov r8, r8)
 8010108:	46bd      	mov	sp, r7
 801010a:	b004      	add	sp, #16
 801010c:	bd80      	pop	{r7, pc}
 801010e:	46c0      	nop			; (mov r8, r8)
 8010110:	20000bcc 	.word	0x20000bcc

08010114 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801011c:	f000 fd38 	bl	8010b90 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d102      	bne.n	801012c <vTaskSuspend+0x18>
 8010126:	4b29      	ldr	r3, [pc, #164]	; (80101cc <vTaskSuspend+0xb8>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	e000      	b.n	801012e <vTaskSuspend+0x1a>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	3304      	adds	r3, #4
 8010134:	0018      	movs	r0, r3
 8010136:	f7ff fe71 	bl	800fe1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801013e:	2b00      	cmp	r3, #0
 8010140:	d004      	beq.n	801014c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3318      	adds	r3, #24
 8010146:	0018      	movs	r0, r3
 8010148:	f7ff fe68 	bl	800fe1c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	1d1a      	adds	r2, r3, #4
 8010150:	4b1f      	ldr	r3, [pc, #124]	; (80101d0 <vTaskSuspend+0xbc>)
 8010152:	0011      	movs	r1, r2
 8010154:	0018      	movs	r0, r3
 8010156:	f7ff fe09 	bl	800fd6c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2250      	movs	r2, #80	; 0x50
 801015e:	5c9b      	ldrb	r3, [r3, r2]
 8010160:	b2db      	uxtb	r3, r3
 8010162:	2b01      	cmp	r3, #1
 8010164:	d103      	bne.n	801016e <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2250      	movs	r2, #80	; 0x50
 801016a:	2100      	movs	r1, #0
 801016c:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801016e:	f000 fd21 	bl	8010bb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8010172:	4b18      	ldr	r3, [pc, #96]	; (80101d4 <vTaskSuspend+0xc0>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d005      	beq.n	8010186 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801017a:	f000 fd09 	bl	8010b90 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801017e:	f000 fb07 	bl	8010790 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8010182:	f000 fd17 	bl	8010bb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8010186:	4b11      	ldr	r3, [pc, #68]	; (80101cc <vTaskSuspend+0xb8>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	429a      	cmp	r2, r3
 801018e:	d118      	bne.n	80101c2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8010190:	4b10      	ldr	r3, [pc, #64]	; (80101d4 <vTaskSuspend+0xc0>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d008      	beq.n	80101aa <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010198:	4b0f      	ldr	r3, [pc, #60]	; (80101d8 <vTaskSuspend+0xc4>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <vTaskSuspend+0x90>
 80101a0:	b672      	cpsid	i
 80101a2:	e7fe      	b.n	80101a2 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80101a4:	f000 fce4 	bl	8010b70 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101a8:	e00b      	b.n	80101c2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80101aa:	4b09      	ldr	r3, [pc, #36]	; (80101d0 <vTaskSuspend+0xbc>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	4b0b      	ldr	r3, [pc, #44]	; (80101dc <vTaskSuspend+0xc8>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d103      	bne.n	80101be <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80101b6:	4b05      	ldr	r3, [pc, #20]	; (80101cc <vTaskSuspend+0xb8>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]
	}
 80101bc:	e001      	b.n	80101c2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80101be:	f000 fa01 	bl	80105c4 <vTaskSwitchContext>
	}
 80101c2:	46c0      	nop			; (mov r8, r8)
 80101c4:	46bd      	mov	sp, r7
 80101c6:	b004      	add	sp, #16
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	46c0      	nop			; (mov r8, r8)
 80101cc:	20000aa4 	.word	0x20000aa4
 80101d0:	20000b90 	.word	0x20000b90
 80101d4:	20000bb0 	.word	0x20000bb0
 80101d8:	20000bcc 	.word	0x20000bcc
 80101dc:	20000ba4 	.word	0x20000ba4

080101e0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80101e8:	2300      	movs	r3, #0
 80101ea:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d101      	bne.n	80101fa <prvTaskIsTaskSuspended+0x1a>
 80101f6:	b672      	cpsid	i
 80101f8:	e7fe      	b.n	80101f8 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	695a      	ldr	r2, [r3, #20]
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <prvTaskIsTaskSuspended+0x44>)
 8010200:	429a      	cmp	r2, r3
 8010202:	d10a      	bne.n	801021a <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010208:	4b07      	ldr	r3, [pc, #28]	; (8010228 <prvTaskIsTaskSuspended+0x48>)
 801020a:	429a      	cmp	r2, r3
 801020c:	d005      	beq.n	801021a <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8010216:	2301      	movs	r3, #1
 8010218:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801021a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801021c:	0018      	movs	r0, r3
 801021e:	46bd      	mov	sp, r7
 8010220:	b004      	add	sp, #16
 8010222:	bd80      	pop	{r7, pc}
 8010224:	20000b90 	.word	0x20000b90
 8010228:	20000b64 	.word	0x20000b64

0801022c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <vTaskResume+0x16>
 801023e:	b672      	cpsid	i
 8010240:	e7fe      	b.n	8010240 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010242:	4b1e      	ldr	r3, [pc, #120]	; (80102bc <vTaskResume+0x90>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	429a      	cmp	r2, r3
 801024a:	d032      	beq.n	80102b2 <vTaskResume+0x86>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d02f      	beq.n	80102b2 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 8010252:	f000 fc9d 	bl	8010b90 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	0018      	movs	r0, r3
 801025a:	f7ff ffc1 	bl	80101e0 <prvTaskIsTaskSuspended>
 801025e:	1e03      	subs	r3, r0, #0
 8010260:	d025      	beq.n	80102ae <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	3304      	adds	r3, #4
 8010266:	0018      	movs	r0, r3
 8010268:	f7ff fdd8 	bl	800fe1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010270:	4b13      	ldr	r3, [pc, #76]	; (80102c0 <vTaskResume+0x94>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	429a      	cmp	r2, r3
 8010276:	d903      	bls.n	8010280 <vTaskResume+0x54>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027c:	4b10      	ldr	r3, [pc, #64]	; (80102c0 <vTaskResume+0x94>)
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010284:	0013      	movs	r3, r2
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	189b      	adds	r3, r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4a0d      	ldr	r2, [pc, #52]	; (80102c4 <vTaskResume+0x98>)
 801028e:	189a      	adds	r2, r3, r2
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3304      	adds	r3, #4
 8010294:	0019      	movs	r1, r3
 8010296:	0010      	movs	r0, r2
 8010298:	f7ff fd68 	bl	800fd6c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102a0:	4b06      	ldr	r3, [pc, #24]	; (80102bc <vTaskResume+0x90>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d301      	bcc.n	80102ae <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80102aa:	f000 fc61 	bl	8010b70 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80102ae:	f000 fc81 	bl	8010bb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102b2:	46c0      	nop			; (mov r8, r8)
 80102b4:	46bd      	mov	sp, r7
 80102b6:	b004      	add	sp, #16
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	46c0      	nop			; (mov r8, r8)
 80102bc:	20000aa4 	.word	0x20000aa4
 80102c0:	20000bac 	.word	0x20000bac
 80102c4:	20000aa8 	.word	0x20000aa8

080102c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80102ce:	4913      	ldr	r1, [pc, #76]	; (801031c <vTaskStartScheduler+0x54>)
 80102d0:	4813      	ldr	r0, [pc, #76]	; (8010320 <vTaskStartScheduler+0x58>)
 80102d2:	4b14      	ldr	r3, [pc, #80]	; (8010324 <vTaskStartScheduler+0x5c>)
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	2300      	movs	r3, #0
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	2300      	movs	r3, #0
 80102dc:	2280      	movs	r2, #128	; 0x80
 80102de:	f7ff fdc5 	bl	800fe6c <xTaskCreate>
 80102e2:	0003      	movs	r3, r0
 80102e4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d10d      	bne.n	8010308 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80102ec:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80102ee:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <vTaskStartScheduler+0x60>)
 80102f0:	2201      	movs	r2, #1
 80102f2:	4252      	negs	r2, r2
 80102f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80102f6:	4b0d      	ldr	r3, [pc, #52]	; (801032c <vTaskStartScheduler+0x64>)
 80102f8:	2201      	movs	r2, #1
 80102fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80102fc:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <vTaskStartScheduler+0x68>)
 80102fe:	2200      	movs	r2, #0
 8010300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010302:	f000 fc11 	bl	8010b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010306:	e004      	b.n	8010312 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3301      	adds	r3, #1
 801030c:	d101      	bne.n	8010312 <vTaskStartScheduler+0x4a>
 801030e:	b672      	cpsid	i
 8010310:	e7fe      	b.n	8010310 <vTaskStartScheduler+0x48>
}
 8010312:	46c0      	nop			; (mov r8, r8)
 8010314:	46bd      	mov	sp, r7
 8010316:	b002      	add	sp, #8
 8010318:	bd80      	pop	{r7, pc}
 801031a:	46c0      	nop			; (mov r8, r8)
 801031c:	08014c20 	.word	0x08014c20
 8010320:	08010669 	.word	0x08010669
 8010324:	20000bc8 	.word	0x20000bc8
 8010328:	20000bc4 	.word	0x20000bc4
 801032c:	20000bb0 	.word	0x20000bb0
 8010330:	20000ba8 	.word	0x20000ba8

08010334 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010334:	b580      	push	{r7, lr}
 8010336:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010338:	4b03      	ldr	r3, [pc, #12]	; (8010348 <vTaskSuspendAll+0x14>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	1c5a      	adds	r2, r3, #1
 801033e:	4b02      	ldr	r3, [pc, #8]	; (8010348 <vTaskSuspendAll+0x14>)
 8010340:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010342:	46c0      	nop			; (mov r8, r8)
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	20000bcc 	.word	0x20000bcc

0801034c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010352:	2300      	movs	r3, #0
 8010354:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010356:	2300      	movs	r3, #0
 8010358:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801035a:	4b3a      	ldr	r3, [pc, #232]	; (8010444 <xTaskResumeAll+0xf8>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d101      	bne.n	8010366 <xTaskResumeAll+0x1a>
 8010362:	b672      	cpsid	i
 8010364:	e7fe      	b.n	8010364 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010366:	f000 fc13 	bl	8010b90 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801036a:	4b36      	ldr	r3, [pc, #216]	; (8010444 <xTaskResumeAll+0xf8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	1e5a      	subs	r2, r3, #1
 8010370:	4b34      	ldr	r3, [pc, #208]	; (8010444 <xTaskResumeAll+0xf8>)
 8010372:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010374:	4b33      	ldr	r3, [pc, #204]	; (8010444 <xTaskResumeAll+0xf8>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d15b      	bne.n	8010434 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801037c:	4b32      	ldr	r3, [pc, #200]	; (8010448 <xTaskResumeAll+0xfc>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d057      	beq.n	8010434 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010384:	e02f      	b.n	80103e6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010386:	4b31      	ldr	r3, [pc, #196]	; (801044c <xTaskResumeAll+0x100>)
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3318      	adds	r3, #24
 8010392:	0018      	movs	r0, r3
 8010394:	f7ff fd42 	bl	800fe1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	3304      	adds	r3, #4
 801039c:	0018      	movs	r0, r3
 801039e:	f7ff fd3d 	bl	800fe1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a6:	4b2a      	ldr	r3, [pc, #168]	; (8010450 <xTaskResumeAll+0x104>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d903      	bls.n	80103b6 <xTaskResumeAll+0x6a>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b2:	4b27      	ldr	r3, [pc, #156]	; (8010450 <xTaskResumeAll+0x104>)
 80103b4:	601a      	str	r2, [r3, #0]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ba:	0013      	movs	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	189b      	adds	r3, r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	4a24      	ldr	r2, [pc, #144]	; (8010454 <xTaskResumeAll+0x108>)
 80103c4:	189a      	adds	r2, r3, r2
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3304      	adds	r3, #4
 80103ca:	0019      	movs	r1, r3
 80103cc:	0010      	movs	r0, r2
 80103ce:	f7ff fccd 	bl	800fd6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d6:	4b20      	ldr	r3, [pc, #128]	; (8010458 <xTaskResumeAll+0x10c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103dc:	429a      	cmp	r2, r3
 80103de:	d302      	bcc.n	80103e6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80103e0:	4b1e      	ldr	r3, [pc, #120]	; (801045c <xTaskResumeAll+0x110>)
 80103e2:	2201      	movs	r2, #1
 80103e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103e6:	4b19      	ldr	r3, [pc, #100]	; (801044c <xTaskResumeAll+0x100>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d1cb      	bne.n	8010386 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d001      	beq.n	80103f8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80103f4:	f000 f9cc 	bl	8010790 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80103f8:	4b19      	ldr	r3, [pc, #100]	; (8010460 <xTaskResumeAll+0x114>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00f      	beq.n	8010424 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010404:	f000 f82e 	bl	8010464 <xTaskIncrementTick>
 8010408:	1e03      	subs	r3, r0, #0
 801040a:	d002      	beq.n	8010412 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 801040c:	4b13      	ldr	r3, [pc, #76]	; (801045c <xTaskResumeAll+0x110>)
 801040e:	2201      	movs	r2, #1
 8010410:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	3b01      	subs	r3, #1
 8010416:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1f2      	bne.n	8010404 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 801041e:	4b10      	ldr	r3, [pc, #64]	; (8010460 <xTaskResumeAll+0x114>)
 8010420:	2200      	movs	r2, #0
 8010422:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <xTaskResumeAll+0x110>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d003      	beq.n	8010434 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801042c:	2301      	movs	r3, #1
 801042e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010430:	f000 fb9e 	bl	8010b70 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010434:	f000 fbbe 	bl	8010bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8010438:	68bb      	ldr	r3, [r7, #8]
}
 801043a:	0018      	movs	r0, r3
 801043c:	46bd      	mov	sp, r7
 801043e:	b004      	add	sp, #16
 8010440:	bd80      	pop	{r7, pc}
 8010442:	46c0      	nop			; (mov r8, r8)
 8010444:	20000bcc 	.word	0x20000bcc
 8010448:	20000ba4 	.word	0x20000ba4
 801044c:	20000b64 	.word	0x20000b64
 8010450:	20000bac 	.word	0x20000bac
 8010454:	20000aa8 	.word	0x20000aa8
 8010458:	20000aa4 	.word	0x20000aa4
 801045c:	20000bb8 	.word	0x20000bb8
 8010460:	20000bb4 	.word	0x20000bb4

08010464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801046a:	2300      	movs	r3, #0
 801046c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801046e:	4b4a      	ldr	r3, [pc, #296]	; (8010598 <xTaskIncrementTick+0x134>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d000      	beq.n	8010478 <xTaskIncrementTick+0x14>
 8010476:	e084      	b.n	8010582 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010478:	4b48      	ldr	r3, [pc, #288]	; (801059c <xTaskIncrementTick+0x138>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	3301      	adds	r3, #1
 801047e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010480:	4b46      	ldr	r3, [pc, #280]	; (801059c <xTaskIncrementTick+0x138>)
 8010482:	693a      	ldr	r2, [r7, #16]
 8010484:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d117      	bne.n	80104bc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 801048c:	4b44      	ldr	r3, [pc, #272]	; (80105a0 <xTaskIncrementTick+0x13c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d001      	beq.n	801049a <xTaskIncrementTick+0x36>
 8010496:	b672      	cpsid	i
 8010498:	e7fe      	b.n	8010498 <xTaskIncrementTick+0x34>
 801049a:	4b41      	ldr	r3, [pc, #260]	; (80105a0 <xTaskIncrementTick+0x13c>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	4b40      	ldr	r3, [pc, #256]	; (80105a4 <xTaskIncrementTick+0x140>)
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	4b3e      	ldr	r3, [pc, #248]	; (80105a0 <xTaskIncrementTick+0x13c>)
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	4b3e      	ldr	r3, [pc, #248]	; (80105a4 <xTaskIncrementTick+0x140>)
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	4b3e      	ldr	r3, [pc, #248]	; (80105a8 <xTaskIncrementTick+0x144>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	1c5a      	adds	r2, r3, #1
 80104b4:	4b3c      	ldr	r3, [pc, #240]	; (80105a8 <xTaskIncrementTick+0x144>)
 80104b6:	601a      	str	r2, [r3, #0]
 80104b8:	f000 f96a 	bl	8010790 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80104bc:	4b3b      	ldr	r3, [pc, #236]	; (80105ac <xTaskIncrementTick+0x148>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	693a      	ldr	r2, [r7, #16]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d349      	bcc.n	801055a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104c6:	4b36      	ldr	r3, [pc, #216]	; (80105a0 <xTaskIncrementTick+0x13c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d104      	bne.n	80104da <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104d0:	4b36      	ldr	r3, [pc, #216]	; (80105ac <xTaskIncrementTick+0x148>)
 80104d2:	2201      	movs	r2, #1
 80104d4:	4252      	negs	r2, r2
 80104d6:	601a      	str	r2, [r3, #0]
					break;
 80104d8:	e03f      	b.n	801055a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104da:	4b31      	ldr	r3, [pc, #196]	; (80105a0 <xTaskIncrementTick+0x13c>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80104ea:	693a      	ldr	r2, [r7, #16]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d203      	bcs.n	80104fa <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80104f2:	4b2e      	ldr	r3, [pc, #184]	; (80105ac <xTaskIncrementTick+0x148>)
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80104f8:	e02f      	b.n	801055a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	3304      	adds	r3, #4
 80104fe:	0018      	movs	r0, r3
 8010500:	f7ff fc8c 	bl	800fe1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010508:	2b00      	cmp	r3, #0
 801050a:	d004      	beq.n	8010516 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	3318      	adds	r3, #24
 8010510:	0018      	movs	r0, r3
 8010512:	f7ff fc83 	bl	800fe1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801051a:	4b25      	ldr	r3, [pc, #148]	; (80105b0 <xTaskIncrementTick+0x14c>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	429a      	cmp	r2, r3
 8010520:	d903      	bls.n	801052a <xTaskIncrementTick+0xc6>
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010526:	4b22      	ldr	r3, [pc, #136]	; (80105b0 <xTaskIncrementTick+0x14c>)
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801052e:	0013      	movs	r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	189b      	adds	r3, r3, r2
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	4a1f      	ldr	r2, [pc, #124]	; (80105b4 <xTaskIncrementTick+0x150>)
 8010538:	189a      	adds	r2, r3, r2
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	3304      	adds	r3, #4
 801053e:	0019      	movs	r1, r3
 8010540:	0010      	movs	r0, r2
 8010542:	f7ff fc13 	bl	800fd6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801054a:	4b1b      	ldr	r3, [pc, #108]	; (80105b8 <xTaskIncrementTick+0x154>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	429a      	cmp	r2, r3
 8010552:	d3b8      	bcc.n	80104c6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8010554:	2301      	movs	r3, #1
 8010556:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010558:	e7b5      	b.n	80104c6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801055a:	4b17      	ldr	r3, [pc, #92]	; (80105b8 <xTaskIncrementTick+0x154>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010560:	4914      	ldr	r1, [pc, #80]	; (80105b4 <xTaskIncrementTick+0x150>)
 8010562:	0013      	movs	r3, r2
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	189b      	adds	r3, r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	585b      	ldr	r3, [r3, r1]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d901      	bls.n	8010574 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8010570:	2301      	movs	r3, #1
 8010572:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010574:	4b11      	ldr	r3, [pc, #68]	; (80105bc <xTaskIncrementTick+0x158>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 801057c:	2301      	movs	r3, #1
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	e004      	b.n	801058c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010582:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <xTaskIncrementTick+0x15c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <xTaskIncrementTick+0x15c>)
 801058a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801058c:	697b      	ldr	r3, [r7, #20]
}
 801058e:	0018      	movs	r0, r3
 8010590:	46bd      	mov	sp, r7
 8010592:	b006      	add	sp, #24
 8010594:	bd80      	pop	{r7, pc}
 8010596:	46c0      	nop			; (mov r8, r8)
 8010598:	20000bcc 	.word	0x20000bcc
 801059c:	20000ba8 	.word	0x20000ba8
 80105a0:	20000b5c 	.word	0x20000b5c
 80105a4:	20000b60 	.word	0x20000b60
 80105a8:	20000bbc 	.word	0x20000bbc
 80105ac:	20000bc4 	.word	0x20000bc4
 80105b0:	20000bac 	.word	0x20000bac
 80105b4:	20000aa8 	.word	0x20000aa8
 80105b8:	20000aa4 	.word	0x20000aa4
 80105bc:	20000bb8 	.word	0x20000bb8
 80105c0:	20000bb4 	.word	0x20000bb4

080105c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80105ca:	4b22      	ldr	r3, [pc, #136]	; (8010654 <vTaskSwitchContext+0x90>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d003      	beq.n	80105da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80105d2:	4b21      	ldr	r3, [pc, #132]	; (8010658 <vTaskSwitchContext+0x94>)
 80105d4:	2201      	movs	r2, #1
 80105d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80105d8:	e037      	b.n	801064a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80105da:	4b1f      	ldr	r3, [pc, #124]	; (8010658 <vTaskSwitchContext+0x94>)
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105e0:	4b1e      	ldr	r3, [pc, #120]	; (801065c <vTaskSwitchContext+0x98>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	607b      	str	r3, [r7, #4]
 80105e6:	e007      	b.n	80105f8 <vTaskSwitchContext+0x34>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d101      	bne.n	80105f2 <vTaskSwitchContext+0x2e>
 80105ee:	b672      	cpsid	i
 80105f0:	e7fe      	b.n	80105f0 <vTaskSwitchContext+0x2c>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3b01      	subs	r3, #1
 80105f6:	607b      	str	r3, [r7, #4]
 80105f8:	4919      	ldr	r1, [pc, #100]	; (8010660 <vTaskSwitchContext+0x9c>)
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	0013      	movs	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	189b      	adds	r3, r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	585b      	ldr	r3, [r3, r1]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0ee      	beq.n	80105e8 <vTaskSwitchContext+0x24>
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	0013      	movs	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	189b      	adds	r3, r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	4a12      	ldr	r2, [pc, #72]	; (8010660 <vTaskSwitchContext+0x9c>)
 8010616:	189b      	adds	r3, r3, r2
 8010618:	603b      	str	r3, [r7, #0]
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	605a      	str	r2, [r3, #4]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	3308      	adds	r3, #8
 801062c:	429a      	cmp	r2, r3
 801062e:	d104      	bne.n	801063a <vTaskSwitchContext+0x76>
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	605a      	str	r2, [r3, #4]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	68da      	ldr	r2, [r3, #12]
 8010640:	4b08      	ldr	r3, [pc, #32]	; (8010664 <vTaskSwitchContext+0xa0>)
 8010642:	601a      	str	r2, [r3, #0]
 8010644:	4b05      	ldr	r3, [pc, #20]	; (801065c <vTaskSwitchContext+0x98>)
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
}
 801064a:	46c0      	nop			; (mov r8, r8)
 801064c:	46bd      	mov	sp, r7
 801064e:	b002      	add	sp, #8
 8010650:	bd80      	pop	{r7, pc}
 8010652:	46c0      	nop			; (mov r8, r8)
 8010654:	20000bcc 	.word	0x20000bcc
 8010658:	20000bb8 	.word	0x20000bb8
 801065c:	20000bac 	.word	0x20000bac
 8010660:	20000aa8 	.word	0x20000aa8
 8010664:	20000aa4 	.word	0x20000aa4

08010668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010670:	f000 f84e 	bl	8010710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010674:	4b03      	ldr	r3, [pc, #12]	; (8010684 <prvIdleTask+0x1c>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d9f9      	bls.n	8010670 <prvIdleTask+0x8>
			{
				taskYIELD();
 801067c:	f000 fa78 	bl	8010b70 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010680:	e7f6      	b.n	8010670 <prvIdleTask+0x8>
 8010682:	46c0      	nop			; (mov r8, r8)
 8010684:	20000aa8 	.word	0x20000aa8

08010688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801068e:	2300      	movs	r3, #0
 8010690:	607b      	str	r3, [r7, #4]
 8010692:	e00c      	b.n	80106ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	0013      	movs	r3, r2
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	189b      	adds	r3, r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	4a14      	ldr	r2, [pc, #80]	; (80106f0 <prvInitialiseTaskLists+0x68>)
 80106a0:	189b      	adds	r3, r3, r2
 80106a2:	0018      	movs	r0, r3
 80106a4:	f7ff fb39 	bl	800fd1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	3301      	adds	r3, #1
 80106ac:	607b      	str	r3, [r7, #4]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b06      	cmp	r3, #6
 80106b2:	d9ef      	bls.n	8010694 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80106b4:	4b0f      	ldr	r3, [pc, #60]	; (80106f4 <prvInitialiseTaskLists+0x6c>)
 80106b6:	0018      	movs	r0, r3
 80106b8:	f7ff fb2f 	bl	800fd1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80106bc:	4b0e      	ldr	r3, [pc, #56]	; (80106f8 <prvInitialiseTaskLists+0x70>)
 80106be:	0018      	movs	r0, r3
 80106c0:	f7ff fb2b 	bl	800fd1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80106c4:	4b0d      	ldr	r3, [pc, #52]	; (80106fc <prvInitialiseTaskLists+0x74>)
 80106c6:	0018      	movs	r0, r3
 80106c8:	f7ff fb27 	bl	800fd1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80106cc:	4b0c      	ldr	r3, [pc, #48]	; (8010700 <prvInitialiseTaskLists+0x78>)
 80106ce:	0018      	movs	r0, r3
 80106d0:	f7ff fb23 	bl	800fd1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80106d4:	4b0b      	ldr	r3, [pc, #44]	; (8010704 <prvInitialiseTaskLists+0x7c>)
 80106d6:	0018      	movs	r0, r3
 80106d8:	f7ff fb1f 	bl	800fd1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80106dc:	4b0a      	ldr	r3, [pc, #40]	; (8010708 <prvInitialiseTaskLists+0x80>)
 80106de:	4a05      	ldr	r2, [pc, #20]	; (80106f4 <prvInitialiseTaskLists+0x6c>)
 80106e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80106e2:	4b0a      	ldr	r3, [pc, #40]	; (801070c <prvInitialiseTaskLists+0x84>)
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <prvInitialiseTaskLists+0x70>)
 80106e6:	601a      	str	r2, [r3, #0]
}
 80106e8:	46c0      	nop			; (mov r8, r8)
 80106ea:	46bd      	mov	sp, r7
 80106ec:	b002      	add	sp, #8
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	20000aa8 	.word	0x20000aa8
 80106f4:	20000b34 	.word	0x20000b34
 80106f8:	20000b48 	.word	0x20000b48
 80106fc:	20000b64 	.word	0x20000b64
 8010700:	20000b78 	.word	0x20000b78
 8010704:	20000b90 	.word	0x20000b90
 8010708:	20000b5c 	.word	0x20000b5c
 801070c:	20000b60 	.word	0x20000b60

08010710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010716:	e01a      	b.n	801074e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8010718:	f000 fa3a 	bl	8010b90 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801071c:	4b10      	ldr	r3, [pc, #64]	; (8010760 <prvCheckTasksWaitingTermination+0x50>)
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	3304      	adds	r3, #4
 8010728:	0018      	movs	r0, r3
 801072a:	f7ff fb77 	bl	800fe1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801072e:	4b0d      	ldr	r3, [pc, #52]	; (8010764 <prvCheckTasksWaitingTermination+0x54>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	1e5a      	subs	r2, r3, #1
 8010734:	4b0b      	ldr	r3, [pc, #44]	; (8010764 <prvCheckTasksWaitingTermination+0x54>)
 8010736:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010738:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <prvCheckTasksWaitingTermination+0x58>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	1e5a      	subs	r2, r3, #1
 801073e:	4b0a      	ldr	r3, [pc, #40]	; (8010768 <prvCheckTasksWaitingTermination+0x58>)
 8010740:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8010742:	f000 fa37 	bl	8010bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	0018      	movs	r0, r3
 801074a:	f000 f80f 	bl	801076c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801074e:	4b06      	ldr	r3, [pc, #24]	; (8010768 <prvCheckTasksWaitingTermination+0x58>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1e0      	bne.n	8010718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010756:	46c0      	nop			; (mov r8, r8)
 8010758:	46c0      	nop			; (mov r8, r8)
 801075a:	46bd      	mov	sp, r7
 801075c:	b002      	add	sp, #8
 801075e:	bd80      	pop	{r7, pc}
 8010760:	20000b78 	.word	0x20000b78
 8010764:	20000ba4 	.word	0x20000ba4
 8010768:	20000b8c 	.word	0x20000b8c

0801076c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010778:	0018      	movs	r0, r3
 801077a:	f000 fb4d 	bl	8010e18 <vPortFree>
			vPortFree( pxTCB );
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	0018      	movs	r0, r3
 8010782:	f000 fb49 	bl	8010e18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010786:	46c0      	nop			; (mov r8, r8)
 8010788:	46bd      	mov	sp, r7
 801078a:	b002      	add	sp, #8
 801078c:	bd80      	pop	{r7, pc}
	...

08010790 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010796:	4b0b      	ldr	r3, [pc, #44]	; (80107c4 <prvResetNextTaskUnblockTime+0x34>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d104      	bne.n	80107aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80107a0:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <prvResetNextTaskUnblockTime+0x38>)
 80107a2:	2201      	movs	r2, #1
 80107a4:	4252      	negs	r2, r2
 80107a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80107a8:	e008      	b.n	80107bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107aa:	4b06      	ldr	r3, [pc, #24]	; (80107c4 <prvResetNextTaskUnblockTime+0x34>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	685a      	ldr	r2, [r3, #4]
 80107b8:	4b03      	ldr	r3, [pc, #12]	; (80107c8 <prvResetNextTaskUnblockTime+0x38>)
 80107ba:	601a      	str	r2, [r3, #0]
}
 80107bc:	46c0      	nop			; (mov r8, r8)
 80107be:	46bd      	mov	sp, r7
 80107c0:	b002      	add	sp, #8
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	20000b5c 	.word	0x20000b5c
 80107c8:	20000bc4 	.word	0x20000bc4

080107cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80107d2:	4b0a      	ldr	r3, [pc, #40]	; (80107fc <xTaskGetSchedulerState+0x30>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d102      	bne.n	80107e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80107da:	2301      	movs	r3, #1
 80107dc:	607b      	str	r3, [r7, #4]
 80107de:	e008      	b.n	80107f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107e0:	4b07      	ldr	r3, [pc, #28]	; (8010800 <xTaskGetSchedulerState+0x34>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80107e8:	2302      	movs	r3, #2
 80107ea:	607b      	str	r3, [r7, #4]
 80107ec:	e001      	b.n	80107f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80107ee:	2300      	movs	r3, #0
 80107f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80107f2:	687b      	ldr	r3, [r7, #4]
	}
 80107f4:	0018      	movs	r0, r3
 80107f6:	46bd      	mov	sp, r7
 80107f8:	b002      	add	sp, #8
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	20000bb0 	.word	0x20000bb0
 8010800:	20000bcc 	.word	0x20000bcc

08010804 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801080e:	f000 f9bf 	bl	8010b90 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010812:	4b1c      	ldr	r3, [pc, #112]	; (8010884 <ulTaskNotifyTake+0x80>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10e      	bne.n	801083a <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801081c:	4b19      	ldr	r3, [pc, #100]	; (8010884 <ulTaskNotifyTake+0x80>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2250      	movs	r2, #80	; 0x50
 8010822:	2101      	movs	r1, #1
 8010824:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d006      	beq.n	801083a <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2101      	movs	r1, #1
 8010830:	0018      	movs	r0, r3
 8010832:	f000 f8bd 	bl	80109b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010836:	f000 f99b 	bl	8010b70 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801083a:	f000 f9bb 	bl	8010bb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801083e:	f000 f9a7 	bl	8010b90 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010842:	4b10      	ldr	r3, [pc, #64]	; (8010884 <ulTaskNotifyTake+0x80>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010848:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00c      	beq.n	801086a <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d004      	beq.n	8010860 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010856:	4b0b      	ldr	r3, [pc, #44]	; (8010884 <ulTaskNotifyTake+0x80>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2200      	movs	r2, #0
 801085c:	64da      	str	r2, [r3, #76]	; 0x4c
 801085e:	e004      	b.n	801086a <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010860:	4b08      	ldr	r3, [pc, #32]	; (8010884 <ulTaskNotifyTake+0x80>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	3a01      	subs	r2, #1
 8010868:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801086a:	4b06      	ldr	r3, [pc, #24]	; (8010884 <ulTaskNotifyTake+0x80>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2250      	movs	r2, #80	; 0x50
 8010870:	2100      	movs	r1, #0
 8010872:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8010874:	f000 f99e 	bl	8010bb4 <vPortExitCritical>

		return ulReturn;
 8010878:	68fb      	ldr	r3, [r7, #12]
	}
 801087a:	0018      	movs	r0, r3
 801087c:	46bd      	mov	sp, r7
 801087e:	b004      	add	sp, #16
 8010880:	bd80      	pop	{r7, pc}
 8010882:	46c0      	nop			; (mov r8, r8)
 8010884:	20000aa4 	.word	0x20000aa4

08010888 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af00      	add	r7, sp, #0
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	603b      	str	r3, [r7, #0]
 8010894:	1dfb      	adds	r3, r7, #7
 8010896:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010898:	2301      	movs	r3, #1
 801089a:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d101      	bne.n	80108a6 <xTaskGenericNotify+0x1e>
 80108a2:	b672      	cpsid	i
 80108a4:	e7fe      	b.n	80108a4 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 80108aa:	f000 f971 	bl	8010b90 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80108bc:	2317      	movs	r3, #23
 80108be:	18fb      	adds	r3, r7, r3
 80108c0:	69ba      	ldr	r2, [r7, #24]
 80108c2:	2150      	movs	r1, #80	; 0x50
 80108c4:	5c52      	ldrb	r2, [r2, r1]
 80108c6:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	2250      	movs	r2, #80	; 0x50
 80108cc:	2102      	movs	r1, #2
 80108ce:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80108d0:	1dfb      	adds	r3, r7, #7
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	2b04      	cmp	r3, #4
 80108d6:	d821      	bhi.n	801091c <xTaskGenericNotify+0x94>
 80108d8:	009a      	lsls	r2, r3, #2
 80108da:	4b31      	ldr	r3, [pc, #196]	; (80109a0 <xTaskGenericNotify+0x118>)
 80108dc:	18d3      	adds	r3, r2, r3
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	431a      	orrs	r2, r3
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80108ee:	e01e      	b.n	801092e <xTaskGenericNotify+0xa6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80108fa:	e018      	b.n	801092e <xTaskGenericNotify+0xa6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8010902:	e014      	b.n	801092e <xTaskGenericNotify+0xa6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010904:	2317      	movs	r3, #23
 8010906:	18fb      	adds	r3, r7, r3
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b02      	cmp	r3, #2
 801090c:	d003      	beq.n	8010916 <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010914:	e00b      	b.n	801092e <xTaskGenericNotify+0xa6>
						xReturn = pdFAIL;
 8010916:	2300      	movs	r3, #0
 8010918:	61fb      	str	r3, [r7, #28]
					break;
 801091a:	e008      	b.n	801092e <xTaskGenericNotify+0xa6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010920:	3301      	adds	r3, #1
 8010922:	d003      	beq.n	801092c <xTaskGenericNotify+0xa4>
 8010924:	b672      	cpsid	i
 8010926:	e7fe      	b.n	8010926 <xTaskGenericNotify+0x9e>
					break;
 8010928:	46c0      	nop			; (mov r8, r8)
 801092a:	e000      	b.n	801092e <xTaskGenericNotify+0xa6>

					break;
 801092c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801092e:	2317      	movs	r3, #23
 8010930:	18fb      	adds	r3, r7, r3
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	2b01      	cmp	r3, #1
 8010936:	d12b      	bne.n	8010990 <xTaskGenericNotify+0x108>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	3304      	adds	r3, #4
 801093c:	0018      	movs	r0, r3
 801093e:	f7ff fa6d 	bl	800fe1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010946:	4b17      	ldr	r3, [pc, #92]	; (80109a4 <xTaskGenericNotify+0x11c>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d903      	bls.n	8010956 <xTaskGenericNotify+0xce>
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010952:	4b14      	ldr	r3, [pc, #80]	; (80109a4 <xTaskGenericNotify+0x11c>)
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095a:	0013      	movs	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	189b      	adds	r3, r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	4a11      	ldr	r2, [pc, #68]	; (80109a8 <xTaskGenericNotify+0x120>)
 8010964:	189a      	adds	r2, r3, r2
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	3304      	adds	r3, #4
 801096a:	0019      	movs	r1, r3
 801096c:	0010      	movs	r0, r2
 801096e:	f7ff f9fd 	bl	800fd6c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010976:	2b00      	cmp	r3, #0
 8010978:	d001      	beq.n	801097e <xTaskGenericNotify+0xf6>
 801097a:	b672      	cpsid	i
 801097c:	e7fe      	b.n	801097c <xTaskGenericNotify+0xf4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010982:	4b0a      	ldr	r3, [pc, #40]	; (80109ac <xTaskGenericNotify+0x124>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010988:	429a      	cmp	r2, r3
 801098a:	d901      	bls.n	8010990 <xTaskGenericNotify+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801098c:	f000 f8f0 	bl	8010b70 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010990:	f000 f910 	bl	8010bb4 <vPortExitCritical>

		return xReturn;
 8010994:	69fb      	ldr	r3, [r7, #28]
	}
 8010996:	0018      	movs	r0, r3
 8010998:	46bd      	mov	sp, r7
 801099a:	b008      	add	sp, #32
 801099c:	bd80      	pop	{r7, pc}
 801099e:	46c0      	nop			; (mov r8, r8)
 80109a0:	08014e94 	.word	0x08014e94
 80109a4:	20000bac 	.word	0x20000bac
 80109a8:	20000aa8 	.word	0x20000aa8
 80109ac:	20000aa4 	.word	0x20000aa4

080109b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109ba:	4b21      	ldr	r3, [pc, #132]	; (8010a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109c0:	4b20      	ldr	r3, [pc, #128]	; (8010a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	3304      	adds	r3, #4
 80109c6:	0018      	movs	r0, r3
 80109c8:	f7ff fa28 	bl	800fe1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3301      	adds	r3, #1
 80109d0:	d10b      	bne.n	80109ea <prvAddCurrentTaskToDelayedList+0x3a>
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d008      	beq.n	80109ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109d8:	4b1a      	ldr	r3, [pc, #104]	; (8010a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	1d1a      	adds	r2, r3, #4
 80109de:	4b1a      	ldr	r3, [pc, #104]	; (8010a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80109e0:	0011      	movs	r1, r2
 80109e2:	0018      	movs	r0, r3
 80109e4:	f7ff f9c2 	bl	800fd6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80109e8:	e026      	b.n	8010a38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	18d3      	adds	r3, r2, r3
 80109f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80109f2:	4b14      	ldr	r3, [pc, #80]	; (8010a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d209      	bcs.n	8010a16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a02:	4b12      	ldr	r3, [pc, #72]	; (8010a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	4b0f      	ldr	r3, [pc, #60]	; (8010a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	0019      	movs	r1, r3
 8010a0e:	0010      	movs	r0, r2
 8010a10:	f7ff f9ce 	bl	800fdb0 <vListInsert>
}
 8010a14:	e010      	b.n	8010a38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a16:	4b0e      	ldr	r3, [pc, #56]	; (8010a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	4b0a      	ldr	r3, [pc, #40]	; (8010a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3304      	adds	r3, #4
 8010a20:	0019      	movs	r1, r3
 8010a22:	0010      	movs	r0, r2
 8010a24:	f7ff f9c4 	bl	800fdb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a28:	4b0a      	ldr	r3, [pc, #40]	; (8010a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	68ba      	ldr	r2, [r7, #8]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d202      	bcs.n	8010a38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a32:	4b08      	ldr	r3, [pc, #32]	; (8010a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	601a      	str	r2, [r3, #0]
}
 8010a38:	46c0      	nop			; (mov r8, r8)
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	b004      	add	sp, #16
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	20000ba8 	.word	0x20000ba8
 8010a44:	20000aa4 	.word	0x20000aa4
 8010a48:	20000b90 	.word	0x20000b90
 8010a4c:	20000b60 	.word	0x20000b60
 8010a50:	20000b5c 	.word	0x20000b5c
 8010a54:	20000bc4 	.word	0x20000bc4

08010a58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3b04      	subs	r3, #4
 8010a68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2280      	movs	r2, #128	; 0x80
 8010a6e:	0452      	lsls	r2, r2, #17
 8010a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	3b04      	subs	r3, #4
 8010a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	3b04      	subs	r3, #4
 8010a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010a84:	4a08      	ldr	r2, [pc, #32]	; (8010aa8 <pxPortInitialiseStack+0x50>)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	3b14      	subs	r3, #20
 8010a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	3b20      	subs	r3, #32
 8010a9a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
}
 8010a9e:	0018      	movs	r0, r3
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	b004      	add	sp, #16
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	46c0      	nop			; (mov r8, r8)
 8010aa8:	08010aad 	.word	0x08010aad

08010aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ab6:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <prvTaskExitError+0x2c>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	d001      	beq.n	8010ac2 <prvTaskExitError+0x16>
 8010abe:	b672      	cpsid	i
 8010ac0:	e7fe      	b.n	8010ac0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8010ac2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8010ac4:	46c0      	nop			; (mov r8, r8)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0fc      	beq.n	8010ac6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010acc:	46c0      	nop			; (mov r8, r8)
 8010ace:	46c0      	nop			; (mov r8, r8)
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	b002      	add	sp, #8
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	46c0      	nop			; (mov r8, r8)
 8010ad8:	200002c8 	.word	0x200002c8

08010adc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010ae0:	46c0      	nop			; (mov r8, r8)
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
	...

08010af0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010af0:	4a0b      	ldr	r2, [pc, #44]	; (8010b20 <pxCurrentTCBConst2>)
 8010af2:	6813      	ldr	r3, [r2, #0]
 8010af4:	6818      	ldr	r0, [r3, #0]
 8010af6:	3020      	adds	r0, #32
 8010af8:	f380 8809 	msr	PSP, r0
 8010afc:	2002      	movs	r0, #2
 8010afe:	f380 8814 	msr	CONTROL, r0
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010b08:	46ae      	mov	lr, r5
 8010b0a:	bc08      	pop	{r3}
 8010b0c:	bc04      	pop	{r2}
 8010b0e:	b662      	cpsie	i
 8010b10:	4718      	bx	r3
 8010b12:	46c0      	nop			; (mov r8, r8)
 8010b14:	46c0      	nop			; (mov r8, r8)
 8010b16:	46c0      	nop			; (mov r8, r8)
 8010b18:	46c0      	nop			; (mov r8, r8)
 8010b1a:	46c0      	nop			; (mov r8, r8)
 8010b1c:	46c0      	nop			; (mov r8, r8)
 8010b1e:	46c0      	nop			; (mov r8, r8)

08010b20 <pxCurrentTCBConst2>:
 8010b20:	20000aa4 	.word	0x20000aa4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8010b24:	46c0      	nop			; (mov r8, r8)
 8010b26:	46c0      	nop			; (mov r8, r8)

08010b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b2c:	4b0e      	ldr	r3, [pc, #56]	; (8010b68 <xPortStartScheduler+0x40>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	4b0d      	ldr	r3, [pc, #52]	; (8010b68 <xPortStartScheduler+0x40>)
 8010b32:	21ff      	movs	r1, #255	; 0xff
 8010b34:	0409      	lsls	r1, r1, #16
 8010b36:	430a      	orrs	r2, r1
 8010b38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b3a:	4b0b      	ldr	r3, [pc, #44]	; (8010b68 <xPortStartScheduler+0x40>)
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	4b0a      	ldr	r3, [pc, #40]	; (8010b68 <xPortStartScheduler+0x40>)
 8010b40:	21ff      	movs	r1, #255	; 0xff
 8010b42:	0609      	lsls	r1, r1, #24
 8010b44:	430a      	orrs	r2, r1
 8010b46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b48:	f000 f898 	bl	8010c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b4c:	4b07      	ldr	r3, [pc, #28]	; (8010b6c <xPortStartScheduler+0x44>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8010b52:	f7ff ffcd 	bl	8010af0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b56:	f7ff fd35 	bl	80105c4 <vTaskSwitchContext>
	prvTaskExitError();
 8010b5a:	f7ff ffa7 	bl	8010aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	0018      	movs	r0, r3
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	46c0      	nop			; (mov r8, r8)
 8010b68:	e000ed20 	.word	0xe000ed20
 8010b6c:	200002c8 	.word	0x200002c8

08010b70 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b74:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <vPortYield+0x1c>)
 8010b76:	2280      	movs	r2, #128	; 0x80
 8010b78:	0552      	lsls	r2, r2, #21
 8010b7a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8010b7c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010b80:	f3bf 8f6f 	isb	sy
}
 8010b84:	46c0      	nop			; (mov r8, r8)
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	46c0      	nop			; (mov r8, r8)
 8010b8c:	e000ed04 	.word	0xe000ed04

08010b90 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8010b94:	b672      	cpsid	i
	uxCriticalNesting++;
 8010b96:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <vPortEnterCritical+0x20>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	1c5a      	adds	r2, r3, #1
 8010b9c:	4b04      	ldr	r3, [pc, #16]	; (8010bb0 <vPortEnterCritical+0x20>)
 8010b9e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010ba0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010ba4:	f3bf 8f6f 	isb	sy
}
 8010ba8:	46c0      	nop			; (mov r8, r8)
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	46c0      	nop			; (mov r8, r8)
 8010bb0:	200002c8 	.word	0x200002c8

08010bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010bb8:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <vPortExitCritical+0x2c>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <vPortExitCritical+0x10>
 8010bc0:	b672      	cpsid	i
 8010bc2:	e7fe      	b.n	8010bc2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8010bc4:	4b06      	ldr	r3, [pc, #24]	; (8010be0 <vPortExitCritical+0x2c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	1e5a      	subs	r2, r3, #1
 8010bca:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <vPortExitCritical+0x2c>)
 8010bcc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8010bce:	4b04      	ldr	r3, [pc, #16]	; (8010be0 <vPortExitCritical+0x2c>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d100      	bne.n	8010bd8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8010bd6:	b662      	cpsie	i
	}
}
 8010bd8:	46c0      	nop			; (mov r8, r8)
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	46c0      	nop			; (mov r8, r8)
 8010be0:	200002c8 	.word	0x200002c8

08010be4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010be4:	f3ef 8010 	mrs	r0, PRIMASK
 8010be8:	b672      	cpsid	i
 8010bea:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010bec:	46c0      	nop			; (mov r8, r8)
 8010bee:	0018      	movs	r0, r3

08010bf0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010bf0:	f380 8810 	msr	PRIMASK, r0
 8010bf4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8010bf6:	46c0      	nop			; (mov r8, r8)
	...

08010c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c00:	f3ef 8009 	mrs	r0, PSP
 8010c04:	4b0e      	ldr	r3, [pc, #56]	; (8010c40 <pxCurrentTCBConst>)
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	3820      	subs	r0, #32
 8010c0a:	6010      	str	r0, [r2, #0]
 8010c0c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010c0e:	4644      	mov	r4, r8
 8010c10:	464d      	mov	r5, r9
 8010c12:	4656      	mov	r6, sl
 8010c14:	465f      	mov	r7, fp
 8010c16:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010c18:	b508      	push	{r3, lr}
 8010c1a:	b672      	cpsid	i
 8010c1c:	f7ff fcd2 	bl	80105c4 <vTaskSwitchContext>
 8010c20:	b662      	cpsie	i
 8010c22:	bc0c      	pop	{r2, r3}
 8010c24:	6811      	ldr	r1, [r2, #0]
 8010c26:	6808      	ldr	r0, [r1, #0]
 8010c28:	3010      	adds	r0, #16
 8010c2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010c2c:	46a0      	mov	r8, r4
 8010c2e:	46a9      	mov	r9, r5
 8010c30:	46b2      	mov	sl, r6
 8010c32:	46bb      	mov	fp, r7
 8010c34:	f380 8809 	msr	PSP, r0
 8010c38:	3820      	subs	r0, #32
 8010c3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010c3c:	4718      	bx	r3
 8010c3e:	46c0      	nop			; (mov r8, r8)

08010c40 <pxCurrentTCBConst>:
 8010c40:	20000aa4 	.word	0x20000aa4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8010c44:	46c0      	nop			; (mov r8, r8)
 8010c46:	46c0      	nop			; (mov r8, r8)

08010c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c4e:	f7ff ffc9 	bl	8010be4 <ulSetInterruptMaskFromISR>
 8010c52:	0003      	movs	r3, r0
 8010c54:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c56:	f7ff fc05 	bl	8010464 <xTaskIncrementTick>
 8010c5a:	1e03      	subs	r3, r0, #0
 8010c5c:	d003      	beq.n	8010c66 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c5e:	4b06      	ldr	r3, [pc, #24]	; (8010c78 <xPortSysTickHandler+0x30>)
 8010c60:	2280      	movs	r2, #128	; 0x80
 8010c62:	0552      	lsls	r2, r2, #21
 8010c64:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	0018      	movs	r0, r3
 8010c6a:	f7ff ffc1 	bl	8010bf0 <vClearInterruptMaskFromISR>
}
 8010c6e:	46c0      	nop			; (mov r8, r8)
 8010c70:	46bd      	mov	sp, r7
 8010c72:	b002      	add	sp, #8
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	46c0      	nop			; (mov r8, r8)
 8010c78:	e000ed04 	.word	0xe000ed04

08010c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c80:	4b0b      	ldr	r3, [pc, #44]	; (8010cb0 <vPortSetupTimerInterrupt+0x34>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c86:	4b0b      	ldr	r3, [pc, #44]	; (8010cb4 <vPortSetupTimerInterrupt+0x38>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c8c:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <vPortSetupTimerInterrupt+0x3c>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	22fa      	movs	r2, #250	; 0xfa
 8010c92:	0091      	lsls	r1, r2, #2
 8010c94:	0018      	movs	r0, r3
 8010c96:	f7ef fa53 	bl	8000140 <__udivsi3>
 8010c9a:	0003      	movs	r3, r0
 8010c9c:	001a      	movs	r2, r3
 8010c9e:	4b07      	ldr	r3, [pc, #28]	; (8010cbc <vPortSetupTimerInterrupt+0x40>)
 8010ca0:	3a01      	subs	r2, #1
 8010ca2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8010ca4:	4b02      	ldr	r3, [pc, #8]	; (8010cb0 <vPortSetupTimerInterrupt+0x34>)
 8010ca6:	2207      	movs	r2, #7
 8010ca8:	601a      	str	r2, [r3, #0]
}
 8010caa:	46c0      	nop			; (mov r8, r8)
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	e000e010 	.word	0xe000e010
 8010cb4:	e000e018 	.word	0xe000e018
 8010cb8:	20000000 	.word	0x20000000
 8010cbc:	e000e014 	.word	0xe000e014

08010cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010ccc:	f7ff fb32 	bl	8010334 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010cd0:	4b4b      	ldr	r3, [pc, #300]	; (8010e00 <pvPortMalloc+0x140>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d101      	bne.n	8010cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010cd8:	f000 f8ec 	bl	8010eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010cdc:	4b49      	ldr	r3, [pc, #292]	; (8010e04 <pvPortMalloc+0x144>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	4013      	ands	r3, r2
 8010ce4:	d000      	beq.n	8010ce8 <pvPortMalloc+0x28>
 8010ce6:	e07e      	b.n	8010de6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d012      	beq.n	8010d14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010cee:	2208      	movs	r2, #8
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	189b      	adds	r3, r3, r2
 8010cf4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2207      	movs	r2, #7
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	d00a      	beq.n	8010d14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2207      	movs	r2, #7
 8010d02:	4393      	bics	r3, r2
 8010d04:	3308      	adds	r3, #8
 8010d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2207      	movs	r2, #7
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	d001      	beq.n	8010d14 <pvPortMalloc+0x54>
 8010d10:	b672      	cpsid	i
 8010d12:	e7fe      	b.n	8010d12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d065      	beq.n	8010de6 <pvPortMalloc+0x126>
 8010d1a:	4b3b      	ldr	r3, [pc, #236]	; (8010e08 <pvPortMalloc+0x148>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d860      	bhi.n	8010de6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d24:	4b39      	ldr	r3, [pc, #228]	; (8010e0c <pvPortMalloc+0x14c>)
 8010d26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010d28:	4b38      	ldr	r3, [pc, #224]	; (8010e0c <pvPortMalloc+0x14c>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d2e:	e004      	b.n	8010d3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d903      	bls.n	8010d4c <pvPortMalloc+0x8c>
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d1f1      	bne.n	8010d30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d4c:	4b2c      	ldr	r3, [pc, #176]	; (8010e00 <pvPortMalloc+0x140>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d047      	beq.n	8010de6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2208      	movs	r2, #8
 8010d5c:	189b      	adds	r3, r3, r2
 8010d5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	1ad2      	subs	r2, r2, r3
 8010d70:	2308      	movs	r3, #8
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d916      	bls.n	8010da6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	18d3      	adds	r3, r2, r3
 8010d7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2207      	movs	r2, #7
 8010d84:	4013      	ands	r3, r2
 8010d86:	d001      	beq.n	8010d8c <pvPortMalloc+0xcc>
 8010d88:	b672      	cpsid	i
 8010d8a:	e7fe      	b.n	8010d8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	685a      	ldr	r2, [r3, #4]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	1ad2      	subs	r2, r2, r3
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	0018      	movs	r0, r3
 8010da2:	f000 f8e7 	bl	8010f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010da6:	4b18      	ldr	r3, [pc, #96]	; (8010e08 <pvPortMalloc+0x148>)
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	1ad2      	subs	r2, r2, r3
 8010db0:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <pvPortMalloc+0x148>)
 8010db2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010db4:	4b14      	ldr	r3, [pc, #80]	; (8010e08 <pvPortMalloc+0x148>)
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	4b15      	ldr	r3, [pc, #84]	; (8010e10 <pvPortMalloc+0x150>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d203      	bcs.n	8010dc8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010dc0:	4b11      	ldr	r3, [pc, #68]	; (8010e08 <pvPortMalloc+0x148>)
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	4b12      	ldr	r3, [pc, #72]	; (8010e10 <pvPortMalloc+0x150>)
 8010dc6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	685a      	ldr	r2, [r3, #4]
 8010dcc:	4b0d      	ldr	r3, [pc, #52]	; (8010e04 <pvPortMalloc+0x144>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	431a      	orrs	r2, r3
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010ddc:	4b0d      	ldr	r3, [pc, #52]	; (8010e14 <pvPortMalloc+0x154>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	1c5a      	adds	r2, r3, #1
 8010de2:	4b0c      	ldr	r3, [pc, #48]	; (8010e14 <pvPortMalloc+0x154>)
 8010de4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010de6:	f7ff fab1 	bl	801034c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2207      	movs	r2, #7
 8010dee:	4013      	ands	r3, r2
 8010df0:	d001      	beq.n	8010df6 <pvPortMalloc+0x136>
 8010df2:	b672      	cpsid	i
 8010df4:	e7fe      	b.n	8010df4 <pvPortMalloc+0x134>
	return pvReturn;
 8010df6:	68fb      	ldr	r3, [r7, #12]
}
 8010df8:	0018      	movs	r0, r3
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	b006      	add	sp, #24
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	20008108 	.word	0x20008108
 8010e04:	2000811c 	.word	0x2000811c
 8010e08:	2000810c 	.word	0x2000810c
 8010e0c:	20008100 	.word	0x20008100
 8010e10:	20008110 	.word	0x20008110
 8010e14:	20008114 	.word	0x20008114

08010e18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d03a      	beq.n	8010ea0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e2a:	2308      	movs	r3, #8
 8010e2c:	425b      	negs	r3, r3
 8010e2e:	68fa      	ldr	r2, [r7, #12]
 8010e30:	18d3      	adds	r3, r2, r3
 8010e32:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	685a      	ldr	r2, [r3, #4]
 8010e3c:	4b1a      	ldr	r3, [pc, #104]	; (8010ea8 <vPortFree+0x90>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4013      	ands	r3, r2
 8010e42:	d101      	bne.n	8010e48 <vPortFree+0x30>
 8010e44:	b672      	cpsid	i
 8010e46:	e7fe      	b.n	8010e46 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d001      	beq.n	8010e54 <vPortFree+0x3c>
 8010e50:	b672      	cpsid	i
 8010e52:	e7fe      	b.n	8010e52 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	685a      	ldr	r2, [r3, #4]
 8010e58:	4b13      	ldr	r3, [pc, #76]	; (8010ea8 <vPortFree+0x90>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	d01f      	beq.n	8010ea0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d11b      	bne.n	8010ea0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	4b0e      	ldr	r3, [pc, #56]	; (8010ea8 <vPortFree+0x90>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	43db      	mvns	r3, r3
 8010e72:	401a      	ands	r2, r3
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e78:	f7ff fa5c 	bl	8010334 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <vPortFree+0x94>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	18d2      	adds	r2, r2, r3
 8010e86:	4b09      	ldr	r3, [pc, #36]	; (8010eac <vPortFree+0x94>)
 8010e88:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	f000 f871 	bl	8010f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010e92:	4b07      	ldr	r3, [pc, #28]	; (8010eb0 <vPortFree+0x98>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	1c5a      	adds	r2, r3, #1
 8010e98:	4b05      	ldr	r3, [pc, #20]	; (8010eb0 <vPortFree+0x98>)
 8010e9a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8010e9c:	f7ff fa56 	bl	801034c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ea0:	46c0      	nop			; (mov r8, r8)
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	b004      	add	sp, #16
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	2000811c 	.word	0x2000811c
 8010eac:	2000810c 	.word	0x2000810c
 8010eb0:	20008118 	.word	0x20008118

08010eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010eba:	4b27      	ldr	r3, [pc, #156]	; (8010f58 <prvHeapInit+0xa4>)
 8010ebc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010ebe:	4b27      	ldr	r3, [pc, #156]	; (8010f5c <prvHeapInit+0xa8>)
 8010ec0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2207      	movs	r2, #7
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	d00c      	beq.n	8010ee4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	3307      	adds	r3, #7
 8010ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2207      	movs	r2, #7
 8010ed4:	4393      	bics	r3, r2
 8010ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	1ad2      	subs	r2, r2, r3
 8010ede:	4b1f      	ldr	r3, [pc, #124]	; (8010f5c <prvHeapInit+0xa8>)
 8010ee0:	18d3      	adds	r3, r2, r3
 8010ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010ee8:	4b1d      	ldr	r3, [pc, #116]	; (8010f60 <prvHeapInit+0xac>)
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010eee:	4b1c      	ldr	r3, [pc, #112]	; (8010f60 <prvHeapInit+0xac>)
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	18d3      	adds	r3, r2, r3
 8010efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010efc:	2208      	movs	r2, #8
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	1a9b      	subs	r3, r3, r2
 8010f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2207      	movs	r2, #7
 8010f08:	4393      	bics	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <prvHeapInit+0xb0>)
 8010f10:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8010f12:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <prvHeapInit+0xb0>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	2200      	movs	r2, #0
 8010f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f1a:	4b12      	ldr	r3, [pc, #72]	; (8010f64 <prvHeapInit+0xb0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	1ad2      	subs	r2, r2, r3
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f30:	4b0c      	ldr	r3, [pc, #48]	; (8010f64 <prvHeapInit+0xb0>)
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	685a      	ldr	r2, [r3, #4]
 8010f3c:	4b0a      	ldr	r3, [pc, #40]	; (8010f68 <prvHeapInit+0xb4>)
 8010f3e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	4b09      	ldr	r3, [pc, #36]	; (8010f6c <prvHeapInit+0xb8>)
 8010f46:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010f48:	4b09      	ldr	r3, [pc, #36]	; (8010f70 <prvHeapInit+0xbc>)
 8010f4a:	2280      	movs	r2, #128	; 0x80
 8010f4c:	0612      	lsls	r2, r2, #24
 8010f4e:	601a      	str	r2, [r3, #0]
}
 8010f50:	46c0      	nop			; (mov r8, r8)
 8010f52:	46bd      	mov	sp, r7
 8010f54:	b004      	add	sp, #16
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	00007530 	.word	0x00007530
 8010f5c:	20000bd0 	.word	0x20000bd0
 8010f60:	20008100 	.word	0x20008100
 8010f64:	20008108 	.word	0x20008108
 8010f68:	20008110 	.word	0x20008110
 8010f6c:	2000810c 	.word	0x2000810c
 8010f70:	2000811c 	.word	0x2000811c

08010f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f7c:	4b27      	ldr	r3, [pc, #156]	; (801101c <prvInsertBlockIntoFreeList+0xa8>)
 8010f7e:	60fb      	str	r3, [r7, #12]
 8010f80:	e002      	b.n	8010f88 <prvInsertBlockIntoFreeList+0x14>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	60fb      	str	r3, [r7, #12]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d8f7      	bhi.n	8010f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	68ba      	ldr	r2, [r7, #8]
 8010f9c:	18d3      	adds	r3, r2, r3
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d108      	bne.n	8010fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	18d2      	adds	r2, r2, r3
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	18d2      	adds	r2, r2, r3
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d118      	bne.n	8010ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	4b14      	ldr	r3, [pc, #80]	; (8011020 <prvInsertBlockIntoFreeList+0xac>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d00d      	beq.n	8010ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	685a      	ldr	r2, [r3, #4]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	18d2      	adds	r2, r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	601a      	str	r2, [r3, #0]
 8010ff0:	e008      	b.n	8011004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010ff2:	4b0b      	ldr	r3, [pc, #44]	; (8011020 <prvInsertBlockIntoFreeList+0xac>)
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	601a      	str	r2, [r3, #0]
 8010ffa:	e003      	b.n	8011004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	429a      	cmp	r2, r3
 801100a:	d002      	beq.n	8011012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	687a      	ldr	r2, [r7, #4]
 8011010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011012:	46c0      	nop			; (mov r8, r8)
 8011014:	46bd      	mov	sp, r7
 8011016:	b004      	add	sp, #16
 8011018:	bd80      	pop	{r7, pc}
 801101a:	46c0      	nop			; (mov r8, r8)
 801101c:	20008100 	.word	0x20008100
 8011020:	20008108 	.word	0x20008108

08011024 <initialisation_mesure_capteur>:
	}
	HAL_GPIO_WritePin(GPIOB, GPIO1_Pin, state);
	HAL_GPIO_WritePin(GPIOB, XSHUT_Pin, state);
}

void initialisation_mesure_capteur(){
 8011024:	b580      	push	{r7, lr}
 8011026:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 2 */
	//HAL_UART_Transmit(&huart1, "TEST2 ",6,100);
	//HAL_Delay(500);

	Message_Size = sizeof(intro);
 8011028:	4b3a      	ldr	r3, [pc, #232]	; (8011114 <initialisation_mesure_capteur+0xf0>)
 801102a:	221c      	movs	r2, #28
 801102c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, intro, Message_Size, 100);
 801102e:	4b39      	ldr	r3, [pc, #228]	; (8011114 <initialisation_mesure_capteur+0xf0>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	b29a      	uxth	r2, r3
 8011034:	4938      	ldr	r1, [pc, #224]	; (8011118 <initialisation_mesure_capteur+0xf4>)
 8011036:	4839      	ldr	r0, [pc, #228]	; (801111c <initialisation_mesure_capteur+0xf8>)
 8011038:	2364      	movs	r3, #100	; 0x64
 801103a:	f7f7 fca9 	bl	8008990 <HAL_UART_Transmit>

	Dev->I2cHandle = &hi2c2;
 801103e:	4b38      	ldr	r3, [pc, #224]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	23ae      	movs	r3, #174	; 0xae
 8011044:	005b      	lsls	r3, r3, #1
 8011046:	4937      	ldr	r1, [pc, #220]	; (8011124 <initialisation_mesure_capteur+0x100>)
 8011048:	50d1      	str	r1, [r2, r3]
	Dev->I2cDevAddr = 0x52; //adresse de l'I2C dans la datasheet du VL530X
 801104a:	4b35      	ldr	r3, [pc, #212]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	23b0      	movs	r3, #176	; 0xb0
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	2152      	movs	r1, #82	; 0x52
 8011054:	54d1      	strb	r1, [r2, r3]
	//On active Le port KSHUT qui est le port permettant de recevoir les valeurs
	//HAL_GPIO_WritePin(GPIOB, XSHUT_C1_Pin, GPIO_PIN_SET); // Enable XSHUT
	//vTaskDelay(20);

	//TOF_Enable(1, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO1_C2_Pin, GPIO_PIN_SET);
 8011056:	2380      	movs	r3, #128	; 0x80
 8011058:	019b      	lsls	r3, r3, #6
 801105a:	4833      	ldr	r0, [pc, #204]	; (8011128 <initialisation_mesure_capteur+0x104>)
 801105c:	2201      	movs	r2, #1
 801105e:	0019      	movs	r1, r3
 8011060:	f7f4 fb68 	bl	8005734 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, XSHUT_C2_Pin, GPIO_PIN_SET);
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	015b      	lsls	r3, r3, #5
 8011068:	482f      	ldr	r0, [pc, #188]	; (8011128 <initialisation_mesure_capteur+0x104>)
 801106a:	2201      	movs	r2, #1
 801106c:	0019      	movs	r1, r3
 801106e:	f7f4 fb61 	bl	8005734 <HAL_GPIO_WritePin>


	//Simple mesure pour Capteur
	VL53L0X_WaitDeviceBooted(Dev);
 8011072:	4b2b      	ldr	r3, [pc, #172]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	0018      	movs	r0, r3
 8011078:	f7f9 f934 	bl	800a2e4 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 801107c:	4b28      	ldr	r3, [pc, #160]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	0018      	movs	r0, r3
 8011082:	f7f8 fdc7 	bl	8009c14 <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8011086:	4b26      	ldr	r3, [pc, #152]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	0018      	movs	r0, r3
 801108c:	f7f8 ff5c 	bl	8009f48 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8011090:	4b23      	ldr	r3, [pc, #140]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4a25      	ldr	r2, [pc, #148]	; (801112c <initialisation_mesure_capteur+0x108>)
 8011096:	4926      	ldr	r1, [pc, #152]	; (8011130 <initialisation_mesure_capteur+0x10c>)
 8011098:	0018      	movs	r0, r3
 801109a:	f7f9 ffae 	bl	800affa <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 801109e:	4b20      	ldr	r3, [pc, #128]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a24      	ldr	r2, [pc, #144]	; (8011134 <initialisation_mesure_capteur+0x110>)
 80110a4:	4924      	ldr	r1, [pc, #144]	; (8011138 <initialisation_mesure_capteur+0x114>)
 80110a6:	0018      	movs	r0, r3
 80110a8:	f7fa fd7c 	bl	800bba4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80110ac:	4b1c      	ldr	r3, [pc, #112]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	2100      	movs	r1, #0
 80110b2:	0018      	movs	r0, r3
 80110b4:	f7f9 f9de 	bl	800a474 <VL53L0X_SetDeviceMode>

	// Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80110b8:	4b19      	ldr	r3, [pc, #100]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2201      	movs	r2, #1
 80110be:	2100      	movs	r1, #0
 80110c0:	0018      	movs	r0, r3
 80110c2:	f7f9 fd05 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80110c6:	4b16      	ldr	r3, [pc, #88]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2201      	movs	r2, #1
 80110cc:	2101      	movs	r1, #1
 80110ce:	0018      	movs	r0, r3
 80110d0:	f7f9 fcfe 	bl	800aad0 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80110d4:	4b12      	ldr	r3, [pc, #72]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4a18      	ldr	r2, [pc, #96]	; (801113c <initialisation_mesure_capteur+0x118>)
 80110da:	2101      	movs	r1, #1
 80110dc:	0018      	movs	r0, r3
 80110de:	f7f9 fde3 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80110e2:	4b0f      	ldr	r3, [pc, #60]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	22f0      	movs	r2, #240	; 0xf0
 80110e8:	0392      	lsls	r2, r2, #14
 80110ea:	2100      	movs	r1, #0
 80110ec:	0018      	movs	r0, r3
 80110ee:	f7f9 fddb 	bl	800aca8 <VL53L0X_SetLimitCheckValue>
	//VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 1910);
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80110f2:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2212      	movs	r2, #18
 80110f8:	2100      	movs	r1, #0
 80110fa:	0018      	movs	r0, r3
 80110fc:	f7f9 fa58 	bl	800a5b0 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <initialisation_mesure_capteur+0xfc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	220e      	movs	r2, #14
 8011106:	2101      	movs	r1, #1
 8011108:	0018      	movs	r0, r3
 801110a:	f7f9 fa51 	bl	800a5b0 <VL53L0X_SetVcselPulsePeriod>

	/* USER CODE END 2 */

}
 801110e:	46c0      	nop			; (mov r8, r8)
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	20008169 	.word	0x20008169
 8011118:	200002cc 	.word	0x200002cc
 801111c:	20000938 	.word	0x20000938
 8011120:	200002e8 	.word	0x200002e8
 8011124:	20000764 	.word	0x20000764
 8011128:	50000400 	.word	0x50000400
 801112c:	20008126 	.word	0x20008126
 8011130:	20008125 	.word	0x20008125
 8011134:	20008124 	.word	0x20008124
 8011138:	20008120 	.word	0x20008120
 801113c:	00001999 	.word	0x00001999

08011140 <mesure_et_affichage>:

void mesure_et_affichage(){
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8011146:	4b30      	ldr	r3, [pc, #192]	; (8011208 <mesure_et_affichage+0xc8>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a30      	ldr	r2, [pc, #192]	; (801120c <mesure_et_affichage+0xcc>)
 801114c:	0011      	movs	r1, r2
 801114e:	0018      	movs	r0, r3
 8011150:	f7fa fa96 	bl	800b680 <VL53L0X_PerformSingleRangingMeasurement>
		DMaxMillimeter_size = sprintf((char*)resultat2, "RangeDMaxMillimeter: %i\n\r", RangingData.RangeDMaxMilliMeter );

		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
		HAL_UART_Transmit(&huart1, resultat2, DMaxMillimeter_size, 100);
	}*/
	if(RangingData.RangeStatus == 0){
 8011154:	4b2d      	ldr	r3, [pc, #180]	; (801120c <mesure_et_affichage+0xcc>)
 8011156:	7e1b      	ldrb	r3, [r3, #24]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d150      	bne.n	80111fe <mesure_et_affichage+0xbe>
		//Value = 0 means value is valid.
		int distance =RangingData.RangeMilliMeter;
 801115c:	4b2b      	ldr	r3, [pc, #172]	; (801120c <mesure_et_affichage+0xcc>)
 801115e:	891b      	ldrh	r3, [r3, #8]
 8011160:	607b      	str	r3, [r7, #4]

		Message_resultat_Size = sprintf((char*)Message_resultat, "Distance en millimetre: %i\n\r", distance);
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	492a      	ldr	r1, [pc, #168]	; (8011210 <mesure_et_affichage+0xd0>)
 8011166:	4b2b      	ldr	r3, [pc, #172]	; (8011214 <mesure_et_affichage+0xd4>)
 8011168:	0018      	movs	r0, r3
 801116a:	f000 fe03 	bl	8011d74 <siprintf>
 801116e:	0003      	movs	r3, r0
 8011170:	b2da      	uxtb	r2, r3
 8011172:	4b29      	ldr	r3, [pc, #164]	; (8011218 <mesure_et_affichage+0xd8>)
 8011174:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 8011176:	4b28      	ldr	r3, [pc, #160]	; (8011218 <mesure_et_affichage+0xd8>)
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	b29a      	uxth	r2, r3
 801117c:	4925      	ldr	r1, [pc, #148]	; (8011214 <mesure_et_affichage+0xd4>)
 801117e:	4827      	ldr	r0, [pc, #156]	; (801121c <mesure_et_affichage+0xdc>)
 8011180:	2364      	movs	r3, #100	; 0x64
 8011182:	f7f7 fc05 	bl	8008990 <HAL_UART_Transmit>

		//on a rajoute 500 pour capter la canette de plus loin
		if(distance<500){
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	23fa      	movs	r3, #250	; 0xfa
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	429a      	cmp	r2, r3
 801118e:	da20      	bge.n	80111d2 <mesure_et_affichage+0x92>
			HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
 8011190:	2380      	movs	r3, #128	; 0x80
 8011192:	015b      	lsls	r3, r3, #5
 8011194:	4822      	ldr	r0, [pc, #136]	; (8011220 <mesure_et_affichage+0xe0>)
 8011196:	2201      	movs	r2, #1
 8011198:	0019      	movs	r1, r3
 801119a:	f7f4 facb 	bl	8005734 <HAL_GPIO_WritePin>
			if(distance<125){
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b7c      	cmp	r3, #124	; 0x7c
 80111a2:	dc0e      	bgt.n	80111c2 <mesure_et_affichage+0x82>
				HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_SET);
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	011b      	lsls	r3, r3, #4
 80111a8:	481d      	ldr	r0, [pc, #116]	; (8011220 <mesure_et_affichage+0xe0>)
 80111aa:	2201      	movs	r2, #1
 80111ac:	0019      	movs	r1, r3
 80111ae:	f7f4 fac1 	bl	8005734 <HAL_GPIO_WritePin>
				xTaskNotifyGive(h_attrape);
 80111b2:	4b1c      	ldr	r3, [pc, #112]	; (8011224 <mesure_et_affichage+0xe4>)
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	2300      	movs	r3, #0
 80111b8:	2202      	movs	r2, #2
 80111ba:	2100      	movs	r1, #0
 80111bc:	f7ff fb64 	bl	8010888 <xTaskGenericNotify>


	}

	//HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
}
 80111c0:	e01d      	b.n	80111fe <mesure_et_affichage+0xbe>
				xTaskNotifyGive(h_trouve);
 80111c2:	4b19      	ldr	r3, [pc, #100]	; (8011228 <mesure_et_affichage+0xe8>)
 80111c4:	6818      	ldr	r0, [r3, #0]
 80111c6:	2300      	movs	r3, #0
 80111c8:	2202      	movs	r2, #2
 80111ca:	2100      	movs	r1, #0
 80111cc:	f7ff fb5c 	bl	8010888 <xTaskGenericNotify>
}
 80111d0:	e015      	b.n	80111fe <mesure_et_affichage+0xbe>
			HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin, GPIO_PIN_RESET);
 80111d2:	2380      	movs	r3, #128	; 0x80
 80111d4:	011b      	lsls	r3, r3, #4
 80111d6:	4812      	ldr	r0, [pc, #72]	; (8011220 <mesure_et_affichage+0xe0>)
 80111d8:	2200      	movs	r2, #0
 80111da:	0019      	movs	r1, r3
 80111dc:	f7f4 faaa 	bl	8005734 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, Message_resultat, Message_resultat_Size, 100);
 80111e0:	4b0d      	ldr	r3, [pc, #52]	; (8011218 <mesure_et_affichage+0xd8>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	490b      	ldr	r1, [pc, #44]	; (8011214 <mesure_et_affichage+0xd4>)
 80111e8:	480c      	ldr	r0, [pc, #48]	; (801121c <mesure_et_affichage+0xdc>)
 80111ea:	2364      	movs	r3, #100	; 0x64
 80111ec:	f7f7 fbd0 	bl	8008990 <HAL_UART_Transmit>
			xTaskNotifyGive(h_recherche);
 80111f0:	4b0e      	ldr	r3, [pc, #56]	; (801122c <mesure_et_affichage+0xec>)
 80111f2:	6818      	ldr	r0, [r3, #0]
 80111f4:	2300      	movs	r3, #0
 80111f6:	2202      	movs	r2, #2
 80111f8:	2100      	movs	r1, #0
 80111fa:	f7ff fb45 	bl	8010888 <xTaskGenericNotify>
}
 80111fe:	46c0      	nop			; (mov r8, r8)
 8011200:	46bd      	mov	sp, r7
 8011202:	b002      	add	sp, #8
 8011204:	bd80      	pop	{r7, pc}
 8011206:	46c0      	nop			; (mov r8, r8)
 8011208:	200002e8 	.word	0x200002e8
 801120c:	2000816c 	.word	0x2000816c
 8011210:	08014c28 	.word	0x08014c28
 8011214:	20008128 	.word	0x20008128
 8011218:	20008168 	.word	0x20008168
 801121c:	20000938 	.word	0x20000938
 8011220:	50000800 	.word	0x50000800
 8011224:	20000698 	.word	0x20000698
 8011228:	2000069c 	.word	0x2000069c
 801122c:	20000694 	.word	0x20000694

08011230 <taskTOF>:
	}
	return 0;
}

//task TOF
void taskTOF(void *pTOF){
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
	printf("Tâche TOF créée\r\n");
 8011238:	4b0e      	ldr	r3, [pc, #56]	; (8011274 <taskTOF+0x44>)
 801123a:	0018      	movs	r0, r3
 801123c:	f000 fd90 	bl	8011d60 <puts>

	//Init TOF
	initialisation_mesure_capteur();
 8011240:	f7ff fef0 	bl	8011024 <initialisation_mesure_capteur>

	int index = 0;
 8011244:	2300      	movs	r3, #0
 8011246:	60fb      	str	r3, [r7, #12]
	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8011248:	2301      	movs	r3, #1
 801124a:	425b      	negs	r3, r3
 801124c:	0019      	movs	r1, r3
 801124e:	2001      	movs	r0, #1
 8011250:	f7ff fad8 	bl	8010804 <ulTaskNotifyTake>
		index++;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	3301      	adds	r3, #1
 8011258:	60fb      	str	r3, [r7, #12]
		mesure_et_affichage();
 801125a:	f7ff ff71 	bl	8011140 <mesure_et_affichage>
		vTaskDelay(200);
 801125e:	20c8      	movs	r0, #200	; 0xc8
 8011260:	f7fe ff32 	bl	80100c8 <vTaskDelay>
		if(index==TAB_SIZE2){
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	2396      	movs	r3, #150	; 0x96
 8011268:	005b      	lsls	r3, r3, #1
 801126a:	429a      	cmp	r2, r3
 801126c:	d1ec      	bne.n	8011248 <taskTOF+0x18>
			index=0;
 801126e:	2300      	movs	r3, #0
 8011270:	60fb      	str	r3, [r7, #12]
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8011272:	e7e9      	b.n	8011248 <taskTOF+0x18>
 8011274:	08014c8c 	.word	0x08014c8c

08011278 <demo_run>:
extern TaskHandle_t h_servomotor;
extern h_motor_t h_cmd_servomotor;
extern TaskHandle_t h_tof;
extern TaskHandle_t h_recherche;

int demo_run(h_demo_t *pdemo){
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]



	vTaskDelay(1000);
 8011280:	23fa      	movs	r3, #250	; 0xfa
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	0018      	movs	r0, r3
 8011286:	f7fe ff1f 	bl	80100c8 <vTaskDelay>
	h_cmd_motor.cmd='a';
 801128a:	4b15      	ldr	r3, [pc, #84]	; (80112e0 <demo_run+0x68>)
 801128c:	2261      	movs	r2, #97	; 0x61
 801128e:	701a      	strb	r2, [r3, #0]
	h_cmd_motor.speed=250;
 8011290:	4b13      	ldr	r3, [pc, #76]	; (80112e0 <demo_run+0x68>)
 8011292:	22fa      	movs	r2, #250	; 0xfa
 8011294:	805a      	strh	r2, [r3, #2]
	xTaskNotifyGive(h_motor);
 8011296:	4b13      	ldr	r3, [pc, #76]	; (80112e4 <demo_run+0x6c>)
 8011298:	6818      	ldr	r0, [r3, #0]
 801129a:	2300      	movs	r3, #0
 801129c:	2202      	movs	r2, #2
 801129e:	2100      	movs	r1, #0
 80112a0:	f7ff faf2 	bl	8010888 <xTaskGenericNotify>
	h_cmd_servomotor.cmd='o';
 80112a4:	4b10      	ldr	r3, [pc, #64]	; (80112e8 <demo_run+0x70>)
 80112a6:	226f      	movs	r2, #111	; 0x6f
 80112a8:	701a      	strb	r2, [r3, #0]
	h_cmd_servomotor.speed=200;
 80112aa:	4b0f      	ldr	r3, [pc, #60]	; (80112e8 <demo_run+0x70>)
 80112ac:	22c8      	movs	r2, #200	; 0xc8
 80112ae:	805a      	strh	r2, [r3, #2]
	xTaskNotifyGive(h_servomotor);
 80112b0:	4b0e      	ldr	r3, [pc, #56]	; (80112ec <demo_run+0x74>)
 80112b2:	6818      	ldr	r0, [r3, #0]
 80112b4:	2300      	movs	r3, #0
 80112b6:	2202      	movs	r2, #2
 80112b8:	2100      	movs	r1, #0
 80112ba:	f7ff fae5 	bl	8010888 <xTaskGenericNotify>
	vTaskDelay(2000);
 80112be:	23fa      	movs	r3, #250	; 0xfa
 80112c0:	00db      	lsls	r3, r3, #3
 80112c2:	0018      	movs	r0, r3
 80112c4:	f7fe ff00 	bl	80100c8 <vTaskDelay>
	xTaskNotifyGive(h_motor);
	//vTaskDelay(20);
#endif

	while(1){
		xTaskNotifyGive(h_tof);
 80112c8:	4b09      	ldr	r3, [pc, #36]	; (80112f0 <demo_run+0x78>)
 80112ca:	6818      	ldr	r0, [r3, #0]
 80112cc:	2300      	movs	r3, #0
 80112ce:	2202      	movs	r2, #2
 80112d0:	2100      	movs	r1, #0
 80112d2:	f7ff fad9 	bl	8010888 <xTaskGenericNotify>
		//xTaskNotifyGive(h_recherche);
		vTaskDelay(200);
 80112d6:	20c8      	movs	r0, #200	; 0xc8
 80112d8:	f7fe fef6 	bl	80100c8 <vTaskDelay>
		xTaskNotifyGive(h_tof);
 80112dc:	e7f4      	b.n	80112c8 <demo_run+0x50>
 80112de:	46c0      	nop			; (mov r8, r8)
 80112e0:	2000068c 	.word	0x2000068c
 80112e4:	20000688 	.word	0x20000688
 80112e8:	200006a4 	.word	0x200006a4
 80112ec:	200006a0 	.word	0x200006a0
 80112f0:	20008318 	.word	0x20008318

080112f4 <__errno>:
 80112f4:	4b01      	ldr	r3, [pc, #4]	; (80112fc <__errno+0x8>)
 80112f6:	6818      	ldr	r0, [r3, #0]
 80112f8:	4770      	bx	lr
 80112fa:	46c0      	nop			; (mov r8, r8)
 80112fc:	200002ec 	.word	0x200002ec

08011300 <__libc_init_array>:
 8011300:	b570      	push	{r4, r5, r6, lr}
 8011302:	2600      	movs	r6, #0
 8011304:	4d0c      	ldr	r5, [pc, #48]	; (8011338 <__libc_init_array+0x38>)
 8011306:	4c0d      	ldr	r4, [pc, #52]	; (801133c <__libc_init_array+0x3c>)
 8011308:	1b64      	subs	r4, r4, r5
 801130a:	10a4      	asrs	r4, r4, #2
 801130c:	42a6      	cmp	r6, r4
 801130e:	d109      	bne.n	8011324 <__libc_init_array+0x24>
 8011310:	2600      	movs	r6, #0
 8011312:	f003 f85b 	bl	80143cc <_init>
 8011316:	4d0a      	ldr	r5, [pc, #40]	; (8011340 <__libc_init_array+0x40>)
 8011318:	4c0a      	ldr	r4, [pc, #40]	; (8011344 <__libc_init_array+0x44>)
 801131a:	1b64      	subs	r4, r4, r5
 801131c:	10a4      	asrs	r4, r4, #2
 801131e:	42a6      	cmp	r6, r4
 8011320:	d105      	bne.n	801132e <__libc_init_array+0x2e>
 8011322:	bd70      	pop	{r4, r5, r6, pc}
 8011324:	00b3      	lsls	r3, r6, #2
 8011326:	58eb      	ldr	r3, [r5, r3]
 8011328:	4798      	blx	r3
 801132a:	3601      	adds	r6, #1
 801132c:	e7ee      	b.n	801130c <__libc_init_array+0xc>
 801132e:	00b3      	lsls	r3, r6, #2
 8011330:	58eb      	ldr	r3, [r5, r3]
 8011332:	4798      	blx	r3
 8011334:	3601      	adds	r6, #1
 8011336:	e7f2      	b.n	801131e <__libc_init_array+0x1e>
 8011338:	08015284 	.word	0x08015284
 801133c:	08015284 	.word	0x08015284
 8011340:	08015284 	.word	0x08015284
 8011344:	08015288 	.word	0x08015288

08011348 <memcpy>:
 8011348:	2300      	movs	r3, #0
 801134a:	b510      	push	{r4, lr}
 801134c:	429a      	cmp	r2, r3
 801134e:	d100      	bne.n	8011352 <memcpy+0xa>
 8011350:	bd10      	pop	{r4, pc}
 8011352:	5ccc      	ldrb	r4, [r1, r3]
 8011354:	54c4      	strb	r4, [r0, r3]
 8011356:	3301      	adds	r3, #1
 8011358:	e7f8      	b.n	801134c <memcpy+0x4>

0801135a <memset>:
 801135a:	0003      	movs	r3, r0
 801135c:	1882      	adds	r2, r0, r2
 801135e:	4293      	cmp	r3, r2
 8011360:	d100      	bne.n	8011364 <memset+0xa>
 8011362:	4770      	bx	lr
 8011364:	7019      	strb	r1, [r3, #0]
 8011366:	3301      	adds	r3, #1
 8011368:	e7f9      	b.n	801135e <memset+0x4>

0801136a <__cvt>:
 801136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801136c:	001e      	movs	r6, r3
 801136e:	2300      	movs	r3, #0
 8011370:	0014      	movs	r4, r2
 8011372:	b08b      	sub	sp, #44	; 0x2c
 8011374:	429e      	cmp	r6, r3
 8011376:	da04      	bge.n	8011382 <__cvt+0x18>
 8011378:	2180      	movs	r1, #128	; 0x80
 801137a:	0609      	lsls	r1, r1, #24
 801137c:	1873      	adds	r3, r6, r1
 801137e:	001e      	movs	r6, r3
 8011380:	232d      	movs	r3, #45	; 0x2d
 8011382:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011384:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011386:	7013      	strb	r3, [r2, #0]
 8011388:	2320      	movs	r3, #32
 801138a:	2203      	movs	r2, #3
 801138c:	439f      	bics	r7, r3
 801138e:	2f46      	cmp	r7, #70	; 0x46
 8011390:	d007      	beq.n	80113a2 <__cvt+0x38>
 8011392:	003b      	movs	r3, r7
 8011394:	3b45      	subs	r3, #69	; 0x45
 8011396:	4259      	negs	r1, r3
 8011398:	414b      	adcs	r3, r1
 801139a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801139c:	3a01      	subs	r2, #1
 801139e:	18cb      	adds	r3, r1, r3
 80113a0:	9310      	str	r3, [sp, #64]	; 0x40
 80113a2:	ab09      	add	r3, sp, #36	; 0x24
 80113a4:	9304      	str	r3, [sp, #16]
 80113a6:	ab08      	add	r3, sp, #32
 80113a8:	9303      	str	r3, [sp, #12]
 80113aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113ac:	9200      	str	r2, [sp, #0]
 80113ae:	9302      	str	r3, [sp, #8]
 80113b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113b2:	0022      	movs	r2, r4
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	0033      	movs	r3, r6
 80113b8:	f000 fe5e 	bl	8012078 <_dtoa_r>
 80113bc:	0005      	movs	r5, r0
 80113be:	2f47      	cmp	r7, #71	; 0x47
 80113c0:	d102      	bne.n	80113c8 <__cvt+0x5e>
 80113c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113c4:	07db      	lsls	r3, r3, #31
 80113c6:	d528      	bpl.n	801141a <__cvt+0xb0>
 80113c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113ca:	18eb      	adds	r3, r5, r3
 80113cc:	9307      	str	r3, [sp, #28]
 80113ce:	2f46      	cmp	r7, #70	; 0x46
 80113d0:	d114      	bne.n	80113fc <__cvt+0x92>
 80113d2:	782b      	ldrb	r3, [r5, #0]
 80113d4:	2b30      	cmp	r3, #48	; 0x30
 80113d6:	d10c      	bne.n	80113f2 <__cvt+0x88>
 80113d8:	2200      	movs	r2, #0
 80113da:	2300      	movs	r3, #0
 80113dc:	0020      	movs	r0, r4
 80113de:	0031      	movs	r1, r6
 80113e0:	f7ef f834 	bl	800044c <__aeabi_dcmpeq>
 80113e4:	2800      	cmp	r0, #0
 80113e6:	d104      	bne.n	80113f2 <__cvt+0x88>
 80113e8:	2301      	movs	r3, #1
 80113ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80113ec:	1a9b      	subs	r3, r3, r2
 80113ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113f4:	9a07      	ldr	r2, [sp, #28]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	18d3      	adds	r3, r2, r3
 80113fa:	9307      	str	r3, [sp, #28]
 80113fc:	2200      	movs	r2, #0
 80113fe:	2300      	movs	r3, #0
 8011400:	0020      	movs	r0, r4
 8011402:	0031      	movs	r1, r6
 8011404:	f7ef f822 	bl	800044c <__aeabi_dcmpeq>
 8011408:	2800      	cmp	r0, #0
 801140a:	d001      	beq.n	8011410 <__cvt+0xa6>
 801140c:	9b07      	ldr	r3, [sp, #28]
 801140e:	9309      	str	r3, [sp, #36]	; 0x24
 8011410:	2230      	movs	r2, #48	; 0x30
 8011412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011414:	9907      	ldr	r1, [sp, #28]
 8011416:	428b      	cmp	r3, r1
 8011418:	d306      	bcc.n	8011428 <__cvt+0xbe>
 801141a:	0028      	movs	r0, r5
 801141c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801141e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011420:	1b5b      	subs	r3, r3, r5
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	b00b      	add	sp, #44	; 0x2c
 8011426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011428:	1c59      	adds	r1, r3, #1
 801142a:	9109      	str	r1, [sp, #36]	; 0x24
 801142c:	701a      	strb	r2, [r3, #0]
 801142e:	e7f0      	b.n	8011412 <__cvt+0xa8>

08011430 <__exponent>:
 8011430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011432:	1c83      	adds	r3, r0, #2
 8011434:	b087      	sub	sp, #28
 8011436:	9303      	str	r3, [sp, #12]
 8011438:	0005      	movs	r5, r0
 801143a:	000c      	movs	r4, r1
 801143c:	232b      	movs	r3, #43	; 0x2b
 801143e:	7002      	strb	r2, [r0, #0]
 8011440:	2900      	cmp	r1, #0
 8011442:	da01      	bge.n	8011448 <__exponent+0x18>
 8011444:	424c      	negs	r4, r1
 8011446:	3302      	adds	r3, #2
 8011448:	706b      	strb	r3, [r5, #1]
 801144a:	2c09      	cmp	r4, #9
 801144c:	dd31      	ble.n	80114b2 <__exponent+0x82>
 801144e:	270a      	movs	r7, #10
 8011450:	ab04      	add	r3, sp, #16
 8011452:	1dde      	adds	r6, r3, #7
 8011454:	0020      	movs	r0, r4
 8011456:	0039      	movs	r1, r7
 8011458:	9601      	str	r6, [sp, #4]
 801145a:	f7ee ffe1 	bl	8000420 <__aeabi_idivmod>
 801145e:	3e01      	subs	r6, #1
 8011460:	3130      	adds	r1, #48	; 0x30
 8011462:	0020      	movs	r0, r4
 8011464:	7031      	strb	r1, [r6, #0]
 8011466:	0039      	movs	r1, r7
 8011468:	9402      	str	r4, [sp, #8]
 801146a:	f7ee fef3 	bl	8000254 <__divsi3>
 801146e:	9b02      	ldr	r3, [sp, #8]
 8011470:	0004      	movs	r4, r0
 8011472:	2b63      	cmp	r3, #99	; 0x63
 8011474:	dcee      	bgt.n	8011454 <__exponent+0x24>
 8011476:	9b01      	ldr	r3, [sp, #4]
 8011478:	3430      	adds	r4, #48	; 0x30
 801147a:	1e9a      	subs	r2, r3, #2
 801147c:	0013      	movs	r3, r2
 801147e:	9903      	ldr	r1, [sp, #12]
 8011480:	7014      	strb	r4, [r2, #0]
 8011482:	a804      	add	r0, sp, #16
 8011484:	3007      	adds	r0, #7
 8011486:	4298      	cmp	r0, r3
 8011488:	d80e      	bhi.n	80114a8 <__exponent+0x78>
 801148a:	ab04      	add	r3, sp, #16
 801148c:	3307      	adds	r3, #7
 801148e:	2000      	movs	r0, #0
 8011490:	429a      	cmp	r2, r3
 8011492:	d804      	bhi.n	801149e <__exponent+0x6e>
 8011494:	ab04      	add	r3, sp, #16
 8011496:	3009      	adds	r0, #9
 8011498:	18c0      	adds	r0, r0, r3
 801149a:	9b01      	ldr	r3, [sp, #4]
 801149c:	1ac0      	subs	r0, r0, r3
 801149e:	9b03      	ldr	r3, [sp, #12]
 80114a0:	1818      	adds	r0, r3, r0
 80114a2:	1b40      	subs	r0, r0, r5
 80114a4:	b007      	add	sp, #28
 80114a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a8:	7818      	ldrb	r0, [r3, #0]
 80114aa:	3301      	adds	r3, #1
 80114ac:	7008      	strb	r0, [r1, #0]
 80114ae:	3101      	adds	r1, #1
 80114b0:	e7e7      	b.n	8011482 <__exponent+0x52>
 80114b2:	2330      	movs	r3, #48	; 0x30
 80114b4:	18e4      	adds	r4, r4, r3
 80114b6:	70ab      	strb	r3, [r5, #2]
 80114b8:	1d28      	adds	r0, r5, #4
 80114ba:	70ec      	strb	r4, [r5, #3]
 80114bc:	e7f1      	b.n	80114a2 <__exponent+0x72>
	...

080114c0 <_printf_float>:
 80114c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114c2:	b095      	sub	sp, #84	; 0x54
 80114c4:	000c      	movs	r4, r1
 80114c6:	9209      	str	r2, [sp, #36]	; 0x24
 80114c8:	001e      	movs	r6, r3
 80114ca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80114cc:	0007      	movs	r7, r0
 80114ce:	f001 fdbb 	bl	8013048 <_localeconv_r>
 80114d2:	6803      	ldr	r3, [r0, #0]
 80114d4:	0018      	movs	r0, r3
 80114d6:	930c      	str	r3, [sp, #48]	; 0x30
 80114d8:	f7ee fe16 	bl	8000108 <strlen>
 80114dc:	2300      	movs	r3, #0
 80114de:	9312      	str	r3, [sp, #72]	; 0x48
 80114e0:	7e23      	ldrb	r3, [r4, #24]
 80114e2:	2207      	movs	r2, #7
 80114e4:	930a      	str	r3, [sp, #40]	; 0x28
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	900e      	str	r0, [sp, #56]	; 0x38
 80114ea:	930d      	str	r3, [sp, #52]	; 0x34
 80114ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80114ee:	682b      	ldr	r3, [r5, #0]
 80114f0:	05c9      	lsls	r1, r1, #23
 80114f2:	d547      	bpl.n	8011584 <_printf_float+0xc4>
 80114f4:	189b      	adds	r3, r3, r2
 80114f6:	4393      	bics	r3, r2
 80114f8:	001a      	movs	r2, r3
 80114fa:	3208      	adds	r2, #8
 80114fc:	602a      	str	r2, [r5, #0]
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	64a2      	str	r2, [r4, #72]	; 0x48
 8011504:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011506:	2201      	movs	r2, #1
 8011508:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801150a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801150c:	930b      	str	r3, [sp, #44]	; 0x2c
 801150e:	006b      	lsls	r3, r5, #1
 8011510:	085b      	lsrs	r3, r3, #1
 8011512:	930f      	str	r3, [sp, #60]	; 0x3c
 8011514:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011516:	4ba7      	ldr	r3, [pc, #668]	; (80117b4 <_printf_float+0x2f4>)
 8011518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801151a:	4252      	negs	r2, r2
 801151c:	f7f0 fd00 	bl	8001f20 <__aeabi_dcmpun>
 8011520:	2800      	cmp	r0, #0
 8011522:	d131      	bne.n	8011588 <_printf_float+0xc8>
 8011524:	2201      	movs	r2, #1
 8011526:	4ba3      	ldr	r3, [pc, #652]	; (80117b4 <_printf_float+0x2f4>)
 8011528:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801152a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801152c:	4252      	negs	r2, r2
 801152e:	f7ee ff9d 	bl	800046c <__aeabi_dcmple>
 8011532:	2800      	cmp	r0, #0
 8011534:	d128      	bne.n	8011588 <_printf_float+0xc8>
 8011536:	2200      	movs	r2, #0
 8011538:	2300      	movs	r3, #0
 801153a:	0029      	movs	r1, r5
 801153c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801153e:	f7ee ff8b 	bl	8000458 <__aeabi_dcmplt>
 8011542:	2800      	cmp	r0, #0
 8011544:	d003      	beq.n	801154e <_printf_float+0x8e>
 8011546:	0023      	movs	r3, r4
 8011548:	222d      	movs	r2, #45	; 0x2d
 801154a:	3343      	adds	r3, #67	; 0x43
 801154c:	701a      	strb	r2, [r3, #0]
 801154e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011550:	4d99      	ldr	r5, [pc, #612]	; (80117b8 <_printf_float+0x2f8>)
 8011552:	2b47      	cmp	r3, #71	; 0x47
 8011554:	d900      	bls.n	8011558 <_printf_float+0x98>
 8011556:	4d99      	ldr	r5, [pc, #612]	; (80117bc <_printf_float+0x2fc>)
 8011558:	2303      	movs	r3, #3
 801155a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801155c:	6123      	str	r3, [r4, #16]
 801155e:	3301      	adds	r3, #1
 8011560:	439a      	bics	r2, r3
 8011562:	2300      	movs	r3, #0
 8011564:	6022      	str	r2, [r4, #0]
 8011566:	930b      	str	r3, [sp, #44]	; 0x2c
 8011568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801156a:	0021      	movs	r1, r4
 801156c:	0038      	movs	r0, r7
 801156e:	9600      	str	r6, [sp, #0]
 8011570:	aa13      	add	r2, sp, #76	; 0x4c
 8011572:	f000 f9e7 	bl	8011944 <_printf_common>
 8011576:	1c43      	adds	r3, r0, #1
 8011578:	d000      	beq.n	801157c <_printf_float+0xbc>
 801157a:	e0a2      	b.n	80116c2 <_printf_float+0x202>
 801157c:	2001      	movs	r0, #1
 801157e:	4240      	negs	r0, r0
 8011580:	b015      	add	sp, #84	; 0x54
 8011582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011584:	3307      	adds	r3, #7
 8011586:	e7b6      	b.n	80114f6 <_printf_float+0x36>
 8011588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801158a:	002b      	movs	r3, r5
 801158c:	0010      	movs	r0, r2
 801158e:	0029      	movs	r1, r5
 8011590:	f7f0 fcc6 	bl	8001f20 <__aeabi_dcmpun>
 8011594:	2800      	cmp	r0, #0
 8011596:	d00b      	beq.n	80115b0 <_printf_float+0xf0>
 8011598:	2d00      	cmp	r5, #0
 801159a:	da03      	bge.n	80115a4 <_printf_float+0xe4>
 801159c:	0023      	movs	r3, r4
 801159e:	222d      	movs	r2, #45	; 0x2d
 80115a0:	3343      	adds	r3, #67	; 0x43
 80115a2:	701a      	strb	r2, [r3, #0]
 80115a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115a6:	4d86      	ldr	r5, [pc, #536]	; (80117c0 <_printf_float+0x300>)
 80115a8:	2b47      	cmp	r3, #71	; 0x47
 80115aa:	d9d5      	bls.n	8011558 <_printf_float+0x98>
 80115ac:	4d85      	ldr	r5, [pc, #532]	; (80117c4 <_printf_float+0x304>)
 80115ae:	e7d3      	b.n	8011558 <_printf_float+0x98>
 80115b0:	2220      	movs	r2, #32
 80115b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80115b4:	6863      	ldr	r3, [r4, #4]
 80115b6:	4391      	bics	r1, r2
 80115b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80115ba:	1c5a      	adds	r2, r3, #1
 80115bc:	d149      	bne.n	8011652 <_printf_float+0x192>
 80115be:	3307      	adds	r3, #7
 80115c0:	6063      	str	r3, [r4, #4]
 80115c2:	2380      	movs	r3, #128	; 0x80
 80115c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80115c6:	00db      	lsls	r3, r3, #3
 80115c8:	4313      	orrs	r3, r2
 80115ca:	2200      	movs	r2, #0
 80115cc:	9206      	str	r2, [sp, #24]
 80115ce:	aa12      	add	r2, sp, #72	; 0x48
 80115d0:	9205      	str	r2, [sp, #20]
 80115d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115d4:	a908      	add	r1, sp, #32
 80115d6:	9204      	str	r2, [sp, #16]
 80115d8:	aa11      	add	r2, sp, #68	; 0x44
 80115da:	9203      	str	r2, [sp, #12]
 80115dc:	2223      	movs	r2, #35	; 0x23
 80115de:	6023      	str	r3, [r4, #0]
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	6863      	ldr	r3, [r4, #4]
 80115e4:	1852      	adds	r2, r2, r1
 80115e6:	9202      	str	r2, [sp, #8]
 80115e8:	9300      	str	r3, [sp, #0]
 80115ea:	0038      	movs	r0, r7
 80115ec:	002b      	movs	r3, r5
 80115ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80115f0:	f7ff febb 	bl	801136a <__cvt>
 80115f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115f6:	0005      	movs	r5, r0
 80115f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80115fa:	2b47      	cmp	r3, #71	; 0x47
 80115fc:	d108      	bne.n	8011610 <_printf_float+0x150>
 80115fe:	1ccb      	adds	r3, r1, #3
 8011600:	db02      	blt.n	8011608 <_printf_float+0x148>
 8011602:	6863      	ldr	r3, [r4, #4]
 8011604:	4299      	cmp	r1, r3
 8011606:	dd48      	ble.n	801169a <_printf_float+0x1da>
 8011608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801160a:	3b02      	subs	r3, #2
 801160c:	b2db      	uxtb	r3, r3
 801160e:	930a      	str	r3, [sp, #40]	; 0x28
 8011610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011612:	2b65      	cmp	r3, #101	; 0x65
 8011614:	d824      	bhi.n	8011660 <_printf_float+0x1a0>
 8011616:	0020      	movs	r0, r4
 8011618:	001a      	movs	r2, r3
 801161a:	3901      	subs	r1, #1
 801161c:	3050      	adds	r0, #80	; 0x50
 801161e:	9111      	str	r1, [sp, #68]	; 0x44
 8011620:	f7ff ff06 	bl	8011430 <__exponent>
 8011624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011626:	900b      	str	r0, [sp, #44]	; 0x2c
 8011628:	1813      	adds	r3, r2, r0
 801162a:	6123      	str	r3, [r4, #16]
 801162c:	2a01      	cmp	r2, #1
 801162e:	dc02      	bgt.n	8011636 <_printf_float+0x176>
 8011630:	6822      	ldr	r2, [r4, #0]
 8011632:	07d2      	lsls	r2, r2, #31
 8011634:	d501      	bpl.n	801163a <_printf_float+0x17a>
 8011636:	3301      	adds	r3, #1
 8011638:	6123      	str	r3, [r4, #16]
 801163a:	2323      	movs	r3, #35	; 0x23
 801163c:	aa08      	add	r2, sp, #32
 801163e:	189b      	adds	r3, r3, r2
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d100      	bne.n	8011648 <_printf_float+0x188>
 8011646:	e78f      	b.n	8011568 <_printf_float+0xa8>
 8011648:	0023      	movs	r3, r4
 801164a:	222d      	movs	r2, #45	; 0x2d
 801164c:	3343      	adds	r3, #67	; 0x43
 801164e:	701a      	strb	r2, [r3, #0]
 8011650:	e78a      	b.n	8011568 <_printf_float+0xa8>
 8011652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011654:	2a47      	cmp	r2, #71	; 0x47
 8011656:	d1b4      	bne.n	80115c2 <_printf_float+0x102>
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1b2      	bne.n	80115c2 <_printf_float+0x102>
 801165c:	3301      	adds	r3, #1
 801165e:	e7af      	b.n	80115c0 <_printf_float+0x100>
 8011660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011662:	2b66      	cmp	r3, #102	; 0x66
 8011664:	d11b      	bne.n	801169e <_printf_float+0x1de>
 8011666:	6863      	ldr	r3, [r4, #4]
 8011668:	2900      	cmp	r1, #0
 801166a:	dd0d      	ble.n	8011688 <_printf_float+0x1c8>
 801166c:	6121      	str	r1, [r4, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <_printf_float+0x1b8>
 8011672:	6822      	ldr	r2, [r4, #0]
 8011674:	07d2      	lsls	r2, r2, #31
 8011676:	d502      	bpl.n	801167e <_printf_float+0x1be>
 8011678:	3301      	adds	r3, #1
 801167a:	1859      	adds	r1, r3, r1
 801167c:	6121      	str	r1, [r4, #16]
 801167e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011680:	65a3      	str	r3, [r4, #88]	; 0x58
 8011682:	2300      	movs	r3, #0
 8011684:	930b      	str	r3, [sp, #44]	; 0x2c
 8011686:	e7d8      	b.n	801163a <_printf_float+0x17a>
 8011688:	2b00      	cmp	r3, #0
 801168a:	d103      	bne.n	8011694 <_printf_float+0x1d4>
 801168c:	2201      	movs	r2, #1
 801168e:	6821      	ldr	r1, [r4, #0]
 8011690:	4211      	tst	r1, r2
 8011692:	d000      	beq.n	8011696 <_printf_float+0x1d6>
 8011694:	1c9a      	adds	r2, r3, #2
 8011696:	6122      	str	r2, [r4, #16]
 8011698:	e7f1      	b.n	801167e <_printf_float+0x1be>
 801169a:	2367      	movs	r3, #103	; 0x67
 801169c:	930a      	str	r3, [sp, #40]	; 0x28
 801169e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116a2:	4293      	cmp	r3, r2
 80116a4:	db06      	blt.n	80116b4 <_printf_float+0x1f4>
 80116a6:	6822      	ldr	r2, [r4, #0]
 80116a8:	6123      	str	r3, [r4, #16]
 80116aa:	07d2      	lsls	r2, r2, #31
 80116ac:	d5e7      	bpl.n	801167e <_printf_float+0x1be>
 80116ae:	3301      	adds	r3, #1
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	e7e4      	b.n	801167e <_printf_float+0x1be>
 80116b4:	2101      	movs	r1, #1
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	dc01      	bgt.n	80116be <_printf_float+0x1fe>
 80116ba:	1849      	adds	r1, r1, r1
 80116bc:	1ac9      	subs	r1, r1, r3
 80116be:	1852      	adds	r2, r2, r1
 80116c0:	e7e9      	b.n	8011696 <_printf_float+0x1d6>
 80116c2:	6822      	ldr	r2, [r4, #0]
 80116c4:	0553      	lsls	r3, r2, #21
 80116c6:	d407      	bmi.n	80116d8 <_printf_float+0x218>
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	002a      	movs	r2, r5
 80116cc:	0038      	movs	r0, r7
 80116ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116d0:	47b0      	blx	r6
 80116d2:	1c43      	adds	r3, r0, #1
 80116d4:	d128      	bne.n	8011728 <_printf_float+0x268>
 80116d6:	e751      	b.n	801157c <_printf_float+0xbc>
 80116d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116da:	2b65      	cmp	r3, #101	; 0x65
 80116dc:	d800      	bhi.n	80116e0 <_printf_float+0x220>
 80116de:	e0e1      	b.n	80118a4 <_printf_float+0x3e4>
 80116e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80116e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80116e4:	2200      	movs	r2, #0
 80116e6:	2300      	movs	r3, #0
 80116e8:	f7ee feb0 	bl	800044c <__aeabi_dcmpeq>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d031      	beq.n	8011754 <_printf_float+0x294>
 80116f0:	2301      	movs	r3, #1
 80116f2:	0038      	movs	r0, r7
 80116f4:	4a34      	ldr	r2, [pc, #208]	; (80117c8 <_printf_float+0x308>)
 80116f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116f8:	47b0      	blx	r6
 80116fa:	1c43      	adds	r3, r0, #1
 80116fc:	d100      	bne.n	8011700 <_printf_float+0x240>
 80116fe:	e73d      	b.n	801157c <_printf_float+0xbc>
 8011700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011702:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011704:	4293      	cmp	r3, r2
 8011706:	db02      	blt.n	801170e <_printf_float+0x24e>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	07db      	lsls	r3, r3, #31
 801170c:	d50c      	bpl.n	8011728 <_printf_float+0x268>
 801170e:	0038      	movs	r0, r7
 8011710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011716:	47b0      	blx	r6
 8011718:	2500      	movs	r5, #0
 801171a:	1c43      	adds	r3, r0, #1
 801171c:	d100      	bne.n	8011720 <_printf_float+0x260>
 801171e:	e72d      	b.n	801157c <_printf_float+0xbc>
 8011720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011722:	3b01      	subs	r3, #1
 8011724:	42ab      	cmp	r3, r5
 8011726:	dc0a      	bgt.n	801173e <_printf_float+0x27e>
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	079b      	lsls	r3, r3, #30
 801172c:	d500      	bpl.n	8011730 <_printf_float+0x270>
 801172e:	e106      	b.n	801193e <_printf_float+0x47e>
 8011730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011732:	68e0      	ldr	r0, [r4, #12]
 8011734:	4298      	cmp	r0, r3
 8011736:	db00      	blt.n	801173a <_printf_float+0x27a>
 8011738:	e722      	b.n	8011580 <_printf_float+0xc0>
 801173a:	0018      	movs	r0, r3
 801173c:	e720      	b.n	8011580 <_printf_float+0xc0>
 801173e:	0022      	movs	r2, r4
 8011740:	2301      	movs	r3, #1
 8011742:	0038      	movs	r0, r7
 8011744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011746:	321a      	adds	r2, #26
 8011748:	47b0      	blx	r6
 801174a:	1c43      	adds	r3, r0, #1
 801174c:	d100      	bne.n	8011750 <_printf_float+0x290>
 801174e:	e715      	b.n	801157c <_printf_float+0xbc>
 8011750:	3501      	adds	r5, #1
 8011752:	e7e5      	b.n	8011720 <_printf_float+0x260>
 8011754:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011756:	2b00      	cmp	r3, #0
 8011758:	dc38      	bgt.n	80117cc <_printf_float+0x30c>
 801175a:	2301      	movs	r3, #1
 801175c:	0038      	movs	r0, r7
 801175e:	4a1a      	ldr	r2, [pc, #104]	; (80117c8 <_printf_float+0x308>)
 8011760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011762:	47b0      	blx	r6
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	d100      	bne.n	801176a <_printf_float+0x2aa>
 8011768:	e708      	b.n	801157c <_printf_float+0xbc>
 801176a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801176c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801176e:	4313      	orrs	r3, r2
 8011770:	d102      	bne.n	8011778 <_printf_float+0x2b8>
 8011772:	6823      	ldr	r3, [r4, #0]
 8011774:	07db      	lsls	r3, r3, #31
 8011776:	d5d7      	bpl.n	8011728 <_printf_float+0x268>
 8011778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801177a:	0038      	movs	r0, r7
 801177c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801177e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011780:	47b0      	blx	r6
 8011782:	1c43      	adds	r3, r0, #1
 8011784:	d100      	bne.n	8011788 <_printf_float+0x2c8>
 8011786:	e6f9      	b.n	801157c <_printf_float+0xbc>
 8011788:	2300      	movs	r3, #0
 801178a:	930a      	str	r3, [sp, #40]	; 0x28
 801178c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801178e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011790:	425b      	negs	r3, r3
 8011792:	4293      	cmp	r3, r2
 8011794:	dc01      	bgt.n	801179a <_printf_float+0x2da>
 8011796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011798:	e797      	b.n	80116ca <_printf_float+0x20a>
 801179a:	0022      	movs	r2, r4
 801179c:	2301      	movs	r3, #1
 801179e:	0038      	movs	r0, r7
 80117a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80117a2:	321a      	adds	r2, #26
 80117a4:	47b0      	blx	r6
 80117a6:	1c43      	adds	r3, r0, #1
 80117a8:	d100      	bne.n	80117ac <_printf_float+0x2ec>
 80117aa:	e6e7      	b.n	801157c <_printf_float+0xbc>
 80117ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117ae:	3301      	adds	r3, #1
 80117b0:	e7eb      	b.n	801178a <_printf_float+0x2ca>
 80117b2:	46c0      	nop			; (mov r8, r8)
 80117b4:	7fefffff 	.word	0x7fefffff
 80117b8:	08014eac 	.word	0x08014eac
 80117bc:	08014eb0 	.word	0x08014eb0
 80117c0:	08014eb4 	.word	0x08014eb4
 80117c4:	08014eb8 	.word	0x08014eb8
 80117c8:	08014ebc 	.word	0x08014ebc
 80117cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80117ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80117d0:	920a      	str	r2, [sp, #40]	; 0x28
 80117d2:	429a      	cmp	r2, r3
 80117d4:	dd00      	ble.n	80117d8 <_printf_float+0x318>
 80117d6:	930a      	str	r3, [sp, #40]	; 0x28
 80117d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117da:	2b00      	cmp	r3, #0
 80117dc:	dc3c      	bgt.n	8011858 <_printf_float+0x398>
 80117de:	2300      	movs	r3, #0
 80117e0:	930d      	str	r3, [sp, #52]	; 0x34
 80117e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117e4:	43db      	mvns	r3, r3
 80117e6:	17db      	asrs	r3, r3, #31
 80117e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80117ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80117f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117f2:	4013      	ands	r3, r2
 80117f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117fa:	4293      	cmp	r3, r2
 80117fc:	dc34      	bgt.n	8011868 <_printf_float+0x3a8>
 80117fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011802:	4293      	cmp	r3, r2
 8011804:	db3d      	blt.n	8011882 <_printf_float+0x3c2>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	07db      	lsls	r3, r3, #31
 801180a:	d43a      	bmi.n	8011882 <_printf_float+0x3c2>
 801180c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801180e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011810:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	1a52      	subs	r2, r2, r1
 8011816:	920a      	str	r2, [sp, #40]	; 0x28
 8011818:	429a      	cmp	r2, r3
 801181a:	dd00      	ble.n	801181e <_printf_float+0x35e>
 801181c:	930a      	str	r3, [sp, #40]	; 0x28
 801181e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011820:	2b00      	cmp	r3, #0
 8011822:	dc36      	bgt.n	8011892 <_printf_float+0x3d2>
 8011824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011826:	2500      	movs	r5, #0
 8011828:	43db      	mvns	r3, r3
 801182a:	17db      	asrs	r3, r3, #31
 801182c:	930b      	str	r3, [sp, #44]	; 0x2c
 801182e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011832:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011834:	1a9b      	subs	r3, r3, r2
 8011836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011838:	400a      	ands	r2, r1
 801183a:	1a9b      	subs	r3, r3, r2
 801183c:	42ab      	cmp	r3, r5
 801183e:	dc00      	bgt.n	8011842 <_printf_float+0x382>
 8011840:	e772      	b.n	8011728 <_printf_float+0x268>
 8011842:	0022      	movs	r2, r4
 8011844:	2301      	movs	r3, #1
 8011846:	0038      	movs	r0, r7
 8011848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801184a:	321a      	adds	r2, #26
 801184c:	47b0      	blx	r6
 801184e:	1c43      	adds	r3, r0, #1
 8011850:	d100      	bne.n	8011854 <_printf_float+0x394>
 8011852:	e693      	b.n	801157c <_printf_float+0xbc>
 8011854:	3501      	adds	r5, #1
 8011856:	e7ea      	b.n	801182e <_printf_float+0x36e>
 8011858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801185a:	002a      	movs	r2, r5
 801185c:	0038      	movs	r0, r7
 801185e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011860:	47b0      	blx	r6
 8011862:	1c43      	adds	r3, r0, #1
 8011864:	d1bb      	bne.n	80117de <_printf_float+0x31e>
 8011866:	e689      	b.n	801157c <_printf_float+0xbc>
 8011868:	0022      	movs	r2, r4
 801186a:	2301      	movs	r3, #1
 801186c:	0038      	movs	r0, r7
 801186e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011870:	321a      	adds	r2, #26
 8011872:	47b0      	blx	r6
 8011874:	1c43      	adds	r3, r0, #1
 8011876:	d100      	bne.n	801187a <_printf_float+0x3ba>
 8011878:	e680      	b.n	801157c <_printf_float+0xbc>
 801187a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801187c:	3301      	adds	r3, #1
 801187e:	930d      	str	r3, [sp, #52]	; 0x34
 8011880:	e7b3      	b.n	80117ea <_printf_float+0x32a>
 8011882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011884:	0038      	movs	r0, r7
 8011886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011888:	9909      	ldr	r1, [sp, #36]	; 0x24
 801188a:	47b0      	blx	r6
 801188c:	1c43      	adds	r3, r0, #1
 801188e:	d1bd      	bne.n	801180c <_printf_float+0x34c>
 8011890:	e674      	b.n	801157c <_printf_float+0xbc>
 8011892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011894:	0038      	movs	r0, r7
 8011896:	18ea      	adds	r2, r5, r3
 8011898:	9909      	ldr	r1, [sp, #36]	; 0x24
 801189a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801189c:	47b0      	blx	r6
 801189e:	1c43      	adds	r3, r0, #1
 80118a0:	d1c0      	bne.n	8011824 <_printf_float+0x364>
 80118a2:	e66b      	b.n	801157c <_printf_float+0xbc>
 80118a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	dc02      	bgt.n	80118b0 <_printf_float+0x3f0>
 80118aa:	2301      	movs	r3, #1
 80118ac:	421a      	tst	r2, r3
 80118ae:	d034      	beq.n	801191a <_printf_float+0x45a>
 80118b0:	2301      	movs	r3, #1
 80118b2:	002a      	movs	r2, r5
 80118b4:	0038      	movs	r0, r7
 80118b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118b8:	47b0      	blx	r6
 80118ba:	1c43      	adds	r3, r0, #1
 80118bc:	d100      	bne.n	80118c0 <_printf_float+0x400>
 80118be:	e65d      	b.n	801157c <_printf_float+0xbc>
 80118c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c2:	0038      	movs	r0, r7
 80118c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118c8:	47b0      	blx	r6
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d100      	bne.n	80118d0 <_printf_float+0x410>
 80118ce:	e655      	b.n	801157c <_printf_float+0xbc>
 80118d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80118d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80118d4:	2200      	movs	r2, #0
 80118d6:	2300      	movs	r3, #0
 80118d8:	f7ee fdb8 	bl	800044c <__aeabi_dcmpeq>
 80118dc:	2800      	cmp	r0, #0
 80118de:	d11a      	bne.n	8011916 <_printf_float+0x456>
 80118e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80118e2:	1c6a      	adds	r2, r5, #1
 80118e4:	3b01      	subs	r3, #1
 80118e6:	0038      	movs	r0, r7
 80118e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118ea:	47b0      	blx	r6
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d10e      	bne.n	801190e <_printf_float+0x44e>
 80118f0:	e644      	b.n	801157c <_printf_float+0xbc>
 80118f2:	0022      	movs	r2, r4
 80118f4:	2301      	movs	r3, #1
 80118f6:	0038      	movs	r0, r7
 80118f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118fa:	321a      	adds	r2, #26
 80118fc:	47b0      	blx	r6
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	d100      	bne.n	8011904 <_printf_float+0x444>
 8011902:	e63b      	b.n	801157c <_printf_float+0xbc>
 8011904:	3501      	adds	r5, #1
 8011906:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011908:	3b01      	subs	r3, #1
 801190a:	42ab      	cmp	r3, r5
 801190c:	dcf1      	bgt.n	80118f2 <_printf_float+0x432>
 801190e:	0022      	movs	r2, r4
 8011910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011912:	3250      	adds	r2, #80	; 0x50
 8011914:	e6da      	b.n	80116cc <_printf_float+0x20c>
 8011916:	2500      	movs	r5, #0
 8011918:	e7f5      	b.n	8011906 <_printf_float+0x446>
 801191a:	002a      	movs	r2, r5
 801191c:	e7e3      	b.n	80118e6 <_printf_float+0x426>
 801191e:	0022      	movs	r2, r4
 8011920:	2301      	movs	r3, #1
 8011922:	0038      	movs	r0, r7
 8011924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011926:	3219      	adds	r2, #25
 8011928:	47b0      	blx	r6
 801192a:	1c43      	adds	r3, r0, #1
 801192c:	d100      	bne.n	8011930 <_printf_float+0x470>
 801192e:	e625      	b.n	801157c <_printf_float+0xbc>
 8011930:	3501      	adds	r5, #1
 8011932:	68e3      	ldr	r3, [r4, #12]
 8011934:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011936:	1a9b      	subs	r3, r3, r2
 8011938:	42ab      	cmp	r3, r5
 801193a:	dcf0      	bgt.n	801191e <_printf_float+0x45e>
 801193c:	e6f8      	b.n	8011730 <_printf_float+0x270>
 801193e:	2500      	movs	r5, #0
 8011940:	e7f7      	b.n	8011932 <_printf_float+0x472>
 8011942:	46c0      	nop			; (mov r8, r8)

08011944 <_printf_common>:
 8011944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011946:	0015      	movs	r5, r2
 8011948:	9301      	str	r3, [sp, #4]
 801194a:	688a      	ldr	r2, [r1, #8]
 801194c:	690b      	ldr	r3, [r1, #16]
 801194e:	000c      	movs	r4, r1
 8011950:	9000      	str	r0, [sp, #0]
 8011952:	4293      	cmp	r3, r2
 8011954:	da00      	bge.n	8011958 <_printf_common+0x14>
 8011956:	0013      	movs	r3, r2
 8011958:	0022      	movs	r2, r4
 801195a:	602b      	str	r3, [r5, #0]
 801195c:	3243      	adds	r2, #67	; 0x43
 801195e:	7812      	ldrb	r2, [r2, #0]
 8011960:	2a00      	cmp	r2, #0
 8011962:	d001      	beq.n	8011968 <_printf_common+0x24>
 8011964:	3301      	adds	r3, #1
 8011966:	602b      	str	r3, [r5, #0]
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	069b      	lsls	r3, r3, #26
 801196c:	d502      	bpl.n	8011974 <_printf_common+0x30>
 801196e:	682b      	ldr	r3, [r5, #0]
 8011970:	3302      	adds	r3, #2
 8011972:	602b      	str	r3, [r5, #0]
 8011974:	6822      	ldr	r2, [r4, #0]
 8011976:	2306      	movs	r3, #6
 8011978:	0017      	movs	r7, r2
 801197a:	401f      	ands	r7, r3
 801197c:	421a      	tst	r2, r3
 801197e:	d027      	beq.n	80119d0 <_printf_common+0x8c>
 8011980:	0023      	movs	r3, r4
 8011982:	3343      	adds	r3, #67	; 0x43
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	1e5a      	subs	r2, r3, #1
 8011988:	4193      	sbcs	r3, r2
 801198a:	6822      	ldr	r2, [r4, #0]
 801198c:	0692      	lsls	r2, r2, #26
 801198e:	d430      	bmi.n	80119f2 <_printf_common+0xae>
 8011990:	0022      	movs	r2, r4
 8011992:	9901      	ldr	r1, [sp, #4]
 8011994:	9800      	ldr	r0, [sp, #0]
 8011996:	9e08      	ldr	r6, [sp, #32]
 8011998:	3243      	adds	r2, #67	; 0x43
 801199a:	47b0      	blx	r6
 801199c:	1c43      	adds	r3, r0, #1
 801199e:	d025      	beq.n	80119ec <_printf_common+0xa8>
 80119a0:	2306      	movs	r3, #6
 80119a2:	6820      	ldr	r0, [r4, #0]
 80119a4:	682a      	ldr	r2, [r5, #0]
 80119a6:	68e1      	ldr	r1, [r4, #12]
 80119a8:	2500      	movs	r5, #0
 80119aa:	4003      	ands	r3, r0
 80119ac:	2b04      	cmp	r3, #4
 80119ae:	d103      	bne.n	80119b8 <_printf_common+0x74>
 80119b0:	1a8d      	subs	r5, r1, r2
 80119b2:	43eb      	mvns	r3, r5
 80119b4:	17db      	asrs	r3, r3, #31
 80119b6:	401d      	ands	r5, r3
 80119b8:	68a3      	ldr	r3, [r4, #8]
 80119ba:	6922      	ldr	r2, [r4, #16]
 80119bc:	4293      	cmp	r3, r2
 80119be:	dd01      	ble.n	80119c4 <_printf_common+0x80>
 80119c0:	1a9b      	subs	r3, r3, r2
 80119c2:	18ed      	adds	r5, r5, r3
 80119c4:	2700      	movs	r7, #0
 80119c6:	42bd      	cmp	r5, r7
 80119c8:	d120      	bne.n	8011a0c <_printf_common+0xc8>
 80119ca:	2000      	movs	r0, #0
 80119cc:	e010      	b.n	80119f0 <_printf_common+0xac>
 80119ce:	3701      	adds	r7, #1
 80119d0:	68e3      	ldr	r3, [r4, #12]
 80119d2:	682a      	ldr	r2, [r5, #0]
 80119d4:	1a9b      	subs	r3, r3, r2
 80119d6:	42bb      	cmp	r3, r7
 80119d8:	ddd2      	ble.n	8011980 <_printf_common+0x3c>
 80119da:	0022      	movs	r2, r4
 80119dc:	2301      	movs	r3, #1
 80119de:	9901      	ldr	r1, [sp, #4]
 80119e0:	9800      	ldr	r0, [sp, #0]
 80119e2:	9e08      	ldr	r6, [sp, #32]
 80119e4:	3219      	adds	r2, #25
 80119e6:	47b0      	blx	r6
 80119e8:	1c43      	adds	r3, r0, #1
 80119ea:	d1f0      	bne.n	80119ce <_printf_common+0x8a>
 80119ec:	2001      	movs	r0, #1
 80119ee:	4240      	negs	r0, r0
 80119f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80119f2:	2030      	movs	r0, #48	; 0x30
 80119f4:	18e1      	adds	r1, r4, r3
 80119f6:	3143      	adds	r1, #67	; 0x43
 80119f8:	7008      	strb	r0, [r1, #0]
 80119fa:	0021      	movs	r1, r4
 80119fc:	1c5a      	adds	r2, r3, #1
 80119fe:	3145      	adds	r1, #69	; 0x45
 8011a00:	7809      	ldrb	r1, [r1, #0]
 8011a02:	18a2      	adds	r2, r4, r2
 8011a04:	3243      	adds	r2, #67	; 0x43
 8011a06:	3302      	adds	r3, #2
 8011a08:	7011      	strb	r1, [r2, #0]
 8011a0a:	e7c1      	b.n	8011990 <_printf_common+0x4c>
 8011a0c:	0022      	movs	r2, r4
 8011a0e:	2301      	movs	r3, #1
 8011a10:	9901      	ldr	r1, [sp, #4]
 8011a12:	9800      	ldr	r0, [sp, #0]
 8011a14:	9e08      	ldr	r6, [sp, #32]
 8011a16:	321a      	adds	r2, #26
 8011a18:	47b0      	blx	r6
 8011a1a:	1c43      	adds	r3, r0, #1
 8011a1c:	d0e6      	beq.n	80119ec <_printf_common+0xa8>
 8011a1e:	3701      	adds	r7, #1
 8011a20:	e7d1      	b.n	80119c6 <_printf_common+0x82>
	...

08011a24 <_printf_i>:
 8011a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a26:	b08b      	sub	sp, #44	; 0x2c
 8011a28:	9206      	str	r2, [sp, #24]
 8011a2a:	000a      	movs	r2, r1
 8011a2c:	3243      	adds	r2, #67	; 0x43
 8011a2e:	9307      	str	r3, [sp, #28]
 8011a30:	9005      	str	r0, [sp, #20]
 8011a32:	9204      	str	r2, [sp, #16]
 8011a34:	7e0a      	ldrb	r2, [r1, #24]
 8011a36:	000c      	movs	r4, r1
 8011a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a3a:	2a78      	cmp	r2, #120	; 0x78
 8011a3c:	d807      	bhi.n	8011a4e <_printf_i+0x2a>
 8011a3e:	2a62      	cmp	r2, #98	; 0x62
 8011a40:	d809      	bhi.n	8011a56 <_printf_i+0x32>
 8011a42:	2a00      	cmp	r2, #0
 8011a44:	d100      	bne.n	8011a48 <_printf_i+0x24>
 8011a46:	e0c1      	b.n	8011bcc <_printf_i+0x1a8>
 8011a48:	2a58      	cmp	r2, #88	; 0x58
 8011a4a:	d100      	bne.n	8011a4e <_printf_i+0x2a>
 8011a4c:	e08c      	b.n	8011b68 <_printf_i+0x144>
 8011a4e:	0026      	movs	r6, r4
 8011a50:	3642      	adds	r6, #66	; 0x42
 8011a52:	7032      	strb	r2, [r6, #0]
 8011a54:	e022      	b.n	8011a9c <_printf_i+0x78>
 8011a56:	0010      	movs	r0, r2
 8011a58:	3863      	subs	r0, #99	; 0x63
 8011a5a:	2815      	cmp	r0, #21
 8011a5c:	d8f7      	bhi.n	8011a4e <_printf_i+0x2a>
 8011a5e:	f7ee fb65 	bl	800012c <__gnu_thumb1_case_shi>
 8011a62:	0016      	.short	0x0016
 8011a64:	fff6001f 	.word	0xfff6001f
 8011a68:	fff6fff6 	.word	0xfff6fff6
 8011a6c:	001ffff6 	.word	0x001ffff6
 8011a70:	fff6fff6 	.word	0xfff6fff6
 8011a74:	fff6fff6 	.word	0xfff6fff6
 8011a78:	003600a8 	.word	0x003600a8
 8011a7c:	fff6009a 	.word	0xfff6009a
 8011a80:	00b9fff6 	.word	0x00b9fff6
 8011a84:	0036fff6 	.word	0x0036fff6
 8011a88:	fff6fff6 	.word	0xfff6fff6
 8011a8c:	009e      	.short	0x009e
 8011a8e:	0026      	movs	r6, r4
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	3642      	adds	r6, #66	; 0x42
 8011a94:	1d11      	adds	r1, r2, #4
 8011a96:	6019      	str	r1, [r3, #0]
 8011a98:	6813      	ldr	r3, [r2, #0]
 8011a9a:	7033      	strb	r3, [r6, #0]
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e0a7      	b.n	8011bf0 <_printf_i+0x1cc>
 8011aa0:	6808      	ldr	r0, [r1, #0]
 8011aa2:	6819      	ldr	r1, [r3, #0]
 8011aa4:	1d0a      	adds	r2, r1, #4
 8011aa6:	0605      	lsls	r5, r0, #24
 8011aa8:	d50b      	bpl.n	8011ac2 <_printf_i+0x9e>
 8011aaa:	680d      	ldr	r5, [r1, #0]
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	2d00      	cmp	r5, #0
 8011ab0:	da03      	bge.n	8011aba <_printf_i+0x96>
 8011ab2:	232d      	movs	r3, #45	; 0x2d
 8011ab4:	9a04      	ldr	r2, [sp, #16]
 8011ab6:	426d      	negs	r5, r5
 8011ab8:	7013      	strb	r3, [r2, #0]
 8011aba:	4b61      	ldr	r3, [pc, #388]	; (8011c40 <_printf_i+0x21c>)
 8011abc:	270a      	movs	r7, #10
 8011abe:	9303      	str	r3, [sp, #12]
 8011ac0:	e01b      	b.n	8011afa <_printf_i+0xd6>
 8011ac2:	680d      	ldr	r5, [r1, #0]
 8011ac4:	601a      	str	r2, [r3, #0]
 8011ac6:	0641      	lsls	r1, r0, #25
 8011ac8:	d5f1      	bpl.n	8011aae <_printf_i+0x8a>
 8011aca:	b22d      	sxth	r5, r5
 8011acc:	e7ef      	b.n	8011aae <_printf_i+0x8a>
 8011ace:	680d      	ldr	r5, [r1, #0]
 8011ad0:	6819      	ldr	r1, [r3, #0]
 8011ad2:	1d08      	adds	r0, r1, #4
 8011ad4:	6018      	str	r0, [r3, #0]
 8011ad6:	062e      	lsls	r6, r5, #24
 8011ad8:	d501      	bpl.n	8011ade <_printf_i+0xba>
 8011ada:	680d      	ldr	r5, [r1, #0]
 8011adc:	e003      	b.n	8011ae6 <_printf_i+0xc2>
 8011ade:	066d      	lsls	r5, r5, #25
 8011ae0:	d5fb      	bpl.n	8011ada <_printf_i+0xb6>
 8011ae2:	680d      	ldr	r5, [r1, #0]
 8011ae4:	b2ad      	uxth	r5, r5
 8011ae6:	4b56      	ldr	r3, [pc, #344]	; (8011c40 <_printf_i+0x21c>)
 8011ae8:	2708      	movs	r7, #8
 8011aea:	9303      	str	r3, [sp, #12]
 8011aec:	2a6f      	cmp	r2, #111	; 0x6f
 8011aee:	d000      	beq.n	8011af2 <_printf_i+0xce>
 8011af0:	3702      	adds	r7, #2
 8011af2:	0023      	movs	r3, r4
 8011af4:	2200      	movs	r2, #0
 8011af6:	3343      	adds	r3, #67	; 0x43
 8011af8:	701a      	strb	r2, [r3, #0]
 8011afa:	6863      	ldr	r3, [r4, #4]
 8011afc:	60a3      	str	r3, [r4, #8]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	db03      	blt.n	8011b0a <_printf_i+0xe6>
 8011b02:	2204      	movs	r2, #4
 8011b04:	6821      	ldr	r1, [r4, #0]
 8011b06:	4391      	bics	r1, r2
 8011b08:	6021      	str	r1, [r4, #0]
 8011b0a:	2d00      	cmp	r5, #0
 8011b0c:	d102      	bne.n	8011b14 <_printf_i+0xf0>
 8011b0e:	9e04      	ldr	r6, [sp, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d00c      	beq.n	8011b2e <_printf_i+0x10a>
 8011b14:	9e04      	ldr	r6, [sp, #16]
 8011b16:	0028      	movs	r0, r5
 8011b18:	0039      	movs	r1, r7
 8011b1a:	f7ee fb97 	bl	800024c <__aeabi_uidivmod>
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	3e01      	subs	r6, #1
 8011b22:	5c5b      	ldrb	r3, [r3, r1]
 8011b24:	7033      	strb	r3, [r6, #0]
 8011b26:	002b      	movs	r3, r5
 8011b28:	0005      	movs	r5, r0
 8011b2a:	429f      	cmp	r7, r3
 8011b2c:	d9f3      	bls.n	8011b16 <_printf_i+0xf2>
 8011b2e:	2f08      	cmp	r7, #8
 8011b30:	d109      	bne.n	8011b46 <_printf_i+0x122>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	07db      	lsls	r3, r3, #31
 8011b36:	d506      	bpl.n	8011b46 <_printf_i+0x122>
 8011b38:	6863      	ldr	r3, [r4, #4]
 8011b3a:	6922      	ldr	r2, [r4, #16]
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	dc02      	bgt.n	8011b46 <_printf_i+0x122>
 8011b40:	2330      	movs	r3, #48	; 0x30
 8011b42:	3e01      	subs	r6, #1
 8011b44:	7033      	strb	r3, [r6, #0]
 8011b46:	9b04      	ldr	r3, [sp, #16]
 8011b48:	1b9b      	subs	r3, r3, r6
 8011b4a:	6123      	str	r3, [r4, #16]
 8011b4c:	9b07      	ldr	r3, [sp, #28]
 8011b4e:	0021      	movs	r1, r4
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	9805      	ldr	r0, [sp, #20]
 8011b54:	9b06      	ldr	r3, [sp, #24]
 8011b56:	aa09      	add	r2, sp, #36	; 0x24
 8011b58:	f7ff fef4 	bl	8011944 <_printf_common>
 8011b5c:	1c43      	adds	r3, r0, #1
 8011b5e:	d14c      	bne.n	8011bfa <_printf_i+0x1d6>
 8011b60:	2001      	movs	r0, #1
 8011b62:	4240      	negs	r0, r0
 8011b64:	b00b      	add	sp, #44	; 0x2c
 8011b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b68:	3145      	adds	r1, #69	; 0x45
 8011b6a:	700a      	strb	r2, [r1, #0]
 8011b6c:	4a34      	ldr	r2, [pc, #208]	; (8011c40 <_printf_i+0x21c>)
 8011b6e:	9203      	str	r2, [sp, #12]
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	6821      	ldr	r1, [r4, #0]
 8011b74:	ca20      	ldmia	r2!, {r5}
 8011b76:	601a      	str	r2, [r3, #0]
 8011b78:	0608      	lsls	r0, r1, #24
 8011b7a:	d516      	bpl.n	8011baa <_printf_i+0x186>
 8011b7c:	07cb      	lsls	r3, r1, #31
 8011b7e:	d502      	bpl.n	8011b86 <_printf_i+0x162>
 8011b80:	2320      	movs	r3, #32
 8011b82:	4319      	orrs	r1, r3
 8011b84:	6021      	str	r1, [r4, #0]
 8011b86:	2710      	movs	r7, #16
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	d1b2      	bne.n	8011af2 <_printf_i+0xce>
 8011b8c:	2320      	movs	r3, #32
 8011b8e:	6822      	ldr	r2, [r4, #0]
 8011b90:	439a      	bics	r2, r3
 8011b92:	6022      	str	r2, [r4, #0]
 8011b94:	e7ad      	b.n	8011af2 <_printf_i+0xce>
 8011b96:	2220      	movs	r2, #32
 8011b98:	6809      	ldr	r1, [r1, #0]
 8011b9a:	430a      	orrs	r2, r1
 8011b9c:	6022      	str	r2, [r4, #0]
 8011b9e:	0022      	movs	r2, r4
 8011ba0:	2178      	movs	r1, #120	; 0x78
 8011ba2:	3245      	adds	r2, #69	; 0x45
 8011ba4:	7011      	strb	r1, [r2, #0]
 8011ba6:	4a27      	ldr	r2, [pc, #156]	; (8011c44 <_printf_i+0x220>)
 8011ba8:	e7e1      	b.n	8011b6e <_printf_i+0x14a>
 8011baa:	0648      	lsls	r0, r1, #25
 8011bac:	d5e6      	bpl.n	8011b7c <_printf_i+0x158>
 8011bae:	b2ad      	uxth	r5, r5
 8011bb0:	e7e4      	b.n	8011b7c <_printf_i+0x158>
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	680d      	ldr	r5, [r1, #0]
 8011bb6:	1d10      	adds	r0, r2, #4
 8011bb8:	6949      	ldr	r1, [r1, #20]
 8011bba:	6018      	str	r0, [r3, #0]
 8011bbc:	6813      	ldr	r3, [r2, #0]
 8011bbe:	062e      	lsls	r6, r5, #24
 8011bc0:	d501      	bpl.n	8011bc6 <_printf_i+0x1a2>
 8011bc2:	6019      	str	r1, [r3, #0]
 8011bc4:	e002      	b.n	8011bcc <_printf_i+0x1a8>
 8011bc6:	066d      	lsls	r5, r5, #25
 8011bc8:	d5fb      	bpl.n	8011bc2 <_printf_i+0x19e>
 8011bca:	8019      	strh	r1, [r3, #0]
 8011bcc:	2300      	movs	r3, #0
 8011bce:	9e04      	ldr	r6, [sp, #16]
 8011bd0:	6123      	str	r3, [r4, #16]
 8011bd2:	e7bb      	b.n	8011b4c <_printf_i+0x128>
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	1d11      	adds	r1, r2, #4
 8011bd8:	6019      	str	r1, [r3, #0]
 8011bda:	6816      	ldr	r6, [r2, #0]
 8011bdc:	2100      	movs	r1, #0
 8011bde:	0030      	movs	r0, r6
 8011be0:	6862      	ldr	r2, [r4, #4]
 8011be2:	f001 faaf 	bl	8013144 <memchr>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d001      	beq.n	8011bee <_printf_i+0x1ca>
 8011bea:	1b80      	subs	r0, r0, r6
 8011bec:	6060      	str	r0, [r4, #4]
 8011bee:	6863      	ldr	r3, [r4, #4]
 8011bf0:	6123      	str	r3, [r4, #16]
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	9a04      	ldr	r2, [sp, #16]
 8011bf6:	7013      	strb	r3, [r2, #0]
 8011bf8:	e7a8      	b.n	8011b4c <_printf_i+0x128>
 8011bfa:	6923      	ldr	r3, [r4, #16]
 8011bfc:	0032      	movs	r2, r6
 8011bfe:	9906      	ldr	r1, [sp, #24]
 8011c00:	9805      	ldr	r0, [sp, #20]
 8011c02:	9d07      	ldr	r5, [sp, #28]
 8011c04:	47a8      	blx	r5
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d0aa      	beq.n	8011b60 <_printf_i+0x13c>
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	079b      	lsls	r3, r3, #30
 8011c0e:	d415      	bmi.n	8011c3c <_printf_i+0x218>
 8011c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c12:	68e0      	ldr	r0, [r4, #12]
 8011c14:	4298      	cmp	r0, r3
 8011c16:	daa5      	bge.n	8011b64 <_printf_i+0x140>
 8011c18:	0018      	movs	r0, r3
 8011c1a:	e7a3      	b.n	8011b64 <_printf_i+0x140>
 8011c1c:	0022      	movs	r2, r4
 8011c1e:	2301      	movs	r3, #1
 8011c20:	9906      	ldr	r1, [sp, #24]
 8011c22:	9805      	ldr	r0, [sp, #20]
 8011c24:	9e07      	ldr	r6, [sp, #28]
 8011c26:	3219      	adds	r2, #25
 8011c28:	47b0      	blx	r6
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	d098      	beq.n	8011b60 <_printf_i+0x13c>
 8011c2e:	3501      	adds	r5, #1
 8011c30:	68e3      	ldr	r3, [r4, #12]
 8011c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c34:	1a9b      	subs	r3, r3, r2
 8011c36:	42ab      	cmp	r3, r5
 8011c38:	dcf0      	bgt.n	8011c1c <_printf_i+0x1f8>
 8011c3a:	e7e9      	b.n	8011c10 <_printf_i+0x1ec>
 8011c3c:	2500      	movs	r5, #0
 8011c3e:	e7f7      	b.n	8011c30 <_printf_i+0x20c>
 8011c40:	08014ebe 	.word	0x08014ebe
 8011c44:	08014ecf 	.word	0x08014ecf

08011c48 <iprintf>:
 8011c48:	b40f      	push	{r0, r1, r2, r3}
 8011c4a:	4b0b      	ldr	r3, [pc, #44]	; (8011c78 <iprintf+0x30>)
 8011c4c:	b513      	push	{r0, r1, r4, lr}
 8011c4e:	681c      	ldr	r4, [r3, #0]
 8011c50:	2c00      	cmp	r4, #0
 8011c52:	d005      	beq.n	8011c60 <iprintf+0x18>
 8011c54:	69a3      	ldr	r3, [r4, #24]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d102      	bne.n	8011c60 <iprintf+0x18>
 8011c5a:	0020      	movs	r0, r4
 8011c5c:	f001 f954 	bl	8012f08 <__sinit>
 8011c60:	ab05      	add	r3, sp, #20
 8011c62:	0020      	movs	r0, r4
 8011c64:	9a04      	ldr	r2, [sp, #16]
 8011c66:	68a1      	ldr	r1, [r4, #8]
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	f002 f8ab 	bl	8013dc4 <_vfiprintf_r>
 8011c6e:	bc16      	pop	{r1, r2, r4}
 8011c70:	bc08      	pop	{r3}
 8011c72:	b004      	add	sp, #16
 8011c74:	4718      	bx	r3
 8011c76:	46c0      	nop			; (mov r8, r8)
 8011c78:	200002ec 	.word	0x200002ec

08011c7c <_puts_r>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	0005      	movs	r5, r0
 8011c80:	000e      	movs	r6, r1
 8011c82:	2800      	cmp	r0, #0
 8011c84:	d004      	beq.n	8011c90 <_puts_r+0x14>
 8011c86:	6983      	ldr	r3, [r0, #24]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d101      	bne.n	8011c90 <_puts_r+0x14>
 8011c8c:	f001 f93c 	bl	8012f08 <__sinit>
 8011c90:	69ab      	ldr	r3, [r5, #24]
 8011c92:	68ac      	ldr	r4, [r5, #8]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d102      	bne.n	8011c9e <_puts_r+0x22>
 8011c98:	0028      	movs	r0, r5
 8011c9a:	f001 f935 	bl	8012f08 <__sinit>
 8011c9e:	4b2d      	ldr	r3, [pc, #180]	; (8011d54 <_puts_r+0xd8>)
 8011ca0:	429c      	cmp	r4, r3
 8011ca2:	d122      	bne.n	8011cea <_puts_r+0x6e>
 8011ca4:	686c      	ldr	r4, [r5, #4]
 8011ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ca8:	07db      	lsls	r3, r3, #31
 8011caa:	d405      	bmi.n	8011cb8 <_puts_r+0x3c>
 8011cac:	89a3      	ldrh	r3, [r4, #12]
 8011cae:	059b      	lsls	r3, r3, #22
 8011cb0:	d402      	bmi.n	8011cb8 <_puts_r+0x3c>
 8011cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cb4:	f001 f9cd 	bl	8013052 <__retarget_lock_acquire_recursive>
 8011cb8:	89a3      	ldrh	r3, [r4, #12]
 8011cba:	071b      	lsls	r3, r3, #28
 8011cbc:	d502      	bpl.n	8011cc4 <_puts_r+0x48>
 8011cbe:	6923      	ldr	r3, [r4, #16]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d129      	bne.n	8011d18 <_puts_r+0x9c>
 8011cc4:	0021      	movs	r1, r4
 8011cc6:	0028      	movs	r0, r5
 8011cc8:	f000 f8d2 	bl	8011e70 <__swsetup_r>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d023      	beq.n	8011d18 <_puts_r+0x9c>
 8011cd0:	2501      	movs	r5, #1
 8011cd2:	426d      	negs	r5, r5
 8011cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cd6:	07db      	lsls	r3, r3, #31
 8011cd8:	d405      	bmi.n	8011ce6 <_puts_r+0x6a>
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	059b      	lsls	r3, r3, #22
 8011cde:	d402      	bmi.n	8011ce6 <_puts_r+0x6a>
 8011ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ce2:	f001 f9b7 	bl	8013054 <__retarget_lock_release_recursive>
 8011ce6:	0028      	movs	r0, r5
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	4b1b      	ldr	r3, [pc, #108]	; (8011d58 <_puts_r+0xdc>)
 8011cec:	429c      	cmp	r4, r3
 8011cee:	d101      	bne.n	8011cf4 <_puts_r+0x78>
 8011cf0:	68ac      	ldr	r4, [r5, #8]
 8011cf2:	e7d8      	b.n	8011ca6 <_puts_r+0x2a>
 8011cf4:	4b19      	ldr	r3, [pc, #100]	; (8011d5c <_puts_r+0xe0>)
 8011cf6:	429c      	cmp	r4, r3
 8011cf8:	d1d5      	bne.n	8011ca6 <_puts_r+0x2a>
 8011cfa:	68ec      	ldr	r4, [r5, #12]
 8011cfc:	e7d3      	b.n	8011ca6 <_puts_r+0x2a>
 8011cfe:	3601      	adds	r6, #1
 8011d00:	60a3      	str	r3, [r4, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	da04      	bge.n	8011d10 <_puts_r+0x94>
 8011d06:	69a2      	ldr	r2, [r4, #24]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	dc16      	bgt.n	8011d3a <_puts_r+0xbe>
 8011d0c:	290a      	cmp	r1, #10
 8011d0e:	d014      	beq.n	8011d3a <_puts_r+0xbe>
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	1c5a      	adds	r2, r3, #1
 8011d14:	6022      	str	r2, [r4, #0]
 8011d16:	7019      	strb	r1, [r3, #0]
 8011d18:	68a3      	ldr	r3, [r4, #8]
 8011d1a:	7831      	ldrb	r1, [r6, #0]
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	2900      	cmp	r1, #0
 8011d20:	d1ed      	bne.n	8011cfe <_puts_r+0x82>
 8011d22:	60a3      	str	r3, [r4, #8]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	da0f      	bge.n	8011d48 <_puts_r+0xcc>
 8011d28:	0028      	movs	r0, r5
 8011d2a:	0022      	movs	r2, r4
 8011d2c:	310a      	adds	r1, #10
 8011d2e:	f000 f849 	bl	8011dc4 <__swbuf_r>
 8011d32:	250a      	movs	r5, #10
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d1cd      	bne.n	8011cd4 <_puts_r+0x58>
 8011d38:	e7ca      	b.n	8011cd0 <_puts_r+0x54>
 8011d3a:	0022      	movs	r2, r4
 8011d3c:	0028      	movs	r0, r5
 8011d3e:	f000 f841 	bl	8011dc4 <__swbuf_r>
 8011d42:	1c43      	adds	r3, r0, #1
 8011d44:	d1e8      	bne.n	8011d18 <_puts_r+0x9c>
 8011d46:	e7c3      	b.n	8011cd0 <_puts_r+0x54>
 8011d48:	250a      	movs	r5, #10
 8011d4a:	6823      	ldr	r3, [r4, #0]
 8011d4c:	1c5a      	adds	r2, r3, #1
 8011d4e:	6022      	str	r2, [r4, #0]
 8011d50:	701d      	strb	r5, [r3, #0]
 8011d52:	e7bf      	b.n	8011cd4 <_puts_r+0x58>
 8011d54:	08015094 	.word	0x08015094
 8011d58:	080150b4 	.word	0x080150b4
 8011d5c:	08015074 	.word	0x08015074

08011d60 <puts>:
 8011d60:	b510      	push	{r4, lr}
 8011d62:	4b03      	ldr	r3, [pc, #12]	; (8011d70 <puts+0x10>)
 8011d64:	0001      	movs	r1, r0
 8011d66:	6818      	ldr	r0, [r3, #0]
 8011d68:	f7ff ff88 	bl	8011c7c <_puts_r>
 8011d6c:	bd10      	pop	{r4, pc}
 8011d6e:	46c0      	nop			; (mov r8, r8)
 8011d70:	200002ec 	.word	0x200002ec

08011d74 <siprintf>:
 8011d74:	b40e      	push	{r1, r2, r3}
 8011d76:	b500      	push	{lr}
 8011d78:	490b      	ldr	r1, [pc, #44]	; (8011da8 <siprintf+0x34>)
 8011d7a:	b09c      	sub	sp, #112	; 0x70
 8011d7c:	ab1d      	add	r3, sp, #116	; 0x74
 8011d7e:	9002      	str	r0, [sp, #8]
 8011d80:	9006      	str	r0, [sp, #24]
 8011d82:	9107      	str	r1, [sp, #28]
 8011d84:	9104      	str	r1, [sp, #16]
 8011d86:	4809      	ldr	r0, [pc, #36]	; (8011dac <siprintf+0x38>)
 8011d88:	4909      	ldr	r1, [pc, #36]	; (8011db0 <siprintf+0x3c>)
 8011d8a:	cb04      	ldmia	r3!, {r2}
 8011d8c:	9105      	str	r1, [sp, #20]
 8011d8e:	6800      	ldr	r0, [r0, #0]
 8011d90:	a902      	add	r1, sp, #8
 8011d92:	9301      	str	r3, [sp, #4]
 8011d94:	f001 feee 	bl	8013b74 <_svfiprintf_r>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	9a02      	ldr	r2, [sp, #8]
 8011d9c:	7013      	strb	r3, [r2, #0]
 8011d9e:	b01c      	add	sp, #112	; 0x70
 8011da0:	bc08      	pop	{r3}
 8011da2:	b003      	add	sp, #12
 8011da4:	4718      	bx	r3
 8011da6:	46c0      	nop			; (mov r8, r8)
 8011da8:	7fffffff 	.word	0x7fffffff
 8011dac:	200002ec 	.word	0x200002ec
 8011db0:	ffff0208 	.word	0xffff0208

08011db4 <strcpy>:
 8011db4:	0003      	movs	r3, r0
 8011db6:	780a      	ldrb	r2, [r1, #0]
 8011db8:	3101      	adds	r1, #1
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	2a00      	cmp	r2, #0
 8011dc0:	d1f9      	bne.n	8011db6 <strcpy+0x2>
 8011dc2:	4770      	bx	lr

08011dc4 <__swbuf_r>:
 8011dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc6:	0005      	movs	r5, r0
 8011dc8:	000e      	movs	r6, r1
 8011dca:	0014      	movs	r4, r2
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d004      	beq.n	8011dda <__swbuf_r+0x16>
 8011dd0:	6983      	ldr	r3, [r0, #24]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d101      	bne.n	8011dda <__swbuf_r+0x16>
 8011dd6:	f001 f897 	bl	8012f08 <__sinit>
 8011dda:	4b22      	ldr	r3, [pc, #136]	; (8011e64 <__swbuf_r+0xa0>)
 8011ddc:	429c      	cmp	r4, r3
 8011dde:	d12e      	bne.n	8011e3e <__swbuf_r+0x7a>
 8011de0:	686c      	ldr	r4, [r5, #4]
 8011de2:	69a3      	ldr	r3, [r4, #24]
 8011de4:	60a3      	str	r3, [r4, #8]
 8011de6:	89a3      	ldrh	r3, [r4, #12]
 8011de8:	071b      	lsls	r3, r3, #28
 8011dea:	d532      	bpl.n	8011e52 <__swbuf_r+0x8e>
 8011dec:	6923      	ldr	r3, [r4, #16]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d02f      	beq.n	8011e52 <__swbuf_r+0x8e>
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	6922      	ldr	r2, [r4, #16]
 8011df6:	b2f7      	uxtb	r7, r6
 8011df8:	1a98      	subs	r0, r3, r2
 8011dfa:	6963      	ldr	r3, [r4, #20]
 8011dfc:	b2f6      	uxtb	r6, r6
 8011dfe:	4283      	cmp	r3, r0
 8011e00:	dc05      	bgt.n	8011e0e <__swbuf_r+0x4a>
 8011e02:	0021      	movs	r1, r4
 8011e04:	0028      	movs	r0, r5
 8011e06:	f000 ffdd 	bl	8012dc4 <_fflush_r>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	d127      	bne.n	8011e5e <__swbuf_r+0x9a>
 8011e0e:	68a3      	ldr	r3, [r4, #8]
 8011e10:	3001      	adds	r0, #1
 8011e12:	3b01      	subs	r3, #1
 8011e14:	60a3      	str	r3, [r4, #8]
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	6022      	str	r2, [r4, #0]
 8011e1c:	701f      	strb	r7, [r3, #0]
 8011e1e:	6963      	ldr	r3, [r4, #20]
 8011e20:	4283      	cmp	r3, r0
 8011e22:	d004      	beq.n	8011e2e <__swbuf_r+0x6a>
 8011e24:	89a3      	ldrh	r3, [r4, #12]
 8011e26:	07db      	lsls	r3, r3, #31
 8011e28:	d507      	bpl.n	8011e3a <__swbuf_r+0x76>
 8011e2a:	2e0a      	cmp	r6, #10
 8011e2c:	d105      	bne.n	8011e3a <__swbuf_r+0x76>
 8011e2e:	0021      	movs	r1, r4
 8011e30:	0028      	movs	r0, r5
 8011e32:	f000 ffc7 	bl	8012dc4 <_fflush_r>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d111      	bne.n	8011e5e <__swbuf_r+0x9a>
 8011e3a:	0030      	movs	r0, r6
 8011e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e3e:	4b0a      	ldr	r3, [pc, #40]	; (8011e68 <__swbuf_r+0xa4>)
 8011e40:	429c      	cmp	r4, r3
 8011e42:	d101      	bne.n	8011e48 <__swbuf_r+0x84>
 8011e44:	68ac      	ldr	r4, [r5, #8]
 8011e46:	e7cc      	b.n	8011de2 <__swbuf_r+0x1e>
 8011e48:	4b08      	ldr	r3, [pc, #32]	; (8011e6c <__swbuf_r+0xa8>)
 8011e4a:	429c      	cmp	r4, r3
 8011e4c:	d1c9      	bne.n	8011de2 <__swbuf_r+0x1e>
 8011e4e:	68ec      	ldr	r4, [r5, #12]
 8011e50:	e7c7      	b.n	8011de2 <__swbuf_r+0x1e>
 8011e52:	0021      	movs	r1, r4
 8011e54:	0028      	movs	r0, r5
 8011e56:	f000 f80b 	bl	8011e70 <__swsetup_r>
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d0c9      	beq.n	8011df2 <__swbuf_r+0x2e>
 8011e5e:	2601      	movs	r6, #1
 8011e60:	4276      	negs	r6, r6
 8011e62:	e7ea      	b.n	8011e3a <__swbuf_r+0x76>
 8011e64:	08015094 	.word	0x08015094
 8011e68:	080150b4 	.word	0x080150b4
 8011e6c:	08015074 	.word	0x08015074

08011e70 <__swsetup_r>:
 8011e70:	4b37      	ldr	r3, [pc, #220]	; (8011f50 <__swsetup_r+0xe0>)
 8011e72:	b570      	push	{r4, r5, r6, lr}
 8011e74:	681d      	ldr	r5, [r3, #0]
 8011e76:	0006      	movs	r6, r0
 8011e78:	000c      	movs	r4, r1
 8011e7a:	2d00      	cmp	r5, #0
 8011e7c:	d005      	beq.n	8011e8a <__swsetup_r+0x1a>
 8011e7e:	69ab      	ldr	r3, [r5, #24]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d102      	bne.n	8011e8a <__swsetup_r+0x1a>
 8011e84:	0028      	movs	r0, r5
 8011e86:	f001 f83f 	bl	8012f08 <__sinit>
 8011e8a:	4b32      	ldr	r3, [pc, #200]	; (8011f54 <__swsetup_r+0xe4>)
 8011e8c:	429c      	cmp	r4, r3
 8011e8e:	d10f      	bne.n	8011eb0 <__swsetup_r+0x40>
 8011e90:	686c      	ldr	r4, [r5, #4]
 8011e92:	230c      	movs	r3, #12
 8011e94:	5ee2      	ldrsh	r2, [r4, r3]
 8011e96:	b293      	uxth	r3, r2
 8011e98:	0711      	lsls	r1, r2, #28
 8011e9a:	d42d      	bmi.n	8011ef8 <__swsetup_r+0x88>
 8011e9c:	06d9      	lsls	r1, r3, #27
 8011e9e:	d411      	bmi.n	8011ec4 <__swsetup_r+0x54>
 8011ea0:	2309      	movs	r3, #9
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	6033      	str	r3, [r6, #0]
 8011ea6:	3337      	adds	r3, #55	; 0x37
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	81a3      	strh	r3, [r4, #12]
 8011eac:	4240      	negs	r0, r0
 8011eae:	bd70      	pop	{r4, r5, r6, pc}
 8011eb0:	4b29      	ldr	r3, [pc, #164]	; (8011f58 <__swsetup_r+0xe8>)
 8011eb2:	429c      	cmp	r4, r3
 8011eb4:	d101      	bne.n	8011eba <__swsetup_r+0x4a>
 8011eb6:	68ac      	ldr	r4, [r5, #8]
 8011eb8:	e7eb      	b.n	8011e92 <__swsetup_r+0x22>
 8011eba:	4b28      	ldr	r3, [pc, #160]	; (8011f5c <__swsetup_r+0xec>)
 8011ebc:	429c      	cmp	r4, r3
 8011ebe:	d1e8      	bne.n	8011e92 <__swsetup_r+0x22>
 8011ec0:	68ec      	ldr	r4, [r5, #12]
 8011ec2:	e7e6      	b.n	8011e92 <__swsetup_r+0x22>
 8011ec4:	075b      	lsls	r3, r3, #29
 8011ec6:	d513      	bpl.n	8011ef0 <__swsetup_r+0x80>
 8011ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011eca:	2900      	cmp	r1, #0
 8011ecc:	d008      	beq.n	8011ee0 <__swsetup_r+0x70>
 8011ece:	0023      	movs	r3, r4
 8011ed0:	3344      	adds	r3, #68	; 0x44
 8011ed2:	4299      	cmp	r1, r3
 8011ed4:	d002      	beq.n	8011edc <__swsetup_r+0x6c>
 8011ed6:	0030      	movs	r0, r6
 8011ed8:	f001 fd08 	bl	80138ec <_free_r>
 8011edc:	2300      	movs	r3, #0
 8011ede:	6363      	str	r3, [r4, #52]	; 0x34
 8011ee0:	2224      	movs	r2, #36	; 0x24
 8011ee2:	89a3      	ldrh	r3, [r4, #12]
 8011ee4:	4393      	bics	r3, r2
 8011ee6:	81a3      	strh	r3, [r4, #12]
 8011ee8:	2300      	movs	r3, #0
 8011eea:	6063      	str	r3, [r4, #4]
 8011eec:	6923      	ldr	r3, [r4, #16]
 8011eee:	6023      	str	r3, [r4, #0]
 8011ef0:	2308      	movs	r3, #8
 8011ef2:	89a2      	ldrh	r2, [r4, #12]
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	81a3      	strh	r3, [r4, #12]
 8011ef8:	6923      	ldr	r3, [r4, #16]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d10b      	bne.n	8011f16 <__swsetup_r+0xa6>
 8011efe:	21a0      	movs	r1, #160	; 0xa0
 8011f00:	2280      	movs	r2, #128	; 0x80
 8011f02:	89a3      	ldrh	r3, [r4, #12]
 8011f04:	0089      	lsls	r1, r1, #2
 8011f06:	0092      	lsls	r2, r2, #2
 8011f08:	400b      	ands	r3, r1
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d003      	beq.n	8011f16 <__swsetup_r+0xa6>
 8011f0e:	0021      	movs	r1, r4
 8011f10:	0030      	movs	r0, r6
 8011f12:	f001 f8c9 	bl	80130a8 <__smakebuf_r>
 8011f16:	220c      	movs	r2, #12
 8011f18:	5ea3      	ldrsh	r3, [r4, r2]
 8011f1a:	2001      	movs	r0, #1
 8011f1c:	001a      	movs	r2, r3
 8011f1e:	b299      	uxth	r1, r3
 8011f20:	4002      	ands	r2, r0
 8011f22:	4203      	tst	r3, r0
 8011f24:	d00f      	beq.n	8011f46 <__swsetup_r+0xd6>
 8011f26:	2200      	movs	r2, #0
 8011f28:	60a2      	str	r2, [r4, #8]
 8011f2a:	6962      	ldr	r2, [r4, #20]
 8011f2c:	4252      	negs	r2, r2
 8011f2e:	61a2      	str	r2, [r4, #24]
 8011f30:	2000      	movs	r0, #0
 8011f32:	6922      	ldr	r2, [r4, #16]
 8011f34:	4282      	cmp	r2, r0
 8011f36:	d1ba      	bne.n	8011eae <__swsetup_r+0x3e>
 8011f38:	060a      	lsls	r2, r1, #24
 8011f3a:	d5b8      	bpl.n	8011eae <__swsetup_r+0x3e>
 8011f3c:	2240      	movs	r2, #64	; 0x40
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	81a3      	strh	r3, [r4, #12]
 8011f42:	3801      	subs	r0, #1
 8011f44:	e7b3      	b.n	8011eae <__swsetup_r+0x3e>
 8011f46:	0788      	lsls	r0, r1, #30
 8011f48:	d400      	bmi.n	8011f4c <__swsetup_r+0xdc>
 8011f4a:	6962      	ldr	r2, [r4, #20]
 8011f4c:	60a2      	str	r2, [r4, #8]
 8011f4e:	e7ef      	b.n	8011f30 <__swsetup_r+0xc0>
 8011f50:	200002ec 	.word	0x200002ec
 8011f54:	08015094 	.word	0x08015094
 8011f58:	080150b4 	.word	0x080150b4
 8011f5c:	08015074 	.word	0x08015074

08011f60 <quorem>:
 8011f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f62:	0006      	movs	r6, r0
 8011f64:	690b      	ldr	r3, [r1, #16]
 8011f66:	6932      	ldr	r2, [r6, #16]
 8011f68:	b087      	sub	sp, #28
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	9103      	str	r1, [sp, #12]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	db65      	blt.n	801203e <quorem+0xde>
 8011f72:	3b01      	subs	r3, #1
 8011f74:	009c      	lsls	r4, r3, #2
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	000b      	movs	r3, r1
 8011f7a:	3314      	adds	r3, #20
 8011f7c:	9305      	str	r3, [sp, #20]
 8011f7e:	191b      	adds	r3, r3, r4
 8011f80:	9304      	str	r3, [sp, #16]
 8011f82:	0033      	movs	r3, r6
 8011f84:	3314      	adds	r3, #20
 8011f86:	9302      	str	r3, [sp, #8]
 8011f88:	191c      	adds	r4, r3, r4
 8011f8a:	9b04      	ldr	r3, [sp, #16]
 8011f8c:	6827      	ldr	r7, [r4, #0]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	0038      	movs	r0, r7
 8011f92:	1c5d      	adds	r5, r3, #1
 8011f94:	0029      	movs	r1, r5
 8011f96:	9301      	str	r3, [sp, #4]
 8011f98:	f7ee f8d2 	bl	8000140 <__udivsi3>
 8011f9c:	9001      	str	r0, [sp, #4]
 8011f9e:	42af      	cmp	r7, r5
 8011fa0:	d324      	bcc.n	8011fec <quorem+0x8c>
 8011fa2:	2500      	movs	r5, #0
 8011fa4:	46ac      	mov	ip, r5
 8011fa6:	9802      	ldr	r0, [sp, #8]
 8011fa8:	9f05      	ldr	r7, [sp, #20]
 8011faa:	cf08      	ldmia	r7!, {r3}
 8011fac:	9a01      	ldr	r2, [sp, #4]
 8011fae:	b299      	uxth	r1, r3
 8011fb0:	4351      	muls	r1, r2
 8011fb2:	0c1b      	lsrs	r3, r3, #16
 8011fb4:	4353      	muls	r3, r2
 8011fb6:	1949      	adds	r1, r1, r5
 8011fb8:	0c0a      	lsrs	r2, r1, #16
 8011fba:	189b      	adds	r3, r3, r2
 8011fbc:	6802      	ldr	r2, [r0, #0]
 8011fbe:	b289      	uxth	r1, r1
 8011fc0:	b292      	uxth	r2, r2
 8011fc2:	4462      	add	r2, ip
 8011fc4:	1a52      	subs	r2, r2, r1
 8011fc6:	6801      	ldr	r1, [r0, #0]
 8011fc8:	0c1d      	lsrs	r5, r3, #16
 8011fca:	0c09      	lsrs	r1, r1, #16
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	1acb      	subs	r3, r1, r3
 8011fd0:	1411      	asrs	r1, r2, #16
 8011fd2:	185b      	adds	r3, r3, r1
 8011fd4:	1419      	asrs	r1, r3, #16
 8011fd6:	b292      	uxth	r2, r2
 8011fd8:	041b      	lsls	r3, r3, #16
 8011fda:	431a      	orrs	r2, r3
 8011fdc:	9b04      	ldr	r3, [sp, #16]
 8011fde:	468c      	mov	ip, r1
 8011fe0:	c004      	stmia	r0!, {r2}
 8011fe2:	42bb      	cmp	r3, r7
 8011fe4:	d2e1      	bcs.n	8011faa <quorem+0x4a>
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d030      	beq.n	801204e <quorem+0xee>
 8011fec:	0030      	movs	r0, r6
 8011fee:	9903      	ldr	r1, [sp, #12]
 8011ff0:	f001 fb38 	bl	8013664 <__mcmp>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	db21      	blt.n	801203c <quorem+0xdc>
 8011ff8:	0030      	movs	r0, r6
 8011ffa:	2400      	movs	r4, #0
 8011ffc:	9b01      	ldr	r3, [sp, #4]
 8011ffe:	9903      	ldr	r1, [sp, #12]
 8012000:	3301      	adds	r3, #1
 8012002:	9301      	str	r3, [sp, #4]
 8012004:	3014      	adds	r0, #20
 8012006:	3114      	adds	r1, #20
 8012008:	6803      	ldr	r3, [r0, #0]
 801200a:	c920      	ldmia	r1!, {r5}
 801200c:	b29a      	uxth	r2, r3
 801200e:	1914      	adds	r4, r2, r4
 8012010:	b2aa      	uxth	r2, r5
 8012012:	1aa2      	subs	r2, r4, r2
 8012014:	0c1b      	lsrs	r3, r3, #16
 8012016:	0c2d      	lsrs	r5, r5, #16
 8012018:	1414      	asrs	r4, r2, #16
 801201a:	1b5b      	subs	r3, r3, r5
 801201c:	191b      	adds	r3, r3, r4
 801201e:	141c      	asrs	r4, r3, #16
 8012020:	b292      	uxth	r2, r2
 8012022:	041b      	lsls	r3, r3, #16
 8012024:	4313      	orrs	r3, r2
 8012026:	c008      	stmia	r0!, {r3}
 8012028:	9b04      	ldr	r3, [sp, #16]
 801202a:	428b      	cmp	r3, r1
 801202c:	d2ec      	bcs.n	8012008 <quorem+0xa8>
 801202e:	9b00      	ldr	r3, [sp, #0]
 8012030:	9a02      	ldr	r2, [sp, #8]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	18d3      	adds	r3, r2, r3
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	2a00      	cmp	r2, #0
 801203a:	d015      	beq.n	8012068 <quorem+0x108>
 801203c:	9801      	ldr	r0, [sp, #4]
 801203e:	b007      	add	sp, #28
 8012040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d106      	bne.n	8012056 <quorem+0xf6>
 8012048:	9b00      	ldr	r3, [sp, #0]
 801204a:	3b01      	subs	r3, #1
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	9b02      	ldr	r3, [sp, #8]
 8012050:	3c04      	subs	r4, #4
 8012052:	42a3      	cmp	r3, r4
 8012054:	d3f5      	bcc.n	8012042 <quorem+0xe2>
 8012056:	9b00      	ldr	r3, [sp, #0]
 8012058:	6133      	str	r3, [r6, #16]
 801205a:	e7c7      	b.n	8011fec <quorem+0x8c>
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	2a00      	cmp	r2, #0
 8012060:	d106      	bne.n	8012070 <quorem+0x110>
 8012062:	9a00      	ldr	r2, [sp, #0]
 8012064:	3a01      	subs	r2, #1
 8012066:	9200      	str	r2, [sp, #0]
 8012068:	9a02      	ldr	r2, [sp, #8]
 801206a:	3b04      	subs	r3, #4
 801206c:	429a      	cmp	r2, r3
 801206e:	d3f5      	bcc.n	801205c <quorem+0xfc>
 8012070:	9b00      	ldr	r3, [sp, #0]
 8012072:	6133      	str	r3, [r6, #16]
 8012074:	e7e2      	b.n	801203c <quorem+0xdc>
	...

08012078 <_dtoa_r>:
 8012078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207a:	b09d      	sub	sp, #116	; 0x74
 801207c:	9202      	str	r2, [sp, #8]
 801207e:	9303      	str	r3, [sp, #12]
 8012080:	9b02      	ldr	r3, [sp, #8]
 8012082:	9c03      	ldr	r4, [sp, #12]
 8012084:	9308      	str	r3, [sp, #32]
 8012086:	9409      	str	r4, [sp, #36]	; 0x24
 8012088:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801208a:	0007      	movs	r7, r0
 801208c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801208e:	2c00      	cmp	r4, #0
 8012090:	d10e      	bne.n	80120b0 <_dtoa_r+0x38>
 8012092:	2010      	movs	r0, #16
 8012094:	f001 f84c 	bl	8013130 <malloc>
 8012098:	1e02      	subs	r2, r0, #0
 801209a:	6278      	str	r0, [r7, #36]	; 0x24
 801209c:	d104      	bne.n	80120a8 <_dtoa_r+0x30>
 801209e:	21ea      	movs	r1, #234	; 0xea
 80120a0:	4bc7      	ldr	r3, [pc, #796]	; (80123c0 <_dtoa_r+0x348>)
 80120a2:	48c8      	ldr	r0, [pc, #800]	; (80123c4 <_dtoa_r+0x34c>)
 80120a4:	f002 f83a 	bl	801411c <__assert_func>
 80120a8:	6044      	str	r4, [r0, #4]
 80120aa:	6084      	str	r4, [r0, #8]
 80120ac:	6004      	str	r4, [r0, #0]
 80120ae:	60c4      	str	r4, [r0, #12]
 80120b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b2:	6819      	ldr	r1, [r3, #0]
 80120b4:	2900      	cmp	r1, #0
 80120b6:	d00a      	beq.n	80120ce <_dtoa_r+0x56>
 80120b8:	685a      	ldr	r2, [r3, #4]
 80120ba:	2301      	movs	r3, #1
 80120bc:	4093      	lsls	r3, r2
 80120be:	604a      	str	r2, [r1, #4]
 80120c0:	608b      	str	r3, [r1, #8]
 80120c2:	0038      	movs	r0, r7
 80120c4:	f001 f88e 	bl	80131e4 <_Bfree>
 80120c8:	2200      	movs	r2, #0
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	601a      	str	r2, [r3, #0]
 80120ce:	9b03      	ldr	r3, [sp, #12]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	da20      	bge.n	8012116 <_dtoa_r+0x9e>
 80120d4:	2301      	movs	r3, #1
 80120d6:	602b      	str	r3, [r5, #0]
 80120d8:	9b03      	ldr	r3, [sp, #12]
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	085b      	lsrs	r3, r3, #1
 80120de:	9309      	str	r3, [sp, #36]	; 0x24
 80120e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80120e2:	4bb9      	ldr	r3, [pc, #740]	; (80123c8 <_dtoa_r+0x350>)
 80120e4:	4ab8      	ldr	r2, [pc, #736]	; (80123c8 <_dtoa_r+0x350>)
 80120e6:	402b      	ands	r3, r5
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d117      	bne.n	801211c <_dtoa_r+0xa4>
 80120ec:	4bb7      	ldr	r3, [pc, #732]	; (80123cc <_dtoa_r+0x354>)
 80120ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80120f0:	0328      	lsls	r0, r5, #12
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	9b02      	ldr	r3, [sp, #8]
 80120f6:	0b00      	lsrs	r0, r0, #12
 80120f8:	4318      	orrs	r0, r3
 80120fa:	d101      	bne.n	8012100 <_dtoa_r+0x88>
 80120fc:	f000 fdbf 	bl	8012c7e <_dtoa_r+0xc06>
 8012100:	48b3      	ldr	r0, [pc, #716]	; (80123d0 <_dtoa_r+0x358>)
 8012102:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012104:	9006      	str	r0, [sp, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <_dtoa_r+0x98>
 801210a:	4bb2      	ldr	r3, [pc, #712]	; (80123d4 <_dtoa_r+0x35c>)
 801210c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801210e:	6013      	str	r3, [r2, #0]
 8012110:	9806      	ldr	r0, [sp, #24]
 8012112:	b01d      	add	sp, #116	; 0x74
 8012114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012116:	2300      	movs	r3, #0
 8012118:	602b      	str	r3, [r5, #0]
 801211a:	e7e1      	b.n	80120e0 <_dtoa_r+0x68>
 801211c:	9b08      	ldr	r3, [sp, #32]
 801211e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012120:	9312      	str	r3, [sp, #72]	; 0x48
 8012122:	9413      	str	r4, [sp, #76]	; 0x4c
 8012124:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012126:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012128:	2200      	movs	r2, #0
 801212a:	2300      	movs	r3, #0
 801212c:	f7ee f98e 	bl	800044c <__aeabi_dcmpeq>
 8012130:	1e04      	subs	r4, r0, #0
 8012132:	d009      	beq.n	8012148 <_dtoa_r+0xd0>
 8012134:	2301      	movs	r3, #1
 8012136:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012138:	6013      	str	r3, [r2, #0]
 801213a:	4ba7      	ldr	r3, [pc, #668]	; (80123d8 <_dtoa_r+0x360>)
 801213c:	9306      	str	r3, [sp, #24]
 801213e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012140:	2b00      	cmp	r3, #0
 8012142:	d0e5      	beq.n	8012110 <_dtoa_r+0x98>
 8012144:	4ba5      	ldr	r3, [pc, #660]	; (80123dc <_dtoa_r+0x364>)
 8012146:	e7e1      	b.n	801210c <_dtoa_r+0x94>
 8012148:	ab1a      	add	r3, sp, #104	; 0x68
 801214a:	9301      	str	r3, [sp, #4]
 801214c:	ab1b      	add	r3, sp, #108	; 0x6c
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	0038      	movs	r0, r7
 8012152:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012156:	f001 fb39 	bl	80137cc <__d2b>
 801215a:	006e      	lsls	r6, r5, #1
 801215c:	9005      	str	r0, [sp, #20]
 801215e:	0d76      	lsrs	r6, r6, #21
 8012160:	d100      	bne.n	8012164 <_dtoa_r+0xec>
 8012162:	e07c      	b.n	801225e <_dtoa_r+0x1e6>
 8012164:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012166:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801216a:	4a9d      	ldr	r2, [pc, #628]	; (80123e0 <_dtoa_r+0x368>)
 801216c:	031b      	lsls	r3, r3, #12
 801216e:	0b1b      	lsrs	r3, r3, #12
 8012170:	431a      	orrs	r2, r3
 8012172:	0011      	movs	r1, r2
 8012174:	4b9b      	ldr	r3, [pc, #620]	; (80123e4 <_dtoa_r+0x36c>)
 8012176:	9418      	str	r4, [sp, #96]	; 0x60
 8012178:	18f6      	adds	r6, r6, r3
 801217a:	2200      	movs	r2, #0
 801217c:	4b9a      	ldr	r3, [pc, #616]	; (80123e8 <_dtoa_r+0x370>)
 801217e:	f7ef fb3d 	bl	80017fc <__aeabi_dsub>
 8012182:	4a9a      	ldr	r2, [pc, #616]	; (80123ec <_dtoa_r+0x374>)
 8012184:	4b9a      	ldr	r3, [pc, #616]	; (80123f0 <_dtoa_r+0x378>)
 8012186:	f7ef f8cd 	bl	8001324 <__aeabi_dmul>
 801218a:	4a9a      	ldr	r2, [pc, #616]	; (80123f4 <_dtoa_r+0x37c>)
 801218c:	4b9a      	ldr	r3, [pc, #616]	; (80123f8 <_dtoa_r+0x380>)
 801218e:	f7ee f98b 	bl	80004a8 <__aeabi_dadd>
 8012192:	0004      	movs	r4, r0
 8012194:	0030      	movs	r0, r6
 8012196:	000d      	movs	r5, r1
 8012198:	f7ef ff16 	bl	8001fc8 <__aeabi_i2d>
 801219c:	4a97      	ldr	r2, [pc, #604]	; (80123fc <_dtoa_r+0x384>)
 801219e:	4b98      	ldr	r3, [pc, #608]	; (8012400 <_dtoa_r+0x388>)
 80121a0:	f7ef f8c0 	bl	8001324 <__aeabi_dmul>
 80121a4:	0002      	movs	r2, r0
 80121a6:	000b      	movs	r3, r1
 80121a8:	0020      	movs	r0, r4
 80121aa:	0029      	movs	r1, r5
 80121ac:	f7ee f97c 	bl	80004a8 <__aeabi_dadd>
 80121b0:	0004      	movs	r4, r0
 80121b2:	000d      	movs	r5, r1
 80121b4:	f7ef fed2 	bl	8001f5c <__aeabi_d2iz>
 80121b8:	2200      	movs	r2, #0
 80121ba:	9002      	str	r0, [sp, #8]
 80121bc:	2300      	movs	r3, #0
 80121be:	0020      	movs	r0, r4
 80121c0:	0029      	movs	r1, r5
 80121c2:	f7ee f949 	bl	8000458 <__aeabi_dcmplt>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d00b      	beq.n	80121e2 <_dtoa_r+0x16a>
 80121ca:	9802      	ldr	r0, [sp, #8]
 80121cc:	f7ef fefc 	bl	8001fc8 <__aeabi_i2d>
 80121d0:	002b      	movs	r3, r5
 80121d2:	0022      	movs	r2, r4
 80121d4:	f7ee f93a 	bl	800044c <__aeabi_dcmpeq>
 80121d8:	4243      	negs	r3, r0
 80121da:	4158      	adcs	r0, r3
 80121dc:	9b02      	ldr	r3, [sp, #8]
 80121de:	1a1b      	subs	r3, r3, r0
 80121e0:	9302      	str	r3, [sp, #8]
 80121e2:	2301      	movs	r3, #1
 80121e4:	9316      	str	r3, [sp, #88]	; 0x58
 80121e6:	9b02      	ldr	r3, [sp, #8]
 80121e8:	2b16      	cmp	r3, #22
 80121ea:	d80f      	bhi.n	801220c <_dtoa_r+0x194>
 80121ec:	9812      	ldr	r0, [sp, #72]	; 0x48
 80121ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80121f0:	00da      	lsls	r2, r3, #3
 80121f2:	4b84      	ldr	r3, [pc, #528]	; (8012404 <_dtoa_r+0x38c>)
 80121f4:	189b      	adds	r3, r3, r2
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	f7ee f92d 	bl	8000458 <__aeabi_dcmplt>
 80121fe:	2800      	cmp	r0, #0
 8012200:	d049      	beq.n	8012296 <_dtoa_r+0x21e>
 8012202:	9b02      	ldr	r3, [sp, #8]
 8012204:	3b01      	subs	r3, #1
 8012206:	9302      	str	r3, [sp, #8]
 8012208:	2300      	movs	r3, #0
 801220a:	9316      	str	r3, [sp, #88]	; 0x58
 801220c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801220e:	1b9e      	subs	r6, r3, r6
 8012210:	2300      	movs	r3, #0
 8012212:	930a      	str	r3, [sp, #40]	; 0x28
 8012214:	0033      	movs	r3, r6
 8012216:	3b01      	subs	r3, #1
 8012218:	930d      	str	r3, [sp, #52]	; 0x34
 801221a:	d504      	bpl.n	8012226 <_dtoa_r+0x1ae>
 801221c:	2301      	movs	r3, #1
 801221e:	1b9b      	subs	r3, r3, r6
 8012220:	930a      	str	r3, [sp, #40]	; 0x28
 8012222:	2300      	movs	r3, #0
 8012224:	930d      	str	r3, [sp, #52]	; 0x34
 8012226:	9b02      	ldr	r3, [sp, #8]
 8012228:	2b00      	cmp	r3, #0
 801222a:	db36      	blt.n	801229a <_dtoa_r+0x222>
 801222c:	9a02      	ldr	r2, [sp, #8]
 801222e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012230:	4694      	mov	ip, r2
 8012232:	4463      	add	r3, ip
 8012234:	930d      	str	r3, [sp, #52]	; 0x34
 8012236:	2300      	movs	r3, #0
 8012238:	9215      	str	r2, [sp, #84]	; 0x54
 801223a:	930e      	str	r3, [sp, #56]	; 0x38
 801223c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801223e:	2401      	movs	r4, #1
 8012240:	2b09      	cmp	r3, #9
 8012242:	d864      	bhi.n	801230e <_dtoa_r+0x296>
 8012244:	2b05      	cmp	r3, #5
 8012246:	dd02      	ble.n	801224e <_dtoa_r+0x1d6>
 8012248:	2400      	movs	r4, #0
 801224a:	3b04      	subs	r3, #4
 801224c:	9322      	str	r3, [sp, #136]	; 0x88
 801224e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012250:	1e98      	subs	r0, r3, #2
 8012252:	2803      	cmp	r0, #3
 8012254:	d864      	bhi.n	8012320 <_dtoa_r+0x2a8>
 8012256:	f7ed ff5f 	bl	8000118 <__gnu_thumb1_case_uqi>
 801225a:	3829      	.short	0x3829
 801225c:	5836      	.short	0x5836
 801225e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012260:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012262:	189e      	adds	r6, r3, r2
 8012264:	4b68      	ldr	r3, [pc, #416]	; (8012408 <_dtoa_r+0x390>)
 8012266:	18f2      	adds	r2, r6, r3
 8012268:	2a20      	cmp	r2, #32
 801226a:	dd0f      	ble.n	801228c <_dtoa_r+0x214>
 801226c:	2340      	movs	r3, #64	; 0x40
 801226e:	1a9b      	subs	r3, r3, r2
 8012270:	409d      	lsls	r5, r3
 8012272:	4b66      	ldr	r3, [pc, #408]	; (801240c <_dtoa_r+0x394>)
 8012274:	9802      	ldr	r0, [sp, #8]
 8012276:	18f3      	adds	r3, r6, r3
 8012278:	40d8      	lsrs	r0, r3
 801227a:	4328      	orrs	r0, r5
 801227c:	f7ef fed4 	bl	8002028 <__aeabi_ui2d>
 8012280:	2301      	movs	r3, #1
 8012282:	4c63      	ldr	r4, [pc, #396]	; (8012410 <_dtoa_r+0x398>)
 8012284:	3e01      	subs	r6, #1
 8012286:	1909      	adds	r1, r1, r4
 8012288:	9318      	str	r3, [sp, #96]	; 0x60
 801228a:	e776      	b.n	801217a <_dtoa_r+0x102>
 801228c:	2320      	movs	r3, #32
 801228e:	9802      	ldr	r0, [sp, #8]
 8012290:	1a9b      	subs	r3, r3, r2
 8012292:	4098      	lsls	r0, r3
 8012294:	e7f2      	b.n	801227c <_dtoa_r+0x204>
 8012296:	9016      	str	r0, [sp, #88]	; 0x58
 8012298:	e7b8      	b.n	801220c <_dtoa_r+0x194>
 801229a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229c:	9a02      	ldr	r2, [sp, #8]
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	930a      	str	r3, [sp, #40]	; 0x28
 80122a2:	4253      	negs	r3, r2
 80122a4:	930e      	str	r3, [sp, #56]	; 0x38
 80122a6:	2300      	movs	r3, #0
 80122a8:	9315      	str	r3, [sp, #84]	; 0x54
 80122aa:	e7c7      	b.n	801223c <_dtoa_r+0x1c4>
 80122ac:	2300      	movs	r3, #0
 80122ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80122b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80122b2:	930c      	str	r3, [sp, #48]	; 0x30
 80122b4:	9307      	str	r3, [sp, #28]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dc13      	bgt.n	80122e2 <_dtoa_r+0x26a>
 80122ba:	2301      	movs	r3, #1
 80122bc:	001a      	movs	r2, r3
 80122be:	930c      	str	r3, [sp, #48]	; 0x30
 80122c0:	9307      	str	r3, [sp, #28]
 80122c2:	9223      	str	r2, [sp, #140]	; 0x8c
 80122c4:	e00d      	b.n	80122e2 <_dtoa_r+0x26a>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e7f1      	b.n	80122ae <_dtoa_r+0x236>
 80122ca:	2300      	movs	r3, #0
 80122cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80122ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80122d0:	4694      	mov	ip, r2
 80122d2:	9b02      	ldr	r3, [sp, #8]
 80122d4:	4463      	add	r3, ip
 80122d6:	930c      	str	r3, [sp, #48]	; 0x30
 80122d8:	3301      	adds	r3, #1
 80122da:	9307      	str	r3, [sp, #28]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	dc00      	bgt.n	80122e2 <_dtoa_r+0x26a>
 80122e0:	2301      	movs	r3, #1
 80122e2:	2200      	movs	r2, #0
 80122e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122e6:	6042      	str	r2, [r0, #4]
 80122e8:	3204      	adds	r2, #4
 80122ea:	0015      	movs	r5, r2
 80122ec:	3514      	adds	r5, #20
 80122ee:	6841      	ldr	r1, [r0, #4]
 80122f0:	429d      	cmp	r5, r3
 80122f2:	d919      	bls.n	8012328 <_dtoa_r+0x2b0>
 80122f4:	0038      	movs	r0, r7
 80122f6:	f000 ff31 	bl	801315c <_Balloc>
 80122fa:	9006      	str	r0, [sp, #24]
 80122fc:	2800      	cmp	r0, #0
 80122fe:	d117      	bne.n	8012330 <_dtoa_r+0x2b8>
 8012300:	21d5      	movs	r1, #213	; 0xd5
 8012302:	0002      	movs	r2, r0
 8012304:	4b43      	ldr	r3, [pc, #268]	; (8012414 <_dtoa_r+0x39c>)
 8012306:	0049      	lsls	r1, r1, #1
 8012308:	e6cb      	b.n	80120a2 <_dtoa_r+0x2a>
 801230a:	2301      	movs	r3, #1
 801230c:	e7de      	b.n	80122cc <_dtoa_r+0x254>
 801230e:	2300      	movs	r3, #0
 8012310:	940f      	str	r4, [sp, #60]	; 0x3c
 8012312:	9322      	str	r3, [sp, #136]	; 0x88
 8012314:	3b01      	subs	r3, #1
 8012316:	930c      	str	r3, [sp, #48]	; 0x30
 8012318:	9307      	str	r3, [sp, #28]
 801231a:	2200      	movs	r2, #0
 801231c:	3313      	adds	r3, #19
 801231e:	e7d0      	b.n	80122c2 <_dtoa_r+0x24a>
 8012320:	2301      	movs	r3, #1
 8012322:	930f      	str	r3, [sp, #60]	; 0x3c
 8012324:	3b02      	subs	r3, #2
 8012326:	e7f6      	b.n	8012316 <_dtoa_r+0x29e>
 8012328:	3101      	adds	r1, #1
 801232a:	6041      	str	r1, [r0, #4]
 801232c:	0052      	lsls	r2, r2, #1
 801232e:	e7dc      	b.n	80122ea <_dtoa_r+0x272>
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	9a06      	ldr	r2, [sp, #24]
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	9b07      	ldr	r3, [sp, #28]
 8012338:	2b0e      	cmp	r3, #14
 801233a:	d900      	bls.n	801233e <_dtoa_r+0x2c6>
 801233c:	e0eb      	b.n	8012516 <_dtoa_r+0x49e>
 801233e:	2c00      	cmp	r4, #0
 8012340:	d100      	bne.n	8012344 <_dtoa_r+0x2cc>
 8012342:	e0e8      	b.n	8012516 <_dtoa_r+0x49e>
 8012344:	9b02      	ldr	r3, [sp, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	dd68      	ble.n	801241c <_dtoa_r+0x3a4>
 801234a:	001a      	movs	r2, r3
 801234c:	210f      	movs	r1, #15
 801234e:	4b2d      	ldr	r3, [pc, #180]	; (8012404 <_dtoa_r+0x38c>)
 8012350:	400a      	ands	r2, r1
 8012352:	00d2      	lsls	r2, r2, #3
 8012354:	189b      	adds	r3, r3, r2
 8012356:	681d      	ldr	r5, [r3, #0]
 8012358:	685e      	ldr	r6, [r3, #4]
 801235a:	9b02      	ldr	r3, [sp, #8]
 801235c:	111c      	asrs	r4, r3, #4
 801235e:	2302      	movs	r3, #2
 8012360:	9310      	str	r3, [sp, #64]	; 0x40
 8012362:	9b02      	ldr	r3, [sp, #8]
 8012364:	05db      	lsls	r3, r3, #23
 8012366:	d50b      	bpl.n	8012380 <_dtoa_r+0x308>
 8012368:	4b2b      	ldr	r3, [pc, #172]	; (8012418 <_dtoa_r+0x3a0>)
 801236a:	400c      	ands	r4, r1
 801236c:	6a1a      	ldr	r2, [r3, #32]
 801236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012370:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012372:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012374:	f7ee fbd4 	bl	8000b20 <__aeabi_ddiv>
 8012378:	2303      	movs	r3, #3
 801237a:	9008      	str	r0, [sp, #32]
 801237c:	9109      	str	r1, [sp, #36]	; 0x24
 801237e:	9310      	str	r3, [sp, #64]	; 0x40
 8012380:	4b25      	ldr	r3, [pc, #148]	; (8012418 <_dtoa_r+0x3a0>)
 8012382:	9314      	str	r3, [sp, #80]	; 0x50
 8012384:	2c00      	cmp	r4, #0
 8012386:	d108      	bne.n	801239a <_dtoa_r+0x322>
 8012388:	9808      	ldr	r0, [sp, #32]
 801238a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801238c:	002a      	movs	r2, r5
 801238e:	0033      	movs	r3, r6
 8012390:	f7ee fbc6 	bl	8000b20 <__aeabi_ddiv>
 8012394:	9008      	str	r0, [sp, #32]
 8012396:	9109      	str	r1, [sp, #36]	; 0x24
 8012398:	e05c      	b.n	8012454 <_dtoa_r+0x3dc>
 801239a:	2301      	movs	r3, #1
 801239c:	421c      	tst	r4, r3
 801239e:	d00b      	beq.n	80123b8 <_dtoa_r+0x340>
 80123a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123a2:	0028      	movs	r0, r5
 80123a4:	3301      	adds	r3, #1
 80123a6:	9310      	str	r3, [sp, #64]	; 0x40
 80123a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123aa:	0031      	movs	r1, r6
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	685b      	ldr	r3, [r3, #4]
 80123b0:	f7ee ffb8 	bl	8001324 <__aeabi_dmul>
 80123b4:	0005      	movs	r5, r0
 80123b6:	000e      	movs	r6, r1
 80123b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80123ba:	1064      	asrs	r4, r4, #1
 80123bc:	3308      	adds	r3, #8
 80123be:	e7e0      	b.n	8012382 <_dtoa_r+0x30a>
 80123c0:	08014fee 	.word	0x08014fee
 80123c4:	08015005 	.word	0x08015005
 80123c8:	7ff00000 	.word	0x7ff00000
 80123cc:	0000270f 	.word	0x0000270f
 80123d0:	08014fea 	.word	0x08014fea
 80123d4:	08014fed 	.word	0x08014fed
 80123d8:	08014ebc 	.word	0x08014ebc
 80123dc:	08014ebd 	.word	0x08014ebd
 80123e0:	3ff00000 	.word	0x3ff00000
 80123e4:	fffffc01 	.word	0xfffffc01
 80123e8:	3ff80000 	.word	0x3ff80000
 80123ec:	636f4361 	.word	0x636f4361
 80123f0:	3fd287a7 	.word	0x3fd287a7
 80123f4:	8b60c8b3 	.word	0x8b60c8b3
 80123f8:	3fc68a28 	.word	0x3fc68a28
 80123fc:	509f79fb 	.word	0x509f79fb
 8012400:	3fd34413 	.word	0x3fd34413
 8012404:	08015158 	.word	0x08015158
 8012408:	00000432 	.word	0x00000432
 801240c:	00000412 	.word	0x00000412
 8012410:	fe100000 	.word	0xfe100000
 8012414:	08015060 	.word	0x08015060
 8012418:	08015130 	.word	0x08015130
 801241c:	2302      	movs	r3, #2
 801241e:	9310      	str	r3, [sp, #64]	; 0x40
 8012420:	9b02      	ldr	r3, [sp, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d016      	beq.n	8012454 <_dtoa_r+0x3dc>
 8012426:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012428:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801242a:	425c      	negs	r4, r3
 801242c:	230f      	movs	r3, #15
 801242e:	4ab6      	ldr	r2, [pc, #728]	; (8012708 <_dtoa_r+0x690>)
 8012430:	4023      	ands	r3, r4
 8012432:	00db      	lsls	r3, r3, #3
 8012434:	18d3      	adds	r3, r2, r3
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	f7ee ff73 	bl	8001324 <__aeabi_dmul>
 801243e:	2601      	movs	r6, #1
 8012440:	2300      	movs	r3, #0
 8012442:	9008      	str	r0, [sp, #32]
 8012444:	9109      	str	r1, [sp, #36]	; 0x24
 8012446:	4db1      	ldr	r5, [pc, #708]	; (801270c <_dtoa_r+0x694>)
 8012448:	1124      	asrs	r4, r4, #4
 801244a:	2c00      	cmp	r4, #0
 801244c:	d000      	beq.n	8012450 <_dtoa_r+0x3d8>
 801244e:	e094      	b.n	801257a <_dtoa_r+0x502>
 8012450:	2b00      	cmp	r3, #0
 8012452:	d19f      	bne.n	8012394 <_dtoa_r+0x31c>
 8012454:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012456:	2b00      	cmp	r3, #0
 8012458:	d100      	bne.n	801245c <_dtoa_r+0x3e4>
 801245a:	e09b      	b.n	8012594 <_dtoa_r+0x51c>
 801245c:	9c08      	ldr	r4, [sp, #32]
 801245e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012460:	2200      	movs	r2, #0
 8012462:	0020      	movs	r0, r4
 8012464:	0029      	movs	r1, r5
 8012466:	4baa      	ldr	r3, [pc, #680]	; (8012710 <_dtoa_r+0x698>)
 8012468:	f7ed fff6 	bl	8000458 <__aeabi_dcmplt>
 801246c:	2800      	cmp	r0, #0
 801246e:	d100      	bne.n	8012472 <_dtoa_r+0x3fa>
 8012470:	e090      	b.n	8012594 <_dtoa_r+0x51c>
 8012472:	9b07      	ldr	r3, [sp, #28]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d100      	bne.n	801247a <_dtoa_r+0x402>
 8012478:	e08c      	b.n	8012594 <_dtoa_r+0x51c>
 801247a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801247c:	2b00      	cmp	r3, #0
 801247e:	dd46      	ble.n	801250e <_dtoa_r+0x496>
 8012480:	9b02      	ldr	r3, [sp, #8]
 8012482:	2200      	movs	r2, #0
 8012484:	0020      	movs	r0, r4
 8012486:	0029      	movs	r1, r5
 8012488:	1e5e      	subs	r6, r3, #1
 801248a:	4ba2      	ldr	r3, [pc, #648]	; (8012714 <_dtoa_r+0x69c>)
 801248c:	f7ee ff4a 	bl	8001324 <__aeabi_dmul>
 8012490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012492:	9008      	str	r0, [sp, #32]
 8012494:	9109      	str	r1, [sp, #36]	; 0x24
 8012496:	3301      	adds	r3, #1
 8012498:	9310      	str	r3, [sp, #64]	; 0x40
 801249a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801249c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801249e:	9c08      	ldr	r4, [sp, #32]
 80124a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80124a2:	9314      	str	r3, [sp, #80]	; 0x50
 80124a4:	f7ef fd90 	bl	8001fc8 <__aeabi_i2d>
 80124a8:	0022      	movs	r2, r4
 80124aa:	002b      	movs	r3, r5
 80124ac:	f7ee ff3a 	bl	8001324 <__aeabi_dmul>
 80124b0:	2200      	movs	r2, #0
 80124b2:	4b99      	ldr	r3, [pc, #612]	; (8012718 <_dtoa_r+0x6a0>)
 80124b4:	f7ed fff8 	bl	80004a8 <__aeabi_dadd>
 80124b8:	9010      	str	r0, [sp, #64]	; 0x40
 80124ba:	9111      	str	r1, [sp, #68]	; 0x44
 80124bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124c0:	9208      	str	r2, [sp, #32]
 80124c2:	9309      	str	r3, [sp, #36]	; 0x24
 80124c4:	4a95      	ldr	r2, [pc, #596]	; (801271c <_dtoa_r+0x6a4>)
 80124c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124c8:	4694      	mov	ip, r2
 80124ca:	4463      	add	r3, ip
 80124cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80124ce:	9309      	str	r3, [sp, #36]	; 0x24
 80124d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d161      	bne.n	801259a <_dtoa_r+0x522>
 80124d6:	2200      	movs	r2, #0
 80124d8:	0020      	movs	r0, r4
 80124da:	0029      	movs	r1, r5
 80124dc:	4b90      	ldr	r3, [pc, #576]	; (8012720 <_dtoa_r+0x6a8>)
 80124de:	f7ef f98d 	bl	80017fc <__aeabi_dsub>
 80124e2:	9a08      	ldr	r2, [sp, #32]
 80124e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124e6:	0004      	movs	r4, r0
 80124e8:	000d      	movs	r5, r1
 80124ea:	f7ed ffc9 	bl	8000480 <__aeabi_dcmpgt>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d000      	beq.n	80124f4 <_dtoa_r+0x47c>
 80124f2:	e2af      	b.n	8012a54 <_dtoa_r+0x9dc>
 80124f4:	488b      	ldr	r0, [pc, #556]	; (8012724 <_dtoa_r+0x6ac>)
 80124f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80124f8:	4684      	mov	ip, r0
 80124fa:	4461      	add	r1, ip
 80124fc:	000b      	movs	r3, r1
 80124fe:	0020      	movs	r0, r4
 8012500:	0029      	movs	r1, r5
 8012502:	9a08      	ldr	r2, [sp, #32]
 8012504:	f7ed ffa8 	bl	8000458 <__aeabi_dcmplt>
 8012508:	2800      	cmp	r0, #0
 801250a:	d000      	beq.n	801250e <_dtoa_r+0x496>
 801250c:	e29f      	b.n	8012a4e <_dtoa_r+0x9d6>
 801250e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012510:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012512:	9308      	str	r3, [sp, #32]
 8012514:	9409      	str	r4, [sp, #36]	; 0x24
 8012516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012518:	2b00      	cmp	r3, #0
 801251a:	da00      	bge.n	801251e <_dtoa_r+0x4a6>
 801251c:	e172      	b.n	8012804 <_dtoa_r+0x78c>
 801251e:	9a02      	ldr	r2, [sp, #8]
 8012520:	2a0e      	cmp	r2, #14
 8012522:	dd00      	ble.n	8012526 <_dtoa_r+0x4ae>
 8012524:	e16e      	b.n	8012804 <_dtoa_r+0x78c>
 8012526:	4b78      	ldr	r3, [pc, #480]	; (8012708 <_dtoa_r+0x690>)
 8012528:	00d2      	lsls	r2, r2, #3
 801252a:	189b      	adds	r3, r3, r2
 801252c:	685c      	ldr	r4, [r3, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	930a      	str	r3, [sp, #40]	; 0x28
 8012532:	940b      	str	r4, [sp, #44]	; 0x2c
 8012534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012536:	2b00      	cmp	r3, #0
 8012538:	db00      	blt.n	801253c <_dtoa_r+0x4c4>
 801253a:	e0f7      	b.n	801272c <_dtoa_r+0x6b4>
 801253c:	9b07      	ldr	r3, [sp, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	dd00      	ble.n	8012544 <_dtoa_r+0x4cc>
 8012542:	e0f3      	b.n	801272c <_dtoa_r+0x6b4>
 8012544:	d000      	beq.n	8012548 <_dtoa_r+0x4d0>
 8012546:	e282      	b.n	8012a4e <_dtoa_r+0x9d6>
 8012548:	980a      	ldr	r0, [sp, #40]	; 0x28
 801254a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801254c:	2200      	movs	r2, #0
 801254e:	4b74      	ldr	r3, [pc, #464]	; (8012720 <_dtoa_r+0x6a8>)
 8012550:	f7ee fee8 	bl	8001324 <__aeabi_dmul>
 8012554:	9a08      	ldr	r2, [sp, #32]
 8012556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012558:	f7ed ff9c 	bl	8000494 <__aeabi_dcmpge>
 801255c:	9e07      	ldr	r6, [sp, #28]
 801255e:	0035      	movs	r5, r6
 8012560:	2800      	cmp	r0, #0
 8012562:	d000      	beq.n	8012566 <_dtoa_r+0x4ee>
 8012564:	e259      	b.n	8012a1a <_dtoa_r+0x9a2>
 8012566:	9b06      	ldr	r3, [sp, #24]
 8012568:	9a06      	ldr	r2, [sp, #24]
 801256a:	3301      	adds	r3, #1
 801256c:	9308      	str	r3, [sp, #32]
 801256e:	2331      	movs	r3, #49	; 0x31
 8012570:	7013      	strb	r3, [r2, #0]
 8012572:	9b02      	ldr	r3, [sp, #8]
 8012574:	3301      	adds	r3, #1
 8012576:	9302      	str	r3, [sp, #8]
 8012578:	e254      	b.n	8012a24 <_dtoa_r+0x9ac>
 801257a:	4234      	tst	r4, r6
 801257c:	d007      	beq.n	801258e <_dtoa_r+0x516>
 801257e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012580:	3301      	adds	r3, #1
 8012582:	9310      	str	r3, [sp, #64]	; 0x40
 8012584:	682a      	ldr	r2, [r5, #0]
 8012586:	686b      	ldr	r3, [r5, #4]
 8012588:	f7ee fecc 	bl	8001324 <__aeabi_dmul>
 801258c:	0033      	movs	r3, r6
 801258e:	1064      	asrs	r4, r4, #1
 8012590:	3508      	adds	r5, #8
 8012592:	e75a      	b.n	801244a <_dtoa_r+0x3d2>
 8012594:	9e02      	ldr	r6, [sp, #8]
 8012596:	9b07      	ldr	r3, [sp, #28]
 8012598:	e780      	b.n	801249c <_dtoa_r+0x424>
 801259a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801259c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801259e:	1e5a      	subs	r2, r3, #1
 80125a0:	4b59      	ldr	r3, [pc, #356]	; (8012708 <_dtoa_r+0x690>)
 80125a2:	00d2      	lsls	r2, r2, #3
 80125a4:	189b      	adds	r3, r3, r2
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	2900      	cmp	r1, #0
 80125ac:	d051      	beq.n	8012652 <_dtoa_r+0x5da>
 80125ae:	2000      	movs	r0, #0
 80125b0:	495d      	ldr	r1, [pc, #372]	; (8012728 <_dtoa_r+0x6b0>)
 80125b2:	f7ee fab5 	bl	8000b20 <__aeabi_ddiv>
 80125b6:	9a08      	ldr	r2, [sp, #32]
 80125b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ba:	f7ef f91f 	bl	80017fc <__aeabi_dsub>
 80125be:	9a06      	ldr	r2, [sp, #24]
 80125c0:	9b06      	ldr	r3, [sp, #24]
 80125c2:	4694      	mov	ip, r2
 80125c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80125c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125c8:	9010      	str	r0, [sp, #64]	; 0x40
 80125ca:	9111      	str	r1, [sp, #68]	; 0x44
 80125cc:	4463      	add	r3, ip
 80125ce:	9319      	str	r3, [sp, #100]	; 0x64
 80125d0:	0029      	movs	r1, r5
 80125d2:	0020      	movs	r0, r4
 80125d4:	f7ef fcc2 	bl	8001f5c <__aeabi_d2iz>
 80125d8:	9014      	str	r0, [sp, #80]	; 0x50
 80125da:	f7ef fcf5 	bl	8001fc8 <__aeabi_i2d>
 80125de:	0002      	movs	r2, r0
 80125e0:	000b      	movs	r3, r1
 80125e2:	0020      	movs	r0, r4
 80125e4:	0029      	movs	r1, r5
 80125e6:	f7ef f909 	bl	80017fc <__aeabi_dsub>
 80125ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80125ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80125ee:	3301      	adds	r3, #1
 80125f0:	9308      	str	r3, [sp, #32]
 80125f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125f4:	0004      	movs	r4, r0
 80125f6:	3330      	adds	r3, #48	; 0x30
 80125f8:	7013      	strb	r3, [r2, #0]
 80125fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125fe:	000d      	movs	r5, r1
 8012600:	f7ed ff2a 	bl	8000458 <__aeabi_dcmplt>
 8012604:	2800      	cmp	r0, #0
 8012606:	d175      	bne.n	80126f4 <_dtoa_r+0x67c>
 8012608:	0022      	movs	r2, r4
 801260a:	002b      	movs	r3, r5
 801260c:	2000      	movs	r0, #0
 801260e:	4940      	ldr	r1, [pc, #256]	; (8012710 <_dtoa_r+0x698>)
 8012610:	f7ef f8f4 	bl	80017fc <__aeabi_dsub>
 8012614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012618:	f7ed ff1e 	bl	8000458 <__aeabi_dcmplt>
 801261c:	2800      	cmp	r0, #0
 801261e:	d000      	beq.n	8012622 <_dtoa_r+0x5aa>
 8012620:	e0d2      	b.n	80127c8 <_dtoa_r+0x750>
 8012622:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012624:	9a08      	ldr	r2, [sp, #32]
 8012626:	4293      	cmp	r3, r2
 8012628:	d100      	bne.n	801262c <_dtoa_r+0x5b4>
 801262a:	e770      	b.n	801250e <_dtoa_r+0x496>
 801262c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801262e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012630:	2200      	movs	r2, #0
 8012632:	4b38      	ldr	r3, [pc, #224]	; (8012714 <_dtoa_r+0x69c>)
 8012634:	f7ee fe76 	bl	8001324 <__aeabi_dmul>
 8012638:	4b36      	ldr	r3, [pc, #216]	; (8012714 <_dtoa_r+0x69c>)
 801263a:	9010      	str	r0, [sp, #64]	; 0x40
 801263c:	9111      	str	r1, [sp, #68]	; 0x44
 801263e:	2200      	movs	r2, #0
 8012640:	0020      	movs	r0, r4
 8012642:	0029      	movs	r1, r5
 8012644:	f7ee fe6e 	bl	8001324 <__aeabi_dmul>
 8012648:	9b08      	ldr	r3, [sp, #32]
 801264a:	0004      	movs	r4, r0
 801264c:	000d      	movs	r5, r1
 801264e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012650:	e7be      	b.n	80125d0 <_dtoa_r+0x558>
 8012652:	9808      	ldr	r0, [sp, #32]
 8012654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012656:	f7ee fe65 	bl	8001324 <__aeabi_dmul>
 801265a:	9a06      	ldr	r2, [sp, #24]
 801265c:	9b06      	ldr	r3, [sp, #24]
 801265e:	4694      	mov	ip, r2
 8012660:	9308      	str	r3, [sp, #32]
 8012662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012664:	9010      	str	r0, [sp, #64]	; 0x40
 8012666:	9111      	str	r1, [sp, #68]	; 0x44
 8012668:	4463      	add	r3, ip
 801266a:	9319      	str	r3, [sp, #100]	; 0x64
 801266c:	0029      	movs	r1, r5
 801266e:	0020      	movs	r0, r4
 8012670:	f7ef fc74 	bl	8001f5c <__aeabi_d2iz>
 8012674:	9017      	str	r0, [sp, #92]	; 0x5c
 8012676:	f7ef fca7 	bl	8001fc8 <__aeabi_i2d>
 801267a:	0002      	movs	r2, r0
 801267c:	000b      	movs	r3, r1
 801267e:	0020      	movs	r0, r4
 8012680:	0029      	movs	r1, r5
 8012682:	f7ef f8bb 	bl	80017fc <__aeabi_dsub>
 8012686:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012688:	9a08      	ldr	r2, [sp, #32]
 801268a:	3330      	adds	r3, #48	; 0x30
 801268c:	7013      	strb	r3, [r2, #0]
 801268e:	0013      	movs	r3, r2
 8012690:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012692:	3301      	adds	r3, #1
 8012694:	0004      	movs	r4, r0
 8012696:	000d      	movs	r5, r1
 8012698:	9308      	str	r3, [sp, #32]
 801269a:	4293      	cmp	r3, r2
 801269c:	d12c      	bne.n	80126f8 <_dtoa_r+0x680>
 801269e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80126a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80126a2:	9a06      	ldr	r2, [sp, #24]
 80126a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126a6:	4694      	mov	ip, r2
 80126a8:	4463      	add	r3, ip
 80126aa:	2200      	movs	r2, #0
 80126ac:	9308      	str	r3, [sp, #32]
 80126ae:	4b1e      	ldr	r3, [pc, #120]	; (8012728 <_dtoa_r+0x6b0>)
 80126b0:	f7ed fefa 	bl	80004a8 <__aeabi_dadd>
 80126b4:	0002      	movs	r2, r0
 80126b6:	000b      	movs	r3, r1
 80126b8:	0020      	movs	r0, r4
 80126ba:	0029      	movs	r1, r5
 80126bc:	f7ed fee0 	bl	8000480 <__aeabi_dcmpgt>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d000      	beq.n	80126c6 <_dtoa_r+0x64e>
 80126c4:	e080      	b.n	80127c8 <_dtoa_r+0x750>
 80126c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126ca:	2000      	movs	r0, #0
 80126cc:	4916      	ldr	r1, [pc, #88]	; (8012728 <_dtoa_r+0x6b0>)
 80126ce:	f7ef f895 	bl	80017fc <__aeabi_dsub>
 80126d2:	0002      	movs	r2, r0
 80126d4:	000b      	movs	r3, r1
 80126d6:	0020      	movs	r0, r4
 80126d8:	0029      	movs	r1, r5
 80126da:	f7ed febd 	bl	8000458 <__aeabi_dcmplt>
 80126de:	2800      	cmp	r0, #0
 80126e0:	d100      	bne.n	80126e4 <_dtoa_r+0x66c>
 80126e2:	e714      	b.n	801250e <_dtoa_r+0x496>
 80126e4:	9b08      	ldr	r3, [sp, #32]
 80126e6:	001a      	movs	r2, r3
 80126e8:	3a01      	subs	r2, #1
 80126ea:	9208      	str	r2, [sp, #32]
 80126ec:	7812      	ldrb	r2, [r2, #0]
 80126ee:	2a30      	cmp	r2, #48	; 0x30
 80126f0:	d0f8      	beq.n	80126e4 <_dtoa_r+0x66c>
 80126f2:	9308      	str	r3, [sp, #32]
 80126f4:	9602      	str	r6, [sp, #8]
 80126f6:	e055      	b.n	80127a4 <_dtoa_r+0x72c>
 80126f8:	2200      	movs	r2, #0
 80126fa:	4b06      	ldr	r3, [pc, #24]	; (8012714 <_dtoa_r+0x69c>)
 80126fc:	f7ee fe12 	bl	8001324 <__aeabi_dmul>
 8012700:	0004      	movs	r4, r0
 8012702:	000d      	movs	r5, r1
 8012704:	e7b2      	b.n	801266c <_dtoa_r+0x5f4>
 8012706:	46c0      	nop			; (mov r8, r8)
 8012708:	08015158 	.word	0x08015158
 801270c:	08015130 	.word	0x08015130
 8012710:	3ff00000 	.word	0x3ff00000
 8012714:	40240000 	.word	0x40240000
 8012718:	401c0000 	.word	0x401c0000
 801271c:	fcc00000 	.word	0xfcc00000
 8012720:	40140000 	.word	0x40140000
 8012724:	7cc00000 	.word	0x7cc00000
 8012728:	3fe00000 	.word	0x3fe00000
 801272c:	9b07      	ldr	r3, [sp, #28]
 801272e:	9e06      	ldr	r6, [sp, #24]
 8012730:	3b01      	subs	r3, #1
 8012732:	199b      	adds	r3, r3, r6
 8012734:	930c      	str	r3, [sp, #48]	; 0x30
 8012736:	9c08      	ldr	r4, [sp, #32]
 8012738:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801273a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801273c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801273e:	0020      	movs	r0, r4
 8012740:	0029      	movs	r1, r5
 8012742:	f7ee f9ed 	bl	8000b20 <__aeabi_ddiv>
 8012746:	f7ef fc09 	bl	8001f5c <__aeabi_d2iz>
 801274a:	9007      	str	r0, [sp, #28]
 801274c:	f7ef fc3c 	bl	8001fc8 <__aeabi_i2d>
 8012750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012754:	f7ee fde6 	bl	8001324 <__aeabi_dmul>
 8012758:	0002      	movs	r2, r0
 801275a:	000b      	movs	r3, r1
 801275c:	0020      	movs	r0, r4
 801275e:	0029      	movs	r1, r5
 8012760:	f7ef f84c 	bl	80017fc <__aeabi_dsub>
 8012764:	0033      	movs	r3, r6
 8012766:	9a07      	ldr	r2, [sp, #28]
 8012768:	3601      	adds	r6, #1
 801276a:	3230      	adds	r2, #48	; 0x30
 801276c:	701a      	strb	r2, [r3, #0]
 801276e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012770:	9608      	str	r6, [sp, #32]
 8012772:	429a      	cmp	r2, r3
 8012774:	d139      	bne.n	80127ea <_dtoa_r+0x772>
 8012776:	0002      	movs	r2, r0
 8012778:	000b      	movs	r3, r1
 801277a:	f7ed fe95 	bl	80004a8 <__aeabi_dadd>
 801277e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012782:	0004      	movs	r4, r0
 8012784:	000d      	movs	r5, r1
 8012786:	f7ed fe7b 	bl	8000480 <__aeabi_dcmpgt>
 801278a:	2800      	cmp	r0, #0
 801278c:	d11b      	bne.n	80127c6 <_dtoa_r+0x74e>
 801278e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012792:	0020      	movs	r0, r4
 8012794:	0029      	movs	r1, r5
 8012796:	f7ed fe59 	bl	800044c <__aeabi_dcmpeq>
 801279a:	2800      	cmp	r0, #0
 801279c:	d002      	beq.n	80127a4 <_dtoa_r+0x72c>
 801279e:	9b07      	ldr	r3, [sp, #28]
 80127a0:	07db      	lsls	r3, r3, #31
 80127a2:	d410      	bmi.n	80127c6 <_dtoa_r+0x74e>
 80127a4:	0038      	movs	r0, r7
 80127a6:	9905      	ldr	r1, [sp, #20]
 80127a8:	f000 fd1c 	bl	80131e4 <_Bfree>
 80127ac:	2300      	movs	r3, #0
 80127ae:	9a08      	ldr	r2, [sp, #32]
 80127b0:	9802      	ldr	r0, [sp, #8]
 80127b2:	7013      	strb	r3, [r2, #0]
 80127b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80127b6:	3001      	adds	r0, #1
 80127b8:	6018      	str	r0, [r3, #0]
 80127ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d100      	bne.n	80127c2 <_dtoa_r+0x74a>
 80127c0:	e4a6      	b.n	8012110 <_dtoa_r+0x98>
 80127c2:	601a      	str	r2, [r3, #0]
 80127c4:	e4a4      	b.n	8012110 <_dtoa_r+0x98>
 80127c6:	9e02      	ldr	r6, [sp, #8]
 80127c8:	9b08      	ldr	r3, [sp, #32]
 80127ca:	9308      	str	r3, [sp, #32]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	781a      	ldrb	r2, [r3, #0]
 80127d0:	2a39      	cmp	r2, #57	; 0x39
 80127d2:	d106      	bne.n	80127e2 <_dtoa_r+0x76a>
 80127d4:	9a06      	ldr	r2, [sp, #24]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d1f7      	bne.n	80127ca <_dtoa_r+0x752>
 80127da:	2230      	movs	r2, #48	; 0x30
 80127dc:	9906      	ldr	r1, [sp, #24]
 80127de:	3601      	adds	r6, #1
 80127e0:	700a      	strb	r2, [r1, #0]
 80127e2:	781a      	ldrb	r2, [r3, #0]
 80127e4:	3201      	adds	r2, #1
 80127e6:	701a      	strb	r2, [r3, #0]
 80127e8:	e784      	b.n	80126f4 <_dtoa_r+0x67c>
 80127ea:	2200      	movs	r2, #0
 80127ec:	4baa      	ldr	r3, [pc, #680]	; (8012a98 <_dtoa_r+0xa20>)
 80127ee:	f7ee fd99 	bl	8001324 <__aeabi_dmul>
 80127f2:	2200      	movs	r2, #0
 80127f4:	2300      	movs	r3, #0
 80127f6:	0004      	movs	r4, r0
 80127f8:	000d      	movs	r5, r1
 80127fa:	f7ed fe27 	bl	800044c <__aeabi_dcmpeq>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d09b      	beq.n	801273a <_dtoa_r+0x6c2>
 8012802:	e7cf      	b.n	80127a4 <_dtoa_r+0x72c>
 8012804:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012806:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801280a:	2d00      	cmp	r5, #0
 801280c:	d012      	beq.n	8012834 <_dtoa_r+0x7bc>
 801280e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012810:	2a01      	cmp	r2, #1
 8012812:	dc66      	bgt.n	80128e2 <_dtoa_r+0x86a>
 8012814:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012816:	2a00      	cmp	r2, #0
 8012818:	d05d      	beq.n	80128d6 <_dtoa_r+0x85e>
 801281a:	4aa0      	ldr	r2, [pc, #640]	; (8012a9c <_dtoa_r+0xa24>)
 801281c:	189b      	adds	r3, r3, r2
 801281e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012820:	2101      	movs	r1, #1
 8012822:	18d2      	adds	r2, r2, r3
 8012824:	920a      	str	r2, [sp, #40]	; 0x28
 8012826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012828:	0038      	movs	r0, r7
 801282a:	18d3      	adds	r3, r2, r3
 801282c:	930d      	str	r3, [sp, #52]	; 0x34
 801282e:	f000 fd89 	bl	8013344 <__i2b>
 8012832:	0005      	movs	r5, r0
 8012834:	2c00      	cmp	r4, #0
 8012836:	dd0e      	ble.n	8012856 <_dtoa_r+0x7de>
 8012838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801283a:	2b00      	cmp	r3, #0
 801283c:	dd0b      	ble.n	8012856 <_dtoa_r+0x7de>
 801283e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012840:	0023      	movs	r3, r4
 8012842:	4294      	cmp	r4, r2
 8012844:	dd00      	ble.n	8012848 <_dtoa_r+0x7d0>
 8012846:	0013      	movs	r3, r2
 8012848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801284a:	1ae4      	subs	r4, r4, r3
 801284c:	1ad2      	subs	r2, r2, r3
 801284e:	920a      	str	r2, [sp, #40]	; 0x28
 8012850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012852:	1ad3      	subs	r3, r2, r3
 8012854:	930d      	str	r3, [sp, #52]	; 0x34
 8012856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012858:	2b00      	cmp	r3, #0
 801285a:	d01f      	beq.n	801289c <_dtoa_r+0x824>
 801285c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801285e:	2b00      	cmp	r3, #0
 8012860:	d054      	beq.n	801290c <_dtoa_r+0x894>
 8012862:	2e00      	cmp	r6, #0
 8012864:	dd11      	ble.n	801288a <_dtoa_r+0x812>
 8012866:	0029      	movs	r1, r5
 8012868:	0032      	movs	r2, r6
 801286a:	0038      	movs	r0, r7
 801286c:	f000 fe30 	bl	80134d0 <__pow5mult>
 8012870:	9a05      	ldr	r2, [sp, #20]
 8012872:	0001      	movs	r1, r0
 8012874:	0005      	movs	r5, r0
 8012876:	0038      	movs	r0, r7
 8012878:	f000 fd7a 	bl	8013370 <__multiply>
 801287c:	9905      	ldr	r1, [sp, #20]
 801287e:	9014      	str	r0, [sp, #80]	; 0x50
 8012880:	0038      	movs	r0, r7
 8012882:	f000 fcaf 	bl	80131e4 <_Bfree>
 8012886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012888:	9305      	str	r3, [sp, #20]
 801288a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801288c:	1b9a      	subs	r2, r3, r6
 801288e:	42b3      	cmp	r3, r6
 8012890:	d004      	beq.n	801289c <_dtoa_r+0x824>
 8012892:	0038      	movs	r0, r7
 8012894:	9905      	ldr	r1, [sp, #20]
 8012896:	f000 fe1b 	bl	80134d0 <__pow5mult>
 801289a:	9005      	str	r0, [sp, #20]
 801289c:	2101      	movs	r1, #1
 801289e:	0038      	movs	r0, r7
 80128a0:	f000 fd50 	bl	8013344 <__i2b>
 80128a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128a6:	0006      	movs	r6, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dd31      	ble.n	8012910 <_dtoa_r+0x898>
 80128ac:	001a      	movs	r2, r3
 80128ae:	0001      	movs	r1, r0
 80128b0:	0038      	movs	r0, r7
 80128b2:	f000 fe0d 	bl	80134d0 <__pow5mult>
 80128b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80128b8:	0006      	movs	r6, r0
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	dd2d      	ble.n	801291a <_dtoa_r+0x8a2>
 80128be:	2300      	movs	r3, #0
 80128c0:	930e      	str	r3, [sp, #56]	; 0x38
 80128c2:	6933      	ldr	r3, [r6, #16]
 80128c4:	3303      	adds	r3, #3
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	18f3      	adds	r3, r6, r3
 80128ca:	6858      	ldr	r0, [r3, #4]
 80128cc:	f000 fcf2 	bl	80132b4 <__hi0bits>
 80128d0:	2320      	movs	r3, #32
 80128d2:	1a18      	subs	r0, r3, r0
 80128d4:	e039      	b.n	801294a <_dtoa_r+0x8d2>
 80128d6:	2336      	movs	r3, #54	; 0x36
 80128d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80128da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80128dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80128de:	1a9b      	subs	r3, r3, r2
 80128e0:	e79d      	b.n	801281e <_dtoa_r+0x7a6>
 80128e2:	9b07      	ldr	r3, [sp, #28]
 80128e4:	1e5e      	subs	r6, r3, #1
 80128e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128e8:	42b3      	cmp	r3, r6
 80128ea:	db07      	blt.n	80128fc <_dtoa_r+0x884>
 80128ec:	1b9e      	subs	r6, r3, r6
 80128ee:	9b07      	ldr	r3, [sp, #28]
 80128f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	da93      	bge.n	801281e <_dtoa_r+0x7a6>
 80128f6:	1ae4      	subs	r4, r4, r3
 80128f8:	2300      	movs	r3, #0
 80128fa:	e790      	b.n	801281e <_dtoa_r+0x7a6>
 80128fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012900:	1af3      	subs	r3, r6, r3
 8012902:	18d3      	adds	r3, r2, r3
 8012904:	960e      	str	r6, [sp, #56]	; 0x38
 8012906:	9315      	str	r3, [sp, #84]	; 0x54
 8012908:	2600      	movs	r6, #0
 801290a:	e7f0      	b.n	80128ee <_dtoa_r+0x876>
 801290c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801290e:	e7c0      	b.n	8012892 <_dtoa_r+0x81a>
 8012910:	2300      	movs	r3, #0
 8012912:	930e      	str	r3, [sp, #56]	; 0x38
 8012914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012916:	2b01      	cmp	r3, #1
 8012918:	dc13      	bgt.n	8012942 <_dtoa_r+0x8ca>
 801291a:	2300      	movs	r3, #0
 801291c:	930e      	str	r3, [sp, #56]	; 0x38
 801291e:	9b08      	ldr	r3, [sp, #32]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d10e      	bne.n	8012942 <_dtoa_r+0x8ca>
 8012924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012926:	031b      	lsls	r3, r3, #12
 8012928:	d10b      	bne.n	8012942 <_dtoa_r+0x8ca>
 801292a:	4b5d      	ldr	r3, [pc, #372]	; (8012aa0 <_dtoa_r+0xa28>)
 801292c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801292e:	4213      	tst	r3, r2
 8012930:	d007      	beq.n	8012942 <_dtoa_r+0x8ca>
 8012932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012934:	3301      	adds	r3, #1
 8012936:	930a      	str	r3, [sp, #40]	; 0x28
 8012938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801293a:	3301      	adds	r3, #1
 801293c:	930d      	str	r3, [sp, #52]	; 0x34
 801293e:	2301      	movs	r3, #1
 8012940:	930e      	str	r3, [sp, #56]	; 0x38
 8012942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012944:	2001      	movs	r0, #1
 8012946:	2b00      	cmp	r3, #0
 8012948:	d1bb      	bne.n	80128c2 <_dtoa_r+0x84a>
 801294a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801294c:	221f      	movs	r2, #31
 801294e:	1818      	adds	r0, r3, r0
 8012950:	0003      	movs	r3, r0
 8012952:	4013      	ands	r3, r2
 8012954:	4210      	tst	r0, r2
 8012956:	d046      	beq.n	80129e6 <_dtoa_r+0x96e>
 8012958:	3201      	adds	r2, #1
 801295a:	1ad2      	subs	r2, r2, r3
 801295c:	2a04      	cmp	r2, #4
 801295e:	dd3f      	ble.n	80129e0 <_dtoa_r+0x968>
 8012960:	221c      	movs	r2, #28
 8012962:	1ad3      	subs	r3, r2, r3
 8012964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012966:	18e4      	adds	r4, r4, r3
 8012968:	18d2      	adds	r2, r2, r3
 801296a:	920a      	str	r2, [sp, #40]	; 0x28
 801296c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801296e:	18d3      	adds	r3, r2, r3
 8012970:	930d      	str	r3, [sp, #52]	; 0x34
 8012972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012974:	2b00      	cmp	r3, #0
 8012976:	dd05      	ble.n	8012984 <_dtoa_r+0x90c>
 8012978:	001a      	movs	r2, r3
 801297a:	0038      	movs	r0, r7
 801297c:	9905      	ldr	r1, [sp, #20]
 801297e:	f000 fe03 	bl	8013588 <__lshift>
 8012982:	9005      	str	r0, [sp, #20]
 8012984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012986:	2b00      	cmp	r3, #0
 8012988:	dd05      	ble.n	8012996 <_dtoa_r+0x91e>
 801298a:	0031      	movs	r1, r6
 801298c:	001a      	movs	r2, r3
 801298e:	0038      	movs	r0, r7
 8012990:	f000 fdfa 	bl	8013588 <__lshift>
 8012994:	0006      	movs	r6, r0
 8012996:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012998:	2b00      	cmp	r3, #0
 801299a:	d026      	beq.n	80129ea <_dtoa_r+0x972>
 801299c:	0031      	movs	r1, r6
 801299e:	9805      	ldr	r0, [sp, #20]
 80129a0:	f000 fe60 	bl	8013664 <__mcmp>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	da20      	bge.n	80129ea <_dtoa_r+0x972>
 80129a8:	9b02      	ldr	r3, [sp, #8]
 80129aa:	220a      	movs	r2, #10
 80129ac:	3b01      	subs	r3, #1
 80129ae:	9302      	str	r3, [sp, #8]
 80129b0:	0038      	movs	r0, r7
 80129b2:	2300      	movs	r3, #0
 80129b4:	9905      	ldr	r1, [sp, #20]
 80129b6:	f000 fc39 	bl	801322c <__multadd>
 80129ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129bc:	9005      	str	r0, [sp, #20]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d100      	bne.n	80129c4 <_dtoa_r+0x94c>
 80129c2:	e166      	b.n	8012c92 <_dtoa_r+0xc1a>
 80129c4:	2300      	movs	r3, #0
 80129c6:	0029      	movs	r1, r5
 80129c8:	220a      	movs	r2, #10
 80129ca:	0038      	movs	r0, r7
 80129cc:	f000 fc2e 	bl	801322c <__multadd>
 80129d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129d2:	0005      	movs	r5, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	dc47      	bgt.n	8012a68 <_dtoa_r+0x9f0>
 80129d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80129da:	2b02      	cmp	r3, #2
 80129dc:	dc0d      	bgt.n	80129fa <_dtoa_r+0x982>
 80129de:	e043      	b.n	8012a68 <_dtoa_r+0x9f0>
 80129e0:	2a04      	cmp	r2, #4
 80129e2:	d0c6      	beq.n	8012972 <_dtoa_r+0x8fa>
 80129e4:	0013      	movs	r3, r2
 80129e6:	331c      	adds	r3, #28
 80129e8:	e7bc      	b.n	8012964 <_dtoa_r+0x8ec>
 80129ea:	9b07      	ldr	r3, [sp, #28]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	dc35      	bgt.n	8012a5c <_dtoa_r+0x9e4>
 80129f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80129f2:	2b02      	cmp	r3, #2
 80129f4:	dd32      	ble.n	8012a5c <_dtoa_r+0x9e4>
 80129f6:	9b07      	ldr	r3, [sp, #28]
 80129f8:	930c      	str	r3, [sp, #48]	; 0x30
 80129fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d10c      	bne.n	8012a1a <_dtoa_r+0x9a2>
 8012a00:	0031      	movs	r1, r6
 8012a02:	2205      	movs	r2, #5
 8012a04:	0038      	movs	r0, r7
 8012a06:	f000 fc11 	bl	801322c <__multadd>
 8012a0a:	0006      	movs	r6, r0
 8012a0c:	0001      	movs	r1, r0
 8012a0e:	9805      	ldr	r0, [sp, #20]
 8012a10:	f000 fe28 	bl	8013664 <__mcmp>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	dd00      	ble.n	8012a1a <_dtoa_r+0x9a2>
 8012a18:	e5a5      	b.n	8012566 <_dtoa_r+0x4ee>
 8012a1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012a1c:	43db      	mvns	r3, r3
 8012a1e:	9302      	str	r3, [sp, #8]
 8012a20:	9b06      	ldr	r3, [sp, #24]
 8012a22:	9308      	str	r3, [sp, #32]
 8012a24:	2400      	movs	r4, #0
 8012a26:	0031      	movs	r1, r6
 8012a28:	0038      	movs	r0, r7
 8012a2a:	f000 fbdb 	bl	80131e4 <_Bfree>
 8012a2e:	2d00      	cmp	r5, #0
 8012a30:	d100      	bne.n	8012a34 <_dtoa_r+0x9bc>
 8012a32:	e6b7      	b.n	80127a4 <_dtoa_r+0x72c>
 8012a34:	2c00      	cmp	r4, #0
 8012a36:	d005      	beq.n	8012a44 <_dtoa_r+0x9cc>
 8012a38:	42ac      	cmp	r4, r5
 8012a3a:	d003      	beq.n	8012a44 <_dtoa_r+0x9cc>
 8012a3c:	0021      	movs	r1, r4
 8012a3e:	0038      	movs	r0, r7
 8012a40:	f000 fbd0 	bl	80131e4 <_Bfree>
 8012a44:	0029      	movs	r1, r5
 8012a46:	0038      	movs	r0, r7
 8012a48:	f000 fbcc 	bl	80131e4 <_Bfree>
 8012a4c:	e6aa      	b.n	80127a4 <_dtoa_r+0x72c>
 8012a4e:	2600      	movs	r6, #0
 8012a50:	0035      	movs	r5, r6
 8012a52:	e7e2      	b.n	8012a1a <_dtoa_r+0x9a2>
 8012a54:	9602      	str	r6, [sp, #8]
 8012a56:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012a58:	0035      	movs	r5, r6
 8012a5a:	e584      	b.n	8012566 <_dtoa_r+0x4ee>
 8012a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d100      	bne.n	8012a64 <_dtoa_r+0x9ec>
 8012a62:	e0ce      	b.n	8012c02 <_dtoa_r+0xb8a>
 8012a64:	9b07      	ldr	r3, [sp, #28]
 8012a66:	930c      	str	r3, [sp, #48]	; 0x30
 8012a68:	2c00      	cmp	r4, #0
 8012a6a:	dd05      	ble.n	8012a78 <_dtoa_r+0xa00>
 8012a6c:	0029      	movs	r1, r5
 8012a6e:	0022      	movs	r2, r4
 8012a70:	0038      	movs	r0, r7
 8012a72:	f000 fd89 	bl	8013588 <__lshift>
 8012a76:	0005      	movs	r5, r0
 8012a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a7a:	0028      	movs	r0, r5
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d022      	beq.n	8012ac6 <_dtoa_r+0xa4e>
 8012a80:	0038      	movs	r0, r7
 8012a82:	6869      	ldr	r1, [r5, #4]
 8012a84:	f000 fb6a 	bl	801315c <_Balloc>
 8012a88:	1e04      	subs	r4, r0, #0
 8012a8a:	d10f      	bne.n	8012aac <_dtoa_r+0xa34>
 8012a8c:	0002      	movs	r2, r0
 8012a8e:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <_dtoa_r+0xa2c>)
 8012a90:	4905      	ldr	r1, [pc, #20]	; (8012aa8 <_dtoa_r+0xa30>)
 8012a92:	f7ff fb06 	bl	80120a2 <_dtoa_r+0x2a>
 8012a96:	46c0      	nop			; (mov r8, r8)
 8012a98:	40240000 	.word	0x40240000
 8012a9c:	00000433 	.word	0x00000433
 8012aa0:	7ff00000 	.word	0x7ff00000
 8012aa4:	08015060 	.word	0x08015060
 8012aa8:	000002ea 	.word	0x000002ea
 8012aac:	0029      	movs	r1, r5
 8012aae:	692b      	ldr	r3, [r5, #16]
 8012ab0:	310c      	adds	r1, #12
 8012ab2:	1c9a      	adds	r2, r3, #2
 8012ab4:	0092      	lsls	r2, r2, #2
 8012ab6:	300c      	adds	r0, #12
 8012ab8:	f7fe fc46 	bl	8011348 <memcpy>
 8012abc:	2201      	movs	r2, #1
 8012abe:	0021      	movs	r1, r4
 8012ac0:	0038      	movs	r0, r7
 8012ac2:	f000 fd61 	bl	8013588 <__lshift>
 8012ac6:	9b06      	ldr	r3, [sp, #24]
 8012ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012aca:	930a      	str	r3, [sp, #40]	; 0x28
 8012acc:	3b01      	subs	r3, #1
 8012ace:	189b      	adds	r3, r3, r2
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	002c      	movs	r4, r5
 8012ad4:	0005      	movs	r5, r0
 8012ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8012ad8:	9b08      	ldr	r3, [sp, #32]
 8012ada:	4013      	ands	r3, r2
 8012adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ade:	0031      	movs	r1, r6
 8012ae0:	9805      	ldr	r0, [sp, #20]
 8012ae2:	f7ff fa3d 	bl	8011f60 <quorem>
 8012ae6:	0003      	movs	r3, r0
 8012ae8:	0021      	movs	r1, r4
 8012aea:	3330      	adds	r3, #48	; 0x30
 8012aec:	900d      	str	r0, [sp, #52]	; 0x34
 8012aee:	9805      	ldr	r0, [sp, #20]
 8012af0:	9307      	str	r3, [sp, #28]
 8012af2:	f000 fdb7 	bl	8013664 <__mcmp>
 8012af6:	002a      	movs	r2, r5
 8012af8:	900e      	str	r0, [sp, #56]	; 0x38
 8012afa:	0031      	movs	r1, r6
 8012afc:	0038      	movs	r0, r7
 8012afe:	f000 fdcd 	bl	801369c <__mdiff>
 8012b02:	68c3      	ldr	r3, [r0, #12]
 8012b04:	9008      	str	r0, [sp, #32]
 8012b06:	9310      	str	r3, [sp, #64]	; 0x40
 8012b08:	2301      	movs	r3, #1
 8012b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8012b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d104      	bne.n	8012b1c <_dtoa_r+0xaa4>
 8012b12:	0001      	movs	r1, r0
 8012b14:	9805      	ldr	r0, [sp, #20]
 8012b16:	f000 fda5 	bl	8013664 <__mcmp>
 8012b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8012b1c:	0038      	movs	r0, r7
 8012b1e:	9908      	ldr	r1, [sp, #32]
 8012b20:	f000 fb60 	bl	80131e4 <_Bfree>
 8012b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b28:	3301      	adds	r3, #1
 8012b2a:	9308      	str	r3, [sp, #32]
 8012b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012b2e:	4313      	orrs	r3, r2
 8012b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012b32:	4313      	orrs	r3, r2
 8012b34:	d10c      	bne.n	8012b50 <_dtoa_r+0xad8>
 8012b36:	9b07      	ldr	r3, [sp, #28]
 8012b38:	2b39      	cmp	r3, #57	; 0x39
 8012b3a:	d026      	beq.n	8012b8a <_dtoa_r+0xb12>
 8012b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	dd02      	ble.n	8012b48 <_dtoa_r+0xad0>
 8012b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b44:	3331      	adds	r3, #49	; 0x31
 8012b46:	9307      	str	r3, [sp, #28]
 8012b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b4a:	9a07      	ldr	r2, [sp, #28]
 8012b4c:	701a      	strb	r2, [r3, #0]
 8012b4e:	e76a      	b.n	8012a26 <_dtoa_r+0x9ae>
 8012b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	db04      	blt.n	8012b60 <_dtoa_r+0xae8>
 8012b56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	d11f      	bne.n	8012ba0 <_dtoa_r+0xb28>
 8012b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	ddf0      	ble.n	8012b48 <_dtoa_r+0xad0>
 8012b66:	9905      	ldr	r1, [sp, #20]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	0038      	movs	r0, r7
 8012b6c:	f000 fd0c 	bl	8013588 <__lshift>
 8012b70:	0031      	movs	r1, r6
 8012b72:	9005      	str	r0, [sp, #20]
 8012b74:	f000 fd76 	bl	8013664 <__mcmp>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	dc03      	bgt.n	8012b84 <_dtoa_r+0xb0c>
 8012b7c:	d1e4      	bne.n	8012b48 <_dtoa_r+0xad0>
 8012b7e:	9b07      	ldr	r3, [sp, #28]
 8012b80:	07db      	lsls	r3, r3, #31
 8012b82:	d5e1      	bpl.n	8012b48 <_dtoa_r+0xad0>
 8012b84:	9b07      	ldr	r3, [sp, #28]
 8012b86:	2b39      	cmp	r3, #57	; 0x39
 8012b88:	d1db      	bne.n	8012b42 <_dtoa_r+0xaca>
 8012b8a:	2339      	movs	r3, #57	; 0x39
 8012b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b8e:	7013      	strb	r3, [r2, #0]
 8012b90:	9b08      	ldr	r3, [sp, #32]
 8012b92:	9308      	str	r3, [sp, #32]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	781a      	ldrb	r2, [r3, #0]
 8012b98:	2a39      	cmp	r2, #57	; 0x39
 8012b9a:	d068      	beq.n	8012c6e <_dtoa_r+0xbf6>
 8012b9c:	3201      	adds	r2, #1
 8012b9e:	e7d5      	b.n	8012b4c <_dtoa_r+0xad4>
 8012ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	dd07      	ble.n	8012bb6 <_dtoa_r+0xb3e>
 8012ba6:	9b07      	ldr	r3, [sp, #28]
 8012ba8:	2b39      	cmp	r3, #57	; 0x39
 8012baa:	d0ee      	beq.n	8012b8a <_dtoa_r+0xb12>
 8012bac:	9b07      	ldr	r3, [sp, #28]
 8012bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	7013      	strb	r3, [r2, #0]
 8012bb4:	e737      	b.n	8012a26 <_dtoa_r+0x9ae>
 8012bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bb8:	9a07      	ldr	r2, [sp, #28]
 8012bba:	701a      	strb	r2, [r3, #0]
 8012bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d03e      	beq.n	8012c42 <_dtoa_r+0xbca>
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	220a      	movs	r2, #10
 8012bc8:	9905      	ldr	r1, [sp, #20]
 8012bca:	0038      	movs	r0, r7
 8012bcc:	f000 fb2e 	bl	801322c <__multadd>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	9005      	str	r0, [sp, #20]
 8012bd4:	220a      	movs	r2, #10
 8012bd6:	0021      	movs	r1, r4
 8012bd8:	0038      	movs	r0, r7
 8012bda:	42ac      	cmp	r4, r5
 8012bdc:	d106      	bne.n	8012bec <_dtoa_r+0xb74>
 8012bde:	f000 fb25 	bl	801322c <__multadd>
 8012be2:	0004      	movs	r4, r0
 8012be4:	0005      	movs	r5, r0
 8012be6:	9b08      	ldr	r3, [sp, #32]
 8012be8:	930a      	str	r3, [sp, #40]	; 0x28
 8012bea:	e778      	b.n	8012ade <_dtoa_r+0xa66>
 8012bec:	f000 fb1e 	bl	801322c <__multadd>
 8012bf0:	0029      	movs	r1, r5
 8012bf2:	0004      	movs	r4, r0
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	220a      	movs	r2, #10
 8012bf8:	0038      	movs	r0, r7
 8012bfa:	f000 fb17 	bl	801322c <__multadd>
 8012bfe:	0005      	movs	r5, r0
 8012c00:	e7f1      	b.n	8012be6 <_dtoa_r+0xb6e>
 8012c02:	9b07      	ldr	r3, [sp, #28]
 8012c04:	930c      	str	r3, [sp, #48]	; 0x30
 8012c06:	2400      	movs	r4, #0
 8012c08:	0031      	movs	r1, r6
 8012c0a:	9805      	ldr	r0, [sp, #20]
 8012c0c:	f7ff f9a8 	bl	8011f60 <quorem>
 8012c10:	9b06      	ldr	r3, [sp, #24]
 8012c12:	3030      	adds	r0, #48	; 0x30
 8012c14:	5518      	strb	r0, [r3, r4]
 8012c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c18:	3401      	adds	r4, #1
 8012c1a:	9007      	str	r0, [sp, #28]
 8012c1c:	42a3      	cmp	r3, r4
 8012c1e:	dd07      	ble.n	8012c30 <_dtoa_r+0xbb8>
 8012c20:	2300      	movs	r3, #0
 8012c22:	220a      	movs	r2, #10
 8012c24:	0038      	movs	r0, r7
 8012c26:	9905      	ldr	r1, [sp, #20]
 8012c28:	f000 fb00 	bl	801322c <__multadd>
 8012c2c:	9005      	str	r0, [sp, #20]
 8012c2e:	e7eb      	b.n	8012c08 <_dtoa_r+0xb90>
 8012c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c32:	2001      	movs	r0, #1
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	dd00      	ble.n	8012c3a <_dtoa_r+0xbc2>
 8012c38:	0018      	movs	r0, r3
 8012c3a:	2400      	movs	r4, #0
 8012c3c:	9b06      	ldr	r3, [sp, #24]
 8012c3e:	181b      	adds	r3, r3, r0
 8012c40:	9308      	str	r3, [sp, #32]
 8012c42:	9905      	ldr	r1, [sp, #20]
 8012c44:	2201      	movs	r2, #1
 8012c46:	0038      	movs	r0, r7
 8012c48:	f000 fc9e 	bl	8013588 <__lshift>
 8012c4c:	0031      	movs	r1, r6
 8012c4e:	9005      	str	r0, [sp, #20]
 8012c50:	f000 fd08 	bl	8013664 <__mcmp>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	dc9b      	bgt.n	8012b90 <_dtoa_r+0xb18>
 8012c58:	d102      	bne.n	8012c60 <_dtoa_r+0xbe8>
 8012c5a:	9b07      	ldr	r3, [sp, #28]
 8012c5c:	07db      	lsls	r3, r3, #31
 8012c5e:	d497      	bmi.n	8012b90 <_dtoa_r+0xb18>
 8012c60:	9b08      	ldr	r3, [sp, #32]
 8012c62:	9308      	str	r3, [sp, #32]
 8012c64:	3b01      	subs	r3, #1
 8012c66:	781a      	ldrb	r2, [r3, #0]
 8012c68:	2a30      	cmp	r2, #48	; 0x30
 8012c6a:	d0fa      	beq.n	8012c62 <_dtoa_r+0xbea>
 8012c6c:	e6db      	b.n	8012a26 <_dtoa_r+0x9ae>
 8012c6e:	9a06      	ldr	r2, [sp, #24]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d18e      	bne.n	8012b92 <_dtoa_r+0xb1a>
 8012c74:	9b02      	ldr	r3, [sp, #8]
 8012c76:	3301      	adds	r3, #1
 8012c78:	9302      	str	r3, [sp, #8]
 8012c7a:	2331      	movs	r3, #49	; 0x31
 8012c7c:	e799      	b.n	8012bb2 <_dtoa_r+0xb3a>
 8012c7e:	4b09      	ldr	r3, [pc, #36]	; (8012ca4 <_dtoa_r+0xc2c>)
 8012c80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012c82:	9306      	str	r3, [sp, #24]
 8012c84:	4b08      	ldr	r3, [pc, #32]	; (8012ca8 <_dtoa_r+0xc30>)
 8012c86:	2a00      	cmp	r2, #0
 8012c88:	d001      	beq.n	8012c8e <_dtoa_r+0xc16>
 8012c8a:	f7ff fa3f 	bl	801210c <_dtoa_r+0x94>
 8012c8e:	f7ff fa3f 	bl	8012110 <_dtoa_r+0x98>
 8012c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	dcb6      	bgt.n	8012c06 <_dtoa_r+0xb8e>
 8012c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c9a:	2b02      	cmp	r3, #2
 8012c9c:	dd00      	ble.n	8012ca0 <_dtoa_r+0xc28>
 8012c9e:	e6ac      	b.n	80129fa <_dtoa_r+0x982>
 8012ca0:	e7b1      	b.n	8012c06 <_dtoa_r+0xb8e>
 8012ca2:	46c0      	nop			; (mov r8, r8)
 8012ca4:	08014fe1 	.word	0x08014fe1
 8012ca8:	08014fe9 	.word	0x08014fe9

08012cac <__sflush_r>:
 8012cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cae:	898b      	ldrh	r3, [r1, #12]
 8012cb0:	0005      	movs	r5, r0
 8012cb2:	000c      	movs	r4, r1
 8012cb4:	071a      	lsls	r2, r3, #28
 8012cb6:	d45f      	bmi.n	8012d78 <__sflush_r+0xcc>
 8012cb8:	684a      	ldr	r2, [r1, #4]
 8012cba:	2a00      	cmp	r2, #0
 8012cbc:	dc04      	bgt.n	8012cc8 <__sflush_r+0x1c>
 8012cbe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012cc0:	2a00      	cmp	r2, #0
 8012cc2:	dc01      	bgt.n	8012cc8 <__sflush_r+0x1c>
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012cc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012cca:	2f00      	cmp	r7, #0
 8012ccc:	d0fa      	beq.n	8012cc4 <__sflush_r+0x18>
 8012cce:	2200      	movs	r2, #0
 8012cd0:	2180      	movs	r1, #128	; 0x80
 8012cd2:	682e      	ldr	r6, [r5, #0]
 8012cd4:	602a      	str	r2, [r5, #0]
 8012cd6:	001a      	movs	r2, r3
 8012cd8:	0149      	lsls	r1, r1, #5
 8012cda:	400a      	ands	r2, r1
 8012cdc:	420b      	tst	r3, r1
 8012cde:	d034      	beq.n	8012d4a <__sflush_r+0x9e>
 8012ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	075b      	lsls	r3, r3, #29
 8012ce6:	d506      	bpl.n	8012cf6 <__sflush_r+0x4a>
 8012ce8:	6863      	ldr	r3, [r4, #4]
 8012cea:	1ac0      	subs	r0, r0, r3
 8012cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d001      	beq.n	8012cf6 <__sflush_r+0x4a>
 8012cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cf4:	1ac0      	subs	r0, r0, r3
 8012cf6:	0002      	movs	r2, r0
 8012cf8:	6a21      	ldr	r1, [r4, #32]
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	0028      	movs	r0, r5
 8012cfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012d00:	47b8      	blx	r7
 8012d02:	89a1      	ldrh	r1, [r4, #12]
 8012d04:	1c43      	adds	r3, r0, #1
 8012d06:	d106      	bne.n	8012d16 <__sflush_r+0x6a>
 8012d08:	682b      	ldr	r3, [r5, #0]
 8012d0a:	2b1d      	cmp	r3, #29
 8012d0c:	d831      	bhi.n	8012d72 <__sflush_r+0xc6>
 8012d0e:	4a2c      	ldr	r2, [pc, #176]	; (8012dc0 <__sflush_r+0x114>)
 8012d10:	40da      	lsrs	r2, r3
 8012d12:	07d3      	lsls	r3, r2, #31
 8012d14:	d52d      	bpl.n	8012d72 <__sflush_r+0xc6>
 8012d16:	2300      	movs	r3, #0
 8012d18:	6063      	str	r3, [r4, #4]
 8012d1a:	6923      	ldr	r3, [r4, #16]
 8012d1c:	6023      	str	r3, [r4, #0]
 8012d1e:	04cb      	lsls	r3, r1, #19
 8012d20:	d505      	bpl.n	8012d2e <__sflush_r+0x82>
 8012d22:	1c43      	adds	r3, r0, #1
 8012d24:	d102      	bne.n	8012d2c <__sflush_r+0x80>
 8012d26:	682b      	ldr	r3, [r5, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d100      	bne.n	8012d2e <__sflush_r+0x82>
 8012d2c:	6560      	str	r0, [r4, #84]	; 0x54
 8012d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d30:	602e      	str	r6, [r5, #0]
 8012d32:	2900      	cmp	r1, #0
 8012d34:	d0c6      	beq.n	8012cc4 <__sflush_r+0x18>
 8012d36:	0023      	movs	r3, r4
 8012d38:	3344      	adds	r3, #68	; 0x44
 8012d3a:	4299      	cmp	r1, r3
 8012d3c:	d002      	beq.n	8012d44 <__sflush_r+0x98>
 8012d3e:	0028      	movs	r0, r5
 8012d40:	f000 fdd4 	bl	80138ec <_free_r>
 8012d44:	2000      	movs	r0, #0
 8012d46:	6360      	str	r0, [r4, #52]	; 0x34
 8012d48:	e7bd      	b.n	8012cc6 <__sflush_r+0x1a>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	0028      	movs	r0, r5
 8012d4e:	6a21      	ldr	r1, [r4, #32]
 8012d50:	47b8      	blx	r7
 8012d52:	1c43      	adds	r3, r0, #1
 8012d54:	d1c5      	bne.n	8012ce2 <__sflush_r+0x36>
 8012d56:	682b      	ldr	r3, [r5, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d0c2      	beq.n	8012ce2 <__sflush_r+0x36>
 8012d5c:	2b1d      	cmp	r3, #29
 8012d5e:	d001      	beq.n	8012d64 <__sflush_r+0xb8>
 8012d60:	2b16      	cmp	r3, #22
 8012d62:	d101      	bne.n	8012d68 <__sflush_r+0xbc>
 8012d64:	602e      	str	r6, [r5, #0]
 8012d66:	e7ad      	b.n	8012cc4 <__sflush_r+0x18>
 8012d68:	2340      	movs	r3, #64	; 0x40
 8012d6a:	89a2      	ldrh	r2, [r4, #12]
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	81a3      	strh	r3, [r4, #12]
 8012d70:	e7a9      	b.n	8012cc6 <__sflush_r+0x1a>
 8012d72:	2340      	movs	r3, #64	; 0x40
 8012d74:	430b      	orrs	r3, r1
 8012d76:	e7fa      	b.n	8012d6e <__sflush_r+0xc2>
 8012d78:	690f      	ldr	r7, [r1, #16]
 8012d7a:	2f00      	cmp	r7, #0
 8012d7c:	d0a2      	beq.n	8012cc4 <__sflush_r+0x18>
 8012d7e:	680a      	ldr	r2, [r1, #0]
 8012d80:	600f      	str	r7, [r1, #0]
 8012d82:	1bd2      	subs	r2, r2, r7
 8012d84:	9201      	str	r2, [sp, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	079b      	lsls	r3, r3, #30
 8012d8a:	d100      	bne.n	8012d8e <__sflush_r+0xe2>
 8012d8c:	694a      	ldr	r2, [r1, #20]
 8012d8e:	60a2      	str	r2, [r4, #8]
 8012d90:	9b01      	ldr	r3, [sp, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	dc00      	bgt.n	8012d98 <__sflush_r+0xec>
 8012d96:	e795      	b.n	8012cc4 <__sflush_r+0x18>
 8012d98:	003a      	movs	r2, r7
 8012d9a:	0028      	movs	r0, r5
 8012d9c:	9b01      	ldr	r3, [sp, #4]
 8012d9e:	6a21      	ldr	r1, [r4, #32]
 8012da0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012da2:	47b0      	blx	r6
 8012da4:	2800      	cmp	r0, #0
 8012da6:	dc06      	bgt.n	8012db6 <__sflush_r+0x10a>
 8012da8:	2340      	movs	r3, #64	; 0x40
 8012daa:	2001      	movs	r0, #1
 8012dac:	89a2      	ldrh	r2, [r4, #12]
 8012dae:	4240      	negs	r0, r0
 8012db0:	4313      	orrs	r3, r2
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	e787      	b.n	8012cc6 <__sflush_r+0x1a>
 8012db6:	9b01      	ldr	r3, [sp, #4]
 8012db8:	183f      	adds	r7, r7, r0
 8012dba:	1a1b      	subs	r3, r3, r0
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	e7e7      	b.n	8012d90 <__sflush_r+0xe4>
 8012dc0:	20400001 	.word	0x20400001

08012dc4 <_fflush_r>:
 8012dc4:	690b      	ldr	r3, [r1, #16]
 8012dc6:	b570      	push	{r4, r5, r6, lr}
 8012dc8:	0005      	movs	r5, r0
 8012dca:	000c      	movs	r4, r1
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <_fflush_r+0x12>
 8012dd0:	2500      	movs	r5, #0
 8012dd2:	0028      	movs	r0, r5
 8012dd4:	bd70      	pop	{r4, r5, r6, pc}
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d004      	beq.n	8012de4 <_fflush_r+0x20>
 8012dda:	6983      	ldr	r3, [r0, #24]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <_fflush_r+0x20>
 8012de0:	f000 f892 	bl	8012f08 <__sinit>
 8012de4:	4b14      	ldr	r3, [pc, #80]	; (8012e38 <_fflush_r+0x74>)
 8012de6:	429c      	cmp	r4, r3
 8012de8:	d11b      	bne.n	8012e22 <_fflush_r+0x5e>
 8012dea:	686c      	ldr	r4, [r5, #4]
 8012dec:	220c      	movs	r2, #12
 8012dee:	5ea3      	ldrsh	r3, [r4, r2]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d0ed      	beq.n	8012dd0 <_fflush_r+0xc>
 8012df4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012df6:	07d2      	lsls	r2, r2, #31
 8012df8:	d404      	bmi.n	8012e04 <_fflush_r+0x40>
 8012dfa:	059b      	lsls	r3, r3, #22
 8012dfc:	d402      	bmi.n	8012e04 <_fflush_r+0x40>
 8012dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e00:	f000 f927 	bl	8013052 <__retarget_lock_acquire_recursive>
 8012e04:	0028      	movs	r0, r5
 8012e06:	0021      	movs	r1, r4
 8012e08:	f7ff ff50 	bl	8012cac <__sflush_r>
 8012e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e0e:	0005      	movs	r5, r0
 8012e10:	07db      	lsls	r3, r3, #31
 8012e12:	d4de      	bmi.n	8012dd2 <_fflush_r+0xe>
 8012e14:	89a3      	ldrh	r3, [r4, #12]
 8012e16:	059b      	lsls	r3, r3, #22
 8012e18:	d4db      	bmi.n	8012dd2 <_fflush_r+0xe>
 8012e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e1c:	f000 f91a 	bl	8013054 <__retarget_lock_release_recursive>
 8012e20:	e7d7      	b.n	8012dd2 <_fflush_r+0xe>
 8012e22:	4b06      	ldr	r3, [pc, #24]	; (8012e3c <_fflush_r+0x78>)
 8012e24:	429c      	cmp	r4, r3
 8012e26:	d101      	bne.n	8012e2c <_fflush_r+0x68>
 8012e28:	68ac      	ldr	r4, [r5, #8]
 8012e2a:	e7df      	b.n	8012dec <_fflush_r+0x28>
 8012e2c:	4b04      	ldr	r3, [pc, #16]	; (8012e40 <_fflush_r+0x7c>)
 8012e2e:	429c      	cmp	r4, r3
 8012e30:	d1dc      	bne.n	8012dec <_fflush_r+0x28>
 8012e32:	68ec      	ldr	r4, [r5, #12]
 8012e34:	e7da      	b.n	8012dec <_fflush_r+0x28>
 8012e36:	46c0      	nop			; (mov r8, r8)
 8012e38:	08015094 	.word	0x08015094
 8012e3c:	080150b4 	.word	0x080150b4
 8012e40:	08015074 	.word	0x08015074

08012e44 <std>:
 8012e44:	2300      	movs	r3, #0
 8012e46:	b510      	push	{r4, lr}
 8012e48:	0004      	movs	r4, r0
 8012e4a:	6003      	str	r3, [r0, #0]
 8012e4c:	6043      	str	r3, [r0, #4]
 8012e4e:	6083      	str	r3, [r0, #8]
 8012e50:	8181      	strh	r1, [r0, #12]
 8012e52:	6643      	str	r3, [r0, #100]	; 0x64
 8012e54:	0019      	movs	r1, r3
 8012e56:	81c2      	strh	r2, [r0, #14]
 8012e58:	6103      	str	r3, [r0, #16]
 8012e5a:	6143      	str	r3, [r0, #20]
 8012e5c:	6183      	str	r3, [r0, #24]
 8012e5e:	2208      	movs	r2, #8
 8012e60:	305c      	adds	r0, #92	; 0x5c
 8012e62:	f7fe fa7a 	bl	801135a <memset>
 8012e66:	4b05      	ldr	r3, [pc, #20]	; (8012e7c <std+0x38>)
 8012e68:	6224      	str	r4, [r4, #32]
 8012e6a:	6263      	str	r3, [r4, #36]	; 0x24
 8012e6c:	4b04      	ldr	r3, [pc, #16]	; (8012e80 <std+0x3c>)
 8012e6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e70:	4b04      	ldr	r3, [pc, #16]	; (8012e84 <std+0x40>)
 8012e72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e74:	4b04      	ldr	r3, [pc, #16]	; (8012e88 <std+0x44>)
 8012e76:	6323      	str	r3, [r4, #48]	; 0x30
 8012e78:	bd10      	pop	{r4, pc}
 8012e7a:	46c0      	nop			; (mov r8, r8)
 8012e7c:	0801405d 	.word	0x0801405d
 8012e80:	08014085 	.word	0x08014085
 8012e84:	080140bd 	.word	0x080140bd
 8012e88:	080140e9 	.word	0x080140e9

08012e8c <_cleanup_r>:
 8012e8c:	b510      	push	{r4, lr}
 8012e8e:	4902      	ldr	r1, [pc, #8]	; (8012e98 <_cleanup_r+0xc>)
 8012e90:	f000 f8ba 	bl	8013008 <_fwalk_reent>
 8012e94:	bd10      	pop	{r4, pc}
 8012e96:	46c0      	nop			; (mov r8, r8)
 8012e98:	08012dc5 	.word	0x08012dc5

08012e9c <__sfmoreglue>:
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	2568      	movs	r5, #104	; 0x68
 8012ea0:	1e4a      	subs	r2, r1, #1
 8012ea2:	4355      	muls	r5, r2
 8012ea4:	000e      	movs	r6, r1
 8012ea6:	0029      	movs	r1, r5
 8012ea8:	3174      	adds	r1, #116	; 0x74
 8012eaa:	f000 fd8b 	bl	80139c4 <_malloc_r>
 8012eae:	1e04      	subs	r4, r0, #0
 8012eb0:	d008      	beq.n	8012ec4 <__sfmoreglue+0x28>
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	002a      	movs	r2, r5
 8012eb6:	6001      	str	r1, [r0, #0]
 8012eb8:	6046      	str	r6, [r0, #4]
 8012eba:	300c      	adds	r0, #12
 8012ebc:	60a0      	str	r0, [r4, #8]
 8012ebe:	3268      	adds	r2, #104	; 0x68
 8012ec0:	f7fe fa4b 	bl	801135a <memset>
 8012ec4:	0020      	movs	r0, r4
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}

08012ec8 <__sfp_lock_acquire>:
 8012ec8:	b510      	push	{r4, lr}
 8012eca:	4802      	ldr	r0, [pc, #8]	; (8012ed4 <__sfp_lock_acquire+0xc>)
 8012ecc:	f000 f8c1 	bl	8013052 <__retarget_lock_acquire_recursive>
 8012ed0:	bd10      	pop	{r4, pc}
 8012ed2:	46c0      	nop			; (mov r8, r8)
 8012ed4:	20008321 	.word	0x20008321

08012ed8 <__sfp_lock_release>:
 8012ed8:	b510      	push	{r4, lr}
 8012eda:	4802      	ldr	r0, [pc, #8]	; (8012ee4 <__sfp_lock_release+0xc>)
 8012edc:	f000 f8ba 	bl	8013054 <__retarget_lock_release_recursive>
 8012ee0:	bd10      	pop	{r4, pc}
 8012ee2:	46c0      	nop			; (mov r8, r8)
 8012ee4:	20008321 	.word	0x20008321

08012ee8 <__sinit_lock_acquire>:
 8012ee8:	b510      	push	{r4, lr}
 8012eea:	4802      	ldr	r0, [pc, #8]	; (8012ef4 <__sinit_lock_acquire+0xc>)
 8012eec:	f000 f8b1 	bl	8013052 <__retarget_lock_acquire_recursive>
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	46c0      	nop			; (mov r8, r8)
 8012ef4:	20008322 	.word	0x20008322

08012ef8 <__sinit_lock_release>:
 8012ef8:	b510      	push	{r4, lr}
 8012efa:	4802      	ldr	r0, [pc, #8]	; (8012f04 <__sinit_lock_release+0xc>)
 8012efc:	f000 f8aa 	bl	8013054 <__retarget_lock_release_recursive>
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	46c0      	nop			; (mov r8, r8)
 8012f04:	20008322 	.word	0x20008322

08012f08 <__sinit>:
 8012f08:	b513      	push	{r0, r1, r4, lr}
 8012f0a:	0004      	movs	r4, r0
 8012f0c:	f7ff ffec 	bl	8012ee8 <__sinit_lock_acquire>
 8012f10:	69a3      	ldr	r3, [r4, #24]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d002      	beq.n	8012f1c <__sinit+0x14>
 8012f16:	f7ff ffef 	bl	8012ef8 <__sinit_lock_release>
 8012f1a:	bd13      	pop	{r0, r1, r4, pc}
 8012f1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8012f1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012f20:	6523      	str	r3, [r4, #80]	; 0x50
 8012f22:	4b13      	ldr	r3, [pc, #76]	; (8012f70 <__sinit+0x68>)
 8012f24:	4a13      	ldr	r2, [pc, #76]	; (8012f74 <__sinit+0x6c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f2a:	9301      	str	r3, [sp, #4]
 8012f2c:	42a3      	cmp	r3, r4
 8012f2e:	d101      	bne.n	8012f34 <__sinit+0x2c>
 8012f30:	2301      	movs	r3, #1
 8012f32:	61a3      	str	r3, [r4, #24]
 8012f34:	0020      	movs	r0, r4
 8012f36:	f000 f81f 	bl	8012f78 <__sfp>
 8012f3a:	6060      	str	r0, [r4, #4]
 8012f3c:	0020      	movs	r0, r4
 8012f3e:	f000 f81b 	bl	8012f78 <__sfp>
 8012f42:	60a0      	str	r0, [r4, #8]
 8012f44:	0020      	movs	r0, r4
 8012f46:	f000 f817 	bl	8012f78 <__sfp>
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	2104      	movs	r1, #4
 8012f4e:	60e0      	str	r0, [r4, #12]
 8012f50:	6860      	ldr	r0, [r4, #4]
 8012f52:	f7ff ff77 	bl	8012e44 <std>
 8012f56:	2201      	movs	r2, #1
 8012f58:	2109      	movs	r1, #9
 8012f5a:	68a0      	ldr	r0, [r4, #8]
 8012f5c:	f7ff ff72 	bl	8012e44 <std>
 8012f60:	2202      	movs	r2, #2
 8012f62:	2112      	movs	r1, #18
 8012f64:	68e0      	ldr	r0, [r4, #12]
 8012f66:	f7ff ff6d 	bl	8012e44 <std>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	61a3      	str	r3, [r4, #24]
 8012f6e:	e7d2      	b.n	8012f16 <__sinit+0xe>
 8012f70:	08014ea8 	.word	0x08014ea8
 8012f74:	08012e8d 	.word	0x08012e8d

08012f78 <__sfp>:
 8012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7a:	0007      	movs	r7, r0
 8012f7c:	f7ff ffa4 	bl	8012ec8 <__sfp_lock_acquire>
 8012f80:	4b1f      	ldr	r3, [pc, #124]	; (8013000 <__sfp+0x88>)
 8012f82:	681e      	ldr	r6, [r3, #0]
 8012f84:	69b3      	ldr	r3, [r6, #24]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d102      	bne.n	8012f90 <__sfp+0x18>
 8012f8a:	0030      	movs	r0, r6
 8012f8c:	f7ff ffbc 	bl	8012f08 <__sinit>
 8012f90:	3648      	adds	r6, #72	; 0x48
 8012f92:	68b4      	ldr	r4, [r6, #8]
 8012f94:	6873      	ldr	r3, [r6, #4]
 8012f96:	3b01      	subs	r3, #1
 8012f98:	d504      	bpl.n	8012fa4 <__sfp+0x2c>
 8012f9a:	6833      	ldr	r3, [r6, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d022      	beq.n	8012fe6 <__sfp+0x6e>
 8012fa0:	6836      	ldr	r6, [r6, #0]
 8012fa2:	e7f6      	b.n	8012f92 <__sfp+0x1a>
 8012fa4:	220c      	movs	r2, #12
 8012fa6:	5ea5      	ldrsh	r5, [r4, r2]
 8012fa8:	2d00      	cmp	r5, #0
 8012faa:	d11a      	bne.n	8012fe2 <__sfp+0x6a>
 8012fac:	0020      	movs	r0, r4
 8012fae:	4b15      	ldr	r3, [pc, #84]	; (8013004 <__sfp+0x8c>)
 8012fb0:	3058      	adds	r0, #88	; 0x58
 8012fb2:	60e3      	str	r3, [r4, #12]
 8012fb4:	6665      	str	r5, [r4, #100]	; 0x64
 8012fb6:	f000 f84b 	bl	8013050 <__retarget_lock_init_recursive>
 8012fba:	f7ff ff8d 	bl	8012ed8 <__sfp_lock_release>
 8012fbe:	0020      	movs	r0, r4
 8012fc0:	2208      	movs	r2, #8
 8012fc2:	0029      	movs	r1, r5
 8012fc4:	6025      	str	r5, [r4, #0]
 8012fc6:	60a5      	str	r5, [r4, #8]
 8012fc8:	6065      	str	r5, [r4, #4]
 8012fca:	6125      	str	r5, [r4, #16]
 8012fcc:	6165      	str	r5, [r4, #20]
 8012fce:	61a5      	str	r5, [r4, #24]
 8012fd0:	305c      	adds	r0, #92	; 0x5c
 8012fd2:	f7fe f9c2 	bl	801135a <memset>
 8012fd6:	6365      	str	r5, [r4, #52]	; 0x34
 8012fd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8012fda:	64a5      	str	r5, [r4, #72]	; 0x48
 8012fdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012fde:	0020      	movs	r0, r4
 8012fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe2:	3468      	adds	r4, #104	; 0x68
 8012fe4:	e7d7      	b.n	8012f96 <__sfp+0x1e>
 8012fe6:	2104      	movs	r1, #4
 8012fe8:	0038      	movs	r0, r7
 8012fea:	f7ff ff57 	bl	8012e9c <__sfmoreglue>
 8012fee:	1e04      	subs	r4, r0, #0
 8012ff0:	6030      	str	r0, [r6, #0]
 8012ff2:	d1d5      	bne.n	8012fa0 <__sfp+0x28>
 8012ff4:	f7ff ff70 	bl	8012ed8 <__sfp_lock_release>
 8012ff8:	230c      	movs	r3, #12
 8012ffa:	603b      	str	r3, [r7, #0]
 8012ffc:	e7ef      	b.n	8012fde <__sfp+0x66>
 8012ffe:	46c0      	nop			; (mov r8, r8)
 8013000:	08014ea8 	.word	0x08014ea8
 8013004:	ffff0001 	.word	0xffff0001

08013008 <_fwalk_reent>:
 8013008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801300a:	0004      	movs	r4, r0
 801300c:	0006      	movs	r6, r0
 801300e:	2700      	movs	r7, #0
 8013010:	9101      	str	r1, [sp, #4]
 8013012:	3448      	adds	r4, #72	; 0x48
 8013014:	6863      	ldr	r3, [r4, #4]
 8013016:	68a5      	ldr	r5, [r4, #8]
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	9b00      	ldr	r3, [sp, #0]
 801301c:	3b01      	subs	r3, #1
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	d504      	bpl.n	801302c <_fwalk_reent+0x24>
 8013022:	6824      	ldr	r4, [r4, #0]
 8013024:	2c00      	cmp	r4, #0
 8013026:	d1f5      	bne.n	8013014 <_fwalk_reent+0xc>
 8013028:	0038      	movs	r0, r7
 801302a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801302c:	89ab      	ldrh	r3, [r5, #12]
 801302e:	2b01      	cmp	r3, #1
 8013030:	d908      	bls.n	8013044 <_fwalk_reent+0x3c>
 8013032:	220e      	movs	r2, #14
 8013034:	5eab      	ldrsh	r3, [r5, r2]
 8013036:	3301      	adds	r3, #1
 8013038:	d004      	beq.n	8013044 <_fwalk_reent+0x3c>
 801303a:	0029      	movs	r1, r5
 801303c:	0030      	movs	r0, r6
 801303e:	9b01      	ldr	r3, [sp, #4]
 8013040:	4798      	blx	r3
 8013042:	4307      	orrs	r7, r0
 8013044:	3568      	adds	r5, #104	; 0x68
 8013046:	e7e8      	b.n	801301a <_fwalk_reent+0x12>

08013048 <_localeconv_r>:
 8013048:	4800      	ldr	r0, [pc, #0]	; (801304c <_localeconv_r+0x4>)
 801304a:	4770      	bx	lr
 801304c:	20000440 	.word	0x20000440

08013050 <__retarget_lock_init_recursive>:
 8013050:	4770      	bx	lr

08013052 <__retarget_lock_acquire_recursive>:
 8013052:	4770      	bx	lr

08013054 <__retarget_lock_release_recursive>:
 8013054:	4770      	bx	lr
	...

08013058 <__swhatbuf_r>:
 8013058:	b570      	push	{r4, r5, r6, lr}
 801305a:	000e      	movs	r6, r1
 801305c:	001d      	movs	r5, r3
 801305e:	230e      	movs	r3, #14
 8013060:	5ec9      	ldrsh	r1, [r1, r3]
 8013062:	0014      	movs	r4, r2
 8013064:	b096      	sub	sp, #88	; 0x58
 8013066:	2900      	cmp	r1, #0
 8013068:	da08      	bge.n	801307c <__swhatbuf_r+0x24>
 801306a:	220c      	movs	r2, #12
 801306c:	5eb3      	ldrsh	r3, [r6, r2]
 801306e:	2200      	movs	r2, #0
 8013070:	602a      	str	r2, [r5, #0]
 8013072:	061b      	lsls	r3, r3, #24
 8013074:	d411      	bmi.n	801309a <__swhatbuf_r+0x42>
 8013076:	2380      	movs	r3, #128	; 0x80
 8013078:	00db      	lsls	r3, r3, #3
 801307a:	e00f      	b.n	801309c <__swhatbuf_r+0x44>
 801307c:	466a      	mov	r2, sp
 801307e:	f001 f88d 	bl	801419c <_fstat_r>
 8013082:	2800      	cmp	r0, #0
 8013084:	dbf1      	blt.n	801306a <__swhatbuf_r+0x12>
 8013086:	23f0      	movs	r3, #240	; 0xf0
 8013088:	9901      	ldr	r1, [sp, #4]
 801308a:	021b      	lsls	r3, r3, #8
 801308c:	4019      	ands	r1, r3
 801308e:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <__swhatbuf_r+0x4c>)
 8013090:	18c9      	adds	r1, r1, r3
 8013092:	424b      	negs	r3, r1
 8013094:	4159      	adcs	r1, r3
 8013096:	6029      	str	r1, [r5, #0]
 8013098:	e7ed      	b.n	8013076 <__swhatbuf_r+0x1e>
 801309a:	2340      	movs	r3, #64	; 0x40
 801309c:	2000      	movs	r0, #0
 801309e:	6023      	str	r3, [r4, #0]
 80130a0:	b016      	add	sp, #88	; 0x58
 80130a2:	bd70      	pop	{r4, r5, r6, pc}
 80130a4:	ffffe000 	.word	0xffffe000

080130a8 <__smakebuf_r>:
 80130a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130aa:	2602      	movs	r6, #2
 80130ac:	898b      	ldrh	r3, [r1, #12]
 80130ae:	0005      	movs	r5, r0
 80130b0:	000c      	movs	r4, r1
 80130b2:	4233      	tst	r3, r6
 80130b4:	d006      	beq.n	80130c4 <__smakebuf_r+0x1c>
 80130b6:	0023      	movs	r3, r4
 80130b8:	3347      	adds	r3, #71	; 0x47
 80130ba:	6023      	str	r3, [r4, #0]
 80130bc:	6123      	str	r3, [r4, #16]
 80130be:	2301      	movs	r3, #1
 80130c0:	6163      	str	r3, [r4, #20]
 80130c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80130c4:	466a      	mov	r2, sp
 80130c6:	ab01      	add	r3, sp, #4
 80130c8:	f7ff ffc6 	bl	8013058 <__swhatbuf_r>
 80130cc:	9900      	ldr	r1, [sp, #0]
 80130ce:	0007      	movs	r7, r0
 80130d0:	0028      	movs	r0, r5
 80130d2:	f000 fc77 	bl	80139c4 <_malloc_r>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d108      	bne.n	80130ec <__smakebuf_r+0x44>
 80130da:	220c      	movs	r2, #12
 80130dc:	5ea3      	ldrsh	r3, [r4, r2]
 80130de:	059a      	lsls	r2, r3, #22
 80130e0:	d4ef      	bmi.n	80130c2 <__smakebuf_r+0x1a>
 80130e2:	2203      	movs	r2, #3
 80130e4:	4393      	bics	r3, r2
 80130e6:	431e      	orrs	r6, r3
 80130e8:	81a6      	strh	r6, [r4, #12]
 80130ea:	e7e4      	b.n	80130b6 <__smakebuf_r+0xe>
 80130ec:	4b0f      	ldr	r3, [pc, #60]	; (801312c <__smakebuf_r+0x84>)
 80130ee:	62ab      	str	r3, [r5, #40]	; 0x28
 80130f0:	2380      	movs	r3, #128	; 0x80
 80130f2:	89a2      	ldrh	r2, [r4, #12]
 80130f4:	6020      	str	r0, [r4, #0]
 80130f6:	4313      	orrs	r3, r2
 80130f8:	81a3      	strh	r3, [r4, #12]
 80130fa:	9b00      	ldr	r3, [sp, #0]
 80130fc:	6120      	str	r0, [r4, #16]
 80130fe:	6163      	str	r3, [r4, #20]
 8013100:	9b01      	ldr	r3, [sp, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d00d      	beq.n	8013122 <__smakebuf_r+0x7a>
 8013106:	0028      	movs	r0, r5
 8013108:	230e      	movs	r3, #14
 801310a:	5ee1      	ldrsh	r1, [r4, r3]
 801310c:	f001 f858 	bl	80141c0 <_isatty_r>
 8013110:	2800      	cmp	r0, #0
 8013112:	d006      	beq.n	8013122 <__smakebuf_r+0x7a>
 8013114:	2203      	movs	r2, #3
 8013116:	89a3      	ldrh	r3, [r4, #12]
 8013118:	4393      	bics	r3, r2
 801311a:	001a      	movs	r2, r3
 801311c:	2301      	movs	r3, #1
 801311e:	4313      	orrs	r3, r2
 8013120:	81a3      	strh	r3, [r4, #12]
 8013122:	89a0      	ldrh	r0, [r4, #12]
 8013124:	4307      	orrs	r7, r0
 8013126:	81a7      	strh	r7, [r4, #12]
 8013128:	e7cb      	b.n	80130c2 <__smakebuf_r+0x1a>
 801312a:	46c0      	nop			; (mov r8, r8)
 801312c:	08012e8d 	.word	0x08012e8d

08013130 <malloc>:
 8013130:	b510      	push	{r4, lr}
 8013132:	4b03      	ldr	r3, [pc, #12]	; (8013140 <malloc+0x10>)
 8013134:	0001      	movs	r1, r0
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	f000 fc44 	bl	80139c4 <_malloc_r>
 801313c:	bd10      	pop	{r4, pc}
 801313e:	46c0      	nop			; (mov r8, r8)
 8013140:	200002ec 	.word	0x200002ec

08013144 <memchr>:
 8013144:	b2c9      	uxtb	r1, r1
 8013146:	1882      	adds	r2, r0, r2
 8013148:	4290      	cmp	r0, r2
 801314a:	d101      	bne.n	8013150 <memchr+0xc>
 801314c:	2000      	movs	r0, #0
 801314e:	4770      	bx	lr
 8013150:	7803      	ldrb	r3, [r0, #0]
 8013152:	428b      	cmp	r3, r1
 8013154:	d0fb      	beq.n	801314e <memchr+0xa>
 8013156:	3001      	adds	r0, #1
 8013158:	e7f6      	b.n	8013148 <memchr+0x4>
	...

0801315c <_Balloc>:
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013160:	0006      	movs	r6, r0
 8013162:	000c      	movs	r4, r1
 8013164:	2d00      	cmp	r5, #0
 8013166:	d10e      	bne.n	8013186 <_Balloc+0x2a>
 8013168:	2010      	movs	r0, #16
 801316a:	f7ff ffe1 	bl	8013130 <malloc>
 801316e:	1e02      	subs	r2, r0, #0
 8013170:	6270      	str	r0, [r6, #36]	; 0x24
 8013172:	d104      	bne.n	801317e <_Balloc+0x22>
 8013174:	2166      	movs	r1, #102	; 0x66
 8013176:	4b19      	ldr	r3, [pc, #100]	; (80131dc <_Balloc+0x80>)
 8013178:	4819      	ldr	r0, [pc, #100]	; (80131e0 <_Balloc+0x84>)
 801317a:	f000 ffcf 	bl	801411c <__assert_func>
 801317e:	6045      	str	r5, [r0, #4]
 8013180:	6085      	str	r5, [r0, #8]
 8013182:	6005      	str	r5, [r0, #0]
 8013184:	60c5      	str	r5, [r0, #12]
 8013186:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8013188:	68eb      	ldr	r3, [r5, #12]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d013      	beq.n	80131b6 <_Balloc+0x5a>
 801318e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013190:	00a2      	lsls	r2, r4, #2
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	189b      	adds	r3, r3, r2
 8013196:	6818      	ldr	r0, [r3, #0]
 8013198:	2800      	cmp	r0, #0
 801319a:	d118      	bne.n	80131ce <_Balloc+0x72>
 801319c:	2101      	movs	r1, #1
 801319e:	000d      	movs	r5, r1
 80131a0:	40a5      	lsls	r5, r4
 80131a2:	1d6a      	adds	r2, r5, #5
 80131a4:	0030      	movs	r0, r6
 80131a6:	0092      	lsls	r2, r2, #2
 80131a8:	f000 fb74 	bl	8013894 <_calloc_r>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d00c      	beq.n	80131ca <_Balloc+0x6e>
 80131b0:	6044      	str	r4, [r0, #4]
 80131b2:	6085      	str	r5, [r0, #8]
 80131b4:	e00d      	b.n	80131d2 <_Balloc+0x76>
 80131b6:	2221      	movs	r2, #33	; 0x21
 80131b8:	2104      	movs	r1, #4
 80131ba:	0030      	movs	r0, r6
 80131bc:	f000 fb6a 	bl	8013894 <_calloc_r>
 80131c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80131c2:	60e8      	str	r0, [r5, #12]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d1e1      	bne.n	801318e <_Balloc+0x32>
 80131ca:	2000      	movs	r0, #0
 80131cc:	bd70      	pop	{r4, r5, r6, pc}
 80131ce:	6802      	ldr	r2, [r0, #0]
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	2300      	movs	r3, #0
 80131d4:	6103      	str	r3, [r0, #16]
 80131d6:	60c3      	str	r3, [r0, #12]
 80131d8:	e7f8      	b.n	80131cc <_Balloc+0x70>
 80131da:	46c0      	nop			; (mov r8, r8)
 80131dc:	08014fee 	.word	0x08014fee
 80131e0:	080150d4 	.word	0x080150d4

080131e4 <_Bfree>:
 80131e4:	b570      	push	{r4, r5, r6, lr}
 80131e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80131e8:	0005      	movs	r5, r0
 80131ea:	000c      	movs	r4, r1
 80131ec:	2e00      	cmp	r6, #0
 80131ee:	d10e      	bne.n	801320e <_Bfree+0x2a>
 80131f0:	2010      	movs	r0, #16
 80131f2:	f7ff ff9d 	bl	8013130 <malloc>
 80131f6:	1e02      	subs	r2, r0, #0
 80131f8:	6268      	str	r0, [r5, #36]	; 0x24
 80131fa:	d104      	bne.n	8013206 <_Bfree+0x22>
 80131fc:	218a      	movs	r1, #138	; 0x8a
 80131fe:	4b09      	ldr	r3, [pc, #36]	; (8013224 <_Bfree+0x40>)
 8013200:	4809      	ldr	r0, [pc, #36]	; (8013228 <_Bfree+0x44>)
 8013202:	f000 ff8b 	bl	801411c <__assert_func>
 8013206:	6046      	str	r6, [r0, #4]
 8013208:	6086      	str	r6, [r0, #8]
 801320a:	6006      	str	r6, [r0, #0]
 801320c:	60c6      	str	r6, [r0, #12]
 801320e:	2c00      	cmp	r4, #0
 8013210:	d007      	beq.n	8013222 <_Bfree+0x3e>
 8013212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013214:	6862      	ldr	r2, [r4, #4]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	0092      	lsls	r2, r2, #2
 801321a:	189b      	adds	r3, r3, r2
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	6022      	str	r2, [r4, #0]
 8013220:	601c      	str	r4, [r3, #0]
 8013222:	bd70      	pop	{r4, r5, r6, pc}
 8013224:	08014fee 	.word	0x08014fee
 8013228:	080150d4 	.word	0x080150d4

0801322c <__multadd>:
 801322c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801322e:	000e      	movs	r6, r1
 8013230:	9001      	str	r0, [sp, #4]
 8013232:	000c      	movs	r4, r1
 8013234:	001d      	movs	r5, r3
 8013236:	2000      	movs	r0, #0
 8013238:	690f      	ldr	r7, [r1, #16]
 801323a:	3614      	adds	r6, #20
 801323c:	6833      	ldr	r3, [r6, #0]
 801323e:	3001      	adds	r0, #1
 8013240:	b299      	uxth	r1, r3
 8013242:	4351      	muls	r1, r2
 8013244:	0c1b      	lsrs	r3, r3, #16
 8013246:	4353      	muls	r3, r2
 8013248:	1949      	adds	r1, r1, r5
 801324a:	0c0d      	lsrs	r5, r1, #16
 801324c:	195b      	adds	r3, r3, r5
 801324e:	0c1d      	lsrs	r5, r3, #16
 8013250:	b289      	uxth	r1, r1
 8013252:	041b      	lsls	r3, r3, #16
 8013254:	185b      	adds	r3, r3, r1
 8013256:	c608      	stmia	r6!, {r3}
 8013258:	4287      	cmp	r7, r0
 801325a:	dcef      	bgt.n	801323c <__multadd+0x10>
 801325c:	2d00      	cmp	r5, #0
 801325e:	d022      	beq.n	80132a6 <__multadd+0x7a>
 8013260:	68a3      	ldr	r3, [r4, #8]
 8013262:	42bb      	cmp	r3, r7
 8013264:	dc19      	bgt.n	801329a <__multadd+0x6e>
 8013266:	6863      	ldr	r3, [r4, #4]
 8013268:	9801      	ldr	r0, [sp, #4]
 801326a:	1c59      	adds	r1, r3, #1
 801326c:	f7ff ff76 	bl	801315c <_Balloc>
 8013270:	1e06      	subs	r6, r0, #0
 8013272:	d105      	bne.n	8013280 <__multadd+0x54>
 8013274:	0002      	movs	r2, r0
 8013276:	21b5      	movs	r1, #181	; 0xb5
 8013278:	4b0c      	ldr	r3, [pc, #48]	; (80132ac <__multadd+0x80>)
 801327a:	480d      	ldr	r0, [pc, #52]	; (80132b0 <__multadd+0x84>)
 801327c:	f000 ff4e 	bl	801411c <__assert_func>
 8013280:	0021      	movs	r1, r4
 8013282:	6923      	ldr	r3, [r4, #16]
 8013284:	310c      	adds	r1, #12
 8013286:	1c9a      	adds	r2, r3, #2
 8013288:	0092      	lsls	r2, r2, #2
 801328a:	300c      	adds	r0, #12
 801328c:	f7fe f85c 	bl	8011348 <memcpy>
 8013290:	0021      	movs	r1, r4
 8013292:	9801      	ldr	r0, [sp, #4]
 8013294:	f7ff ffa6 	bl	80131e4 <_Bfree>
 8013298:	0034      	movs	r4, r6
 801329a:	1d3b      	adds	r3, r7, #4
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	18e3      	adds	r3, r4, r3
 80132a0:	605d      	str	r5, [r3, #4]
 80132a2:	1c7b      	adds	r3, r7, #1
 80132a4:	6123      	str	r3, [r4, #16]
 80132a6:	0020      	movs	r0, r4
 80132a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80132aa:	46c0      	nop			; (mov r8, r8)
 80132ac:	08015060 	.word	0x08015060
 80132b0:	080150d4 	.word	0x080150d4

080132b4 <__hi0bits>:
 80132b4:	0003      	movs	r3, r0
 80132b6:	0c02      	lsrs	r2, r0, #16
 80132b8:	2000      	movs	r0, #0
 80132ba:	4282      	cmp	r2, r0
 80132bc:	d101      	bne.n	80132c2 <__hi0bits+0xe>
 80132be:	041b      	lsls	r3, r3, #16
 80132c0:	3010      	adds	r0, #16
 80132c2:	0e1a      	lsrs	r2, r3, #24
 80132c4:	d101      	bne.n	80132ca <__hi0bits+0x16>
 80132c6:	3008      	adds	r0, #8
 80132c8:	021b      	lsls	r3, r3, #8
 80132ca:	0f1a      	lsrs	r2, r3, #28
 80132cc:	d101      	bne.n	80132d2 <__hi0bits+0x1e>
 80132ce:	3004      	adds	r0, #4
 80132d0:	011b      	lsls	r3, r3, #4
 80132d2:	0f9a      	lsrs	r2, r3, #30
 80132d4:	d101      	bne.n	80132da <__hi0bits+0x26>
 80132d6:	3002      	adds	r0, #2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	2b00      	cmp	r3, #0
 80132dc:	db03      	blt.n	80132e6 <__hi0bits+0x32>
 80132de:	3001      	adds	r0, #1
 80132e0:	005b      	lsls	r3, r3, #1
 80132e2:	d400      	bmi.n	80132e6 <__hi0bits+0x32>
 80132e4:	2020      	movs	r0, #32
 80132e6:	4770      	bx	lr

080132e8 <__lo0bits>:
 80132e8:	6803      	ldr	r3, [r0, #0]
 80132ea:	0002      	movs	r2, r0
 80132ec:	2107      	movs	r1, #7
 80132ee:	0018      	movs	r0, r3
 80132f0:	4008      	ands	r0, r1
 80132f2:	420b      	tst	r3, r1
 80132f4:	d00d      	beq.n	8013312 <__lo0bits+0x2a>
 80132f6:	3906      	subs	r1, #6
 80132f8:	2000      	movs	r0, #0
 80132fa:	420b      	tst	r3, r1
 80132fc:	d105      	bne.n	801330a <__lo0bits+0x22>
 80132fe:	3002      	adds	r0, #2
 8013300:	4203      	tst	r3, r0
 8013302:	d003      	beq.n	801330c <__lo0bits+0x24>
 8013304:	40cb      	lsrs	r3, r1
 8013306:	0008      	movs	r0, r1
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	4770      	bx	lr
 801330c:	089b      	lsrs	r3, r3, #2
 801330e:	6013      	str	r3, [r2, #0]
 8013310:	e7fb      	b.n	801330a <__lo0bits+0x22>
 8013312:	b299      	uxth	r1, r3
 8013314:	2900      	cmp	r1, #0
 8013316:	d101      	bne.n	801331c <__lo0bits+0x34>
 8013318:	2010      	movs	r0, #16
 801331a:	0c1b      	lsrs	r3, r3, #16
 801331c:	b2d9      	uxtb	r1, r3
 801331e:	2900      	cmp	r1, #0
 8013320:	d101      	bne.n	8013326 <__lo0bits+0x3e>
 8013322:	3008      	adds	r0, #8
 8013324:	0a1b      	lsrs	r3, r3, #8
 8013326:	0719      	lsls	r1, r3, #28
 8013328:	d101      	bne.n	801332e <__lo0bits+0x46>
 801332a:	3004      	adds	r0, #4
 801332c:	091b      	lsrs	r3, r3, #4
 801332e:	0799      	lsls	r1, r3, #30
 8013330:	d101      	bne.n	8013336 <__lo0bits+0x4e>
 8013332:	3002      	adds	r0, #2
 8013334:	089b      	lsrs	r3, r3, #2
 8013336:	07d9      	lsls	r1, r3, #31
 8013338:	d4e9      	bmi.n	801330e <__lo0bits+0x26>
 801333a:	3001      	adds	r0, #1
 801333c:	085b      	lsrs	r3, r3, #1
 801333e:	d1e6      	bne.n	801330e <__lo0bits+0x26>
 8013340:	2020      	movs	r0, #32
 8013342:	e7e2      	b.n	801330a <__lo0bits+0x22>

08013344 <__i2b>:
 8013344:	b510      	push	{r4, lr}
 8013346:	000c      	movs	r4, r1
 8013348:	2101      	movs	r1, #1
 801334a:	f7ff ff07 	bl	801315c <_Balloc>
 801334e:	2800      	cmp	r0, #0
 8013350:	d106      	bne.n	8013360 <__i2b+0x1c>
 8013352:	21a0      	movs	r1, #160	; 0xa0
 8013354:	0002      	movs	r2, r0
 8013356:	4b04      	ldr	r3, [pc, #16]	; (8013368 <__i2b+0x24>)
 8013358:	4804      	ldr	r0, [pc, #16]	; (801336c <__i2b+0x28>)
 801335a:	0049      	lsls	r1, r1, #1
 801335c:	f000 fede 	bl	801411c <__assert_func>
 8013360:	2301      	movs	r3, #1
 8013362:	6144      	str	r4, [r0, #20]
 8013364:	6103      	str	r3, [r0, #16]
 8013366:	bd10      	pop	{r4, pc}
 8013368:	08015060 	.word	0x08015060
 801336c:	080150d4 	.word	0x080150d4

08013370 <__multiply>:
 8013370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013372:	690b      	ldr	r3, [r1, #16]
 8013374:	0014      	movs	r4, r2
 8013376:	6912      	ldr	r2, [r2, #16]
 8013378:	000d      	movs	r5, r1
 801337a:	b089      	sub	sp, #36	; 0x24
 801337c:	4293      	cmp	r3, r2
 801337e:	da01      	bge.n	8013384 <__multiply+0x14>
 8013380:	0025      	movs	r5, r4
 8013382:	000c      	movs	r4, r1
 8013384:	692f      	ldr	r7, [r5, #16]
 8013386:	6926      	ldr	r6, [r4, #16]
 8013388:	6869      	ldr	r1, [r5, #4]
 801338a:	19bb      	adds	r3, r7, r6
 801338c:	9302      	str	r3, [sp, #8]
 801338e:	68ab      	ldr	r3, [r5, #8]
 8013390:	19ba      	adds	r2, r7, r6
 8013392:	4293      	cmp	r3, r2
 8013394:	da00      	bge.n	8013398 <__multiply+0x28>
 8013396:	3101      	adds	r1, #1
 8013398:	f7ff fee0 	bl	801315c <_Balloc>
 801339c:	9001      	str	r0, [sp, #4]
 801339e:	2800      	cmp	r0, #0
 80133a0:	d106      	bne.n	80133b0 <__multiply+0x40>
 80133a2:	215e      	movs	r1, #94	; 0x5e
 80133a4:	0002      	movs	r2, r0
 80133a6:	4b48      	ldr	r3, [pc, #288]	; (80134c8 <__multiply+0x158>)
 80133a8:	4848      	ldr	r0, [pc, #288]	; (80134cc <__multiply+0x15c>)
 80133aa:	31ff      	adds	r1, #255	; 0xff
 80133ac:	f000 feb6 	bl	801411c <__assert_func>
 80133b0:	9b01      	ldr	r3, [sp, #4]
 80133b2:	2200      	movs	r2, #0
 80133b4:	3314      	adds	r3, #20
 80133b6:	469c      	mov	ip, r3
 80133b8:	19bb      	adds	r3, r7, r6
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	4463      	add	r3, ip
 80133be:	9303      	str	r3, [sp, #12]
 80133c0:	4663      	mov	r3, ip
 80133c2:	9903      	ldr	r1, [sp, #12]
 80133c4:	428b      	cmp	r3, r1
 80133c6:	d32c      	bcc.n	8013422 <__multiply+0xb2>
 80133c8:	002b      	movs	r3, r5
 80133ca:	0022      	movs	r2, r4
 80133cc:	3314      	adds	r3, #20
 80133ce:	00bf      	lsls	r7, r7, #2
 80133d0:	3214      	adds	r2, #20
 80133d2:	9306      	str	r3, [sp, #24]
 80133d4:	00b6      	lsls	r6, r6, #2
 80133d6:	19db      	adds	r3, r3, r7
 80133d8:	9304      	str	r3, [sp, #16]
 80133da:	1993      	adds	r3, r2, r6
 80133dc:	9307      	str	r3, [sp, #28]
 80133de:	2304      	movs	r3, #4
 80133e0:	9305      	str	r3, [sp, #20]
 80133e2:	002b      	movs	r3, r5
 80133e4:	9904      	ldr	r1, [sp, #16]
 80133e6:	3315      	adds	r3, #21
 80133e8:	9200      	str	r2, [sp, #0]
 80133ea:	4299      	cmp	r1, r3
 80133ec:	d305      	bcc.n	80133fa <__multiply+0x8a>
 80133ee:	1b4b      	subs	r3, r1, r5
 80133f0:	3b15      	subs	r3, #21
 80133f2:	089b      	lsrs	r3, r3, #2
 80133f4:	3301      	adds	r3, #1
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	9305      	str	r3, [sp, #20]
 80133fa:	9b07      	ldr	r3, [sp, #28]
 80133fc:	9a00      	ldr	r2, [sp, #0]
 80133fe:	429a      	cmp	r2, r3
 8013400:	d311      	bcc.n	8013426 <__multiply+0xb6>
 8013402:	9b02      	ldr	r3, [sp, #8]
 8013404:	2b00      	cmp	r3, #0
 8013406:	dd06      	ble.n	8013416 <__multiply+0xa6>
 8013408:	9b03      	ldr	r3, [sp, #12]
 801340a:	3b04      	subs	r3, #4
 801340c:	9303      	str	r3, [sp, #12]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	9300      	str	r3, [sp, #0]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d053      	beq.n	80134be <__multiply+0x14e>
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	9a02      	ldr	r2, [sp, #8]
 801341a:	0018      	movs	r0, r3
 801341c:	611a      	str	r2, [r3, #16]
 801341e:	b009      	add	sp, #36	; 0x24
 8013420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013422:	c304      	stmia	r3!, {r2}
 8013424:	e7cd      	b.n	80133c2 <__multiply+0x52>
 8013426:	9b00      	ldr	r3, [sp, #0]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	b298      	uxth	r0, r3
 801342c:	2800      	cmp	r0, #0
 801342e:	d01b      	beq.n	8013468 <__multiply+0xf8>
 8013430:	4667      	mov	r7, ip
 8013432:	2400      	movs	r4, #0
 8013434:	9e06      	ldr	r6, [sp, #24]
 8013436:	ce02      	ldmia	r6!, {r1}
 8013438:	683a      	ldr	r2, [r7, #0]
 801343a:	b28b      	uxth	r3, r1
 801343c:	4343      	muls	r3, r0
 801343e:	b292      	uxth	r2, r2
 8013440:	189b      	adds	r3, r3, r2
 8013442:	191b      	adds	r3, r3, r4
 8013444:	0c0c      	lsrs	r4, r1, #16
 8013446:	4344      	muls	r4, r0
 8013448:	683a      	ldr	r2, [r7, #0]
 801344a:	0c11      	lsrs	r1, r2, #16
 801344c:	1861      	adds	r1, r4, r1
 801344e:	0c1c      	lsrs	r4, r3, #16
 8013450:	1909      	adds	r1, r1, r4
 8013452:	0c0c      	lsrs	r4, r1, #16
 8013454:	b29b      	uxth	r3, r3
 8013456:	0409      	lsls	r1, r1, #16
 8013458:	430b      	orrs	r3, r1
 801345a:	c708      	stmia	r7!, {r3}
 801345c:	9b04      	ldr	r3, [sp, #16]
 801345e:	42b3      	cmp	r3, r6
 8013460:	d8e9      	bhi.n	8013436 <__multiply+0xc6>
 8013462:	4663      	mov	r3, ip
 8013464:	9a05      	ldr	r2, [sp, #20]
 8013466:	509c      	str	r4, [r3, r2]
 8013468:	9b00      	ldr	r3, [sp, #0]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	0c1e      	lsrs	r6, r3, #16
 801346e:	d020      	beq.n	80134b2 <__multiply+0x142>
 8013470:	4663      	mov	r3, ip
 8013472:	002c      	movs	r4, r5
 8013474:	4660      	mov	r0, ip
 8013476:	2700      	movs	r7, #0
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	3414      	adds	r4, #20
 801347c:	6822      	ldr	r2, [r4, #0]
 801347e:	b29b      	uxth	r3, r3
 8013480:	b291      	uxth	r1, r2
 8013482:	4371      	muls	r1, r6
 8013484:	6802      	ldr	r2, [r0, #0]
 8013486:	0c12      	lsrs	r2, r2, #16
 8013488:	1889      	adds	r1, r1, r2
 801348a:	19cf      	adds	r7, r1, r7
 801348c:	0439      	lsls	r1, r7, #16
 801348e:	430b      	orrs	r3, r1
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	cc02      	ldmia	r4!, {r1}
 8013494:	6843      	ldr	r3, [r0, #4]
 8013496:	0c09      	lsrs	r1, r1, #16
 8013498:	4371      	muls	r1, r6
 801349a:	b29b      	uxth	r3, r3
 801349c:	0c3f      	lsrs	r7, r7, #16
 801349e:	18cb      	adds	r3, r1, r3
 80134a0:	9a04      	ldr	r2, [sp, #16]
 80134a2:	19db      	adds	r3, r3, r7
 80134a4:	0c1f      	lsrs	r7, r3, #16
 80134a6:	3004      	adds	r0, #4
 80134a8:	42a2      	cmp	r2, r4
 80134aa:	d8e7      	bhi.n	801347c <__multiply+0x10c>
 80134ac:	4662      	mov	r2, ip
 80134ae:	9905      	ldr	r1, [sp, #20]
 80134b0:	5053      	str	r3, [r2, r1]
 80134b2:	9b00      	ldr	r3, [sp, #0]
 80134b4:	3304      	adds	r3, #4
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	2304      	movs	r3, #4
 80134ba:	449c      	add	ip, r3
 80134bc:	e79d      	b.n	80133fa <__multiply+0x8a>
 80134be:	9b02      	ldr	r3, [sp, #8]
 80134c0:	3b01      	subs	r3, #1
 80134c2:	9302      	str	r3, [sp, #8]
 80134c4:	e79d      	b.n	8013402 <__multiply+0x92>
 80134c6:	46c0      	nop			; (mov r8, r8)
 80134c8:	08015060 	.word	0x08015060
 80134cc:	080150d4 	.word	0x080150d4

080134d0 <__pow5mult>:
 80134d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134d2:	2303      	movs	r3, #3
 80134d4:	0015      	movs	r5, r2
 80134d6:	0007      	movs	r7, r0
 80134d8:	000e      	movs	r6, r1
 80134da:	401a      	ands	r2, r3
 80134dc:	421d      	tst	r5, r3
 80134de:	d008      	beq.n	80134f2 <__pow5mult+0x22>
 80134e0:	4925      	ldr	r1, [pc, #148]	; (8013578 <__pow5mult+0xa8>)
 80134e2:	3a01      	subs	r2, #1
 80134e4:	0092      	lsls	r2, r2, #2
 80134e6:	5852      	ldr	r2, [r2, r1]
 80134e8:	2300      	movs	r3, #0
 80134ea:	0031      	movs	r1, r6
 80134ec:	f7ff fe9e 	bl	801322c <__multadd>
 80134f0:	0006      	movs	r6, r0
 80134f2:	10ad      	asrs	r5, r5, #2
 80134f4:	d03d      	beq.n	8013572 <__pow5mult+0xa2>
 80134f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80134f8:	2c00      	cmp	r4, #0
 80134fa:	d10f      	bne.n	801351c <__pow5mult+0x4c>
 80134fc:	2010      	movs	r0, #16
 80134fe:	f7ff fe17 	bl	8013130 <malloc>
 8013502:	1e02      	subs	r2, r0, #0
 8013504:	6278      	str	r0, [r7, #36]	; 0x24
 8013506:	d105      	bne.n	8013514 <__pow5mult+0x44>
 8013508:	21d7      	movs	r1, #215	; 0xd7
 801350a:	4b1c      	ldr	r3, [pc, #112]	; (801357c <__pow5mult+0xac>)
 801350c:	481c      	ldr	r0, [pc, #112]	; (8013580 <__pow5mult+0xb0>)
 801350e:	0049      	lsls	r1, r1, #1
 8013510:	f000 fe04 	bl	801411c <__assert_func>
 8013514:	6044      	str	r4, [r0, #4]
 8013516:	6084      	str	r4, [r0, #8]
 8013518:	6004      	str	r4, [r0, #0]
 801351a:	60c4      	str	r4, [r0, #12]
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	689c      	ldr	r4, [r3, #8]
 8013520:	9301      	str	r3, [sp, #4]
 8013522:	2c00      	cmp	r4, #0
 8013524:	d108      	bne.n	8013538 <__pow5mult+0x68>
 8013526:	0038      	movs	r0, r7
 8013528:	4916      	ldr	r1, [pc, #88]	; (8013584 <__pow5mult+0xb4>)
 801352a:	f7ff ff0b 	bl	8013344 <__i2b>
 801352e:	9b01      	ldr	r3, [sp, #4]
 8013530:	0004      	movs	r4, r0
 8013532:	6098      	str	r0, [r3, #8]
 8013534:	2300      	movs	r3, #0
 8013536:	6003      	str	r3, [r0, #0]
 8013538:	2301      	movs	r3, #1
 801353a:	421d      	tst	r5, r3
 801353c:	d00a      	beq.n	8013554 <__pow5mult+0x84>
 801353e:	0031      	movs	r1, r6
 8013540:	0022      	movs	r2, r4
 8013542:	0038      	movs	r0, r7
 8013544:	f7ff ff14 	bl	8013370 <__multiply>
 8013548:	0031      	movs	r1, r6
 801354a:	9001      	str	r0, [sp, #4]
 801354c:	0038      	movs	r0, r7
 801354e:	f7ff fe49 	bl	80131e4 <_Bfree>
 8013552:	9e01      	ldr	r6, [sp, #4]
 8013554:	106d      	asrs	r5, r5, #1
 8013556:	d00c      	beq.n	8013572 <__pow5mult+0xa2>
 8013558:	6820      	ldr	r0, [r4, #0]
 801355a:	2800      	cmp	r0, #0
 801355c:	d107      	bne.n	801356e <__pow5mult+0x9e>
 801355e:	0022      	movs	r2, r4
 8013560:	0021      	movs	r1, r4
 8013562:	0038      	movs	r0, r7
 8013564:	f7ff ff04 	bl	8013370 <__multiply>
 8013568:	2300      	movs	r3, #0
 801356a:	6020      	str	r0, [r4, #0]
 801356c:	6003      	str	r3, [r0, #0]
 801356e:	0004      	movs	r4, r0
 8013570:	e7e2      	b.n	8013538 <__pow5mult+0x68>
 8013572:	0030      	movs	r0, r6
 8013574:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013576:	46c0      	nop			; (mov r8, r8)
 8013578:	08015220 	.word	0x08015220
 801357c:	08014fee 	.word	0x08014fee
 8013580:	080150d4 	.word	0x080150d4
 8013584:	00000271 	.word	0x00000271

08013588 <__lshift>:
 8013588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801358a:	000c      	movs	r4, r1
 801358c:	0017      	movs	r7, r2
 801358e:	6923      	ldr	r3, [r4, #16]
 8013590:	1155      	asrs	r5, r2, #5
 8013592:	b087      	sub	sp, #28
 8013594:	18eb      	adds	r3, r5, r3
 8013596:	9302      	str	r3, [sp, #8]
 8013598:	3301      	adds	r3, #1
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	6849      	ldr	r1, [r1, #4]
 801359e:	68a3      	ldr	r3, [r4, #8]
 80135a0:	9004      	str	r0, [sp, #16]
 80135a2:	9a01      	ldr	r2, [sp, #4]
 80135a4:	4293      	cmp	r3, r2
 80135a6:	db10      	blt.n	80135ca <__lshift+0x42>
 80135a8:	9804      	ldr	r0, [sp, #16]
 80135aa:	f7ff fdd7 	bl	801315c <_Balloc>
 80135ae:	2300      	movs	r3, #0
 80135b0:	0002      	movs	r2, r0
 80135b2:	0006      	movs	r6, r0
 80135b4:	0019      	movs	r1, r3
 80135b6:	3214      	adds	r2, #20
 80135b8:	4298      	cmp	r0, r3
 80135ba:	d10c      	bne.n	80135d6 <__lshift+0x4e>
 80135bc:	21da      	movs	r1, #218	; 0xda
 80135be:	0002      	movs	r2, r0
 80135c0:	4b26      	ldr	r3, [pc, #152]	; (801365c <__lshift+0xd4>)
 80135c2:	4827      	ldr	r0, [pc, #156]	; (8013660 <__lshift+0xd8>)
 80135c4:	31ff      	adds	r1, #255	; 0xff
 80135c6:	f000 fda9 	bl	801411c <__assert_func>
 80135ca:	3101      	adds	r1, #1
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	e7e8      	b.n	80135a2 <__lshift+0x1a>
 80135d0:	0098      	lsls	r0, r3, #2
 80135d2:	5011      	str	r1, [r2, r0]
 80135d4:	3301      	adds	r3, #1
 80135d6:	42ab      	cmp	r3, r5
 80135d8:	dbfa      	blt.n	80135d0 <__lshift+0x48>
 80135da:	43eb      	mvns	r3, r5
 80135dc:	17db      	asrs	r3, r3, #31
 80135de:	401d      	ands	r5, r3
 80135e0:	211f      	movs	r1, #31
 80135e2:	0023      	movs	r3, r4
 80135e4:	0038      	movs	r0, r7
 80135e6:	00ad      	lsls	r5, r5, #2
 80135e8:	1955      	adds	r5, r2, r5
 80135ea:	6922      	ldr	r2, [r4, #16]
 80135ec:	3314      	adds	r3, #20
 80135ee:	0092      	lsls	r2, r2, #2
 80135f0:	4008      	ands	r0, r1
 80135f2:	4684      	mov	ip, r0
 80135f4:	189a      	adds	r2, r3, r2
 80135f6:	420f      	tst	r7, r1
 80135f8:	d02a      	beq.n	8013650 <__lshift+0xc8>
 80135fa:	3101      	adds	r1, #1
 80135fc:	1a09      	subs	r1, r1, r0
 80135fe:	9105      	str	r1, [sp, #20]
 8013600:	2100      	movs	r1, #0
 8013602:	9503      	str	r5, [sp, #12]
 8013604:	4667      	mov	r7, ip
 8013606:	6818      	ldr	r0, [r3, #0]
 8013608:	40b8      	lsls	r0, r7
 801360a:	4301      	orrs	r1, r0
 801360c:	9803      	ldr	r0, [sp, #12]
 801360e:	c002      	stmia	r0!, {r1}
 8013610:	cb02      	ldmia	r3!, {r1}
 8013612:	9003      	str	r0, [sp, #12]
 8013614:	9805      	ldr	r0, [sp, #20]
 8013616:	40c1      	lsrs	r1, r0
 8013618:	429a      	cmp	r2, r3
 801361a:	d8f3      	bhi.n	8013604 <__lshift+0x7c>
 801361c:	0020      	movs	r0, r4
 801361e:	3015      	adds	r0, #21
 8013620:	2304      	movs	r3, #4
 8013622:	4282      	cmp	r2, r0
 8013624:	d304      	bcc.n	8013630 <__lshift+0xa8>
 8013626:	1b13      	subs	r3, r2, r4
 8013628:	3b15      	subs	r3, #21
 801362a:	089b      	lsrs	r3, r3, #2
 801362c:	3301      	adds	r3, #1
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	50e9      	str	r1, [r5, r3]
 8013632:	2900      	cmp	r1, #0
 8013634:	d002      	beq.n	801363c <__lshift+0xb4>
 8013636:	9b02      	ldr	r3, [sp, #8]
 8013638:	3302      	adds	r3, #2
 801363a:	9301      	str	r3, [sp, #4]
 801363c:	9b01      	ldr	r3, [sp, #4]
 801363e:	9804      	ldr	r0, [sp, #16]
 8013640:	3b01      	subs	r3, #1
 8013642:	0021      	movs	r1, r4
 8013644:	6133      	str	r3, [r6, #16]
 8013646:	f7ff fdcd 	bl	80131e4 <_Bfree>
 801364a:	0030      	movs	r0, r6
 801364c:	b007      	add	sp, #28
 801364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013650:	cb02      	ldmia	r3!, {r1}
 8013652:	c502      	stmia	r5!, {r1}
 8013654:	429a      	cmp	r2, r3
 8013656:	d8fb      	bhi.n	8013650 <__lshift+0xc8>
 8013658:	e7f0      	b.n	801363c <__lshift+0xb4>
 801365a:	46c0      	nop			; (mov r8, r8)
 801365c:	08015060 	.word	0x08015060
 8013660:	080150d4 	.word	0x080150d4

08013664 <__mcmp>:
 8013664:	6902      	ldr	r2, [r0, #16]
 8013666:	690b      	ldr	r3, [r1, #16]
 8013668:	b530      	push	{r4, r5, lr}
 801366a:	0004      	movs	r4, r0
 801366c:	1ad0      	subs	r0, r2, r3
 801366e:	429a      	cmp	r2, r3
 8013670:	d10d      	bne.n	801368e <__mcmp+0x2a>
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	3414      	adds	r4, #20
 8013676:	3114      	adds	r1, #20
 8013678:	18e2      	adds	r2, r4, r3
 801367a:	18c9      	adds	r1, r1, r3
 801367c:	3a04      	subs	r2, #4
 801367e:	3904      	subs	r1, #4
 8013680:	6815      	ldr	r5, [r2, #0]
 8013682:	680b      	ldr	r3, [r1, #0]
 8013684:	429d      	cmp	r5, r3
 8013686:	d003      	beq.n	8013690 <__mcmp+0x2c>
 8013688:	2001      	movs	r0, #1
 801368a:	429d      	cmp	r5, r3
 801368c:	d303      	bcc.n	8013696 <__mcmp+0x32>
 801368e:	bd30      	pop	{r4, r5, pc}
 8013690:	4294      	cmp	r4, r2
 8013692:	d3f3      	bcc.n	801367c <__mcmp+0x18>
 8013694:	e7fb      	b.n	801368e <__mcmp+0x2a>
 8013696:	4240      	negs	r0, r0
 8013698:	e7f9      	b.n	801368e <__mcmp+0x2a>
	...

0801369c <__mdiff>:
 801369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801369e:	000e      	movs	r6, r1
 80136a0:	0007      	movs	r7, r0
 80136a2:	0011      	movs	r1, r2
 80136a4:	0030      	movs	r0, r6
 80136a6:	b087      	sub	sp, #28
 80136a8:	0014      	movs	r4, r2
 80136aa:	f7ff ffdb 	bl	8013664 <__mcmp>
 80136ae:	1e05      	subs	r5, r0, #0
 80136b0:	d110      	bne.n	80136d4 <__mdiff+0x38>
 80136b2:	0001      	movs	r1, r0
 80136b4:	0038      	movs	r0, r7
 80136b6:	f7ff fd51 	bl	801315c <_Balloc>
 80136ba:	1e02      	subs	r2, r0, #0
 80136bc:	d104      	bne.n	80136c8 <__mdiff+0x2c>
 80136be:	4b40      	ldr	r3, [pc, #256]	; (80137c0 <__mdiff+0x124>)
 80136c0:	4940      	ldr	r1, [pc, #256]	; (80137c4 <__mdiff+0x128>)
 80136c2:	4841      	ldr	r0, [pc, #260]	; (80137c8 <__mdiff+0x12c>)
 80136c4:	f000 fd2a 	bl	801411c <__assert_func>
 80136c8:	2301      	movs	r3, #1
 80136ca:	6145      	str	r5, [r0, #20]
 80136cc:	6103      	str	r3, [r0, #16]
 80136ce:	0010      	movs	r0, r2
 80136d0:	b007      	add	sp, #28
 80136d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d4:	2301      	movs	r3, #1
 80136d6:	9301      	str	r3, [sp, #4]
 80136d8:	2800      	cmp	r0, #0
 80136da:	db04      	blt.n	80136e6 <__mdiff+0x4a>
 80136dc:	0023      	movs	r3, r4
 80136de:	0034      	movs	r4, r6
 80136e0:	001e      	movs	r6, r3
 80136e2:	2300      	movs	r3, #0
 80136e4:	9301      	str	r3, [sp, #4]
 80136e6:	0038      	movs	r0, r7
 80136e8:	6861      	ldr	r1, [r4, #4]
 80136ea:	f7ff fd37 	bl	801315c <_Balloc>
 80136ee:	1e02      	subs	r2, r0, #0
 80136f0:	d103      	bne.n	80136fa <__mdiff+0x5e>
 80136f2:	2190      	movs	r1, #144	; 0x90
 80136f4:	4b32      	ldr	r3, [pc, #200]	; (80137c0 <__mdiff+0x124>)
 80136f6:	0089      	lsls	r1, r1, #2
 80136f8:	e7e3      	b.n	80136c2 <__mdiff+0x26>
 80136fa:	9b01      	ldr	r3, [sp, #4]
 80136fc:	2700      	movs	r7, #0
 80136fe:	60c3      	str	r3, [r0, #12]
 8013700:	6920      	ldr	r0, [r4, #16]
 8013702:	3414      	adds	r4, #20
 8013704:	9401      	str	r4, [sp, #4]
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	0084      	lsls	r4, r0, #2
 801370a:	191b      	adds	r3, r3, r4
 801370c:	0034      	movs	r4, r6
 801370e:	9302      	str	r3, [sp, #8]
 8013710:	6933      	ldr	r3, [r6, #16]
 8013712:	3414      	adds	r4, #20
 8013714:	0099      	lsls	r1, r3, #2
 8013716:	1863      	adds	r3, r4, r1
 8013718:	9303      	str	r3, [sp, #12]
 801371a:	0013      	movs	r3, r2
 801371c:	3314      	adds	r3, #20
 801371e:	469c      	mov	ip, r3
 8013720:	9305      	str	r3, [sp, #20]
 8013722:	9b01      	ldr	r3, [sp, #4]
 8013724:	9304      	str	r3, [sp, #16]
 8013726:	9b04      	ldr	r3, [sp, #16]
 8013728:	cc02      	ldmia	r4!, {r1}
 801372a:	cb20      	ldmia	r3!, {r5}
 801372c:	9304      	str	r3, [sp, #16]
 801372e:	b2ab      	uxth	r3, r5
 8013730:	19df      	adds	r7, r3, r7
 8013732:	b28b      	uxth	r3, r1
 8013734:	1afb      	subs	r3, r7, r3
 8013736:	0c09      	lsrs	r1, r1, #16
 8013738:	0c2d      	lsrs	r5, r5, #16
 801373a:	1a6d      	subs	r5, r5, r1
 801373c:	1419      	asrs	r1, r3, #16
 801373e:	186d      	adds	r5, r5, r1
 8013740:	4661      	mov	r1, ip
 8013742:	142f      	asrs	r7, r5, #16
 8013744:	b29b      	uxth	r3, r3
 8013746:	042d      	lsls	r5, r5, #16
 8013748:	432b      	orrs	r3, r5
 801374a:	c108      	stmia	r1!, {r3}
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	468c      	mov	ip, r1
 8013750:	42a3      	cmp	r3, r4
 8013752:	d8e8      	bhi.n	8013726 <__mdiff+0x8a>
 8013754:	0031      	movs	r1, r6
 8013756:	9c03      	ldr	r4, [sp, #12]
 8013758:	3115      	adds	r1, #21
 801375a:	2304      	movs	r3, #4
 801375c:	428c      	cmp	r4, r1
 801375e:	d304      	bcc.n	801376a <__mdiff+0xce>
 8013760:	1ba3      	subs	r3, r4, r6
 8013762:	3b15      	subs	r3, #21
 8013764:	089b      	lsrs	r3, r3, #2
 8013766:	3301      	adds	r3, #1
 8013768:	009b      	lsls	r3, r3, #2
 801376a:	9901      	ldr	r1, [sp, #4]
 801376c:	18cc      	adds	r4, r1, r3
 801376e:	9905      	ldr	r1, [sp, #20]
 8013770:	0026      	movs	r6, r4
 8013772:	18cb      	adds	r3, r1, r3
 8013774:	469c      	mov	ip, r3
 8013776:	9902      	ldr	r1, [sp, #8]
 8013778:	428e      	cmp	r6, r1
 801377a:	d310      	bcc.n	801379e <__mdiff+0x102>
 801377c:	9e02      	ldr	r6, [sp, #8]
 801377e:	1ee1      	subs	r1, r4, #3
 8013780:	2500      	movs	r5, #0
 8013782:	428e      	cmp	r6, r1
 8013784:	d304      	bcc.n	8013790 <__mdiff+0xf4>
 8013786:	0031      	movs	r1, r6
 8013788:	3103      	adds	r1, #3
 801378a:	1b0c      	subs	r4, r1, r4
 801378c:	08a4      	lsrs	r4, r4, #2
 801378e:	00a5      	lsls	r5, r4, #2
 8013790:	195b      	adds	r3, r3, r5
 8013792:	3b04      	subs	r3, #4
 8013794:	6819      	ldr	r1, [r3, #0]
 8013796:	2900      	cmp	r1, #0
 8013798:	d00f      	beq.n	80137ba <__mdiff+0x11e>
 801379a:	6110      	str	r0, [r2, #16]
 801379c:	e797      	b.n	80136ce <__mdiff+0x32>
 801379e:	ce02      	ldmia	r6!, {r1}
 80137a0:	b28d      	uxth	r5, r1
 80137a2:	19ed      	adds	r5, r5, r7
 80137a4:	0c0f      	lsrs	r7, r1, #16
 80137a6:	1429      	asrs	r1, r5, #16
 80137a8:	1879      	adds	r1, r7, r1
 80137aa:	140f      	asrs	r7, r1, #16
 80137ac:	b2ad      	uxth	r5, r5
 80137ae:	0409      	lsls	r1, r1, #16
 80137b0:	430d      	orrs	r5, r1
 80137b2:	4661      	mov	r1, ip
 80137b4:	c120      	stmia	r1!, {r5}
 80137b6:	468c      	mov	ip, r1
 80137b8:	e7dd      	b.n	8013776 <__mdiff+0xda>
 80137ba:	3801      	subs	r0, #1
 80137bc:	e7e9      	b.n	8013792 <__mdiff+0xf6>
 80137be:	46c0      	nop			; (mov r8, r8)
 80137c0:	08015060 	.word	0x08015060
 80137c4:	00000232 	.word	0x00000232
 80137c8:	080150d4 	.word	0x080150d4

080137cc <__d2b>:
 80137cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137ce:	2101      	movs	r1, #1
 80137d0:	0014      	movs	r4, r2
 80137d2:	001e      	movs	r6, r3
 80137d4:	9f08      	ldr	r7, [sp, #32]
 80137d6:	f7ff fcc1 	bl	801315c <_Balloc>
 80137da:	1e05      	subs	r5, r0, #0
 80137dc:	d105      	bne.n	80137ea <__d2b+0x1e>
 80137de:	0002      	movs	r2, r0
 80137e0:	4b26      	ldr	r3, [pc, #152]	; (801387c <__d2b+0xb0>)
 80137e2:	4927      	ldr	r1, [pc, #156]	; (8013880 <__d2b+0xb4>)
 80137e4:	4827      	ldr	r0, [pc, #156]	; (8013884 <__d2b+0xb8>)
 80137e6:	f000 fc99 	bl	801411c <__assert_func>
 80137ea:	0333      	lsls	r3, r6, #12
 80137ec:	0076      	lsls	r6, r6, #1
 80137ee:	0b1b      	lsrs	r3, r3, #12
 80137f0:	0d76      	lsrs	r6, r6, #21
 80137f2:	d124      	bne.n	801383e <__d2b+0x72>
 80137f4:	9301      	str	r3, [sp, #4]
 80137f6:	2c00      	cmp	r4, #0
 80137f8:	d027      	beq.n	801384a <__d2b+0x7e>
 80137fa:	4668      	mov	r0, sp
 80137fc:	9400      	str	r4, [sp, #0]
 80137fe:	f7ff fd73 	bl	80132e8 <__lo0bits>
 8013802:	9c00      	ldr	r4, [sp, #0]
 8013804:	2800      	cmp	r0, #0
 8013806:	d01e      	beq.n	8013846 <__d2b+0x7a>
 8013808:	9b01      	ldr	r3, [sp, #4]
 801380a:	2120      	movs	r1, #32
 801380c:	001a      	movs	r2, r3
 801380e:	1a09      	subs	r1, r1, r0
 8013810:	408a      	lsls	r2, r1
 8013812:	40c3      	lsrs	r3, r0
 8013814:	4322      	orrs	r2, r4
 8013816:	616a      	str	r2, [r5, #20]
 8013818:	9301      	str	r3, [sp, #4]
 801381a:	9c01      	ldr	r4, [sp, #4]
 801381c:	61ac      	str	r4, [r5, #24]
 801381e:	1e63      	subs	r3, r4, #1
 8013820:	419c      	sbcs	r4, r3
 8013822:	3401      	adds	r4, #1
 8013824:	612c      	str	r4, [r5, #16]
 8013826:	2e00      	cmp	r6, #0
 8013828:	d018      	beq.n	801385c <__d2b+0x90>
 801382a:	4b17      	ldr	r3, [pc, #92]	; (8013888 <__d2b+0xbc>)
 801382c:	18f6      	adds	r6, r6, r3
 801382e:	2335      	movs	r3, #53	; 0x35
 8013830:	1836      	adds	r6, r6, r0
 8013832:	1a18      	subs	r0, r3, r0
 8013834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013836:	603e      	str	r6, [r7, #0]
 8013838:	6018      	str	r0, [r3, #0]
 801383a:	0028      	movs	r0, r5
 801383c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801383e:	2280      	movs	r2, #128	; 0x80
 8013840:	0352      	lsls	r2, r2, #13
 8013842:	4313      	orrs	r3, r2
 8013844:	e7d6      	b.n	80137f4 <__d2b+0x28>
 8013846:	616c      	str	r4, [r5, #20]
 8013848:	e7e7      	b.n	801381a <__d2b+0x4e>
 801384a:	a801      	add	r0, sp, #4
 801384c:	f7ff fd4c 	bl	80132e8 <__lo0bits>
 8013850:	2401      	movs	r4, #1
 8013852:	9b01      	ldr	r3, [sp, #4]
 8013854:	612c      	str	r4, [r5, #16]
 8013856:	616b      	str	r3, [r5, #20]
 8013858:	3020      	adds	r0, #32
 801385a:	e7e4      	b.n	8013826 <__d2b+0x5a>
 801385c:	4b0b      	ldr	r3, [pc, #44]	; (801388c <__d2b+0xc0>)
 801385e:	18c0      	adds	r0, r0, r3
 8013860:	4b0b      	ldr	r3, [pc, #44]	; (8013890 <__d2b+0xc4>)
 8013862:	6038      	str	r0, [r7, #0]
 8013864:	18e3      	adds	r3, r4, r3
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	18eb      	adds	r3, r5, r3
 801386a:	6958      	ldr	r0, [r3, #20]
 801386c:	f7ff fd22 	bl	80132b4 <__hi0bits>
 8013870:	0164      	lsls	r4, r4, #5
 8013872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013874:	1a24      	subs	r4, r4, r0
 8013876:	601c      	str	r4, [r3, #0]
 8013878:	e7df      	b.n	801383a <__d2b+0x6e>
 801387a:	46c0      	nop			; (mov r8, r8)
 801387c:	08015060 	.word	0x08015060
 8013880:	0000030a 	.word	0x0000030a
 8013884:	080150d4 	.word	0x080150d4
 8013888:	fffffbcd 	.word	0xfffffbcd
 801388c:	fffffbce 	.word	0xfffffbce
 8013890:	3fffffff 	.word	0x3fffffff

08013894 <_calloc_r>:
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	0c13      	lsrs	r3, r2, #16
 8013898:	0c0d      	lsrs	r5, r1, #16
 801389a:	d11e      	bne.n	80138da <_calloc_r+0x46>
 801389c:	2b00      	cmp	r3, #0
 801389e:	d10c      	bne.n	80138ba <_calloc_r+0x26>
 80138a0:	b289      	uxth	r1, r1
 80138a2:	b294      	uxth	r4, r2
 80138a4:	434c      	muls	r4, r1
 80138a6:	0021      	movs	r1, r4
 80138a8:	f000 f88c 	bl	80139c4 <_malloc_r>
 80138ac:	1e05      	subs	r5, r0, #0
 80138ae:	d01b      	beq.n	80138e8 <_calloc_r+0x54>
 80138b0:	0022      	movs	r2, r4
 80138b2:	2100      	movs	r1, #0
 80138b4:	f7fd fd51 	bl	801135a <memset>
 80138b8:	e016      	b.n	80138e8 <_calloc_r+0x54>
 80138ba:	1c1d      	adds	r5, r3, #0
 80138bc:	1c0b      	adds	r3, r1, #0
 80138be:	b292      	uxth	r2, r2
 80138c0:	b289      	uxth	r1, r1
 80138c2:	b29c      	uxth	r4, r3
 80138c4:	4351      	muls	r1, r2
 80138c6:	b2ab      	uxth	r3, r5
 80138c8:	4363      	muls	r3, r4
 80138ca:	0c0c      	lsrs	r4, r1, #16
 80138cc:	191c      	adds	r4, r3, r4
 80138ce:	0c22      	lsrs	r2, r4, #16
 80138d0:	d107      	bne.n	80138e2 <_calloc_r+0x4e>
 80138d2:	0424      	lsls	r4, r4, #16
 80138d4:	b289      	uxth	r1, r1
 80138d6:	430c      	orrs	r4, r1
 80138d8:	e7e5      	b.n	80138a6 <_calloc_r+0x12>
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d101      	bne.n	80138e2 <_calloc_r+0x4e>
 80138de:	1c13      	adds	r3, r2, #0
 80138e0:	e7ed      	b.n	80138be <_calloc_r+0x2a>
 80138e2:	230c      	movs	r3, #12
 80138e4:	2500      	movs	r5, #0
 80138e6:	6003      	str	r3, [r0, #0]
 80138e8:	0028      	movs	r0, r5
 80138ea:	bd70      	pop	{r4, r5, r6, pc}

080138ec <_free_r>:
 80138ec:	b570      	push	{r4, r5, r6, lr}
 80138ee:	0005      	movs	r5, r0
 80138f0:	2900      	cmp	r1, #0
 80138f2:	d010      	beq.n	8013916 <_free_r+0x2a>
 80138f4:	1f0c      	subs	r4, r1, #4
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	da00      	bge.n	80138fe <_free_r+0x12>
 80138fc:	18e4      	adds	r4, r4, r3
 80138fe:	0028      	movs	r0, r5
 8013900:	f000 fcaa 	bl	8014258 <__malloc_lock>
 8013904:	4a1d      	ldr	r2, [pc, #116]	; (801397c <_free_r+0x90>)
 8013906:	6813      	ldr	r3, [r2, #0]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d105      	bne.n	8013918 <_free_r+0x2c>
 801390c:	6063      	str	r3, [r4, #4]
 801390e:	6014      	str	r4, [r2, #0]
 8013910:	0028      	movs	r0, r5
 8013912:	f000 fca9 	bl	8014268 <__malloc_unlock>
 8013916:	bd70      	pop	{r4, r5, r6, pc}
 8013918:	42a3      	cmp	r3, r4
 801391a:	d908      	bls.n	801392e <_free_r+0x42>
 801391c:	6821      	ldr	r1, [r4, #0]
 801391e:	1860      	adds	r0, r4, r1
 8013920:	4283      	cmp	r3, r0
 8013922:	d1f3      	bne.n	801390c <_free_r+0x20>
 8013924:	6818      	ldr	r0, [r3, #0]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	1841      	adds	r1, r0, r1
 801392a:	6021      	str	r1, [r4, #0]
 801392c:	e7ee      	b.n	801390c <_free_r+0x20>
 801392e:	001a      	movs	r2, r3
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <_free_r+0x4e>
 8013936:	42a3      	cmp	r3, r4
 8013938:	d9f9      	bls.n	801392e <_free_r+0x42>
 801393a:	6811      	ldr	r1, [r2, #0]
 801393c:	1850      	adds	r0, r2, r1
 801393e:	42a0      	cmp	r0, r4
 8013940:	d10b      	bne.n	801395a <_free_r+0x6e>
 8013942:	6820      	ldr	r0, [r4, #0]
 8013944:	1809      	adds	r1, r1, r0
 8013946:	1850      	adds	r0, r2, r1
 8013948:	6011      	str	r1, [r2, #0]
 801394a:	4283      	cmp	r3, r0
 801394c:	d1e0      	bne.n	8013910 <_free_r+0x24>
 801394e:	6818      	ldr	r0, [r3, #0]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	1841      	adds	r1, r0, r1
 8013954:	6011      	str	r1, [r2, #0]
 8013956:	6053      	str	r3, [r2, #4]
 8013958:	e7da      	b.n	8013910 <_free_r+0x24>
 801395a:	42a0      	cmp	r0, r4
 801395c:	d902      	bls.n	8013964 <_free_r+0x78>
 801395e:	230c      	movs	r3, #12
 8013960:	602b      	str	r3, [r5, #0]
 8013962:	e7d5      	b.n	8013910 <_free_r+0x24>
 8013964:	6821      	ldr	r1, [r4, #0]
 8013966:	1860      	adds	r0, r4, r1
 8013968:	4283      	cmp	r3, r0
 801396a:	d103      	bne.n	8013974 <_free_r+0x88>
 801396c:	6818      	ldr	r0, [r3, #0]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	1841      	adds	r1, r0, r1
 8013972:	6021      	str	r1, [r4, #0]
 8013974:	6063      	str	r3, [r4, #4]
 8013976:	6054      	str	r4, [r2, #4]
 8013978:	e7ca      	b.n	8013910 <_free_r+0x24>
 801397a:	46c0      	nop			; (mov r8, r8)
 801397c:	20008324 	.word	0x20008324

08013980 <sbrk_aligned>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	4e0f      	ldr	r6, [pc, #60]	; (80139c0 <sbrk_aligned+0x40>)
 8013984:	000d      	movs	r5, r1
 8013986:	6831      	ldr	r1, [r6, #0]
 8013988:	0004      	movs	r4, r0
 801398a:	2900      	cmp	r1, #0
 801398c:	d102      	bne.n	8013994 <sbrk_aligned+0x14>
 801398e:	f000 fb53 	bl	8014038 <_sbrk_r>
 8013992:	6030      	str	r0, [r6, #0]
 8013994:	0029      	movs	r1, r5
 8013996:	0020      	movs	r0, r4
 8013998:	f000 fb4e 	bl	8014038 <_sbrk_r>
 801399c:	1c43      	adds	r3, r0, #1
 801399e:	d00a      	beq.n	80139b6 <sbrk_aligned+0x36>
 80139a0:	2303      	movs	r3, #3
 80139a2:	1cc5      	adds	r5, r0, #3
 80139a4:	439d      	bics	r5, r3
 80139a6:	42a8      	cmp	r0, r5
 80139a8:	d007      	beq.n	80139ba <sbrk_aligned+0x3a>
 80139aa:	1a29      	subs	r1, r5, r0
 80139ac:	0020      	movs	r0, r4
 80139ae:	f000 fb43 	bl	8014038 <_sbrk_r>
 80139b2:	1c43      	adds	r3, r0, #1
 80139b4:	d101      	bne.n	80139ba <sbrk_aligned+0x3a>
 80139b6:	2501      	movs	r5, #1
 80139b8:	426d      	negs	r5, r5
 80139ba:	0028      	movs	r0, r5
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	46c0      	nop			; (mov r8, r8)
 80139c0:	20008328 	.word	0x20008328

080139c4 <_malloc_r>:
 80139c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139c6:	2203      	movs	r2, #3
 80139c8:	1ccb      	adds	r3, r1, #3
 80139ca:	4393      	bics	r3, r2
 80139cc:	3308      	adds	r3, #8
 80139ce:	0006      	movs	r6, r0
 80139d0:	001f      	movs	r7, r3
 80139d2:	2b0c      	cmp	r3, #12
 80139d4:	d232      	bcs.n	8013a3c <_malloc_r+0x78>
 80139d6:	270c      	movs	r7, #12
 80139d8:	42b9      	cmp	r1, r7
 80139da:	d831      	bhi.n	8013a40 <_malloc_r+0x7c>
 80139dc:	0030      	movs	r0, r6
 80139de:	f000 fc3b 	bl	8014258 <__malloc_lock>
 80139e2:	4d32      	ldr	r5, [pc, #200]	; (8013aac <_malloc_r+0xe8>)
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	001c      	movs	r4, r3
 80139e8:	2c00      	cmp	r4, #0
 80139ea:	d12e      	bne.n	8013a4a <_malloc_r+0x86>
 80139ec:	0039      	movs	r1, r7
 80139ee:	0030      	movs	r0, r6
 80139f0:	f7ff ffc6 	bl	8013980 <sbrk_aligned>
 80139f4:	0004      	movs	r4, r0
 80139f6:	1c43      	adds	r3, r0, #1
 80139f8:	d11e      	bne.n	8013a38 <_malloc_r+0x74>
 80139fa:	682c      	ldr	r4, [r5, #0]
 80139fc:	0025      	movs	r5, r4
 80139fe:	2d00      	cmp	r5, #0
 8013a00:	d14a      	bne.n	8013a98 <_malloc_r+0xd4>
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	0029      	movs	r1, r5
 8013a06:	18e3      	adds	r3, r4, r3
 8013a08:	0030      	movs	r0, r6
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	f000 fb14 	bl	8014038 <_sbrk_r>
 8013a10:	9b01      	ldr	r3, [sp, #4]
 8013a12:	4283      	cmp	r3, r0
 8013a14:	d143      	bne.n	8013a9e <_malloc_r+0xda>
 8013a16:	6823      	ldr	r3, [r4, #0]
 8013a18:	3703      	adds	r7, #3
 8013a1a:	1aff      	subs	r7, r7, r3
 8013a1c:	2303      	movs	r3, #3
 8013a1e:	439f      	bics	r7, r3
 8013a20:	3708      	adds	r7, #8
 8013a22:	2f0c      	cmp	r7, #12
 8013a24:	d200      	bcs.n	8013a28 <_malloc_r+0x64>
 8013a26:	270c      	movs	r7, #12
 8013a28:	0039      	movs	r1, r7
 8013a2a:	0030      	movs	r0, r6
 8013a2c:	f7ff ffa8 	bl	8013980 <sbrk_aligned>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d034      	beq.n	8013a9e <_malloc_r+0xda>
 8013a34:	6823      	ldr	r3, [r4, #0]
 8013a36:	19df      	adds	r7, r3, r7
 8013a38:	6027      	str	r7, [r4, #0]
 8013a3a:	e013      	b.n	8013a64 <_malloc_r+0xa0>
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	dacb      	bge.n	80139d8 <_malloc_r+0x14>
 8013a40:	230c      	movs	r3, #12
 8013a42:	2500      	movs	r5, #0
 8013a44:	6033      	str	r3, [r6, #0]
 8013a46:	0028      	movs	r0, r5
 8013a48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013a4a:	6822      	ldr	r2, [r4, #0]
 8013a4c:	1bd1      	subs	r1, r2, r7
 8013a4e:	d420      	bmi.n	8013a92 <_malloc_r+0xce>
 8013a50:	290b      	cmp	r1, #11
 8013a52:	d917      	bls.n	8013a84 <_malloc_r+0xc0>
 8013a54:	19e2      	adds	r2, r4, r7
 8013a56:	6027      	str	r7, [r4, #0]
 8013a58:	42a3      	cmp	r3, r4
 8013a5a:	d111      	bne.n	8013a80 <_malloc_r+0xbc>
 8013a5c:	602a      	str	r2, [r5, #0]
 8013a5e:	6863      	ldr	r3, [r4, #4]
 8013a60:	6011      	str	r1, [r2, #0]
 8013a62:	6053      	str	r3, [r2, #4]
 8013a64:	0030      	movs	r0, r6
 8013a66:	0025      	movs	r5, r4
 8013a68:	f000 fbfe 	bl	8014268 <__malloc_unlock>
 8013a6c:	2207      	movs	r2, #7
 8013a6e:	350b      	adds	r5, #11
 8013a70:	1d23      	adds	r3, r4, #4
 8013a72:	4395      	bics	r5, r2
 8013a74:	1aea      	subs	r2, r5, r3
 8013a76:	429d      	cmp	r5, r3
 8013a78:	d0e5      	beq.n	8013a46 <_malloc_r+0x82>
 8013a7a:	1b5b      	subs	r3, r3, r5
 8013a7c:	50a3      	str	r3, [r4, r2]
 8013a7e:	e7e2      	b.n	8013a46 <_malloc_r+0x82>
 8013a80:	605a      	str	r2, [r3, #4]
 8013a82:	e7ec      	b.n	8013a5e <_malloc_r+0x9a>
 8013a84:	6862      	ldr	r2, [r4, #4]
 8013a86:	42a3      	cmp	r3, r4
 8013a88:	d101      	bne.n	8013a8e <_malloc_r+0xca>
 8013a8a:	602a      	str	r2, [r5, #0]
 8013a8c:	e7ea      	b.n	8013a64 <_malloc_r+0xa0>
 8013a8e:	605a      	str	r2, [r3, #4]
 8013a90:	e7e8      	b.n	8013a64 <_malloc_r+0xa0>
 8013a92:	0023      	movs	r3, r4
 8013a94:	6864      	ldr	r4, [r4, #4]
 8013a96:	e7a7      	b.n	80139e8 <_malloc_r+0x24>
 8013a98:	002c      	movs	r4, r5
 8013a9a:	686d      	ldr	r5, [r5, #4]
 8013a9c:	e7af      	b.n	80139fe <_malloc_r+0x3a>
 8013a9e:	230c      	movs	r3, #12
 8013aa0:	0030      	movs	r0, r6
 8013aa2:	6033      	str	r3, [r6, #0]
 8013aa4:	f000 fbe0 	bl	8014268 <__malloc_unlock>
 8013aa8:	e7cd      	b.n	8013a46 <_malloc_r+0x82>
 8013aaa:	46c0      	nop			; (mov r8, r8)
 8013aac:	20008324 	.word	0x20008324

08013ab0 <__ssputs_r>:
 8013ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ab2:	688e      	ldr	r6, [r1, #8]
 8013ab4:	b085      	sub	sp, #20
 8013ab6:	0007      	movs	r7, r0
 8013ab8:	000c      	movs	r4, r1
 8013aba:	9203      	str	r2, [sp, #12]
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	429e      	cmp	r6, r3
 8013ac0:	d83c      	bhi.n	8013b3c <__ssputs_r+0x8c>
 8013ac2:	2390      	movs	r3, #144	; 0x90
 8013ac4:	898a      	ldrh	r2, [r1, #12]
 8013ac6:	00db      	lsls	r3, r3, #3
 8013ac8:	421a      	tst	r2, r3
 8013aca:	d034      	beq.n	8013b36 <__ssputs_r+0x86>
 8013acc:	6909      	ldr	r1, [r1, #16]
 8013ace:	6823      	ldr	r3, [r4, #0]
 8013ad0:	6960      	ldr	r0, [r4, #20]
 8013ad2:	1a5b      	subs	r3, r3, r1
 8013ad4:	9302      	str	r3, [sp, #8]
 8013ad6:	2303      	movs	r3, #3
 8013ad8:	4343      	muls	r3, r0
 8013ada:	0fdd      	lsrs	r5, r3, #31
 8013adc:	18ed      	adds	r5, r5, r3
 8013ade:	9b01      	ldr	r3, [sp, #4]
 8013ae0:	9802      	ldr	r0, [sp, #8]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	181b      	adds	r3, r3, r0
 8013ae6:	106d      	asrs	r5, r5, #1
 8013ae8:	42ab      	cmp	r3, r5
 8013aea:	d900      	bls.n	8013aee <__ssputs_r+0x3e>
 8013aec:	001d      	movs	r5, r3
 8013aee:	0553      	lsls	r3, r2, #21
 8013af0:	d532      	bpl.n	8013b58 <__ssputs_r+0xa8>
 8013af2:	0029      	movs	r1, r5
 8013af4:	0038      	movs	r0, r7
 8013af6:	f7ff ff65 	bl	80139c4 <_malloc_r>
 8013afa:	1e06      	subs	r6, r0, #0
 8013afc:	d109      	bne.n	8013b12 <__ssputs_r+0x62>
 8013afe:	230c      	movs	r3, #12
 8013b00:	603b      	str	r3, [r7, #0]
 8013b02:	2340      	movs	r3, #64	; 0x40
 8013b04:	2001      	movs	r0, #1
 8013b06:	89a2      	ldrh	r2, [r4, #12]
 8013b08:	4240      	negs	r0, r0
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	81a3      	strh	r3, [r4, #12]
 8013b0e:	b005      	add	sp, #20
 8013b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b12:	9a02      	ldr	r2, [sp, #8]
 8013b14:	6921      	ldr	r1, [r4, #16]
 8013b16:	f7fd fc17 	bl	8011348 <memcpy>
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	4a14      	ldr	r2, [pc, #80]	; (8013b70 <__ssputs_r+0xc0>)
 8013b1e:	401a      	ands	r2, r3
 8013b20:	2380      	movs	r3, #128	; 0x80
 8013b22:	4313      	orrs	r3, r2
 8013b24:	81a3      	strh	r3, [r4, #12]
 8013b26:	9b02      	ldr	r3, [sp, #8]
 8013b28:	6126      	str	r6, [r4, #16]
 8013b2a:	18f6      	adds	r6, r6, r3
 8013b2c:	6026      	str	r6, [r4, #0]
 8013b2e:	6165      	str	r5, [r4, #20]
 8013b30:	9e01      	ldr	r6, [sp, #4]
 8013b32:	1aed      	subs	r5, r5, r3
 8013b34:	60a5      	str	r5, [r4, #8]
 8013b36:	9b01      	ldr	r3, [sp, #4]
 8013b38:	429e      	cmp	r6, r3
 8013b3a:	d900      	bls.n	8013b3e <__ssputs_r+0x8e>
 8013b3c:	9e01      	ldr	r6, [sp, #4]
 8013b3e:	0032      	movs	r2, r6
 8013b40:	9903      	ldr	r1, [sp, #12]
 8013b42:	6820      	ldr	r0, [r4, #0]
 8013b44:	f000 fb74 	bl	8014230 <memmove>
 8013b48:	68a3      	ldr	r3, [r4, #8]
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	1b9b      	subs	r3, r3, r6
 8013b4e:	60a3      	str	r3, [r4, #8]
 8013b50:	6823      	ldr	r3, [r4, #0]
 8013b52:	199e      	adds	r6, r3, r6
 8013b54:	6026      	str	r6, [r4, #0]
 8013b56:	e7da      	b.n	8013b0e <__ssputs_r+0x5e>
 8013b58:	002a      	movs	r2, r5
 8013b5a:	0038      	movs	r0, r7
 8013b5c:	f000 fb8c 	bl	8014278 <_realloc_r>
 8013b60:	1e06      	subs	r6, r0, #0
 8013b62:	d1e0      	bne.n	8013b26 <__ssputs_r+0x76>
 8013b64:	0038      	movs	r0, r7
 8013b66:	6921      	ldr	r1, [r4, #16]
 8013b68:	f7ff fec0 	bl	80138ec <_free_r>
 8013b6c:	e7c7      	b.n	8013afe <__ssputs_r+0x4e>
 8013b6e:	46c0      	nop			; (mov r8, r8)
 8013b70:	fffffb7f 	.word	0xfffffb7f

08013b74 <_svfiprintf_r>:
 8013b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b76:	b0a1      	sub	sp, #132	; 0x84
 8013b78:	9003      	str	r0, [sp, #12]
 8013b7a:	001d      	movs	r5, r3
 8013b7c:	898b      	ldrh	r3, [r1, #12]
 8013b7e:	000f      	movs	r7, r1
 8013b80:	0016      	movs	r6, r2
 8013b82:	061b      	lsls	r3, r3, #24
 8013b84:	d511      	bpl.n	8013baa <_svfiprintf_r+0x36>
 8013b86:	690b      	ldr	r3, [r1, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10e      	bne.n	8013baa <_svfiprintf_r+0x36>
 8013b8c:	2140      	movs	r1, #64	; 0x40
 8013b8e:	f7ff ff19 	bl	80139c4 <_malloc_r>
 8013b92:	6038      	str	r0, [r7, #0]
 8013b94:	6138      	str	r0, [r7, #16]
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d105      	bne.n	8013ba6 <_svfiprintf_r+0x32>
 8013b9a:	230c      	movs	r3, #12
 8013b9c:	9a03      	ldr	r2, [sp, #12]
 8013b9e:	3801      	subs	r0, #1
 8013ba0:	6013      	str	r3, [r2, #0]
 8013ba2:	b021      	add	sp, #132	; 0x84
 8013ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ba6:	2340      	movs	r3, #64	; 0x40
 8013ba8:	617b      	str	r3, [r7, #20]
 8013baa:	2300      	movs	r3, #0
 8013bac:	ac08      	add	r4, sp, #32
 8013bae:	6163      	str	r3, [r4, #20]
 8013bb0:	3320      	adds	r3, #32
 8013bb2:	7663      	strb	r3, [r4, #25]
 8013bb4:	3310      	adds	r3, #16
 8013bb6:	76a3      	strb	r3, [r4, #26]
 8013bb8:	9507      	str	r5, [sp, #28]
 8013bba:	0035      	movs	r5, r6
 8013bbc:	782b      	ldrb	r3, [r5, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d001      	beq.n	8013bc6 <_svfiprintf_r+0x52>
 8013bc2:	2b25      	cmp	r3, #37	; 0x25
 8013bc4:	d147      	bne.n	8013c56 <_svfiprintf_r+0xe2>
 8013bc6:	1bab      	subs	r3, r5, r6
 8013bc8:	9305      	str	r3, [sp, #20]
 8013bca:	42b5      	cmp	r5, r6
 8013bcc:	d00c      	beq.n	8013be8 <_svfiprintf_r+0x74>
 8013bce:	0032      	movs	r2, r6
 8013bd0:	0039      	movs	r1, r7
 8013bd2:	9803      	ldr	r0, [sp, #12]
 8013bd4:	f7ff ff6c 	bl	8013ab0 <__ssputs_r>
 8013bd8:	1c43      	adds	r3, r0, #1
 8013bda:	d100      	bne.n	8013bde <_svfiprintf_r+0x6a>
 8013bdc:	e0ae      	b.n	8013d3c <_svfiprintf_r+0x1c8>
 8013bde:	6962      	ldr	r2, [r4, #20]
 8013be0:	9b05      	ldr	r3, [sp, #20]
 8013be2:	4694      	mov	ip, r2
 8013be4:	4463      	add	r3, ip
 8013be6:	6163      	str	r3, [r4, #20]
 8013be8:	782b      	ldrb	r3, [r5, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d100      	bne.n	8013bf0 <_svfiprintf_r+0x7c>
 8013bee:	e0a5      	b.n	8013d3c <_svfiprintf_r+0x1c8>
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	4252      	negs	r2, r2
 8013bf6:	6062      	str	r2, [r4, #4]
 8013bf8:	a904      	add	r1, sp, #16
 8013bfa:	3254      	adds	r2, #84	; 0x54
 8013bfc:	1852      	adds	r2, r2, r1
 8013bfe:	1c6e      	adds	r6, r5, #1
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	60e3      	str	r3, [r4, #12]
 8013c04:	60a3      	str	r3, [r4, #8]
 8013c06:	7013      	strb	r3, [r2, #0]
 8013c08:	65a3      	str	r3, [r4, #88]	; 0x58
 8013c0a:	2205      	movs	r2, #5
 8013c0c:	7831      	ldrb	r1, [r6, #0]
 8013c0e:	4854      	ldr	r0, [pc, #336]	; (8013d60 <_svfiprintf_r+0x1ec>)
 8013c10:	f7ff fa98 	bl	8013144 <memchr>
 8013c14:	1c75      	adds	r5, r6, #1
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d11f      	bne.n	8013c5a <_svfiprintf_r+0xe6>
 8013c1a:	6822      	ldr	r2, [r4, #0]
 8013c1c:	06d3      	lsls	r3, r2, #27
 8013c1e:	d504      	bpl.n	8013c2a <_svfiprintf_r+0xb6>
 8013c20:	2353      	movs	r3, #83	; 0x53
 8013c22:	a904      	add	r1, sp, #16
 8013c24:	185b      	adds	r3, r3, r1
 8013c26:	2120      	movs	r1, #32
 8013c28:	7019      	strb	r1, [r3, #0]
 8013c2a:	0713      	lsls	r3, r2, #28
 8013c2c:	d504      	bpl.n	8013c38 <_svfiprintf_r+0xc4>
 8013c2e:	2353      	movs	r3, #83	; 0x53
 8013c30:	a904      	add	r1, sp, #16
 8013c32:	185b      	adds	r3, r3, r1
 8013c34:	212b      	movs	r1, #43	; 0x2b
 8013c36:	7019      	strb	r1, [r3, #0]
 8013c38:	7833      	ldrb	r3, [r6, #0]
 8013c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c3c:	d016      	beq.n	8013c6c <_svfiprintf_r+0xf8>
 8013c3e:	0035      	movs	r5, r6
 8013c40:	2100      	movs	r1, #0
 8013c42:	200a      	movs	r0, #10
 8013c44:	68e3      	ldr	r3, [r4, #12]
 8013c46:	782a      	ldrb	r2, [r5, #0]
 8013c48:	1c6e      	adds	r6, r5, #1
 8013c4a:	3a30      	subs	r2, #48	; 0x30
 8013c4c:	2a09      	cmp	r2, #9
 8013c4e:	d94e      	bls.n	8013cee <_svfiprintf_r+0x17a>
 8013c50:	2900      	cmp	r1, #0
 8013c52:	d111      	bne.n	8013c78 <_svfiprintf_r+0x104>
 8013c54:	e017      	b.n	8013c86 <_svfiprintf_r+0x112>
 8013c56:	3501      	adds	r5, #1
 8013c58:	e7b0      	b.n	8013bbc <_svfiprintf_r+0x48>
 8013c5a:	4b41      	ldr	r3, [pc, #260]	; (8013d60 <_svfiprintf_r+0x1ec>)
 8013c5c:	6822      	ldr	r2, [r4, #0]
 8013c5e:	1ac0      	subs	r0, r0, r3
 8013c60:	2301      	movs	r3, #1
 8013c62:	4083      	lsls	r3, r0
 8013c64:	4313      	orrs	r3, r2
 8013c66:	002e      	movs	r6, r5
 8013c68:	6023      	str	r3, [r4, #0]
 8013c6a:	e7ce      	b.n	8013c0a <_svfiprintf_r+0x96>
 8013c6c:	9b07      	ldr	r3, [sp, #28]
 8013c6e:	1d19      	adds	r1, r3, #4
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	9107      	str	r1, [sp, #28]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	db01      	blt.n	8013c7c <_svfiprintf_r+0x108>
 8013c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c7a:	e004      	b.n	8013c86 <_svfiprintf_r+0x112>
 8013c7c:	425b      	negs	r3, r3
 8013c7e:	60e3      	str	r3, [r4, #12]
 8013c80:	2302      	movs	r3, #2
 8013c82:	4313      	orrs	r3, r2
 8013c84:	6023      	str	r3, [r4, #0]
 8013c86:	782b      	ldrb	r3, [r5, #0]
 8013c88:	2b2e      	cmp	r3, #46	; 0x2e
 8013c8a:	d10a      	bne.n	8013ca2 <_svfiprintf_r+0x12e>
 8013c8c:	786b      	ldrb	r3, [r5, #1]
 8013c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8013c90:	d135      	bne.n	8013cfe <_svfiprintf_r+0x18a>
 8013c92:	9b07      	ldr	r3, [sp, #28]
 8013c94:	3502      	adds	r5, #2
 8013c96:	1d1a      	adds	r2, r3, #4
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	9207      	str	r2, [sp, #28]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	db2b      	blt.n	8013cf8 <_svfiprintf_r+0x184>
 8013ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ca2:	4e30      	ldr	r6, [pc, #192]	; (8013d64 <_svfiprintf_r+0x1f0>)
 8013ca4:	2203      	movs	r2, #3
 8013ca6:	0030      	movs	r0, r6
 8013ca8:	7829      	ldrb	r1, [r5, #0]
 8013caa:	f7ff fa4b 	bl	8013144 <memchr>
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d006      	beq.n	8013cc0 <_svfiprintf_r+0x14c>
 8013cb2:	2340      	movs	r3, #64	; 0x40
 8013cb4:	1b80      	subs	r0, r0, r6
 8013cb6:	4083      	lsls	r3, r0
 8013cb8:	6822      	ldr	r2, [r4, #0]
 8013cba:	3501      	adds	r5, #1
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	6023      	str	r3, [r4, #0]
 8013cc0:	7829      	ldrb	r1, [r5, #0]
 8013cc2:	2206      	movs	r2, #6
 8013cc4:	4828      	ldr	r0, [pc, #160]	; (8013d68 <_svfiprintf_r+0x1f4>)
 8013cc6:	1c6e      	adds	r6, r5, #1
 8013cc8:	7621      	strb	r1, [r4, #24]
 8013cca:	f7ff fa3b 	bl	8013144 <memchr>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d03c      	beq.n	8013d4c <_svfiprintf_r+0x1d8>
 8013cd2:	4b26      	ldr	r3, [pc, #152]	; (8013d6c <_svfiprintf_r+0x1f8>)
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d125      	bne.n	8013d24 <_svfiprintf_r+0x1b0>
 8013cd8:	2207      	movs	r2, #7
 8013cda:	9b07      	ldr	r3, [sp, #28]
 8013cdc:	3307      	adds	r3, #7
 8013cde:	4393      	bics	r3, r2
 8013ce0:	3308      	adds	r3, #8
 8013ce2:	9307      	str	r3, [sp, #28]
 8013ce4:	6963      	ldr	r3, [r4, #20]
 8013ce6:	9a04      	ldr	r2, [sp, #16]
 8013ce8:	189b      	adds	r3, r3, r2
 8013cea:	6163      	str	r3, [r4, #20]
 8013cec:	e765      	b.n	8013bba <_svfiprintf_r+0x46>
 8013cee:	4343      	muls	r3, r0
 8013cf0:	0035      	movs	r5, r6
 8013cf2:	2101      	movs	r1, #1
 8013cf4:	189b      	adds	r3, r3, r2
 8013cf6:	e7a6      	b.n	8013c46 <_svfiprintf_r+0xd2>
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	425b      	negs	r3, r3
 8013cfc:	e7d0      	b.n	8013ca0 <_svfiprintf_r+0x12c>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	200a      	movs	r0, #10
 8013d02:	001a      	movs	r2, r3
 8013d04:	3501      	adds	r5, #1
 8013d06:	6063      	str	r3, [r4, #4]
 8013d08:	7829      	ldrb	r1, [r5, #0]
 8013d0a:	1c6e      	adds	r6, r5, #1
 8013d0c:	3930      	subs	r1, #48	; 0x30
 8013d0e:	2909      	cmp	r1, #9
 8013d10:	d903      	bls.n	8013d1a <_svfiprintf_r+0x1a6>
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d0c5      	beq.n	8013ca2 <_svfiprintf_r+0x12e>
 8013d16:	9209      	str	r2, [sp, #36]	; 0x24
 8013d18:	e7c3      	b.n	8013ca2 <_svfiprintf_r+0x12e>
 8013d1a:	4342      	muls	r2, r0
 8013d1c:	0035      	movs	r5, r6
 8013d1e:	2301      	movs	r3, #1
 8013d20:	1852      	adds	r2, r2, r1
 8013d22:	e7f1      	b.n	8013d08 <_svfiprintf_r+0x194>
 8013d24:	ab07      	add	r3, sp, #28
 8013d26:	9300      	str	r3, [sp, #0]
 8013d28:	003a      	movs	r2, r7
 8013d2a:	0021      	movs	r1, r4
 8013d2c:	4b10      	ldr	r3, [pc, #64]	; (8013d70 <_svfiprintf_r+0x1fc>)
 8013d2e:	9803      	ldr	r0, [sp, #12]
 8013d30:	f7fd fbc6 	bl	80114c0 <_printf_float>
 8013d34:	9004      	str	r0, [sp, #16]
 8013d36:	9b04      	ldr	r3, [sp, #16]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	d1d3      	bne.n	8013ce4 <_svfiprintf_r+0x170>
 8013d3c:	89bb      	ldrh	r3, [r7, #12]
 8013d3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013d40:	065b      	lsls	r3, r3, #25
 8013d42:	d400      	bmi.n	8013d46 <_svfiprintf_r+0x1d2>
 8013d44:	e72d      	b.n	8013ba2 <_svfiprintf_r+0x2e>
 8013d46:	2001      	movs	r0, #1
 8013d48:	4240      	negs	r0, r0
 8013d4a:	e72a      	b.n	8013ba2 <_svfiprintf_r+0x2e>
 8013d4c:	ab07      	add	r3, sp, #28
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	003a      	movs	r2, r7
 8013d52:	0021      	movs	r1, r4
 8013d54:	4b06      	ldr	r3, [pc, #24]	; (8013d70 <_svfiprintf_r+0x1fc>)
 8013d56:	9803      	ldr	r0, [sp, #12]
 8013d58:	f7fd fe64 	bl	8011a24 <_printf_i>
 8013d5c:	e7ea      	b.n	8013d34 <_svfiprintf_r+0x1c0>
 8013d5e:	46c0      	nop			; (mov r8, r8)
 8013d60:	0801522c 	.word	0x0801522c
 8013d64:	08015232 	.word	0x08015232
 8013d68:	08015236 	.word	0x08015236
 8013d6c:	080114c1 	.word	0x080114c1
 8013d70:	08013ab1 	.word	0x08013ab1

08013d74 <__sfputc_r>:
 8013d74:	6893      	ldr	r3, [r2, #8]
 8013d76:	b510      	push	{r4, lr}
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	6093      	str	r3, [r2, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	da04      	bge.n	8013d8a <__sfputc_r+0x16>
 8013d80:	6994      	ldr	r4, [r2, #24]
 8013d82:	42a3      	cmp	r3, r4
 8013d84:	db07      	blt.n	8013d96 <__sfputc_r+0x22>
 8013d86:	290a      	cmp	r1, #10
 8013d88:	d005      	beq.n	8013d96 <__sfputc_r+0x22>
 8013d8a:	6813      	ldr	r3, [r2, #0]
 8013d8c:	1c58      	adds	r0, r3, #1
 8013d8e:	6010      	str	r0, [r2, #0]
 8013d90:	7019      	strb	r1, [r3, #0]
 8013d92:	0008      	movs	r0, r1
 8013d94:	bd10      	pop	{r4, pc}
 8013d96:	f7fe f815 	bl	8011dc4 <__swbuf_r>
 8013d9a:	0001      	movs	r1, r0
 8013d9c:	e7f9      	b.n	8013d92 <__sfputc_r+0x1e>

08013d9e <__sfputs_r>:
 8013d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da0:	0006      	movs	r6, r0
 8013da2:	000f      	movs	r7, r1
 8013da4:	0014      	movs	r4, r2
 8013da6:	18d5      	adds	r5, r2, r3
 8013da8:	42ac      	cmp	r4, r5
 8013daa:	d101      	bne.n	8013db0 <__sfputs_r+0x12>
 8013dac:	2000      	movs	r0, #0
 8013dae:	e007      	b.n	8013dc0 <__sfputs_r+0x22>
 8013db0:	7821      	ldrb	r1, [r4, #0]
 8013db2:	003a      	movs	r2, r7
 8013db4:	0030      	movs	r0, r6
 8013db6:	f7ff ffdd 	bl	8013d74 <__sfputc_r>
 8013dba:	3401      	adds	r4, #1
 8013dbc:	1c43      	adds	r3, r0, #1
 8013dbe:	d1f3      	bne.n	8013da8 <__sfputs_r+0xa>
 8013dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013dc4 <_vfiprintf_r>:
 8013dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dc6:	b0a1      	sub	sp, #132	; 0x84
 8013dc8:	0006      	movs	r6, r0
 8013dca:	000c      	movs	r4, r1
 8013dcc:	001f      	movs	r7, r3
 8013dce:	9203      	str	r2, [sp, #12]
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d004      	beq.n	8013dde <_vfiprintf_r+0x1a>
 8013dd4:	6983      	ldr	r3, [r0, #24]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d101      	bne.n	8013dde <_vfiprintf_r+0x1a>
 8013dda:	f7ff f895 	bl	8012f08 <__sinit>
 8013dde:	4b8e      	ldr	r3, [pc, #568]	; (8014018 <_vfiprintf_r+0x254>)
 8013de0:	429c      	cmp	r4, r3
 8013de2:	d11c      	bne.n	8013e1e <_vfiprintf_r+0x5a>
 8013de4:	6874      	ldr	r4, [r6, #4]
 8013de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013de8:	07db      	lsls	r3, r3, #31
 8013dea:	d405      	bmi.n	8013df8 <_vfiprintf_r+0x34>
 8013dec:	89a3      	ldrh	r3, [r4, #12]
 8013dee:	059b      	lsls	r3, r3, #22
 8013df0:	d402      	bmi.n	8013df8 <_vfiprintf_r+0x34>
 8013df2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013df4:	f7ff f92d 	bl	8013052 <__retarget_lock_acquire_recursive>
 8013df8:	89a3      	ldrh	r3, [r4, #12]
 8013dfa:	071b      	lsls	r3, r3, #28
 8013dfc:	d502      	bpl.n	8013e04 <_vfiprintf_r+0x40>
 8013dfe:	6923      	ldr	r3, [r4, #16]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d11d      	bne.n	8013e40 <_vfiprintf_r+0x7c>
 8013e04:	0021      	movs	r1, r4
 8013e06:	0030      	movs	r0, r6
 8013e08:	f7fe f832 	bl	8011e70 <__swsetup_r>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d017      	beq.n	8013e40 <_vfiprintf_r+0x7c>
 8013e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e12:	07db      	lsls	r3, r3, #31
 8013e14:	d50d      	bpl.n	8013e32 <_vfiprintf_r+0x6e>
 8013e16:	2001      	movs	r0, #1
 8013e18:	4240      	negs	r0, r0
 8013e1a:	b021      	add	sp, #132	; 0x84
 8013e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e1e:	4b7f      	ldr	r3, [pc, #508]	; (801401c <_vfiprintf_r+0x258>)
 8013e20:	429c      	cmp	r4, r3
 8013e22:	d101      	bne.n	8013e28 <_vfiprintf_r+0x64>
 8013e24:	68b4      	ldr	r4, [r6, #8]
 8013e26:	e7de      	b.n	8013de6 <_vfiprintf_r+0x22>
 8013e28:	4b7d      	ldr	r3, [pc, #500]	; (8014020 <_vfiprintf_r+0x25c>)
 8013e2a:	429c      	cmp	r4, r3
 8013e2c:	d1db      	bne.n	8013de6 <_vfiprintf_r+0x22>
 8013e2e:	68f4      	ldr	r4, [r6, #12]
 8013e30:	e7d9      	b.n	8013de6 <_vfiprintf_r+0x22>
 8013e32:	89a3      	ldrh	r3, [r4, #12]
 8013e34:	059b      	lsls	r3, r3, #22
 8013e36:	d4ee      	bmi.n	8013e16 <_vfiprintf_r+0x52>
 8013e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e3a:	f7ff f90b 	bl	8013054 <__retarget_lock_release_recursive>
 8013e3e:	e7ea      	b.n	8013e16 <_vfiprintf_r+0x52>
 8013e40:	2300      	movs	r3, #0
 8013e42:	ad08      	add	r5, sp, #32
 8013e44:	616b      	str	r3, [r5, #20]
 8013e46:	3320      	adds	r3, #32
 8013e48:	766b      	strb	r3, [r5, #25]
 8013e4a:	3310      	adds	r3, #16
 8013e4c:	76ab      	strb	r3, [r5, #26]
 8013e4e:	9707      	str	r7, [sp, #28]
 8013e50:	9f03      	ldr	r7, [sp, #12]
 8013e52:	783b      	ldrb	r3, [r7, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <_vfiprintf_r+0x98>
 8013e58:	2b25      	cmp	r3, #37	; 0x25
 8013e5a:	d14e      	bne.n	8013efa <_vfiprintf_r+0x136>
 8013e5c:	9b03      	ldr	r3, [sp, #12]
 8013e5e:	1afb      	subs	r3, r7, r3
 8013e60:	9305      	str	r3, [sp, #20]
 8013e62:	9b03      	ldr	r3, [sp, #12]
 8013e64:	429f      	cmp	r7, r3
 8013e66:	d00d      	beq.n	8013e84 <_vfiprintf_r+0xc0>
 8013e68:	9b05      	ldr	r3, [sp, #20]
 8013e6a:	0021      	movs	r1, r4
 8013e6c:	0030      	movs	r0, r6
 8013e6e:	9a03      	ldr	r2, [sp, #12]
 8013e70:	f7ff ff95 	bl	8013d9e <__sfputs_r>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	d100      	bne.n	8013e7a <_vfiprintf_r+0xb6>
 8013e78:	e0b5      	b.n	8013fe6 <_vfiprintf_r+0x222>
 8013e7a:	696a      	ldr	r2, [r5, #20]
 8013e7c:	9b05      	ldr	r3, [sp, #20]
 8013e7e:	4694      	mov	ip, r2
 8013e80:	4463      	add	r3, ip
 8013e82:	616b      	str	r3, [r5, #20]
 8013e84:	783b      	ldrb	r3, [r7, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d100      	bne.n	8013e8c <_vfiprintf_r+0xc8>
 8013e8a:	e0ac      	b.n	8013fe6 <_vfiprintf_r+0x222>
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	1c7b      	adds	r3, r7, #1
 8013e90:	9303      	str	r3, [sp, #12]
 8013e92:	2300      	movs	r3, #0
 8013e94:	4252      	negs	r2, r2
 8013e96:	606a      	str	r2, [r5, #4]
 8013e98:	a904      	add	r1, sp, #16
 8013e9a:	3254      	adds	r2, #84	; 0x54
 8013e9c:	1852      	adds	r2, r2, r1
 8013e9e:	602b      	str	r3, [r5, #0]
 8013ea0:	60eb      	str	r3, [r5, #12]
 8013ea2:	60ab      	str	r3, [r5, #8]
 8013ea4:	7013      	strb	r3, [r2, #0]
 8013ea6:	65ab      	str	r3, [r5, #88]	; 0x58
 8013ea8:	9b03      	ldr	r3, [sp, #12]
 8013eaa:	2205      	movs	r2, #5
 8013eac:	7819      	ldrb	r1, [r3, #0]
 8013eae:	485d      	ldr	r0, [pc, #372]	; (8014024 <_vfiprintf_r+0x260>)
 8013eb0:	f7ff f948 	bl	8013144 <memchr>
 8013eb4:	9b03      	ldr	r3, [sp, #12]
 8013eb6:	1c5f      	adds	r7, r3, #1
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d120      	bne.n	8013efe <_vfiprintf_r+0x13a>
 8013ebc:	682a      	ldr	r2, [r5, #0]
 8013ebe:	06d3      	lsls	r3, r2, #27
 8013ec0:	d504      	bpl.n	8013ecc <_vfiprintf_r+0x108>
 8013ec2:	2353      	movs	r3, #83	; 0x53
 8013ec4:	a904      	add	r1, sp, #16
 8013ec6:	185b      	adds	r3, r3, r1
 8013ec8:	2120      	movs	r1, #32
 8013eca:	7019      	strb	r1, [r3, #0]
 8013ecc:	0713      	lsls	r3, r2, #28
 8013ece:	d504      	bpl.n	8013eda <_vfiprintf_r+0x116>
 8013ed0:	2353      	movs	r3, #83	; 0x53
 8013ed2:	a904      	add	r1, sp, #16
 8013ed4:	185b      	adds	r3, r3, r1
 8013ed6:	212b      	movs	r1, #43	; 0x2b
 8013ed8:	7019      	strb	r1, [r3, #0]
 8013eda:	9b03      	ldr	r3, [sp, #12]
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	2b2a      	cmp	r3, #42	; 0x2a
 8013ee0:	d016      	beq.n	8013f10 <_vfiprintf_r+0x14c>
 8013ee2:	2100      	movs	r1, #0
 8013ee4:	68eb      	ldr	r3, [r5, #12]
 8013ee6:	9f03      	ldr	r7, [sp, #12]
 8013ee8:	783a      	ldrb	r2, [r7, #0]
 8013eea:	1c78      	adds	r0, r7, #1
 8013eec:	3a30      	subs	r2, #48	; 0x30
 8013eee:	4684      	mov	ip, r0
 8013ef0:	2a09      	cmp	r2, #9
 8013ef2:	d94f      	bls.n	8013f94 <_vfiprintf_r+0x1d0>
 8013ef4:	2900      	cmp	r1, #0
 8013ef6:	d111      	bne.n	8013f1c <_vfiprintf_r+0x158>
 8013ef8:	e017      	b.n	8013f2a <_vfiprintf_r+0x166>
 8013efa:	3701      	adds	r7, #1
 8013efc:	e7a9      	b.n	8013e52 <_vfiprintf_r+0x8e>
 8013efe:	4b49      	ldr	r3, [pc, #292]	; (8014024 <_vfiprintf_r+0x260>)
 8013f00:	682a      	ldr	r2, [r5, #0]
 8013f02:	1ac0      	subs	r0, r0, r3
 8013f04:	2301      	movs	r3, #1
 8013f06:	4083      	lsls	r3, r0
 8013f08:	4313      	orrs	r3, r2
 8013f0a:	602b      	str	r3, [r5, #0]
 8013f0c:	9703      	str	r7, [sp, #12]
 8013f0e:	e7cb      	b.n	8013ea8 <_vfiprintf_r+0xe4>
 8013f10:	9b07      	ldr	r3, [sp, #28]
 8013f12:	1d19      	adds	r1, r3, #4
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	9107      	str	r1, [sp, #28]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	db01      	blt.n	8013f20 <_vfiprintf_r+0x15c>
 8013f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f1e:	e004      	b.n	8013f2a <_vfiprintf_r+0x166>
 8013f20:	425b      	negs	r3, r3
 8013f22:	60eb      	str	r3, [r5, #12]
 8013f24:	2302      	movs	r3, #2
 8013f26:	4313      	orrs	r3, r2
 8013f28:	602b      	str	r3, [r5, #0]
 8013f2a:	783b      	ldrb	r3, [r7, #0]
 8013f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f2e:	d10a      	bne.n	8013f46 <_vfiprintf_r+0x182>
 8013f30:	787b      	ldrb	r3, [r7, #1]
 8013f32:	2b2a      	cmp	r3, #42	; 0x2a
 8013f34:	d137      	bne.n	8013fa6 <_vfiprintf_r+0x1e2>
 8013f36:	9b07      	ldr	r3, [sp, #28]
 8013f38:	3702      	adds	r7, #2
 8013f3a:	1d1a      	adds	r2, r3, #4
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	9207      	str	r2, [sp, #28]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	db2d      	blt.n	8013fa0 <_vfiprintf_r+0x1dc>
 8013f44:	9309      	str	r3, [sp, #36]	; 0x24
 8013f46:	2203      	movs	r2, #3
 8013f48:	7839      	ldrb	r1, [r7, #0]
 8013f4a:	4837      	ldr	r0, [pc, #220]	; (8014028 <_vfiprintf_r+0x264>)
 8013f4c:	f7ff f8fa 	bl	8013144 <memchr>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d007      	beq.n	8013f64 <_vfiprintf_r+0x1a0>
 8013f54:	4b34      	ldr	r3, [pc, #208]	; (8014028 <_vfiprintf_r+0x264>)
 8013f56:	682a      	ldr	r2, [r5, #0]
 8013f58:	1ac0      	subs	r0, r0, r3
 8013f5a:	2340      	movs	r3, #64	; 0x40
 8013f5c:	4083      	lsls	r3, r0
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	3701      	adds	r7, #1
 8013f62:	602b      	str	r3, [r5, #0]
 8013f64:	7839      	ldrb	r1, [r7, #0]
 8013f66:	1c7b      	adds	r3, r7, #1
 8013f68:	2206      	movs	r2, #6
 8013f6a:	4830      	ldr	r0, [pc, #192]	; (801402c <_vfiprintf_r+0x268>)
 8013f6c:	9303      	str	r3, [sp, #12]
 8013f6e:	7629      	strb	r1, [r5, #24]
 8013f70:	f7ff f8e8 	bl	8013144 <memchr>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d045      	beq.n	8014004 <_vfiprintf_r+0x240>
 8013f78:	4b2d      	ldr	r3, [pc, #180]	; (8014030 <_vfiprintf_r+0x26c>)
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d127      	bne.n	8013fce <_vfiprintf_r+0x20a>
 8013f7e:	2207      	movs	r2, #7
 8013f80:	9b07      	ldr	r3, [sp, #28]
 8013f82:	3307      	adds	r3, #7
 8013f84:	4393      	bics	r3, r2
 8013f86:	3308      	adds	r3, #8
 8013f88:	9307      	str	r3, [sp, #28]
 8013f8a:	696b      	ldr	r3, [r5, #20]
 8013f8c:	9a04      	ldr	r2, [sp, #16]
 8013f8e:	189b      	adds	r3, r3, r2
 8013f90:	616b      	str	r3, [r5, #20]
 8013f92:	e75d      	b.n	8013e50 <_vfiprintf_r+0x8c>
 8013f94:	210a      	movs	r1, #10
 8013f96:	434b      	muls	r3, r1
 8013f98:	4667      	mov	r7, ip
 8013f9a:	189b      	adds	r3, r3, r2
 8013f9c:	3909      	subs	r1, #9
 8013f9e:	e7a3      	b.n	8013ee8 <_vfiprintf_r+0x124>
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	425b      	negs	r3, r3
 8013fa4:	e7ce      	b.n	8013f44 <_vfiprintf_r+0x180>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	001a      	movs	r2, r3
 8013faa:	3701      	adds	r7, #1
 8013fac:	606b      	str	r3, [r5, #4]
 8013fae:	7839      	ldrb	r1, [r7, #0]
 8013fb0:	1c78      	adds	r0, r7, #1
 8013fb2:	3930      	subs	r1, #48	; 0x30
 8013fb4:	4684      	mov	ip, r0
 8013fb6:	2909      	cmp	r1, #9
 8013fb8:	d903      	bls.n	8013fc2 <_vfiprintf_r+0x1fe>
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d0c3      	beq.n	8013f46 <_vfiprintf_r+0x182>
 8013fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8013fc0:	e7c1      	b.n	8013f46 <_vfiprintf_r+0x182>
 8013fc2:	230a      	movs	r3, #10
 8013fc4:	435a      	muls	r2, r3
 8013fc6:	4667      	mov	r7, ip
 8013fc8:	1852      	adds	r2, r2, r1
 8013fca:	3b09      	subs	r3, #9
 8013fcc:	e7ef      	b.n	8013fae <_vfiprintf_r+0x1ea>
 8013fce:	ab07      	add	r3, sp, #28
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	0022      	movs	r2, r4
 8013fd4:	0029      	movs	r1, r5
 8013fd6:	0030      	movs	r0, r6
 8013fd8:	4b16      	ldr	r3, [pc, #88]	; (8014034 <_vfiprintf_r+0x270>)
 8013fda:	f7fd fa71 	bl	80114c0 <_printf_float>
 8013fde:	9004      	str	r0, [sp, #16]
 8013fe0:	9b04      	ldr	r3, [sp, #16]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	d1d1      	bne.n	8013f8a <_vfiprintf_r+0x1c6>
 8013fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013fe8:	07db      	lsls	r3, r3, #31
 8013fea:	d405      	bmi.n	8013ff8 <_vfiprintf_r+0x234>
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	059b      	lsls	r3, r3, #22
 8013ff0:	d402      	bmi.n	8013ff8 <_vfiprintf_r+0x234>
 8013ff2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ff4:	f7ff f82e 	bl	8013054 <__retarget_lock_release_recursive>
 8013ff8:	89a3      	ldrh	r3, [r4, #12]
 8013ffa:	065b      	lsls	r3, r3, #25
 8013ffc:	d500      	bpl.n	8014000 <_vfiprintf_r+0x23c>
 8013ffe:	e70a      	b.n	8013e16 <_vfiprintf_r+0x52>
 8014000:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014002:	e70a      	b.n	8013e1a <_vfiprintf_r+0x56>
 8014004:	ab07      	add	r3, sp, #28
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	0022      	movs	r2, r4
 801400a:	0029      	movs	r1, r5
 801400c:	0030      	movs	r0, r6
 801400e:	4b09      	ldr	r3, [pc, #36]	; (8014034 <_vfiprintf_r+0x270>)
 8014010:	f7fd fd08 	bl	8011a24 <_printf_i>
 8014014:	e7e3      	b.n	8013fde <_vfiprintf_r+0x21a>
 8014016:	46c0      	nop			; (mov r8, r8)
 8014018:	08015094 	.word	0x08015094
 801401c:	080150b4 	.word	0x080150b4
 8014020:	08015074 	.word	0x08015074
 8014024:	0801522c 	.word	0x0801522c
 8014028:	08015232 	.word	0x08015232
 801402c:	08015236 	.word	0x08015236
 8014030:	080114c1 	.word	0x080114c1
 8014034:	08013d9f 	.word	0x08013d9f

08014038 <_sbrk_r>:
 8014038:	2300      	movs	r3, #0
 801403a:	b570      	push	{r4, r5, r6, lr}
 801403c:	4d06      	ldr	r5, [pc, #24]	; (8014058 <_sbrk_r+0x20>)
 801403e:	0004      	movs	r4, r0
 8014040:	0008      	movs	r0, r1
 8014042:	602b      	str	r3, [r5, #0]
 8014044:	f7ef fdd8 	bl	8003bf8 <_sbrk>
 8014048:	1c43      	adds	r3, r0, #1
 801404a:	d103      	bne.n	8014054 <_sbrk_r+0x1c>
 801404c:	682b      	ldr	r3, [r5, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d000      	beq.n	8014054 <_sbrk_r+0x1c>
 8014052:	6023      	str	r3, [r4, #0]
 8014054:	bd70      	pop	{r4, r5, r6, pc}
 8014056:	46c0      	nop			; (mov r8, r8)
 8014058:	2000832c 	.word	0x2000832c

0801405c <__sread>:
 801405c:	b570      	push	{r4, r5, r6, lr}
 801405e:	000c      	movs	r4, r1
 8014060:	250e      	movs	r5, #14
 8014062:	5f49      	ldrsh	r1, [r1, r5]
 8014064:	f000 f938 	bl	80142d8 <_read_r>
 8014068:	2800      	cmp	r0, #0
 801406a:	db03      	blt.n	8014074 <__sread+0x18>
 801406c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801406e:	181b      	adds	r3, r3, r0
 8014070:	6563      	str	r3, [r4, #84]	; 0x54
 8014072:	bd70      	pop	{r4, r5, r6, pc}
 8014074:	89a3      	ldrh	r3, [r4, #12]
 8014076:	4a02      	ldr	r2, [pc, #8]	; (8014080 <__sread+0x24>)
 8014078:	4013      	ands	r3, r2
 801407a:	81a3      	strh	r3, [r4, #12]
 801407c:	e7f9      	b.n	8014072 <__sread+0x16>
 801407e:	46c0      	nop			; (mov r8, r8)
 8014080:	ffffefff 	.word	0xffffefff

08014084 <__swrite>:
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014086:	001f      	movs	r7, r3
 8014088:	898b      	ldrh	r3, [r1, #12]
 801408a:	0005      	movs	r5, r0
 801408c:	000c      	movs	r4, r1
 801408e:	0016      	movs	r6, r2
 8014090:	05db      	lsls	r3, r3, #23
 8014092:	d505      	bpl.n	80140a0 <__swrite+0x1c>
 8014094:	230e      	movs	r3, #14
 8014096:	5ec9      	ldrsh	r1, [r1, r3]
 8014098:	2200      	movs	r2, #0
 801409a:	2302      	movs	r3, #2
 801409c:	f000 f8a2 	bl	80141e4 <_lseek_r>
 80140a0:	89a3      	ldrh	r3, [r4, #12]
 80140a2:	4a05      	ldr	r2, [pc, #20]	; (80140b8 <__swrite+0x34>)
 80140a4:	0028      	movs	r0, r5
 80140a6:	4013      	ands	r3, r2
 80140a8:	81a3      	strh	r3, [r4, #12]
 80140aa:	0032      	movs	r2, r6
 80140ac:	230e      	movs	r3, #14
 80140ae:	5ee1      	ldrsh	r1, [r4, r3]
 80140b0:	003b      	movs	r3, r7
 80140b2:	f000 f81f 	bl	80140f4 <_write_r>
 80140b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b8:	ffffefff 	.word	0xffffefff

080140bc <__sseek>:
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	000c      	movs	r4, r1
 80140c0:	250e      	movs	r5, #14
 80140c2:	5f49      	ldrsh	r1, [r1, r5]
 80140c4:	f000 f88e 	bl	80141e4 <_lseek_r>
 80140c8:	89a3      	ldrh	r3, [r4, #12]
 80140ca:	1c42      	adds	r2, r0, #1
 80140cc:	d103      	bne.n	80140d6 <__sseek+0x1a>
 80140ce:	4a05      	ldr	r2, [pc, #20]	; (80140e4 <__sseek+0x28>)
 80140d0:	4013      	ands	r3, r2
 80140d2:	81a3      	strh	r3, [r4, #12]
 80140d4:	bd70      	pop	{r4, r5, r6, pc}
 80140d6:	2280      	movs	r2, #128	; 0x80
 80140d8:	0152      	lsls	r2, r2, #5
 80140da:	4313      	orrs	r3, r2
 80140dc:	81a3      	strh	r3, [r4, #12]
 80140de:	6560      	str	r0, [r4, #84]	; 0x54
 80140e0:	e7f8      	b.n	80140d4 <__sseek+0x18>
 80140e2:	46c0      	nop			; (mov r8, r8)
 80140e4:	ffffefff 	.word	0xffffefff

080140e8 <__sclose>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	230e      	movs	r3, #14
 80140ec:	5ec9      	ldrsh	r1, [r1, r3]
 80140ee:	f000 f833 	bl	8014158 <_close_r>
 80140f2:	bd10      	pop	{r4, pc}

080140f4 <_write_r>:
 80140f4:	b570      	push	{r4, r5, r6, lr}
 80140f6:	0004      	movs	r4, r0
 80140f8:	0008      	movs	r0, r1
 80140fa:	0011      	movs	r1, r2
 80140fc:	001a      	movs	r2, r3
 80140fe:	2300      	movs	r3, #0
 8014100:	4d05      	ldr	r5, [pc, #20]	; (8014118 <_write_r+0x24>)
 8014102:	602b      	str	r3, [r5, #0]
 8014104:	f7ef fd2f 	bl	8003b66 <_write>
 8014108:	1c43      	adds	r3, r0, #1
 801410a:	d103      	bne.n	8014114 <_write_r+0x20>
 801410c:	682b      	ldr	r3, [r5, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d000      	beq.n	8014114 <_write_r+0x20>
 8014112:	6023      	str	r3, [r4, #0]
 8014114:	bd70      	pop	{r4, r5, r6, pc}
 8014116:	46c0      	nop			; (mov r8, r8)
 8014118:	2000832c 	.word	0x2000832c

0801411c <__assert_func>:
 801411c:	b530      	push	{r4, r5, lr}
 801411e:	0014      	movs	r4, r2
 8014120:	001a      	movs	r2, r3
 8014122:	4b09      	ldr	r3, [pc, #36]	; (8014148 <__assert_func+0x2c>)
 8014124:	0005      	movs	r5, r0
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	b085      	sub	sp, #20
 801412a:	68d8      	ldr	r0, [r3, #12]
 801412c:	4b07      	ldr	r3, [pc, #28]	; (801414c <__assert_func+0x30>)
 801412e:	2c00      	cmp	r4, #0
 8014130:	d101      	bne.n	8014136 <__assert_func+0x1a>
 8014132:	4b07      	ldr	r3, [pc, #28]	; (8014150 <__assert_func+0x34>)
 8014134:	001c      	movs	r4, r3
 8014136:	9301      	str	r3, [sp, #4]
 8014138:	9100      	str	r1, [sp, #0]
 801413a:	002b      	movs	r3, r5
 801413c:	4905      	ldr	r1, [pc, #20]	; (8014154 <__assert_func+0x38>)
 801413e:	9402      	str	r4, [sp, #8]
 8014140:	f000 f81c 	bl	801417c <fiprintf>
 8014144:	f000 f8e9 	bl	801431a <abort>
 8014148:	200002ec 	.word	0x200002ec
 801414c:	0801523d 	.word	0x0801523d
 8014150:	08015278 	.word	0x08015278
 8014154:	0801524a 	.word	0x0801524a

08014158 <_close_r>:
 8014158:	2300      	movs	r3, #0
 801415a:	b570      	push	{r4, r5, r6, lr}
 801415c:	4d06      	ldr	r5, [pc, #24]	; (8014178 <_close_r+0x20>)
 801415e:	0004      	movs	r4, r0
 8014160:	0008      	movs	r0, r1
 8014162:	602b      	str	r3, [r5, #0]
 8014164:	f7ef fd1b 	bl	8003b9e <_close>
 8014168:	1c43      	adds	r3, r0, #1
 801416a:	d103      	bne.n	8014174 <_close_r+0x1c>
 801416c:	682b      	ldr	r3, [r5, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d000      	beq.n	8014174 <_close_r+0x1c>
 8014172:	6023      	str	r3, [r4, #0]
 8014174:	bd70      	pop	{r4, r5, r6, pc}
 8014176:	46c0      	nop			; (mov r8, r8)
 8014178:	2000832c 	.word	0x2000832c

0801417c <fiprintf>:
 801417c:	b40e      	push	{r1, r2, r3}
 801417e:	b503      	push	{r0, r1, lr}
 8014180:	0001      	movs	r1, r0
 8014182:	ab03      	add	r3, sp, #12
 8014184:	4804      	ldr	r0, [pc, #16]	; (8014198 <fiprintf+0x1c>)
 8014186:	cb04      	ldmia	r3!, {r2}
 8014188:	6800      	ldr	r0, [r0, #0]
 801418a:	9301      	str	r3, [sp, #4]
 801418c:	f7ff fe1a 	bl	8013dc4 <_vfiprintf_r>
 8014190:	b002      	add	sp, #8
 8014192:	bc08      	pop	{r3}
 8014194:	b003      	add	sp, #12
 8014196:	4718      	bx	r3
 8014198:	200002ec 	.word	0x200002ec

0801419c <_fstat_r>:
 801419c:	2300      	movs	r3, #0
 801419e:	b570      	push	{r4, r5, r6, lr}
 80141a0:	4d06      	ldr	r5, [pc, #24]	; (80141bc <_fstat_r+0x20>)
 80141a2:	0004      	movs	r4, r0
 80141a4:	0008      	movs	r0, r1
 80141a6:	0011      	movs	r1, r2
 80141a8:	602b      	str	r3, [r5, #0]
 80141aa:	f7ef fd02 	bl	8003bb2 <_fstat>
 80141ae:	1c43      	adds	r3, r0, #1
 80141b0:	d103      	bne.n	80141ba <_fstat_r+0x1e>
 80141b2:	682b      	ldr	r3, [r5, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d000      	beq.n	80141ba <_fstat_r+0x1e>
 80141b8:	6023      	str	r3, [r4, #0]
 80141ba:	bd70      	pop	{r4, r5, r6, pc}
 80141bc:	2000832c 	.word	0x2000832c

080141c0 <_isatty_r>:
 80141c0:	2300      	movs	r3, #0
 80141c2:	b570      	push	{r4, r5, r6, lr}
 80141c4:	4d06      	ldr	r5, [pc, #24]	; (80141e0 <_isatty_r+0x20>)
 80141c6:	0004      	movs	r4, r0
 80141c8:	0008      	movs	r0, r1
 80141ca:	602b      	str	r3, [r5, #0]
 80141cc:	f7ef fcff 	bl	8003bce <_isatty>
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	d103      	bne.n	80141dc <_isatty_r+0x1c>
 80141d4:	682b      	ldr	r3, [r5, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d000      	beq.n	80141dc <_isatty_r+0x1c>
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	bd70      	pop	{r4, r5, r6, pc}
 80141de:	46c0      	nop			; (mov r8, r8)
 80141e0:	2000832c 	.word	0x2000832c

080141e4 <_lseek_r>:
 80141e4:	b570      	push	{r4, r5, r6, lr}
 80141e6:	0004      	movs	r4, r0
 80141e8:	0008      	movs	r0, r1
 80141ea:	0011      	movs	r1, r2
 80141ec:	001a      	movs	r2, r3
 80141ee:	2300      	movs	r3, #0
 80141f0:	4d05      	ldr	r5, [pc, #20]	; (8014208 <_lseek_r+0x24>)
 80141f2:	602b      	str	r3, [r5, #0]
 80141f4:	f7ef fcf4 	bl	8003be0 <_lseek>
 80141f8:	1c43      	adds	r3, r0, #1
 80141fa:	d103      	bne.n	8014204 <_lseek_r+0x20>
 80141fc:	682b      	ldr	r3, [r5, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d000      	beq.n	8014204 <_lseek_r+0x20>
 8014202:	6023      	str	r3, [r4, #0]
 8014204:	bd70      	pop	{r4, r5, r6, pc}
 8014206:	46c0      	nop			; (mov r8, r8)
 8014208:	2000832c 	.word	0x2000832c

0801420c <__ascii_mbtowc>:
 801420c:	b082      	sub	sp, #8
 801420e:	2900      	cmp	r1, #0
 8014210:	d100      	bne.n	8014214 <__ascii_mbtowc+0x8>
 8014212:	a901      	add	r1, sp, #4
 8014214:	1e10      	subs	r0, r2, #0
 8014216:	d006      	beq.n	8014226 <__ascii_mbtowc+0x1a>
 8014218:	2b00      	cmp	r3, #0
 801421a:	d006      	beq.n	801422a <__ascii_mbtowc+0x1e>
 801421c:	7813      	ldrb	r3, [r2, #0]
 801421e:	600b      	str	r3, [r1, #0]
 8014220:	7810      	ldrb	r0, [r2, #0]
 8014222:	1e43      	subs	r3, r0, #1
 8014224:	4198      	sbcs	r0, r3
 8014226:	b002      	add	sp, #8
 8014228:	4770      	bx	lr
 801422a:	2002      	movs	r0, #2
 801422c:	4240      	negs	r0, r0
 801422e:	e7fa      	b.n	8014226 <__ascii_mbtowc+0x1a>

08014230 <memmove>:
 8014230:	b510      	push	{r4, lr}
 8014232:	4288      	cmp	r0, r1
 8014234:	d902      	bls.n	801423c <memmove+0xc>
 8014236:	188b      	adds	r3, r1, r2
 8014238:	4298      	cmp	r0, r3
 801423a:	d303      	bcc.n	8014244 <memmove+0x14>
 801423c:	2300      	movs	r3, #0
 801423e:	e007      	b.n	8014250 <memmove+0x20>
 8014240:	5c8b      	ldrb	r3, [r1, r2]
 8014242:	5483      	strb	r3, [r0, r2]
 8014244:	3a01      	subs	r2, #1
 8014246:	d2fb      	bcs.n	8014240 <memmove+0x10>
 8014248:	bd10      	pop	{r4, pc}
 801424a:	5ccc      	ldrb	r4, [r1, r3]
 801424c:	54c4      	strb	r4, [r0, r3]
 801424e:	3301      	adds	r3, #1
 8014250:	429a      	cmp	r2, r3
 8014252:	d1fa      	bne.n	801424a <memmove+0x1a>
 8014254:	e7f8      	b.n	8014248 <memmove+0x18>
	...

08014258 <__malloc_lock>:
 8014258:	b510      	push	{r4, lr}
 801425a:	4802      	ldr	r0, [pc, #8]	; (8014264 <__malloc_lock+0xc>)
 801425c:	f7fe fef9 	bl	8013052 <__retarget_lock_acquire_recursive>
 8014260:	bd10      	pop	{r4, pc}
 8014262:	46c0      	nop			; (mov r8, r8)
 8014264:	20008320 	.word	0x20008320

08014268 <__malloc_unlock>:
 8014268:	b510      	push	{r4, lr}
 801426a:	4802      	ldr	r0, [pc, #8]	; (8014274 <__malloc_unlock+0xc>)
 801426c:	f7fe fef2 	bl	8013054 <__retarget_lock_release_recursive>
 8014270:	bd10      	pop	{r4, pc}
 8014272:	46c0      	nop			; (mov r8, r8)
 8014274:	20008320 	.word	0x20008320

08014278 <_realloc_r>:
 8014278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801427a:	0007      	movs	r7, r0
 801427c:	000e      	movs	r6, r1
 801427e:	0014      	movs	r4, r2
 8014280:	2900      	cmp	r1, #0
 8014282:	d105      	bne.n	8014290 <_realloc_r+0x18>
 8014284:	0011      	movs	r1, r2
 8014286:	f7ff fb9d 	bl	80139c4 <_malloc_r>
 801428a:	0005      	movs	r5, r0
 801428c:	0028      	movs	r0, r5
 801428e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014290:	2a00      	cmp	r2, #0
 8014292:	d103      	bne.n	801429c <_realloc_r+0x24>
 8014294:	f7ff fb2a 	bl	80138ec <_free_r>
 8014298:	0025      	movs	r5, r4
 801429a:	e7f7      	b.n	801428c <_realloc_r+0x14>
 801429c:	f000 f844 	bl	8014328 <_malloc_usable_size_r>
 80142a0:	9001      	str	r0, [sp, #4]
 80142a2:	4284      	cmp	r4, r0
 80142a4:	d803      	bhi.n	80142ae <_realloc_r+0x36>
 80142a6:	0035      	movs	r5, r6
 80142a8:	0843      	lsrs	r3, r0, #1
 80142aa:	42a3      	cmp	r3, r4
 80142ac:	d3ee      	bcc.n	801428c <_realloc_r+0x14>
 80142ae:	0021      	movs	r1, r4
 80142b0:	0038      	movs	r0, r7
 80142b2:	f7ff fb87 	bl	80139c4 <_malloc_r>
 80142b6:	1e05      	subs	r5, r0, #0
 80142b8:	d0e8      	beq.n	801428c <_realloc_r+0x14>
 80142ba:	9b01      	ldr	r3, [sp, #4]
 80142bc:	0022      	movs	r2, r4
 80142be:	429c      	cmp	r4, r3
 80142c0:	d900      	bls.n	80142c4 <_realloc_r+0x4c>
 80142c2:	001a      	movs	r2, r3
 80142c4:	0031      	movs	r1, r6
 80142c6:	0028      	movs	r0, r5
 80142c8:	f7fd f83e 	bl	8011348 <memcpy>
 80142cc:	0031      	movs	r1, r6
 80142ce:	0038      	movs	r0, r7
 80142d0:	f7ff fb0c 	bl	80138ec <_free_r>
 80142d4:	e7da      	b.n	801428c <_realloc_r+0x14>
	...

080142d8 <_read_r>:
 80142d8:	b570      	push	{r4, r5, r6, lr}
 80142da:	0004      	movs	r4, r0
 80142dc:	0008      	movs	r0, r1
 80142de:	0011      	movs	r1, r2
 80142e0:	001a      	movs	r2, r3
 80142e2:	2300      	movs	r3, #0
 80142e4:	4d05      	ldr	r5, [pc, #20]	; (80142fc <_read_r+0x24>)
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	f7ef fc20 	bl	8003b2c <_read>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d103      	bne.n	80142f8 <_read_r+0x20>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d000      	beq.n	80142f8 <_read_r+0x20>
 80142f6:	6023      	str	r3, [r4, #0]
 80142f8:	bd70      	pop	{r4, r5, r6, pc}
 80142fa:	46c0      	nop			; (mov r8, r8)
 80142fc:	2000832c 	.word	0x2000832c

08014300 <__ascii_wctomb>:
 8014300:	0003      	movs	r3, r0
 8014302:	1e08      	subs	r0, r1, #0
 8014304:	d005      	beq.n	8014312 <__ascii_wctomb+0x12>
 8014306:	2aff      	cmp	r2, #255	; 0xff
 8014308:	d904      	bls.n	8014314 <__ascii_wctomb+0x14>
 801430a:	228a      	movs	r2, #138	; 0x8a
 801430c:	2001      	movs	r0, #1
 801430e:	601a      	str	r2, [r3, #0]
 8014310:	4240      	negs	r0, r0
 8014312:	4770      	bx	lr
 8014314:	2001      	movs	r0, #1
 8014316:	700a      	strb	r2, [r1, #0]
 8014318:	e7fb      	b.n	8014312 <__ascii_wctomb+0x12>

0801431a <abort>:
 801431a:	2006      	movs	r0, #6
 801431c:	b510      	push	{r4, lr}
 801431e:	f000 f835 	bl	801438c <raise>
 8014322:	2001      	movs	r0, #1
 8014324:	f7ef fbf6 	bl	8003b14 <_exit>

08014328 <_malloc_usable_size_r>:
 8014328:	1f0b      	subs	r3, r1, #4
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	1f18      	subs	r0, r3, #4
 801432e:	2b00      	cmp	r3, #0
 8014330:	da01      	bge.n	8014336 <_malloc_usable_size_r+0xe>
 8014332:	580b      	ldr	r3, [r1, r0]
 8014334:	18c0      	adds	r0, r0, r3
 8014336:	4770      	bx	lr

08014338 <_raise_r>:
 8014338:	b570      	push	{r4, r5, r6, lr}
 801433a:	0004      	movs	r4, r0
 801433c:	000d      	movs	r5, r1
 801433e:	291f      	cmp	r1, #31
 8014340:	d904      	bls.n	801434c <_raise_r+0x14>
 8014342:	2316      	movs	r3, #22
 8014344:	6003      	str	r3, [r0, #0]
 8014346:	2001      	movs	r0, #1
 8014348:	4240      	negs	r0, r0
 801434a:	bd70      	pop	{r4, r5, r6, pc}
 801434c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801434e:	2b00      	cmp	r3, #0
 8014350:	d004      	beq.n	801435c <_raise_r+0x24>
 8014352:	008a      	lsls	r2, r1, #2
 8014354:	189b      	adds	r3, r3, r2
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	2a00      	cmp	r2, #0
 801435a:	d108      	bne.n	801436e <_raise_r+0x36>
 801435c:	0020      	movs	r0, r4
 801435e:	f000 f831 	bl	80143c4 <_getpid_r>
 8014362:	002a      	movs	r2, r5
 8014364:	0001      	movs	r1, r0
 8014366:	0020      	movs	r0, r4
 8014368:	f000 f81a 	bl	80143a0 <_kill_r>
 801436c:	e7ed      	b.n	801434a <_raise_r+0x12>
 801436e:	2000      	movs	r0, #0
 8014370:	2a01      	cmp	r2, #1
 8014372:	d0ea      	beq.n	801434a <_raise_r+0x12>
 8014374:	1c51      	adds	r1, r2, #1
 8014376:	d103      	bne.n	8014380 <_raise_r+0x48>
 8014378:	2316      	movs	r3, #22
 801437a:	3001      	adds	r0, #1
 801437c:	6023      	str	r3, [r4, #0]
 801437e:	e7e4      	b.n	801434a <_raise_r+0x12>
 8014380:	2400      	movs	r4, #0
 8014382:	0028      	movs	r0, r5
 8014384:	601c      	str	r4, [r3, #0]
 8014386:	4790      	blx	r2
 8014388:	0020      	movs	r0, r4
 801438a:	e7de      	b.n	801434a <_raise_r+0x12>

0801438c <raise>:
 801438c:	b510      	push	{r4, lr}
 801438e:	4b03      	ldr	r3, [pc, #12]	; (801439c <raise+0x10>)
 8014390:	0001      	movs	r1, r0
 8014392:	6818      	ldr	r0, [r3, #0]
 8014394:	f7ff ffd0 	bl	8014338 <_raise_r>
 8014398:	bd10      	pop	{r4, pc}
 801439a:	46c0      	nop			; (mov r8, r8)
 801439c:	200002ec 	.word	0x200002ec

080143a0 <_kill_r>:
 80143a0:	2300      	movs	r3, #0
 80143a2:	b570      	push	{r4, r5, r6, lr}
 80143a4:	4d06      	ldr	r5, [pc, #24]	; (80143c0 <_kill_r+0x20>)
 80143a6:	0004      	movs	r4, r0
 80143a8:	0008      	movs	r0, r1
 80143aa:	0011      	movs	r1, r2
 80143ac:	602b      	str	r3, [r5, #0]
 80143ae:	f7ef fba1 	bl	8003af4 <_kill>
 80143b2:	1c43      	adds	r3, r0, #1
 80143b4:	d103      	bne.n	80143be <_kill_r+0x1e>
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d000      	beq.n	80143be <_kill_r+0x1e>
 80143bc:	6023      	str	r3, [r4, #0]
 80143be:	bd70      	pop	{r4, r5, r6, pc}
 80143c0:	2000832c 	.word	0x2000832c

080143c4 <_getpid_r>:
 80143c4:	b510      	push	{r4, lr}
 80143c6:	f7ef fb8f 	bl	8003ae8 <_getpid>
 80143ca:	bd10      	pop	{r4, pc}

080143cc <_init>:
 80143cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ce:	46c0      	nop			; (mov r8, r8)
 80143d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143d2:	bc08      	pop	{r3}
 80143d4:	469e      	mov	lr, r3
 80143d6:	4770      	bx	lr

080143d8 <_fini>:
 80143d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143da:	46c0      	nop			; (mov r8, r8)
 80143dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143de:	bc08      	pop	{r3}
 80143e0:	469e      	mov	lr, r3
 80143e2:	4770      	bx	lr
